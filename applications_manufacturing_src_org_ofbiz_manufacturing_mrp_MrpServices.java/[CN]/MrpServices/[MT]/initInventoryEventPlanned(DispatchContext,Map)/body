{
  GenericDelegator delegator=ctx.getDelegator();
  Timestamp now=UtilDateTime.nowTimestamp();
  Debug.logInfo("initInventoryEventPlanned called",module);
  List listResult=null;
  try {
    listResult=delegator.findAll("InventoryEventPlanned");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error : delegator.findAll(\"InventoryEventPlanned\")",module);
    return ServiceUtil.returnError("Problem, we can not find all the items of InventoryEventPlanned, for more detail look at the log");
  }
  if (listResult != null) {
    try {
      delegator.removeAll(listResult);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error : delegator.removeAll(listResult), listResult =" + listResult,module);
      return ServiceUtil.returnError("Problem, we can not remove the InventoryEventPlanned items, for more detail look at the log");
    }
  }
  listResult=null;
  List listResultRoles=new ArrayList();
  try {
    listResult=delegator.findByAnd("Requirement",UtilMisc.toMap("requirementTypeId","PRODUCT_REQUIREMENT","statusId","REQ_CREATED"));
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Problem, we can not find all the items of InventoryEventPlanned, for more detail look at the log");
  }
  if (listResult != null) {
    try {
      Iterator listResultIt=listResult.iterator();
      while (listResultIt.hasNext()) {
        GenericValue tmpRequirement=(GenericValue)listResultIt.next();
        listResultRoles.addAll(tmpRequirement.getRelated("RequirementRole"));
      }
      delegator.removeAll(listResultRoles);
      delegator.removeAll(listResult);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem, we can not remove the InventoryEventPlanned items, for more detail look at the log");
    }
  }
  listResult=null;
  try {
    listResult=delegator.findByAnd("Requirement",UtilMisc.toMap("requirementTypeId","INTERNAL_REQUIREMENT","statusId","REQ_CREATED"));
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Problem, we can not find all the items of InventoryEventPlanned, for more detail look at the log");
  }
  if (listResult != null) {
    try {
      delegator.removeAll(listResult);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem, we can not remove the InventoryEventPlanned items, for more detail look at the log");
    }
  }
  GenericValue genericResult=null;
  Map parameters=null;
  List resultList=null;
  Iterator iteratorResult=null;
  resultList=null;
  iteratorResult=null;
  parameters=UtilMisc.toMap("orderTypeId","SALES_ORDER","itemStatusId","ITEM_APPROVED");
  try {
    resultList=delegator.findByAnd("OrderHeaderAndItems",parameters,UtilMisc.toList("orderId"));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error : delegator.findByAnd(\"OrderItem\", parameters\")",module);
    Debug.logError(e,"Error : parameters = " + parameters,module);
    return ServiceUtil.returnError("Problem, we can not find the order items, for more detail look at the log");
  }
  iteratorResult=resultList.iterator();
  while (iteratorResult.hasNext()) {
    genericResult=(GenericValue)iteratorResult.next();
    String productId=genericResult.getString("productId");
    Double eventQuantityTmp=new Double(-1.0 * genericResult.getDouble("quantity").doubleValue());
    Timestamp estimatedShipDate=genericResult.getTimestamp("estimatedDeliveryDate");
    if (estimatedShipDate == null) {
      estimatedShipDate=now;
    }
    parameters=UtilMisc.toMap("productId",productId,"eventDate",estimatedShipDate,"inventoryEventPlanTypeId","SALE_ORDER_SHIP");
    try {
      InventoryEventPlannedServices.createOrUpdateInventoryEventPlanned(parameters,eventQuantityTmp,genericResult.getString("orderId") + "-" + genericResult.getString("orderItemSeqId"),delegator);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem initializing the InventoryEventPlanned entity (SALE_ORDER_SHIP)");
    }
  }
  resultList=null;
  iteratorResult=null;
  parameters=UtilMisc.toMap("requirementTypeId","PRODUCT_REQUIREMENT","statusId","REQ_APPROVED");
  try {
    resultList=delegator.findByAnd("Requirement",parameters);
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Problem, we can not find all the items of InventoryEventPlanned, for more detail look at the log");
  }
  iteratorResult=resultList.iterator();
  while (iteratorResult.hasNext()) {
    genericResult=(GenericValue)iteratorResult.next();
    String productId=genericResult.getString("productId");
    Double eventQuantityTmp=genericResult.getDouble("quantity");
    if (productId == null || eventQuantityTmp == null) {
      continue;
    }
    Timestamp estimatedShipDate=genericResult.getTimestamp("requiredByDate");
    if (estimatedShipDate == null) {
      estimatedShipDate=now;
    }
    parameters=UtilMisc.toMap("productId",productId,"eventDate",estimatedShipDate,"inventoryEventPlanTypeId","PROD_REQ_RECP");
    try {
      InventoryEventPlannedServices.createOrUpdateInventoryEventPlanned(parameters,eventQuantityTmp,genericResult.getString("requirementId"),delegator);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem initializing the InventoryEventPlanned entity (PROD_REQ_RECP)");
    }
  }
  resultList=null;
  iteratorResult=null;
  String orderId=null;
  GenericValue orderDeliverySchedule=null;
  parameters=UtilMisc.toMap("orderTypeId","PURCHASE_ORDER","itemStatusId","ITEM_APPROVED");
  try {
    resultList=delegator.findByAnd("OrderHeaderAndItems",parameters,UtilMisc.toList("orderId"));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error : delegator.findByAnd(\"OrderItem\", parameters\")",module);
    Debug.logError(e,"Error : parameters = " + parameters,module);
    return ServiceUtil.returnError("Problem, we can not find the order items, for more detail look at the log");
  }
  iteratorResult=resultList.iterator();
  while (iteratorResult.hasNext()) {
    genericResult=(GenericValue)iteratorResult.next();
    String newOrderId=genericResult.getString("orderId");
    if (!newOrderId.equals(orderId)) {
      orderDeliverySchedule=null;
      orderId=newOrderId;
      try {
        orderDeliverySchedule=delegator.findByPrimaryKey("OrderDeliverySchedule",UtilMisc.toMap("orderId",orderId,"orderItemSeqId","_NA_"));
      }
 catch (      GenericEntityException e) {
      }
    }
    String productId=genericResult.getString("productId");
    Double eventQuantityTmp=new Double(genericResult.getDouble("quantity").doubleValue());
    GenericValue orderItemDeliverySchedule=null;
    try {
      orderItemDeliverySchedule=delegator.findByPrimaryKey("OrderDeliverySchedule",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",genericResult.getString("orderItemSeqId")));
    }
 catch (    GenericEntityException e) {
    }
    Timestamp estimatedShipDate=null;
    if (orderItemDeliverySchedule != null && orderItemDeliverySchedule.get("estimatedReadyDate") != null) {
      estimatedShipDate=orderItemDeliverySchedule.getTimestamp("estimatedReadyDate");
    }
 else     if (orderDeliverySchedule != null && orderDeliverySchedule.get("estimatedReadyDate") != null) {
      estimatedShipDate=orderDeliverySchedule.getTimestamp("estimatedReadyDate");
    }
 else {
      estimatedShipDate=genericResult.getTimestamp("estimatedDeliveryDate");
    }
    if (estimatedShipDate == null) {
      estimatedShipDate=now;
    }
    parameters=UtilMisc.toMap("productId",productId,"eventDate",estimatedShipDate,"inventoryEventPlanTypeId","PUR_ORDER_RECP");
    try {
      InventoryEventPlannedServices.createOrUpdateInventoryEventPlanned(parameters,eventQuantityTmp,genericResult.getString("orderId") + "-" + genericResult.getString("orderItemSeqId"),delegator);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem initializing the InventoryEventPlanned entity (PUR_ORDER_RECP)");
    }
  }
  resultList=null;
  iteratorResult=null;
  parameters=UtilMisc.toMap("workEffortGoodStdTypeId","PRUNT_PROD_NEEDED","statusId","WEGS_CREATED");
  try {
    resultList=delegator.findByAnd("WorkEffortAndGoods",parameters);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error : delegator.findByAnd(\"OrderItem\", parameters\")",module);
    Debug.logError(e,"Error : parameters = " + parameters,module);
    return ServiceUtil.returnError("Problem, we can not find the order items, for more detail look at the log");
  }
  iteratorResult=resultList.iterator();
  while (iteratorResult.hasNext()) {
    genericResult=(GenericValue)iteratorResult.next();
    String productId=genericResult.getString("productId");
    Double eventQuantityTmp=new Double(-1.0 * genericResult.getDouble("estimatedQuantity").doubleValue());
    Timestamp estimatedShipDate=genericResult.getTimestamp("estimatedStartDate");
    if (estimatedShipDate == null) {
      estimatedShipDate=now;
    }
    parameters=UtilMisc.toMap("productId",productId,"eventDate",estimatedShipDate,"inventoryEventPlanTypeId","MANUF_ORDER_REQ");
    try {
      InventoryEventPlannedServices.createOrUpdateInventoryEventPlanned(parameters,eventQuantityTmp,genericResult.getString("workEffortId"),delegator);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem initializing the InventoryEventPlanned entity (MRP_REQUIREMENT)");
    }
  }
  resultList=null;
  iteratorResult=null;
  parameters=UtilMisc.toMap("workEffortGoodStdTypeId","PRUN_PROD_DELIV","statusId","WEGS_CREATED","workEffortTypeId","PROD_ORDER_HEADER");
  try {
    resultList=delegator.findByAnd("WorkEffortAndGoods",parameters);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error : delegator.findByAnd(\"OrderItem\", parameters\")",module);
    Debug.logError(e,"Error : parameters = " + parameters,module);
    return ServiceUtil.returnError("Problem, we can not find the order items, for more detail look at the log");
  }
  iteratorResult=resultList.iterator();
  while (iteratorResult.hasNext()) {
    genericResult=(GenericValue)iteratorResult.next();
    if ("PRUN_CLOSED".equals(genericResult.getString("currentStatusId"))) {
      continue;
    }
    Double qtyToProduce=genericResult.getDouble("quantityToProduce");
    if (qtyToProduce == null) {
      qtyToProduce=new Double(0);
    }
    Double qtyProduced=genericResult.getDouble("quantityProduced");
    if (qtyProduced == null) {
      qtyProduced=new Double(0);
    }
    if (qtyProduced.compareTo(qtyToProduce) >= 0) {
      continue;
    }
    double qtyDiff=qtyToProduce.doubleValue() - qtyProduced.doubleValue();
    String productId=genericResult.getString("productId");
    Double eventQuantityTmp=new Double(qtyDiff);
    Timestamp estimatedShipDate=genericResult.getTimestamp("estimatedCompletionDate");
    if (estimatedShipDate == null) {
      estimatedShipDate=now;
    }
    parameters=UtilMisc.toMap("productId",productId,"eventDate",estimatedShipDate,"inventoryEventPlanTypeId","MANUF_ORDER_RECP");
    try {
      InventoryEventPlannedServices.createOrUpdateInventoryEventPlanned(parameters,eventQuantityTmp,genericResult.getString("workEffortId"),delegator);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem initializing the InventoryEventPlanned entity (MANUF_ORDER_RECP)");
    }
  }
  Map result=new HashMap();
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  Debug.logInfo("return from initInventoryEventPlanned",module);
  return result;
}
