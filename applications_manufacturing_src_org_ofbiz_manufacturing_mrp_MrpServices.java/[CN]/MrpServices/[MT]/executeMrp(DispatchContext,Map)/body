{
  Debug.logInfo("executeMrp called",module);
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Timestamp now=UtilDateTime.nowTimestamp();
  String mrpName=(String)context.get("mrpName");
  Integer defaultYearsOffset=(Integer)context.get("defaultYearsOffset");
  String facilityGroupId=(String)context.get("facilityGroupId");
  String facilityId=(String)context.get("facilityId");
  String manufacturingFacilityId=null;
  if (UtilValidate.isEmpty(facilityId) && UtilValidate.isEmpty(facilityGroupId)) {
    return ServiceUtil.returnError("facilityId and facilityGroupId cannot be both null");
  }
  if (UtilValidate.isEmpty(facilityId)) {
    try {
      GenericValue facilityGroup=delegator.findByPrimaryKey("FacilityGroup",UtilMisc.toMap("facilityGroupId",facilityGroupId));
      if (UtilValidate.isEmpty(facilityGroup)) {
        return ServiceUtil.returnError("facilityGroupId [" + facilityGroupId + "] is not valid");
      }
      List facilities=facilityGroup.getRelated("FacilityGroupMember",UtilMisc.toList("sequenceNum"));
      if (UtilValidate.isEmpty(facilities)) {
        return ServiceUtil.returnError("No facility associated to facilityGroupId [" + facilityGroupId + "]");
      }
      Iterator facilitiesIt=facilities.iterator();
      while (facilitiesIt.hasNext()) {
        GenericValue facilityMember=(GenericValue)facilitiesIt.next();
        GenericValue facility=facilityMember.getRelatedOne("Facility");
        if ("WAREHOUSE".equals(facility.getString("facilityTypeId")) && UtilValidate.isEmpty(facilityId)) {
          facilityId=facility.getString("facilityId");
        }
        if ("PLANT".equals(facility.getString("facilityTypeId")) && UtilValidate.isEmpty(manufacturingFacilityId)) {
          manufacturingFacilityId=facility.getString("facilityId");
        }
      }
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Problem loading facility group information: " + e.getMessage());
    }
  }
 else {
    manufacturingFacilityId=facilityId;
  }
  if (UtilValidate.isEmpty(facilityId) || UtilValidate.isEmpty(manufacturingFacilityId)) {
    return ServiceUtil.returnError("facilityId and manufacturingFacilityId cannot be null");
  }
  int bomLevelWithNoEvent=0;
  double stockTmp=0;
  String oldProductId=null;
  String productId=null;
  GenericValue product=null;
  GenericValue productFacility=null;
  double eventQuantity=0;
  Timestamp eventDate=null;
  boolean isNegative=false;
  double quantityNeeded=0;
  double reorderQuantity=0;
  double minimumStock=0;
  int daysToShip=0;
  List components=null;
  boolean isBuilt=false;
  GenericValue routing=null;
  String mrpId=delegator.getNextSeqId("MrpEvent");
  Map result=null;
  Map parameters=null;
  List listInventoryEventForMRP=null;
  ListIterator iteratorListInventoryEventForMRP=null;
  GenericValue inventoryEventForMRP=null;
  parameters=UtilMisc.toMap("mrpId",mrpId,"reInitialize",Boolean.TRUE,"defaultYearsOffset",defaultYearsOffset,"userLogin",userLogin);
  parameters.put("facilityId",facilityId);
  parameters.put("manufacturingFacilityId",manufacturingFacilityId);
  try {
    result=dispatcher.runSync("initMrpEvents",parameters);
  }
 catch (  GenericServiceException e) {
    return ServiceUtil.returnError("Error running the initMrpEvents service: " + e.getMessage());
  }
  long bomLevel=0;
  do {
    EntityCondition filterByConditions=null;
    if (bomLevel == 0) {
      filterByConditions=new EntityExpr(new EntityExpr("billOfMaterialLevel",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("billOfMaterialLevel",EntityOperator.EQUALS,new Long(bomLevel)));
    }
 else {
      filterByConditions=new EntityExpr("billOfMaterialLevel",EntityOperator.EQUALS,new Long(bomLevel));
    }
    try {
      listInventoryEventForMRP=delegator.findList("MrpEventView",filterByConditions,null,UtilMisc.toList("productId","eventDate"),null,false);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("MRP Error retieving MRP event for the bom level: " + bomLevel + ". Error: "+ e.getMessage());
    }
    if (UtilValidate.isNotEmpty(listInventoryEventForMRP)) {
      bomLevelWithNoEvent=0;
      iteratorListInventoryEventForMRP=listInventoryEventForMRP.listIterator();
      oldProductId="";
      while (iteratorListInventoryEventForMRP.hasNext()) {
        inventoryEventForMRP=(GenericValue)iteratorListInventoryEventForMRP.next();
        productId=inventoryEventForMRP.getString("productId");
        eventQuantity=inventoryEventForMRP.getDouble("quantity").doubleValue();
        if (!productId.equals(oldProductId)) {
          double positiveEventQuantity=(eventQuantity > 0 ? eventQuantity : -1 * eventQuantity);
          try {
            product=inventoryEventForMRP.getRelatedOneCache("Product");
            productFacility=EntityUtil.getFirst(product.getRelatedByAndCache("ProductFacility",UtilMisc.toMap("facilityId",facilityId)));
          }
 catch (          GenericEntityException e) {
            return ServiceUtil.returnError("Problem, can not find the product for a event, for more detail look at the log");
          }
          stockTmp=findProductMrpQoh(product,facilityId,dispatcher,delegator);
          try {
            InventoryEventPlannedServices.createOrUpdateMrpEvent(UtilMisc.toMap("mrpId",mrpId,"productId",product.getString("productId"),"mrpEventTypeId","INITIAL_QOH","eventDate",now),new Double(stockTmp),facilityId,null,false,delegator);
          }
 catch (          GenericEntityException e) {
            return ServiceUtil.returnError("Problem running createOrUpdateMrpEvent");
          }
          daysToShip=0;
          if (productFacility != null) {
            reorderQuantity=(productFacility.getDouble("reorderQuantity") != null ? productFacility.getDouble("reorderQuantity").doubleValue() : -1);
            minimumStock=(productFacility.getDouble("minimumStock") != null ? productFacility.getDouble("minimumStock").doubleValue() : 0);
            if ("SALES_ORDER_SHIP".equals(inventoryEventForMRP.getString("mrpEventTypeId"))) {
              daysToShip=(productFacility.getLong("daysToShip") != null ? productFacility.getLong("daysToShip").intValue() : 0);
            }
          }
 else {
            minimumStock=0;
            reorderQuantity=-1;
          }
          Map serviceResponse=null;
          try {
            serviceResponse=dispatcher.runSync("getManufacturingComponents",UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"quantity",new Double(positiveEventQuantity),"excludeWIPs",Boolean.FALSE,"userLogin",userLogin));
          }
 catch (          Exception e) {
            return ServiceUtil.returnError("An error occurred exploding the product [" + product.getString("productId") + "]");
          }
          components=(List)serviceResponse.get("components");
          if (components != null && components.size() > 0) {
            BOMNode node=((BOMNode)components.get(0)).getParentNode();
            isBuilt=node.isManufactured();
          }
 else {
            isBuilt=false;
          }
          oldProductId=productId;
        }
        stockTmp=stockTmp + eventQuantity;
        if (stockTmp < minimumStock) {
          double qtyToStock=minimumStock - stockTmp;
          eventDate=inventoryEventForMRP.getTimestamp("eventDate");
          eventDate.setTime(eventDate.getTime() - 1);
          ProposedOrder proposedOrder=new ProposedOrder(product,facilityId,manufacturingFacilityId,isBuilt,eventDate,qtyToStock);
          proposedOrder.setMrpName(mrpName);
          proposedOrder.calculateQuantityToSupply(reorderQuantity,minimumStock,iteratorListInventoryEventForMRP);
          Map serviceResponse=null;
          try {
            serviceResponse=dispatcher.runSync("getManufacturingComponents",UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"quantity",new Double(proposedOrder.getQuantity()),"excludeWIPs",Boolean.FALSE,"userLogin",userLogin));
          }
 catch (          Exception e) {
            return ServiceUtil.returnError("An error occurred exploding the product [" + product.getString("productId") + "]");
          }
          components=(List)serviceResponse.get("components");
          String routingId=(String)serviceResponse.get("workEffortId");
          if (routingId != null) {
            try {
              routing=delegator.findByPrimaryKey("WorkEffort",UtilMisc.toMap("workEffortId",routingId));
            }
 catch (            GenericEntityException e) {
              return ServiceUtil.returnError("Problem, can not find the product for a event, for more detail look at the log");
            }
          }
 else {
            routing=null;
          }
          if (components != null && components.size() > 0) {
            BOMNode node=((BOMNode)components.get(0)).getParentNode();
            isBuilt=node.isManufactured();
          }
 else {
            isBuilt=false;
          }
          Map routingTaskStartDate=proposedOrder.calculateStartDate(daysToShip,routing,delegator,dispatcher,userLogin);
          if (isBuilt) {
            processBomComponent(mrpId,product,proposedOrder.getQuantity(),proposedOrder.getRequirementStartDate(),routingTaskStartDate,components);
          }
          String requirementId=null;
          if (productFacility != null) {
            requirementId=proposedOrder.create(ctx,userLogin);
          }
          if (UtilValidate.isEmpty(productFacility) && !isBuilt) {
            logMrpError(productId,now,"No ProductFacility record for [" + facilityId + "]; no requirement created.",delegator);
          }
          String eventName=null;
          if (UtilValidate.isNotEmpty(requirementId)) {
            eventName="*" + requirementId + " ("+ proposedOrder.getRequirementStartDate()+ ")*";
          }
          Map eventMap=UtilMisc.toMap("productId",product.getString("productId"),"mrpId",mrpId,"eventDate",eventDate,"mrpEventTypeId",(isBuilt ? "PROP_MANUF_O_RECP" : "PROP_PUR_O_RECP"));
          try {
            InventoryEventPlannedServices.createOrUpdateMrpEvent(eventMap,new Double(proposedOrder.getQuantity()),null,eventName,(proposedOrder.getRequirementStartDate().compareTo(now) < 0),delegator);
          }
 catch (          GenericEntityException e) {
            return ServiceUtil.returnError("Problem running createOrUpdateMrpEvent");
          }
          stockTmp=stockTmp + proposedOrder.getQuantity();
        }
      }
    }
 else {
      bomLevelWithNoEvent+=1;
    }
    bomLevel+=1;
  }
 while (bomLevelWithNoEvent < 3);
  result=new HashMap();
  List msgResult=new LinkedList();
  result.put("msgResult",msgResult);
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  Debug.logInfo("return from executeMrp",module);
  return result;
}
