{
  GenericDelegator delegator=product.getDelegator();
  if (listComponent != null && listComponent.size() > 0) {
    Iterator listComponentIter=listComponent.iterator();
    while (listComponentIter.hasNext()) {
      BOMNode node=(BOMNode)listComponentIter.next();
      GenericValue productComponent=node.getProductAssoc();
      String routingTask=node.getProductAssoc().getString("routingWorkEffortId");
      Timestamp eventDate=(routingTask == null || !routingTaskStartDate.containsKey(routingTask)) ? startDate : (Timestamp)routingTaskStartDate.get(routingTask);
      if (EntityUtil.isValueActive(productComponent,eventDate)) {
        Map parameters=UtilMisc.toMap("productId",node.getProduct().getString("productId"));
        parameters.put("eventDate",eventDate);
        parameters.put("inventoryEventPlanTypeId","MRP_REQUIREMENT");
        double componentEventQuantity=node.getQuantity();
        try {
          InventoryEventPlannedServices.createOrUpdateInventoryEventPlanned(parameters,new Double(-1.0 * componentEventQuantity),null,null,delegator);
        }
 catch (        GenericEntityException e) {
          Debug.logError("Error : delegator.findByPrimaryKey(\"InventoryEventPlanned\", parameters) =" + parameters + "--"+ e.getMessage(),module);
          logMrpError(node.getProduct().getString("productId"),"Unable to create event (processBomComponent)",delegator);
        }
      }
    }
  }
}
