{
  Locale locale=(Locale)context.get("locale");
  String message=(String)context.get("message");
  Integer width=(Integer)context.get("width");
  Integer height=(Integer)context.get("height");
  String format=(String)context.get("format");
  String encoding=(String)context.get("encoding");
  Boolean verifyOutput=(Boolean)context.get("verifyOutput");
  String logoImage=(String)context.get("logoImage");
  Integer logoImageMaxWidth=(Integer)context.get("logoImageMaxWidth");
  Integer logoImageMaxHeight=(Integer)context.get("logoImageMaxHeight");
  if (UtilValidate.isEmpty(message)) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","ParameterCannotEmpty",new Object[]{"message"},locale));
  }
  if (width == null) {
    width=Integer.parseInt(QRCODE_DEFAULT_WIDTH);
  }
  if (width.intValue() < MIN_SIZE || width.intValue() > MAX_SIZE) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","SizeOutOfBorderError",new Object[]{"width",String.valueOf(width),String.valueOf(MIN_SIZE),String.valueOf(MAX_SIZE)},locale));
  }
  if (height == null) {
    height=Integer.parseInt(QRCODE_DEFAULT_HEIGHT);
  }
  if (height.intValue() < MIN_SIZE || height.intValue() > MAX_SIZE) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","SizeOutOfBorderError",new Object[]{"height",String.valueOf(height),String.valueOf(MIN_SIZE),String.valueOf(MAX_SIZE)},locale));
  }
  if (UtilValidate.isEmpty(format)) {
    format=QRCODE_DEFAULT_FORMAT;
  }
  if (!FORMATS_SUPPORTED.contains(format)) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","ErrorFormatNotSupported",new Object[]{format},locale));
  }
  Map<EncodeHintType,Object> encodeHints=null;
  if (UtilValidate.isNotEmpty(encoding)) {
    encodeHints=new EnumMap<>(EncodeHintType.class);
    encodeHints.put(EncodeHintType.CHARACTER_SET,encoding);
  }
  try {
    BitMatrix bitMatrix=new MultiFormatWriter().encode(message,BarcodeFormat.QR_CODE,width,height,encodeHints);
    BufferedImage bufferedImage=toBufferedImage(bitMatrix,format);
    BufferedImage logoBufferedImage=null;
    if (UtilValidate.isNotEmpty(logoImage)) {
      Map<String,Object> logoImageResult;
      try {
        logoImageResult=ImageTransform.getBufferedImage(FileUtil.getFile(logoImage).getAbsolutePath(),locale);
        logoBufferedImage=(BufferedImage)logoImageResult.get("bufferedImage");
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IOException e) {
      }
    }
    if (UtilValidate.isEmpty(logoBufferedImage)) {
      logoBufferedImage=defaultLogoImage;
    }
    BufferedImage newBufferedImage=null;
    if (UtilValidate.isNotEmpty(logoBufferedImage)) {
      if (UtilValidate.isNotEmpty(logoImageMaxWidth) && UtilValidate.isNotEmpty(logoImageMaxHeight) && (logoBufferedImage.getWidth() > logoImageMaxWidth.intValue() || logoBufferedImage.getHeight() > logoImageMaxHeight.intValue())) {
        Map<String,String> typeMap=new HashMap<String,String>();
        typeMap.put("width",logoImageMaxWidth.toString());
        typeMap.put("height",logoImageMaxHeight.toString());
        Map<String,Map<String,String>> dimensionMap=new HashMap<String,Map<String,String>>();
        dimensionMap.put("QRCode",typeMap);
        Map<String,Object> logoImageResult=ImageTransform.scaleImage(logoBufferedImage,(double)logoBufferedImage.getWidth(),(double)logoBufferedImage.getHeight(),dimensionMap,"QRCode",locale);
        logoBufferedImage=(BufferedImage)logoImageResult.get("bufferedImage");
      }
      BitMatrix newBitMatrix=bitMatrix.clone();
      newBufferedImage=toBufferedImage(newBitMatrix,format);
      Graphics2D graphics=newBufferedImage.createGraphics();
      graphics.drawImage(logoBufferedImage,new AffineTransformOp(AffineTransform.getTranslateInstance(1,1),null),(newBufferedImage.getWidth() - logoBufferedImage.getWidth()) / 2,(newBufferedImage.getHeight() - logoBufferedImage.getHeight()) / 2);
      graphics.dispose();
    }
    if (UtilValidate.isNotEmpty(verifyOutput) && verifyOutput.booleanValue()) {
      Decoder decoder=new Decoder();
      Map<DecodeHintType,Object> decodeHints=new EnumMap<>(DecodeHintType.class);
      decodeHints.put(DecodeHintType.TRY_HARDER,Boolean.TRUE);
      if (UtilValidate.isNotEmpty(encoding)) {
        decodeHints.put(DecodeHintType.CHARACTER_SET,encoding);
      }
      DetectorResult detectorResult=null;
      if (UtilValidate.isNotEmpty(newBufferedImage)) {
        BitMatrix newBitMatrix=createMatrixFromImage(newBufferedImage);
        DecoderResult result=null;
        try {
          detectorResult=new Detector(newBitMatrix).detect(decodeHints);
          result=decoder.decode(detectorResult.getBits(),decodeHints);
        }
 catch (        ChecksumException e) {
        }
catch (        FormatException e) {
        }
catch (        NotFoundException e) {
        }
        if (UtilValidate.isNotEmpty(result) && !result.getText().equals(message)) {
          detectorResult=new Detector(bitMatrix).detect(decodeHints);
          result=decoder.decode(detectorResult.getBits(),decodeHints);
          if (!result.getText().equals(message)) {
            return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","GeneratedTextNotMatchOriginal",new Object[]{result.getText(),message},locale));
          }
        }
 else {
          bufferedImage=newBufferedImage;
        }
      }
 else {
        detectorResult=new Detector(bitMatrix).detect(decodeHints);
        DecoderResult result=decoder.decode(detectorResult.getBits(),decodeHints);
        if (!result.getText().equals(message)) {
          return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","GeneratedTextNotMatchOriginal",new Object[]{result.getText(),message},locale));
        }
      }
    }
 else     if (UtilValidate.isNotEmpty(newBufferedImage)) {
      bufferedImage=newBufferedImage;
    }
    Map<String,Object> result=ServiceUtil.returnSuccess();
    result.put("bufferedImage",bufferedImage);
    return result;
  }
 catch (  WriterException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","ErrorGenerateQRCode",new Object[]{e.toString()},locale));
  }
catch (  ChecksumException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","ErrorVerifyQRCode",new Object[]{e.toString()},locale));
  }
catch (  FormatException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","ErrorVerifyQRCode",new Object[]{e.toString()},locale));
  }
catch (  NotFoundException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage("QRCodeUiLabels","ErrorVerifyQRCode",new Object[]{e.toString()},locale));
  }
}
