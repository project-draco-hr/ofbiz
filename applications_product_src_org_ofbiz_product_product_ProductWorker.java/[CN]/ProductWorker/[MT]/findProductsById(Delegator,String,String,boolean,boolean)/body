{
  if (Debug.verboseOn())   Debug.logVerbose("Analyze goodIdentification: entered id = " + idToFind + ", goodIdentificationTypeId = "+ goodIdentificationTypeId,module);
  GenericValue product=null;
  List<GenericValue> productsFound=null;
  if (searchProductFirst) {
    product=EntityQuery.use(delegator).from("Product").where("productId",idToFind).cache().queryOne();
  }
  if (searchAllId || (searchProductFirst && UtilValidate.isEmpty(product))) {
    Map<String,String> conditions=UtilMisc.toMap("idValue",idToFind);
    if (UtilValidate.isNotEmpty(goodIdentificationTypeId)) {
      conditions.put("goodIdentificationTypeId",goodIdentificationTypeId);
    }
    productsFound=EntityQuery.use(delegator).from("GoodIdentificationAndProduct").where(conditions).orderBy("productId").cache(true).queryList();
  }
  if (!searchProductFirst) {
    product=EntityQuery.use(delegator).from("Product").where("productId",idToFind).cache().queryOne();
  }
  if (UtilValidate.isNotEmpty(product)) {
    if (UtilValidate.isNotEmpty(productsFound))     productsFound.add(product);
 else     productsFound=UtilMisc.toList(product);
  }
  if (Debug.verboseOn())   Debug.logVerbose("Analyze goodIdentification: found product.productId = " + product + ", and list : "+ productsFound,module);
  return productsFound;
}
