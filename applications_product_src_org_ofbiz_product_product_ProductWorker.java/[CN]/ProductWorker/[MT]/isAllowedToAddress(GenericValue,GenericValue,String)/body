{
  if (UtilValidate.isNotEmpty(product) && UtilValidate.isNotEmpty(postalAddress)) {
    GenericDelegator delegator=product.getDelegator();
    List productGeos=null;
    try {
      productGeos=product.getRelated("ProductGeo");
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    List excludeGeos=EntityUtil.filterByAnd(productGeos,UtilMisc.toMap("productGeoEnumId",productGeoPrefix + "EXCLUDE"));
    List includeGeos=EntityUtil.filterByAnd(productGeos,UtilMisc.toMap("productGeoEnumId",productGeoPrefix + "INCLUDE"));
    if (UtilValidate.isEmpty(excludeGeos) && UtilValidate.isEmpty(includeGeos)) {
      return true;
    }
    Iterator productGeosIt=null;
    productGeosIt=excludeGeos.iterator();
    while (productGeosIt.hasNext()) {
      GenericValue productGeo=(GenericValue)productGeosIt.next();
      List excludeGeoGroup=GeoWorker.expandGeoGroup(productGeo.getString("geoId"),delegator);
      if (GeoWorker.containsGeo(excludeGeoGroup,postalAddress.getString("countryGeoId"),delegator) || GeoWorker.containsGeo(excludeGeoGroup,postalAddress.getString("stateProvinceGeoId"),delegator) || GeoWorker.containsGeo(excludeGeoGroup,postalAddress.getString("postalCodeGeoId"),delegator)) {
        return false;
      }
    }
    if (UtilValidate.isEmpty(includeGeos)) {
      return true;
    }
    productGeosIt=includeGeos.iterator();
    while (productGeosIt.hasNext()) {
      GenericValue productGeo=(GenericValue)productGeosIt.next();
      List includeGeoGroup=GeoWorker.expandGeoGroup(productGeo.getString("geoId"),delegator);
      if (GeoWorker.containsGeo(includeGeoGroup,postalAddress.getString("countryGeoId"),delegator) || GeoWorker.containsGeo(includeGeoGroup,postalAddress.getString("stateProvinceGeoId"),delegator) || GeoWorker.containsGeo(includeGeoGroup,postalAddress.getString("postalCodeGeoId"),delegator)) {
        return true;
      }
    }
  }
 else {
    throw new IllegalArgumentException("product and postalAddress cannot be null.");
  }
  return false;
}
