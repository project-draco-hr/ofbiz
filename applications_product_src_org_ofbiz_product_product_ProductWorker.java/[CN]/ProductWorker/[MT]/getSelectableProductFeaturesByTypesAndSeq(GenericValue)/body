{
  if (product == null) {
    return null;
  }
  List<List<Map<String,String>>> featureTypeFeatures=FastList.newInstance();
  try {
    Delegator delegator=product.getDelegator();
    List<GenericValue> featuresSorted=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",product.getString("productId"),"productFeatureApplTypeId","SELECTABLE_FEATURE").orderBy("productFeatureTypeId","sequenceNum").cache(true).queryList();
    String oldType=null;
    List<Map<String,String>> featureList=FastList.newInstance();
    for (    GenericValue productFeatureAppl : featuresSorted) {
      if (oldType == null || !oldType.equals(productFeatureAppl.getString("productFeatureTypeId"))) {
        if (oldType != null) {
          featureTypeFeatures.add(featureList);
          featureList=FastList.newInstance();
        }
        GenericValue productFeatureType=EntityQuery.use(delegator).from("ProductFeatureType").where("productFeatureTypeId",productFeatureAppl.getString("productFeatureTypeId")).queryOne();
        featureList.add(UtilMisc.<String,String>toMap("productFeatureTypeId",productFeatureAppl.getString("productFeatureTypeId"),"description",productFeatureType.getString("description")));
        oldType=productFeatureAppl.getString("productFeatureTypeId");
      }
      Map<String,String> featureData=UtilMisc.toMap("productFeatureId",productFeatureAppl.getString("productFeatureId"));
      if (UtilValidate.isNotEmpty(productFeatureAppl.get("description"))) {
        featureData.put("description",productFeatureAppl.getString("description"));
      }
 else {
        featureData.put("description",productFeatureAppl.getString("productFeatureId"));
      }
      List<GenericValue> productFeaturePrices=EntityQuery.use(delegator).from("ProductFeaturePrice").where("productFeatureId",productFeatureAppl.getString("productFeatureId"),"productPriceTypeId","DEFAULT_PRICE").filterByDate().queryList();
      if (UtilValidate.isNotEmpty(productFeaturePrices)) {
        GenericValue productFeaturePrice=productFeaturePrices.get(0);
        if (UtilValidate.isNotEmpty(productFeaturePrice.get("price"))) {
          featureData.put("price",productFeaturePrice.getBigDecimal("price").toString());
          featureData.put("currencyUomId",productFeaturePrice.getString("currencyUomId"));
        }
      }
      featureList.add(featureData);
    }
    if (oldType != null) {
      featureTypeFeatures.add(featureList);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  return featureTypeFeatures;
}
