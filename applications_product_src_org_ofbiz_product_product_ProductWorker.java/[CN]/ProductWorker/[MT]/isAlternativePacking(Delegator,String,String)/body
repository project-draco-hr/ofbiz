{
  boolean isAlternativePacking=false;
  if (productId != null || virtualVariantId != null) {
    List<GenericValue> alternativePackingProds=null;
    try {
      List<EntityCondition> condList=FastList.newInstance();
      if (UtilValidate.isNotEmpty(productId)) {
        condList.add(EntityCondition.makeCondition("productIdTo",productId));
      }
      if (UtilValidate.isNotEmpty(virtualVariantId)) {
        condList.add(EntityCondition.makeCondition("productId",virtualVariantId));
      }
      condList.add(EntityCondition.makeCondition("productAssocTypeId","ALTERNATIVE_PACKAGE"));
      alternativePackingProds=delegator.findList("ProductAssoc",EntityCondition.makeCondition(condList,EntityOperator.AND),null,null,null,true);
      if (UtilValidate.isNotEmpty(alternativePackingProds))       isAlternativePacking=true;
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Could not found alternative product: " + e.getMessage(),module);
    }
  }
  return isAlternativePacking;
}
