{
  Map<String,Object> user=null;
  GetMethod getMethod=null;
  try {
    GenericValue userLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId",userLoginId),false);
    String externalAuthId=userLogin.getString("externalAuthId");
    GenericValue gitHubUser=delegator.findOne("GitHubUser",UtilMisc.toMap("gitHubUserId",externalAuthId),false);
    if (UtilValidate.isNotEmpty(gitHubUser)) {
      String accessToken=gitHubUser.getString("accessToken");
      String tokenType=gitHubUser.getString("tokenType");
      if (UtilValidate.isNotEmpty(accessToken)) {
        getMethod=new GetMethod(GitHubEvents.ApiEndpoint + GitHubEvents.UserApiUri);
        user=GitHubAuthenticator.getUserInfo(getMethod,accessToken,tokenType,Locale.getDefault());
      }
    }
  }
 catch (  GenericEntityException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  HttpException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  AuthenticatorException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
 finally {
    if (getMethod != null) {
      getMethod.releaseConnection();
    }
  }
  Debug.logInfo("GitHub auth called; returned user info: " + user,module);
  return user != null;
}
