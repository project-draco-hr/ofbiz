{
  Locale locale=UtilHttp.getLocale(request);
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String orderId=(String)request.getAttribute("orderId");
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findOne("OrderHeader",UtilMisc.toMap("orderId",orderId),false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot get the order header for order: " + orderId,module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingOrderHeader",locale));
    return "error";
  }
  String orderTotal=orderHeader.getBigDecimal("grandTotal").toPlainString();
  GenericValue productStore=ProductStoreWorker.getProductStore(request);
  if (productStore == null) {
    Debug.logError("ProductStore is null",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingMerchantConfiguration",locale));
    return "error";
  }
  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_WORLDPAY",null,true);
  String configString=null;
  String paymentGatewayConfigId=null;
  if (paymentConfig != null) {
    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");
    configString=paymentConfig.getString("paymentPropertiesPath");
  }
  if (configString == null) {
    configString="payment.properties";
  }
  String redirectURL=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"redirectUrl",configString,"payment.worldpay.redirectUrl","");
  String instId=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"instId",configString,"payment.worldpay.instId","NONE");
  String authMode=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"authMode",configString,"payment.worldpay.authMode","A");
  String fixContact=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"fixContact",configString,"payment.worldpay.fixContact","N");
  String hideContact=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"hideContact",configString,"payment.worldpay.hideContact","N");
  String hideCurrency=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"hideCurrency",configString,"payment.worldpay.hideCurrency","N");
  String langId=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"langId",configString,"payment.worldpay.langId","");
  String noLanguageMenu=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"noLanguageMenu",configString,"payment.worldpay.noLanguageMenu","N");
  String withDelivery=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"withDelivery",configString,"payment.worldpay.withDelivery","N");
  String testMode=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"testMode",configString,"payment.worldpay.testMode","100");
  GenericValue contactAddress=null;
  GenericValue contactAddressShip=null;
  List<GenericValue> addresses=null;
  List<GenericValue> shippingAddresses=null;
  try {
    addresses=delegator.findByAnd("OrderContactMech",UtilMisc.toMap("orderId",orderId,"contactMechPurposeTypeId","BILLING_LOCATION"),null,false);
    shippingAddresses=delegator.findByAnd("OrderContactMech",UtilMisc.toMap("orderId",orderId,"contactMechPurposeTypeId","SHIPPING_LOCATION"),null,false);
    if (addresses.size() == 0) {
      addresses=shippingAddresses;
    }
    GenericValue contactMech=EntityUtil.getFirst(addresses);
    contactAddress=delegator.findOne("PostalAddress",UtilMisc.toMap("contactMechId",contactMech.getString("contactMechId")),false);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Problems getting order contact information",module);
  }
  GenericValue countryGeo=null;
  String country="";
  if (contactAddress != null) {
    try {
      countryGeo=contactAddress.getRelatedOne("CountryGeo",false);
      if (countryGeo != null) {
        country=countryGeo.getString("geoCode");
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Problems getting country geo entity",module);
    }
  }
  String name="";
  if (contactAddress != null) {
    if (UtilValidate.isNotEmpty(contactAddress.getString("attnName")))     name=contactAddress.getString("attnName");
 else     if (UtilValidate.isNotEmpty(contactAddress.getString("toName")))     name=contactAddress.getString("toName");
  }
  StringBuilder address=new StringBuilder();
  String postalCode="";
  if (contactAddress != null) {
    if (contactAddress.get("address1") != null) {
      address.append(contactAddress.getString("address1").trim());
    }
    if (contactAddress.get("address2") != null) {
      if (address.length() > 0) {
        address.append("&#10;");
      }
      address.append(contactAddress.getString("address2").trim());
    }
    if (contactAddress.get("city") != null) {
      if (address.length() > 0) {
        address.append("&#10;");
      }
      address.append(contactAddress.getString("city").trim());
    }
    if (contactAddress.get("stateProvinceGeoId") != null) {
      if (contactAddress.get("city") != null) {
        address.append(", ");
      }
      address.append(contactAddress.getString("stateProvinceGeoId").trim());
    }
    if (contactAddress.get("postalCode") != null) {
      postalCode=contactAddress.getString("postalCode");
    }
  }
  String emailAddress=null;
  GenericValue emailContact=null;
  try {
    List<GenericValue> emails=delegator.findByAnd("OrderContactMech",UtilMisc.toMap("orderId",orderId,"contactMechPurposeTypeId","ORDER_EMAIL"),null,false);
    GenericValue firstEmail=EntityUtil.getFirst(emails);
    emailContact=delegator.findOne("ContactMech",UtilMisc.toMap("contactMechId",firstEmail.getString("contactMechId")),false);
    emailAddress=emailContact.getString("infoString");
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Problems getting order email address",module);
  }
  StringBuilder shipAddress=new StringBuilder();
  String shipPostalCode="";
  String shipName="";
  if (shippingAddresses != null) {
    try {
      GenericValue contactMechShip=EntityUtil.getFirst(shippingAddresses);
      contactAddressShip=delegator.findOne("PostalAddress",UtilMisc.toMap("contactMechId",contactMechShip.getString("contactMechId")),false);
      if (UtilValidate.isNotEmpty(contactAddressShip)) {
        if (UtilValidate.isNotEmpty(contactAddressShip.getString("attnName"))) {
          shipName=contactAddressShip.getString("attnName");
        }
 else         if (UtilValidate.isNotEmpty(contactAddressShip.getString("toName"))) {
          shipName=contactAddressShip.getString("toName");
        }
        if (contactAddressShip.get("address1") != null) {
          shipAddress.append(contactAddressShip.getString("address1").trim());
        }
        if (contactAddressShip.get("address2") != null) {
          if (shipAddress.length() > 0) {
            shipAddress.append("&#10;");
          }
          shipAddress.append(contactAddressShip.getString("address2").trim());
        }
        if (contactAddressShip.get("city") != null) {
          if (shipAddress.length() > 0) {
            shipAddress.append("&#10;");
          }
          shipAddress.append(contactAddressShip.getString("city").trim());
        }
        if (contactAddressShip.get("stateProvinceGeoId") != null) {
          if (contactAddressShip.get("city") != null) {
            shipAddress.append(", ");
          }
          shipAddress.append(contactAddressShip.getString("stateProvinceGeoId").trim());
        }
        if (contactAddressShip.get("postalCode") != null) {
          shipPostalCode=contactAddressShip.getString("postalCode");
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Problems getting shipping address",module);
    }
  }
  String company=UtilFormatOut.checkEmpty(productStore.getString("companyName"),"");
  String defCur=UtilFormatOut.checkEmpty(productStore.getString("defaultCurrencyUomId"),"USD");
  String description=UtilProperties.getMessage(resource,"AccountingOrderNr",locale) + orderId + " "+ (company != null ? UtilProperties.getMessage(commonResource,"CommonFrom",locale) + " " + company : "");
  if (instId == null || instId.equals("NONE")) {
    Debug.logError("Worldpay InstId not found, cannot continue",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingInstId",locale));
    return "error";
  }
  try {
    Integer.parseInt(instId);
  }
 catch (  NumberFormatException nfe) {
    Debug.logError(nfe,"Problem converting instId string to integer",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingInstIdToInteger",locale));
    return "error";
  }
  if (testMode != null) {
    try {
      Integer.parseInt(testMode);
    }
 catch (    NumberFormatException nfe) {
      Debug.logWarning(nfe,"Problems getting the testMode value, setting to 0",module);
    }
  }
  Map<String,Object> parameters=FastMap.newInstance();
  parameters.put("instId",instId);
  parameters.put("cartId",orderId);
  parameters.put("currency",defCur);
  parameters.put("amount",orderTotal);
  parameters.put("desc",description);
  parameters.put("testMode",testMode);
  parameters.put("authMode",authMode);
  parameters.put("name",name);
  parameters.put("address",address.toString());
  parameters.put("country",country);
  parameters.put("postcode",postalCode);
  parameters.put("email",emailAddress);
  if (UtilValidate.isNotEmpty(shipName)) {
    parameters.put("M_shipping_name",shipName);
    if (UtilValidate.isNotEmpty(shipAddress.toString())) {
      parameters.put("M_shipping_address",shipAddress.toString());
    }
    if (UtilValidate.isNotEmpty(shipPostalCode)) {
      parameters.put("M_shipping_postcode",shipPostalCode);
    }
  }
  if ("Y".equals(fixContact)) {
    parameters.put("fixContact","");
  }
  if ("Y".equals(hideContact)) {
    parameters.put("hideContact","");
  }
  if ("Y".equals(hideCurrency)) {
    parameters.put("hideCurrency","");
  }
  if ("Y".equals(noLanguageMenu)) {
    parameters.put("noLanguageMenu","");
  }
  if ("Y".equals(withDelivery)) {
    parameters.put("withDelivery","");
  }
  if (UtilValidate.isNotEmpty(langId)) {
    parameters.put("langId",langId);
  }
  String encodedParameters=UtilHttp.urlEncodeArgs(parameters,false);
  String redirectString=redirectURL + "?" + encodedParameters;
  try {
    response.sendRedirect(redirectString);
  }
 catch (  IOException e) {
    Debug.logError(e,"Problems redirecting to WorldPay",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsConnectingWithWorldPay",locale));
    return "error";
  }
  return "success";
}
