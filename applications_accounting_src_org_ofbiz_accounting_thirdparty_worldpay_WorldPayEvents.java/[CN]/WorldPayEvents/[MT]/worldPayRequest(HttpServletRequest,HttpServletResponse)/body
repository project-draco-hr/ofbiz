{
  ServletContext application=((ServletContext)request.getAttribute("servletContext"));
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  String webSiteId=CatalogWorker.getWebSiteId(request);
  String orderId=(String)request.getAttribute("orderId");
  if (orderId == null) {
    Debug.logError("Problems getting orderId, was not found in request",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>OrderID not found, please contact customer service.");
    return "error";
  }
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot not get OrderHeader from datasource",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problems getting order information, please contact customer service.");
    return "error";
  }
  GenericValue contactAddress=null;
  try {
    List addresses=delegator.findByAnd("OrderContactMech",UtilMisc.toMap("orderId",orderId,"contactMechPurposeTypeId","BILLING_LOCATION"));
    if (addresses == null || addresses.size() == 0)     addresses=delegator.findByAnd("OrderContactMech",UtilMisc.toMap("orderId",orderId,"contactMechPurposeTypeId","SHIPPING_LOCATION"));
    GenericValue contactMech=EntityUtil.getFirst(addresses);
    contactAddress=delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",contactMech.getString("contactMechId")));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Problems getting order contact information",module);
  }
  GenericValue countryGeo=null;
  if (contactAddress != null) {
    try {
      countryGeo=contactAddress.getRelatedOne("CountryGeo");
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Problems getting country geo entity",module);
    }
  }
  String name=null;
  if (contactAddress != null) {
    if (contactAddress.get("attnName") != null && contactAddress.getString("attnName").length() > 0)     name=contactAddress.getString("attnName");
 else     if (contactAddress.get("toName") != null && contactAddress.getString("toName").length() > 0)     name=contactAddress.getString("toName");
  }
  StringBuffer address=null;
  if (contactAddress != null) {
    address=new StringBuffer();
    if (contactAddress.get("address1") != null) {
      address.append(contactAddress.getString("address1").trim());
    }
    if (contactAddress.get("address2") != null) {
      if (address.length() > 0)       address.append("&#10;");
      address.append(contactAddress.getString("address2").trim());
    }
    if (contactAddress.get("city") != null) {
      if (address.length() > 0)       address.append("&#10;");
      address.append(contactAddress.getString("city").trim());
    }
    if (contactAddress.get("stateProvinceGeoId") != null) {
      if (contactAddress.get("city") != null)       address.append(", ");
      address.append(contactAddress.getString("stateProvinceGeoId").trim());
    }
  }
  String phoneNumber=null;
  GenericValue phoneContact=null;
  String emailAddress=null;
  GenericValue emailContact=null;
  try {
    List emails=delegator.findByAnd("OrderContactMech",UtilMisc.toMap("orderId",orderId,"contactMechPurposeTypeId","ORDER_EMAIL"));
    GenericValue firstEmail=EntityUtil.getFirst(emails);
    emailContact=delegator.findByPrimaryKey("ContactMech",UtilMisc.toMap("contactMechId",firstEmail.getString("contactMechId")));
    emailAddress=emailContact.getString("infoString");
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Problems getting order email address",module);
  }
  GenericValue productStore=null;
  try {
    productStore=orderHeader.getRelatedOne("ProductStore");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to get ProductStore from OrderHeader",module);
  }
  if (productStore == null) {
    Debug.logError("ProductStore is null",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problems getting merchant configuration, please contact customer service.");
    return "error";
  }
  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_WORLDPAY",null,true);
  String configString=null;
  if (paymentConfig != null) {
    configString=paymentConfig.getString("paymentPropertiesPath");
  }
  if (configString == null) {
    configString="payment.properties";
  }
  String instId=UtilProperties.getPropertyValue(configString,"payment.worldpay.instId","NONE");
  String authMode=UtilProperties.getPropertyValue(configString,"payment.worldpay.authMode","A");
  String testMode=UtilProperties.getPropertyValue(configString,"payment.worldpay.testMode","100");
  String fixContact=UtilProperties.getPropertyValue(configString,"payment.worldpay.fixContact","N");
  String hideContact=UtilProperties.getPropertyValue(configString,"payment.worldpay.hideContact","N");
  String confirmTemplate=UtilProperties.getPropertyValue(configString,"payment.worldpay.confirmTemplate","");
  String timeout=UtilProperties.getPropertyValue(configString,"payment.worldpay.timeout","0");
  String company=UtilFormatOut.checkEmpty(productStore.getString("companyName"),"");
  String defCur=UtilFormatOut.checkEmpty(productStore.getString("defaultCurrencyUomId"),"USD");
  String description="Order #" + orderId;
  if (company != null && company.length() > 0)   description=description + " from " + company;
  if (instId == null || instId.equals("NONE")) {
    Debug.logError("Worldpay InstId not found, cannot continue",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problems getting merchant configuration, please contact customer service.");
    return "error";
  }
  int instIdInt=0;
  try {
    instIdInt=Integer.parseInt(instId);
  }
 catch (  NumberFormatException nfe) {
    Debug.logError(nfe,"Problem converting instId string to integer",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problems getting merchant configuration, please contact customer service.");
    return "error";
  }
  int testModeInt=-1;
  if (testMode != null) {
    try {
      testModeInt=Integer.parseInt(testMode);
    }
 catch (    NumberFormatException nfe) {
      Debug.logWarning(nfe,"Problems getting the testMode value, setting to 0",module);
      testModeInt=0;
    }
  }
  String purchaseURL=null;
  HTTPURL link=null;
  URLParameters linkParms=null;
  try {
    purchaseURL=Select.getPurchaseURL();
    link=new HTTPURL(purchaseURL);
    linkParms=link.getParameters();
  }
 catch (  SelectException e) {
    Debug.logError(e,"Problems creating the purchase url",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problem creating link to WorldPay, please contact customer service.");
    return "error";
  }
catch (  ArgumentException e) {
    Debug.logError(e,"Problems creating HTTPURL link",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problem creating link to WorldPay, please contact customer service.");
    return "error";
  }
  double orderTotal=orderHeader.getDouble("grandTotal").doubleValue();
  CurrencyAmount currencyAmount=null;
  try {
    Currency currency=SelectCurrency.getInstanceByISOCode(defCur);
    currencyAmount=new CurrencyAmount(orderTotal,currency);
  }
 catch (  ArgumentException ae) {
    Debug.logError(ae,"Problems building CurrencyAmount",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Merchant Configuration Error, please contact customer service.");
    return "error";
  }
  PurchaseToken token=null;
  try {
    token=new PurchaseToken(instIdInt,currencyAmount,orderId);
  }
 catch (  SelectException e) {
    Debug.logError(e,"Cannot create purchase token",module);
  }
catch (  ArgumentException e) {
    Debug.logError(e,"Cannot create purchase token",module);
  }
  if (token == null) {
    request.setAttribute("_ERROR_MESSAGE_","<li>Problems creating a purchase token, please contact customer service.");
    return "error";
  }
  try {
    token.setAuthorisationMode(authMode);
  }
 catch (  SelectException e) {
    Debug.logWarning(e,"Problems setting the authorization mode",module);
  }
  token.setTestMode(testModeInt);
  try {
    linkParms.setValue(SelectDefs.SEL_purchase,token.produce());
  }
 catch (  SelectException e) {
    Debug.logError(e,"Problems producing token",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problems producing purchase token, please contact customer service.");
    return "error";
  }
  linkParms.setValue(SelectDefs.SEL_desc,description);
  linkParms.setValue(SelectDefs.SEL_name,name != null ? name : "");
  linkParms.setValue(SelectDefs.SEL_address,address != null ? address.toString() : "");
  linkParms.setValue(SelectDefs.SEL_postcode,contactAddress != null ? contactAddress.getString("postalCode") : "");
  linkParms.setValue(SelectDefs.SEL_country,countryGeo.getString("geoCode"));
  linkParms.setValue(SelectDefs.SEL_tel,phoneNumber != null ? phoneNumber : "");
  linkParms.setValue(SelectDefs.SEL_email,emailAddress != null ? emailAddress : "");
  if (fixContact != null && fixContact.toUpperCase().startsWith("Y")) {
    linkParms.setValue(SelectDefs.SEL_fixContact,"Y");
  }
  if (hideContact != null && hideContact.toUpperCase().startsWith("Y")) {
    linkParms.setValue("hideContact","Y");
  }
  linkParms.setValue("M_controlPath",(String)request.getAttribute("_CONTROL_PATH_"));
  linkParms.setValue("M_userLoginId",userLogin.getString("userLoginId"));
  linkParms.setValue("M_dispatchName",dispatcher.getName());
  linkParms.setValue("M_delegatorName",delegator.getDelegatorName());
  linkParms.setValue("M_webSiteId",webSiteId);
  linkParms.setValue("M_localLocale",UtilHttp.getLocale(request).toString());
  linkParms.setValue("M_confirmTemplate",confirmTemplate != null ? confirmTemplate : "");
  try {
    response.sendRedirect(link.produce());
  }
 catch (  IOException e) {
    Debug.logError(e,"Problems redirecting to Worldpay",module);
    request.setAttribute("_ERROR_MESSAGE_","<li>Problems connecting with WorldPay, please contact customer service.");
    return "error";
  }
  return "success";
}
