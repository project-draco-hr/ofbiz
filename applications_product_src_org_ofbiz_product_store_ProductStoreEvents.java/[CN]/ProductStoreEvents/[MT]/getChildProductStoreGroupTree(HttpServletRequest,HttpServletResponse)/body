{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String parentGroupId=request.getParameter("parentGroupId");
  String onclickFunction=request.getParameter("onclickFunction");
  List productStoreGroupList=new LinkedList();
  List<GenericValue> children;
  List<String> sortList=org.ofbiz.base.util.UtilMisc.toList("sequenceNum");
  try {
    GenericValue productStoreGroup=EntityQuery.use(delegator).from("ProductStoreGroup").where("productStoreGroupId",parentGroupId).cache(true).queryOne();
    if (UtilValidate.isNotEmpty(productStoreGroup)) {
      children=EntityQuery.use(delegator).from("ProductStoreGroupRollupAndChild").where("parentGroupId",parentGroupId).cache(true).filterByDate().queryList();
      if (UtilValidate.isNotEmpty(children)) {
        for (        GenericValue child : children) {
          String productStoreGroupId=child.getString("productStoreGroupId");
          Map josonMap=new HashMap();
          List<GenericValue> childList=null;
          childList=EntityQuery.use(delegator).from("ProductStoreGroupRollupAndChild").where("parentGroupId",productStoreGroupId).cache(true).filterByDate().queryList();
          if (UtilValidate.isNotEmpty(childList)) {
            josonMap.put("state","closed");
          }
          Map dataMap=new HashMap();
          Map dataAttrMap=new HashMap();
          dataAttrMap.put("onClick",onclickFunction + "('" + productStoreGroupId+ "')");
          String hrefStr="EditProductStoreGroupAndAssoc";
          dataAttrMap.put("href",hrefStr);
          dataMap.put("attr",dataAttrMap);
          dataMap.put("title",child.get("productStoreGroupName") + " [" + child.get("productStoreGroupId")+ "]");
          josonMap.put("data",dataMap);
          Map attrMap=new HashMap();
          attrMap.put("parentGroupId",productStoreGroupId);
          josonMap.put("attr",attrMap);
          josonMap.put("sequenceNum",child.get("sequenceNum"));
          josonMap.put("title",child.get("productStoreGroupName"));
          productStoreGroupList.add(josonMap);
        }
        List<Map<Object,Object>> sortedProductStoreGroupList=UtilMisc.sortMaps(productStoreGroupList,sortList);
        request.setAttribute("storeGroupTree",sortedProductStoreGroupList);
      }
    }
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
    return "error";
  }
  return "success";
}
