{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String parentGroupId=request.getParameter("parentGroupId");
  String onclickFunction=request.getParameter("onclickFunction");
  List productStoreGroupList=FastList.newInstance();
  List<GenericValue> children;
  List<String> sortList=org.ofbiz.base.util.UtilMisc.toList("sequenceNum");
  try {
    GenericValue productStoreGroup=delegator.findOne("ProductStoreGroup",UtilMisc.toMap("productStoreGroupId",parentGroupId),true);
    if (UtilValidate.isNotEmpty(productStoreGroup)) {
      children=EntityUtil.filterByDate(delegator.findList("ProductStoreGroupRollupAndChild",EntityCondition.makeCondition("parentGroupId",parentGroupId),null,null,null,true));
      if (UtilValidate.isNotEmpty(children)) {
        for (        GenericValue child : children) {
          String productStoreGroupId=child.getString("productStoreGroupId");
          Map josonMap=FastMap.newInstance();
          List<GenericValue> childList=null;
          childList=EntityUtil.filterByDate(delegator.findList("ProductStoreGroupRollupAndChild",EntityCondition.makeCondition("parentGroupId",productStoreGroupId),null,null,null,true));
          if (UtilValidate.isNotEmpty(childList)) {
            josonMap.put("state","closed");
          }
          Map dataMap=FastMap.newInstance();
          Map dataAttrMap=FastMap.newInstance();
          dataAttrMap.put("onClick",onclickFunction + "('" + productStoreGroupId+ "')");
          String hrefStr="EditProductStoreGroupAndAssoc";
          dataAttrMap.put("href",hrefStr);
          dataMap.put("attr",dataAttrMap);
          dataMap.put("title",child.get("productStoreGroupName") + " [" + child.get("productStoreGroupId")+ "]");
          josonMap.put("data",dataMap);
          Map attrMap=FastMap.newInstance();
          attrMap.put("parentGroupId",productStoreGroupId);
          josonMap.put("attr",attrMap);
          josonMap.put("sequenceNum",child.get("sequenceNum"));
          josonMap.put("title",child.get("productStoreGroupName"));
          productStoreGroupList.add(josonMap);
        }
        List<Map<Object,Object>> sortedProductStoreGroupList=UtilMisc.sortMaps(productStoreGroupList,sortList);
        toJsonObjectList(sortedProductStoreGroupList,response);
      }
    }
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
  }
}
