{
  menuStringRenderer.renderMenuOpen(writer,context,this);
  menuStringRenderer.renderFormatSimpleWrapperOpen(writer,context,this);
  for (  ModelMenuItem item : this.menuItemList) {
    String parentPortalPageId=item.getParentPortalPageId(context);
    if (UtilValidate.isNotEmpty(parentPortalPageId)) {
      List<GenericValue> portalPages=null;
      try {
        EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("ownerUserLoginId",EntityOperator.EQUALS,"_NA_"),EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("portalPageId",EntityOperator.EQUALS,parentPortalPageId),EntityCondition.makeCondition("parentPortalPageId",EntityOperator.EQUALS,parentPortalPageId)),EntityOperator.OR)),EntityOperator.AND);
        portalPages=delegator.findList("PortalPage",cond,null,null,null,false);
        if (UtilValidate.isNotEmpty(context.get("userLogin"))) {
          String userLoginId=((GenericValue)context.get("userLogin")).getString("userLoginId");
          for (          GenericValue portalPage : portalPages) {
            cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("ownerUserLoginId",EntityOperator.EQUALS,userLoginId),EntityCondition.makeCondition("originalPortalPageId",EntityOperator.EQUALS,portalPage.getString("portalPageId"))),EntityOperator.AND);
            List<GenericValue> privatePortalPages=delegator.findList("PortalPage",cond,null,null,null,false);
            if (UtilValidate.isNotEmpty(privatePortalPages)) {
              portalPages.remove(portalPage);
              portalPages.add(privatePortalPages.get(0));
            }
          }
          cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("ownerUserLoginId",EntityOperator.EQUALS,userLoginId),EntityCondition.makeCondition("originalPortalPageId",EntityOperator.EQUALS,null),EntityCondition.makeCondition("parentPortalPageId",EntityOperator.EQUALS,parentPortalPageId)),EntityOperator.AND);
          portalPages.addAll(delegator.findList("PortalPage",cond,null,null,null,false));
        }
        portalPages=EntityUtil.orderBy(portalPages,UtilMisc.toList("sequenceNum"));
      }
 catch (      GenericEntityException e) {
        Debug.logError("Could not retrieve portalpages in the menu:" + e.getMessage(),module);
      }
      for (      GenericValue portalPage : portalPages) {
        if (UtilValidate.isNotEmpty(portalPage.getString("portalPageName"))) {
          item.setName(portalPage.getString("portalPageId"));
          item.setTitle(portalPage.getString("portalPageName"));
          item.link=new Link(item);
          item.link.setTarget("showPortalPage?portalPageId=" + portalPage.getString("portalPageId") + "&parentPortalPageId="+ parentPortalPageId);
          item.renderMenuItemString(writer,context,menuStringRenderer);
        }
      }
    }
 else {
      item.renderMenuItemString(writer,context,menuStringRenderer);
    }
  }
  menuStringRenderer.renderFormatSimpleWrapperClose(writer,context,this);
  menuStringRenderer.renderMenuClose(writer,context,this);
}
