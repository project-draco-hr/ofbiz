{
  this.delegator=delegator;
  this.dispatcher=dispatcher;
  String parentResource=menuElement.getAttribute("extends-resource");
  String parentMenu=menuElement.getAttribute("extends");
  if (parentMenu.length() > 0 && !parentMenu.equals(menuElement.getAttribute("name"))) {
    ModelMenu parent=null;
    if (parentResource.length() > 0) {
      try {
        parent=MenuFactory.getMenuFromClass(parentResource,parentMenu,delegator,dispatcher);
      }
 catch (      Exception e) {
        Debug.logError(e,"Failed to load parent menu definition '" + parentMenu + "' at resource '"+ parentResource+ "'",module);
      }
    }
 else {
      Element rootElement=menuElement.getOwnerDocument().getDocumentElement();
      List menuElements=UtilXml.childElementList(rootElement,"menu");
      Iterator menuElementIter=menuElements.iterator();
      while (menuElementIter.hasNext()) {
        Element menuElementEntry=(Element)menuElementIter.next();
        if (menuElementEntry.getAttribute("name").equals(parentMenu)) {
          parent=new ModelMenu(menuElementEntry,delegator,dispatcher);
          break;
        }
      }
      if (parent == null) {
        Debug.logError("Failed to find parent menu defenition '" + parentMenu + "' in same document.",module);
      }
    }
    if (parent != null) {
      this.type=parent.type;
      this.target=parent.target;
      this.title=parent.title;
      this.tooltip=parent.tooltip;
      this.tooltip=parent.tooltip;
      this.defaultEntityName=parent.defaultEntityName;
      this.defaultTitleStyle=parent.defaultTitleStyle;
      this.defaultSelectedStyle=parent.defaultSelectedStyle;
      this.defaultWidgetStyle=parent.defaultWidgetStyle;
      this.defaultTooltipStyle=parent.defaultTooltipStyle;
      this.defaultMenuItemName=parent.defaultMenuItemName;
      this.menuItemList=parent.menuItemList;
      this.menuItemMap=parent.menuItemMap;
      this.defaultPermissionOperation=parent.defaultPermissionOperation;
      this.defaultPermissionEntityAction=parent.defaultPermissionEntityAction;
      this.defaultAssociatedContentId=parent.defaultAssociatedContentId;
      this.defaultPermissionStatusId=parent.defaultPermissionStatusId;
      this.defaultPrivilegeEnumId=parent.defaultPrivilegeEnumId;
      this.defaultHideIfSelected=parent.defaultHideIfSelected;
      this.orientation=parent.orientation;
      this.menuWidth=parent.menuWidth;
      this.defaultCellWidth=parent.defaultCellWidth;
      this.defaultDisabledTitleStyle=parent.defaultDisabledTitleStyle;
      this.defaultAlign=parent.defaultAlign;
      this.defaultAlignStyle=parent.defaultAlignStyle;
      this.fillStyle=parent.fillStyle;
    }
  }
  this.name=menuElement.getAttribute("name");
  if (this.type == null || menuElement.hasAttribute("type"))   this.type=menuElement.getAttribute("type");
  if (this.target == null || menuElement.hasAttribute("target"))   this.target=menuElement.getAttribute("target");
  if (this.title == null || menuElement.hasAttribute("title"))   this.title=menuElement.getAttribute("title");
  if (this.tooltip == null || menuElement.hasAttribute("tooltip"))   this.tooltip=menuElement.getAttribute("tooltip");
  if (this.defaultEntityName == null || menuElement.hasAttribute("default-entity-name"))   this.defaultEntityName=menuElement.getAttribute("default-entity-name");
  if (this.defaultTitleStyle == null || menuElement.hasAttribute("default-title-style"))   this.defaultTitleStyle=menuElement.getAttribute("default-title-style");
  if (this.defaultSelectedStyle == null || menuElement.hasAttribute("default-selected-style"))   this.defaultSelectedStyle=menuElement.getAttribute("default-selected-style");
  if (this.defaultWidgetStyle == null || menuElement.hasAttribute("default-widget-style"))   this.defaultWidgetStyle=menuElement.getAttribute("default-widget-style");
  if (this.defaultTooltipStyle == null || menuElement.hasAttribute("default-tooltip-style"))   this.defaultTooltipStyle=menuElement.getAttribute("default-tooltip-style");
  if (this.defaultMenuItemName == null || menuElement.hasAttribute("default-menu-item-name"))   this.defaultMenuItemName=menuElement.getAttribute("default-menu-item-name");
  if (this.defaultPermissionOperation == null || menuElement.hasAttribute("default-permission-operation"))   this.defaultPermissionOperation=menuElement.getAttribute("default-permission-operation");
  if (this.defaultPermissionEntityAction == null || menuElement.hasAttribute("default-permission-entity-action"))   this.defaultPermissionEntityAction=menuElement.getAttribute("default-permission-entity-action");
  if (this.defaultPermissionStatusId == null || menuElement.hasAttribute("defaultPermissionStatusId"))   this.defaultPermissionStatusId=menuElement.getAttribute("default-permission-status-id");
  if (this.defaultPrivilegeEnumId == null || menuElement.hasAttribute("defaultPrivilegeEnumId"))   this.defaultPrivilegeEnumId=menuElement.getAttribute("default-privilege-enum-id");
  if (this.defaultAssociatedContentId == null || menuElement.hasAttribute("defaultAssociatedContentId"))   this.setDefaultAssociatedContentId(menuElement.getAttribute("default-associated-content-id"));
  if (this.orientation == null || menuElement.hasAttribute("orientation"))   this.orientation=menuElement.getAttribute("orientation");
  if (this.menuWidth == null || menuElement.hasAttribute("menu-width"))   this.menuWidth=menuElement.getAttribute("menu-width");
  if (this.defaultCellWidth == null || menuElement.hasAttribute("default-cell-width"))   this.defaultCellWidth=menuElement.getAttribute("default-cell-width");
  if (menuElement.hasAttribute("default-hide-if-selected")) {
    String val=menuElement.getAttribute("default-hide-if-selected");
    if (val != null && val.equalsIgnoreCase("true"))     defaultHideIfSelected=new Boolean(true);
 else     defaultHideIfSelected=new Boolean(false);
  }
  if (this.defaultDisabledTitleStyle == null || menuElement.hasAttribute("default-disabled-title-style"))   this.defaultDisabledTitleStyle=menuElement.getAttribute("default-disabled-title-style");
  if (this.selectedMenuItemContextFieldName == null || menuElement.hasAttribute("selected-menuitem-context-field-name"))   this.selectedMenuItemContextFieldName=new FlexibleMapAccessor(menuElement.getAttribute("selected-menuitem-context-field-name"));
  if (this.menuContainerStyleExdr == null || menuElement.hasAttribute("menu-container-style"))   this.setMenuContainerStyle(menuElement.getAttribute("menu-container-style"));
  if (this.defaultAlign == null || menuElement.hasAttribute("default-align"))   this.defaultAlign=menuElement.getAttribute("default-align");
  if (this.defaultAlignStyle == null || menuElement.hasAttribute("default-align-style"))   this.defaultAlignStyle=menuElement.getAttribute("default-align-style");
  if (this.fillStyle == null || menuElement.hasAttribute("fill-style"))   this.fillStyle=menuElement.getAttribute("fill-style");
  Element actionsElement=UtilXml.firstChildElement(menuElement,"actions");
  if (actionsElement != null) {
    this.actions=ModelMenuAction.readSubActions(this,actionsElement);
  }
  List itemElements=UtilXml.childElementList(menuElement,"menu-item");
  Iterator itemElementIter=itemElements.iterator();
  while (itemElementIter.hasNext()) {
    Element itemElement=(Element)itemElementIter.next();
    ModelMenuItem modelMenuItem=new ModelMenuItem(itemElement,this);
    modelMenuItem=this.addUpdateMenuItem(modelMenuItem);
  }
}
