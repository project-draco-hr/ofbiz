{
  super(menuElement);
  ArrayList<ModelWidgetAction> actions=new ArrayList<ModelWidgetAction>();
  String defaultAlign="";
  String defaultAlignStyle="";
  FlexibleStringExpander defaultAssociatedContentId=FlexibleStringExpander.getInstance("");
  String defaultCellWidth="";
  String defaultDisabledTitleStyle="";
  String defaultEntityName="";
  Boolean defaultHideIfSelected=Boolean.FALSE;
  String defaultMenuItemName="";
  String defaultPermissionEntityAction="";
  String defaultPermissionOperation="";
  String defaultPermissionStatusId="";
  String defaultPrivilegeEnumId="";
  String defaultSelectedStyle="";
  String defaultTitleStyle="";
  String defaultTooltipStyle="";
  String defaultWidgetStyle="";
  FlexibleStringExpander extraIndex=FlexibleStringExpander.getInstance("");
  String fillStyle="";
  String id="";
  FlexibleStringExpander menuContainerStyleExdr=FlexibleStringExpander.getInstance("");
  ArrayList<ModelMenuItem> menuItemList=new ArrayList<ModelMenuItem>();
  Map<String,ModelMenuItem> menuItemMap=new HashMap<String,ModelMenuItem>();
  String menuWidth="";
  String orientation="horizontal";
  FlexibleMapAccessor<String> selectedMenuItemContextFieldName=FlexibleMapAccessor.getInstance("");
  String target="";
  FlexibleStringExpander title=FlexibleStringExpander.getInstance("");
  String tooltip="";
  String type="";
  String parentResource=menuElement.getAttribute("extends-resource");
  String parentMenu=menuElement.getAttribute("extends");
  if (parentMenu.length() > 0 && !(parentMenu.equals(getName()) && parentResource.isEmpty())) {
    ModelMenu parent=null;
    if (UtilValidate.isNotEmpty(parentResource)) {
      try {
        parent=MenuFactory.getMenuFromLocation(parentResource,parentMenu);
      }
 catch (      Exception e) {
        Debug.logError(e,"Failed to load parent menu definition '" + parentMenu + "' at resource '"+ parentResource+ "'",module);
      }
    }
 else {
      parentResource=menuLocation;
      Element rootElement=menuElement.getOwnerDocument().getDocumentElement();
      List<? extends Element> menuElements=UtilXml.childElementList(rootElement,"menu");
      for (      Element menuElementEntry : menuElements) {
        if (menuElementEntry.getAttribute("name").equals(parentMenu)) {
          parent=new ModelMenu(menuElementEntry,parentResource);
          break;
        }
      }
      if (parent == null) {
        Debug.logError("Failed to find parent menu definition '" + parentMenu + "' in same document.",module);
      }
    }
    if (parent != null) {
      type=parent.type;
      target=parent.target;
      id=parent.id;
      title=parent.title;
      tooltip=parent.tooltip;
      defaultEntityName=parent.defaultEntityName;
      defaultTitleStyle=parent.defaultTitleStyle;
      defaultSelectedStyle=parent.defaultSelectedStyle;
      defaultWidgetStyle=parent.defaultWidgetStyle;
      defaultTooltipStyle=parent.defaultTooltipStyle;
      defaultMenuItemName=parent.defaultMenuItemName;
      menuItemList.addAll(parent.menuItemList);
      menuItemMap.putAll(parent.menuItemMap);
      defaultPermissionOperation=parent.defaultPermissionOperation;
      defaultPermissionEntityAction=parent.defaultPermissionEntityAction;
      defaultAssociatedContentId=parent.defaultAssociatedContentId;
      defaultPermissionStatusId=parent.defaultPermissionStatusId;
      defaultPrivilegeEnumId=parent.defaultPrivilegeEnumId;
      defaultHideIfSelected=parent.defaultHideIfSelected;
      orientation=parent.orientation;
      menuWidth=parent.menuWidth;
      defaultCellWidth=parent.defaultCellWidth;
      defaultDisabledTitleStyle=parent.defaultDisabledTitleStyle;
      defaultAlign=parent.defaultAlign;
      defaultAlignStyle=parent.defaultAlignStyle;
      fillStyle=parent.fillStyle;
      extraIndex=parent.extraIndex;
      selectedMenuItemContextFieldName=parent.selectedMenuItemContextFieldName;
      menuContainerStyleExdr=parent.menuContainerStyleExdr;
      if (parent.actions != null) {
        actions.addAll(parent.actions);
      }
    }
  }
  if (menuElement.hasAttribute("type"))   type=menuElement.getAttribute("type");
  if (menuElement.hasAttribute("target"))   target=menuElement.getAttribute("target");
  if (menuElement.hasAttribute("id"))   id=menuElement.getAttribute("id");
  if (menuElement.hasAttribute("title"))   title=FlexibleStringExpander.getInstance(menuElement.getAttribute("title"));
  if (menuElement.hasAttribute("tooltip"))   tooltip=menuElement.getAttribute("tooltip");
  if (menuElement.hasAttribute("default-entity-name"))   defaultEntityName=menuElement.getAttribute("default-entity-name");
  if (menuElement.hasAttribute("default-title-style"))   defaultTitleStyle=menuElement.getAttribute("default-title-style");
  if (menuElement.hasAttribute("default-selected-style"))   defaultSelectedStyle=menuElement.getAttribute("default-selected-style");
  if (menuElement.hasAttribute("default-widget-style"))   defaultWidgetStyle=menuElement.getAttribute("default-widget-style");
  if (menuElement.hasAttribute("default-tooltip-style"))   defaultTooltipStyle=menuElement.getAttribute("default-tooltip-style");
  if (menuElement.hasAttribute("default-menu-item-name"))   defaultMenuItemName=menuElement.getAttribute("default-menu-item-name");
  if (menuElement.hasAttribute("default-permission-operation"))   defaultPermissionOperation=menuElement.getAttribute("default-permission-operation");
  if (menuElement.hasAttribute("default-permission-entity-action"))   defaultPermissionEntityAction=menuElement.getAttribute("default-permission-entity-action");
  if (menuElement.hasAttribute("defaultPermissionStatusId"))   defaultPermissionStatusId=menuElement.getAttribute("default-permission-status-id");
  if (menuElement.hasAttribute("defaultPrivilegeEnumId"))   defaultPrivilegeEnumId=menuElement.getAttribute("default-privilege-enum-id");
  if (menuElement.hasAttribute("defaultAssociatedContentId"))   defaultAssociatedContentId=FlexibleStringExpander.getInstance(menuElement.getAttribute("default-associated-content-id"));
  if (menuElement.hasAttribute("orientation"))   orientation=menuElement.getAttribute("orientation");
  if (menuElement.hasAttribute("menu-width"))   menuWidth=menuElement.getAttribute("menu-width");
  if (menuElement.hasAttribute("default-cell-width"))   defaultCellWidth=menuElement.getAttribute("default-cell-width");
  if (menuElement.hasAttribute("default-hide-if-selected"))   defaultHideIfSelected="true".equals(menuElement.getAttribute("default-hide-if-selected"));
  if (menuElement.hasAttribute("default-disabled-title-style"))   defaultDisabledTitleStyle=menuElement.getAttribute("default-disabled-title-style");
  if (menuElement.hasAttribute("selected-menuitem-context-field-name"))   selectedMenuItemContextFieldName=FlexibleMapAccessor.getInstance(menuElement.getAttribute("selected-menuitem-context-field-name"));
  if (menuElement.hasAttribute("menu-container-style"))   menuContainerStyleExdr=FlexibleStringExpander.getInstance(menuElement.getAttribute("menu-container-style"));
  if (menuElement.hasAttribute("default-align"))   defaultAlign=menuElement.getAttribute("default-align");
  if (menuElement.hasAttribute("default-align-style"))   defaultAlignStyle=menuElement.getAttribute("default-align-style");
  if (menuElement.hasAttribute("fill-style"))   fillStyle=menuElement.getAttribute("fill-style");
  if (menuElement.hasAttribute("extra-index"))   extraIndex=FlexibleStringExpander.getInstance(menuElement.getAttribute("extra-index"));
  Element actionsElement=UtilXml.firstChildElement(menuElement,"actions");
  if (actionsElement != null) {
    actions.addAll(ModelMenuAction.readSubActions(this,actionsElement));
  }
  actions.trimToSize();
  this.actions=Collections.unmodifiableList(actions);
  this.defaultAlign=defaultAlign;
  this.defaultAlignStyle=defaultAlignStyle;
  this.defaultAssociatedContentId=defaultAssociatedContentId;
  this.defaultCellWidth=defaultCellWidth;
  this.defaultDisabledTitleStyle=defaultDisabledTitleStyle;
  this.defaultEntityName=defaultEntityName;
  this.defaultHideIfSelected=defaultHideIfSelected;
  this.defaultMenuItemName=defaultMenuItemName;
  this.defaultPermissionEntityAction=defaultPermissionEntityAction;
  this.defaultPermissionOperation=defaultPermissionOperation;
  this.defaultPermissionStatusId=defaultPermissionStatusId;
  this.defaultPrivilegeEnumId=defaultPrivilegeEnumId;
  this.defaultSelectedStyle=defaultSelectedStyle;
  this.defaultTitleStyle=defaultTitleStyle;
  this.defaultTooltipStyle=defaultTooltipStyle;
  this.defaultWidgetStyle=defaultWidgetStyle;
  this.extraIndex=extraIndex;
  this.fillStyle=fillStyle;
  this.id=id;
  this.menuContainerStyleExdr=menuContainerStyleExdr;
  List<? extends Element> itemElements=UtilXml.childElementList(menuElement,"menu-item");
  for (  Element itemElement : itemElements) {
    ModelMenuItem modelMenuItem=new ModelMenuItem(itemElement,this);
    modelMenuItem=this.addUpdateMenuItem(modelMenuItem,menuItemList,menuItemMap);
  }
  menuItemList.trimToSize();
  this.menuItemList=Collections.unmodifiableList(menuItemList);
  this.menuItemMap=Collections.unmodifiableMap(menuItemMap);
  this.menuLocation=menuLocation;
  this.menuWidth=menuWidth;
  this.orientation=orientation;
  this.selectedMenuItemContextFieldName=selectedMenuItemContextFieldName;
  this.target=target;
  this.title=title;
  this.tooltip=tooltip;
  this.type=type;
}
