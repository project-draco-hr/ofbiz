{
  String applicationId=tool.getId();
  Application app=SharkUtilities.getApplication(tool,applicationId);
  ArrayList parameters=new ArrayList();
  String appPStr=app.getExtendedAttributes().getExtendedAttributesString();
  AppParameter param=new AppParameter("ExtendedAttributes","ExtendedAttributes",XPDLConstants.FORMAL_PARAMETER_MODE_IN,appPStr,String.class);
  parameters.add(param);
  ActualParameters aps=tool.getActualParameters();
  FormalParameters fps=app.getApplicationTypes().getFormalParameters();
  Map m=createContextMap(aps,fps);
  Iterator itFps=fps.toElements().iterator();
  Iterator itAps=aps.toElements().iterator();
  while (itFps.hasNext() && itAps.hasNext()) {
    FormalParameter fp=(FormalParameter)itFps.next();
    ActualParameter ap=(ActualParameter)itAps.next();
    String fpMode=fp.getMode();
    String fpId=fp.getId();
    Object paramVal=m.get(fpId);
    param=new AppParameter(ap.toValue(),fpId,fpMode,paramVal,SharkUtilities.getJavaClass(fp));
    parameters.add(param);
  }
  ApplicationMappingManager mm=SharkEngineManager.getInstance().getApplicationMapPersistenceManager();
  ApplicationMap tad=null;
  if (mm != null) {
    XMLComplexElement cOwn=(XMLComplexElement)app.getParent().getParent();
    boolean isProcessApp=(cOwn instanceof WorkflowProcess);
    ApplicationMappingTransaction t=null;
    try {
      t=SharkUtilities.createApplicationMappingTransaction();
      tad=mm.getApplicationMap(t,XMLUtil.getPackage(app).getId(),((isProcessApp) ? cOwn.get("Id").toValue() : null),applicationId);
      SharkUtilities.commitMappingTransaction(t);
    }
 catch (    RootException e) {
      SharkUtilities.rollbackMappingTransaction(t,e);
      throw e;
    }
 finally {
      SharkUtilities.releaseMappingTransaction(t);
    }
  }
  SessionHandle shandle=null;
  String tacn=(tad != null) ? tad.getToolAgentClassName() : defaultToolAgentClassName;
  String uname=(tad != null) ? tad.getUsername() : "";
  String pwd=(tad != null) ? tad.getPassword() : "";
  String appN=(tad != null) ? tad.getApplicationName() : "";
  Integer appM=(tad != null) ? tad.getApplicationMode() : null;
  ToolAgent ta=SharkEngineManager.getInstance().getToolAgentFactory().createToolAgent(transaction,tacn);
  try {
    shandle=ta.connect(transaction,uname,pwd,cus.getProperty("enginename","imaobihostrezube"),"");
  }
 catch (  ConnectFailed cf) {
    cus.error("Activity" + activity.toString() + " - connection to Tool agent "+ tacn+ " failed !");
    throw cf;
  }
  String procId=activity.container(transaction).key(transaction);
  String actKey=activity.key(transaction);
  String assId=getAssignmentId(procId,actKey);
  AppParameter[] aprs=(AppParameter[])parameters.toArray(new AppParameter[parameters.size()]);
  ta.invokeApplication(transaction,shandle.getHandle(),appN,procId,assId,aprs,appM);
  long appStatus;
  appStatus=ta.requestAppStatus(transaction,shandle.getHandle(),procId,assId,aprs);
  if (appStatus == APP_STATUS_INVALID) {
    ta.disconnect(transaction,shandle);
    throw new Exception("Tool agent status is invalid!");
  }
  ta.disconnect(transaction,shandle);
  AppParameter[] returnValues=aprs;
  Map newData=new HashMap();
  for (int i=0; i < returnValues.length; i++) {
    if (returnValues[i].the_mode.equals(XPDLConstants.FORMAL_PARAMETER_MODE_OUT) || returnValues[i].the_mode.equals(XPDLConstants.FORMAL_PARAMETER_MODE_INOUT)) {
      String name=returnValues[i].the_actual_name;
      Object value=returnValues[i].the_value;
      newData.put(name,value);
    }
  }
  activity.set_result(transaction,newData);
}
