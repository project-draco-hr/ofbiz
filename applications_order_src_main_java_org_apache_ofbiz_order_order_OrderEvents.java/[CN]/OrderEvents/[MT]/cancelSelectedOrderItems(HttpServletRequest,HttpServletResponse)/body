{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  Locale locale=UtilHttp.getLocale(request);
  Map<String,Object> resultMap=new HashMap<String,Object>();
  String orderId=request.getParameter("orderId");
  String[] selectedItems=request.getParameterValues("selectedItem");
  if (selectedItems != null) {
    for (    String selectedItem : selectedItems) {
      String[] orderItemSeqIdAndOrderItemShipGrpId=selectedItem.split(":");
      String orderItemSeqId=orderItemSeqIdAndOrderItemShipGrpId[0];
      String shipGroupSeqId=orderItemSeqIdAndOrderItemShipGrpId[1];
      BigDecimal cancelQuantity=new BigDecimal(request.getParameter("iqm_" + orderItemSeqId + ":"+ shipGroupSeqId));
      Map<String,Object> contextMap=new HashMap<String,Object>();
      contextMap.put("orderId",orderId);
      contextMap.put("orderItemSeqId",orderItemSeqId);
      contextMap.put("shipGroupSeqId",shipGroupSeqId);
      contextMap.put("cancelQuantity",cancelQuantity);
      contextMap.put("userLogin",userLogin);
      contextMap.put("locale",locale);
      try {
        resultMap=dispatcher.runSync("cancelOrderItem",contextMap);
        if (ServiceUtil.isError(resultMap)) {
          String errorMessage=(String)resultMap.get("errorMessage");
          Debug.logError(errorMessage,module);
          request.setAttribute("_ERROR_MESSAGE_",errorMessage);
          return "error";
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
        return "error";
      }
    }
    return "success";
  }
 else {
    request.setAttribute("_ERROR_MESSAGE_","No order item selected. Please select an order item to cancel");
    return "error";
  }
}
