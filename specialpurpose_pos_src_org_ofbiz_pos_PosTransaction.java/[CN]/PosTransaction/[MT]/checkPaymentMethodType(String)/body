{
  Map fields=UtilMisc.toMap("paymentMethodTypeId",paymentMethodTypeId,"productStoreId",productStoreId);
  List values=null;
  try {
    values=session.getDelegator().findByAndCache("ProductStorePaymentSetting",fields);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  final String externalCode="PRDS_PAY_EXTERNAL";
  if (UtilValidate.isEmpty(values)) {
    return NO_PAYMENT;
  }
 else {
    boolean isExternal=true;
    Iterator i=values.iterator();
    while (i.hasNext() && isExternal) {
      GenericValue v=(GenericValue)i.next();
      if (!externalCode.equals(v.getString("paymentServiceTypeEnumId"))) {
        isExternal=false;
      }
    }
    if (isExternal) {
      return EXTERNAL_PAYMENT;
    }
 else {
      return INTERNAL_PAYMENT;
    }
  }
}
