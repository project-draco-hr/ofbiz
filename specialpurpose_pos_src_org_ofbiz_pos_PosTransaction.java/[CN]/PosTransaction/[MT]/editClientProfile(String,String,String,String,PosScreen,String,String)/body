{
  Delegator delegator=session.getDelegator();
  LocalDispatcher dispatcher=session.getDispatcher();
  GenericValue userLogin=session.getUserLogin();
  GenericValue partyUserLogin=null;
  String result=null;
  Map<String,Object> svcCtx=FastMap.newInstance();
  Map svcRes=null;
  if ("create".equals(editType)) {
    trace("Create a client profile");
    trace("createPersonAndUserLogin");
    if (UtilValidate.isNotEmpty(card)) {
      svcCtx.put("cardId",card);
    }
    svcCtx.put("userLogin",userLogin);
    svcCtx.put("lastName",name);
    svcCtx.put("firstName","");
    svcCtx.put("userLoginId",email);
    svcCtx.put("currentPassword",phone);
    svcCtx.put("currentPasswordVerify",phone);
    try {
      svcRes=dispatcher.runSync("createPersonAndUserLogin",svcCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    if (ServiceUtil.isError(svcRes)) {
      pos.showDialog("dialog/error/exceptionLargeSmallFont",ServiceUtil.getErrorMessage(svcRes));
      return null;
    }
    partyId=(String)svcRes.get("partyId");
    partyUserLogin=(GenericValue)svcRes.get("newUserLogin");
    trace("createPartyEmailAddress");
    svcCtx.clear();
    svcCtx.put("userLogin",partyUserLogin);
    svcCtx.put("emailAddress",email);
    svcCtx.put("partyId",partyId);
    svcCtx.put("contactMechPurposeTypeId","PRIMARY_EMAIL");
    try {
      svcRes=dispatcher.runSync("createPartyEmailAddress",svcCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    if (ServiceUtil.isError(svcRes)) {
      pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
      return null;
    }
    trace("createPartyTelecomNumber");
    svcCtx.clear();
    svcCtx.put("userLogin",partyUserLogin);
    svcCtx.put("contactNumber",phone);
    svcCtx.put("partyId",partyId);
    svcCtx.put("contactMechPurposeTypeId","PHONE_HOME");
    try {
      svcRes=dispatcher.runSync("createPartyTelecomNumber",svcCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    if (ServiceUtil.isError(svcRes)) {
      pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
      return null;
    }
    result=partyId;
  }
 else   if (UtilValidate.isNotEmpty(partyId)) {
    trace("Update a client profile");
    GenericValue person=null;
    try {
      person=session.getDelegator().findByPrimaryKey("Person",UtilMisc.toMap("partyId",partyId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    try {
      List<GenericValue> userLogins=session.getDelegator().findByAnd("UserLogin",UtilMisc.toMap("partyId",partyId));
      partyUserLogin=userLogins.get(0);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    if (!person.getString("lastName").equals(name) || UtilValidate.isNotEmpty(card) && !card.equals(person.getString("cardId"))) {
      svcCtx.put("partyId",partyId);
      svcCtx.put("firstName","");
      svcCtx.put("userLogin",partyUserLogin);
      svcCtx.put("lastName",name);
      if (UtilValidate.isNotEmpty(card)) {
        svcCtx.put("cardId",card);
      }
      try {
        svcRes=dispatcher.runSync("updatePerson",svcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exceptionLargeSmallFont",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
    }
    GenericValue PartyTelecomNumber=null;
    String contactNumber=null;
    String newContactMechId=null;
    svcCtx.clear();
    svcCtx.put("partyId",partyId);
    svcCtx.put("thruDate",null);
    try {
      List<GenericValue> PartyTelecomNumbers=session.getDelegator().findByAnd("PartyAndTelecomNumber",svcCtx);
      PartyTelecomNumber=PartyTelecomNumbers.get(0);
      contactNumber=PartyTelecomNumber.getString("contactNumber");
      newContactMechId=PartyTelecomNumber.getString("contactMechId");
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    if (UtilValidate.isNotEmpty(contactNumber) && !phone.equals(contactNumber)) {
      svcCtx.clear();
      svcCtx.put("partyId",partyId);
      svcCtx.put("thruDate",null);
      svcCtx.put("userLogin",partyUserLogin);
      svcCtx.put("contactNumber",phone);
      svcCtx.put("contactMechPurposeTypeId","PHONE_HOME");
      svcCtx.put("contactMechId",newContactMechId);
      try {
        svcRes=dispatcher.runSync("updatePartyTelecomNumber",svcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
      String passwordAcceptEncryptedAndPlain=UtilProperties.getPropertyValue("security.properties","password.accept.encrypted.and.plain");
      UtilProperties.setPropertyValueInMemory("security.properties","password.accept.encrypted.and.plain","true");
      try {
        svcRes=dispatcher.runSync("updatePassword",UtilMisc.toMap("userLogin",partyUserLogin,"userLoginId",partyUserLogin.getString("userLoginId"),"currentPassword",partyUserLogin.getString("currentPassword"),"newPassword",phone,"newPasswordVerify",phone));
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Error calling updatePassword service",module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
      UtilProperties.setPropertyValueInMemory("security.properties","password.accept.encrypted.and.plain",passwordAcceptEncryptedAndPlain);
    }
    if (!partyUserLogin.getString("userLoginId").equals(email)) {
      svcCtx.clear();
      svcCtx.put("partyId",partyId);
      svcCtx.put("contactMechTypeId","EMAIL_ADDRESS");
      svcCtx.put("thruDate",null);
      List<GenericValue> PartyEmails=null;
      try {
        PartyEmails=session.getDelegator().findByAnd("PartyAndContactMech",svcCtx);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      svcCtx.clear();
      svcCtx.put("userLogin",userLogin);
      svcCtx.put("emailAddress",email);
      svcCtx.put("partyId",partyId);
      svcCtx.put("contactMechPurposeTypeId","PRIMARY_EMAIL");
      svcCtx.put("contactMechId",PartyEmails.get(0).getString("contactMechId"));
      try {
        svcRes=dispatcher.runSync("createUpdatePartyEmailAddress",svcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
      try {
        svcRes=dispatcher.runSync("updateUserLoginId",UtilMisc.toMap("userLoginId",email,"userLogin",userLogin));
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
    }
  }
 else {
    pos.showDialog("dialog/error/exception",UtilProperties.getMessage(resource,"PosNoClientProfile",locale));
    return null;
  }
  return null;
}
