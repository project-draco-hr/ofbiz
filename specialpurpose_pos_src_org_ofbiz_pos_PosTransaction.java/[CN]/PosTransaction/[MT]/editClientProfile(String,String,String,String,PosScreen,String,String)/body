{
  LocalDispatcher dispatcher=session.getDispatcher();
  Delegator delegator=dispatcher.getDelegator();
  GenericValue userLogin=session.getUserLogin();
  GenericValue partyUserLogin=null;
  String result=null;
  Map<String,Object> svcCtx=new HashMap<String,Object>();
  Map<String,Object> svcRes=null;
  if ("create".equals(editType)) {
    trace("Create a client profile");
    trace("createPersonAndUserLogin");
    if (UtilValidate.isNotEmpty(card)) {
      svcCtx.put("cardId",card);
    }
    svcCtx.put("userLogin",userLogin);
    svcCtx.put("lastName",name);
    svcCtx.put("firstName","");
    if (UtilValidate.isNotEmpty(email) && UtilValidate.isNotEmpty(phone)) {
      svcCtx.put("userLoginId",email);
      svcCtx.put("currentPassword",phone);
      svcCtx.put("currentPasswordVerify",phone);
      try {
        svcRes=dispatcher.runSync("createPersonAndUserLogin",svcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exceptionLargeSmallFont",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
      partyId=(String)svcRes.get("partyId");
      partyUserLogin=(GenericValue)svcRes.get("newUserLogin");
    }
 else {
      trace("createPerson");
      try {
        svcRes=dispatcher.runSync("createPerson",svcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return result;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
        return result;
      }
      partyId=(String)svcRes.get("partyId");
      partyUserLogin=userLogin;
    }
    if (UtilValidate.isNotEmpty(email)) {
      trace("createPartyEmailAddress");
      svcCtx.clear();
      svcCtx.put("userLogin",partyUserLogin);
      svcCtx.put("emailAddress",email);
      svcCtx.put("partyId",partyId);
      svcCtx.put("contactMechPurposeTypeId","PRIMARY_EMAIL");
      try {
        svcRes=dispatcher.runSync("createPartyEmailAddress",svcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
    }
    if (UtilValidate.isNotEmpty(phone)) {
      if (phone.length() < 5) {
        pos.showDialog("dialog/error/exception",UtilProperties.getMessage(PosTransaction.resource,"PosPhoneField5Required",locale));
      }
 else {
        trace("createPartyTelecomNumber");
        svcCtx.clear();
        svcCtx.put("userLogin",partyUserLogin);
        svcCtx.put("contactNumber",phone);
        svcCtx.put("partyId",partyId);
        svcCtx.put("contactMechPurposeTypeId","PHONE_HOME");
        try {
          svcRes=dispatcher.runSync("createPartyTelecomNumber",svcCtx);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,module);
          pos.showDialog("dialog/error/exception",e.getMessage());
          return null;
        }
        if (ServiceUtil.isError(svcRes)) {
          pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
          return null;
        }
      }
    }
    result=partyId;
  }
 else   if (UtilValidate.isNotEmpty(partyId)) {
    trace("Update a client profile");
    GenericValue person=null;
    try {
      person=session.getDelegator().findOne("Person",UtilMisc.toMap("partyId",partyId),false);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    Boolean newLogin=true;
    try {
      List<GenericValue> userLogins=session.getDelegator().findByAnd("UserLogin",UtilMisc.toMap("partyId",partyId),null,false);
      if (UtilValidate.isNotEmpty(userLogins)) {
        userLogin=userLogins.get(0);
        newLogin=false;
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      pos.showDialog("dialog/error/exception",e.getMessage());
      return null;
    }
    if (!person.getString("lastName").equals(name) || UtilValidate.isNotEmpty(card) && !card.equals(person.getString("cardId"))) {
      svcCtx.put("userLogin",userLogin);
      svcCtx.put("partyId",partyId);
      svcCtx.put("firstName","");
      svcCtx.put("lastName",name);
      if (UtilValidate.isNotEmpty(card)) {
        svcCtx.put("cardId",card);
      }
      try {
        trace("updatePerson");
        svcRes=dispatcher.runSync("updatePerson",svcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      if (ServiceUtil.isError(svcRes)) {
        pos.showDialog("dialog/error/exceptionLargeSmallFont",ServiceUtil.getErrorMessage(svcRes));
        return null;
      }
    }
    if (UtilValidate.isNotEmpty(phone)) {
      if (phone.length() < 5) {
        pos.showDialog("dialog/error/exception",UtilProperties.getMessage(PosTransaction.resource,"PosPhoneField5Required",locale));
      }
 else {
        String contactNumber=null;
        String contactMechId=null;
        svcCtx.clear();
        svcCtx.put("partyId",partyId);
        svcCtx.put("thruDate",null);
        try {
          List<GenericValue> PartyTelecomNumbers=session.getDelegator().findByAnd("PartyAndTelecomNumber",svcCtx,null,false);
          if (UtilValidate.isNotEmpty(PartyTelecomNumbers)) {
            GenericValue PartyTelecomNumber=PartyTelecomNumbers.get(0);
            contactNumber=PartyTelecomNumber.getString("contactNumber");
            contactMechId=PartyTelecomNumber.getString("contactMechId");
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          pos.showDialog("dialog/error/exception",e.getMessage());
          return null;
        }
        trace("createUpdatePartyTelecomNumber");
        svcCtx.remove("thruDate");
        svcCtx.put("userLogin",userLogin);
        svcCtx.put("contactNumber",phone);
        svcCtx.put("contactMechPurposeTypeId","PHONE_HOME");
        if (UtilValidate.isNotEmpty(contactMechId)) {
          svcCtx.put("contactMechId",contactMechId);
        }
        try {
          svcRes=dispatcher.runSync("createUpdatePartyTelecomNumber",svcCtx);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,module);
          pos.showDialog("dialog/error/exception",e.getMessage());
          return null;
        }
        if (ServiceUtil.isError(svcRes)) {
          pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
          return null;
        }
        if (UtilValidate.isNotEmpty(contactNumber) && !phone.equals(contactNumber)) {
          if (!newLogin) {
            trace("updatePassword");
            String passwordAcceptEncryptedAndPlain=null;
            try {
              passwordAcceptEncryptedAndPlain=EntityUtilProperties.getPropertyValue("security","password.accept.encrypted.and.plain",delegator);
              UtilProperties.setPropertyValueInMemory("security.properties","password.accept.encrypted.and.plain","true");
              svcRes=dispatcher.runSync("updatePassword",UtilMisc.toMap("userLogin",userLogin,"userLoginId",userLogin.getString("userLoginId"),"currentPassword",userLogin.getString("currentPassword"),"newPassword",phone,"newPasswordVerify",phone));
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,"Error calling updatePassword service",module);
              pos.showDialog("dialog/error/exception",e.getMessage());
              UtilProperties.setPropertyValueInMemory("security.properties","password.accept.encrypted.and.plain",passwordAcceptEncryptedAndPlain);
              return null;
            }
 finally {
              UtilProperties.setPropertyValueInMemory("security.properties","password.accept.encrypted.and.plain",passwordAcceptEncryptedAndPlain);
            }
            if (ServiceUtil.isError(svcRes)) {
              pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
              return null;
            }
          }
        }
      }
    }
    if (UtilValidate.isNotEmpty(email)) {
      svcCtx.clear();
      svcCtx.put("partyId",partyId);
      svcCtx.put("thruDate",null);
      svcCtx.put("contactMechTypeId","EMAIL_ADDRESS");
      String contactMechId=null;
      String infoString=null;
      try {
        List<GenericValue> PartyEmails=session.getDelegator().findByAnd("PartyAndContactMech",svcCtx,null,false);
        if (UtilValidate.isNotEmpty(PartyEmails)) {
          GenericValue PartyEmail=PartyEmails.get(0);
          contactMechId=PartyEmail.getString("contactMechId");
          infoString=PartyEmail.getString("infoString");
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        pos.showDialog("dialog/error/exception",e.getMessage());
        return null;
      }
      svcCtx.remove("thruDate");
      svcCtx.remove("contactMechTypeId");
      svcCtx.put("userLogin",userLogin);
      svcCtx.put("emailAddress",email);
      svcCtx.put("contactMechPurposeTypeId","PRIMARY_EMAIL");
      if (UtilValidate.isNotEmpty(contactMechId)) {
        svcCtx.put("contactMechId",contactMechId);
      }
      if (UtilValidate.isNotEmpty(infoString) && !email.equals(infoString) || UtilValidate.isEmpty(infoString)) {
        trace("createUpdatePartyEmailAddress");
        try {
          svcRes=dispatcher.runSync("createUpdatePartyEmailAddress",svcCtx);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,module);
          pos.showDialog("dialog/error/exception",e.getMessage());
          return null;
        }
        if (ServiceUtil.isError(svcRes)) {
          pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
          return null;
        }
      }
      if (!newLogin && UtilValidate.isNotEmpty(infoString) && !email.equals(infoString)) {
        trace("updateUserLoginId");
        try {
          svcRes=dispatcher.runSync("updateUserLoginId",UtilMisc.toMap("userLoginId",email,"userLogin",userLogin));
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,module);
          pos.showDialog("dialog/error/exception",e.getMessage());
          return null;
        }
        if (ServiceUtil.isError(svcRes)) {
          pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
          return null;
        }
      }
 else       if (newLogin && UtilValidate.isNotEmpty(phone)) {
        trace("createUserLogin");
        try {
          svcRes=dispatcher.runSync("createUserLogin",UtilMisc.toMap("userLogin",userLogin,"userLoginId",email,"currentPassword",phone,"currentPasswordVerify",phone,"partyId",partyId));
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Error calling updatePassword service",module);
          pos.showDialog("dialog/error/exception",e.getMessage());
          return null;
        }
        if (ServiceUtil.isError(svcRes)) {
          pos.showDialog("dialog/error/exception",ServiceUtil.getErrorMessage(svcRes));
          return null;
        }
      }
    }
  }
 else {
    pos.showDialog("dialog/error/exception",UtilProperties.getMessage(resource,"PosNoClientProfile",locale));
    return null;
  }
  return null;
}
