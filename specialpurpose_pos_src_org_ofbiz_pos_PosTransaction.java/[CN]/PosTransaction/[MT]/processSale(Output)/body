{
  trace("process sale");
  BigDecimal grandTotal=this.getGrandTotal();
  BigDecimal paymentAmt=this.getPaymentTotal();
  if (grandTotal.compareTo(paymentAmt) > 0) {
    throw new IllegalStateException();
  }
  cart.setOrderPartyId(partyId);
  cart.setShipmentMethodTypeId("NO_SHIPPING");
  output.print(UtilProperties.getMessage(PosTransaction.resource,"PosValidating",defaultLocale));
  Map valRes=ch.validatePaymentMethods();
  if (valRes != null && ServiceUtil.isError(valRes)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(valRes));
  }
  if (UtilValidate.isEmpty(this.orderId)) {
    output.print(UtilProperties.getMessage(PosTransaction.resource,"PosSaving",defaultLocale));
    Map orderRes=ch.createOrder(session.getUserLogin());
    if (orderRes != null && ServiceUtil.isError(orderRes)) {
      throw new GeneralException(ServiceUtil.getErrorMessage(orderRes));
    }
 else     if (orderRes != null) {
      this.orderId=(String)orderRes.get("orderId");
    }
  }
 else {
    Map changeMap=UtilMisc.toMap("itemReasonMap",UtilMisc.toMap("reasonEnumId","EnumIdHere"),"itemCommentMap",UtilMisc.toMap("changeComments","change Comments here"));
    Map svcCtx=FastMap.newInstance();
    svcCtx.put("userLogin",session.getUserLogin());
    svcCtx.put("orderId",orderId);
    svcCtx.put("shoppingCart",cart);
    svcCtx.put("locale",this.locale);
    svcCtx.put("changeMap",changeMap);
    Map svcRes=null;
    try {
      LocalDispatcher dispatcher=session.getDispatcher();
      svcRes=dispatcher.runSync("saveUpdatedCartToOrder",svcCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      throw new GeneralException(ServiceUtil.getErrorMessage(svcRes));
    }
  }
  output.print(UtilProperties.getMessage(PosTransaction.resource,"PosProcessing",defaultLocale));
  Map payRes=null;
  try {
    payRes=ch.processPayment(ProductStoreWorker.getProductStore(productStoreId,session.getDelegator()),session.getUserLogin(),true);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    throw e;
  }
  if (payRes != null && ServiceUtil.isError(payRes)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(payRes));
  }
  BigDecimal change=grandTotal.subtract(paymentAmt);
  output.print(UtilProperties.getMessage(PosTransaction.resource,"PosChange",defaultLocale) + " " + UtilFormatOut.formatPrice(this.getTotalDue().negate()));
  final PosTransaction currentTrans=this;
  final SwingWorker worker=new SwingWorker(){
    @Override public Object construct(){
      currentTrans.popDrawer();
      DeviceLoader.receipt.printReceipt(currentTrans,true);
      return null;
    }
  }
;
  worker.start();
  txLog.set("statusId","POSTX_SOLD");
  txLog.set("orderId",orderId);
  txLog.set("itemCount",new Long(cart.size()));
  txLog.set("logEndDateTime",UtilDateTime.nowTimestamp());
  try {
    txLog.store();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to store TX log - not fatal",module);
  }
  currentTx=null;
  partyId="_NA_";
  return change;
}
