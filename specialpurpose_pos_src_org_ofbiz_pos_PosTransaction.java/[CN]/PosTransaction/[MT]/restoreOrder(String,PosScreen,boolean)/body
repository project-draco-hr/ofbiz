{
  trace("Restore an order");
  LocalDispatcher dispatcher=session.getDispatcher();
  Map<String,Object> svcCtx=FastMap.newInstance();
  svcCtx.put("userLogin",session.getUserLogin());
  svcCtx.put("orderId",orderId);
  svcCtx.put("skipInventoryChecks",Boolean.TRUE);
  svcCtx.put("skipProductChecks",Boolean.TRUE);
  Map<String,Object> svcRes=null;
  try {
    svcRes=dispatcher.runSync("loadCartFromOrder",svcCtx);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    pos.showDialog("dialog/error/exception",e.getMessage());
  }
  if (svcRes == null) {
    Debug.log(UtilProperties.getMessage("EcommerceUiLabels","EcommerceNoShoppingListsCreate",locale),module);
  }
 else   if (ServiceUtil.isError(svcRes)) {
    Debug.logError(ServiceUtil.getErrorMessage(svcRes) + " - " + svcRes,module);
  }
 else {
    ShoppingCart restoredCart=(ShoppingCart)svcRes.get("shoppingCart");
    if (append) {
      this.cart=restoredCart;
      this.orderId=orderId;
    }
 else {
      this.cart=restoredCart;
      this.orderId=orderId;
    }
    this.ch=new CheckOutHelper(session.getDispatcher(),session.getDelegator(),cart);
    if (session.getUserLogin() != null) {
      cart.addAdditionalPartyRole(session.getUserLogin().getString("partyId"),"SALES_REP");
    }
    cart.setFacilityId(facilityId);
    cart.setTerminalId(terminalId);
    cart.setOrderId(orderId);
    return true;
  }
  return false;
}
