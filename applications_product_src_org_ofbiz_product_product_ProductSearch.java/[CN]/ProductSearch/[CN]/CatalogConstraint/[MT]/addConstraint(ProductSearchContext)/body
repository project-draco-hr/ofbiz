{
  List<String> productCategoryIds=FastList.newInstance();
  for (  GenericValue category : productCategories) {
    productCategoryIds.add(category.getString("productCategoryId"));
  }
  String entityAlias="PCM" + productSearchContext.index;
  String prefix="pcm" + productSearchContext.index;
  productSearchContext.index++;
  productSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ProductCategoryId","productCategoryId",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
  productSearchContext.entityConditionList.add(EntityCondition.makeCondition(prefix + "ProductCategoryId",EntityOperator.IN,productCategoryIds));
  productSearchContext.entityConditionList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(prefix + "ThruDate",EntityOperator.GREATER_THAN,productSearchContext.nowTimestamp)));
  productSearchContext.entityConditionList.add(EntityCondition.makeCondition(prefix + "FromDate",EntityOperator.LESS_THAN,productSearchContext.nowTimestamp));
  productSearchContext.productSearchConstraintList.add(productSearchContext.getDelegator().makeValue("ProductSearchConstraint",UtilMisc.toMap("constraintName",constraintName,"infoString",this.prodCatalogId)));
}
