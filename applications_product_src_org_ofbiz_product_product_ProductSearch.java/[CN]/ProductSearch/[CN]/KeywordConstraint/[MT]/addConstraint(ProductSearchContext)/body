{
  if (isAnd) {
    Set keywordSet=KeywordSearchUtil.makeKeywordSet(this.keywordsString,null,true);
    Iterator keywordIter=keywordSet.iterator();
    while (keywordIter.hasNext()) {
      String keyword=(String)keywordIter.next();
      Set expandedSet=new TreeSet();
      boolean replaceEntered=KeywordSearchUtil.expandKeywordForSearch(keyword,expandedSet,productSearchContext.getDelegator());
      if (!replaceEntered) {
        expandedSet.add(keyword);
      }
      Set fixedSet=KeywordSearchUtil.fixKeywordsForSearch(expandedSet,anyPrefix,anySuffix,removeStems,isAnd);
      Set fixedKeywordSet=FastSet.newInstance();
      fixedKeywordSet.addAll(fixedSet);
      productSearchContext.keywordFixedOrSetAndList.add(fixedKeywordSet);
    }
  }
 else {
    Set keywordFirstPass=makeFullKeywordSet(productSearchContext.getDelegator());
    Set keywordSet=KeywordSearchUtil.fixKeywordsForSearch(keywordFirstPass,anyPrefix,anySuffix,removeStems,isAnd);
    productSearchContext.orKeywordFixedSet.addAll(keywordSet);
  }
  Map valueMap=UtilMisc.toMap("constraintName",constraintName,"infoString",this.keywordsString);
  valueMap.put("anyPrefix",this.anyPrefix ? "Y" : "N");
  valueMap.put("anySuffix",this.anySuffix ? "Y" : "N");
  valueMap.put("isAnd",this.isAnd ? "Y" : "N");
  valueMap.put("removeStems",this.removeStems ? "Y" : "N");
  productSearchContext.productSearchConstraintList.add(productSearchContext.getDelegator().makeValue("ProductSearchConstraint",valueMap));
}
