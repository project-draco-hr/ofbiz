{
  String entityAlias="PFA" + productSearchContext.index;
  String prefix="pfa" + productSearchContext.index;
  productSearchContext.index++;
  productSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ProductFeatureId","productFeatureId",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "ProductFeatureId",EntityOperator.IN,productFeatureIdSet));
  productSearchContext.entityConditionList.add(new EntityExpr(new EntityExpr(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(prefix + "ThruDate",EntityOperator.GREATER_THAN,productSearchContext.nowTimestamp)));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "FromDate",EntityOperator.LESS_THAN,productSearchContext.nowTimestamp));
  StringBuffer featureIdInfo=new StringBuffer();
  Iterator featureIdIter=this.productFeatureIdSet.iterator();
  while (featureIdIter.hasNext()) {
    String featureId=(String)featureIdIter.next();
    featureIdInfo.append(featureId);
    if (featureIdIter.hasNext()) {
      featureIdInfo.append(",");
    }
  }
  productSearchContext.productSearchConstraintList.add(productSearchContext.getDelegator().makeValue("ProductSearchConstraint",UtilMisc.toMap("constraintName",constraintName,"infoString",featureIdInfo.toString())));
}
