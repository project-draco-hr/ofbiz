{
  ArrayList<String> productIds=new ArrayList<String>(maxResults == null ? 100 : maxResults.intValue());
  if (eli == null) {
    Debug.logWarning("The eli is null, returning zero results",module);
    return productIds;
  }
  try {
    boolean hasResults=false;
    Object initialResult=null;
    initialResult=eli.next();
    if (initialResult != null) {
      hasResults=true;
    }
    if (resultOffset != null && resultOffset.intValue() > 1) {
      if (Debug.infoOn())       Debug.logInfo("Before relative, current index=" + eli.currentIndex(),module);
      hasResults=eli.relative(resultOffset.intValue() - 1);
      initialResult=null;
    }
    GenericValue searchResult=null;
    if (hasResults) {
      if (initialResult != null) {
        searchResult=(GenericValue)initialResult;
      }
 else {
        searchResult=eli.currentGenericValue();
      }
    }
    if (searchResult == null) {
      int failTotal=0;
      if (this.resultOffset != null) {
        failTotal=this.resultOffset.intValue() - 1;
      }
      this.totalResults=Integer.valueOf(failTotal);
      return productIds;
    }
    int numRetreived=1;
    int duplicatesFound=0;
    Set<String> productIdSet=FastSet.newInstance();
    productIds.add(searchResult.getString("mainProductId"));
    productIdSet.add(searchResult.getString("mainProductId"));
    while ((maxResults == null || numRetreived < maxResults.intValue()) && ((searchResult=eli.next()) != null)) {
      String productId=searchResult.getString("mainProductId");
      if (!productIdSet.contains(productId)) {
        productIds.add(productId);
        productIdSet.add(productId);
        numRetreived++;
      }
 else {
        duplicatesFound++;
      }
    }
    if (searchResult != null) {
      this.totalResults=eli.getResultsSizeAfterPartialList();
    }
    if (this.totalResults == null || this.totalResults.intValue() == 0) {
      int total=numRetreived;
      if (this.resultOffset != null) {
        total+=(this.resultOffset.intValue() - 1);
      }
      this.totalResults=Integer.valueOf(total);
    }
    Debug.logInfo("Got search values, numRetreived=" + numRetreived + ", totalResults="+ totalResults+ ", maxResults="+ maxResults+ ", resultOffset="+ resultOffset+ ", duplicatesFound(in the current results)="+ duplicatesFound,module);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting results from the product search query",module);
  }
  return productIds;
}
