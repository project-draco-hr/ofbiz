{
  if (includeCategoryIds.size() == 0 && excludeCategoryIds.size() == 0 && alwaysIncludeCategoryIds.size() == 0 && includeCategoryIdOrSetAndList.size() == 0 && alwaysIncludeCategoryIdOrSetAndList.size() == 0 && includeFeatureIds.size() == 0 && excludeFeatureIds.size() == 0 && alwaysIncludeFeatureIds.size() == 0 && includeFeatureIdOrSetAndList.size() == 0 && alwaysIncludeFeatureIdOrSetAndList.size() == 0 && includeFeatureCategoryIds.size() == 0 && excludeFeatureCategoryIds.size() == 0 && alwaysIncludeFeatureCategoryIds.size() == 0 && includeFeatureGroupIds.size() == 0 && excludeFeatureGroupIds.size() == 0 && alwaysIncludeFeatureGroupIds.size() == 0) {
    return;
  }
  List incExcCondList=FastList.newInstance();
  EntityCondition incExcCond=null;
  List alwIncCondList=FastList.newInstance();
  EntityCondition alwIncCond=null;
  EntityCondition topCond=null;
  if (includeCategoryIds.size() > 0) {
    Iterator includeCategoryIdIter=includeCategoryIds.iterator();
    while (includeCategoryIdIter.hasNext()) {
      String includeCategoryId=(String)includeCategoryIdIter.next();
      String categoryPrefix="pcm" + this.index;
      String entityAlias="PCM" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(new EntityExpr(new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(new EntityExpr(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(new EntityExpr(categoryPrefix + "ProductCategoryId",EntityOperator.EQUALS,includeCategoryId));
    }
  }
  if (includeFeatureIds.size() > 0) {
    Iterator includeFeatureIdIter=includeFeatureIds.iterator();
    while (includeFeatureIdIter.hasNext()) {
      String includeFeatureId=(String)includeFeatureIdIter.next();
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.EQUALS,includeFeatureId));
    }
  }
  if (includeFeatureCategoryIds.size() > 0) {
    Iterator includeFeatureCategoryIdIter=includeFeatureCategoryIds.iterator();
    while (includeFeatureCategoryIdIter.hasNext()) {
      String includeFeatureCategoryId=(String)includeFeatureCategoryIdIter.next();
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfe" + this.index;
      String otherEntityAlias="PFE" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeature");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureCategoryId","productFeatureCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      incExcCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(new EntityExpr(otherFeaturePrefix + "ProductFeatureCategoryId",EntityOperator.EQUALS,includeFeatureCategoryId));
    }
  }
  if (includeFeatureGroupIds.size() > 0) {
    Iterator includeFeatureGroupIdIter=includeFeatureGroupIds.iterator();
    while (includeFeatureGroupIdIter.hasNext()) {
      String includeFeatureGroupId=(String)includeFeatureGroupIdIter.next();
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfga" + this.index;
      String otherEntityAlias="PFGA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeatureGroupAppl");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureGroupId","productFeatureGroupId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      incExcCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(new EntityExpr(new EntityExpr(otherFeaturePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(otherFeaturePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(new EntityExpr(otherFeaturePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(new EntityExpr(otherFeaturePrefix + "ProductFeatureGroupId",EntityOperator.EQUALS,includeFeatureGroupId));
    }
  }
  if (excludeCategoryIds.size() > 0) {
    List idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(new EntityExpr(new EntityExpr("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(new EntityExpr("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(new EntityExpr("productCategoryId",EntityOperator.IN,excludeCategoryIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProductCategoryMember","productId",new EntityConditionList(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(new EntityExpr("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (excludeFeatureIds.size() > 0) {
    List idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(new EntityExpr(new EntityExpr("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(new EntityExpr("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(new EntityExpr("productFeatureId",EntityOperator.IN,excludeFeatureIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProductFeatureAppl","productId",new EntityConditionList(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(new EntityExpr("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (excludeFeatureCategoryIds.size() > 0) {
    List idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(new EntityExpr(new EntityExpr("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(new EntityExpr("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(new EntityExpr("productFeatureCategoryId",EntityOperator.IN,excludeFeatureCategoryIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProductFeatureAndAppl","productId",new EntityConditionList(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(new EntityExpr("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (excludeFeatureGroupIds.size() > 0) {
    List idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(new EntityExpr(new EntityExpr("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(new EntityExpr("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(new EntityExpr(new EntityExpr("groupThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("groupThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(new EntityExpr("groupFromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(new EntityExpr("productFeatureGroupId",EntityOperator.IN,excludeFeatureGroupIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProdFeaGrpAppAndProdFeaApp","productId",new EntityConditionList(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(new EntityExpr("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (alwaysIncludeCategoryIds.size() > 0) {
    String categoryPrefix="pcm" + this.index;
    String entityAlias="PCM" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    alwIncCondList.add(new EntityExpr(new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    alwIncCondList.add(new EntityExpr(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    alwIncCondList.add(new EntityExpr(categoryPrefix + "ProductCategoryId",EntityOperator.IN,alwaysIncludeCategoryIds));
  }
  if (alwaysIncludeFeatureIds.size() > 0) {
    String featurePrefix="pfa" + this.index;
    String entityAlias="PFA" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    alwIncCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    alwIncCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    alwIncCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.IN,alwaysIncludeFeatureIds));
  }
  if (alwaysIncludeFeatureCategoryIds.size() > 0) {
    Iterator alwaysIncludeFeatureCategoryIdIter=alwaysIncludeFeatureCategoryIds.iterator();
    while (alwaysIncludeFeatureCategoryIdIter.hasNext()) {
      String alwaysIncludeFeatureCategoryId=(String)alwaysIncludeFeatureCategoryIdIter.next();
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfe" + this.index;
      String otherEntityAlias="PFE" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeature");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureCategoryId","productFeatureCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      alwIncCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(new EntityExpr(otherFeaturePrefix + "ProductFeatureCategoryId",EntityOperator.EQUALS,alwaysIncludeFeatureCategoryId));
    }
  }
  if (alwaysIncludeFeatureGroupIds.size() > 0) {
    Iterator alwaysIncludeFeatureGroupIdIter=alwaysIncludeFeatureGroupIds.iterator();
    while (alwaysIncludeFeatureGroupIdIter.hasNext()) {
      String alwaysIncludeFeatureGroupId=(String)alwaysIncludeFeatureGroupIdIter.next();
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfga" + this.index;
      String otherEntityAlias="PFGA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeatureGroupAppl");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureGroupId","productFeatureGroupId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      alwIncCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(new EntityExpr(new EntityExpr(otherFeaturePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(otherFeaturePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(new EntityExpr(otherFeaturePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(new EntityExpr(otherFeaturePrefix + "ProductFeatureGroupId",EntityOperator.EQUALS,alwaysIncludeFeatureGroupId));
    }
  }
  if (includeFeatureIdOrSetAndList.size() > 0) {
    Iterator includeFeatureIdOrSetAndIter=includeFeatureIdOrSetAndList.iterator();
    while (includeFeatureIdOrSetAndIter.hasNext()) {
      Set includeFeatureIdOrSet=(Set)includeFeatureIdOrSetAndIter.next();
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.IN,includeFeatureIdOrSet));
    }
  }
  if (alwaysIncludeFeatureIdOrSetAndList.size() > 0) {
    Iterator alwaysIncludeFeatureIdOrSetAndIter=alwaysIncludeFeatureIdOrSetAndList.iterator();
    while (alwaysIncludeFeatureIdOrSetAndIter.hasNext()) {
      Set alwaysIncludeFeatureIdOrSet=(Set)alwaysIncludeFeatureIdOrSetAndIter.next();
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      alwIncCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.IN,alwaysIncludeFeatureIdOrSet));
    }
  }
  if (includeCategoryIdOrSetAndList.size() > 0) {
    Iterator includeCategoryIdOrSetAndIter=includeCategoryIdOrSetAndList.iterator();
    while (includeCategoryIdOrSetAndIter.hasNext()) {
      Set includeCategoryIdOrSet=(Set)includeCategoryIdOrSetAndIter.next();
      String categoryPrefix="pcm" + this.index;
      String entityAlias="PCM" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(new EntityExpr(new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(new EntityExpr(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(new EntityExpr(categoryPrefix + "ProductCategoryId",EntityOperator.IN,includeCategoryIdOrSet));
    }
  }
  if (alwaysIncludeCategoryIdOrSetAndList.size() > 0) {
    Iterator alwaysIncludeCategoryIdOrSetAndIter=alwaysIncludeCategoryIdOrSetAndList.iterator();
    while (alwaysIncludeCategoryIdOrSetAndIter.hasNext()) {
      Set alwaysIncludeCategoryIdOrSet=(Set)alwaysIncludeCategoryIdOrSetAndIter.next();
      String categoryPrefix="pcm" + this.index;
      String entityAlias="PCM" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      alwIncCondList.add(new EntityExpr(new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(new EntityExpr(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(new EntityExpr(categoryPrefix + "ProductCategoryId",EntityOperator.IN,alwaysIncludeCategoryIdOrSet));
    }
  }
  if (incExcCondList.size() > 0) {
    incExcCond=new EntityConditionList(incExcCondList,EntityOperator.AND);
  }
  if (alwIncCondList.size() > 0) {
    alwIncCond=new EntityConditionList(alwIncCondList,EntityOperator.AND);
  }
  if (incExcCond != null && alwIncCond != null) {
    topCond=new EntityExpr(incExcCond,EntityOperator.OR,alwIncCond);
  }
 else   if (incExcCond != null) {
    topCond=incExcCond;
  }
 else   if (alwIncCond != null) {
    topCond=alwIncCond;
  }
  this.entityConditionList.add(topCond);
  Debug.logInfo("topCond=" + topCond.makeWhereString(null,FastList.newInstance(),EntityConfigUtil.getDatasourceInfo(delegator.getEntityHelperName("Product"))),module);
}
