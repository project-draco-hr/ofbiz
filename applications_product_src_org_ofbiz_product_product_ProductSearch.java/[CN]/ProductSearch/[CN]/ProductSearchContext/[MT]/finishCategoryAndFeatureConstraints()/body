{
  if (includeCategoryIds.size() == 0 && excludeCategoryIds.size() == 0 && alwaysIncludeCategoryIds.size() == 0 && includeCategoryIdOrSetAndList.size() == 0 && alwaysIncludeCategoryIdOrSetAndList.size() == 0 && includeFeatureIds.size() == 0 && excludeFeatureIds.size() == 0 && alwaysIncludeFeatureIds.size() == 0 && includeFeatureIdOrSetAndList.size() == 0 && alwaysIncludeFeatureIdOrSetAndList.size() == 0 && includeFeatureCategoryIds.size() == 0 && excludeFeatureCategoryIds.size() == 0 && alwaysIncludeFeatureCategoryIds.size() == 0 && includeFeatureGroupIds.size() == 0 && excludeFeatureGroupIds.size() == 0 && alwaysIncludeFeatureGroupIds.size() == 0) {
    return;
  }
  List<EntityCondition> incExcCondList=FastList.newInstance();
  EntityCondition incExcCond=null;
  List<EntityCondition> alwIncCondList=FastList.newInstance();
  EntityCondition alwIncCond=null;
  EntityCondition topCond=null;
  if (includeCategoryIds.size() > 0) {
    for (    String includeCategoryId : includeCategoryIds) {
      String categoryPrefix="pcm" + this.index;
      String entityAlias="PCM" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(EntityCondition.makeCondition(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(EntityCondition.makeCondition(categoryPrefix + "ProductCategoryId",EntityOperator.EQUALS,includeCategoryId));
    }
  }
  if (includeFeatureIds.size() > 0) {
    for (    String includeFeatureId : includeFeatureIds) {
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(EntityCondition.makeCondition(featurePrefix + "ProductFeatureId",EntityOperator.EQUALS,includeFeatureId));
    }
  }
  if (includeFeatureCategoryIds.size() > 0) {
    for (    String includeFeatureCategoryId : includeFeatureCategoryIds) {
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfe" + this.index;
      String otherEntityAlias="PFE" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeature");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureCategoryId","productFeatureCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      incExcCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(EntityCondition.makeCondition(otherFeaturePrefix + "ProductFeatureCategoryId",EntityOperator.EQUALS,includeFeatureCategoryId));
    }
  }
  if (includeFeatureGroupIds.size() > 0) {
    for (    String includeFeatureGroupId : includeFeatureGroupIds) {
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfga" + this.index;
      String otherEntityAlias="PFGA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeatureGroupAppl");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureGroupId","productFeatureGroupId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      incExcCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(otherFeaturePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(otherFeaturePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(EntityCondition.makeCondition(otherFeaturePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(EntityCondition.makeCondition(otherFeaturePrefix + "ProductFeatureGroupId",EntityOperator.EQUALS,includeFeatureGroupId));
    }
  }
  if (excludeCategoryIds.size() > 0) {
    List<EntityCondition> idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(EntityCondition.makeCondition("productCategoryId",EntityOperator.IN,excludeCategoryIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProductCategoryMember","productId",EntityCondition.makeCondition(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(EntityCondition.makeCondition("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (excludeFeatureIds.size() > 0) {
    List<EntityCondition> idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(EntityCondition.makeCondition("productFeatureId",EntityOperator.IN,excludeFeatureIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProductFeatureAppl","productId",EntityCondition.makeCondition(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(EntityCondition.makeCondition("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (excludeFeatureCategoryIds.size() > 0) {
    List<EntityCondition> idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(EntityCondition.makeCondition("productFeatureCategoryId",EntityOperator.IN,excludeFeatureCategoryIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProductFeatureAndAppl","productId",EntityCondition.makeCondition(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(EntityCondition.makeCondition("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (excludeFeatureGroupIds.size() > 0) {
    List<EntityCondition> idExcludeCondList=FastList.newInstance();
    idExcludeCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("groupThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("groupThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    idExcludeCondList.add(EntityCondition.makeCondition("groupFromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    idExcludeCondList.add(EntityCondition.makeCondition("productFeatureGroupId",EntityOperator.IN,excludeFeatureGroupIds));
    EntityConditionValue subSelCond=new EntityConditionSubSelect("ProdFeaGrpAppAndProdFeaApp","productId",EntityCondition.makeCondition(idExcludeCondList,EntityOperator.AND),true,delegator);
    incExcCondList.add(EntityCondition.makeCondition("mainProductId",EntityOperator.NOT_EQUAL,subSelCond));
  }
  if (alwaysIncludeCategoryIds.size() > 0) {
    String categoryPrefix="pcm" + this.index;
    String entityAlias="PCM" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    alwIncCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    alwIncCondList.add(EntityCondition.makeCondition(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    alwIncCondList.add(EntityCondition.makeCondition(categoryPrefix + "ProductCategoryId",EntityOperator.IN,alwaysIncludeCategoryIds));
  }
  if (alwaysIncludeFeatureIds.size() > 0) {
    String featurePrefix="pfa" + this.index;
    String entityAlias="PFA" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    alwIncCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    alwIncCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    alwIncCondList.add(EntityCondition.makeCondition(featurePrefix + "ProductFeatureId",EntityOperator.IN,alwaysIncludeFeatureIds));
  }
  if (alwaysIncludeFeatureCategoryIds.size() > 0) {
    for (    String alwaysIncludeFeatureCategoryId : alwaysIncludeFeatureCategoryIds) {
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfe" + this.index;
      String otherEntityAlias="PFE" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeature");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureCategoryId","productFeatureCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      alwIncCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(EntityCondition.makeCondition(otherFeaturePrefix + "ProductFeatureCategoryId",EntityOperator.EQUALS,alwaysIncludeFeatureCategoryId));
    }
  }
  if (alwaysIncludeFeatureGroupIds.size() > 0) {
    for (    String alwaysIncludeFeatureGroupId : alwaysIncludeFeatureGroupIds) {
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      String otherFeaturePrefix="pfga" + this.index;
      String otherEntityAlias="PFGA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addMemberEntity(otherEntityAlias,"ProductFeatureGroupAppl");
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ProductFeatureGroupId","productFeatureGroupId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(otherEntityAlias,otherFeaturePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      this.dynamicViewEntity.addViewLink(entityAlias,otherEntityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
      alwIncCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(otherFeaturePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(otherFeaturePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(EntityCondition.makeCondition(otherFeaturePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(EntityCondition.makeCondition(otherFeaturePrefix + "ProductFeatureGroupId",EntityOperator.EQUALS,alwaysIncludeFeatureGroupId));
    }
  }
  if (includeFeatureIdOrSetAndList.size() > 0) {
    for (    Set<String> includeFeatureIdOrSet : includeFeatureIdOrSetAndList) {
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(EntityCondition.makeCondition(featurePrefix + "ProductFeatureId",EntityOperator.IN,includeFeatureIdOrSet));
    }
  }
  if (alwaysIncludeFeatureIdOrSetAndList.size() > 0) {
    for (    Set<String> alwaysIncludeFeatureIdOrSet : alwaysIncludeFeatureIdOrSetAndList) {
      String featurePrefix="pfa" + this.index;
      String entityAlias="PFA" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      alwIncCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(EntityCondition.makeCondition(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(EntityCondition.makeCondition(featurePrefix + "ProductFeatureId",EntityOperator.IN,alwaysIncludeFeatureIdOrSet));
    }
  }
  if (includeCategoryIdOrSetAndList.size() > 0) {
    for (    Set<String> includeCategoryIdOrSet : includeCategoryIdOrSetAndList) {
      String categoryPrefix="pcm" + this.index;
      String entityAlias="PCM" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      incExcCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      incExcCondList.add(EntityCondition.makeCondition(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      incExcCondList.add(EntityCondition.makeCondition(categoryPrefix + "ProductCategoryId",EntityOperator.IN,includeCategoryIdOrSet));
    }
  }
  if (alwaysIncludeCategoryIdOrSetAndList.size() > 0) {
    for (    Set<String> alwaysIncludeCategoryIdOrSet : alwaysIncludeCategoryIdOrSetAndList) {
      String categoryPrefix="pcm" + this.index;
      String entityAlias="PCM" + this.index;
      this.index++;
      this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
      this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
      this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
      alwIncCondList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
      alwIncCondList.add(EntityCondition.makeCondition(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
      alwIncCondList.add(EntityCondition.makeCondition(categoryPrefix + "ProductCategoryId",EntityOperator.IN,alwaysIncludeCategoryIdOrSet));
    }
  }
  if (incExcCondList.size() > 0) {
    incExcCond=EntityCondition.makeCondition(incExcCondList,EntityOperator.AND);
  }
  if (alwIncCondList.size() > 0) {
    alwIncCond=EntityCondition.makeCondition(alwIncCondList,EntityOperator.AND);
  }
  if (incExcCond != null && alwIncCond != null) {
    topCond=EntityCondition.makeCondition(incExcCond,EntityOperator.OR,alwIncCond);
  }
 else   if (incExcCond != null) {
    topCond=incExcCond;
  }
 else   if (alwIncCond != null) {
    topCond=alwIncCond;
  }
  this.entityConditionList.add(topCond);
  Debug.logInfo("topCond=" + topCond.makeWhereString(null,FastList.<EntityConditionParam>newInstance(),EntityConfig.getDatasource(delegator.getEntityHelperName("Product"))),module);
}
