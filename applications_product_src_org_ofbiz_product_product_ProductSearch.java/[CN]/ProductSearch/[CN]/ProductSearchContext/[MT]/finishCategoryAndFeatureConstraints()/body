{
  if (includeCategoryIds.size() == 0 && excludeCategoryIds.size() == 0 && alwaysIncludeCategoryIds.size() == 0 && includeFeatureIds.size() == 0 && excludeFeatureIds.size() == 0 && alwaysIncludeFeatureIds.size() == 0 && includeFeatureIdOrSetAndList.size() == 0) {
    return;
  }
  List incExcCondList=FastList.newInstance();
  EntityCondition incExcCond=null;
  List alwIncCondList=FastList.newInstance();
  EntityCondition alwIncCond=null;
  EntityCondition topCond=null;
  Iterator includeCategoryIdIter=includeCategoryIds.iterator();
  while (includeCategoryIdIter.hasNext()) {
    String includeCategoryId=(String)includeCategoryIdIter.next();
    String categoryPrefix="pcm" + this.index;
    String entityAlias="PCM" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    incExcCondList.add(new EntityExpr(new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    incExcCondList.add(new EntityExpr(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    incExcCondList.add(new EntityExpr(categoryPrefix + "ProductCategoryId",EntityOperator.EQUALS,includeCategoryId));
  }
  Iterator includeFeatureIdIter=includeFeatureIds.iterator();
  while (includeFeatureIdIter.hasNext()) {
    String includeFeatureId=(String)includeFeatureIdIter.next();
    String featurePrefix="pfa" + this.index;
    String entityAlias="PFA" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    incExcCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    incExcCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    incExcCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.EQUALS,includeFeatureId));
  }
  if (excludeCategoryIds.size() != 0) {
    String categoryPrefix="pcm" + this.index;
    String entityAlias="PCM" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    incExcCondList.add(new EntityExpr(new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    incExcCondList.add(new EntityExpr(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    incExcCondList.add(new EntityExpr(categoryPrefix + "ProductCategoryId",EntityOperator.NOT_IN,excludeCategoryIds));
  }
  if (excludeFeatureIds.size() != 0) {
    String featurePrefix="pfa" + this.index;
    String entityAlias="PFA" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    incExcCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    incExcCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    incExcCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.NOT_IN,excludeFeatureIds));
  }
  if (alwaysIncludeCategoryIds.size() != 0) {
    String categoryPrefix="pcm" + this.index;
    String entityAlias="PCM" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ProductCategoryId","productCategoryId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,categoryPrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    alwIncCondList.add(new EntityExpr(new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(categoryPrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    alwIncCondList.add(new EntityExpr(categoryPrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    alwIncCondList.add(new EntityExpr(categoryPrefix + "ProductCategoryId",EntityOperator.IN,alwaysIncludeCategoryIds));
  }
  if (alwaysIncludeFeatureIds.size() != 0) {
    String featurePrefix="pfa" + this.index;
    String entityAlias="PFA" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    alwIncCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    alwIncCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    alwIncCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.IN,alwaysIncludeFeatureIds));
  }
  Iterator includeFeatureIdOrSetAndIter=includeFeatureIdOrSetAndList.iterator();
  while (includeFeatureIdOrSetAndIter.hasNext()) {
    Set includeFeatureIdOrSet=(Set)includeFeatureIdOrSetAndIter.next();
    String featurePrefix="pfa" + this.index;
    String entityAlias="PFA" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    incExcCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    incExcCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    incExcCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.EQUALS,includeFeatureIdOrSet));
  }
  Iterator alwaysIncludeFeatureIdOrSetAndIter=alwaysIncludeFeatureIdOrSetAndList.iterator();
  while (alwaysIncludeFeatureIdOrSetAndIter.hasNext()) {
    Set alwaysIncludeFeatureIdOrSet=(Set)alwaysIncludeFeatureIdOrSetAndIter.next();
    String featurePrefix="pfa" + this.index;
    String entityAlias="PFA" + this.index;
    this.index++;
    this.dynamicViewEntity.addMemberEntity(entityAlias,"ProductFeatureAppl");
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ProductFeatureId","productFeatureId",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "FromDate","fromDate",null,null,null,null);
    this.dynamicViewEntity.addAlias(entityAlias,featurePrefix + "ThruDate","thruDate",null,null,null,null);
    this.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    alwIncCondList.add(new EntityExpr(new EntityExpr(featurePrefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(featurePrefix + "ThruDate",EntityOperator.GREATER_THAN,this.nowTimestamp)));
    alwIncCondList.add(new EntityExpr(featurePrefix + "FromDate",EntityOperator.LESS_THAN,this.nowTimestamp));
    alwIncCondList.add(new EntityExpr(featurePrefix + "ProductFeatureId",EntityOperator.EQUALS,alwaysIncludeFeatureIdOrSet));
  }
  if (incExcCondList.size() > 0) {
    incExcCond=new EntityConditionList(incExcCondList,EntityOperator.AND);
  }
  if (alwIncCondList.size() > 0) {
    alwIncCond=new EntityConditionList(alwIncCondList,EntityOperator.AND);
  }
  if (incExcCond != null && alwIncCond != null) {
    topCond=new EntityExpr(incExcCond,EntityOperator.OR,alwIncCond);
  }
 else   if (incExcCond != null) {
    topCond=incExcCond;
  }
 else   if (alwIncCond != null) {
    topCond=alwIncCond;
  }
  this.entityConditionList.add(topCond);
  Debug.logInfo("topCond=" + topCond,module);
}
