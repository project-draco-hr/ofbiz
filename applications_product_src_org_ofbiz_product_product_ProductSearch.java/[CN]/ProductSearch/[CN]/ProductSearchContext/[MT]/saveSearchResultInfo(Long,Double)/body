{
  try {
    boolean beganTransaction=TransactionUtil.begin();
    try {
      GenericValue productSearchResult=delegator.makeValue("ProductSearchResult");
      String productSearchResultId=delegator.getNextSeqId("ProductSearchResult");
      productSearchResult.set("productSearchResultId",productSearchResultId);
      productSearchResult.set("visitId",this.visitId);
      if (this.resultSortOrder != null) {
        productSearchResult.set("orderByName",this.resultSortOrder.getOrderName());
        productSearchResult.set("isAscending",this.resultSortOrder.isAscending() ? "Y" : "N");
      }
      productSearchResult.set("numResults",numResults);
      productSearchResult.set("secondsTotal",secondsTotal);
      productSearchResult.set("searchDate",nowTimestamp);
      productSearchResult.create();
      Iterator<GenericValue> productSearchConstraintIter=productSearchConstraintList.iterator();
      int seqId=1;
      while (productSearchConstraintIter.hasNext()) {
        GenericValue productSearchConstraint=productSearchConstraintIter.next();
        productSearchConstraint.set("productSearchResultId",productSearchResultId);
        productSearchConstraint.set("constraintSeqId",Integer.toString(seqId));
        productSearchConstraint.create();
        seqId++;
      }
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericEntityException e1) {
      String errMsg="Error saving product search result info/stats";
      Debug.logError(e1,errMsg,module);
      TransactionUtil.rollback(beganTransaction,errMsg,e1);
    }
  }
 catch (  GenericTransactionException e) {
    Debug.logError(e,"Error saving product search result info/stats",module);
  }
}
