{
  List productCategoryIdList=null;
  if (includeSubCategories) {
    Set productCategoryIdSet=new HashSet();
    ProductSearch.getAllSubCategoryIds(productCategoryId,productCategoryIdSet,productSearchContext.getDelegator(),productSearchContext.nowTimestamp);
    productCategoryIdList=FastList.newInstance();
    productCategoryIdList.addAll(productCategoryIdSet);
  }
 else {
    productCategoryIdList=UtilMisc.toList(productCategoryId);
  }
  String entityAlias="PCM" + productSearchContext.index;
  String prefix="pcm" + productSearchContext.index;
  productSearchContext.index++;
  productSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"ProductCategoryMember");
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ProductCategoryId","productCategoryId",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "ProductCategoryId",EntityOperator.IN,productCategoryIdList));
  productSearchContext.entityConditionList.add(new EntityExpr(new EntityExpr(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(prefix + "ThruDate",EntityOperator.GREATER_THAN,productSearchContext.nowTimestamp)));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "FromDate",EntityOperator.LESS_THAN,productSearchContext.nowTimestamp));
  productSearchContext.productSearchConstraintList.add(productSearchContext.getDelegator().makeValue("ProductSearchConstraint",UtilMisc.toMap("constraintName",constraintName,"infoString",this.productCategoryId,"includeSubCategories",this.includeSubCategories ? "Y" : "N")));
}
