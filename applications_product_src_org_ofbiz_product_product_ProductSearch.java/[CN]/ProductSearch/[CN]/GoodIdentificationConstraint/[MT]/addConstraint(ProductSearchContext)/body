{
  if (UtilValidate.isNotEmpty(goodIdentificationTypeId) || UtilValidate.isNotEmpty(goodIdentificationValue) || UtilValidate.isNotEmpty(include)) {
    String entityAlias="GI" + productSearchContext.index;
    String prefix="gi" + productSearchContext.index;
    productSearchContext.index++;
    EntityComparisonOperator operator=EntityOperator.EQUALS;
    if (UtilValidate.isNotEmpty(include) && include == Boolean.FALSE) {
      operator=EntityOperator.NOT_EQUAL;
    }
    productSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"GoodIdentification");
    if (UtilValidate.isNotEmpty(goodIdentificationTypeId)) {
      productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "GoodIdentificationTypeId","goodIdentificationTypeId",null,null,null,null);
      productSearchContext.entityConditionList.add(new EntityExpr(prefix + "GoodIdentificationTypeId",operator,goodIdentificationTypeId));
    }
    if (UtilValidate.isNotEmpty(goodIdentificationValue)) {
      productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "GoodIdentificationValue","idValue",null,null,null,null);
      productSearchContext.entityConditionList.add(new EntityExpr(prefix + "GoodIdentificationValue",operator,goodIdentificationValue));
    }
    productSearchContext.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
    productSearchContext.productSearchConstraintList.add(productSearchContext.getDelegator().makeValue("ProductSearchConstraint",UtilMisc.toMap("constraintName",constraintName,"infoString","goodIdentificationTypeId [" + this.goodIdentificationTypeId + "] goodIdentificationValue ["+ this.goodIdentificationValue+ "] include ["+ this.include+ "]")));
  }
}
