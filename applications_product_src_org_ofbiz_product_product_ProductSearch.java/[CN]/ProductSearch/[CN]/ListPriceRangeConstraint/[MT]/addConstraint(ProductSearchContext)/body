{
  String entityAlias="PP" + productSearchContext.index;
  String prefix="pp" + productSearchContext.index;
  productSearchContext.index++;
  productSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"ProductPrice");
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ProductPriceTypeId","productPriceTypeId",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ProductPricePurposeId","productPricePurposeId",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "CurrencyUomId","currencyUomId",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ProductStoreGroupId","productStoreGroupId",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  productSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "Price","price",null,null,null,null);
  productSearchContext.dynamicViewEntity.addViewLink("PROD",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "ProductPriceTypeId",EntityOperator.EQUALS,"LIST_PRICE"));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "ProductPricePurposeId",EntityOperator.EQUALS,"PURCHASE"));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "CurrencyUomId",EntityOperator.EQUALS,currencyUomId));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "ProductStoreGroupId",EntityOperator.EQUALS,"_NA_"));
  productSearchContext.entityConditionList.add(new EntityExpr(new EntityExpr(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(prefix + "ThruDate",EntityOperator.GREATER_THAN,productSearchContext.nowTimestamp)));
  productSearchContext.entityConditionList.add(new EntityExpr(prefix + "FromDate",EntityOperator.LESS_THAN,productSearchContext.nowTimestamp));
  if (this.lowPrice != null) {
    productSearchContext.entityConditionList.add(new EntityExpr(prefix + "Price",EntityOperator.GREATER_THAN_EQUAL_TO,this.lowPrice));
  }
  if (this.highPrice != null) {
    productSearchContext.entityConditionList.add(new EntityExpr(prefix + "Price",EntityOperator.LESS_THAN_EQUAL_TO,this.highPrice));
  }
  productSearchContext.productSearchConstraintList.add(productSearchContext.getDelegator().makeValue("ProductSearchConstraint",UtilMisc.toMap("constraintName",constraintName,"infoString","low [" + this.lowPrice + "] high ["+ this.highPrice+ "] currency ["+ this.currencyUomId+ "]")));
}
