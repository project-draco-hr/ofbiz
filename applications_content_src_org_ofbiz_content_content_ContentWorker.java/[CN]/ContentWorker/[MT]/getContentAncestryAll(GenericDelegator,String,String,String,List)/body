{
  String contentIdField=null;
  String contentIdOtherField=null;
  if (direction != null && direction.equalsIgnoreCase("to")) {
    contentIdField="contentId";
    contentIdOtherField="contentIdTo";
  }
 else {
    contentIdField="contentIdTo";
    contentIdOtherField="contentId";
  }
  if (Debug.infoOn())   Debug.logInfo("getContentAncestry, contentId:" + contentId,"");
  Map andMap=UtilMisc.toMap(contentIdField,contentId);
  try {
    List lst=delegator.findByAndCache("ContentAssoc",andMap);
    List lst2=EntityUtil.filterByDate(lst);
    Iterator iter=lst2.iterator();
    while (iter.hasNext()) {
      GenericValue contentAssoc=(GenericValue)iter.next();
      String contentIdOther=contentAssoc.getString(contentIdOtherField);
      if (!contentAncestorList.contains(contentIdOther)) {
        getContentAncestryAll(delegator,contentIdOther,passedContentTypeId,direction,contentAncestorList);
        if (!contentAncestorList.contains(contentIdOther)) {
          GenericValue contentTo=delegator.findByPrimaryKeyCache("Content",UtilMisc.toMap("contentId",contentIdOther));
          String contentTypeId=contentTo.getString("contentTypeId");
          if (contentTypeId != null && contentTypeId.equals(passedContentTypeId))           contentAncestorList.add(contentIdOther);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return;
  }
}
