{
  String contentIdField=null;
  String contentIdOtherField=null;
  if (direction != null && direction.equalsIgnoreCase("to")) {
    contentIdField="contentId";
    contentIdOtherField="contentIdTo";
  }
 else {
    contentIdField="contentIdTo";
    contentIdOtherField="contentId";
  }
  if (Debug.infoOn())   Debug.logInfo("getContentAncestry, contentId:" + contentId,"");
  if (Debug.infoOn())   Debug.logInfo("getContentAncestry, contentAssocTypeId:" + contentAssocTypeId,"");
  Map andMap=null;
  if (UtilValidate.isEmpty(contentAssocTypeId)) {
    andMap=UtilMisc.toMap(contentIdField,contentId);
  }
 else {
    andMap=UtilMisc.toMap(contentIdField,contentId,"contentAssocTypeId",contentAssocTypeId);
  }
  try {
    List<GenericValue> lst=delegator.findByAndCache("ContentAssoc",andMap);
    List<GenericValue> lst2=EntityUtil.filterByDate(lst);
    if (lst2.size() > 0) {
      GenericValue contentAssoc=(GenericValue)lst2.get(0);
      getContentAncestry(delegator,contentAssoc.getString(contentIdOtherField),contentAssocTypeId,direction,contentAncestorList);
      contentAncestorList.add(contentAssoc.getString(contentIdOtherField));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return;
  }
}
