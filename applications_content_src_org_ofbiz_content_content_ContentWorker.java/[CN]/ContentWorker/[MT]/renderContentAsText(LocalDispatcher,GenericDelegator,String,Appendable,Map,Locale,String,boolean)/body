{
  GenericValue content;
  if (UtilValidate.isEmpty(contentId)) {
    Debug.logError("No content ID found.",module);
    return;
  }
  if (cache) {
    content=delegator.findByPrimaryKeyCache("Content",UtilMisc.toMap("contentId",contentId));
  }
 else {
    content=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentId));
  }
  if (content == null) {
    throw new GeneralException("No content found for content ID [" + contentId + "]");
  }
  if ("WEB_SITE_PUB_PT".equals(content.get("contentTypeId")) && content.get("dataResourceId") == null) {
    List<GenericValue> relContentIds=delegator.findByAnd("ContentAssocDataResourceViewTo",UtilMisc.toMap("contentIdStart",content.get("contentId"),"statusId","CTNT_PUBLISHED","caContentAssocTypeId","PUBLISH_LINK"),UtilMisc.toList("caFromDate"));
    relContentIds=EntityUtil.filterByDate(relContentIds,UtilDateTime.nowTimestamp(),"caFromDate","caThruDate",true);
    if (relContentIds != null && relContentIds.size() > 0) {
      content=EntityUtil.getFirst(relContentIds);
    }
    if (content == null) {
      throw new GeneralException("No related content found for publish point [" + contentId + "]");
    }
  }
  if (locale != null) {
    String thisLocaleString=(String)content.get("localeString");
    String targetLocaleString=locale.toString();
    thisLocaleString=(thisLocaleString != null) ? thisLocaleString : "";
    if (targetLocaleString != null && !targetLocaleString.equalsIgnoreCase(thisLocaleString)) {
      GenericValue altContent=ContentWorker.findAlternateLocaleContent(delegator,content,locale);
      if (altContent != null) {
        content=altContent;
      }
    }
  }
  String serviceName=content.getString("serviceName");
  if (dispatcher != null && UtilValidate.isNotEmpty(serviceName)) {
    DispatchContext dctx=dispatcher.getDispatchContext();
    ModelService service=dctx.getModelService(serviceName);
    if (service != null) {
      Map serviceCtx=service.makeValid(templateContext,ModelService.IN_PARAM);
      Map serviceRes;
      try {
        serviceRes=dispatcher.runSync(serviceName,serviceCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        throw e;
      }
      if (ServiceUtil.isError(serviceRes)) {
        throw new GeneralException(ServiceUtil.getErrorMessage(serviceRes));
      }
 else {
        templateContext.putAll(serviceRes);
      }
    }
  }
  String templateDataResourceId=content.getString("templateDataResourceId");
  String dataResourceId=content.getString("dataResourceId");
  contentId=content.getString("contentId");
  if (UtilValidate.isEmpty(dataResourceId)) {
    Debug.logError("No dataResourceId found.",module);
    return;
  }
  if (templateContext == null) {
    templateContext=FastMap.newInstance();
  }
  ContentMapFacade facade=new ContentMapFacade(dispatcher,content,templateContext,locale,mimeTypeId,cache);
  String contentDecoratorId=content.getString("decoratorContentId");
  boolean isDecorated=Boolean.TRUE.equals(templateContext.get("_IS_DECORATED_"));
  if (!isDecorated && UtilValidate.isNotEmpty(contentDecoratorId)) {
    GenericValue decorator;
    if (cache) {
      decorator=delegator.findByPrimaryKeyCache("Content",UtilMisc.toMap("contentId",contentDecoratorId));
    }
 else {
      decorator=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentDecoratorId));
    }
    if (decorator == null) {
      throw new GeneralException("No decorator content found for decorator contentId [" + contentDecoratorId + "]");
    }
    ContentMapFacade decFacade=new ContentMapFacade(dispatcher,decorator,templateContext,locale,mimeTypeId,cache);
    facade.setIsDecorated(true);
    templateContext.put("decoratedContent",facade);
    templateContext.put("thisContent",decFacade);
    ContentWorker.renderContentAsText(dispatcher,delegator,contentDecoratorId,out,templateContext,locale,mimeTypeId,cache);
  }
 else {
    templateContext.put("thisContent",facade);
    templateContext.put("contentId",contentId);
    if (UtilValidate.isEmpty(templateDataResourceId) || templateContext.containsKey("ignoreTemplate")) {
      if (UtilValidate.isEmpty(contentId)) {
        Debug.logError("No content ID found.",module);
        return;
      }
      DataResourceWorker.renderDataResourceAsText(delegator,dataResourceId,out,templateContext,locale,mimeTypeId,cache);
    }
 else {
      Writer dataWriter=new StringWriter();
      DataResourceWorker.renderDataResourceAsText(delegator,dataResourceId,dataWriter,templateContext,locale,mimeTypeId,cache);
      String textData=dataWriter.toString();
      if (textData != null) {
        textData=textData.trim();
      }
      String mimeType;
      try {
        mimeType=DataResourceWorker.getDataResourceMimeType(delegator,dataResourceId,null);
      }
 catch (      GenericEntityException e) {
        throw new GeneralException(e.getMessage());
      }
      if (UtilValidate.isNotEmpty(mimeType)) {
        if (mimeType.toLowerCase().indexOf("xml") >= 0) {
          StringReader sr=new StringReader(textData);
          try {
            NodeModel nodeModel=NodeModel.parse(new InputSource(sr));
            templateContext.put("doc",nodeModel);
          }
 catch (          SAXException e) {
            throw new GeneralException(e.getMessage());
          }
catch (          ParserConfigurationException e2) {
            throw new GeneralException(e2.getMessage());
          }
        }
 else {
          templateContext.put("textData",textData);
        }
      }
 else {
        templateContext.put("textData",textData);
      }
      DataResourceWorker.renderDataResourceAsText(delegator,templateDataResourceId,out,templateContext,locale,mimeTypeId,cache);
    }
  }
}
