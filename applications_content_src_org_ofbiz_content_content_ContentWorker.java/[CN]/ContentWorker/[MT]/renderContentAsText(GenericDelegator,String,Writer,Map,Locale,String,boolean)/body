{
  GenericValue content;
  if (cache) {
    content=delegator.findByPrimaryKeyCache("Content",UtilMisc.toMap("contentId",contentId));
  }
 else {
    content=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentId));
  }
  if (content == null) {
    throw new GeneralException("No content found for content ID [" + contentId + "]");
  }
  if (content.get("contentTypeId").equals("WEB_SITE_PUB_PT") && content.get("dataResourceId") == null) {
    List relContentIds=delegator.findByAnd("ContentAssocDataResourceViewTo",UtilMisc.toMap("contentIdStart",content.get("contentId"),"statusId","CTNT_PUBLISHED","caContentAssocTypeId","PUBLISH_LINK"),UtilMisc.toList("caFromDate"));
    relContentIds=EntityUtil.filterByDate(relContentIds,UtilDateTime.nowTimestamp(),"caFromDate","caThruDate",true);
    if (relContentIds != null && relContentIds.size() > 0) {
      content=EntityUtil.getFirst(relContentIds);
    }
    if (content == null) {
      throw new GeneralException("No related content found for publish point [" + contentId + "]");
    }
  }
  if (locale != null) {
    String thisLocaleString=(String)content.get("localeString");
    String targetLocaleString=locale.toString();
    thisLocaleString=(thisLocaleString != null) ? thisLocaleString : "";
    if (targetLocaleString != null && !targetLocaleString.equalsIgnoreCase(thisLocaleString)) {
      GenericValue altContent=ContentWorker.findAlternateLocaleContent(delegator,content,locale);
      if (altContent != null) {
        content=altContent;
      }
    }
  }
  String templateDataResourceId=content.getString("templateDataResourceId");
  String dataResourceId=content.getString("dataResourceId");
  contentId=content.getString("contentId");
  if (templateContext == null) {
    templateContext=FastMap.newInstance();
  }
  templateContext.put("contentId",contentId);
  List subContent=delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentId",contentId,"contentAssocTypeId","SUB_CONTENT"),UtilMisc.toList("-fromDate"));
  subContent=EntityUtil.filterByDate(subContent);
  if (subContent != null && subContent.size() > 0) {
    Iterator i=subContent.iterator();
    while (i.hasNext()) {
      GenericValue contentAssoc=(GenericValue)i.next();
      String contentIdTo=contentAssoc.getString("contentIdTo");
      String key=contentAssoc.getString("mapKey");
      String textData=ContentWorker.renderContentAsText(delegator,contentIdTo,FastMap.newInstance(),locale,mimeTypeId,cache);
      if (UtilValidate.isNotEmpty(textData)) {
        templateContext.put(key,textData);
      }
    }
  }
  if (UtilValidate.isEmpty(templateDataResourceId) || templateContext.containsKey("ignoreTemplate")) {
    DataResourceWorker.renderDataResourceAsText(delegator,dataResourceId,out,templateContext,locale,mimeTypeId,cache);
  }
 else {
    Writer dataWriter=new StringWriter();
    DataResourceWorker.renderDataResourceAsText(delegator,dataResourceId,dataWriter,templateContext,locale,mimeTypeId,cache);
    String textData=dataWriter.toString();
    if (textData != null) {
      textData=textData.trim();
    }
    String mimeType;
    try {
      mimeType=DataResourceWorker.getDataResourceMimeType(delegator,dataResourceId,null);
    }
 catch (    GenericEntityException e) {
      throw new GeneralException(e.getMessage());
    }
    if (UtilValidate.isNotEmpty(mimeType)) {
      if (mimeType.toLowerCase().indexOf("xml") >= 0) {
        StringReader sr=new StringReader(textData);
        try {
          NodeModel nodeModel=NodeModel.parse(new InputSource(sr));
          templateContext.put("doc",nodeModel);
        }
 catch (        SAXException e) {
          throw new GeneralException(e.getMessage());
        }
catch (        ParserConfigurationException e2) {
          throw new GeneralException(e2.getMessage());
        }
      }
 else {
        templateContext.put("textData",textData);
      }
    }
 else {
      templateContext.put("textData",textData);
    }
    DataResourceWorker.renderDataResourceAsText(delegator,templateDataResourceId,out,templateContext,locale,mimeTypeId,cache);
  }
}
