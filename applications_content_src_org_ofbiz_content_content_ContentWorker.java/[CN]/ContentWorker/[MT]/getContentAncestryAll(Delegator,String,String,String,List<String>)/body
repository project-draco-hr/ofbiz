{
  String contentIdField=null;
  String contentIdOtherField=null;
  if (direction != null && direction.equalsIgnoreCase("to")) {
    contentIdField="contentId";
    contentIdOtherField="contentIdTo";
  }
 else {
    contentIdField="contentIdTo";
    contentIdOtherField="contentId";
  }
  if (Debug.infoOn())   Debug.logInfo("getContentAncestry, contentId:" + contentId,"");
  Map<String,Object> andMap=UtilMisc.<String,Object>toMap(contentIdField,contentId);
  try {
    List<GenericValue> lst=delegator.findByAnd("ContentAssoc",andMap,null,true);
    List<GenericValue> lst2=EntityUtil.filterByDate(lst);
    for (    GenericValue contentAssoc : lst2) {
      String contentIdOther=contentAssoc.getString(contentIdOtherField);
      if (!contentAncestorList.contains(contentIdOther)) {
        getContentAncestryAll(delegator,contentIdOther,passedContentTypeId,direction,contentAncestorList);
        if (!contentAncestorList.contains(contentIdOther)) {
          GenericValue contentTo=delegator.findOne("Content",UtilMisc.toMap("contentId",contentIdOther),true);
          String contentTypeId=contentTo.getString("contentTypeId");
          if (contentTypeId != null && contentTypeId.equals(passedContentTypeId))           contentAncestorList.add(contentIdOther);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return;
  }
}
