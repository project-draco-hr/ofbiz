{
  String contentTypeId=null;
  String contentId=null;
  try {
    if (contentAssocTypeId == null) {
      contentAssocTypeId="";
    }
    contentId=(String)content.get("contentId");
    contentTypeId=(String)content.get("contentTypeId");
    List<GenericValue> topicList=content.getRelatedByAnd("ToContentAssoc",UtilMisc.toMap("contentAssocTypeId","TOPIC"));
    List<String> topics=FastList.newInstance();
    for (int i=0; i < topicList.size(); i++) {
      GenericValue assoc=topicList.get(i);
      topics.add(assoc.getString("contentId"));
    }
    List<GenericValue> keywordList=content.getRelatedByAnd("ToContentAssoc",UtilMisc.toMap("contentAssocTypeId","KEYWORD"));
    List<String> keywords=FastList.newInstance();
    for (int i=0; i < keywordList.size(); i++) {
      GenericValue assoc=keywordList.get(i);
      keywords.add(assoc.getString("contentId"));
    }
    List<GenericValue> purposeValueList=content.getRelatedCache("ContentPurpose");
    List<String> purposes=FastList.newInstance();
    for (int i=0; i < purposeValueList.size(); i++) {
      GenericValue purposeValue=purposeValueList.get(i);
      purposes.add(purposeValue.getString("contentPurposeTypeId"));
    }
    List<String> contentTypeAncestry=FastList.newInstance();
    getContentTypeAncestry(delegator,contentTypeId,contentTypeAncestry);
    Map<String,Object> context=FastMap.newInstance();
    context.put("content",content);
    context.put("contentAssocTypeId",contentAssocTypeId);
    context.put("purposes",purposes);
    context.put("topics",topics);
    context.put("keywords",keywords);
    context.put("typeAncestry",contentTypeAncestry);
    boolean isPick=checkWhen(context,(String)whenMap.get("pickWhen"));
    boolean isReturnBefore=checkReturnWhen(context,(String)whenMap.get("returnBeforePickWhen"));
    Map<String,Object> thisNode=null;
    if (isPick || !isReturnBefore) {
      thisNode=FastMap.newInstance();
      thisNode.put("contentId",contentId);
      thisNode.put("contentTypeId",contentTypeId);
      thisNode.put("contentAssocTypeId",contentAssocTypeId);
      List<Map<String,Object>> kids=UtilGenerics.checkList(masterNode.get("kids"));
      if (kids == null) {
        kids=FastList.newInstance();
        masterNode.put("kids",kids);
      }
      kids.add(thisNode);
    }
    if (isPick) {
      pickList.add(content);
      thisNode.put("value",content);
    }
    boolean isReturnAfter=checkReturnWhen(context,(String)whenMap.get("returnAfterPickWhen"));
    if (!isReturnAfter) {
      List<String> assocTypes=FastList.newInstance();
      List<GenericValue> relatedAssocs=getContentAssocsWithId(delegator,contentId,fromDate,thruDate,direction,assocTypes);
      Map<String,Object> assocContext=FastMap.newInstance();
      assocContext.put("related",relatedAssocs);
      for (      GenericValue assocValue : relatedAssocs) {
        contentAssocTypeId=(String)assocValue.get("contentAssocTypeId");
        assocContext.put("contentAssocTypeId",contentAssocTypeId);
        assocContext.put("parentContent",content);
        String assocRelation=null;
        String relatedDirection=null;
        if (direction != null && direction.equalsIgnoreCase("From")) {
          assocContext.put("contentIdFrom",assocValue.get("contentId"));
          assocRelation="ToContent";
          relatedDirection="From";
        }
 else {
          assocContext.put("contentIdTo",assocValue.get("contentId"));
          assocRelation="FromContent";
          relatedDirection="To";
        }
        boolean isFollow=checkWhen(assocContext,(String)whenMap.get("followWhen"));
        if (isFollow) {
          GenericValue thisContent=assocValue.getRelatedOne(assocRelation,false);
          traverse(delegator,thisContent,fromDate,thruDate,whenMap,depthIdx + 1,thisNode,contentAssocTypeId,pickList,relatedDirection);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError("Entity Error:" + e.getMessage(),null);
  }
}
