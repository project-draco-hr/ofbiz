{
  ContainerConfig.Configuration cfg=ContainerConfig.getConfiguration(containerName,configFile);
  ContainerConfig.Configuration.Property initialCtxProp=cfg.getProperty("use-initial-context");
  ContainerConfig.Configuration.Property lookupHostProp=cfg.getProperty("bound-host");
  ContainerConfig.Configuration.Property lookupPortProp=cfg.getProperty("bound-port");
  ContainerConfig.Configuration.Property lookupNameProp=cfg.getProperty("bound-name");
  ContainerConfig.Configuration.Property delegatorProp=cfg.getProperty("delegator-name");
  ContainerConfig.Configuration.Property clientProp=cfg.getProperty("client-factory");
  ContainerConfig.Configuration.Property serverProp=cfg.getProperty("server-factory");
  if (lookupNameProp == null || UtilValidate.isEmpty(lookupNameProp.value)) {
    throw new ContainerException("Invalid lookup-name defined in container configuration");
  }
 else {
    this.name=lookupNameProp.value;
  }
  if (delegatorProp == null || UtilValidate.isEmpty(delegatorProp.value)) {
    throw new ContainerException("Invalid delegator-name defined in container configuration");
  }
  String useCtx=initialCtxProp == null || initialCtxProp.value == null ? "false" : initialCtxProp.value;
  String host=lookupHostProp == null || lookupHostProp.value == null ? "localhost" : lookupHostProp.value;
  String port=lookupPortProp == null || lookupPortProp.value == null ? "1099" : lookupPortProp.value;
  if (Start.getInstance().getConfig().portOffset != 0) {
    Integer portValue=Integer.valueOf(port);
    portValue+=Start.getInstance().getConfig().portOffset;
    port=portValue.toString();
  }
  String keystore=ContainerConfig.getPropertyValue(cfg,"ssl-keystore",null);
  String ksType=ContainerConfig.getPropertyValue(cfg,"ssl-keystore-type","JKS");
  String ksPass=ContainerConfig.getPropertyValue(cfg,"ssl-keystore-pass",null);
  String ksAlias=ContainerConfig.getPropertyValue(cfg,"ssl-keystore-alias",null);
  boolean clientAuth=ContainerConfig.getPropertyValue(cfg,"ssl-client-auth",false);
  RMIClientSocketFactory csf=null;
  RMIServerSocketFactory ssf=null;
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  if (clientProp != null && UtilValidate.isNotEmpty(clientProp.value)) {
    try {
      Class<?> c=loader.loadClass(clientProp.value);
      csf=(RMIClientSocketFactory)c.newInstance();
    }
 catch (    Exception e) {
      throw new ContainerException(e);
    }
  }
  if (serverProp != null && UtilValidate.isNotEmpty(serverProp.value)) {
    try {
      Class<?> c=loader.loadClass(serverProp.value);
      ssf=(RMIServerSocketFactory)c.newInstance();
    }
 catch (    Exception e) {
      throw new ContainerException(e);
    }
  }
  if (ssf != null && ssf instanceof org.apache.ofbiz.service.rmi.socket.ssl.SSLServerSocketFactory) {
    ((org.apache.ofbiz.service.rmi.socket.ssl.SSLServerSocketFactory)ssf).setNeedClientAuth(clientAuth);
    ((org.apache.ofbiz.service.rmi.socket.ssl.SSLServerSocketFactory)ssf).setKeyStoreAlias(ksAlias);
    if (keystore != null) {
      ((org.apache.ofbiz.service.rmi.socket.ssl.SSLServerSocketFactory)ssf).setKeyStore(keystore,ksType,ksPass);
    }
  }
  Delegator delegator=DelegatorFactory.getDelegator(delegatorProp.value);
  LocalDispatcher dispatcher=ServiceContainer.getLocalDispatcher(name,delegator);
  try {
    remote=new RemoteDispatcherImpl(dispatcher,csf,ssf);
  }
 catch (  RemoteException e) {
    throw new ContainerException("Unable to start the RMI dispatcher",e);
  }
  if (!useCtx.equalsIgnoreCase("true")) {
    try {
      Naming.rebind("//" + host + ":"+ port+ "/"+ name,remote);
    }
 catch (    RemoteException e) {
      throw new ContainerException("Unable to bind RMIDispatcher to RMI on " + "//host[" + host + "]:port["+ port+ "]/name["+ name+ "] - with remote="+ remote,e);
    }
catch (    java.net.MalformedURLException e) {
      throw new ContainerException("Invalid URL for binding",e);
    }
  }
 else {
    try {
      InitialContext ic=new InitialContext();
      ic.rebind(name,remote);
    }
 catch (    NamingException e) {
      throw new ContainerException("Unable to bind RMIDispatcher to JNDI",e);
    }
    try {
      InitialContext ic=new InitialContext();
      Object o=ic.lookup(name);
      if (o == null) {
        throw new NamingException("Object came back null");
      }
    }
 catch (    NamingException e) {
      throw new ContainerException("Unable to lookup bound objects",e);
    }
  }
  return true;
}
