{
  if ((status == Status.STATUS_COMMITTED && !rollback) || (status == Status.STATUS_ROLLEDBACK && rollback)) {
    Thread thread=new Thread(){
      @Override public void run(){
        String msgPrefix=null;
        if (rollback) {
          msgPrefix="[Rollback] ";
        }
 else {
          msgPrefix="[Commit] ";
        }
        boolean beganTx;
        try {
          beganTx=TransactionUtil.begin();
          try {
            ModelService model=dctx.getModelService(serviceName);
            Map<String,Object> thisContext;
            if (model.validate) {
              thisContext=model.makeValid(context,ModelService.IN_PARAM);
            }
 else {
              thisContext=new HashMap<String,Object>();
              thisContext.putAll(context);
            }
            thisContext.put("userLogin",ServiceUtil.getUserLogin(dctx,thisContext,runAsUser));
            if (async) {
              if (Debug.infoOn())               Debug.logInfo(msgPrefix + "Invoking [" + serviceName+ "] via runAsync",MODULE);
              dctx.getDispatcher().runAsync(serviceName,thisContext,persist);
            }
 else {
              if (Debug.infoOn())               Debug.logInfo(msgPrefix + "Invoking [" + serviceName+ "] via runSyncIgnore",MODULE);
              dctx.getDispatcher().runSyncIgnore(serviceName,thisContext);
            }
          }
 catch (          Throwable t) {
            Debug.logError(t,"Problem calling " + msgPrefix + "service : "+ serviceName+ " / "+ context,MODULE);
            try {
              TransactionUtil.rollback(beganTx,t.getMessage(),t);
            }
 catch (            GenericTransactionException e) {
              Debug.logError(e,MODULE);
            }
          }
 finally {
            try {
              TransactionUtil.commit(beganTx);
            }
 catch (            GenericTransactionException e) {
              Debug.logError(e,MODULE);
            }
          }
        }
 catch (        GenericTransactionException e) {
          Debug.logError(e,MODULE);
        }
      }
    }
;
    thread.start();
  }
}
