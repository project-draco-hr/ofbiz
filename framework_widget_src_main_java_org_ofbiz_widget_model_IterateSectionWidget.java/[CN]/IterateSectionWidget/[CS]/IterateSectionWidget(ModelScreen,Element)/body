{
  super(modelScreen,iterateSectionElement);
  String listName=iterateSectionElement.getAttribute("list");
  if (listName.isEmpty()) {
    listName=iterateSectionElement.getAttribute("list-name");
  }
  this.listNameExdr=FlexibleMapAccessor.getInstance(listName);
  String entryName=iterateSectionElement.getAttribute("entry");
  if (entryName.isEmpty()) {
    entryName=iterateSectionElement.getAttribute("entry-name");
  }
  this.entryNameExdr=FlexibleStringExpander.getInstance(entryName);
  String keyName=iterateSectionElement.getAttribute("key");
  if (keyName.isEmpty()) {
    keyName=iterateSectionElement.getAttribute("key-name");
  }
  this.keyNameExdr=FlexibleStringExpander.getInstance(keyName);
  this.paginateTarget=FlexibleStringExpander.getInstance(iterateSectionElement.getAttribute("paginate-target"));
  this.paginate=FlexibleStringExpander.getInstance(iterateSectionElement.getAttribute("paginate"));
  int viewSize=DEFAULT_PAGE_SIZE;
  String viewSizeStr=iterateSectionElement.getAttribute("view-size");
  if (!viewSizeStr.isEmpty()) {
    viewSize=Integer.parseInt(viewSizeStr);
  }
  this.viewSize=viewSize;
  List<? extends Element> childElementList=UtilXml.childElementList(iterateSectionElement);
  if (childElementList.isEmpty()) {
    this.sectionList=Collections.emptyList();
  }
 else {
    List<ModelScreenWidget.Section> sectionList=new ArrayList<ModelScreenWidget.Section>(childElementList.size());
    for (    Element sectionElement : childElementList) {
      ModelScreenWidget.Section section=new ModelScreenWidget.Section(modelScreen,sectionElement,false);
      sectionList.add(section);
    }
    this.sectionList=Collections.unmodifiableList(sectionList);
  }
}
