{
  Locale locale=UtilHttp.getLocale(request);
  String paymentDate=request.getParameter("payment_date");
  String paymentType=request.getParameter("payment_type");
  String paymentAmount=request.getParameter("mc_gross");
  String paymentStatus=request.getParameter("payment_status");
  String transactionId=request.getParameter("txn_id");
  List<GenericValue> toStore=new LinkedList<GenericValue>();
  SimpleDateFormat sdf=new SimpleDateFormat("hh:mm:ss MMM d, yyyy z");
  java.sql.Timestamp authDate=null;
  try {
    authDate=new java.sql.Timestamp(sdf.parse(paymentDate).getTime());
  }
 catch (  ParseException e) {
    Debug.logError(e,"Cannot parse date string: " + paymentDate,module);
    authDate=UtilDateTime.nowTimestamp();
  }
catch (  NullPointerException e) {
    Debug.logError(e,"Cannot parse date string: " + paymentDate,module);
    authDate=UtilDateTime.nowTimestamp();
  }
  paymentPreference.set("maxAmount",new BigDecimal(paymentAmount));
  if (paymentStatus.equals("Completed")) {
    paymentPreference.set("statusId","PAYMENT_RECEIVED");
  }
 else   if (paymentStatus.equals("Pending")) {
    paymentPreference.set("statusId","PAYMENT_NOT_RECEIVED");
  }
 else {
    paymentPreference.set("statusId","PAYMENT_CANCELLED");
  }
  toStore.add(paymentPreference);
  Delegator delegator=paymentPreference.getDelegator();
  String responseId=delegator.getNextSeqId("PaymentGatewayResponse");
  GenericValue response=delegator.makeValue("PaymentGatewayResponse");
  response.set("paymentGatewayResponseId",responseId);
  response.set("paymentServiceTypeEnumId","PRDS_PAY_EXTERNAL");
  response.set("orderPaymentPreferenceId",paymentPreference.get("orderPaymentPreferenceId"));
  response.set("paymentMethodTypeId",paymentPreference.get("paymentMethodTypeId"));
  response.set("paymentMethodId",paymentPreference.get("paymentMethodId"));
  response.set("amount",new BigDecimal(paymentAmount));
  response.set("referenceNum",transactionId);
  response.set("gatewayCode",paymentStatus);
  response.set("gatewayFlag",paymentStatus.substring(0,1));
  response.set("gatewayMessage",paymentType);
  response.set("transactionDate",authDate);
  toStore.add(response);
  try {
    delegator.storeAll(toStore);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot set payment preference/payment info",module);
    return false;
  }
  Map<String,Object> results=null;
  try {
    String comment=UtilProperties.getMessage(resource,"AccountingPaymentReceiveViaPayPal",locale);
    results=dispatcher.runSync("createPaymentFromPreference",UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreferenceId",paymentPreference.get("orderPaymentPreferenceId"),"comments",comment));
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Failed to execute service createPaymentFromPreference",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.failedToExecuteServiceCreatePaymentFromPreference",locale));
    return false;
  }
  if ((results == null) || (results.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))) {
    Debug.logError((String)results.get(ModelService.ERROR_MESSAGE),module);
    request.setAttribute("_ERROR_MESSAGE_",results.get(ModelService.ERROR_MESSAGE));
    return false;
  }
  return true;
}
