{
  CalendarBuilder builder=new CalendarBuilder();
  Calendar calendar=null;
  try {
    calendar=builder.build(is);
  }
  finally {
    if (is != null) {
      is.close();
    }
  }
  if (Debug.verboseOn()) {
    Debug.logVerbose("Processing calendar:\r\n" + calendar,module);
  }
  String workEffortId=fromXProperty(calendar.getProperties(),workEffortIdXPropName);
  if (workEffortId == null) {
    workEffortId=(String)context.get("workEffortId");
  }
  if (!workEffortId.equals(context.get("workEffortId"))) {
    Debug.logWarning("Spoof attempt: received calendar workEffortId " + workEffortId + " on URL workEffortId "+ context.get("workEffortId"),module);
    return ICalWorker.createForbiddenResponse(null);
  }
  Delegator delegator=(Delegator)context.get("delegator");
  GenericValue publishProperties=delegator.findOne("WorkEffort",UtilMisc.toMap("workEffortId",workEffortId),false);
  if (!isCalendarPublished(publishProperties)) {
    Debug.logInfo("WorkEffort calendar is not published: " + workEffortId,module);
    return ICalWorker.createNotFoundResponse(null);
  }
  if (context.get("userLogin") == null) {
    return ICalWorker.createNotAuthorizedResponse(null);
  }
  if (!hasPermission(workEffortId,"UPDATE",context)) {
    return ICalWorker.createForbiddenResponse(null);
  }
  boolean hasCreatePermission=hasPermission(workEffortId,"CREATE",context);
  List<GenericValue> workEfforts=getRelatedWorkEfforts(publishProperties,context);
  Set<String> validWorkEfforts=FastSet.newInstance();
  if (UtilValidate.isNotEmpty(workEfforts)) {
    for (    GenericValue workEffort : workEfforts) {
      validWorkEfforts.add(workEffort.getString("workEffortId"));
    }
  }
  List<Component> components=UtilGenerics.checkList(calendar.getComponents(),Component.class);
  ResponseProperties responseProps=null;
  for (  Component component : components) {
    if (Component.VEVENT.equals(component.getName()) || Component.VTODO.equals(component.getName())) {
      workEffortId=fromXProperty(component.getProperties(),workEffortIdXPropName);
      if (workEffortId == null) {
        Property uid=component.getProperty(Uid.UID);
        if (uid != null) {
          GenericValue workEffort=EntityUtil.getFirst(delegator.findByAnd("WorkEffort",UtilMisc.toMap("universalId",uid.getValue())));
          if (workEffort != null) {
            workEffortId=workEffort.getString("workEffortId");
          }
        }
      }
      if (workEffortId != null) {
        if (validWorkEfforts.contains(workEffortId)) {
          replaceProperty(component.getProperties(),toXProperty(workEffortIdXPropName,workEffortId));
          responseProps=storeWorkEffort(component,context);
        }
 else {
          Debug.logWarning("Spoof attempt: unrelated workEffortId " + workEffortId + " on URL workEffortId "+ context.get("workEffortId"),module);
          responseProps=ICalWorker.createForbiddenResponse(null);
        }
      }
 else       if (hasCreatePermission) {
        responseProps=createWorkEffort(component,context);
      }
      if (responseProps != null) {
        return responseProps;
      }
    }
  }
  Map<String,? extends Object> serviceMap=UtilMisc.toMap("workEffortId",context.get("workEffortId"),"icalData",calendar.toString());
  GenericValue iCalData=publishProperties.getRelatedOne("WorkEffortIcalData");
  Map<String,Object> serviceResult=null;
  if (iCalData == null) {
    serviceResult=invokeService("createWorkEffortICalData",serviceMap,context);
  }
 else {
    serviceResult=invokeService("updateWorkEffortICalData",serviceMap,context);
  }
  if (ServiceUtil.isError(serviceResult)) {
    return ICalWorker.createPartialContentResponse(ServiceUtil.getErrorMessage(serviceResult));
  }
  return ICalWorker.createOkResponse(null);
}
