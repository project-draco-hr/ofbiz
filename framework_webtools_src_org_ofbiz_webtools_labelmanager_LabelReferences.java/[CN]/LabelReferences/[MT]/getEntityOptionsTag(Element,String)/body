{
  String entityName=UtilFormatOut.checkNull(element.getAttribute("entity-name"));
  String description=UtilFormatOut.checkNull(element.getAttribute("description"));
  Set<String> fields=new TreeSet<String>();
  Set<String> pkFields=new TreeSet<String>();
  try {
    if (UtilValidate.isNotEmpty(entityName)) {
      GenericDelegator delegator=LabelManagerFactory.getDelegator();
      ModelEntity entity=delegator.getModelEntity(entityName);
      if (UtilValidate.isNotEmpty(entity) && UtilValidate.isNotEmpty(entity.getDefaultResourceName())) {
        int pos=0;
        while (pos >= 0) {
          pos=description.indexOf(startExpression,pos);
          if (pos >= 0) {
            int endLabel=description.indexOf(endExpression,pos);
            if (endLabel >= 0) {
              String fieldName=description.substring(pos + startExpression.length(),endLabel);
              if (!fieldName.startsWith(uiLabelMapInLayoutSettings)) {
                for (                Map.Entry<String,LabelInfo> e : LabelManagerFactory.getLabels().entrySet()) {
                  String keyToSearch=entityName + "." + fieldName;
                  if (e.getKey().startsWith(keyToSearch)) {
                    fields.add(fieldName);
                  }
                }
              }
              pos=endLabel;
            }
 else {
              pos=pos + startExpression.length();
            }
          }
        }
        Iterator<ModelField> iter=entity.getPksIterator();
        while (iter != null && iter.hasNext()) {
          ModelField curField=iter.next();
          pkFields.add(curField.getName());
        }
        Iterator<String> fieldsIt=fields.iterator();
        while (fieldsIt != null && fieldsIt.hasNext()) {
          String fieldName=fieldsIt.next();
          List<EntityExpr> exprs=FastList.newInstance();
          for (          Element entityConstraintElem : UtilXml.childElementList(element)) {
            if ("entity-constraint".equals(entityConstraintElem.getTagName())) {
              String constraintName=UtilFormatOut.checkNull(entityConstraintElem.getAttribute("name"));
              String constraintOperator=UtilFormatOut.checkNull(entityConstraintElem.getAttribute("operator"));
              String constraintValue=UtilFormatOut.checkNull(entityConstraintElem.getAttribute("value"));
              EntityComparisonOperator operator=new EntityComparisonOperator(EntityOperator.ID_EQUALS,"=");
              if ("between".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_BETWEEN,"BETWEEN");
              }
 else               if ("greater-equals".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_GREATER_THAN_EQUAL_TO,">=");
              }
 else               if ("greater".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_GREATER_THAN,">");
              }
 else               if ("in".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_IN,"IN");
              }
 else               if ("less-equals".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_LESS_THAN_EQUAL_TO,"<=");
              }
 else               if ("less".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_LESS_THAN,"<");
              }
 else               if ("like".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_LIKE,"LIKE");
              }
 else               if ("not-equals".equals(constraintValue)) {
                operator=new EntityComparisonOperator(EntityOperator.ID_NOT_EQUAL,"<>");
              }
              exprs.add(EntityCondition.makeCondition(constraintName,operator,constraintValue));
            }
          }
          EntityConditionList<EntityExpr> ecl=null;
          if (exprs.size() > 0) {
            ecl=EntityCondition.makeCondition(exprs,EntityOperator.AND);
          }
          StringBuilder keyBuffer=new StringBuilder();
          keyBuffer.append(entityName);
          keyBuffer.append('.');
          keyBuffer.append(fieldName);
          List<GenericValue> entityRecords=delegator.findList(entityName,ecl,pkFields,null,null,false);
          for (          GenericValue entityRecord : entityRecords) {
            boolean pkFound=false;
            StringBuilder pkBuffer=new StringBuilder(keyBuffer.toString());
            Iterator<String> itPkFields=pkFields.iterator();
            while (itPkFields != null && itPkFields.hasNext()) {
              String pkField=itPkFields.next();
              Object pkFieldValue=entityRecord.get(pkField);
              if (UtilValidate.isNotEmpty(pkFieldValue)) {
                pkBuffer.append('.');
                pkBuffer.append(pkFieldValue);
                pkFound=true;
              }
            }
            if (pkFound) {
              setLabelReference(pkBuffer.toString(),fileNameURI);
            }
          }
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting records from " + entityName,module);
  }
}
