{
switch (level) {
case HOSTCERT_MIN_CHECK:
    return new HostnameVerifier(){
      public boolean verify(      String hostname,      SSLSession session){
        javax.security.cert.X509Certificate[] peerCerts;
        try {
          peerCerts=session.getPeerCertificateChain();
        }
 catch (        SSLPeerUnverifiedException e) {
          Debug.logWarning(e.getMessage(),module);
          return false;
        }
        for (int i=0; i < peerCerts.length; i++) {
          Principal x500s=peerCerts[i].getSubjectDN();
          Map subjectMap=KeyStoreUtil.getX500Map(x500s);
          if (Debug.infoOn())           Debug.logInfo(peerCerts[i].getSerialNumber().toString(16) + " :: " + subjectMap.get("CN"),module);
          try {
            peerCerts[i].checkValidity();
          }
 catch (          Exception e) {
            Debug.logWarning("Certificate is not valid!",module);
            return false;
          }
        }
        return true;
      }
    }
;
case HOSTCERT_NO_CHECK:
  return new HostnameVerifier(){
    public boolean verify(    String hostname,    SSLSession session){
      return true;
    }
  }
;
default :
return null;
}
}
