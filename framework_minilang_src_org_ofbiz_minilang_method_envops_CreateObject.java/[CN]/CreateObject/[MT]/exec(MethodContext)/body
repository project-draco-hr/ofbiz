{
  String className=methodContext.expandString(this.className);
  Class<?> methodClass=null;
  try {
    methodClass=ObjectType.loadClass(className,methodContext.getLoader());
  }
 catch (  ClassNotFoundException e) {
    Debug.logError(e,"Class to create not found with name " + className + " in create-object operation",module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Class to create not found with name "+ className+ ": "+ e.toString()+ "]";
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  Object[] args=null;
  Class<?>[] parameterTypes=null;
  if (parameters != null) {
    args=new Object[parameters.size()];
    parameterTypes=new Class<?>[parameters.size()];
    int i=0;
    for (    MethodObject<?> methodObjectDef : parameters) {
      args[i]=methodObjectDef.getObject(methodContext);
      Class<?> typeClass=null;
      try {
        typeClass=methodObjectDef.getTypeClass(methodContext);
      }
 catch (      ClassNotFoundException e) {
        String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Parameter type not found with name "+ methodObjectDef.getTypeName()+ "]";
        Debug.logError(errMsg,module);
        methodContext.setErrorReturn(errMsg,simpleMethod);
        return false;
      }
      parameterTypes[i]=typeClass;
      i++;
    }
  }
  try {
    Constructor<?> constructor=methodClass.getConstructor(parameterTypes);
    try {
      Object newObject=constructor.newInstance(args);
      if (!fieldAcsr.isEmpty()) {
        if (!mapAcsr.isEmpty()) {
          Map<String,Object> retMap=mapAcsr.get(methodContext);
          if (retMap == null) {
            retMap=FastMap.newInstance();
            mapAcsr.put(methodContext,retMap);
          }
          fieldAcsr.put(retMap,newObject,methodContext);
        }
 else {
          fieldAcsr.put(methodContext,newObject);
        }
      }
    }
 catch (    InstantiationException e) {
      Debug.logError(e,"Could not instantiate object in create-object operation",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Could not instantiate object: "+ e.toString()+ "]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
catch (    IllegalAccessException e) {
      Debug.logError(e,"Illegal access constructing object in create-object operation",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Illegal access constructing object: "+ e.toString()+ "]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
catch (    IllegalArgumentException e) {
      Debug.logError(e,"Illegal argument calling method in create-object operation",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Illegal argument calling constructor: "+ e.toString()+ "]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
catch (    InvocationTargetException e) {
      Debug.logError(e.getTargetException(),"Constructor in create-object operation threw an exception",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Constructor in create-object threw an exception: "+ e.getTargetException()+ "]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
  }
 catch (  NoSuchMethodException e) {
    Debug.logError(e,"Could not find constructor to execute in simple-method create-object operation",module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Could not find constructor to execute: "+ e.toString()+ "]";
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
catch (  SecurityException e) {
    Debug.logError(e,"Security exception finding constructor to execute in simple-method create-object operation",module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Security exception finding constructor to execute: "+ e.toString()+ "]";
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  return true;
}
