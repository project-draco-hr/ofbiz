{
  Object[] args=null;
  Class<?>[] parameterTypes=null;
  if (parameters != null) {
    args=new Object[parameters.size()];
    parameterTypes=new Class<?>[parameters.size()];
    int i=0;
    for (    MethodObject<?> methodObjectDef : parameters) {
      args[i]=methodObjectDef.getObject(methodContext);
      Class<?> typeClass=null;
      try {
        typeClass=methodObjectDef.getTypeClass(methodContext);
      }
 catch (      ClassNotFoundException e) {
        String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Parameter type not found with name "+ methodObjectDef.getTypeName()+ "]";
        Debug.logWarning(e,errMsg,module);
        simpleMethod.addErrorMessage(methodContext,errMsg);
        return false;
      }
      parameterTypes[i]=typeClass;
      i++;
    }
  }
  try {
    Constructor<?> constructor=targetClass.getConstructor(parameterTypes);
    fieldFma.put(methodContext.getEnvMap(),constructor.newInstance(args));
  }
 catch (  Exception e) {
    throw new MiniLangRuntimeException(e,this);
  }
  return true;
}
