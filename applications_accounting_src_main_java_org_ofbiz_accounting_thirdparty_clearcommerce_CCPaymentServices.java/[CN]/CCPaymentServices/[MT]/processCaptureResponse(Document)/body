{
  Element engineDocElement=UtilXml.firstChildElement(responseDocument.getDocumentElement(),"EngineDoc");
  Element orderFormElement=UtilXml.firstChildElement(engineDocElement,"OrderFormDoc");
  Element transactionElement=UtilXml.firstChildElement(orderFormElement,"Transaction");
  Element procResponseElement=UtilXml.firstChildElement(transactionElement,"CardProcResp");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  String errorCode=UtilXml.childElementValue(procResponseElement,"CcErrCode");
  if ("1".equals(errorCode)) {
    result.put("captureResult",Boolean.valueOf(true));
    result.put("captureCode",UtilXml.childElementValue(transactionElement,"AuthCode"));
    Element currentTotalsElement=UtilXml.firstChildElement(transactionElement,"CurrentTotals");
    Element totalsElement=UtilXml.firstChildElement(currentTotalsElement,"Totals");
    String captureAmountStr=UtilXml.childElementValue(totalsElement,"Total");
    result.put("captureAmount",new BigDecimal(captureAmountStr).movePointLeft(2));
  }
 else {
    result.put("captureResult",Boolean.valueOf(false));
    result.put("captureAmount",BigDecimal.ZERO);
  }
  result.put("captureRefNum",UtilXml.childElementValue(orderFormElement,"Id"));
  result.put("captureFlag",UtilXml.childElementValue(procResponseElement,"Status"));
  result.put("captureMessage",UtilXml.childElementValue(procResponseElement,"CcReturnMsg"));
  List<String> messages=getMessageList(responseDocument);
  if (UtilValidate.isNotEmpty(messages)) {
    result.put("internalRespMsgs",messages);
  }
  return result;
}
