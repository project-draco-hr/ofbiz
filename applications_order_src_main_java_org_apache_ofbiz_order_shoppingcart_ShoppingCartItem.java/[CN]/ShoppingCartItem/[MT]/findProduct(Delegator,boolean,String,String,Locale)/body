{
  GenericValue product;
  try {
    product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();
    String purchaseProductCategoryId=CatalogWorker.getCatalogPurchaseAllowCategoryId(delegator,prodCatalogId);
    if (!skipProductChecks && product != null && purchaseProductCategoryId != null) {
      if (!CategoryWorker.isProductInCategory(delegator,product.getString("productId"),purchaseProductCategoryId)) {
        Debug.logWarning("Product [" + productId + "] is not in the purchase allow category ["+ purchaseProductCategoryId+ "] and cannot be purchased",module);
        product=null;
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.toString(),module);
    product=null;
  }
  if (product == null) {
    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);
    String excMsg=UtilProperties.getMessage(resource_error,"item.product_not_found",messageMap,locale);
    Debug.logWarning(excMsg,module);
    throw new ItemNotFoundException(excMsg);
  }
  return product;
}
