{
  Set<String> featureSet=new LinkedHashSet<String>();
  GenericValue product=this.getProduct();
  if (product != null) {
    List<GenericValue> featureAppls=null;
    try {
      featureAppls=product.getRelated("ProductFeatureAppl",null,null,false);
      List<EntityExpr> filterExprs=UtilMisc.toList(EntityCondition.makeCondition("productFeatureApplTypeId",EntityOperator.EQUALS,"STANDARD_FEATURE"));
      filterExprs.add(EntityCondition.makeCondition("productFeatureApplTypeId",EntityOperator.EQUALS,"REQUIRED_FEATURE"));
      featureAppls=EntityUtil.filterByOr(featureAppls,filterExprs);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Unable to get features from product : " + product.get("productId"),module);
    }
    if (featureAppls != null) {
      for (      GenericValue appl : featureAppls) {
        featureSet.add(appl.getString("productFeatureId"));
      }
    }
  }
  if (this.additionalProductFeatureAndAppls != null) {
    for (    GenericValue appl : this.additionalProductFeatureAndAppls.values()) {
      featureSet.add(appl.getString("productFeatureId"));
    }
  }
  return featureSet;
}
