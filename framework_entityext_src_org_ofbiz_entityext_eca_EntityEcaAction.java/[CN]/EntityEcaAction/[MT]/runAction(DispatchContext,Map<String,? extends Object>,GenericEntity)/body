{
  Map<String,Object> actionResult=null;
  try {
    Map<String,Object> actionContext=dctx.getModelService(serviceName).makeValid(context,ModelService.IN_PARAM);
    if (UtilValidate.isNotEmpty(valueAttr)) {
      actionContext.put(valueAttr,newValue);
    }
    GenericValue userLoginToRunAs=null;
    if (UtilValidate.isNotEmpty(this.runAsUser)) {
      userLoginToRunAs=dctx.getDelegator().findByPrimaryKeyCache("UserLogin",UtilMisc.toMap("userLoginId",this.runAsUser));
      if (userLoginToRunAs != null) {
        actionContext.put("userLogin",userLoginToRunAs);
      }
    }
    LocalDispatcher dispatcher=dctx.getDispatcher();
    if ("sync".equals(this.serviceMode)) {
      actionResult=dispatcher.runSync(this.serviceName,actionContext);
      if (ServiceUtil.isError(actionResult)) {
        throw new GenericServiceException("Error running Entity ECA action service: " + ServiceUtil.getErrorMessage(actionResult));
      }
    }
 else     if ("async".equals(this.serviceMode)) {
      dispatcher.runAsync(serviceName,actionContext,persist);
    }
  }
 catch (  GenericServiceException e) {
    if (rollbackOnError) {
      String errMsg="Entity ECA action service failed and rollback-on-error is true, so setting rollback only.";
      Debug.logError(errMsg,module);
      TransactionUtil.setRollbackOnly(errMsg,e);
    }
    if (this.abortOnError) {
      throw new EntityEcaException("Error running Entity ECA action service: " + e.toString(),e);
    }
 else {
      Debug.logError(e,"Error running Entity ECA action service",module);
    }
  }
  if (resultToValue) {
    newValue.setNonPKFields(actionResult);
  }
}
