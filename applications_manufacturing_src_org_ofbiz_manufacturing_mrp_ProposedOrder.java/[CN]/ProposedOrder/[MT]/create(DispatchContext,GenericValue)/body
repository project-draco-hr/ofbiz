{
  if ("WIP".equals(product.getString("productTypeId"))) {
    return null;
  }
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  Map parameters=UtilMisc.toMap("userLogin",userLogin);
  parameters.put("productId",productId);
  parameters.put("statusId","REQ_PROPOSED");
  parameters.put("facilityId",(isBuilt ? manufacturingFacilityId : facilityId));
  parameters.put("requiredByDate",requiredByDate);
  parameters.put("requirementStartDate",requirementStartDate);
  parameters.put("quantity",new Double(quantity));
  parameters.put("requirementTypeId",(isBuilt ? "INTERNAL_REQUIREMENT" : "PRODUCT_REQUIREMENT"));
  if (mrpName != null) {
    parameters.put("description","MRP_" + mrpName);
  }
 else {
    parameters.put("description","Automatically generated by MRP");
  }
  try {
    Map result=dispatcher.runSync("createRequirement",parameters);
    return (String)result.get("requirementId");
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Error : createRequirement with parameters = " + parameters + "--"+ e.getMessage(),module);
    MrpServices.logMrpError(productId,"Error creating requirement",delegator);
    return null;
  }
}
