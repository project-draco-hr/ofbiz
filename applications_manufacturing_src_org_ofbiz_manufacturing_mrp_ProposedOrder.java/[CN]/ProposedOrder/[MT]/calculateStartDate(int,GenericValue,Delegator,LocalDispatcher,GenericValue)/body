{
  Map<String,Object> result=null;
  Timestamp endDate=(Timestamp)requiredByDate.clone();
  Timestamp startDate=endDate;
  long timeToShip=daysToShip * 8 * 60* 60* 1000;
  if (isBuilt) {
    List<GenericValue> listRoutingTaskAssoc=null;
    if (routing == null) {
      try {
        Map<String,Object> routingInMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"ignoreDefaultRouting","Y","userLogin",userLogin);
        Map<String,Object> routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);
        routing=(GenericValue)routingOutMap.get("routing");
        listRoutingTaskAssoc=UtilGenerics.checkList(routingOutMap.get("tasks"));
        if (routing == null) {
          BOMTree tree=null;
          List<BOMNode> components=FastList.newInstance();
          try {
            tree=new BOMTree(product.getString("productId"),"MANUF_COMPONENT",requiredByDate,BOMTree.EXPLOSION_SINGLE_LEVEL,delegator,dispatcher,userLogin);
            tree.setRootQuantity(quantity);
            tree.print(components,true);
            if (components.size() > 0)             components.remove(0);
          }
 catch (          Exception exc) {
            Debug.logWarning(exc.getMessage(),module);
            tree=null;
          }
          if (tree != null && tree.getRoot() != null && tree.getRoot().getProduct() != null) {
            routingInMap=UtilMisc.toMap("productId",tree.getRoot().getProduct().getString("productId"),"userLogin",userLogin);
            routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);
            routing=(GenericValue)routingOutMap.get("routing");
          }
        }
      }
 catch (      GenericServiceException gse) {
        Debug.logWarning(gse.getMessage(),module);
      }
    }
    if (routing != null) {
      result=FastMap.newInstance();
      if (listRoutingTaskAssoc == null) {
        try {
          Map<String,Object> routingTasksInMap=UtilMisc.<String,Object>toMap("workEffortId",routing.getString("workEffortId"),"userLogin",userLogin);
          Map<String,Object> routingTasksOutMap=dispatcher.runSync("getRoutingTaskAssocs",routingTasksInMap);
          listRoutingTaskAssoc=UtilGenerics.checkList(routingTasksOutMap.get("routingTaskAssocs"));
        }
 catch (        GenericServiceException gse) {
          Debug.logWarning(gse.getMessage(),module);
        }
      }
    }
    if (listRoutingTaskAssoc != null) {
      for (int i=1; i <= listRoutingTaskAssoc.size(); i++) {
        GenericValue routingTaskAssoc=(GenericValue)listRoutingTaskAssoc.get(listRoutingTaskAssoc.size() - i);
        if (EntityUtil.isValueActive(routingTaskAssoc,endDate)) {
          GenericValue routingTask=null;
          try {
            routingTask=routingTaskAssoc.getRelatedOneCache("ToWorkEffort");
          }
 catch (          GenericEntityException e) {
            Debug.logError(e.getMessage(),module);
          }
          long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
          if (i == listRoutingTaskAssoc.size()) {
            totalTime+=timeToShip;
          }
          startDate=TechDataServices.addBackward(TechDataServices.getTechDataCalendar(routingTask),endDate,totalTime);
          result.put(routingTask.getString("workEffortId"),startDate);
          endDate=startDate;
        }
      }
    }
 else {
      Debug.logError("No routing found for product = " + product.getString("productId"),module);
    }
  }
 else {
    try {
      GenericValue techDataCalendar=product.getDelegator().findByPrimaryKeyCache("TechDataCalendar",UtilMisc.toMap("calendarId","SUPPLIER"));
      startDate=TechDataServices.addBackward(techDataCalendar,endDate,timeToShip);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error : reading SUPPLIER TechDataCalendar: " + e.getMessage(),module);
    }
  }
  requirementStartDate=startDate;
  return result;
}
