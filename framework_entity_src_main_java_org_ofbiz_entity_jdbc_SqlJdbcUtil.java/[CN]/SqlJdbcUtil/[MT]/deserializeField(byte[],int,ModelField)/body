{
  InputStream binaryInput=null;
  if (fieldBytes != null && fieldBytes.length > 0) {
    binaryInput=new ByteArrayInputStream(fieldBytes);
  }
  if (fieldBytes != null && fieldBytes.length <= 0) {
    Debug.logWarning("Got bytes back for Object field with length: " + fieldBytes.length + " while getting value : "+ curField.getName()+ " ["+ curField.getColName()+ "] ("+ ind+ "): ",module);
  }
  if (binaryInput != null) {
    ObjectInputStream in=null;
    try {
      in=new ObjectInputStream(binaryInput);
      return in.readObject();
    }
 catch (    IOException ex) {
      if (Debug.verboseOn())       Debug.logVerbose("Unable to read BLOB data from input stream while getting value : " + curField.getName() + " ["+ curField.getColName()+ "] ("+ ind+ "): "+ ex.toString(),module);
      return null;
    }
catch (    ClassNotFoundException ex) {
      if (Debug.verboseOn())       Debug.logVerbose("Class not found: Unable to cast BLOB data to an Java object while getting value: " + curField.getName() + " ["+ curField.getColName()+ "] ("+ ind+ "); most likely because it is a straight byte[], so just using the raw bytes"+ ex.toString(),module);
      return null;
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException e) {
          throw new GenericDataSourceException("Unable to close binary input stream while getting value : " + curField.getName() + " ["+ curField.getColName()+ "] ("+ ind+ "): "+ e.toString(),e);
        }
      }
    }
  }
  return null;
}
