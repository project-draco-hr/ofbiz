{
  String methodName=methodContext.expandString(this.methodName);
  String className=methodContext.expandString(this.className);
  String fieldString=null;
  Object fieldVal=null;
  if (!mapAcsr.isEmpty()) {
    Map<String,? extends Object> fromMap=mapAcsr.get(methodContext);
    if (fromMap == null) {
      if (Debug.infoOn())       Debug.logInfo("Map not found with name " + mapAcsr + ", using empty string for comparison",module);
    }
 else {
      fieldVal=fieldAcsr.get(fromMap,methodContext);
    }
  }
 else {
    fieldVal=fieldAcsr.get(methodContext);
  }
  if (fieldVal != null) {
    try {
      fieldString=(String)MiniLangUtil.convertType(fieldVal,String.class,methodContext.getLocale(),methodContext.getTimeZone(),null);
    }
 catch (    Exception e) {
      Debug.logError(e,"Could not convert object to String, using empty String",module);
    }
  }
  if (fieldString == null)   fieldString="";
  Class<?>[] paramTypes=new Class[]{String.class};
  Object[] params=new Object[]{fieldString};
  Class<?> valClass;
  try {
    valClass=methodContext.getLoader().loadClass(className);
  }
 catch (  ClassNotFoundException cnfe) {
    Debug.logError("Could not find validation class: " + className,module);
    return false;
  }
  Method valMethod;
  try {
    valMethod=valClass.getMethod(methodName,paramTypes);
  }
 catch (  NoSuchMethodException cnfe) {
    Debug.logError("Could not find validation method: " + methodName + " of class "+ className,module);
    return false;
  }
  Boolean resultBool=Boolean.FALSE;
  try {
    resultBool=(Boolean)valMethod.invoke(null,params);
  }
 catch (  Exception e) {
    Debug.logError(e,"Error in IfValidationMethod " + methodName + " of class "+ className+ ", not processing sub-ops ",module);
  }
  if (resultBool.booleanValue()) {
    return SimpleMethod.runSubOps(subOps,methodContext);
  }
 else {
    if (elseSubOps != null) {
      return SimpleMethod.runSubOps(elseSubOps,methodContext);
    }
 else {
      return true;
    }
  }
}
