{
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");
  boolean isAnonymousCheckout=false;
  if (userLogin != null && "anonymous".equals(userLogin.getString("userLoginId"))) {
    isAnonymousCheckout=true;
  }
  boolean requireCustomer=true;
  boolean requireNewShippingAddress=false;
  boolean requireShipping=true;
  boolean requireOptions=true;
  boolean requireShipGroups=false;
  boolean requirePayment=!cart.getOrderType().equals("PURCHASE_ORDER");
  boolean requireTerm=true;
  boolean requireAdditionalParty=isAnonymousCheckout;
  boolean isSingleUsePayment=true;
  if (userLogin != null && !"anonymous".equals(userLogin.getString("userLoginId"))) {
    String requireCustomerStr=request.getParameter("finalizeReqCustInfo");
    String requireNewShippingAddressStr=request.getParameter("finalizeReqNewShipAddress");
    String requireShippingStr=request.getParameter("finalizeReqShipInfo");
    String requireOptionsStr=request.getParameter("finalizeReqOptions");
    String requirePaymentStr=request.getParameter("finalizeReqPayInfo");
    String requireTermStr=request.getParameter("finalizeReqTermInfo");
    String requireAdditionalPartyStr=request.getParameter("finalizeReqAdditionalParty");
    String requireShipGroupsStr=request.getParameter("finalizeReqShipGroups");
    String singleUsePaymentStr=request.getParameter("singleUsePayment");
    requireCustomer=requireCustomerStr == null || requireCustomerStr.equalsIgnoreCase("true");
    requireNewShippingAddress=requireNewShippingAddressStr != null && requireNewShippingAddressStr.equalsIgnoreCase("true");
    requireShipping=requireShippingStr == null || requireShippingStr.equalsIgnoreCase("true");
    requireOptions=requireOptionsStr == null || requireOptionsStr.equalsIgnoreCase("true");
    requireShipGroups=requireShipGroupsStr != null && requireShipGroupsStr.equalsIgnoreCase("true");
    if (requirePayment) {
      requirePayment=requirePaymentStr == null || requirePaymentStr.equalsIgnoreCase("true");
    }
    if (requireTerm) {
      requireTerm=requireTermStr == null || requireTermStr.equalsIgnoreCase("true");
    }
    requireAdditionalParty=requireAdditionalPartyStr == null || requireAdditionalPartyStr.equalsIgnoreCase("true");
    isSingleUsePayment=singleUsePaymentStr != null && "Y".equalsIgnoreCase(singleUsePaymentStr) ? true : false;
  }
  boolean shippingAddressSet=true;
  boolean shippingOptionsSet=true;
  for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {
    String shipContactMechId=cart.getShippingContactMechId(shipGroupIndex);
    if (shipContactMechId == null) {
      shippingAddressSet=false;
    }
    String shipmentMethodTypeId=cart.getShipmentMethodTypeId(shipGroupIndex);
    if (shipmentMethodTypeId == null) {
      shippingOptionsSet=false;
    }
  }
  String customerPartyId=cart.getPartyId();
  String[] processOrder={"customer","shipping","shipGroups","options","term","payment","addparty","paysplit"};
  if (cart.getOrderType().equals("PURCHASE_ORDER")) {
    requireCustomer=true;
    requireShipping=true;
    requireOptions=true;
    processOrder=new String[]{"customer","term","shipping","shipGroups","options","payment","addparty","paysplit"};
  }
  for (int i=0; i < processOrder.length; i++) {
    String currProcess=processOrder[i];
    if (currProcess.equals("customer")) {
      if (requireCustomer && (customerPartyId == null || customerPartyId.equals("_NA_"))) {
        return "customer";
      }
    }
 else     if (currProcess.equals("shipping")) {
      if (requireShipping) {
        if (requireNewShippingAddress) {
          return "shippingAddress";
        }
 else         if (!shippingAddressSet) {
          return "shipping";
        }
      }
    }
 else     if (currProcess.equals("shipGroups")) {
      if (requireShipGroups) {
        return "shipGroups";
      }
    }
 else     if (currProcess.equals("options")) {
      if (requireOptions && !shippingOptionsSet) {
        return "options";
      }
    }
 else     if (currProcess.equals("term")) {
      if (requireTerm && !cart.isOrderTermSet()) {
        return "term";
      }
    }
 else     if (currProcess.equals("payment")) {
      List<String> paymentMethodIds=cart.getPaymentMethodIds();
      List<String> paymentMethodTypeIds=cart.getPaymentMethodTypeIds();
      if (requirePayment && UtilValidate.isEmpty(paymentMethodIds) && UtilValidate.isEmpty(paymentMethodTypeIds)) {
        return "payment";
      }
    }
 else     if (currProcess.equals("addparty")) {
      if (requireAdditionalParty && cart.getAttribute("addpty") == null) {
        return "addparty";
      }
    }
 else     if (currProcess.equals("paysplit")) {
      if (isSingleUsePayment) {
        return "paysplit";
      }
    }
  }
  String checkoutGoTo=request.getParameter("checkoutGoTo");
  if (UtilValidate.isNotEmpty(checkoutGoTo)) {
    return checkoutGoTo;
  }
  if ("SALES_ORDER".equals(cart.getOrderType())) {
    return "sales";
  }
 else {
    return "po";
  }
}
