{
  String contentId=request.getParameter("contentId");
  String rootContentId=request.getParameter("rootContentId");
  String mapKey=request.getParameter("mapKey");
  String contentAssocTypeId=request.getParameter("contentAssocTypeId");
  String fromDateStr=request.getParameter("fromDate");
  String dataResourceId=request.getParameter("dataResourceId");
  String contentRevisionSeqId=request.getParameter("contentRevisionSeqId");
  String mimeTypeId=request.getParameter("mimeTypeId");
  Locale locale=UtilHttp.getLocale(request);
  String webSiteId=WebSiteWorker.getWebSiteId(request);
  try {
    if (Debug.verboseOn())     Debug.logVerbose("dataResourceId:" + dataResourceId,module);
    Delegator delegator=(Delegator)request.getAttribute("delegator");
    if (UtilValidate.isEmpty(dataResourceId)) {
      if (UtilValidate.isEmpty(contentRevisionSeqId)) {
        if (UtilValidate.isEmpty(mapKey) && UtilValidate.isEmpty(contentAssocTypeId)) {
          if (UtilValidate.isNotEmpty(contentId)) {
            GenericValue content=delegator.findOne("Content",UtilMisc.toMap("contentId",contentId),true);
            dataResourceId=content.getString("dataResourceId");
          }
          if (Debug.verboseOn())           Debug.logVerbose("dataResourceId:" + dataResourceId,module);
        }
 else {
          Timestamp fromDate=null;
          if (UtilValidate.isNotEmpty(fromDateStr)) {
            try {
              fromDate=UtilDateTime.stringToTimeStamp(fromDateStr,null,locale);
            }
 catch (            ParseException e) {
              fromDate=UtilDateTime.nowTimestamp();
            }
          }
          List<String> assocList=null;
          if (UtilValidate.isNotEmpty(contentAssocTypeId)) {
            assocList=UtilMisc.toList(contentAssocTypeId);
          }
          GenericValue content=ContentWorker.getSubContent(delegator,contentId,mapKey,null,null,assocList,fromDate);
          dataResourceId=content.getString("dataResourceId");
          if (Debug.verboseOn())           Debug.logVerbose("dataResourceId:" + dataResourceId,module);
        }
      }
 else {
        GenericValue contentRevisionItem=delegator.findOne("ContentRevisionItem",UtilMisc.toMap("contentId",rootContentId,"itemContentId",contentId,"contentRevisionSeqId",contentRevisionSeqId),true);
        if (contentRevisionItem == null) {
          throw new ViewHandlerException("ContentRevisionItem record not found for contentId=" + rootContentId + ", contentRevisionSeqId="+ contentRevisionSeqId+ ", itemContentId="+ contentId);
        }
        dataResourceId=contentRevisionItem.getString("newDataResourceId");
        if (Debug.verboseOn())         Debug.logVerbose("contentRevisionItem:" + contentRevisionItem,module);
        if (Debug.verboseOn())         Debug.logVerbose("contentId=" + rootContentId + ", contentRevisionSeqId="+ contentRevisionSeqId+ ", itemContentId="+ contentId,module);
        if (Debug.verboseOn())         Debug.logVerbose("dataResourceId:" + dataResourceId,module);
      }
    }
    if (UtilValidate.isNotEmpty(dataResourceId)) {
      GenericValue dataResource=delegator.findOne("DataResource",UtilMisc.toMap("dataResourceId",dataResourceId),true);
      ByteBuffer byteBuffer=DataResourceWorker.getContentAsByteBuffer(delegator,dataResourceId,https,webSiteId,locale,rootDir);
      ByteArrayInputStream bais=new ByteArrayInputStream(byteBuffer.array());
      String charset=dataResource.getString("characterSetId");
      if (UtilValidate.isEmpty(charset)) {
        charset=defaultCharset;
      }
      if (UtilValidate.isEmpty(mimeTypeId)) {
        mimeTypeId=dataResource.getString("mimeTypeId");
      }
      String contentType2=UtilValidate.isNotEmpty(mimeTypeId) ? mimeTypeId + "; charset=" + charset : contentType;
      String fileName=null;
      if (!UtilValidate.isEmpty(dataResource.getString("dataResourceName"))) {
        fileName=dataResource.getString("dataResourceName").replace(" ","_");
      }
      UtilHttp.streamContentToBrowser(response,bais,byteBuffer.limit(),contentType2,fileName);
    }
  }
 catch (  GenericEntityException e) {
    throw new ViewHandlerException(e.getMessage());
  }
catch (  IOException e) {
    throw new ViewHandlerException(e.getMessage());
  }
catch (  GeneralException e) {
    throw new ViewHandlerException(e.getMessage());
  }
}
