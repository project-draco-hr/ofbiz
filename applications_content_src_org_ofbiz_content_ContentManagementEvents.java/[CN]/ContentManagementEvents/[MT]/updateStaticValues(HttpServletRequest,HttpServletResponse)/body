{
  HttpSession session=request.getSession();
  Security security=(Security)request.getAttribute("security");
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  ServletContext servletContext=session.getServletContext();
  String webSiteId=(String)servletContext.getAttribute("webSiteId");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
  String parentPlaceholderId=(String)paramMap.get("ph");
  if (UtilValidate.isEmpty(parentPlaceholderId)) {
    request.setAttribute("_ERROR_MESSAGE_","ParentPlaceholder is empty.");
    return "error";
  }
  List<GenericValue> allPublishPointList=null;
  List<String[]> permittedPublishPointList=null;
  List<Map<String,Object>> valueList=null;
  try {
    allPublishPointList=ContentManagementWorker.getAllPublishPoints(delegator,webSiteId);
    permittedPublishPointList=ContentManagementWorker.getPermittedPublishPoints(delegator,allPublishPointList,userLogin,security,"_ADMIN",null,null);
    valueList=ContentManagementWorker.getStaticValues(delegator,parentPlaceholderId,permittedPublishPointList);
  }
 catch (  GeneralException e) {
    Debug.logError(e.getMessage(),module);
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  int counter=0;
  for (  Map<String,Object> map : valueList) {
    String contentId=(String)map.get("contentId");
    for (    String[] pubArr : permittedPublishPointList) {
      String pubContentId=pubArr[0];
      String pubValue=(String)map.get(pubContentId);
      String paramName=Integer.toString(counter) + "_" + pubContentId;
      String paramValue=(String)paramMap.get(paramName);
      Map<String,Object> serviceIn=FastMap.newInstance();
      serviceIn.put("userLogin",userLogin);
      serviceIn.put("contentIdTo",contentId);
      serviceIn.put("contentId",pubContentId);
      serviceIn.put("contentAssocTypeId","SUBSITE");
      try {
        if (UtilValidate.isNotEmpty(paramValue)) {
          if (!paramValue.equals(pubValue)) {
            if (paramValue.equalsIgnoreCase("Y")) {
              serviceIn.put("fromDate",UtilDateTime.nowTimestamp());
              dispatcher.runSync("createContentAssoc",serviceIn);
            }
 else             if (paramValue.equalsIgnoreCase("N") && pubValue.equalsIgnoreCase("Y")) {
              serviceIn.put("thruDate",UtilDateTime.nowTimestamp());
              Timestamp fromDate=(Timestamp)map.get(pubContentId + "FromDate");
              serviceIn.put("fromDate",fromDate);
              dispatcher.runSync("updateContentAssoc",serviceIn);
            }
          }
        }
 else         if (UtilValidate.isNotEmpty(pubValue)) {
          if (pubValue.equalsIgnoreCase("Y")) {
            serviceIn.put("thruDate",UtilDateTime.nowTimestamp());
            Timestamp fromDate=(Timestamp)map.get(pubContentId + "FromDate");
            serviceIn.put("fromDate",fromDate);
            dispatcher.runSync("updateContentAssoc",serviceIn);
          }
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e.getMessage(),module);
        request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
        return "error";
      }
    }
    counter++;
  }
  return "success";
}
