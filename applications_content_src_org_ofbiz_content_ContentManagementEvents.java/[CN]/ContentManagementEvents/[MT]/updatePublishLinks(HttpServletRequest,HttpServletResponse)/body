{
  HttpSession session=request.getSession();
  Security security=(Security)request.getAttribute("security");
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  ServletContext servletContext=session.getServletContext();
  String webSiteId=WebSiteWorker.getWebSiteId(request);
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
  String targContentId=(String)paramMap.get("contentId");
  String roles=null;
  String authorId=null;
  GenericValue authorContent=ContentManagementWorker.getAuthorContent(delegator,targContentId);
  if (authorContent != null) {
    authorId=authorContent.getString("contentId");
  }
 else {
    request.setAttribute("_ERROR_MESSAGE_","authorContent is empty.");
    return "error";
  }
  String userLoginId=userLogin.getString("userLoginId");
  List<String> roleTypeList=null;
  if (authorId != null && userLoginId != null && authorId.equals(userLoginId)) {
    roles="OWNER";
    roleTypeList=StringUtil.split(roles,"|");
  }
  List<String> targetOperationList=UtilMisc.<String>toList("CONTENT_PUBLISH");
  List<String> contentPurposeList=null;
  String permittedAction=(String)paramMap.get("permittedAction");
  String permittedOperations=(String)paramMap.get("permittedOperations");
  if (UtilValidate.isEmpty(targContentId)) {
    request.setAttribute("_ERROR_MESSAGE_","targContentId is empty.");
    return "error";
  }
  List<Object[]> origPublishedLinkList=null;
  try {
    EntityQuery.use(delegator).from("UserLogin").where("userLoginId",authorId).cache().queryOne();
    origPublishedLinkList=ContentManagementWorker.getPublishedLinks(delegator,targContentId,webSiteId,userLogin,security,permittedAction,permittedOperations,roles);
  }
 catch (  GenericEntityException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
catch (  GeneralException e2) {
    request.setAttribute("_ERROR_MESSAGE_",e2.getMessage());
    return "error";
  }
  Map<String,String> siteIdLookup=new HashMap<String,String>();
  for (  String param : paramMap.keySet()) {
    int pos=param.indexOf("select_");
    if (pos >= 0) {
      String siteId=param.substring(7);
      String subSiteVal=(String)paramMap.get(param);
      siteIdLookup.put(siteId,subSiteVal);
    }
  }
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  String responseMessage=null;
  String errorMessage=null;
  boolean statusIdUpdated=false;
  Map<String,Object> results=null;
  for (  Object[] arr : origPublishedLinkList) {
    String contentId=(String)arr[0];
    String origSubContentId=null;
    List<Object[]> origSubList=UtilGenerics.checkList(arr[1]);
    Timestamp origFromDate=null;
    for (    Object[] pubArr : origSubList) {
      Timestamp fromDate=(Timestamp)pubArr[2];
      origSubContentId=null;
      if (fromDate != null) {
        origSubContentId=(String)pubArr[0];
        origFromDate=fromDate;
        break;
      }
    }
    String currentSubContentId=siteIdLookup.get(contentId);
    try {
      if (UtilValidate.isNotEmpty(currentSubContentId)) {
        if (!currentSubContentId.equals(origSubContentId)) {
          if (UtilValidate.isNotEmpty(origSubContentId) && origFromDate != null) {
            List<GenericValue> oldActiveValues=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",targContentId,"contentIdTo",origSubContentId,"contentAssocTypeId","PUBLISH_LINK","thruDate",null).queryList();
            for (            GenericValue cAssoc : oldActiveValues) {
              cAssoc.set("thruDate",nowTimestamp);
              cAssoc.store();
            }
          }
          Map<String,Object> serviceIn=new HashMap<String,Object>();
          serviceIn.put("userLogin",userLogin);
          serviceIn.put("contentId",targContentId);
          serviceIn.put("contentAssocTypeId","PUBLISH_LINK");
          serviceIn.put("fromDate",nowTimestamp);
          serviceIn.put("contentIdTo",currentSubContentId);
          serviceIn.put("roleTypeList",roleTypeList);
          serviceIn.put("targetOperationList",targetOperationList);
          serviceIn.put("contentPurposeList",contentPurposeList);
          results=dispatcher.runSync("createContentAssoc",serviceIn);
          responseMessage=(String)results.get(ModelService.RESPONSE_MESSAGE);
          if (UtilValidate.isNotEmpty(responseMessage)) {
            errorMessage=(String)results.get(ModelService.ERROR_MESSAGE);
            Debug.logError("in updatePublishLinks, serviceIn:" + serviceIn,module);
            Debug.logError(errorMessage,module);
            request.setAttribute("_ERROR_MESSAGE_",errorMessage);
            return "error";
          }
          serviceIn=new HashMap<String,Object>();
          serviceIn.put("userLogin",userLogin);
          serviceIn.put("contentId",targContentId);
          serviceIn.put("contentAssocTypeId","PUBLISH_LINK");
          serviceIn.put("fromDate",nowTimestamp);
          serviceIn.put("contentIdTo",contentId);
          serviceIn.put("roleTypeList",roleTypeList);
          serviceIn.put("targetOperationList",targetOperationList);
          serviceIn.put("contentPurposeList",contentPurposeList);
          results=dispatcher.runSync("createContentAssoc",serviceIn);
          if (!statusIdUpdated) {
            try {
              GenericValue targContent=EntityQuery.use(delegator).from("Content").where("contentId",targContentId).queryOne();
              targContent.set("statusId","CTNT_PUBLISHED");
              targContent.store();
              statusIdUpdated=true;
            }
 catch (            GenericEntityException e) {
              Debug.logError(e.getMessage(),module);
              request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
              return "error";
            }
          }
        }
      }
 else       if (UtilValidate.isNotEmpty(origSubContentId)) {
        List<GenericValue> oldActiveValues=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",targContentId,"contentIdTo",origSubContentId,"contentAssocTypeId","PUBLISH_LINK","thruDate",null).queryList();
        for (        GenericValue cAssoc : oldActiveValues) {
          cAssoc.set("thruDate",nowTimestamp);
          cAssoc.store();
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e.getMessage(),module);
      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
      return "error";
    }
catch (    GenericServiceException e2) {
      Debug.logError(e2,module);
      request.setAttribute("_ERROR_MESSAGE_",e2.getMessage());
      return "error";
    }
  }
  return "success";
}
