{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");
  List errorMessageList=new LinkedList();
  Locale locale=(Locale)context.get("locale");
  String userLoginId=(String)context.get("userLoginId");
  String errMsg=null;
  if ((userLoginId != null) && ("true".equals(UtilProperties.getPropertyValue("security.properties","username.lowercase")))) {
    userLoginId=userLoginId.toLowerCase();
  }
  String partyId=loggedInUserLogin.getString("partyId");
  String password=loggedInUserLogin.getString("currentPassword");
  String passwordHint=loggedInUserLogin.getString("passwordHint");
  if (partyId != null && partyId.length() > 0) {
    if (loggedInUserLogin != null) {
      if (!partyId.equals(loggedInUserLogin.getString("partyId"))) {
        errMsg=UtilProperties.getMessage(resource,"loginservices.party_with_party_id_exists_not_permission_create_user_login",locale);
        errorMessageList.add(errMsg);
      }
    }
 else {
      errMsg=UtilProperties.getMessage(resource,"loginservices.must_logged_in_have_permission_create_user_login_exists",locale);
      errorMessageList.add(errMsg);
    }
  }
  GenericValue newUserLogin=null;
  boolean doCreate=true;
  try {
    newUserLogin=delegator.findOne("UserLogin",false,"userLoginId",userLoginId);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
    Map messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_read_failure",messageMap,locale);
    errorMessageList.add(errMsg);
  }
  if (newUserLogin != null) {
    if (!newUserLogin.get("partyId").equals(partyId)) {
      Map messageMap=UtilMisc.toMap("userLoginId",userLoginId);
      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_with_ID_exists",messageMap,locale);
      errorMessageList.add(errMsg);
    }
 else {
      doCreate=false;
    }
  }
 else {
    newUserLogin=delegator.makeValue("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));
  }
  newUserLogin.set("passwordHint",passwordHint);
  newUserLogin.set("partyId",partyId);
  newUserLogin.set("currentPassword",password);
  newUserLogin.set("enabled","Y");
  newUserLogin.set("disabledDateTime",null);
  if (errorMessageList.size() > 0) {
    return ServiceUtil.returnError(errorMessageList);
  }
  try {
    if (doCreate) {
      newUserLogin.create();
    }
 else {
      newUserLogin.store();
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
    Map messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_write_failure",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  loggedInUserLogin.set("enabled","N");
  loggedInUserLogin.set("disabledDateTime",UtilDateTime.nowTimestamp());
  try {
    loggedInUserLogin.store();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
    Map messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_disable_old_login_user_write_failure",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  result.put("newUserLogin",newUserLogin);
  return result;
}
