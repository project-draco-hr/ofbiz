{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=ctx.getDelegator();
  if (!AuthHelper.authenticatorsLoaded()) {
    AuthHelper.loadAuthenticators(dispatcher);
  }
  if ("true".equals(EntityUtilProperties.getPropertyValue("security","security.ldap.enable",delegator))) {
    if (!LdapAuthenticationServices.userLogin(ctx,context)) {
      String errMsg=UtilProperties.getMessage(resource,"loginservices.ldap_authentication_failed",locale);
      if ("true".equals(EntityUtilProperties.getPropertyValue("security","security.ldap.fail.login",delegator))) {
        return ServiceUtil.returnError(errMsg);
      }
 else {
        Debug.logInfo(errMsg,module);
      }
    }
  }
  Map<String,Object> result=new LinkedHashMap<String,Object>();
  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));
  boolean isServiceAuth=context.get("isServiceAuth") != null && ((Boolean)context.get("isServiceAuth")).booleanValue();
  String username=(String)context.get("login.username");
  if (username == null)   username=(String)context.get("username");
  String password=(String)context.get("login.password");
  if (password == null)   password=(String)context.get("password");
  String visitId=(String)context.get("visitId");
  String errMsg="";
  if (username == null || username.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource,"loginservices.username_missing",locale);
  }
 else   if (password == null || password.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource,"loginservices.password_missing",locale);
  }
 else {
    if ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator))) {
      username=username.toLowerCase();
    }
    if ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator))) {
      password=password.toLowerCase();
    }
    boolean repeat=true;
    int passNumber=0;
    while (repeat) {
      repeat=false;
      passNumber++;
      GenericValue userLogin=null;
      try {
        userLogin=delegator.findOne("UserLogin",isServiceAuth,"userLoginId",username);
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,"",module);
      }
      if (userLogin == null) {
        try {
          AuthHelper.syncUser(username);
        }
 catch (        AuthenticatorException e) {
          Debug.logWarning(e,module);
        }
        try {
          userLogin=delegator.findOne("UserLogin",isServiceAuth,"userLoginId",username);
        }
 catch (        GenericEntityException e) {
          Debug.logWarning(e,"",module);
        }
      }
      if (userLogin != null) {
        String ldmStr=EntityUtilProperties.getPropertyValue("security.properties","login.disable.minutes",delegator);
        long loginDisableMinutes=30;
        try {
          loginDisableMinutes=Long.parseLong(ldmStr);
        }
 catch (        Exception e) {
          loginDisableMinutes=30;
          Debug.logWarning("Could not parse login.disable.minutes from security.properties, using default of 30",module);
        }
        Timestamp disabledDateTime=userLogin.getTimestamp("disabledDateTime");
        Timestamp reEnableTime=null;
        if (loginDisableMinutes > 0 && disabledDateTime != null) {
          reEnableTime=new Timestamp(disabledDateTime.getTime() + loginDisableMinutes * 60000);
        }
        boolean doStore=true;
        userLogin=GenericValue.create(userLogin);
        boolean isSystem=(isServiceAuth && userLogin.get("isSystem") != null) ? "Y".equalsIgnoreCase(userLogin.getString("isSystem")) : false;
        boolean hasLoggedOut=userLogin.get("hasLoggedOut") != null ? "Y".equalsIgnoreCase(userLogin.getString("hasLoggedOut")) : false;
        if (UtilValidate.isEmpty(userLogin.getString("enabled")) || "Y".equals(userLogin.getString("enabled")) || (reEnableTime != null && reEnableTime.before(UtilDateTime.nowTimestamp()))|| (isSystem)) {
          String successfulLogin;
          if (!isSystem) {
            userLogin.set("enabled","Y");
          }
          boolean authFatalError=false;
          boolean externalAuth=false;
          try {
            externalAuth=AuthHelper.authenticate(username,password,isServiceAuth);
          }
 catch (          AuthenticatorException e) {
            Debug.logWarning(e,module);
            authFatalError=true;
          }
          if ((!authFatalError && externalAuth) || checkPassword(userLogin.getString("currentPassword"),useEncryption,password)) {
            Debug.logVerbose("[LoginServices.userLogin] : Password Matched",module);
            if (hasLoggedOut) {
              userLogin.set("hasLoggedOut","N");
            }
            Long currentFailedLogins=userLogin.getLong("successiveFailedLogins");
            if (currentFailedLogins != null && currentFailedLogins.longValue() > 0) {
              userLogin.set("successiveFailedLogins",Long.valueOf(0));
            }
 else             if (!hasLoggedOut) {
              doStore=false;
            }
            successfulLogin="Y";
            if (!isServiceAuth) {
              Map<?,?> userLoginSessionMap=LoginWorker.getUserLoginSession(userLogin);
              if (userLoginSessionMap != null) {
                result.put("userLoginSession",userLoginSessionMap);
              }
            }
            result.put("userLogin",userLogin);
            result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
          }
 else {
            if (!authFatalError && isServiceAuth && passNumber <= 1) {
              delegator.clearCacheLine("UserLogin",UtilMisc.toMap("userLoginId",username));
              repeat=true;
              continue;
            }
            Debug.logInfo("[LoginServices.userLogin] : Password Incorrect",module);
            errMsg=UtilProperties.getMessage(resource,"loginservices.password_incorrect",locale);
            Long currentFailedLogins=userLogin.getLong("successiveFailedLogins");
            if (currentFailedLogins == null) {
              currentFailedLogins=Long.valueOf(1);
            }
 else {
              currentFailedLogins=Long.valueOf(currentFailedLogins.longValue() + 1);
            }
            userLogin.set("successiveFailedLogins",currentFailedLogins);
            String mflStr=EntityUtilProperties.getPropertyValue("security.properties","max.failed.logins",delegator);
            long maxFailedLogins=3;
            try {
              maxFailedLogins=Long.parseLong(mflStr);
            }
 catch (            Exception e) {
              maxFailedLogins=3;
              Debug.logWarning("Could not parse max.failed.logins from security.properties, using default of 3",module);
            }
            if (maxFailedLogins > 0 && currentFailedLogins.longValue() >= maxFailedLogins) {
              userLogin.set("enabled","N");
              userLogin.set("disabledDateTime",UtilDateTime.nowTimestamp());
            }
            successfulLogin="N";
          }
          Transaction parentTx=null;
          boolean beganTransaction=false;
          try {
            try {
              parentTx=TransactionUtil.suspend();
            }
 catch (            GenericTransactionException e) {
              Debug.logError(e,"Could not suspend transaction: " + e.getMessage(),module);
            }
            try {
              beganTransaction=TransactionUtil.begin();
              if (doStore) {
                userLogin.store();
              }
              if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history",delegator))) {
                boolean createHistory=true;
                if (isServiceAuth && !"true".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history.on.service.auth",delegator))) {
                  createHistory=false;
                }
                if (createHistory) {
                  Map<String,Object> ulhCreateMap=UtilMisc.toMap("userLoginId",username,"visitId",visitId,"fromDate",UtilDateTime.nowTimestamp(),"successfulLogin",successfulLogin);
                  ModelEntity modelUserLogin=userLogin.getModelEntity();
                  if (modelUserLogin.isField("partyId")) {
                    ulhCreateMap.put("partyId",userLogin.get("partyId"));
                  }
                  if ("N".equals(successfulLogin) && !"false".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history.incorrect.password",delegator))) {
                    ulhCreateMap.put("passwordUsed",password);
                  }
                  delegator.create("UserLoginHistory",ulhCreateMap);
                }
              }
            }
 catch (            GenericEntityException e) {
              String geeErrMsg="Error saving UserLoginHistory";
              if (doStore) {
                geeErrMsg+=" and updating login status to reset hasLoggedOut, unsuccessful login count, etc.";
              }
              geeErrMsg+=": " + e.toString();
              try {
                TransactionUtil.rollback(beganTransaction,geeErrMsg,e);
              }
 catch (              GenericTransactionException e2) {
                Debug.logError(e2,"Could not rollback nested transaction: " + e2.getMessage(),module);
              }
              if (doStore) {
                return ServiceUtil.returnError(geeErrMsg);
              }
            }
 finally {
              try {
                TransactionUtil.commit(beganTransaction);
              }
 catch (              GenericTransactionException e) {
                Debug.logError(e,"Could not commit nested transaction: " + e.getMessage(),module);
              }
            }
          }
  finally {
            if (parentTx != null) {
              try {
                TransactionUtil.resume(parentTx);
                Debug.logVerbose("Resumed the parent transaction.",module);
              }
 catch (              GenericTransactionException e) {
                Debug.logError(e,"Could not resume parent nested transaction: " + e.getMessage(),module);
              }
            }
          }
        }
 else {
          if (isServiceAuth && passNumber <= 1) {
            delegator.clearCacheLine("UserLogin",UtilMisc.toMap("userLoginId",username));
            repeat=true;
            continue;
          }
          Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("username",username);
          errMsg=UtilProperties.getMessage(resource,"loginservices.account_for_user_login_id_disabled",messageMap,locale);
          if (disabledDateTime != null) {
            messageMap=UtilMisc.<String,Object>toMap("disabledDateTime",disabledDateTime);
            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.since_datetime",messageMap,locale);
          }
 else {
            errMsg+=".";
          }
          if (loginDisableMinutes > 0 && reEnableTime != null) {
            messageMap=UtilMisc.<String,Object>toMap("reEnableTime",reEnableTime);
            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.will_be_reenabled",messageMap,locale);
          }
 else {
            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.not_scheduled_to_be_reenabled",locale);
          }
        }
      }
 else {
        boolean externalAuth=false;
        try {
          externalAuth=AuthHelper.authenticate(username,password,isServiceAuth);
        }
 catch (        AuthenticatorException e) {
          errMsg=e.getMessage();
          Debug.logError(e,"External Authenticator had fatal exception : " + e.getMessage(),module);
        }
        if (externalAuth) {
          userLogin=delegator.makeValue("UserLogin");
          userLogin.set("userLoginId",username);
          userLogin.set("enabled","Y");
          userLogin.set("hasLoggedOut","N");
          result.put("userLogin",userLogin);
          result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
        }
 else {
          errMsg=UtilProperties.getMessage(resource,"loginservices.user_not_found",locale);
          Debug.logInfo("[LoginServices.userLogin] Invalid User : '" + username + "'; "+ errMsg,module);
        }
      }
    }
  }
  if (errMsg.length() > 0) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
  }
  return result;
}
