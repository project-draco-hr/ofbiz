{
  boolean useEncryption="true".equals(UtilProperties.getPropertyValue("security.properties","password.encrypt"));
  String errMsg=null;
  if (!ignoreCurrentPassword) {
    String realPassword=currentPassword;
    if (useEncryption && currentPassword != null) {
      realPassword=HashCrypt.getDigestHash(currentPassword,getHashType());
    }
    boolean passwordMatches=currentPassword != null && (realPassword.equals(userLogin.getString("currentPassword")) || ("true".equals(UtilProperties.getPropertyValue("security.properties","password.accept.encrypted.and.plain")) && currentPassword.equals(userLogin.getString("currentPassword"))));
    if ((currentPassword == null) || (userLogin != null && currentPassword != null && !passwordMatches)) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.old_password_not_correct_reenter",locale);
      errorMessageList.add(errMsg);
    }
    if (currentPassword.equals(newPassword) || realPassword.equals(newPassword)) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.new_password_is_equal_to_old_password",locale);
      errorMessageList.add(errMsg);
    }
  }
  int passwordChangeHistoryLimit=0;
  try {
    passwordChangeHistoryLimit=Integer.parseInt(UtilProperties.getPropertyValue("security.properties","password.change.history.limit","0"));
  }
 catch (  NumberFormatException nfe) {
    passwordChangeHistoryLimit=0;
  }
  Debug.logInfo(" password.change.history.limit is set to " + passwordChangeHistoryLimit,module);
  Debug.logInfo(" userLogin is set to " + userLogin,module);
  if (passwordChangeHistoryLimit > 0 && userLogin != null) {
    Debug.logInfo(" checkNewPassword Checking if user is tyring to use old password " + passwordChangeHistoryLimit,module);
    GenericDelegator delegator=userLogin.getDelegator();
    String newPasswordHash=newPassword;
    if (useEncryption) {
      newPasswordHash=HashCrypt.getDigestHash(newPassword,getHashType());
    }
    try {
      List pwdHistList=delegator.findByAnd("UserLoginPasswordHistory",UtilMisc.toMap("userLoginId",userLogin.getString("userLoginId"),"currentPassword",newPasswordHash));
      Debug.logInfo(" checkNewPassword pwdHistListpwdHistList " + pwdHistList.size(),module);
      if (pwdHistList.size() > 0) {
        Map messageMap=UtilMisc.toMap("passwordChangeHistoryLimit",passwordChangeHistoryLimit);
        errMsg=UtilProperties.getMessage(resource,"loginservices.password_must_be_different_from_last_passwords",messageMap,locale);
        errorMessageList.add(errMsg);
        Debug.logInfo(" checkNewPassword errorMessageListerrorMessageList " + pwdHistList.size(),module);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"",module);
      Map messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
      errMsg=UtilProperties.getMessage(resource,"loginevents.error_accessing_password_change_history",messageMap,locale);
    }
  }
  if (!UtilValidate.isNotEmpty(newPassword) || !UtilValidate.isNotEmpty(newPasswordVerify)) {
    errMsg=UtilProperties.getMessage(resource,"loginservices.password_or_verify_missing",locale);
    errorMessageList.add(errMsg);
  }
 else   if (!newPassword.equals(newPasswordVerify)) {
    errMsg=UtilProperties.getMessage(resource,"loginservices.password_did_not_match_verify_password",locale);
    errorMessageList.add(errMsg);
  }
  int minPasswordLength=0;
  try {
    minPasswordLength=Integer.parseInt(UtilProperties.getPropertyValue("security.properties","password.length.min","0"));
  }
 catch (  NumberFormatException nfe) {
    minPasswordLength=0;
  }
  if (newPassword != null) {
    if (!(newPassword.length() >= minPasswordLength)) {
      Map messageMap=UtilMisc.toMap("minPasswordLength",Integer.toString(minPasswordLength));
      errMsg=UtilProperties.getMessage(resource,"loginservices.password_must_be_least_characters_long",messageMap,locale);
      errorMessageList.add(errMsg);
    }
    if (userLogin != null && newPassword.equalsIgnoreCase(userLogin.getString("userLoginId"))) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.password_may_not_equal_username",locale);
      errorMessageList.add(errMsg);
    }
    if (UtilValidate.isNotEmpty(passwordHint) && (passwordHint.toUpperCase().indexOf(newPassword.toUpperCase()) >= 0)) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.password_hint_may_not_contain_password",locale);
      errorMessageList.add(errMsg);
    }
  }
}
