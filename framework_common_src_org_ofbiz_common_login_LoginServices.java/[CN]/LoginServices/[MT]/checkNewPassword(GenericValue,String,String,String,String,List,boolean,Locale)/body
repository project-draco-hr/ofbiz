{
  boolean useEncryption="true".equals(UtilProperties.getPropertyValue("security.properties","password.encrypt"));
  String errMsg=null;
  if (!ignoreCurrentPassword) {
    String realPassword=currentPassword;
    if (useEncryption && currentPassword != null) {
      realPassword=LoginServices.getPasswordHash(currentPassword);
    }
    boolean passwordMatches=currentPassword != null && (realPassword.equals(userLogin.getString("currentPassword")) || ("true".equals(UtilProperties.getPropertyValue("security.properties","password.accept.encrypted.and.plain")) && currentPassword.equals(userLogin.getString("currentPassword"))));
    if ((currentPassword == null) || (userLogin != null && currentPassword != null && !passwordMatches)) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.old_password_not_correct_reenter",locale);
      errorMessageList.add(errMsg);
    }
    if (currentPassword.equals(newPassword) || realPassword.equals(newPassword)) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.new_password_is_equal_to_old_password",locale);
      errorMessageList.add(errMsg);
    }
  }
  if (!UtilValidate.isNotEmpty(newPassword) || !UtilValidate.isNotEmpty(newPasswordVerify)) {
    errMsg=UtilProperties.getMessage(resource,"loginservices.password_or_verify_missing",locale);
    errorMessageList.add(errMsg);
  }
 else   if (!newPassword.equals(newPasswordVerify)) {
    errMsg=UtilProperties.getMessage(resource,"loginservices.password_did_not_match_verify_password",locale);
    errorMessageList.add(errMsg);
  }
  int minPasswordLength=0;
  try {
    minPasswordLength=Integer.parseInt(UtilProperties.getPropertyValue("security.properties","password.length.min","0"));
  }
 catch (  NumberFormatException nfe) {
    minPasswordLength=0;
  }
  if (newPassword != null) {
    if (!(newPassword.length() >= minPasswordLength)) {
      Map messageMap=UtilMisc.toMap("minPasswordLength",Integer.toString(minPasswordLength));
      errMsg=UtilProperties.getMessage(resource,"loginservices.password_must_be_least_characters_long",messageMap,locale);
      errorMessageList.add(errMsg);
    }
    if (userLogin != null && newPassword.equalsIgnoreCase(userLogin.getString("userLoginId"))) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.password_may_not_equal_username",locale);
      errorMessageList.add(errMsg);
    }
    if (UtilValidate.isNotEmpty(passwordHint) && (passwordHint.toUpperCase().indexOf(newPassword.toUpperCase()) >= 0)) {
      errMsg=UtilProperties.getMessage(resource,"loginservices.password_hint_may_not_contain_password",locale);
      errorMessageList.add(errMsg);
    }
  }
}
