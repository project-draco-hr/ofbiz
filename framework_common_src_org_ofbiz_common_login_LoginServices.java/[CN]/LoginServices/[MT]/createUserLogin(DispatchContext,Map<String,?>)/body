{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");
  List<String> errorMessageList=FastList.newInstance();
  Locale locale=(Locale)context.get("locale");
  boolean useEncryption="true".equals(UtilProperties.getPropertyValue("security.properties","password.encrypt"));
  String userLoginId=(String)context.get("userLoginId");
  String partyId=(String)context.get("partyId");
  String currentPassword=(String)context.get("currentPassword");
  String currentPasswordVerify=(String)context.get("currentPasswordVerify");
  String enabled=(String)context.get("enabled");
  String passwordHint=(String)context.get("passwordHint");
  String requirePasswordChange=(String)context.get("requirePasswordChange");
  String externalAuthId=(String)context.get("externalAuthId");
  String errMsg=null;
  if (UtilValidate.isNotEmpty(partyId)) {
    GenericValue party=null;
    try {
      party=delegator.findOne("Party",false,"partyId",partyId);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"",module);
    }
    if (party != null) {
      if (loggedInUserLogin != null) {
        if (!partyId.equals(loggedInUserLogin.getString("partyId"))) {
          if (!security.hasEntityPermission("PARTYMGR","_CREATE",loggedInUserLogin)) {
            errMsg=UtilProperties.getMessage(resource,"loginservices.party_with_specified_party_ID_exists_not_have_permission",locale);
            errorMessageList.add(errMsg);
          }
        }
      }
 else {
        errMsg=UtilProperties.getMessage(resource,"loginservices.must_be_logged_in_and_permission_create_login_party_ID_exists",locale);
        errorMessageList.add(errMsg);
      }
    }
  }
  checkNewPassword(null,null,currentPassword,currentPasswordVerify,passwordHint,errorMessageList,true,locale);
  GenericValue userLoginToCreate=delegator.makeValue("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));
  userLoginToCreate.set("externalAuthId",externalAuthId);
  userLoginToCreate.set("passwordHint",passwordHint);
  userLoginToCreate.set("enabled",enabled);
  userLoginToCreate.set("requirePasswordChange",requirePasswordChange);
  userLoginToCreate.set("currentPassword",useEncryption ? HashCrypt.cryptPassword(getHashType(),null,currentPassword) : currentPassword);
  try {
    userLoginToCreate.set("partyId",partyId);
  }
 catch (  Exception e) {
    Debug.logInfo(e,"Exception thrown while setting UserLogin partyId field: ",module);
  }
  try {
    EntityCondition condition=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("userLoginId"),EntityOperator.EQUALS,EntityFunction.UPPER(userLoginId));
    if (UtilValidate.isNotEmpty(delegator.findList("UserLogin",condition,null,null,null,false))) {
      Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);
      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_with_ID_exists",messageMap,locale);
      errorMessageList.add(errMsg);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_read_failure",messageMap,locale);
    errorMessageList.add(errMsg);
  }
  if (errorMessageList.size() > 0) {
    return ServiceUtil.returnError(errorMessageList);
  }
  try {
    userLoginToCreate.create();
    createUserLoginPasswordHistory(delegator,userLoginId,currentPassword);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_write_failure",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
