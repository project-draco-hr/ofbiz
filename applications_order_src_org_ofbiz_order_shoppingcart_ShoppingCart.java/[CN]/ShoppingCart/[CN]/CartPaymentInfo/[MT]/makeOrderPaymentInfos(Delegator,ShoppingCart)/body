{
  BigDecimal maxAmount=ZERO;
  GenericValue valueObj=this.getValueObject(delegator);
  List values=new LinkedList();
  if (valueObj != null) {
    if ("PaymentMethod".equals(valueObj.getEntityName())) {
      String billingAddressId=null;
      GenericValue billingAddress=this.getBillingAddress(delegator);
      if (billingAddress != null) {
        billingAddressId=billingAddress.getString("contactMechId");
      }
      if (UtilValidate.isNotEmpty(billingAddressId)) {
        GenericValue orderCm=delegator.makeValue("OrderContactMech");
        orderCm.set("contactMechPurposeTypeId","BILLING_LOCATION");
        orderCm.set("contactMechId",billingAddressId);
        values.add(orderCm);
      }
    }
    GenericValue productStore=null;
    String splitPayPrefPerShpGrp=null;
    try {
      productStore=delegator.findByPrimaryKey("ProductStore",UtilMisc.toMap("productStoreId",cart.getProductStoreId()));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e.toString(),module);
    }
    if (productStore != null) {
      splitPayPrefPerShpGrp=productStore.getString("splitPayPrefPerShpGrp");
    }
    if (splitPayPrefPerShpGrp == null) {
      splitPayPrefPerShpGrp="N";
    }
    if ("Y".equals(splitPayPrefPerShpGrp) && cart.paymentInfo.size() > 1) {
      throw new GeneralRuntimeException("Split Payment Preference per Ship Group does not yet support multiple Payment Methods");
    }
    if ("Y".equals(splitPayPrefPerShpGrp) && cart.paymentInfo.size() == 1) {
      Iterator shipIter=cart.getShipGroups().iterator();
      while (shipIter.hasNext()) {
        CartShipInfo csi=(CartShipInfo)shipIter.next();
        maxAmount=csi.getTotal().add(cart.getOrderOtherAdjustmentTotal().divide(new BigDecimal(cart.getShipGroupSize()),generalRounding)).add(csi.getShipEstimate().add(csi.getTotalTax(cart)));
        maxAmount=maxAmount.setScale(scale,rounding);
        GenericValue opp=delegator.makeValue("OrderPaymentPreference");
        opp.set("paymentMethodTypeId",valueObj.getString("paymentMethodTypeId"));
        opp.set("presentFlag",isPresent ? "Y" : "N");
        opp.set("swipedFlag",isSwiped ? "Y" : "N");
        opp.set("overflowFlag",overflow ? "Y" : "N");
        opp.set("paymentMethodId",paymentMethodId);
        opp.set("finAccountId",finAccountId);
        opp.set("billingPostalCode",postalCode);
        opp.set("maxAmount",maxAmount);
        opp.set("shipGroupSeqId",csi.getShipGroupSeqId());
        if (refNum != null) {
          opp.set("manualRefNum",refNum[0]);
          opp.set("manualAuthCode",refNum[1]);
        }
        if (securityCode != null) {
          opp.set("securityCode",securityCode);
        }
        if (track2 != null) {
          opp.set("track2",track2);
        }
        if (paymentMethodId != null || "FIN_ACCOUNT".equals(paymentMethodTypeId)) {
          opp.set("statusId","PAYMENT_NOT_AUTH");
        }
 else         if (paymentMethodTypeId != null) {
          if (paymentMethodTypeId.startsWith("EXT_")) {
            opp.set("statusId","PAYMENT_NOT_RECEIVED");
          }
 else {
            opp.set("statusId","PAYMENT_RECEIVED");
          }
        }
        Debug.log("ShipGroup [" + csi.getShipGroupSeqId() + "]",module);
        Debug.log("Creating OrderPaymentPreference - " + opp,module);
        values.add(opp);
      }
    }
 else     if ("N".equals(splitPayPrefPerShpGrp)) {
      maxAmount=maxAmount.add(amount);
      maxAmount=maxAmount.setScale(scale,rounding);
      GenericValue opp=delegator.makeValue("OrderPaymentPreference");
      opp.set("paymentMethodTypeId",valueObj.getString("paymentMethodTypeId"));
      opp.set("presentFlag",isPresent ? "Y" : "N");
      opp.set("swipedFlag",isSwiped ? "Y" : "N");
      opp.set("overflowFlag",overflow ? "Y" : "N");
      opp.set("paymentMethodId",paymentMethodId);
      opp.set("finAccountId",finAccountId);
      opp.set("billingPostalCode",postalCode);
      opp.set("maxAmount",maxAmount);
      if (refNum != null) {
        opp.set("manualRefNum",refNum[0]);
        opp.set("manualAuthCode",refNum[1]);
      }
      if (securityCode != null) {
        opp.set("securityCode",securityCode);
      }
      if (track2 != null) {
        opp.set("track2",securityCode);
      }
      if (paymentMethodId != null || "FIN_ACCOUNT".equals(paymentMethodTypeId)) {
        opp.set("statusId","PAYMENT_NOT_AUTH");
      }
 else       if (paymentMethodTypeId != null) {
        if (paymentMethodTypeId.startsWith("EXT_")) {
          opp.set("statusId","PAYMENT_NOT_RECEIVED");
        }
 else {
          opp.set("statusId","PAYMENT_RECEIVED");
        }
      }
      Debug.log("Creating OrderPaymentPreference - " + opp,module);
      values.add(opp);
    }
  }
  return values;
}
