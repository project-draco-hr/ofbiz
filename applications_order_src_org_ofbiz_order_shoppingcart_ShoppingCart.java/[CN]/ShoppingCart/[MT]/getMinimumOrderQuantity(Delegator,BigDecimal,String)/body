{
  BigDecimal minQuantity=BigDecimal.ZERO;
  BigDecimal minimumOrderPrice=BigDecimal.ZERO;
  List<GenericValue> minimumOrderPriceList=EntityQuery.use(delegator).from("ProductPrice").where("productId",itemProductId,"productPriceTypeId","MINIMUM_ORDER_PRICE").filterByDate().queryList();
  if (itemBasePrice == null) {
    List<GenericValue> productPriceList=EntityQuery.use(delegator).from("ProductPrice").where("productId",itemProductId).filterByDate().queryList();
    Map<String,BigDecimal> productPriceMap=new HashMap<String,BigDecimal>();
    for (    GenericValue productPrice : productPriceList) {
      productPriceMap.put(productPrice.getString("productPriceTypeId"),productPrice.getBigDecimal("price"));
    }
    if (UtilValidate.isNotEmpty(productPriceMap.get("SPECIAL_PROMO_PRICE"))) {
      itemBasePrice=productPriceMap.get("SPECIAL_PROMO_PRICE");
    }
 else     if (UtilValidate.isNotEmpty(productPriceMap.get("PROMO_PRICE"))) {
      itemBasePrice=productPriceMap.get("PROMO_PRICE");
    }
 else     if (UtilValidate.isNotEmpty(productPriceMap.get("DEFAULT_PRICE"))) {
      itemBasePrice=productPriceMap.get("DEFAULT_PRICE");
    }
 else     if (UtilValidate.isNotEmpty(productPriceMap.get("LIST_PRICE"))) {
      itemBasePrice=productPriceMap.get("LIST_PRICE");
    }
  }
  if (UtilValidate.isNotEmpty(minimumOrderPriceList)) {
    minimumOrderPrice=EntityUtil.getFirst(minimumOrderPriceList).getBigDecimal("price");
  }
  if (itemBasePrice != null && minimumOrderPrice.compareTo(itemBasePrice) > 0) {
    minQuantity=minimumOrderPrice.divide(itemBasePrice,0,BigDecimal.ROUND_UP);
  }
  return minQuantity;
}
