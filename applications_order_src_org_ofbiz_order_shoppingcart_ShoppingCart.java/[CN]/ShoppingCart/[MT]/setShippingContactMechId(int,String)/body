{
  CartShipInfo csi=this.getShipInfo(idx);
  if (isSalesOrder()) {
    GenericValue shippingAddress=null;
    try {
      shippingAddress=this.getDelegator().findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",shippingContactMechId));
    }
 catch (    GenericEntityException gee) {
      Debug.logError(gee,"Error retrieving the shipping address for contactMechId [" + shippingContactMechId + "].",module);
    }
    if (shippingAddress != null) {
      Set shipItems=csi.getShipItems();
      if (UtilValidate.isNotEmpty(shipItems)) {
        Iterator siit=shipItems.iterator();
        while (siit.hasNext()) {
          ShoppingCartItem cartItem=(ShoppingCartItem)siit.next();
          GenericValue product=cartItem.getProduct();
          if (UtilValidate.isNotEmpty(product)) {
            if (!ProductWorker.isShippableToAddress(product,shippingAddress)) {
              throw new IllegalArgumentException("The shipping address is not compatible with ProductGeos rules.");
            }
          }
        }
      }
    }
  }
  csi.contactMechId=shippingContactMechId;
}
