{
  this.setAttribute("addpty","Y");
  if (this.getPartyId() != null && !this.getPartyId().equals("_NA_")) {
    try {
      GenericValue orderParty=delegator.findByPrimaryKey("Party",UtilMisc.toMap("partyId",this.getPartyId()));
      Collection shippingContactMechList=ContactHelper.getContactMech(orderParty,"SHIPPING_LOCATION","POSTAL_ADDRESS",false);
      if (shippingContactMechList != null && shippingContactMechList.size() > 0) {
        GenericValue shippingContactMech=(GenericValue)(shippingContactMechList.iterator()).next();
        this.setShippingContactMechId(shippingContactMech.getString("contactMechId"));
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error setting shippingContactMechId in setDefaultCheckoutOptions() method.",module);
    }
  }
  ShippingEstimateWrapper shipEstimateWrapper=org.ofbiz.order.shoppingcart.shipping.ShippingEstimateWrapper.getWrapper(dispatcher,this,0);
  GenericValue carrierShipmentMethod=EntityUtil.getFirst(shipEstimateWrapper.getShippingMethods());
  if (carrierShipmentMethod != null) {
    this.setShipmentMethodTypeId(carrierShipmentMethod.getString("shipmentMethodTypeId"));
    this.setCarrierPartyId(carrierShipmentMethod.getString("partyId"));
  }
}
