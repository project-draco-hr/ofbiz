{
  this.setAttribute("addpty","Y");
  if (getOrderType().equals("SALES_ORDER")) {
    if (this.getPartyId() != null && !this.getPartyId().equals("_NA_")) {
      try {
        GenericValue orderParty=delegator.findByPrimaryKey("Party",UtilMisc.toMap("partyId",this.getPartyId()));
        Collection shippingContactMechList=ContactHelper.getContactMech(orderParty,"SHIPPING_LOCATION","POSTAL_ADDRESS",false);
        if (shippingContactMechList != null && shippingContactMechList.size() > 0) {
          GenericValue shippingContactMech=(GenericValue)(shippingContactMechList.iterator()).next();
          this.setShippingContactMechId(shippingContactMech.getString("contactMechId"));
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Error setting shippingContactMechId in setDefaultCheckoutOptions() method.",module);
      }
    }
    ShippingEstimateWrapper shipEstimateWrapper=org.ofbiz.order.shoppingcart.shipping.ShippingEstimateWrapper.getWrapper(dispatcher,this,0);
    GenericValue carrierShipmentMethod=EntityUtil.getFirst(shipEstimateWrapper.getShippingMethods());
    if (carrierShipmentMethod != null) {
      this.setShipmentMethodTypeId(carrierShipmentMethod.getString("shipmentMethodTypeId"));
      this.setCarrierPartyId(carrierShipmentMethod.getString("partyId"));
    }
  }
 else {
    this.setOrderTermSet(true);
    String companyId=this.getBillToCustomerPartyId();
    if (companyId != null) {
      try {
        List facilities=delegator.findByAndCache("Facility",UtilMisc.toMap("ownerPartyId",companyId));
        GenericValue facility=EntityUtil.getFirst(facilities);
        if (facility != null) {
          List facilityContactMechValueMaps=ContactMechWorker.getFacilityContactMechValueMaps(delegator,facility.getString("facilityId"),false,null);
          if (facilityContactMechValueMaps != null) {
            Iterator facilityContactMechValueMapsIt=facilityContactMechValueMaps.iterator();
            while (facilityContactMechValueMapsIt.hasNext()) {
              Map facilityContactMechValueMap=(Map)facilityContactMechValueMapsIt.next();
              if (facilityContactMechValueMap.get("postalAddress") != null) {
                GenericValue postalAddress=(GenericValue)facilityContactMechValueMap.get("postalAddress");
                this.setShippingContactMechId(0,postalAddress.getString("contactMechId"));
                break;
              }
            }
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Error setting shippingContactMechId in setDefaultCheckoutOptions() method.",module);
      }
    }
    this.setShipmentMethodTypeId(0,"NO_SHIPPING");
    this.setCarrierPartyId(0,"_NA_");
    this.setShippingInstructions(0,"");
    this.setGiftMessage(0,"");
    this.setMaySplit(0,new Boolean(true));
    this.setIsGift(0,new Boolean(false));
  }
}
