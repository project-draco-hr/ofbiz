{
  if (isReadOnlyCart()) {
    throw new CartItemModifyException("Cart items cannot be changed");
  }
  selectedAmount=selectedAmount == null ? BigDecimal.ZERO : selectedAmount;
  reservLength=reservLength == null ? BigDecimal.ZERO : reservLength;
  reservPersons=reservPersons == null ? BigDecimal.ZERO : reservPersons;
  ShoppingCart.ShoppingCartItemGroup itemGroup=this.getItemGroupByNumber(itemGroupNumber);
  GenericValue supplierProduct=null;
  for (int i=0; i < this.cartLines.size(); i++) {
    ShoppingCartItem sci=cartLines.get(i);
    if (sci.equals(productId,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,features,attributes,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,false)) {
      BigDecimal newQuantity=sci.getQuantity().add(quantity);
      try {
        BigDecimal minQuantity=getMinimumOrderQuantity(getDelegator(),sci.getBasePrice(),productId);
        if (newQuantity.compareTo(minQuantity) < 0) {
          newQuantity=minQuantity;
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      if (sci.getItemType().equals("RENTAL_ORDER_ITEM")) {
        String isAvailable=ShoppingCartItem.checkAvailability(productId,newQuantity,reservStart,reservLength,this);
        if (isAvailable.compareTo("OK") != 0) {
          Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId,"availableMessage",isAvailable);
          String excMsg=UtilProperties.getMessage(ShoppingCartItem.resource,"item.product_not_available",messageMap,this.getLocale());
          Debug.logInfo(excMsg,module);
          throw new CartItemModifyException(isAvailable);
        }
      }
      if (Debug.verboseOn())       Debug.logVerbose("Found a match for id " + productId + " on line "+ i+ ", updating quantity to "+ newQuantity,module);
      sci.setQuantity(newQuantity,dispatcher,this);
      if (getOrderType().equals("PURCHASE_ORDER")) {
        supplierProduct=getSupplierProduct(productId,newQuantity,dispatcher);
        if (supplierProduct != null && supplierProduct.getBigDecimal("lastPrice") != null) {
          sci.setSupplierProductId(supplierProduct.getString("supplierProductId"));
          sci.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));
          sci.setName(ShoppingCartItem.getPurchaseOrderItemDescription(sci.getProduct(),supplierProduct,this.getLocale()));
        }
 else {
          throw new CartItemModifyException("SupplierProduct not found");
        }
      }
      return i;
    }
  }
  if (getOrderType().equals("PURCHASE_ORDER")) {
    supplierProduct=getSupplierProduct(productId,quantity,dispatcher);
    if (supplierProduct != null || "_NA_".equals(this.getPartyId())) {
      return this.addItem(0,ShoppingCartItem.makePurchaseOrderItem(Integer.valueOf(0),productId,selectedAmount,quantity,features,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,this,supplierProduct,shipBeforeDate,shipAfterDate,cancelBackOrderDate));
    }
 else {
      throw new CartItemModifyException("SupplierProduct not found");
    }
  }
 else {
    try {
      BigDecimal minQuantity=getMinimumOrderQuantity(getDelegator(),null,productId);
      if (quantity.compareTo(minQuantity) < 0) {
        quantity=minQuantity;
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    return this.addItem(0,ShoppingCartItem.makeItem(Integer.valueOf(0),productId,selectedAmount,quantity,null,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,features,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,this,Boolean.TRUE,Boolean.TRUE,parentProductId,Boolean.FALSE,Boolean.FALSE));
  }
}
