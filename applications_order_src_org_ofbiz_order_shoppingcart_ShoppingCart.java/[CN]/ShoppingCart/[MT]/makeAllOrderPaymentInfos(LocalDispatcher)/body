{
  Delegator delegator=this.getDelegator();
  List<GenericValue> allOpPrefs=new LinkedList<GenericValue>();
  BigDecimal remainingAmount=this.getGrandTotal().subtract(this.getPaymentTotal());
  remainingAmount=remainingAmount.setScale(2,BigDecimal.ROUND_HALF_UP);
  if (getBillingAccountId() != null && this.billingAccountAmt.compareTo(BigDecimal.ZERO) <= 0) {
    BigDecimal billingAccountAvailableAmount=CheckOutHelper.availableAccountBalance(getBillingAccountId(),dispatcher);
    if (this.billingAccountAmt.compareTo(BigDecimal.ZERO) == 0 && billingAccountAvailableAmount.compareTo(BigDecimal.ZERO) > 0) {
      this.billingAccountAmt=billingAccountAvailableAmount;
    }
    if (remainingAmount.compareTo(getBillingAccountAmount()) < 0) {
      this.billingAccountAmt=remainingAmount;
    }
    if (billingAccountAvailableAmount.compareTo(getBillingAccountAmount()) < 0) {
      this.billingAccountAmt=billingAccountAvailableAmount;
    }
    BigDecimal billingAccountAmountSelected=getBillingAccountAmount();
    GenericValue opp=delegator.makeValue("OrderPaymentPreference",new HashMap<String,Object>());
    opp.set("paymentMethodTypeId","EXT_BILLACT");
    opp.set("presentFlag","N");
    opp.set("overflowFlag","N");
    opp.set("maxAmount",billingAccountAmountSelected);
    opp.set("statusId","PAYMENT_NOT_RECEIVED");
    allOpPrefs.add(opp);
    remainingAmount=remainingAmount.subtract(billingAccountAmountSelected);
    if (remainingAmount.compareTo(BigDecimal.ZERO) < 0) {
      remainingAmount=BigDecimal.ZERO;
    }
  }
  for (  CartPaymentInfo inf : paymentInfo) {
    if (inf.amount == null) {
      inf.amount=remainingAmount;
      remainingAmount=BigDecimal.ZERO;
    }
    allOpPrefs.addAll(inf.makeOrderPaymentInfos(delegator,this));
  }
  return allOpPrefs;
}
