{
  List allOpPrefs=new LinkedList();
  double remainingAmount=this.getGrandTotal() - this.getPaymentTotal();
  if (getBillingAccountId() != null) {
    double billingAccountAvailableAmount=billingAccountAvailableAmount=CheckOutHelper.availableAccountBalance(getBillingAccountId(),dispatcher);
    if (remainingAmount < getBillingAccountAmount()) {
      this.billingAccountAmt=remainingAmount;
    }
    if (billingAccountAvailableAmount < getBillingAccountAmount()) {
      this.billingAccountAmt=billingAccountAvailableAmount;
    }
    GenericValue opp=delegator.makeValue("OrderPaymentPreference",new HashMap());
    opp.set("paymentMethodTypeId","EXT_BILLACT");
    opp.set("presentFlag","N");
    opp.set("overflowFlag","N");
    opp.set("maxAmount",new Double(getBillingAccountAmount()));
    opp.set("statusId","PAYMENT_NOT_RECEIVED");
    allOpPrefs.add(opp);
    remainingAmount=remainingAmount - getBillingAccountAmount();
    if (remainingAmount < 0) {
      remainingAmount=0;
    }
  }
  Iterator i=paymentInfo.iterator();
  while (i.hasNext()) {
    CartPaymentInfo inf=(CartPaymentInfo)i.next();
    if (inf.amount == null) {
      inf.amount=new Double(remainingAmount);
      remainingAmount=0;
    }
    allOpPrefs.addAll(inf.makeOrderPaymentInfos(this.getDelegator()));
  }
  return allOpPrefs;
}
