{
  CartPaymentInfo inf=this.getPaymentInfo(id,refNum,authCode,amount,replace);
  if (isSalesOrder()) {
    GenericValue billingAddress=inf.getBillingAddress(this.getDelegator());
    if (billingAddress != null) {
      Iterator<GenericValue> products=(ShoppingCart.getItemsProducts(this.cartLines)).iterator();
      while (products.hasNext()) {
        GenericValue product=products.next();
        if (!ProductWorker.isBillableToAddress(product,billingAddress)) {
          throw new IllegalArgumentException("The billing address is not compatible with ProductGeos rules.");
        }
      }
    }
  }
  inf.singleUse=isSingleUse;
  inf.isPresent=isPresent;
  if (replace) {
    paymentInfo.remove(inf);
  }
  paymentInfo.add(inf);
  return inf;
}
