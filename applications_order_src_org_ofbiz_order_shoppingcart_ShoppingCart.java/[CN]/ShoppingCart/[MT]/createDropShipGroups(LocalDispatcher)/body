{
  String facilityId=null;
  if (UtilValidate.isNotEmpty(this.getProductStoreId())) {
    try {
      GenericValue productStore=delegator.findByPrimaryKeyCache("ProductStore",UtilMisc.toMap("productStoreId",this.getProductStoreId()));
      facilityId=productStore.getString("inventoryFacilityId");
    }
 catch (    Exception e) {
      Debug.logError(UtilProperties.getMessage(resource_error,"OrderProblemGettingProductStoreRecords",locale) + e.getMessage(),module);
      return;
    }
  }
  List shipGroups=getShipGroups();
  if (shipGroups == null)   return;
  Map dropShipItems=new HashMap();
  for (int shipGroupIndex=0; shipGroupIndex < shipGroups.size(); shipGroupIndex++) {
    CartShipInfo shipInfo=(CartShipInfo)shipGroups.get(shipGroupIndex);
    String shipGroupSupplierPartyId=shipInfo.getSupplierPartyId();
    if (UtilValidate.isNotEmpty(shipGroupSupplierPartyId)) {
      continue;
    }
    Set shipItems=shipInfo.getShipItems();
    if (UtilValidate.isEmpty(shipItems))     continue;
    Iterator siit=shipItems.iterator();
    while (siit.hasNext()) {
      ShoppingCartItem cartItem=(ShoppingCartItem)siit.next();
      BigDecimal itemQuantity=cartItem.getQuantity();
      BigDecimal dropShipQuantity=BigDecimal.ZERO;
      GenericValue product=cartItem.getProduct();
      if (product == null) {
        continue;
      }
      String productId=product.getString("productId");
      String requirementMethodEnumId=product.getString("requirementMethodEnumId");
      if ("PRODRQM_DS".equals(requirementMethodEnumId)) {
        dropShipQuantity=itemQuantity;
      }
 else       if ("PRODRQM_DSATP".equals(requirementMethodEnumId)) {
        try {
          Map getProductInventoryAvailableResult=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",facilityId));
          BigDecimal availableToPromise=(BigDecimal)getProductInventoryAvailableResult.get("availableToPromiseTotal");
          if (itemQuantity.compareTo(availableToPromise) <= 0) {
            dropShipQuantity=BigDecimal.ZERO;
          }
 else {
            dropShipQuantity=itemQuantity.subtract(availableToPromise);
          }
        }
 catch (        Exception e) {
          Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetInventoryAvailableByFacilityError",locale) + e.getMessage(),module);
        }
      }
 else {
        dropShipQuantity=BigDecimal.ZERO;
      }
      if (dropShipQuantity.compareTo(BigDecimal.ZERO) <= 0)       continue;
      String supplierPartyId=null;
      try {
        Map getSuppliersForProductResult=dispatcher.runSync("getSuppliersForProduct",UtilMisc.<String,Object>toMap("productId",productId,"quantity",dropShipQuantity,"canDropShip","Y","currencyUomId",getCurrency()));
        List supplierProducts=(List)getSuppliersForProductResult.get("supplierProducts");
        supplierProducts=EntityUtil.orderBy(supplierProducts,UtilMisc.toList("supplierPrefOrderId"));
        GenericValue supplierProduct=EntityUtil.getFirst(supplierProducts);
        if (!UtilValidate.isEmpty(supplierProduct)) {
          supplierPartyId=supplierProduct.getString("partyId");
        }
      }
 catch (      Exception e) {
        Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetSuppliersForProductError",locale) + e.getMessage(),module);
      }
      if (UtilValidate.isEmpty(supplierPartyId))       continue;
      if (!dropShipItems.containsKey(supplierPartyId))       dropShipItems.put(supplierPartyId,new HashMap());
      Map supplierCartItems=(Map)dropShipItems.get(supplierPartyId);
      if (!supplierCartItems.containsKey(cartItem))       supplierCartItems.put(cartItem,new HashMap());
      Map cartItemGroupQuantities=(Map)supplierCartItems.get(cartItem);
      cartItemGroupQuantities.put(new Integer(shipGroupIndex),dropShipQuantity);
    }
  }
  Iterator dsit=dropShipItems.keySet().iterator();
  while (dsit.hasNext()) {
    String supplierPartyId=(String)dsit.next();
    CartShipInfo shipInfo=null;
    int newShipGroupIndex=-1;
    TreeMap supplierShipGroups=(TreeMap)this.getShipGroupsBySupplier(supplierPartyId);
    if (!UtilValidate.isEmpty(supplierShipGroups)) {
      newShipGroupIndex=((Integer)supplierShipGroups.firstKey()).intValue();
      shipInfo=(CartShipInfo)supplierShipGroups.get(supplierShipGroups.firstKey());
    }
    if (newShipGroupIndex == -1) {
      newShipGroupIndex=addShipInfo();
      shipInfo=(CartShipInfo)this.shipInfo.get(newShipGroupIndex);
    }
    shipInfo.supplierPartyId=supplierPartyId;
    Map supplierCartItems=(Map)dropShipItems.get(supplierPartyId);
    Iterator itit=supplierCartItems.keySet().iterator();
    while (itit.hasNext()) {
      ShoppingCartItem cartItem=(ShoppingCartItem)itit.next();
      Map cartItemGroupQuantities=(Map)supplierCartItems.get(cartItem);
      Iterator cigit=cartItemGroupQuantities.keySet().iterator();
      while (cigit.hasNext()) {
        Integer previousShipGroupIndex=(Integer)cigit.next();
        BigDecimal dropShipQuantity=(BigDecimal)cartItemGroupQuantities.get(previousShipGroupIndex);
        positionItemToGroup(cartItem,dropShipQuantity,previousShipGroupIndex.intValue(),newShipGroupIndex,true);
      }
    }
  }
}
