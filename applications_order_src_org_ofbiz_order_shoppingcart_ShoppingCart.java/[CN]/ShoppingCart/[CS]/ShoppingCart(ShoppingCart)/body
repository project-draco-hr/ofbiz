{
  this.delegator=cart.getDelegator();
  this.delegatorName=delegator.getDelegatorName();
  this.productStoreId=cart.getProductStoreId();
  this.doPromotions=cart.getDoPromotions();
  this.poNumber=cart.getPoNumber();
  this.orderId=cart.getOrderId();
  this.orderName="Copy of " + cart.getOrderName();
  this.workEffortId=cart.getWorkEffortId();
  this.firstAttemptOrderId=cart.getFirstAttemptOrderId();
  this.billingAccountId=cart.getBillingAccountId();
  this.agreementId=cart.getAgreementId();
  this.quoteId=cart.getQuoteId();
  this.orderAdditionalEmails=cart.getOrderAdditionalEmails();
  this.adjustments.addAll(cart.getAdjustments());
  this.contactMechIdsMap=new HashMap<String,String>(cart.getOrderContactMechIds());
  this.freeShippingProductPromoActions=new ArrayList<GenericValue>(cart.getFreeShippingProductPromoActions());
  this.desiredAlternateGiftByAction=cart.getAllDesiredAlternateGiftByActionCopy();
  this.productPromoUseInfoList.addAll(cart.productPromoUseInfoList);
  this.productPromoCodes=new HashSet<String>(cart.productPromoCodes);
  this.locale=cart.getLocale();
  this.currencyUom=cart.getCurrency();
  this.externalId=cart.getExternalId();
  this.internalCode=cart.getInternalCode();
  this.viewCartOnAdd=cart.viewCartOnAdd();
  this.defaultShipAfterDate=cart.getDefaultShipAfterDate();
  this.defaultShipBeforeDate=cart.getDefaultShipBeforeDate();
  this.cancelBackOrderDate=cart.getCancelBackOrderDate();
  this.terminalId=cart.getTerminalId();
  this.transactionId=cart.getTransactionId();
  this.autoOrderShoppingListId=cart.getAutoOrderShoppingListId();
  this.additionalPartyRole=new HashMap<String,List<String>>();
  for (  Map.Entry<String,List<String>> me : cart.additionalPartyRole.entrySet()) {
    this.additionalPartyRole.put(me.getKey(),new LinkedList<String>(me.getValue()));
  }
  for (  ShoppingCartItemGroup itemGroup : cart.itemGroupByNumberMap.values()) {
    ShoppingCartItemGroup parentGroup=null;
    if (itemGroup.getParentGroup() != null)     parentGroup=this.getItemGroupByNumber(itemGroup.getParentGroup().getGroupNumber());
    ShoppingCartItemGroup newGroup=new ShoppingCartItemGroup(itemGroup,parentGroup);
    itemGroupByNumberMap.put(newGroup.getGroupNumber(),newGroup);
  }
  for (  ShoppingCartItem item : cart.items()) {
    cartLines.add(new ShoppingCartItem(item));
  }
  this.facilityId=cart.facilityId;
  this.webSiteId=cart.webSiteId;
}
