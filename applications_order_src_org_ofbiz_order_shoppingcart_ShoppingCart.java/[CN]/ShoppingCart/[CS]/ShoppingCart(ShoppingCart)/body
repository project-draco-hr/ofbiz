{
  this.delegator=cart.getDelegator();
  this.delegatorName=delegator.getDelegatorName();
  this.productStoreId=cart.getProductStoreId();
  this.poNumber=cart.getPoNumber();
  this.orderId=cart.getOrderId();
  this.orderName="Copy of " + cart.getOrderName();
  this.workEffortId=cart.getWorkEffortId();
  this.firstAttemptOrderId=cart.getFirstAttemptOrderId();
  this.billingAccountId=cart.getBillingAccountId();
  this.agreementId=cart.getAgreementId();
  this.quoteId=cart.getQuoteId();
  this.orderAdditionalEmails=cart.getOrderAdditionalEmails();
  this.adjustments=new LinkedList(cart.getAdjustments());
  this.contactMechIdsMap=new HashMap(cart.getOrderContactMechIds());
  this.freeShippingProductPromoActions=new ArrayList(cart.getFreeShippingProductPromoActions());
  this.desiredAlternateGiftByAction=cart.getAllDesiredAlternateGiftByActionCopy();
  this.productPromoUseInfoList=new LinkedList(cart.productPromoUseInfoList);
  this.productPromoCodes=new HashSet(cart.productPromoCodes);
  this.locale=cart.getLocale();
  this.currencyUom=cart.getCurrency();
  this.externalId=cart.getExternalId();
  this.internalCode=cart.getInternalCode();
  this.viewCartOnAdd=cart.viewCartOnAdd();
  this.defaultShipAfterDate=cart.getDefaultShipAfterDate();
  this.defaultShipBeforeDate=cart.getDefaultShipBeforeDate();
  this.cancelBackOrderDate=cart.getCancelBackOrderDate();
  this.terminalId=cart.getTerminalId();
  this.transactionId=cart.getTransactionId();
  this.autoOrderShoppingListId=cart.getAutoOrderShoppingListId();
  this.additionalPartyRole=new HashMap();
  Iterator it=cart.additionalPartyRole.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry me=(Map.Entry)it.next();
    this.additionalPartyRole.put(me.getKey(),new LinkedList((Collection)me.getValue()));
  }
  Iterator groupIt=cart.itemGroupByNumberMap.values().iterator();
  while (groupIt.hasNext()) {
    ShoppingCartItemGroup itemGroup=(ShoppingCartItemGroup)groupIt.next();
    ShoppingCartItemGroup parentGroup=null;
    if (itemGroup.getParentGroup() != null)     parentGroup=this.getItemGroupByNumber(itemGroup.getParentGroup().getGroupNumber());
    ShoppingCartItemGroup newGroup=new ShoppingCartItemGroup(itemGroup,parentGroup);
    itemGroupByNumberMap.put(newGroup.getGroupNumber(),newGroup);
  }
  List items=cart.items();
  Iterator itIt=items.iterator();
  while (itIt.hasNext()) {
    cartLines.add(new ShoppingCartItem((ShoppingCartItem)itIt.next()));
  }
}
