{
  List<GenericValue> paymentAddresses=null;
  try {
    paymentAddresses=delegator.findByAnd("PartyContactWithPurpose",UtilMisc.toMap("partyId",partyId,"contactMechPurposeTypeId","PAYMENT_LOCATION"),UtilMisc.toList("-fromDate"),false);
    paymentAddresses=EntityUtil.filterByDate(paymentAddresses,null,"contactFromDate","contactThruDate",true);
    paymentAddresses=EntityUtil.filterByDate(paymentAddresses,null,"purposeFromDate","purposeThruDate",true);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting PartyContactWithPurpose view entity list",module);
  }
  GenericValue purpose=EntityUtil.getFirst(paymentAddresses);
  GenericValue postalAddress=null;
  if (purpose != null) {
    try {
      postalAddress=delegator.findOne("PostalAddress",UtilMisc.toMap("contactMechId",purpose.getString("contactMechId")),false);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Trouble getting PostalAddress record for contactMechId: " + purpose.getString("contactMechId"),module);
    }
  }
  return postalAddress;
}
