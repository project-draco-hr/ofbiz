{
  if (devices.get("Keyboard") != null) {
    String keyboardDevice=(devices.get("Keyboard")).value;
    if (UtilValidate.isNotEmpty(keyboardDevice) && !"[NOT IMPLEMENTED]".equals(keyboardDevice)) {
      keyboard=new Keyboard(keyboardDevice,-1);
      try {
        keyboard.open();
      }
 catch (      jpos.JposException jpe) {
        Debug.logError(jpe,"JPOS Exception",module);
        throw new GeneralException(jpe.getOrigException());
      }
    }
  }
  if (devices.get("Scanner") != null) {
    String scannerDevice=(devices.get("Scanner")).value;
    if (UtilValidate.isNotEmpty(scannerDevice) && !"[NOT IMPLEMENTED]".equals(scannerDevice)) {
      scanner=new Scanner(scannerDevice,-1);
      try {
        scanner.open();
      }
 catch (      jpos.JposException jpe) {
        Debug.logError(jpe,"JPOS Exception",module);
        throw new GeneralException(jpe.getOrigException());
      }
    }
  }
  if (devices.get("CheckScanner") != null) {
    String checkScannerDevice=(devices.get("CheckScanner")).value;
    if (UtilValidate.isNotEmpty(checkScannerDevice) && !"[NOT IMPLEMENTED]".equals(checkScannerDevice)) {
      check=new CheckScanner(checkScannerDevice,-1);
      try {
        check.open();
      }
 catch (      jpos.JposException jpe) {
        Debug.logError(jpe,"JPOS Exception",module);
        throw new GeneralException(jpe.getOrigException());
      }
    }
  }
  if (devices.get("Msr") != null) {
    String msrDevice=(devices.get("Msr")).value;
    if (UtilValidate.isNotEmpty(msrDevice) && !"[NOT IMPLEMENTED]".equals(msrDevice)) {
      msr=new Msr(msrDevice,-1);
      try {
        msr.open();
      }
 catch (      jpos.JposException jpe) {
        Debug.logError(jpe,"JPOS Exception",module);
        throw new GeneralException(jpe.getOrigException());
      }
    }
  }
  if (devices.get("Receipt") != null) {
    String receiptDevice=(devices.get("Receipt")).value;
    if (UtilValidate.isNotEmpty(receiptDevice) && !"[NOT IMPLEMENTED]".equals(receiptDevice)) {
      receipt=new Receipt(receiptDevice,-1);
      try {
        receipt.open();
      }
 catch (      jpos.JposException jpe) {
        Debug.logError(jpe,"JPOS Exception",module);
        throw new GeneralException(jpe.getOrigException());
      }
    }
  }
  if (devices.get("Journal") != null) {
    String journalDevice=(devices.get("Journal")).value;
    if (UtilValidate.isNotEmpty(journalDevice) && !"[NOT IMPLEMENTED]".equals(journalDevice)) {
      journal=new Journal(journalDevice,-1);
      try {
        journal.open();
      }
 catch (      jpos.JposException jpe) {
        Debug.logError(jpe,"JPOS Exception",module);
        throw new GeneralException(jpe.getOrigException());
      }
    }
  }
  if (devices.get("LineDisplay") != null) {
    String lineDisplayDevice=(devices.get("LineDisplay")).value;
    if (UtilValidate.isNotEmpty(lineDisplayDevice) && !"[NOT IMPLEMENTED]".equals(lineDisplayDevice)) {
      ldisplay=new LineDisplay(lineDisplayDevice,-1);
      try {
        ldisplay.open();
      }
 catch (      jpos.JposException jpe) {
        Debug.logError(jpe,"JPOS Exception",module);
        throw new GeneralException(jpe.getOrigException());
      }
    }
  }
  for (int i=1; i < 10; i++) {
    String idName="CashDrawer." + i;
    if (devices.get(idName) != null) {
      String cashDrawerDevice=(devices.get(idName)).value;
      if (UtilValidate.isNotEmpty(cashDrawerDevice) && !"[NOT IMPLEMENTED]".equals(cashDrawerDevice)) {
        if (drawer == null) {
          drawer=new CashDrawer[10];
        }
        drawer[i - 1]=new CashDrawer(cashDrawerDevice,-1);
        try {
          drawer[i - 1].open();
        }
 catch (        jpos.JposException jpe) {
          Debug.logError(jpe,"JPOS Exception",module);
          throw new GeneralException(jpe.getOrigException());
        }
      }
    }
  }
}
