{
  FlexibleStringExpander fse=FlexibleStringExpander.getInstance(null);
  assertTrue("null FlexibleStringExpander",fse.isEmpty());
  fseTest("null FlexibleStringExpander",null,null,"");
  fseTest("null context","Hello World!",null,"Hello World!");
  Map<String,Object> testMap=new HashMap<String,Object>();
  testMap.put("var","World");
  fseTest("simple replacement","Hello ${var}!",testMap,"Hello World!");
  testMap.put("nested","Hello ${var}");
  fseTest("hidden (runtime) nested replacement","${nested}!",testMap,"Hello World!");
  fseTest("visible nested replacement","${'Hello ${var}'}!",testMap,"Hello World!");
  fseTest("bsh: script","${bsh:return \"Hello \" + var + \"!\";}",testMap,"Hello World!");
  fseTest("groovy: script","${groovy:return \"Hello \" + var + \"!\";}",testMap,"Hello World!");
  testMap.put("testMap",testMap);
  fseTest("UEL integration: Map","Hello ${testMap.var}!",testMap,"Hello World!");
  List<String> testList=new ArrayList<String>();
  testList.add("World");
  testMap.put("testList",testList);
  fseTest("UEL integration: List","Hello ${testList[0]}!",testMap,"Hello World!");
  fseTest("Escaped expression","This is an \\${escaped} expression",testMap,"This is an ${escaped} expression");
}
