{
  FlexibleStringExpander fse=FlexibleStringExpander.getInstance(null);
  assertTrue("null FlexibleStringExpander",fse.isEmpty());
  fse=FlexibleStringExpander.getInstance("Hello World!");
  assertEquals("null context","Hello World!",fse.expandString(null));
  Map<String,Object> testMap=new HashMap<String,Object>();
  testMap.put("var","World");
  fse=FlexibleStringExpander.getInstance("Hello ${var}!");
  assertEquals("simple replacement","Hello World!",fse.expandString(testMap));
  testMap.put("nested","Hello ${var}");
  fse=FlexibleStringExpander.getInstance("${nested}!");
  assertEquals("hidden (runtime) nested replacement","Hello World!",fse.expandString(testMap));
  fse=FlexibleStringExpander.getInstance("${'Hello ${var}'}!");
  assertEquals("visible nested replacement","Hello World!",fse.expandString(testMap));
  fse=FlexibleStringExpander.getInstance("${bsh:return \"Hello \" + var + \"!\";}");
  assertEquals("bsh: script","Hello World!",fse.expandString(testMap));
  fse=FlexibleStringExpander.getInstance("${groovy:return \"Hello \" + var + \"!\";}");
  assertEquals("groovy: script","Hello World!",fse.expandString(testMap));
  testMap.put("testMap",testMap);
  fse=FlexibleStringExpander.getInstance("Hello ${testMap.var}!");
  assertEquals("UEL integration: Map","Hello World!",fse.expandString(testMap));
  List<String> testList=new ArrayList<String>();
  testList.add("World");
  testMap.put("testList",testList);
  fse=FlexibleStringExpander.getInstance("Hello ${testList[0]}!");
  assertEquals("UEL integration: List","Hello World!",fse.expandString(testMap));
  fse=FlexibleStringExpander.getInstance("This is an \\${escaped} expression");
  assertEquals("Escaped expression","This is an ${escaped} expression",fse.expandString(testMap));
}
