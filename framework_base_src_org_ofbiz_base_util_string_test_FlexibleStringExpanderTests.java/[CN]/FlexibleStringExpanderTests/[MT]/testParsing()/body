{
  parserTest("visible nested replacement","${'Hello ${var}'}!","${'Hello ${var}'}!");
  parserTest("hidden (runtime) nested null callreplacement","Hello ${${groovy:" + FlexibleStringExpanderTests.class.getName() + ".StaticReturnNull()}}World!","Hello ${${groovy:" + FlexibleStringExpanderTests.class.getName() + ".StaticReturnNull()}}World!");
  parserTest("UEL integration(nested): throw Exception","${${throwException.value}}","${throwException.value}");
  parserTest("nested-constant-emptynest-emptynest","${a${}${}","a${}${}");
  parserTest("null",null,"");
  parserTest("empty","","");
  parserTest("constant-only","a","a");
  parserTest("nested-constant-emptynest-emptynest","${a${}${}","a${}${}");
  parserTest("bsh","${bsh:}","");
  parserTest("groovy","${groovy:}","");
  parserTest("escaped","\\${}","\\${}");
  parserTest("constant-escaped","a\\${}","a\\${}");
  parserTest("escaped-bsd","\\${bsh:}","\\${bsh:}");
  parserTest("escaped-groovy","\\${groovy:}","\\${groovy:}");
  parserTest("missing-}","${","${");
  parserTest("nested-constant-missing-}","${a${}","a${}");
  parserTest("nested-constant-nested-nested-missing-}","${a${${}","a${${}");
  parserTest("escaped-missing-}","\\${","\\${");
  parserTest("constant-escaped-missing-}","a\\${","a\\${");
  parserTest("currency","${?currency(","${?currency(");
  parserTest("currency","${?currency()","${?currency()");
  parserTest("currency","${price?currency(","${price?currency(");
  parserTest("currency","${price?currency()","${price?currency()");
  parserTest("currency","${?currency(usd","${?currency(usd");
  parserTest("currency","${?currency(usd)","${?currency(usd)");
  parserTest("currency","${price?currency(usd","${price?currency(usd");
  parserTest("currency","${price?currency(usd)","${price?currency(usd)");
  parserTest("currency","${?currency()}","${?currency()}");
  parserTest("currency","${?currency(usd)}","${?currency(usd)}");
  parserTest("currency","${price?currency()}","${price?currency()}");
  parserTest("currency","${price?currency(usd)}","${price?currency(usd)}");
  parserTest("currency","a${price?currency(usd)}b","a${price?currency(usd)}b");
}
