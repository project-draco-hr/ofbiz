{
  assertEquals("isEmpty:" + label,isEmpty,fse.isEmpty());
  if (input == null) {
    assertEquals("getOriginal():" + label,"",fse.getOriginal());
    assertEquals("toString():" + label,"",fse.toString());
    assertEquals("expandString(null):" + label,"",fse.expandString(null));
    if (timeZone == null) {
      assertEquals("expandString(null):" + label,"",fse.expandString(null,locale));
    }
 else {
      assertEquals("expandString(null):" + label,"",fse.expandString(null,timeZone,locale));
    }
  }
 else {
    assertEquals("getOriginal():" + label,input,fse.getOriginal());
    assertEquals("toString():" + label,input,fse.toString());
    assertEquals("expandString(null):" + label,input,fse.expandString(null));
    if (timeZone == null) {
      assertEquals("expandString(null):" + label,input,fse.expandString(null,locale));
    }
 else {
      assertEquals("expandString(null):" + label,input,fse.expandString(null,timeZone,locale));
    }
  }
  if (locale == null) {
    assertEquals(label,compare,fse.expandString(context));
  }
 else {
    Locale defaultLocale=Locale.getDefault();
    TimeZone defaultTimeZone=TimeZone.getDefault();
    try {
      Locale.setDefault(locale);
      TimeZone.setDefault(timeZone);
      assertEquals(label,compare,fse.expandString(context,null,null));
      Locale.setDefault(badLocale);
      TimeZone.setDefault(badTimeZone);
      assertNotSame(label,compare,fse.expandString(context,null,null));
      Map<String,Object> autoUserLogin=new HashMap<String,Object>();
      autoUserLogin.put("lastLocale",locale.toString());
      autoUserLogin.put("lastTimeZone",timeZone == null ? null : timeZone.getID());
      context.put("autoUserLogin",autoUserLogin);
      assertEquals(label,compare,fse.expandString(context,null,null));
      autoUserLogin.put("lastLocale",badLocale.toString());
      autoUserLogin.put("lastTimeZone",badTimeZone.getID());
      assertNotSame(label,compare,fse.expandString(context,null,null));
      context.remove("autoUserLogin");
      context.put("locale",locale);
      context.put("timeZone",timeZone);
      assertEquals(label,compare,fse.expandString(context,null,null));
      context.put("locale",badLocale);
      context.put("timeZone",badTimeZone);
      assertNotSame(label,compare,fse.expandString(context,null,null));
      context.remove("locale");
      context.remove("timeZone");
      assertEquals(label,compare,fse.expandString(context,timeZone,locale));
      assertNotSame(label,compare,fse.expandString(context,badTimeZone,badLocale));
    }
  finally {
      Locale.setDefault(defaultLocale);
      TimeZone.setDefault(defaultTimeZone);
    }
  }
}
