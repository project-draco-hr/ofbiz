{
  Set<String> entityNames=this.getEntityModelReader().getEntityNames();
  for (  String entityName : entityNames) {
    this.getEntityArtifactInfo(entityName);
  }
  Set<String> serviceNames=this.getDispatchContext().getAllServiceNames();
  for (  String serviceName : serviceNames) {
    this.getServiceArtifactInfo(serviceName);
  }
  Collection<ComponentConfig> componentConfigs=ComponentConfig.getAllComponents();
  for (  ComponentConfig componentConfig : componentConfigs) {
    String componentName=componentConfig.getGlobalName();
    String rootComponentPath=componentConfig.getRootLocation();
    List<File> screenFiles=null;
    List<File> formFiles=null;
    try {
      screenFiles=this.findScreenWidgetDefinitionFiles(rootComponentPath);
      formFiles=this.findFormWidgetDefinitionFiles(rootComponentPath);
    }
 catch (    IOException ioe) {
      throw new GeneralException(ioe.getMessage());
    }
    if (screenFiles != null) {
      for (      File screenFile : screenFiles) {
        String screenFilePath=screenFile.getAbsolutePath();
        screenFilePath=screenFilePath.replace('\\','/');
        String screenFileRelativePath=screenFilePath.substring(rootComponentPath.length());
        String screenLocation="component://" + componentName + "/"+ screenFileRelativePath;
        Map modelScreenMap=null;
        try {
          modelScreenMap=ScreenFactory.getScreensFromLocation(screenLocation);
        }
 catch (        Exception exc) {
          throw new GeneralException(exc.getMessage());
        }
        Iterator screenNames=modelScreenMap.keySet().iterator();
        while (screenNames.hasNext()) {
          String screenName=(String)screenNames.next();
          this.getScreenWidgetArtifactInfo(screenName,screenLocation);
        }
      }
    }
    if (formFiles != null) {
      for (      File formFile : formFiles) {
        String formFilePath=formFile.getAbsolutePath();
        formFilePath=formFilePath.replace('\\','/');
        String formFileRelativePath=formFilePath.substring(rootComponentPath.length());
        String formLocation="component://" + componentName + "/"+ formFileRelativePath;
        Map modelFormMap=null;
        try {
          modelFormMap=FormFactory.getFormsFromLocation(formLocation,this.getEntityModelReader(),this.getDispatchContext());
        }
 catch (        Exception exc) {
          throw new GeneralException(exc.getMessage());
        }
        Iterator formNames=modelFormMap.keySet().iterator();
        while (formNames.hasNext()) {
          String formName=(String)formNames.next();
          this.getFormWidgetArtifactInfo(formName,formLocation);
        }
      }
    }
  }
  Set<URL> controllerUrlSet=FastSet.newInstance();
  for (  URL controllerUrl : controllerUrlSet) {
    ControllerConfig cc=ConfigXMLReader.getControllerConfig(controllerUrl);
    for (    String requestUri : cc.requestMap.keySet()) {
      this.getControllerRequestArtifactInfo(controllerUrl,requestUri);
    }
    for (    String viewUri : cc.viewMap.keySet()) {
      this.getControllerViewArtifactInfo(controllerUrl,viewUri);
    }
  }
}
