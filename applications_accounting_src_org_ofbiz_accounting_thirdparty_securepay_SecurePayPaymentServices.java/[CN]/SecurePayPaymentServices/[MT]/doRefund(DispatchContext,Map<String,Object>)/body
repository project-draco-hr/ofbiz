{
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=dctx.getDelegator();
  GenericValue orderPaymentPreference=(GenericValue)context.get("orderPaymentPreference");
  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(orderPaymentPreference);
  if (authTransaction == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentTransactionAuthorizationNotFoundCannotRefund",locale));
  }
  String referenceNum=null;
  try {
    GenericValue paymentGatewayResponse=EntityQuery.use(delegator).from("PaymentGatewayResponse").where("orderPaymentPreferenceId",authTransaction.get("orderPaymentPreferenceId"),"paymentServiceTypeEnumId","PRDS_PAY_CAPTURE").queryFirst();
    referenceNum=paymentGatewayResponse != null ? paymentGatewayResponse.get("referenceNum") : authTransaction.getString("referenceNum");
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
  }
  Properties props=buildScProperties(context,delegator);
  if (props == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSecurityPayNotProperlyConfigurated",locale));
  }
  String merchantId=props.getProperty("merchantID");
  String serverURL=props.getProperty("serverurl");
  String processtimeout=props.getProperty("processtimeout");
  String pwd=props.getProperty("pwd");
  String enableamountround=props.getProperty("enableamountround");
  String currency=authTransaction.getString("currencyUomId");
  BigDecimal refundAmount=(BigDecimal)context.get("refundAmount");
  BigDecimal multiplyAmount=new BigDecimal(100);
  BigDecimal newAmount=null;
  if (enableamountround.equals("Y")) {
    newAmount=new BigDecimal(refundAmount.setScale(0,BigDecimal.ROUND_HALF_UP) + ".00");
  }
 else {
    newAmount=refundAmount;
  }
  int amont;
  if (currency.equals("JPY")) {
    amont=newAmount.intValue();
  }
 else {
    amont=newAmount.multiply(multiplyAmount).intValue();
  }
  Payment payment=new Payment();
  payment.setServerURL(serverURL);
  payment.setProcessTimeout(Integer.valueOf(processtimeout));
  payment.setMerchantId(merchantId);
  Txn txn=payment.addTxn(4,(String)orderPaymentPreference.get("orderId"));
  txn.setTxnSource(8);
  txn.setAmount(Integer.toString(amont));
  txn.setTxnId(referenceNum);
  boolean processed=payment.process(pwd);
  Map<String,Object> result=ServiceUtil.returnSuccess();
  if (UtilValidate.isEmpty(processed)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSecurityPayPaymentWasNotSent",locale));
  }
 else {
    if (payment.getCount() == 1) {
      Txn resp=payment.getTxn(0);
      boolean approved=resp.getApproved();
      if (approved == false) {
        result.put("refundResult",false);
        result.put("refundRefNum",authTransaction.getString("referenceNum"));
        result.put("refundAmount",BigDecimal.ZERO);
      }
 else {
        result.put("refundResult",true);
        result.put("refundAmount",refundAmount);
        result.put("refundRefNum",resp.getTxnId());
      }
      result.put("refundCode",resp.getResponseCode());
      result.put("refundMessage",resp.getResponseText());
      result.put("refundFlag","R");
    }
  }
  return result;
}
