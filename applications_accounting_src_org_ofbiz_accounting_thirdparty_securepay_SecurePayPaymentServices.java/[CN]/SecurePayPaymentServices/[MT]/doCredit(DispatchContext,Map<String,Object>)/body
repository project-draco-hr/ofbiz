{
  Delegator delegator=dctx.getDelegator();
  Properties props=buildScProperties(context,delegator);
  if (props == null) {
    return ServiceUtil.returnError("ERROR: Getting SecurePay property configuration");
  }
  String merchantId=props.getProperty("merchantID");
  String serverURL=props.getProperty("serverurl");
  String processtimeout=props.getProperty("processtimeout");
  String pwd=props.getProperty("pwd");
  String enableamountround=props.getProperty("enableamountround");
  String referenceCode=(String)context.get("referenceCode");
  String currency=(String)context.get("currency");
  String cardSecurityCode=(String)context.get("cardSecurityCode");
  BigDecimal creditAmount=(BigDecimal)context.get("creditAmount");
  BigDecimal multiplyAmount=new BigDecimal(100);
  BigDecimal newAmount=null;
  int amont;
  if (enableamountround.equals("Y")) {
    newAmount=new BigDecimal(creditAmount.setScale(0,BigDecimal.ROUND_HALF_UP) + ".00");
  }
 else {
    newAmount=creditAmount;
  }
  if (currency.equals("JPY")) {
    amont=newAmount.intValue();
  }
 else {
    amont=newAmount.multiply(multiplyAmount).intValue();
  }
  GenericValue creditCard=(GenericValue)context.get("creditCard");
  Payment payment=new Payment();
  payment.setServerURL(serverURL);
  payment.setProcessTimeout(Integer.valueOf(processtimeout));
  payment.setMerchantId(merchantId);
  Txn txn=payment.addTxn(0,referenceCode);
  txn.setTxnSource(8);
  txn.setAmount(Integer.toString(amont));
  txn.setCardNumber((String)creditCard.get("cardNumber"));
  String expiryDate=(String)creditCard.get("expireDate");
  txn.setExpiryDate(expiryDate.substring(0,3) + expiryDate.substring(5));
  if (UtilValidate.isNotEmpty(cardSecurityCode)) {
    txn.setCVV(cardSecurityCode);
  }
  boolean processed=payment.process(pwd);
  Map<String,Object> result=ServiceUtil.returnSuccess();
  if (UtilValidate.isEmpty(processed)) {
    return ServiceUtil.returnError("Payment was not sent to server.");
  }
 else {
    if (payment.getCount() == 1) {
      Txn resp=payment.getTxn(0);
      boolean approved=resp.getApproved();
      if (approved == false) {
        result.put("creditResult",false);
        result.put("creditRefNum","N/A");
        result.put("creditAmount",BigDecimal.ZERO);
      }
 else {
        result.put("creditResult",true);
        result.put("creditAmount",creditAmount);
        result.put("creditRefNum",resp.getTxnId());
      }
      result.put("creditCode",resp.getResponseCode());
      result.put("creditMessage",resp.getResponseText());
    }
  }
  return result;
}
