{
  Debug.log("process sale",module);
  BigDecimal grandTotal=this.getGrandTotal();
  BigDecimal paymentAmt=this.getPaymentTotal();
  if (grandTotal.compareTo(paymentAmt) > 0) {
    throw new IllegalStateException();
  }
  getCart().setOrderPartyId(partyId);
  Debug.log("Validating payment methods",module);
  Map<String,? extends Object> valRes=ch.validatePaymentMethods();
  if (valRes != null && ServiceUtil.isError(valRes)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(valRes));
  }
  Debug.log("Store order",module);
  Map<String,? extends Object> orderRes=ch.createOrder(webPosSession.getUserLogin());
  if (orderRes != null && ServiceUtil.isError(orderRes)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(orderRes));
  }
 else   if (orderRes != null) {
    this.orderId=(String)orderRes.get("orderId");
  }
  Debug.log("Processing the payment(s)",module);
  Map<String,? extends Object> payRes=null;
  try {
    payRes=ch.processPayment(ProductStoreWorker.getProductStore(webPosSession.getProductStoreId(),webPosSession.getDelegator()),webPosSession.getUserLogin(),true);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    throw e;
  }
  if (payRes != null && ServiceUtil.isError(payRes)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(payRes));
  }
  BigDecimal change=grandTotal.subtract(paymentAmt);
  txLog.set("statusId","POSTX_SOLD");
  txLog.set("orderId",orderId);
  txLog.set("itemCount",new Long(getCart().size()));
  txLog.set("logEndDateTime",UtilDateTime.nowTimestamp());
  try {
    txLog.store();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to store TX log - not fatal",module);
  }
  return change;
}
