{
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  String contentPath=request.getParameter("path");
  if (UtilValidate.isEmpty(contentPath)) {
    String msg="A node path is missing, please pass the path to the node which should be read from the repository.";
    Debug.logError(msg,module);
    request.setAttribute("_ERROR_MESSAGE_",msg);
    return "error";
  }
  JcrFileHelper fileHelper=new JackrabbitFileHelper(userLogin);
  JackrabbitHierarchyNode orm=null;
  try {
    orm=fileHelper.getRepositoryContent(contentPath);
  }
 catch (  ClassCastException e1) {
    Debug.logError(e1,module);
    request.setAttribute("_ERROR_MESSAGE_",e1.getMessage());
    return "error";
  }
catch (  PathNotFoundException e1) {
    Debug.logError(e1,module);
    request.setAttribute("_ERROR_MESSAGE_",e1.getMessage());
    return "error";
  }
  if (fileHelper.isFileContent()) {
    JackrabbitFile file=(JackrabbitFile)orm;
    InputStream fileStream=file.getResource().getData();
    String fileName=file.getPath();
    if (fileName.indexOf("/") != -1) {
      fileName=fileName.substring(fileName.indexOf("/") + 1);
    }
    try {
      UtilHttp.streamContentToBrowser(response,IOUtils.toByteArray(fileStream),file.getResource().getMimeType(),fileName);
    }
 catch (    IOException e) {
      Debug.logError(e,module);
      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
      return "error";
    }
  }
 else {
    Debug.logWarning("This content is no file content, the content is from the type: " + orm.getClass().getName(),module);
  }
  return "success";
}
