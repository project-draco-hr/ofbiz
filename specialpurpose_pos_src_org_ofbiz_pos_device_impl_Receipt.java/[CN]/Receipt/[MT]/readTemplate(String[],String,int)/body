{
  int currentPart=0;
  URL fileUrl=UtilURL.fromResource(resource);
  StringBuffer buf=new StringBuffer();
  try {
    InputStream in=fileUrl.openStream();
    BufferedReader dis=new BufferedReader(new InputStreamReader(in));
    String line;
    while ((line=dis.readLine()) != null) {
      if (line.trim().startsWith("#")) {
        String[] code=line.trim().split("\\=");
        if ("#description.length".equals(code[0])) {
          try {
            this.descLength[type]=Integer.parseInt(code[1]);
          }
 catch (          NumberFormatException e) {
            Debug.logWarning(e,module);
          }
        }
 else         if ("#productId.length".equals(code[0])) {
          try {
            this.pridLength[type]=Integer.parseInt(code[1]);
          }
 catch (          NumberFormatException e) {
            Debug.logWarning(e,module);
          }
        }
 else         if ("#price.length".equals(code[0])) {
          try {
            this.priceLength[type]=Integer.parseInt(code[1]);
          }
 catch (          NumberFormatException e) {
            Debug.logWarning(e,module);
          }
        }
 else         if ("#quantity.length".equals(code[0])) {
          try {
            this.qtyLength[type]=Integer.parseInt(code[1]);
          }
 catch (          NumberFormatException e) {
            Debug.logWarning(e,module);
          }
        }
 else         if ("#infoString.length".equals(code[0])) {
          try {
            this.infoLength[type]=Integer.parseInt(code[1]);
          }
 catch (          NumberFormatException e) {
            Debug.logWarning(e,module);
          }
        }
 else         if ("#dateFormat".equals(code[0])) {
          this.dateFmtStr[type]=code[1];
        }
 else         if ("#configPadding.length".equals(code[0])) {
          try {
            this.configPaddingLength[type]=Integer.parseInt(code[1]);
            StringBuffer spaces=new StringBuffer();
            for (int i=0; i < this.configPaddingLength[type]; i+=1) {
              spaces.append(" ");
            }
            this.configPadding[type]=spaces.toString();
          }
 catch (          NumberFormatException e) {
            Debug.logWarning(e,module);
          }
        }
      }
 else       if (line.trim().startsWith("[BEGIN ITEM LOOP]")) {
        template[currentPart++]=buf.toString();
        buf=new StringBuffer();
        buf.append("[DLOOP]");
      }
 else       if (line.trim().startsWith("[END ITEM LOOP]")) {
        template[currentPart++]=buf.toString();
        buf=new StringBuffer();
      }
 else       if (line.trim().startsWith("[BEGIN PAY LOOP]")) {
        template[currentPart++]=buf.toString();
        buf=new StringBuffer();
        buf.append("[PLOOP]");
      }
 else       if (line.trim().startsWith("[END PAY LOOP]")) {
        template[currentPart++]=buf.toString();
        buf=new StringBuffer();
      }
 else       if (line.trim().startsWith("[ORDER BARCODE]")) {
        template[currentPart++]=buf.toString();
        template[currentPart++]="[ORDER_BARCODE]";
        buf=new StringBuffer();
      }
 else {
        if (UtilValidate.isEmpty(line)) {
          line=" ";
        }
        buf.append(line + "\n");
      }
    }
    in.close();
  }
 catch (  IOException e) {
    Debug.logError(e,"Unable to open receipt template",module);
  }
  template[currentPart]=buf.toString();
  return template;
}
