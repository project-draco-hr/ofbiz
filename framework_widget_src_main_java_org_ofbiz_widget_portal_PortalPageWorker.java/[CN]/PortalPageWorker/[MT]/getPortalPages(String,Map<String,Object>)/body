{
  List<GenericValue> portalPages=null;
  if (UtilValidate.isNotEmpty(parentPortalPageId)) {
    Delegator delegator=WidgetWorker.getDelegator(context);
    try {
      EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("ownerUserLoginId",EntityOperator.EQUALS,"_NA_"),EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("portalPageId",EntityOperator.EQUALS,parentPortalPageId),EntityCondition.makeCondition("parentPortalPageId",EntityOperator.EQUALS,parentPortalPageId)),EntityOperator.OR)),EntityOperator.AND);
      portalPages=EntityQuery.use(delegator).from("PortalPage").where(cond).queryList();
      List<GenericValue> userPortalPages=new ArrayList<GenericValue>();
      if (UtilValidate.isNotEmpty(context.get("userLogin"))) {
        String userLoginId=((GenericValue)context.get("userLogin")).getString("userLoginId");
        for (        GenericValue portalPage : portalPages) {
          List<GenericValue> privatePortalPages=EntityQuery.use(delegator).from("PortalPage").where("ownerUserLoginId",userLoginId,"originalPortalPageId",portalPage.getString("portalPageId")).queryList();
          if (UtilValidate.isNotEmpty(privatePortalPages)) {
            userPortalPages.add(privatePortalPages.get(0));
          }
 else {
            userPortalPages.add(portalPage);
          }
        }
        userPortalPages.addAll(EntityQuery.use(delegator).from("PortalPage").where("ownerUserLoginId",userLoginId,"originalPortalPageId",null,"parentPortalPageId",parentPortalPageId).queryList());
      }
      portalPages=EntityUtil.orderBy(userPortalPages,UtilMisc.toList("sequenceNum"));
    }
 catch (    GenericEntityException e) {
      Debug.logError("Could not retrieve portalpages:" + e.getMessage(),module);
    }
  }
  return portalPages;
}
