{
  DispatchContext dctx=dispatcher.getLocalContext(localName);
  Job job=null;
  if (persist) {
    if (dispatcher.getDelegator() == null) {
      throw new GenericServiceException("No reference to delegator; cannot run persisted services.");
    }
    GenericValue jobV=null;
    try {
      List toBeStored=new LinkedList();
      String dataId=dispatcher.getDelegator().getNextSeqId("RuntimeData");
      GenericValue runtimeData=dispatcher.getDelegator().makeValue("RuntimeData",UtilMisc.toMap("runtimeDataId",dataId));
      runtimeData.set("runtimeInfo",XmlSerializer.serialize(context));
      toBeStored.add(runtimeData);
      String jobId=dispatcher.getDelegator().getNextSeqId("JobSandbox").toString();
      String jobName=new String(new Long((new Date().getTime())).toString());
      Map jFields=UtilMisc.toMap("jobId",jobId,"jobName",jobName,"runTime",UtilDateTime.nowTimestamp());
      jFields.put("poolId",ServiceConfigUtil.getSendPool());
      jFields.put("statusId","SERVICE_PENDING");
      jFields.put("serviceName",modelService.name);
      jFields.put("loaderName",localName);
      jFields.put("maxRetry",new Long(modelService.maxRetry));
      jFields.put("runtimeDataId",dataId);
      jobV=dispatcher.getDelegator().makeValue("JobSandbox",jFields);
      toBeStored.add(jobV);
      dispatcher.getDelegator().storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      throw new GenericServiceException("Unable to create persisted job",e);
    }
catch (    SerializeException e) {
      throw new GenericServiceException("Problem serializing service attributes",e);
    }
catch (    FileNotFoundException e) {
      throw new GenericServiceException("Problem serializing service attributes",e);
    }
catch (    IOException e) {
      throw new GenericServiceException("Problem serializing service attributes",e);
    }
    if (jobV == null) {
      throw new GenericServiceException("Persisted job not created");
    }
 else {
      Debug.logInfo("Persisted job queued : " + jobV.getString("jobName"),module);
    }
  }
 else {
    String name=new Long(new Date().getTime()).toString();
    String jobId=modelService.name + "." + name;
    job=new GenericServiceJob(dctx,jobId,name,modelService.name,context,requester);
    try {
      dispatcher.getJobManager().runJob(job);
    }
 catch (    JobManagerException jse) {
      throw new GenericServiceException("Cannot run job.",jse);
    }
  }
}
