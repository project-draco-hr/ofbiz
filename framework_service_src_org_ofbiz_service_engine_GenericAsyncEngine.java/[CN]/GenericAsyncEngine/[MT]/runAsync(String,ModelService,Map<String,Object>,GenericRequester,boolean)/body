{
  DispatchContext dctx=dispatcher.getLocalContext(localName);
  Job job=null;
  if (persist) {
    if (dispatcher.getDelegator() == null) {
      throw new GenericServiceException("No reference to delegator; cannot run persisted services.");
    }
    GenericValue jobV=null;
    try {
      String dataId=dispatcher.getDelegator().getNextSeqId("RuntimeData");
      GenericValue runtimeData=dispatcher.getDelegator().makeValue("RuntimeData","runtimeDataId",dataId);
      runtimeData.set("runtimeInfo",XmlSerializer.serialize(context));
      runtimeData.create();
      String authUserLoginId=null;
      if (context.get("userLogin") != null) {
        GenericValue userLogin=(GenericValue)context.get("userLogin");
        authUserLoginId=userLogin.getString("userLoginId");
      }
      String jobId=dispatcher.getDelegator().getNextSeqId("JobSandbox");
      String jobName=Long.toString(System.currentTimeMillis());
      Map<String,Object> jFields=UtilMisc.toMap("jobId",jobId,"jobName",jobName,"runTime",UtilDateTime.nowTimestamp());
      jFields.put("poolId",ServiceConfigUtil.getSendPool());
      jFields.put("statusId","SERVICE_PENDING");
      jFields.put("serviceName",modelService.name);
      jFields.put("loaderName",localName);
      jFields.put("maxRetry",Long.valueOf(modelService.maxRetry));
      jFields.put("runtimeDataId",dataId);
      if (UtilValidate.isNotEmpty(authUserLoginId)) {
        jFields.put("authUserLoginId",authUserLoginId);
      }
      jobV=dispatcher.getDelegator().makeValue("JobSandbox",jFields);
      jobV.create();
    }
 catch (    GenericEntityException e) {
      throw new GenericServiceException("Unable to create persisted job",e);
    }
catch (    SerializeException e) {
      throw new GenericServiceException("Problem serializing service attributes",e);
    }
catch (    FileNotFoundException e) {
      throw new GenericServiceException("Problem serializing service attributes",e);
    }
catch (    IOException e) {
      throw new GenericServiceException("Problem serializing service attributes",e);
    }
catch (    GenericConfigException e) {
      throw new GenericServiceException("Problem serializing service attributes",e);
    }
    if (jobV == null) {
      throw new GenericServiceException("Persisted job not created");
    }
 else {
      Debug.logInfo("Persisted job queued : " + jobV.getString("jobName"),module);
    }
  }
 else {
    JobManager jMgr=dispatcher.getJobManager();
    if (jMgr != null) {
      String name=Long.toString(System.currentTimeMillis());
      String jobId=modelService.name + "." + name;
      job=new GenericServiceJob(dctx,jobId,name,modelService.name,context,requester);
      try {
        dispatcher.getJobManager().runJob(job);
      }
 catch (      JobManagerException jse) {
        throw new GenericServiceException("Cannot run job.",jse);
      }
    }
 else {
      throw new GenericServiceException("Cannot get JobManager instance to invoke the job");
    }
  }
}
