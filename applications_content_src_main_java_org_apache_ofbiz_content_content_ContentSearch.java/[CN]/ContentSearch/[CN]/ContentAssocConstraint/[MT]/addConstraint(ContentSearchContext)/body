{
  Set<String> contentIdSet=new HashSet<String>();
  if (includeSubContents) {
    ContentSearch.getAllSubContentIds(contentId,contentIdSet,contentSearchContext.getDelegator(),contentSearchContext.nowTimestamp);
  }
 else {
    contentIdSet.add(contentId);
  }
  String entityAlias;
  String prefix;
  entityAlias="CNT" + contentSearchContext.index;
  prefix="cnt" + contentSearchContext.index;
  contentSearchContext.index++;
  contentSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"ContentAssoc");
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ContentIdFrom","contentIdFrom",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ContentIdTo","contentIdTo",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ContentAssocTypeId","contentAssocTypeId",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addViewLink("CNT",entityAlias,Boolean.TRUE,ModelKeyMap.makeKeyMapList("contentId","contentIdFrom"));
  List<EntityExpr> assocConditionFromTo=new LinkedList<EntityExpr>();
  assocConditionFromTo.add(EntityCondition.makeCondition(prefix + "ContentIdTo",EntityOperator.IN,contentIdSet));
  if (UtilValidate.isNotEmpty(contentAssocTypeId)) {
    assocConditionFromTo.add(EntityCondition.makeCondition(prefix + "ContentAssocTypeId",EntityOperator.EQUALS,contentAssocTypeId));
  }
  assocConditionFromTo.add(EntityCondition.makeCondition(EntityCondition.makeCondition(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(prefix + "ThruDate",EntityOperator.GREATER_THAN,contentSearchContext.nowTimestamp)));
  assocConditionFromTo.add(EntityCondition.makeCondition(prefix + "FromDate",EntityOperator.LESS_THAN,contentSearchContext.nowTimestamp));
  entityAlias="CNT" + contentSearchContext.index;
  prefix="cnt" + contentSearchContext.index;
  contentSearchContext.index++;
  contentSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"ContentAssoc");
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ContentIdFrom","contentIdFrom",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ContentIdTo","contentIdTo",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ContentAssocTypeId","contentAssocTypeId",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  contentSearchContext.dynamicViewEntity.addViewLink("CNT",entityAlias,Boolean.TRUE,ModelKeyMap.makeKeyMapList("contentId","contentIdTo"));
  List<EntityExpr> assocConditionToFrom=new LinkedList<EntityExpr>();
  assocConditionToFrom.add(EntityCondition.makeCondition(prefix + "ContentIdFrom",EntityOperator.IN,contentIdSet));
  if (UtilValidate.isNotEmpty(contentAssocTypeId)) {
    assocConditionToFrom.add(EntityCondition.makeCondition(prefix + "ContentAssocTypeId",EntityOperator.EQUALS,contentAssocTypeId));
  }
  assocConditionToFrom.add(EntityCondition.makeCondition(EntityCondition.makeCondition(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition(prefix + "ThruDate",EntityOperator.GREATER_THAN,contentSearchContext.nowTimestamp)));
  assocConditionToFrom.add(EntityCondition.makeCondition(prefix + "FromDate",EntityOperator.LESS_THAN,contentSearchContext.nowTimestamp));
  contentSearchContext.entityConditionList.add(EntityCondition.makeCondition(EntityCondition.makeCondition(assocConditionFromTo,EntityOperator.AND),EntityOperator.OR,EntityCondition.makeCondition(assocConditionToFrom,EntityOperator.AND)));
  contentSearchContext.contentSearchConstraintList.add(contentSearchContext.getDelegator().makeValue("ContentSearchConstraint",UtilMisc.toMap("constraintName",constraintName,"infoString",this.contentId + "," + this.contentAssocTypeId,"includeSubContents",this.includeSubContents ? "Y" : "N")));
}
