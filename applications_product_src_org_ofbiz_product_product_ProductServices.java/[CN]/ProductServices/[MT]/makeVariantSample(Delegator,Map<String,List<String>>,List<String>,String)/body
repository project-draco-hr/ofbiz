{
  Map<String,GenericValue> tempSample=FastMap.newInstance();
  Map<String,GenericValue> sample=new LinkedHashMap<String,GenericValue>();
  for (  String productId : items) {
    List<GenericValue> features=null;
    try {
      Map<String,String> fields=UtilMisc.toMap("productId",productId,"productFeatureTypeId",feature,"productFeatureApplTypeId","STANDARD_FEATURE");
      List<String> sort=UtilMisc.toList("sequenceNum","description");
      features=delegator.findByAnd("ProductFeatureAndAppl",fields,sort,true);
      features=EntityUtil.filterByDate(features,true);
    }
 catch (    GenericEntityException e) {
      throw new IllegalStateException("Problem reading relation: " + e.getMessage());
    }
    for (    GenericValue featureAppl : features) {
      try {
        GenericValue product=delegator.findOne("Product",UtilMisc.toMap("productId",productId),true);
        tempSample.put(featureAppl.getString("description"),product);
      }
 catch (      GenericEntityException e) {
        throw new RuntimeException("Cannot get product entity: " + e.getMessage());
      }
    }
  }
  List<String> features=featureList.get(feature);
  for (  String f : features) {
    if (tempSample.containsKey(f))     sample.put(f,tempSample.get(f));
  }
  return sample;
}
