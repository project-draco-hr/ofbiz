{
  GenericDelegator delegator=dctx.getDelegator();
  String productId=(String)context.get("productId");
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  Set<String> featureSet=new LinkedHashSet<String>();
  try {
    Map<String,String> fields=UtilMisc.toMap("productId",productId,"productFeatureApplTypeId","SELECTABLE_FEATURE");
    List<String> order=UtilMisc.toList("sequenceNum","productFeatureTypeId");
    List<GenericValue> features=delegator.findByAndCache("ProductFeatureAndAppl",fields,order);
    Iterator<GenericValue> i=features.iterator();
    while (i.hasNext()) {
      featureSet.add(i.next().getString("productFeatureTypeId"));
    }
  }
 catch (  GenericEntityException e) {
    Map<String,String> messageMap=UtilMisc.toMap("errProductFeatures",e.toString());
    errMsg=UtilProperties.getMessage(resource,"productservices.problem_reading_product_features_errors",messageMap,locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (featureSet.size() == 0) {
    errMsg=UtilProperties.getMessage(resource,"productservices.problem_reading_product_features",locale);
    Debug.logWarning(errMsg + " for product " + productId,module);
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("featureSet",featureSet);
  return result;
}
