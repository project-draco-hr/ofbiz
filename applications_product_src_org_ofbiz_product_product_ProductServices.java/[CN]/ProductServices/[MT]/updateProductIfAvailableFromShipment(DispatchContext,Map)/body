{
  if ("Y".equals(UtilProperties.getPropertyValue("catalog.properties","reactivate.product.from.receipt","N"))) {
    LocalDispatcher dispatcher=dctx.getDispatcher();
    GenericDelegator delegator=dctx.getDelegator();
    GenericValue userLogin=(GenericValue)context.get("userLogin");
    String inventoryItemId=(String)context.get("inventoryItemId");
    GenericValue inventoryItem=null;
    try {
      inventoryItem=delegator.findByPrimaryKeyCache("InventoryItem",UtilMisc.toMap("inventoryItemId",inventoryItemId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (inventoryItem != null) {
      String productId=inventoryItem.getString("productId");
      GenericValue product=null;
      try {
        product=delegator.findByPrimaryKeyCache("Product",UtilMisc.toMap("productId",productId));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      if (product != null) {
        Timestamp salesDiscontinuationDate=product.getTimestamp("salesDiscontinuationDate");
        if (salesDiscontinuationDate != null && salesDiscontinuationDate.before(UtilDateTime.nowTimestamp())) {
          Map invRes=null;
          try {
            invRes=dispatcher.runSync("getProductInventoryAvailable",UtilMisc.toMap("productId",productId,"userLogin",userLogin));
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
          Double availableToPromiseTotal=(Double)invRes.get("availableToPromiseTotal");
          if (availableToPromiseTotal != null && availableToPromiseTotal.doubleValue() > 0) {
            GenericValue productToUpdate=null;
            try {
              productToUpdate=delegator.findByPrimaryKey("Product",product.getPrimaryKey());
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              return ServiceUtil.returnError(e.getMessage());
            }
            productToUpdate.set("salesDiscontinuationDate",null);
            try {
              delegator.store(productToUpdate);
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              return ServiceUtil.returnError(e.getMessage());
            }
          }
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
