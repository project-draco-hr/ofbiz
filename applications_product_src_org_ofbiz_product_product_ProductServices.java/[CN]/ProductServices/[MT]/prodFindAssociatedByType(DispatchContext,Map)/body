{
  GenericDelegator delegator=dctx.getDelegator();
  Map result=new HashMap();
  String productId=(String)context.get("productId");
  String productIdTo=(String)context.get("productIdTo");
  String type=(String)context.get("type");
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  Boolean cvaBool=(Boolean)context.get("checkViewAllow");
  boolean checkViewAllow=(cvaBool == null ? false : cvaBool.booleanValue());
  String prodCatalogId=(String)context.get("prodCatalogId");
  if (productId == null && productIdTo == null) {
    errMsg=UtilProperties.getMessage(resource,"productservices.both_productId_and_productIdTo_cannot_be_null",locale);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
    return result;
  }
  if (productId != null && productIdTo != null) {
    errMsg=UtilProperties.getMessage(resource,"productservices.both_productId_and_productIdTo_cannot_be_defined",locale);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
    return result;
  }
  productId=productId == null ? productIdTo : productId;
  GenericValue product=null;
  try {
    product=delegator.findByPrimaryKeyCache("Product",UtilMisc.toMap("productId",productId));
  }
 catch (  GenericEntityException e) {
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"productservices.productservices.problems_reading_product_entity",messageMap,locale);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
    return result;
  }
  if (product == null) {
    errMsg=UtilProperties.getMessage(resource,"productservices.problems_getting_product_entity",locale);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
    return result;
  }
  try {
    List productAssocs=null;
    if (productIdTo == null) {
      productAssocs=product.getRelatedCache("MainProductAssoc",UtilMisc.toMap("productAssocTypeId",type),UtilMisc.toList("sequenceNum"));
    }
 else {
      productAssocs=product.getRelatedCache("AssocProductAssoc",UtilMisc.toMap("productAssocTypeId",type),UtilMisc.toList("sequenceNum"));
    }
    productAssocs=EntityUtil.filterByDate(productAssocs,true);
    if (checkViewAllow && prodCatalogId != null && productAssocs != null && productAssocs.size() > 0) {
      String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,prodCatalogId);
      if (viewProductCategoryId != null) {
        if (productIdTo == null) {
          productAssocs=CategoryWorker.filterProductsInCategory(delegator,productAssocs,viewProductCategoryId,"productIdTo");
        }
 else {
          productAssocs=CategoryWorker.filterProductsInCategory(delegator,productAssocs,viewProductCategoryId,"productId");
        }
      }
    }
    result.put("assocProducts",productAssocs);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  }
 catch (  GenericEntityException e) {
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"productservices.problems_product_association_relation_error",messageMap,locale);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
    return result;
  }
  return result;
}
