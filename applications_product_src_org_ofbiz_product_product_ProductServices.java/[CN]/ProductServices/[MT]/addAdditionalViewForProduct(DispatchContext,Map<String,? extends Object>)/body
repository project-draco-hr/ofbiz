{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  String productId=(String)context.get("productId");
  String productContentTypeId=(String)context.get("productContentTypeId");
  ByteBuffer imageData=(ByteBuffer)context.get("uploadedFile");
  Locale locale=(Locale)context.get("locale");
  if (UtilValidate.isNotEmpty(context.get("_uploadedFile_fileName"))) {
    String imageFilenameFormat=UtilProperties.getPropertyValue("catalog","image.filename.additionalviewsize.format");
    String imageServerPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.server.path"),context);
    String imageUrlPrefix=UtilProperties.getPropertyValue("catalog","image.url.prefix");
    FlexibleStringExpander filenameExpander=FlexibleStringExpander.getInstance(imageFilenameFormat);
    String viewNumber=String.valueOf(productContentTypeId.charAt(productContentTypeId.length() - 1));
    String viewType="additional" + viewNumber;
    String id=productId;
    if (imageFilenameFormat.endsWith("${id}")) {
      id=productId + "_View_" + viewNumber;
      viewType="additional";
    }
    String fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"viewtype",viewType,"sizetype","original"));
    String filePathPrefix="";
    String filenameToUse=fileLocation;
    if (fileLocation.lastIndexOf("/") != -1) {
      filePathPrefix=fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);
      filenameToUse=fileLocation.substring(fileLocation.lastIndexOf("/") + 1);
    }
    List<GenericValue> fileExtension=FastList.newInstance();
    try {
      fileExtension=delegator.findByAnd("FileExtension",UtilMisc.toMap("mimeTypeId",(String)context.get("_uploadedFile_contentType")));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    GenericValue extension=EntityUtil.getFirst(fileExtension);
    if (extension != null) {
      filenameToUse+="." + extension.getString("fileExtensionId");
    }
    String targetDirectory=imageServerPath + "/" + filePathPrefix;
    try {
      File targetDir=new File(targetDirectory);
      if (!targetDir.exists()) {
        boolean created=targetDir.mkdirs();
        if (!created) {
          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_create_target_directory",locale) + " - " + targetDirectory;
          Debug.logFatal(errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
      }
 else       if (!filenameToUse.contains(productId)) {
        try {
          File[] files=targetDir.listFiles();
          for (          File file : files) {
            if (file.isFile())             file.delete();
          }
        }
 catch (        SecurityException e) {
          Debug.logError(e,module);
        }
      }
 else {
        try {
          File[] files=targetDir.listFiles();
          for (          File file : files) {
            if (file.isFile() && file.getName().startsWith(productId + "_View_" + viewNumber))             file.delete();
          }
        }
 catch (        SecurityException e) {
          Debug.logError(e,module);
        }
      }
    }
 catch (    NullPointerException e) {
      Debug.logError(e,module);
    }
    try {
      File file=new File(imageServerPath + "/" + fileLocation+ "."+ extension.getString("fileExtensionId"));
      try {
        RandomAccessFile out=new RandomAccessFile(file,"rw");
        out.write(imageData.array());
        out.close();
      }
 catch (      FileNotFoundException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductImageViewUnableWriteFile",UtilMisc.toMap("fileName",file.getAbsolutePath()),locale));
      }
catch (      IOException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductImageViewUnableWriteBinaryData",UtilMisc.toMap("fileName",file.getAbsolutePath()),locale));
      }
    }
 catch (    NullPointerException e) {
      Debug.logError(e,module);
    }
    Map<String,Object> resultResize=FastMap.newInstance();
    try {
      resultResize.putAll(ScaleImage.scaleImageInAllSize(context,filenameToUse,"additional",viewNumber));
    }
 catch (    IOException e) {
      Debug.logError(e,"Scale additional image in all different sizes is impossible : " + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductImageViewScaleImpossible",UtilMisc.toMap("errorString",e.toString()),locale));
    }
catch (    JDOMException e) {
      Debug.logError(e,"Errors occur in parsing ImageProperties.xml : " + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductImageViewParsingError",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    String imageUrl=imageUrlPrefix + "/" + fileLocation+ "."+ extension.getString("fileExtensionId");
    Map<String,Object> result=addImageResource(dispatcher,delegator,context,imageUrl,productContentTypeId);
    if (ServiceUtil.isError(result)) {
      return result;
    }
    Map<String,String> imageUrlMap=UtilGenerics.checkMap(resultResize.get("imageUrlMap"));
    for (    String sizeType : ScaleImage.sizeTypeList) {
      imageUrl=imageUrlMap.get(sizeType);
      if (UtilValidate.isNotEmpty(imageUrl)) {
        result=addImageResource(dispatcher,delegator,context,imageUrl,"XTRA_IMG_" + viewNumber + "_"+ sizeType.toUpperCase());
        if (ServiceUtil.isError(result)) {
          return result;
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
