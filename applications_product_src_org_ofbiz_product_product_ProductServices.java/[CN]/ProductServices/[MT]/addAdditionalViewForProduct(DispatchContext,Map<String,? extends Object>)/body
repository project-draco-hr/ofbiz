{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  String productId=(String)context.get("productId");
  String productContentTypeId=(String)context.get("productContentTypeId");
  ByteBuffer imageData=(ByteBuffer)context.get("uploadedFile");
  if (UtilValidate.isNotEmpty(context.get("_uploadedFile_fileName"))) {
    String imageFilenameFormat=UtilProperties.getPropertyValue("catalog","image.filename.format");
    String imageServerPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.server.path"),context);
    String imageUrlPrefix=UtilProperties.getPropertyValue("catalog","image.url.prefix");
    FlexibleStringExpander filenameExpander=FlexibleStringExpander.getInstance(imageFilenameFormat);
    String id=productId + "_View_" + productContentTypeId.charAt(productContentTypeId.length() - 1);
    String fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","type","additional","id",id));
    String filePathPrefix="";
    String filenameToUse=fileLocation;
    if (fileLocation.lastIndexOf("/") != -1) {
      filePathPrefix=fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);
      filenameToUse=fileLocation.substring(fileLocation.lastIndexOf("/") + 1);
    }
    List<GenericValue> fileExtension=FastList.newInstance();
    try {
      fileExtension=delegator.findByAnd("FileExtension",UtilMisc.toMap("mimeTypeId",(String)context.get("_uploadedFile_contentType")));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    GenericValue extension=EntityUtil.getFirst(fileExtension);
    if (extension != null) {
      filenameToUse+="." + extension.getString("fileExtensionId");
    }
    File file=new File(imageServerPath + "/" + filePathPrefix+ filenameToUse);
    try {
      RandomAccessFile out=new RandomAccessFile(file,"rw");
      out.write(imageData.array());
      out.close();
    }
 catch (    FileNotFoundException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError("Unable to open file for writing: " + file.getAbsolutePath());
    }
catch (    IOException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError("Unable to write binary data to: " + file.getAbsolutePath());
    }
    String viewNumber=String.valueOf(productContentTypeId.charAt(productContentTypeId.length() - 1));
    Map<String,Object> resultResize=FastMap.newInstance();
    try {
      resultResize.putAll(ScaleImage.scaleImageInAllSize(context,filenameToUse,"additional",viewNumber));
    }
 catch (    IOException e) {
      String errMsg="Scale additional image in all different sizes is impossible : " + e.toString();
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
catch (    JDOMException e) {
      String errMsg="Errors occur in parsing ImageProperties.xml : " + e.toString();
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
    String imageUrl=imageUrlPrefix + "/" + filePathPrefix+ filenameToUse;
    Map<String,Object> result=addImageResource(dispatcher,delegator,context,imageUrl,productContentTypeId);
    if (ServiceUtil.isError(result)) {
      return result;
    }
    Map<String,String> imageUrlMap=(Map<String,String>)resultResize.get("imageUrlMap");
    for (    String sizeType : ScaleImage.sizeTypeList) {
      imageUrl=imageUrlMap.get(sizeType);
      if (UtilValidate.isNotEmpty(imageUrl)) {
        result=addImageResource(dispatcher,delegator,context,imageUrl,"XTRA_IMG_" + viewNumber + "_"+ sizeType.toUpperCase());
        if (ServiceUtil.isError(result)) {
          return result;
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
