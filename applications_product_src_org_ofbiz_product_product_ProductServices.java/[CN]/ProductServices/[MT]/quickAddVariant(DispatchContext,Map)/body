{
  GenericDelegator delegator=dctx.getDelegator();
  Map result=FastMap.newInstance();
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  String productId=(String)context.get("productId");
  String variantProductId=(String)context.get("productVariantId");
  String productFeatureIds=(String)context.get("productFeatureIds");
  Long prodAssocSeqNum=(Long)context.get("sequenceNum");
  try {
    GenericValue product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
    if (product == null) {
      Map messageMap=UtilMisc.toMap("productId",productId);
      errMsg=UtilProperties.getMessage(resource,"productservices.product_not_found_with_ID",messageMap,locale);
      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
      result.put(ModelService.ERROR_MESSAGE,errMsg);
      return result;
    }
    GenericValue variantProduct=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",variantProductId));
    boolean variantProductExists=(variantProduct != null);
    if (variantProduct == null) {
      variantProduct=GenericValue.create(product);
      variantProduct.set("productId",variantProductId);
      variantProduct.set("isVirtual","N");
      variantProduct.set("isVariant","Y");
      variantProduct.set("primaryProductCategoryId",null);
      variantProduct.create();
    }
 else {
      variantProduct.set("isVirtual","N");
      variantProduct.set("isVariant","Y");
      variantProduct.set("primaryProductCategoryId",null);
      variantProduct.store();
    }
    if (variantProductExists) {
      delegator.removeByAnd("ProductAssoc",UtilMisc.toMap("productIdTo",variantProductId,"productAssocTypeId","PRODUCT_VARIANT"));
      delegator.removeByAnd("ProductFeatureAppl",UtilMisc.toMap("productId",variantProductId,"productFeatureApplTypeId","STANDARD_FEATURE"));
    }
    Map productAssocMap=UtilMisc.toMap("productId",productId,"productIdTo",variantProductId,"productAssocTypeId","PRODUCT_VARIANT","fromDate",UtilDateTime.nowTimestamp());
    if (prodAssocSeqNum != null) {
      productAssocMap.put("sequenceNum",prodAssocSeqNum);
    }
    GenericValue productAssoc=delegator.makeValue("ProductAssoc",productAssocMap);
    productAssoc.create();
    java.util.StringTokenizer st=new java.util.StringTokenizer(productFeatureIds,"|");
    while (st.hasMoreTokens()) {
      String productFeatureId=st.nextToken();
      GenericValue productFeature=delegator.findByPrimaryKey("ProductFeature",UtilMisc.toMap("productFeatureId",productFeatureId));
      GenericValue productFeatureAppl=delegator.makeValue("ProductFeatureAppl",UtilMisc.toMap("productId",variantProductId,"productFeatureId",productFeatureId,"productFeatureApplTypeId","STANDARD_FEATURE","fromDate",UtilDateTime.nowTimestamp()));
      if (productFeature != null) {
        productFeatureAppl.set("sequenceNum",productFeature.get("defaultSequenceNum"));
      }
      productFeatureAppl.create();
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Entity error creating quick add variant data",module);
    Map messageMap=UtilMisc.toMap("errMessage",e.toString());
    errMsg=UtilProperties.getMessage(resource,"productservices.entity_error_quick_add_variant_data",messageMap,locale);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
    return result;
  }
  result.put("productVariantId",variantProductId);
  return result;
}
