{
  GenericDelegator delegator=ctx.getDelegator();
  String idToFind=(String)context.get("idToFind");
  String goodIdentificationTypeId=(String)context.get("goodIdentificationTypeId");
  String searchProductFirstContext=(String)context.get("searchProductFirst");
  String searchAllIdContext=(String)context.get("searchAllId");
  boolean searchProductFirst=UtilValidate.isNotEmpty(searchProductFirstContext) && "N".equals(searchProductFirstContext) ? false : true;
  boolean searchAllId=UtilValidate.isNotEmpty(searchAllIdContext) && "Y".equals(searchAllIdContext) ? true : false;
  GenericValue product=null;
  List<GenericValue> productsFound=null;
  try {
    productsFound=ProductWorker.findProductsById(delegator,idToFind,goodIdentificationTypeId,searchProductFirst,searchAllId);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    ServiceUtil.returnError(e.getMessage());
  }
  if (UtilValidate.isNotEmpty(productsFound)) {
    List<GenericValue> productsList=FastList.newInstance();
    product=EntityUtil.getFirst(productsFound);
    productsFound.remove(0);
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("product",product);
  result.put("productsList",productsFound);
  return result;
}
