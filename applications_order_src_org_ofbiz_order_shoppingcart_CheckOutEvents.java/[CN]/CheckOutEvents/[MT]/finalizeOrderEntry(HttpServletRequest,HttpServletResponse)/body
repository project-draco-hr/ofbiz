{
  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Map paramMap=UtilHttp.getParameterMap(request);
  Boolean offlinePayments;
  String shippingContactMechId=null;
  String shippingMethod=null;
  String shippingInstructions=null;
  String maySplit=null;
  String giftMessage=null;
  String isGift=null;
  String internalCode=null;
  String methodType=null;
  String singleUsePayment=null;
  String appendPayment=null;
  String shipBeforeDate=null;
  String shipAfterDate=null;
  String mode=request.getParameter("finalizeMode");
  Debug.logInfo("FinalizeMode: " + mode,module);
  if (mode == null) {
    return "customer";
  }
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  if (userLogin == null) {
    request.getSession().removeAttribute("autoUserLogin");
    request.getSession().removeAttribute("autoName");
    try {
      cart.setAutoUserLogin(null,dispatcher);
    }
 catch (    CartItemModifyException e) {
      Debug.logError(e,module);
    }
  }
  if (mode != null && mode.equals("default")) {
    cart.setDefaultCheckoutOptions(dispatcher);
  }
  if (mode != null && mode.equals("removeEmptyShipGroups")) {
    cart.cleanUpShipGroups();
  }
  if (mode != null && mode.equals("cust")) {
    String partyId=(String)request.getAttribute("partyId");
    if (partyId != null) {
      cart.setOrderPartyId(partyId);
      if (userLogin == null) {
        try {
          userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","anonymous"));
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
        if (userLogin != null) {
          userLogin.set("partyId",partyId);
        }
        request.getSession().setAttribute("userLogin",userLogin);
        try {
          cart.setUserLogin(userLogin,dispatcher);
        }
 catch (        CartItemModifyException e) {
          Debug.logError(e,module);
        }
        Debug.logInfo("Anonymous user-login has been activated",module);
      }
    }
  }
  if (mode != null && mode.equals("addpty")) {
    cart.setAttribute("addpty","Y");
  }
  if (mode != null && mode.equals("term")) {
    cart.setOrderTermSet(true);
  }
  CheckOutHelper checkOutHelper=new CheckOutHelper(dispatcher,delegator,cart);
  if (mode != null && (mode.equals("ship") || mode.equals("options"))) {
    String internalNote=request.getParameter("internalNote");
    String publicNote=request.getParameter("note");
    String correspondingPoId=request.getParameter("corresponding_po_id");
    if (UtilValidate.isNotEmpty(internalNote)) {
      cart.getInternalOrderNotes().clear();
      cart.addInternalOrderNote(internalNote);
    }
    if (UtilValidate.isNotEmpty(publicNote)) {
      cart.getOrderNotes().clear();
      cart.addOrderNote(publicNote);
    }
    if (UtilValidate.isNotEmpty(correspondingPoId)) {
      cart.setPoNumber(correspondingPoId);
    }
 else {
      cart.setPoNumber(null);
    }
    Map callResult=ServiceUtil.returnSuccess();
    List errorMessages=new ArrayList();
    Map errorMaps=new HashMap();
    for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {
      if (mode != null && mode.equals("ship")) {
        shippingContactMechId=request.getParameter(shipGroupIndex + "_shipping_contact_mech_id");
        if (shippingContactMechId == null) {
          shippingContactMechId=(String)request.getAttribute("contactMechId");
        }
        String supplierPartyId=request.getParameter(shipGroupIndex + "_supplierPartyId");
        callResult=checkOutHelper.finalizeOrderEntryShip(shipGroupIndex,shippingContactMechId,supplierPartyId);
        ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
      }
      if (mode != null && mode.equals("options")) {
        shippingMethod=request.getParameter(shipGroupIndex + "_shipping_method");
        if (UtilValidate.isEmpty(shippingMethod)) {
          shippingMethod=request.getParameter("shipping_method");
        }
        shippingInstructions=request.getParameter(shipGroupIndex + "_shipping_instructions");
        if (UtilValidate.isEmpty(shippingInstructions))         shippingInstructions=request.getParameter("shipping_instructions");
        maySplit=request.getParameter(shipGroupIndex + "_may_split");
        if (UtilValidate.isEmpty(maySplit))         maySplit=request.getParameter("may_split");
        giftMessage=request.getParameter(shipGroupIndex + "_gift_message");
        isGift=request.getParameter(shipGroupIndex + "_is_gift");
        internalCode=request.getParameter("internalCode");
        shipBeforeDate=request.getParameter(shipGroupIndex + "_shipBeforeDate");
        shipAfterDate=request.getParameter(shipGroupIndex + "_shipAfterDate");
        callResult=checkOutHelper.finalizeOrderEntryOptions(shipGroupIndex,shippingMethod,shippingInstructions,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate);
        ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
      }
    }
    callResult=ServiceUtil.returnSuccess();
    if (errorMessages.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_LIST,errorMessages);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    if (errorMaps.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_MAP,errorMaps);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    ServiceUtil.getMessages(request,callResult,null);
    if (callResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR)) {
      if (mode.equals("ship"))       return "shipping";
      if (mode.equals("options"))       return "options";
      return "error";
    }
  }
  methodType=request.getParameter("paymentMethodType");
  if ("offline".equals(methodType)) {
    Debug.log("Changing mode from->to: " + mode + "->payment",module);
    mode="payment";
  }
  singleUsePayment=request.getParameter("singleUsePayment");
  appendPayment=request.getParameter("appendPayment");
  boolean isSingleUsePayment=singleUsePayment != null && "Y".equalsIgnoreCase(singleUsePayment) ? true : false;
  boolean doAppendPayment=appendPayment != null && "Y".equalsIgnoreCase(appendPayment) ? true : false;
  if (mode != null && mode.equals("payment")) {
    Map callResult=ServiceUtil.returnSuccess();
    List errorMessages=new ArrayList();
    Map errorMaps=new HashMap();
    Map selectedPaymentMethods=getSelectedPaymentMethods(request);
    if (selectedPaymentMethods == null) {
      return "error";
    }
    String newPaymentMethodId=(String)request.getAttribute("paymentMethodId");
    if (!UtilValidate.isEmpty(newPaymentMethodId)) {
      selectedPaymentMethods.put(newPaymentMethodId,null);
    }
    String billingAccountId=request.getParameter("billingAccountId");
    String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
    DecimalFormat formatter=new DecimalFormat(currencyFormat);
    Double billingAccountAmt=determineBillingAccountAmount(request,checkOutHelper,formatter);
    if ((billingAccountId != null) && !"_NA_".equals(billingAccountId) && (billingAccountAmt == null)) {
      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderInvalidAmountSetForBillingAccount",UtilMisc.toMap("billingAccountId",billingAccountId),(cart != null ? cart.getLocale() : Locale.getDefault())));
      return "error";
    }
    errorMessages.addAll(checkOutHelper.setCheckOutPaymentInternal(selectedPaymentMethods,null,billingAccountId,billingAccountAmt));
    callResult=checkOutHelper.checkGiftCard(paramMap,selectedPaymentMethods);
    ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
    if (errorMessages.size() == 0 && errorMaps.size() == 0) {
      String gcPaymentMethodId=(String)callResult.get("paymentMethodId");
      Double giftCardAmount=(Double)callResult.get("amount");
      Map gcCallRes=checkOutHelper.finalizeOrderEntryPayment(gcPaymentMethodId,giftCardAmount,true,true);
      ServiceUtil.addErrors(errorMessages,errorMaps,gcCallRes);
    }
    callResult=ServiceUtil.returnSuccess();
    if (errorMessages.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_LIST,errorMessages);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    if (errorMaps.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_MAP,errorMaps);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    ServiceUtil.getMessages(request,callResult,null);
    if (callResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR)) {
      return "paymentError";
    }
  }
  return determineNextFinalizeStep(request,response);
}
