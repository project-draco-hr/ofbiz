{
  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Map paramMap=UtilHttp.getParameterMap(request);
  Boolean offlinePayments;
  String shippingContactMechId=null;
  String shippingMethod=null;
  String shippingInstructions=null;
  String maySplit=null;
  String giftMessage=null;
  String isGift=null;
  String internalCode=null;
  String methodType=null;
  String checkOutPaymentId=null;
  String singleUsePayment=null;
  String appendPayment=null;
  String shipBeforeDate=null;
  String shipAfterDate=null;
  String mode=request.getParameter("finalizeMode");
  Debug.logInfo("FinalizeMode: " + mode,module);
  if (mode == null) {
    return "customer";
  }
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  if (userLogin == null) {
    request.getSession().removeAttribute("autoUserLogin");
    request.getSession().removeAttribute("autoName");
    try {
      cart.setAutoUserLogin(null,dispatcher);
    }
 catch (    CartItemModifyException e) {
      Debug.logError(e,module);
    }
  }
  if (mode != null && mode.equals("default")) {
    cart.setDefaultCheckoutOptions(dispatcher);
  }
  if (mode != null && mode.equals("cust")) {
    String partyId=(String)request.getAttribute("partyId");
    if (partyId != null) {
      cart.setOrderPartyId(partyId);
      if (userLogin == null) {
        try {
          userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","anonymous"));
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
        if (userLogin != null) {
          userLogin.set("partyId",partyId);
        }
        request.getSession().setAttribute("userLogin",userLogin);
        try {
          cart.setUserLogin(userLogin,dispatcher);
        }
 catch (        CartItemModifyException e) {
          Debug.logError(e,module);
        }
        Debug.logInfo("Anonymous user-login has been activated",module);
      }
    }
  }
  if (mode != null && mode.equals("addpty")) {
    cart.setAttribute("addpty","Y");
  }
  if (mode != null && mode.equals("term")) {
    cart.setOrderTermSet(true);
  }
  boolean isAnonymousCheckout=false;
  if (userLogin != null && "anonymous".equals(userLogin.getString("userLoginId"))) {
    isAnonymousCheckout=true;
  }
  CheckOutHelper checkOutHelper=new CheckOutHelper(dispatcher,delegator,cart);
  if (mode != null && (mode.equals("ship") || mode.equals("options"))) {
    Map callResult=ServiceUtil.returnSuccess();
    List errorMessages=new ArrayList();
    Map errorMaps=new HashMap();
    for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {
      if (mode != null && mode.equals("ship")) {
        shippingContactMechId=request.getParameter(shipGroupIndex + "_shipping_contact_mech_id");
        if (shippingContactMechId == null) {
          shippingContactMechId=(String)request.getAttribute("contactMechId");
        }
        callResult=checkOutHelper.finalizeOrderEntryShip(shipGroupIndex,shippingContactMechId);
        ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
      }
      if (mode != null && mode.equals("options")) {
        shippingMethod=request.getParameter(shipGroupIndex + "_shipping_method");
        shippingInstructions=request.getParameter(shipGroupIndex + "_shipping_instructions");
        maySplit=request.getParameter(shipGroupIndex + "_may_split");
        giftMessage=request.getParameter(shipGroupIndex + "_gift_message");
        isGift=request.getParameter(shipGroupIndex + "_is_gift");
        internalCode=request.getParameter("internalCode");
        shipBeforeDate=request.getParameter(shipGroupIndex + "_shipBeforeDate");
        shipAfterDate=request.getParameter(shipGroupIndex + "_shipAfterDate");
        callResult=checkOutHelper.finalizeOrderEntryOptions(shipGroupIndex,shippingMethod,shippingInstructions,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate);
        ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
      }
    }
    callResult=ServiceUtil.returnSuccess();
    if (errorMessages.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_LIST,errorMessages);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    if (errorMaps.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_MAP,errorMaps);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    ServiceUtil.getMessages(request,callResult,null);
    if (callResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR)) {
      return "error";
    }
  }
  checkOutPaymentId=request.getParameter("checkOutPaymentId");
  if (checkOutPaymentId == null) {
    checkOutPaymentId=(String)request.getAttribute("paymentMethodId");
  }
  methodType=request.getParameter("paymentMethodType");
  if ("offline".equals(methodType)) {
    Debug.log("Changing mode from->to: " + mode + "->payment",module);
    checkOutPaymentId="EXT_OFFLINE";
    mode="payment";
  }
  singleUsePayment=request.getParameter("singleUsePayment");
  appendPayment=request.getParameter("appendPayment");
  boolean isSingleUsePayment=singleUsePayment != null && "Y".equalsIgnoreCase(singleUsePayment) ? true : false;
  boolean doAppendPayment=appendPayment != null && "Y".equalsIgnoreCase(appendPayment) ? true : false;
  if (mode != null && mode.equals("payment")) {
    Map callResult=ServiceUtil.returnSuccess();
    List errorMessages=new ArrayList();
    Map errorMaps=new HashMap();
    Map selectedPaymentMethods=getSelectedPaymentMethods(request);
    if (selectedPaymentMethods == null) {
      return "error";
    }
    String billingAccountId=request.getParameter("billingAccountId");
    String billingAcctAmtStr=request.getParameter("amount_" + billingAccountId);
    Double billingAccountAmt=null;
    if (billingAcctAmtStr != null) {
      Locale locale=UtilHttp.getLocale(request);
      String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
      DecimalFormat formatter=new DecimalFormat(currencyFormat);
      try {
        billingAccountAmt=new Double(formatter.parse(billingAcctAmtStr).doubleValue());
      }
 catch (      ParseException e) {
        Debug.logError(e,module);
        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderInvalidAmountSetForBillingAccount",UtilMisc.toMap("billingAccountId",billingAccountId),locale));
        return "error";
      }
    }
    checkOutHelper.setCheckOutPayment(selectedPaymentMethods,null,billingAccountId,billingAccountAmt);
    Map selPaymentMethods=null;
    if (checkOutPaymentId != null) {
      callResult=checkOutHelper.finalizeOrderEntryPayment(checkOutPaymentId,null,isSingleUsePayment,doAppendPayment);
      ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
      selPaymentMethods=UtilMisc.toMap(checkOutPaymentId,null);
    }
    callResult=checkOutHelper.checkGiftCard(paramMap,selPaymentMethods);
    ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
    if (errorMessages.size() == 0 && errorMaps.size() == 0) {
      String gcPaymentMethodId=(String)callResult.get("paymentMethodId");
      Double giftCardAmount=(Double)callResult.get("amount");
      Map gcCallRes=checkOutHelper.finalizeOrderEntryPayment(gcPaymentMethodId,giftCardAmount,true,true);
      ServiceUtil.addErrors(errorMessages,errorMaps,gcCallRes);
    }
    callResult=ServiceUtil.returnSuccess();
    if (errorMessages.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_LIST,errorMessages);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    if (errorMaps.size() > 0) {
      callResult.put(ModelService.ERROR_MESSAGE_MAP,errorMaps);
      callResult.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    }
    ServiceUtil.getMessages(request,callResult,null);
    if (callResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR)) {
      return "error";
    }
  }
  boolean requireCustomer=true;
  boolean requireShipping=true;
  boolean requireOptions=true;
  boolean requirePayment=!cart.getOrderType().equals("PURCHASE_ORDER");
  boolean requireTerm=cart.getOrderType().equals("PURCHASE_ORDER");
  boolean requireAdditionalParty=isAnonymousCheckout;
  if (userLogin != null && !"anonymous".equals(userLogin.getString("userLoginId"))) {
    String requireCustomerStr=request.getParameter("finalizeReqCustInfo");
    String requireShippingStr=request.getParameter("finalizeReqShipInfo");
    String requireOptionsStr=request.getParameter("finalizeReqOptions");
    String requirePaymentStr=request.getParameter("finalizeReqPayInfo");
    String requireTermStr=request.getParameter("finalizeReqTermInfo");
    String requireAdditionalPartyStr=request.getParameter("finalizeReqAdditionalParty");
    requireCustomer=requireCustomerStr == null || requireCustomerStr.equalsIgnoreCase("true");
    requireShipping=requireShippingStr == null || requireShippingStr.equalsIgnoreCase("true");
    requireOptions=requireOptionsStr == null || requireOptionsStr.equalsIgnoreCase("true");
    if (requirePayment) {
      requirePayment=requirePaymentStr == null || requirePaymentStr.equalsIgnoreCase("true");
    }
    if (requireTerm) {
      requireTerm=requireTermStr == null || requireTermStr.equalsIgnoreCase("true");
    }
    requireAdditionalParty=requireAdditionalPartyStr == null || requireAdditionalPartyStr.equalsIgnoreCase("true");
  }
  boolean shippingAddressSet=true;
  boolean shippingOptionsSet=true;
  for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {
    String shipContactMechId=cart.getShippingContactMechId(shipGroupIndex);
    if (shipContactMechId == null) {
      shippingAddressSet=false;
    }
    String shipmentMethodTypeId=cart.getShipmentMethodTypeId(shipGroupIndex);
    if (shipmentMethodTypeId == null) {
      shippingOptionsSet=false;
    }
  }
  String customerPartyId=cart.getPartyId();
  List paymentMethodIds=cart.getPaymentMethodIds();
  List paymentMethodTypeIds=cart.getPaymentMethodTypeIds();
  if (requireCustomer && (customerPartyId == null || customerPartyId.equals("_NA_"))) {
    return "customer";
  }
  if (requireShipping && !shippingAddressSet) {
    return "shipping";
  }
  if (requireOptions && !shippingOptionsSet) {
    return "options";
  }
  if (requireTerm && !cart.isOrderTermSet()) {
    return "term";
  }
  if (requirePayment && (paymentMethodIds == null || paymentMethodIds.size() == 0) && (paymentMethodTypeIds == null || paymentMethodTypeIds.size() == 0)) {
    return "payment";
  }
  if (requireAdditionalParty && cart.getAttribute("addpty") == null) {
    return "addparty";
  }
  if (isSingleUsePayment) {
    return "paysplit";
  }
  String checkoutGoTo=request.getParameter("checkoutGoTo");
  if (UtilValidate.isNotEmpty(checkoutGoTo)) {
    return checkoutGoTo;
  }
  if ("SALES_ORDER".equals(cart.getOrderType())) {
    return "sales";
  }
 else {
    return "po";
  }
}
