{
  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
  DecimalFormat formatter=new DecimalFormat(currencyFormat);
  Map selectedPaymentMethods=getSelectedPaymentMethods(request);
  if (selectedPaymentMethods == null) {
    return "error";
  }
  String shippingMethod=request.getParameter("shipping_method");
  String shippingContactMechId=request.getParameter("shipping_contact_mech_id");
  String taxAuthPartyGeoIds=request.getParameter("taxAuthPartyGeoIds");
  String partyTaxId=request.getParameter("partyTaxId");
  String isExempt=request.getParameter("isExempt");
  String correspondingPoId=request.getParameter("corresponding_po_id");
  String shippingInstructions=request.getParameter("shipping_instructions");
  String orderAdditionalEmails=request.getParameter("order_additional_emails");
  String maySplit=request.getParameter("may_split");
  String giftMessage=request.getParameter("gift_message");
  String isGift=request.getParameter("is_gift");
  String internalCode=request.getParameter("internalCode");
  String shipBeforeDate=request.getParameter("shipBeforeDate");
  String shipAfterDate=request.getParameter("shipAfterDate");
  List singleUsePayments=new ArrayList();
  Map params=UtilHttp.getParameterMap(request);
  CheckOutHelper checkOutHelper=new CheckOutHelper(dispatcher,delegator,cart);
  if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
    try {
      Map createCustomerTaxAuthInfoResult=dispatcher.runSync("createCustomerTaxAuthInfo",UtilMisc.toMap("partyId",cart.getPartyId(),"taxAuthPartyGeoIds",taxAuthPartyGeoIds,"partyTaxId",partyTaxId,"isExempt",isExempt));
      ServiceUtil.getMessages(request,createCustomerTaxAuthInfoResult,null);
      if (ServiceUtil.isError(createCustomerTaxAuthInfoResult)) {
        return "error";
      }
    }
 catch (    GenericServiceException e) {
      String errMsg="Error setting customer tax info: " + e.toString();
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
  String billingAccountId=request.getParameter("billingAccountId");
  Double billingAccountAmt=determineBillingAccountAmount(request,checkOutHelper,formatter);
  if ((billingAccountId != null) && !"_NA_".equals(billingAccountId) && (billingAccountAmt == null)) {
    Map messageMap=UtilMisc.toMap("billingAccountId",billingAccountId);
    String errMsg=UtilProperties.getMessage(resource,"checkevents.invalid_amount_set_for_billing_account",messageMap,(cart != null ? cart.getLocale() : Locale.getDefault()));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  Map gcResult=checkOutHelper.checkGiftCard(params,selectedPaymentMethods);
  ServiceUtil.getMessages(request,gcResult,null);
  if (ServiceUtil.isError(gcResult)) {
    return "error";
  }
  String gcPaymentMethodId=(String)gcResult.get("paymentMethodId");
  Double gcAmount=(Double)gcResult.get("amount");
  if (gcPaymentMethodId != null) {
    selectedPaymentMethods.put(gcPaymentMethodId,gcAmount);
    if ("Y".equalsIgnoreCase(request.getParameter("singleUseGiftCard"))) {
      singleUsePayments.add(gcPaymentMethodId);
    }
  }
  Map optResult=checkOutHelper.setCheckOutOptions(shippingMethod,shippingContactMechId,selectedPaymentMethods,singleUsePayments,billingAccountId,billingAccountAmt,correspondingPoId,shippingInstructions,orderAdditionalEmails,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate);
  ServiceUtil.getMessages(request,optResult,null);
  if (ServiceUtil.isError(optResult)) {
    return "error";
  }
  return "success";
}
