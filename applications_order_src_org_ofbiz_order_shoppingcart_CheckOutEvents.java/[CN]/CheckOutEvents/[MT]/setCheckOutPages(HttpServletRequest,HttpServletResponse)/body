{
  if ("error".equals(CheckOutEvents.cartNotEmpty(request,response)) == true) {
    return "error";
  }
  HttpSession session=request.getSession();
  String curPage=request.getParameter("checkoutpage");
  Debug.logInfo("CheckoutPage: " + curPage,module);
  ShoppingCart cart=(ShoppingCart)session.getAttribute("shoppingCart");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  GenericValue userLogin=cart.getUserLogin();
  if (userLogin == null)   userLogin=(GenericValue)session.getAttribute("userLogin");
  if (curPage == null) {
    try {
      cart.createDropShipGroups(dispatcher);
    }
 catch (    CartItemModifyException e) {
      Debug.logError(e,module);
    }
  }
 else   if ("shippingoptions".equals(curPage) == true) {
    cart.cleanUpShipGroups();
  }
  CheckOutHelper checkOutHelper=new CheckOutHelper(dispatcher,delegator,cart);
  if ("shippingaddress".equals(curPage) == true) {
    String shippingContactMechId=request.getParameter("shipping_contact_mech_id");
    String taxAuthPartyGeoIds=request.getParameter("taxAuthPartyGeoIds");
    String partyTaxId=request.getParameter("partyTaxId");
    String isExempt=request.getParameter("isExempt");
    List<String> errorMessages=new ArrayList<String>();
    Map<String,Object> errorMaps=new HashMap<String,Object>();
    for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {
      if (shippingContactMechId == null) {
        shippingContactMechId=(String)request.getAttribute("contactMechId");
      }
      String supplierPartyId=(String)request.getAttribute(shipGroupIndex + "_supplierPartyId");
      Map<String,? extends Object> callResult=checkOutHelper.finalizeOrderEntryShip(shipGroupIndex,shippingContactMechId,supplierPartyId);
      ServiceUtil.addErrors(errorMessages,errorMaps,callResult);
    }
    if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
      try {
        Map<String,? extends Object> createCustomerTaxAuthInfoResult=dispatcher.runSync("createCustomerTaxAuthInfo",UtilMisc.<String,Object>toMap("partyId",cart.getPartyId(),"taxAuthPartyGeoIds",taxAuthPartyGeoIds,"partyTaxId",partyTaxId,"isExempt",isExempt,"userLogin",userLogin));
        ServiceUtil.getMessages(request,createCustomerTaxAuthInfoResult,null);
        if (ServiceUtil.isError(createCustomerTaxAuthInfoResult)) {
          return "error";
        }
      }
 catch (      GenericServiceException e) {
        String errMsg="Error setting customer tax info: " + e.toString();
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
        return "error";
      }
    }
    Map<String,? extends Object> callResult=checkOutHelper.setCheckOutShippingAddress(shippingContactMechId);
    ServiceUtil.getMessages(request,callResult,null);
    if (!(ServiceUtil.isError(callResult))) {
      curPage="shippingoptions";
    }
  }
 else   if ("shippingoptions".equals(curPage) == true) {
    String shippingMethod=request.getParameter("shipping_method");
    String shippingInstructions=request.getParameter("shipping_instructions");
    String orderAdditionalEmails=request.getParameter("order_additional_emails");
    String maySplit=request.getParameter("may_split");
    String giftMessage=request.getParameter("gift_message");
    String isGift=request.getParameter("is_gift");
    String internalCode=request.getParameter("internalCode");
    String shipBeforeDate=request.getParameter("shipBeforeDate");
    String shipAfterDate=request.getParameter("shipAfterDate");
    Map<String,? extends Object> callResult=ServiceUtil.returnSuccess();
    for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {
      callResult=checkOutHelper.finalizeOrderEntryOptions(shipGroupIndex,shippingMethod,shippingInstructions,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate,orderAdditionalEmails);
      ServiceUtil.getMessages(request,callResult,null);
    }
    if (!(callResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))) {
      curPage="payment";
    }
  }
 else   if ("payment".equals(curPage) == true) {
    Map<String,Map<String,Object>> selectedPaymentMethods=getSelectedPaymentMethods(request);
    String billingAccountId=request.getParameter("billingAccountId");
    if (UtilValidate.isNotEmpty(billingAccountId)) {
      BigDecimal billingAccountAmt=null;
      billingAccountAmt=determineBillingAccountAmount(billingAccountId,request.getParameter("billingAccountAmount"),dispatcher);
      if ((billingAccountId != null) && !"_NA_".equals(billingAccountId) && (billingAccountAmt == null)) {
        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderInvalidAmountSetForBillingAccount",UtilMisc.toMap("billingAccountId",billingAccountId),cart.getLocale()));
        return "error";
      }
      selectedPaymentMethods.put("EXT_BILLACT",UtilMisc.<String,Object>toMap("amount",billingAccountAmt,"securityCode",null));
    }
    if (UtilValidate.isEmpty(selectedPaymentMethods)) {
      return "error";
    }
    List<String> singleUsePayments=new ArrayList<String>();
    Map<String,Object> params=UtilHttp.getParameterMap(request);
    Map<String,Object> gcResult=checkOutHelper.checkGiftCard(params,selectedPaymentMethods);
    ServiceUtil.getMessages(request,gcResult,null);
    if (gcResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR)) {
      return "error";
    }
 else {
      String gcPaymentMethodId=(String)gcResult.get("paymentMethodId");
      BigDecimal gcAmount=(BigDecimal)gcResult.get("amount");
      if (gcPaymentMethodId != null) {
        selectedPaymentMethods.put(gcPaymentMethodId,UtilMisc.<String,Object>toMap("amount",gcAmount,"securityCode",null));
        if ("Y".equalsIgnoreCase(request.getParameter("singleUseGiftCard"))) {
          singleUsePayments.add(gcPaymentMethodId);
        }
      }
    }
    Map<String,Object> callResult=checkOutHelper.setCheckOutPayment(selectedPaymentMethods,singleUsePayments,billingAccountId);
    ServiceUtil.getMessages(request,callResult,null);
    if (!(callResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))) {
      curPage="confirm";
    }
  }
 else {
    curPage=determineInitialCheckOutPage(cart);
  }
  return curPage;
}
