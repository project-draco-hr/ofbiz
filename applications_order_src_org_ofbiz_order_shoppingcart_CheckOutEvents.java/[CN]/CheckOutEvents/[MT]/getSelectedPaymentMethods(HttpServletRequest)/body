{
  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");
  String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
  DecimalFormat formatter=new DecimalFormat(currencyFormat);
  Map selectedPaymentMethods=new HashMap();
  String[] paymentMethods=request.getParameterValues("checkOutPaymentId");
  String errMsg=null;
  if (paymentMethods != null) {
    for (int i=0; i < paymentMethods.length; i++) {
      Map paymentMethodInfo=FastMap.newInstance();
      String securityCode=request.getParameter("securityCode_" + paymentMethods[i]);
      if (UtilValidate.isNotEmpty(securityCode)) {
        paymentMethodInfo.put("securityCode",securityCode);
      }
      String amountStr=request.getParameter("amount_" + paymentMethods[i]);
      Double amount=null;
      if (amountStr != null && amountStr.length() > 0 && !"REMAINING".equals(amountStr)) {
        try {
          amount=new Double(formatter.parse(amountStr).doubleValue());
        }
 catch (        ParseException e) {
          Debug.logError(e,module);
          errMsg=UtilProperties.getMessage(resource,"checkevents.invalid_amount_set_for_payment_method",(cart != null ? cart.getLocale() : Locale.getDefault()));
          request.setAttribute("_ERROR_MESSAGE_",errMsg);
          return null;
        }
      }
      paymentMethodInfo.put("amount",amount);
      selectedPaymentMethods.put(paymentMethods[i],paymentMethodInfo);
    }
  }
  Debug.logInfo("Selected Payment Methods : " + selectedPaymentMethods,module);
  return selectedPaymentMethods;
}
