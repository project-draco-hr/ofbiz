{
  ModelFormField modelFormField=dropDownField.getModelFormField();
  ModelForm modelForm=modelFormField.getModelForm();
  String currentValue=modelFormField.getEntry(context);
  List allOptionValues=dropDownField.getAllOptionValues(context,modelForm.getDelegator(context));
  if (UtilValidate.isNotEmpty(currentValue) && "first-in-list".equals(dropDownField.getCurrent())) {
    String explicitDescription=dropDownField.getCurrentDescription(context);
    if (UtilValidate.isNotEmpty(explicitDescription)) {
      this.makeTextString(buffer,modelFormField.getWidgetStyle(),explicitDescription);
    }
 else {
      this.makeTextString(buffer,modelFormField.getWidgetStyle(),ModelFormField.FieldInfoWithOptions.getDescriptionForOptionKey(currentValue,allOptionValues));
    }
  }
 else {
    Iterator optionValueIter=allOptionValues.iterator();
    while (optionValueIter.hasNext()) {
      ModelFormField.OptionValue optionValue=(ModelFormField.OptionValue)optionValueIter.next();
      String noCurrentSelectedKey=dropDownField.getNoCurrentSelectedKey(context);
      if ((UtilValidate.isNotEmpty(currentValue) && currentValue.equals(optionValue.getKey()) && "selected".equals(dropDownField.getCurrent())) || (UtilValidate.isEmpty(currentValue) && noCurrentSelectedKey != null && noCurrentSelectedKey.equals(optionValue.getKey()))) {
        this.makeTextString(buffer,modelFormField.getWidgetStyle(),optionValue.getDescription());
        break;
      }
    }
  }
}
