{
  BigDecimal shipmentCostEstimate=ZERO;
  Map<String,Object> shipCostEstimateResult=null;
  try {
    Map<String,Object> shipCostEstimateMap=FastMap.newInstance();
    shipCostEstimateMap.put("shippingContactMechId",shippingContactMechId);
    shipCostEstimateMap.put("shipmentMethodTypeId",shipmentMethodTypeId);
    shipCostEstimateMap.put("carrierPartyId",carrierPartyId);
    shipCostEstimateMap.put("carrierRoleTypeId",carrierRoleTypeId);
    shipCostEstimateMap.put("productStoreId",productStoreId);
    shipCostEstimateMap.put("shippableItemInfo",shippableItemInfo);
    if (UtilValidate.isEmpty(shippableWeight) && UtilValidate.isNotEmpty(orderId)) {
      shippableWeight=this.getShippableWeight(orderId);
    }
    shipCostEstimateMap.put("shippableWeight",shippableWeight);
    shipCostEstimateMap.put("shippableQuantity",shippableQuantity);
    if (UtilValidate.isEmpty(shippableTotal)) {
      shippableTotal=BigDecimal.ZERO;
    }
    shipCostEstimateMap.put("shippableTotal",shippableTotal);
    shipCostEstimateResult=getDispatcher().runSync("calcShipmentCostEstimate",shipCostEstimateMap);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
  }
  if (UtilValidate.isNotEmpty(shipCostEstimateResult.get("shippingEstimateAmount"))) {
    shipmentCostEstimate=(BigDecimal)shipCostEstimateResult.get("shippingEstimateAmount");
  }
  return shipmentCostEstimate;
}
