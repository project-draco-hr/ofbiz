{
  String entityName=this.entityNameExdr.expandString(context);
  String useCacheStr=this.useCacheStrExdr.expandString(context);
  String filterByDateStr=this.filterByDateStrExdr.expandString(context);
  String distinctStr=this.distinctStrExdr.expandString(context);
  String delegatorName=this.delegatorNameExdr.expandString(context);
  ModelEntity modelEntity=delegator.getModelEntity(entityName);
  String resultSetTypeString=this.resultSetTypeExdr.expandString(context);
  if (modelEntity == null) {
    throw new IllegalArgumentException("In find entity by " + label + " could not find definition for entity with name ["+ entityName+ "].");
  }
  boolean useCache="true".equals(useCacheStr);
  boolean filterByDate="true".equals(filterByDateStr);
  boolean distinct="true".equals(distinctStr);
  int resultSetType=ResultSet.TYPE_SCROLL_INSENSITIVE;
  if ("forward".equals(resultSetTypeString))   resultSetType=ResultSet.TYPE_FORWARD_ONLY;
  if (delegatorName != null && delegatorName.length() > 0) {
    delegator=GenericDelegator.getGenericDelegator(delegatorName);
  }
  EntityCondition whereEntityCondition=getWhereEntityCondition(context,modelEntity,delegator);
  EntityCondition havingEntityCondition=getHavingEntityCondition(context,modelEntity,delegator);
  if (useCache) {
    if (outputHandler instanceof UseIterator) {
      Debug.logWarning("In find entity by " + label + " cannot have use-cache set to true "+ label+ " select use-iterator for the output type. Using cache and ignoring use-iterator setting.",module);
      outputHandler=new GetAll();
    }
    if (distinct) {
      throw new IllegalArgumentException("In find entity by " + label + " cannot have use-cache set to true "+ label+ " set distinct to true.");
    }
    if (havingEntityCondition != null) {
      throw new IllegalArgumentException("In find entity by " + label + " cannot have use-cache set to true and specify a having-condition-list (can only use a where condition with condition-expr or condition-list).");
    }
  }
  Set<String> fieldsToSelect=EntityFinderUtil.makeFieldsToSelect(selectFieldExpanderList,context);
  if (fieldsToSelect != null && useCache) {
    throw new IllegalArgumentException("Error in entity query by " + label + " definition, cannot specify select-field elements when use-cache is set to true");
  }
  List<String> orderByFields=EntityFinderUtil.makeOrderByFieldList(this.orderByExpanderList,context);
  try {
    if (filterByDate) {
      EntityCondition filterByDateCondition=EntityUtil.getFilterByDateExpr();
      if (whereEntityCondition != null) {
        whereEntityCondition=EntityCondition.makeCondition(UtilMisc.toList(whereEntityCondition,filterByDateCondition));
      }
 else {
        whereEntityCondition=filterByDateCondition;
      }
    }
    if (useCache) {
      List<GenericValue> results=delegator.findList(entityName,whereEntityCondition,fieldsToSelect,orderByFields,null,true);
      this.outputHandler.handleOutput(results,context,listAcsr);
    }
 else {
      boolean useTransaction=true;
      if (this.outputHandler instanceof UseIterator && !TransactionUtil.isTransactionInPlace()) {
        Exception newE=new Exception("Stack Trace");
        Debug.logError(newE,"ERROR: Cannot do a by " + label + " find that returns an EntityListIterator with no transaction in place. Wrap this call in a transaction.",module);
        useTransaction=false;
      }
      EntityFindOptions options=new EntityFindOptions();
      options.setDistinct(distinct);
      options.setResultSetType(resultSetType);
      boolean beganTransaction=false;
      try {
        if (useTransaction) {
          beganTransaction=TransactionUtil.begin();
        }
        EntityListIterator eli=delegator.find(entityName,whereEntityCondition,havingEntityCondition,fieldsToSelect,orderByFields,options);
        this.outputHandler.handleOutput(eli,context,listAcsr);
      }
 catch (      GenericEntityException e) {
        String errMsg="Failure in by " + label + " find operation, rolling back transaction";
        Debug.logError(e,errMsg,module);
        try {
          TransactionUtil.rollback(beganTransaction,errMsg,e);
        }
 catch (        GenericEntityException e2) {
          Debug.logError(e2,"Could not rollback transaction: " + e2.toString(),module);
        }
        throw e;
      }
 finally {
        TransactionUtil.commit(beganTransaction);
      }
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Error doing find by " + label + ": "+ e.toString();
    Debug.logError(e,module);
    throw new GeneralException(errMsg,e);
  }
}
