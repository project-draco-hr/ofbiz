{
  Locale locale=UtilMisc.ensureLocale(context.get("locale"));
  GenericValue value=null;
  String fieldKey=this.keyFieldName;
  if (UtilValidate.isEmpty(fieldKey))   fieldKey=getModelFormField().fieldName;
  Delegator delegator=WidgetWorker.getDelegator(context);
  String fieldValue=getModelFormField().getEntry(context);
  try {
    value=delegator.findOne(this.entityName,this.cache,fieldKey,fieldValue);
  }
 catch (  GenericEntityException e) {
    String errMsg="Error getting value from the database for display of field [" + getModelFormField().getName() + "] on form ["+ getModelFormField().modelForm.getName()+ "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new IllegalArgumentException(errMsg);
  }
  String retVal=null;
  if (value != null) {
    MapStack<String> localContext=MapStack.create(context);
    Map<String,Object> genericEntityClone=UtilGenerics.cast(value.clone());
    localContext.push(genericEntityClone);
    retVal=this.getDescription().expandString(localContext,locale);
  }
  if (UtilValidate.isEmpty(retVal)) {
    retVal=fieldValue;
  }
  if (UtilValidate.isEmpty(retVal)) {
    retVal="";
  }
 else   if (this.getModelFormField().getEncodeOutput()) {
    UtilCodec.SimpleEncoder simpleEncoder=(UtilCodec.SimpleEncoder)context.get("simpleEncoder");
    if (simpleEncoder != null) {
      retVal=simpleEncoder.encode(retVal);
    }
  }
  return retVal;
}
