{
  String serviceNameExpanded=this.serviceNameExdr.expandString(context);
  if (UtilValidate.isEmpty(serviceNameExpanded)) {
    throw new IllegalArgumentException("Service name was empty, expanded from: " + this.serviceNameExdr.getOriginal());
  }
  String autoFieldMapString=this.autoFieldMapExdr.expandString(context);
  boolean autoFieldMapBool=!"false".equals(autoFieldMapString);
  try {
    Map serviceContext=null;
    if (autoFieldMapBool) {
      serviceContext=this.modelMenu.getDispacher().getDispatchContext().makeValidContext(serviceNameExpanded,ModelService.IN_PARAM,context);
    }
 else {
      serviceContext=new HashMap();
    }
    if (this.fieldMap != null) {
      Iterator fieldMapEntryIter=this.fieldMap.entrySet().iterator();
      while (fieldMapEntryIter.hasNext()) {
        Map.Entry entry=(Map.Entry)fieldMapEntryIter.next();
        FlexibleMapAccessor serviceContextFieldAcsr=(FlexibleMapAccessor)entry.getKey();
        FlexibleMapAccessor contextEnvAcsr=(FlexibleMapAccessor)entry.getValue();
        serviceContextFieldAcsr.put(serviceContext,contextEnvAcsr.get(context));
      }
    }
    Map result=this.modelMenu.getDispacher().runSync(serviceNameExpanded,serviceContext);
    if (this.resultMapNameAcsr != null) {
      this.resultMapNameAcsr.put(context,result);
    }
 else {
      context.putAll(result);
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error calling service with name " + serviceNameExpanded + ": "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new IllegalArgumentException(errMsg);
  }
}
