{
  if (UtilValidate.isNotEmpty(ecaCache)) {
    return;
  }
  List<Future<List<ServiceEcaRule>>> futures=new LinkedList<Future<List<ServiceEcaRule>>>();
  List<ServiceEcas> serviceEcasList=null;
  try {
    serviceEcasList=ServiceConfigUtil.getServiceEngine().getServiceEcas();
  }
 catch (  GenericConfigException e) {
    Debug.logError(e,module);
    throw new RuntimeException(e.getMessage());
  }
  for (  ServiceEcas serviceEcas : serviceEcasList) {
    ResourceHandler handler=new MainResourceHandler(ServiceConfigUtil.getServiceEngineXmlFileName(),serviceEcas.getLoader(),serviceEcas.getLocation());
    futures.add(ExecutionPool.GLOBAL_FORK_JOIN.submit(createEcaLoaderCallable(handler)));
  }
  for (  ComponentConfig.ServiceResourceInfo componentResourceInfo : ComponentConfig.getAllServiceResourceInfos("eca")) {
    futures.add(ExecutionPool.GLOBAL_FORK_JOIN.submit(createEcaLoaderCallable(componentResourceInfo.createResourceHandler())));
  }
  for (  List<ServiceEcaRule> handlerRules : ExecutionPool.getAllFutures(futures)) {
    mergeEcaDefinitions(handlerRules);
  }
}
