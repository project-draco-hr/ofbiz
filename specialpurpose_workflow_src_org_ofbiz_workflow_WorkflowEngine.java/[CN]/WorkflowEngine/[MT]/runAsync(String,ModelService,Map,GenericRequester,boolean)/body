{
  Transaction parentTrans=null;
  boolean beganTransaction=false;
  try {
    try {
      parentTrans=TransactionUtil.suspend();
      beganTransaction=TransactionUtil.begin();
    }
 catch (    GenericTransactionException e) {
      Debug.logError(e,"Cannot begin nested transaction: " + e.getMessage(),module);
    }
    WfRequester req=null;
    try {
      req=WfFactory.getWfRequester();
    }
 catch (    WfException e) {
      try {
        TransactionUtil.rollback(beganTransaction,"Error getting Workflow Requester",e);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(e.getMessage(),e);
    }
    String location=this.getLocation(modelService);
    String invoke=modelService.invoke;
    String packageId=this.getSplitPosition(location,0);
    String packageVersion=this.getSplitPosition(location,1);
    String processId=this.getSplitPosition(invoke,0);
    String processVersion=this.getSplitPosition(invoke,1);
    WfProcessMgr mgr=null;
    try {
      mgr=WfFactory.getWfProcessMgr(dispatcher.getDelegator(),packageId,packageVersion,processId,processVersion);
    }
 catch (    WfException e) {
      String errMsg="Process manager error";
      Debug.logError(e,errMsg,module);
      try {
        TransactionUtil.rollback(beganTransaction,errMsg,e);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(e.getMessage(),e);
    }
catch (    Exception e) {
      Debug.logError(e,"Un-handled process manager error",module);
      throw new GenericServiceException(e.getMessage(),e);
    }
    WfProcess process=null;
    try {
      process=mgr.createProcess(req);
    }
 catch (    NotEnabled ne) {
      try {
        TransactionUtil.rollback(beganTransaction,"Error in create workflow process: Not Enabled",ne);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(ne.getMessage(),ne);
    }
catch (    InvalidRequester ir) {
      try {
        TransactionUtil.rollback(beganTransaction,"Error in create workflow process: Invalid Requester",ir);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(ir.getMessage(),ir);
    }
catch (    RequesterRequired rr) {
      try {
        TransactionUtil.rollback(beganTransaction,"Error in create workflow process: Requester Required",rr);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(rr.getMessage(),rr);
    }
catch (    WfException wfe) {
      try {
        TransactionUtil.rollback(beganTransaction,"Error in create workflow process: general workflow error error",wfe);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(wfe.getMessage(),wfe);
    }
catch (    Exception e) {
      Debug.logError(e,"Un-handled process exception",module);
      throw new GenericServiceException(e.getMessage(),e);
    }
    GenericValue userLogin=null;
    if (context.containsKey("userLogin")) {
      userLogin=(GenericValue)context.remove("userLogin");
      try {
        Map fields=UtilMisc.toMap("partyId",userLogin.getString("partyId"),"roleTypeId","WF_OWNER","workEffortId",process.runtimeKey(),"fromDate",UtilDateTime.nowTimestamp());
        try {
          GenericValue wepa=dispatcher.getDelegator().makeValue("WorkEffortPartyAssignment",fields);
          dispatcher.getDelegator().create(wepa);
        }
 catch (        GenericEntityException e) {
          String errMsg="Cannot set ownership of workflow";
          try {
            TransactionUtil.rollback(beganTransaction,errMsg,e);
          }
 catch (          GenericTransactionException gte) {
            Debug.logError(gte,"Unable to rollback nested exception.",module);
          }
          throw new GenericServiceException(errMsg,e);
        }
      }
 catch (      WfException we) {
        String errMsg="Cannot get the workflow process runtime key";
        try {
          TransactionUtil.rollback(beganTransaction,errMsg,we);
        }
 catch (        GenericTransactionException gte) {
          Debug.logError(gte,"Unable to rollback nested exception.",module);
        }
        throw new GenericServiceException(errMsg);
      }
    }
    Locale locale=(Locale)context.remove("locale");
    String startActivityId=(String)context.remove("startWithActivityId");
    try {
      req.registerProcess(process,context,requester);
      if (userLogin != null) {
        Map pContext=process.processContext();
        pContext.put("workflowOwnerId",userLogin.getString("userLoginId"));
        process.setProcessContext(pContext);
      }
    }
 catch (    WfException wfe) {
      try {
        TransactionUtil.rollback(beganTransaction,wfe.getMessage(),wfe);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(wfe.getMessage(),wfe);
    }
    if (locale != null) {
      try {
        Map pContext=process.processContext();
        pContext.put("initialLocale",locale);
        process.setProcessContext(pContext);
      }
 catch (      WfException wfe) {
        try {
          TransactionUtil.rollback(beganTransaction,wfe.getMessage(),wfe);
        }
 catch (        GenericTransactionException gte) {
          Debug.logError(gte,"Unable to rollback nested exception.",module);
        }
        throw new GenericServiceException(wfe.getMessage(),wfe);
      }
    }
    try {
      Job job=new WorkflowRunner(process,requester,startActivityId);
      if (Debug.verboseOn())       Debug.logVerbose("Created WorkflowRunner: " + job,module);
      dispatcher.getJobManager().runJob(job);
    }
 catch (    JobManagerException je) {
      try {
        TransactionUtil.rollback(beganTransaction,je.getMessage(),je);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback nested exception.",module);
      }
      throw new GenericServiceException(je.getMessage(),je);
    }
    try {
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericTransactionException e) {
      Debug.logError(e,"Cannot commit nested transaction: " + e.getMessage(),module);
    }
  }
  finally {
    if (parentTrans != null) {
      try {
        TransactionUtil.resume(parentTrans);
      }
 catch (      GenericTransactionException e) {
        throw new GenericServiceException("Could not resume transaction: " + e.toString(),e);
      }
    }
  }
}
