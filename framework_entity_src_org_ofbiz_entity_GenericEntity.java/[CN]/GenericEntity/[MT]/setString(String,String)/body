{
  if (value == null) {
    set(name,null);
    return;
  }
  boolean isNullString=false;
  if ("null".equals(value)) {
    isNullString=true;
  }
  ModelField field=getModelEntity().getField(name);
  if (field == null)   set(name,value);
  ModelFieldType type=null;
  try {
    type=getDelegator().getEntityFieldType(getModelEntity(),field.getType());
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  if (type == null)   throw new IllegalArgumentException("Type " + field.getType() + " not found");
  String fieldType=type.getJavaType();
  try {
switch (SqlJdbcUtil.getType(fieldType)) {
case 1:
      set(name,value);
    break;
case 2:
  set(name,isNullString ? null : java.sql.Timestamp.valueOf(value));
break;
case 3:
set(name,isNullString ? null : java.sql.Time.valueOf(value));
break;
case 4:
set(name,isNullString ? null : java.sql.Date.valueOf(value));
break;
case 5:
set(name,isNullString ? null : Integer.valueOf(value));
break;
case 6:
set(name,isNullString ? null : Long.valueOf(value));
break;
case 7:
set(name,isNullString ? null : Float.valueOf(value));
break;
case 8:
set(name,isNullString ? null : Double.valueOf(value));
break;
case 9:
set(name,isNullString ? null : new BigDecimal(value));
break;
case 10:
set(name,isNullString ? null : Boolean.valueOf(value));
break;
case 11:
set(name,value);
break;
case 12:
set(name,value);
break;
case 13:
set(name,value);
break;
case 14:
set(name,UtilDateTime.toDate(value));
break;
case 15:
set(name,value);
break;
}
}
 catch (GenericNotImplementedException ex) {
throw new IllegalArgumentException(ex.getMessage());
}
}
