{
  Element element=null;
  if (prefix == null)   prefix="";
  if (document != null)   element=document.createElement(prefix + this.getEntityName());
  if (element == null)   return null;
  Iterator<ModelField> modelFields=this.getModelEntity().getFieldsIterator();
  while (modelFields.hasNext()) {
    ModelField modelField=modelFields.next();
    String name=modelField.getName();
    String value=this.getString(name);
    if (value != null) {
      if (value.indexOf('\n') >= 0 || value.indexOf('\r') >= 0) {
        UtilXml.addChildElementCDATAValue(element,name,value,document);
      }
 else {
        element.setAttribute(name,value);
      }
    }
 else {
      ModelFieldType type=null;
      try {
        type=getDelegator().getEntityFieldType(getModelEntity(),modelField.getType());
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
      if (type == null)       throw new IllegalArgumentException("Type " + modelField.getType() + " not found");
      String fieldType=type.getJavaType();
      try {
switch (SqlJdbcUtil.getType(fieldType)) {
case 1:
          set(name,"");
        break;
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
      element.setAttribute(name,"null");
    break;
}
}
 catch (GenericNotImplementedException ex) {
throw new IllegalArgumentException(ex.getMessage());
}
}
}
return element;
}
