{
  Object fieldValue=null;
  try {
    fieldValue=get(name);
  }
 catch (  IllegalArgumentException e) {
    if (Debug.verboseOn()) {
      Debug.logVerbose(e,"The field name (or key) [" + name + "] is not valid for entity ["+ this.getEntityName()+ "], printing IllegalArgumentException instead of throwing it because Map interface specification does not allow throwing that exception.",module);
    }
 else {
      Debug.logWarning("The field name (or key) [" + name + "] is not valid for entity ["+ this.getEntityName()+ "], printing IllegalArgumentException instead of throwing it because Map interface specification does not allow throwing that exception.",module);
    }
    fieldValue=null;
  }
  ModelEntity modelEntityToUse=this.getModelEntity();
  if (modelEntityToUse instanceof ModelViewEntity) {
    ModelViewEntity modelViewEntity=(ModelViewEntity)modelEntityToUse;
    Iterator<ModelAlias> it=modelViewEntity.getAliasesIterator();
    while (it.hasNext()) {
      ModelAlias modelAlias=it.next();
      if (modelAlias.getName().equalsIgnoreCase(name)) {
        modelEntityToUse=modelViewEntity.getMemberModelEntity(modelAlias.getEntityAlias());
        name=modelAlias.getField();
        break;
      }
    }
  }
  if (UtilValidate.isEmpty(resource)) {
    resource=modelEntityToUse.getDefaultResourceName();
    if (UtilValidate.isEmpty(resource)) {
      return fieldValue;
    }
  }
  if (UtilProperties.isPropertiesResourceNotFound(resource,locale,false)) {
    return fieldValue;
  }
  ResourceBundle bundle=null;
  try {
    bundle=UtilProperties.getResourceBundle(resource,locale);
  }
 catch (  IllegalArgumentException e) {
    bundle=null;
  }
  if (bundle == null) {
    return fieldValue;
  }
  StringBuilder keyBuffer=new StringBuilder();
  keyBuffer.append(modelEntityToUse.getEntityName());
  keyBuffer.append('.');
  keyBuffer.append(name);
  Iterator<ModelField> iter=modelEntityToUse.getPksIterator();
  while (iter != null && iter.hasNext()) {
    ModelField curField=iter.next();
    keyBuffer.append('.');
    keyBuffer.append(this.get(curField.getName()));
  }
  String bundleKey=keyBuffer.toString();
  Object resourceValue=null;
  try {
    resourceValue=bundle.getObject(bundleKey);
  }
 catch (  MissingResourceException e) {
    return fieldValue;
  }
  if (resourceValue == null) {
    return fieldValue;
  }
 else {
    return resourceValue;
  }
}
