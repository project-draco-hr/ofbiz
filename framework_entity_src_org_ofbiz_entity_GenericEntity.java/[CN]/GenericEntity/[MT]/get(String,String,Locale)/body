{
  Object fieldValue=null;
  try {
    fieldValue=get(name);
  }
 catch (  IllegalArgumentException e) {
    if (Debug.verboseOn()) {
      Debug.logVerbose(e,"The field name (or key) [" + name + "] is not valid for entity ["+ this.getEntityName()+ "], printing IllegalArgumentException instead of throwing it because Map interface specification does not allow throwing that exception.",module);
    }
 else {
      Debug.logWarning("The field name (or key) [" + name + "] is not valid for entity ["+ this.getEntityName()+ "], printing IllegalArgumentException instead of throwing it because Map interface specification does not allow throwing that exception.",module);
    }
    fieldValue=null;
  }
  ModelEntity modelEntityToUse=this.getModelEntity();
  Object resourceValue=get(this.getModelEntity(),modelEntityToUse,name,resource,locale);
  if (resourceValue == null) {
    if (modelEntityToUse instanceof ModelViewEntity) {
      ModelViewEntity modelViewEntity=(ModelViewEntity)modelEntityToUse;
      Iterator<ModelAlias> it=modelViewEntity.getAliasesIterator();
      while (it.hasNext()) {
        ModelAlias modelAlias=it.next();
        if (modelAlias.getName().equalsIgnoreCase(name)) {
          modelEntityToUse=modelViewEntity.getMemberModelEntity(modelAlias.getEntityAlias());
          name=modelAlias.getField();
          break;
        }
      }
      resourceValue=get(this.getModelEntity(),modelEntityToUse,name,resource,locale);
      if (resourceValue == null) {
        return fieldValue;
      }
 else {
        return resourceValue;
      }
    }
 else {
      return fieldValue;
    }
  }
 else {
    return resourceValue;
  }
}
