{
  if (mapFma.isEmpty()) {
    throw new MiniLangRuntimeException("No map specified.",this);
  }
  Object oldKey=keyFma.get(methodContext.getEnvMap());
  Object oldValue=valueFma.get(methodContext.getEnvMap());
  if (oldKey != null) {
    if (Debug.verboseOn())     Debug.logVerbose("In iterate-map the key had a non-null value before entering the loop for the operation: " + this,module);
  }
  if (oldValue != null) {
    if (Debug.verboseOn())     Debug.logVerbose("In iterate-map the value had a non-null value before entering the loop for the operation: " + this,module);
  }
  Map<? extends Object,? extends Object> theMap=mapFma.get(methodContext.getEnvMap());
  if (theMap == null) {
    if (Debug.verboseOn())     Debug.logVerbose("Map not found with name " + mapFma + ", doing nothing: "+ this,module);
    return true;
  }
  if (theMap.size() == 0) {
    if (Debug.verboseOn())     Debug.logVerbose("Map with name " + mapFma + " has zero entries, doing nothing: "+ this,module);
    return true;
  }
  for (  Map.Entry<? extends Object,? extends Object> theEntry : theMap.entrySet()) {
    keyFma.put(methodContext.getEnvMap(),theEntry.getKey());
    valueFma.put(methodContext.getEnvMap(),theEntry.getValue());
    try {
      for (      MethodOperation methodOperation : subOps) {
        if (!methodOperation.exec(methodContext)) {
          return false;
        }
      }
    }
 catch (    MiniLangException e) {
      if (e instanceof BreakElementException) {
        break;
      }
      if (e instanceof ContinueElementException) {
        continue;
      }
      throw e;
    }
  }
  return true;
}
