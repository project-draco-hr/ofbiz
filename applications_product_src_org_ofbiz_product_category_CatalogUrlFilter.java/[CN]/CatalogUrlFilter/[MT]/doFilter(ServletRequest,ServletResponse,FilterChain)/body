{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  Delegator delegator=(Delegator)httpRequest.getSession().getServletContext().getAttribute("delegator");
  ServletContext servletContext=config.getServletContext();
  UrlServletHelper.setRequestAttributes(request,delegator,servletContext);
  String initDefaultLocalesString=config.getInitParameter("defaultLocaleString");
  String initRedirectUrl=config.getInitParameter("redirectUrl");
  defaultLocaleString=UtilValidate.isNotEmpty(initDefaultLocalesString) ? initDefaultLocalesString : "";
  redirectUrl=UtilValidate.isNotEmpty(initRedirectUrl) ? initRedirectUrl : "";
  String pathInfo=httpRequest.getServletPath();
  if (UtilValidate.isNotEmpty(pathInfo)) {
    List<String> pathElements=StringUtil.split(pathInfo,"/");
    String alternativeUrl=pathElements.get(0);
    String productId=null;
    String productCategoryId=null;
    String urlContentId=null;
    try {
      if (alternativeUrl.endsWith("-p")) {
        List<EntityCondition> productContentConds=FastList.newInstance();
        productContentConds.add(EntityCondition.makeCondition("productContentTypeId","ALTERNATIVE_URL"));
        productContentConds.add(EntityUtil.getFilterByDateExpr());
        List<GenericValue> productContentInfos=delegator.findList("ProductContentAndInfo",EntityCondition.makeCondition(productContentConds),null,UtilMisc.toList("-fromDate"),null,true);
        if (UtilValidate.isNotEmpty(productContentInfos)) {
          for (          GenericValue productContentInfo : productContentInfos) {
            String contentId=(String)productContentInfo.get("contentId");
            List<GenericValue> ContentAssocDataResourceViewTos=delegator.findByAndCache("ContentAssocDataResourceViewTo",UtilMisc.toMap("contentIdStart",contentId,"caContentAssocTypeId","ALTERNATE_LOCALE","drDataResourceTypeId","ELECTRONIC_TEXT"));
            if (UtilValidate.isNotEmpty(ContentAssocDataResourceViewTos)) {
              for (              GenericValue ContentAssocDataResourceViewTo : ContentAssocDataResourceViewTos) {
                GenericValue ElectronicText=ContentAssocDataResourceViewTo.getRelatedOneCache("ElectronicText");
                if (UtilValidate.isNotEmpty(ElectronicText)) {
                  String textData=(String)ElectronicText.get("textData");
                  textData=UrlServletHelper.invalidCharacter(textData);
                  if (alternativeUrl.matches(textData + ".+$")) {
                    String productIdStr=null;
                    productIdStr=alternativeUrl.replace(textData + "-","");
                    productIdStr=productIdStr.replace("-p","");
                    String checkProductId=(String)productContentInfo.get("productId");
                    if (productIdStr.equalsIgnoreCase(checkProductId)) {
                      productId=checkProductId;
                      break;
                    }
                  }
                }
              }
            }
            if (UtilValidate.isEmpty(productId)) {
              List<GenericValue> contentDataResourceViews=delegator.findByAndCache("ContentDataResourceView",UtilMisc.toMap("contentId",contentId,"drDataResourceTypeId","ELECTRONIC_TEXT"));
              for (              GenericValue contentDataResourceView : contentDataResourceViews) {
                GenericValue ElectronicText=contentDataResourceView.getRelatedOneCache("ElectronicText");
                if (UtilValidate.isNotEmpty(ElectronicText)) {
                  String textData=(String)ElectronicText.get("textData");
                  if (UtilValidate.isNotEmpty(textData)) {
                    textData=UrlServletHelper.invalidCharacter(textData);
                    if (alternativeUrl.matches(textData + ".+$")) {
                      String productIdStr=null;
                      productIdStr=alternativeUrl.replace(textData + "-","");
                      productIdStr=productIdStr.replace("-p","");
                      String checkProductId=(String)productContentInfo.get("productId");
                      if (productIdStr.equalsIgnoreCase(checkProductId)) {
                        productId=checkProductId;
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (alternativeUrl.endsWith("-c")) {
        List<EntityCondition> productCategoryContentConds=FastList.newInstance();
        productCategoryContentConds.add(EntityCondition.makeCondition("prodCatContentTypeId","ALTERNATIVE_URL"));
        productCategoryContentConds.add(EntityUtil.getFilterByDateExpr());
        List<GenericValue> productCategoryContentInfos=delegator.findList("ProductCategoryContentAndInfo",EntityCondition.makeCondition(productCategoryContentConds),null,UtilMisc.toList("-fromDate"),null,true);
        if (UtilValidate.isNotEmpty(productCategoryContentInfos)) {
          for (          GenericValue productCategoryContentInfo : productCategoryContentInfos) {
            String contentId=(String)productCategoryContentInfo.get("contentId");
            List<GenericValue> ContentAssocDataResourceViewTos=delegator.findByAndCache("ContentAssocDataResourceViewTo",UtilMisc.toMap("contentIdStart",contentId,"caContentAssocTypeId","ALTERNATE_LOCALE","drDataResourceTypeId","ELECTRONIC_TEXT"));
            if (UtilValidate.isNotEmpty(ContentAssocDataResourceViewTos)) {
              for (              GenericValue ContentAssocDataResourceViewTo : ContentAssocDataResourceViewTos) {
                GenericValue ElectronicText=ContentAssocDataResourceViewTo.getRelatedOneCache("ElectronicText");
                if (UtilValidate.isNotEmpty(ElectronicText)) {
                  String textData=(String)ElectronicText.get("textData");
                  if (UtilValidate.isNotEmpty(textData)) {
                    textData=UrlServletHelper.invalidCharacter(textData);
                    if (alternativeUrl.matches(textData + ".+$")) {
                      String productCategoryStr=null;
                      productCategoryStr=alternativeUrl.replace(textData + "-","");
                      productCategoryStr=productCategoryStr.replace("-c","");
                      String checkProductCategoryId=(String)productCategoryContentInfo.get("productCategoryId");
                      if (productCategoryStr.equalsIgnoreCase(checkProductCategoryId)) {
                        productCategoryId=checkProductCategoryId;
                        break;
                      }
                    }
                  }
                }
              }
            }
            if (UtilValidate.isEmpty(productCategoryId)) {
              List<GenericValue> contentDataResourceViews=delegator.findByAndCache("ContentDataResourceView",UtilMisc.toMap("contentId",contentId,"drDataResourceTypeId","ELECTRONIC_TEXT"));
              for (              GenericValue contentDataResourceView : contentDataResourceViews) {
                GenericValue ElectronicText=contentDataResourceView.getRelatedOneCache("ElectronicText");
                if (UtilValidate.isNotEmpty(ElectronicText)) {
                  String textData=(String)ElectronicText.get("textData");
                  if (UtilValidate.isNotEmpty(textData)) {
                    textData=UrlServletHelper.invalidCharacter(textData);
                    if (alternativeUrl.matches(textData + ".+$")) {
                      String productCategoryStr=null;
                      productCategoryStr=alternativeUrl.replace(textData + "-","");
                      productCategoryStr=productCategoryStr.replace("-c","");
                      String checkProductCategoryId=(String)productCategoryContentInfo.get("productCategoryId");
                      if (productCategoryStr.equalsIgnoreCase(checkProductCategoryId)) {
                        productCategoryId=checkProductCategoryId;
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning("Cannot look for product and product category",module);
    }
    StringBuilder urlBuilder=new StringBuilder();
    urlBuilder.append("/" + CONTROL_MOUNT_POINT);
    if (UtilValidate.isNotEmpty(productId)) {
      try {
        List<EntityCondition> conds=FastList.newInstance();
        conds.add(EntityCondition.makeCondition("productId",productId));
        conds.add(EntityUtil.getFilterByDateExpr());
        List<GenericValue> productCategoryMembers=delegator.findList("ProductCategoryMember",EntityCondition.makeCondition(conds),UtilMisc.toSet("productCategoryId"),UtilMisc.toList("-fromDate"),null,true);
        if (UtilValidate.isNotEmpty(productCategoryMembers)) {
          GenericValue productCategoryMember=EntityUtil.getFirst(productCategoryMembers);
          productCategoryId=productCategoryMember.getString("productCategoryId");
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot find product category for product: " + productId,module);
      }
      urlBuilder.append("/" + PRODUCT_REQUEST);
    }
 else {
      urlBuilder.append("/" + CATEGORY_REQUEST);
    }
    String topCategoryId=CategoryWorker.getCatalogTopCategory(httpRequest,null);
    List<GenericValue> trailCategories=CategoryWorker.getRelatedCategoriesRet(httpRequest,"trailCategories",topCategoryId,false,false,true);
    List<String> trailCategoryIds=EntityUtil.getFieldListFromEntityList(trailCategories,"productCategoryId",true);
    if (UtilValidate.isNotEmpty(productId)) {
      try {
        List<EntityCondition> rolllupConds=FastList.newInstance();
        rolllupConds.add(EntityCondition.makeCondition("productId",productId));
        rolllupConds.add(EntityUtil.getFilterByDateExpr());
        List<GenericValue> productCategoryMembers=delegator.findList("ProductCategoryMember",EntityCondition.makeCondition(rolllupConds),null,UtilMisc.toList("-fromDate"),null,true);
        for (        GenericValue productCategoryMember : productCategoryMembers) {
          String trailCategoryId=productCategoryMember.getString("productCategoryId");
          if (trailCategoryIds.contains(trailCategoryId)) {
            productCategoryId=trailCategoryId;
            break;
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot generate trail from product category",module);
      }
    }
    if (UtilValidate.isNotEmpty(productCategoryId)) {
      List<String> trailElements=FastList.newInstance();
      trailElements.add(productCategoryId);
      String parentProductCategoryId=productCategoryId;
      while (UtilValidate.isNotEmpty(parentProductCategoryId)) {
        try {
          List<EntityCondition> rolllupConds=FastList.newInstance();
          rolllupConds.add(EntityCondition.makeCondition("productCategoryId",parentProductCategoryId));
          rolllupConds.add(EntityUtil.getFilterByDateExpr());
          List<GenericValue> productCategoryRollups=delegator.findList("ProductCategoryRollup",EntityCondition.makeCondition(rolllupConds),null,UtilMisc.toList("-fromDate"),null,true);
          if (UtilValidate.isNotEmpty(productCategoryRollups)) {
            for (            GenericValue productCategoryRollup : productCategoryRollups) {
              String trailCategoryId=productCategoryRollup.getString("parentProductCategoryId");
              parentProductCategoryId=trailCategoryId;
              if (trailCategoryIds.contains(trailCategoryId)) {
                trailElements.add(trailCategoryId);
                break;
              }
            }
          }
 else {
            parentProductCategoryId=null;
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"Cannot generate trail from product category",module);
        }
      }
      Collections.reverse(trailElements);
      List<String> trail=CategoryWorker.getTrail(httpRequest);
      if (trail == null) {
        trail=FastList.newInstance();
      }
      String previousCategoryId=null;
      if (trail.size() > 0) {
        previousCategoryId=trail.get(trail.size() - 1);
      }
      trail=CategoryWorker.adjustTrail(trail,productCategoryId,previousCategoryId);
      if (trailElements.size() == 1) {
        CategoryWorker.setTrail(request,trailElements.get(0),null);
      }
 else       if (trailElements.size() == 2) {
        CategoryWorker.setTrail(request,trailElements.get(1),trailElements.get(0));
      }
 else       if (trailElements.size() > 2) {
        if (trail.contains(trailElements.get(0))) {
          int firstElementIndex=trail.indexOf(trailElements.get(0));
          while (trail.size() > firstElementIndex) {
            trail.remove(firstElementIndex);
          }
          trail.addAll(trailElements);
        }
 else {
          trail.clear();
          trail.addAll(trailElements);
        }
        CategoryWorker.setTrail(request,trail);
      }
      request.setAttribute("productCategoryId",productCategoryId);
      if (productId != null) {
        request.setAttribute("product_id",productId);
        request.setAttribute("productId",productId);
      }
    }
    UrlServletHelper.setViewQueryParameters(request,urlBuilder);
    if (UtilValidate.isNotEmpty(productId) || UtilValidate.isNotEmpty(productCategoryId) || UtilValidate.isNotEmpty(urlContentId)) {
      Debug.logInfo("[Filtered request]: " + pathInfo + " ("+ urlBuilder+ ")",module);
      RequestDispatcher dispatch=request.getRequestDispatcher(urlBuilder.toString());
      dispatch.forward(request,response);
      return;
    }
    UrlServletHelper.checkPathAlias(request,httpResponse,delegator,pathInfo);
  }
  chain.doFilter(request,response);
}
