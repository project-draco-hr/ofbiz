{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String url=null;
  try {
    GenericValue product=delegator.findOne("Product",UtilMisc.toMap("productId",productId),true);
    ProductContentWrapper wrapper=new ProductContentWrapper(product,request);
    StringWrapper alternativeUrl=wrapper.get("ALTERNATIVE_URL");
    if (UtilValidate.isNotEmpty(alternativeUrl) && UtilValidate.isNotEmpty(alternativeUrl.toString())) {
      StringBuilder urlBuilder=new StringBuilder();
      urlBuilder.append(request.getSession().getServletContext().getContextPath());
      if (urlBuilder.charAt(urlBuilder.length() - 1) != '/') {
        urlBuilder.append("/");
      }
      url=UrlServletHelper.invalidCharacter(alternativeUrl.toString());
      urlBuilder.append(url);
      if (UtilValidate.isNotEmpty(productId)) {
        urlBuilder.append("-");
        urlBuilder.append(productId);
        urlBuilder.append("-p");
      }
      return urlBuilder.toString();
    }
 else {
      return CatalogUrlServlet.makeCatalogUrl(request,productId,productCategoryId,previousCategoryId);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Cannot create product's URL for: " + productId,module);
    return redirectUrl;
  }
}
