{
  if (!(obj instanceof String)) {
    Debug.logWarning("Key parameters must be a string",module);
    return null;
  }
  String name=(String)obj;
  if ("fields".equalsIgnoreCase(name)) {
    if (this.fields != null) {
      return fields;
    }
    try {
      if (cache) {
        this.fields=delegator.findOne("Content",UtilMisc.toMap("contentId",contentId),true);
      }
 else {
        this.fields=delegator.findOne("Content",UtilMisc.toMap("contentId",contentId),false);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    return this.fields;
  }
 else   if ("link".equalsIgnoreCase(name)) {
    RequestHandler rh=(RequestHandler)this.context.get("_REQUEST_HANDLER_");
    HttpServletRequest request=(HttpServletRequest)this.context.get("request");
    HttpServletResponse response=(HttpServletResponse)this.context.get("response");
    if (rh != null && request != null && response != null) {
      String webSiteId=WebSiteWorker.getWebSiteId(request);
      Delegator delegator=(Delegator)request.getAttribute("delegator");
      String contentUri=this.contentId;
      if (webSiteId != null && delegator != null) {
        EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toMap("mapKey",null,"webSiteId",webSiteId,"contentId",this.contentId));
        try {
          List<GenericValue> webSitePathAliases=delegator.findList("WebSitePathAlias",condition,null,null,null,true);
          GenericValue webSitePathAlias=EntityUtil.getFirst(webSitePathAliases);
          if (webSitePathAlias != null) {
            contentUri=webSitePathAlias.getString("pathAlias");
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
      }
      String contextLink=rh.makeLink(request,response,contentUri,true,false,true);
      return contextLink;
    }
 else {
      return this.contentId;
    }
  }
 else   if ("data".equalsIgnoreCase(name) || "dataresource".equalsIgnoreCase(name)) {
    return dataResource;
  }
 else   if ("subcontent_all".equalsIgnoreCase(name)) {
    List<ContentMapFacade> subContent=FastList.newInstance();
    List<GenericValue> subs=null;
    try {
      Map<String,Object> expressions=FastMap.newInstance();
      expressions.put("contentIdStart",contentId);
      if (!this.mapKeyFilter.equals("")) {
        expressions.put("caMapKey",this.mapKeyFilter);
      }
      if (!this.statusFilter.equals("")) {
        expressions.put("statusId",this.statusFilter);
      }
      if (cache) {
        subs=delegator.findByAndCache("ContentAssocViewTo",expressions,UtilMisc.toList(this.sortOrder));
      }
 else {
        subs=delegator.findByAnd("ContentAssocViewTo",expressions,UtilMisc.toList(this.sortOrder));
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    if (subs != null) {
      subs=EntityUtil.filterByDate(subs);
      for (      GenericValue v : subs) {
        subContent.add(new ContentMapFacade(dispatcher,delegator,v.getString("contentId"),context,locale,mimeType,cache));
      }
    }
    return subContent;
  }
 else   if ("subcontent".equalsIgnoreCase(name)) {
    return this.subContent;
  }
 else   if ("metadata".equalsIgnoreCase(name)) {
    return this.metaData;
  }
 else   if ("content".equalsIgnoreCase(name)) {
    return content;
  }
 else   if ("render".equalsIgnoreCase(name)) {
    return this.renderThis();
  }
  return null;
}
