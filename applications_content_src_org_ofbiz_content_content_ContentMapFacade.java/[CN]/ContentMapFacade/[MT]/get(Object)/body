{
  if (!(obj instanceof String)) {
    Debug.logWarning("Key parameters must be a string",module);
    return null;
  }
  String name=(String)obj;
  if ("fields".equalsIgnoreCase(name)) {
    if (this.fields != null) {
      return fields;
    }
    try {
      if (cache) {
        this.fields=delegator.findByPrimaryKeyCache("Content",UtilMisc.toMap("contentId",contentId));
      }
 else {
        this.fields=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentId));
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    return this.fields;
  }
 else   if ("link".equalsIgnoreCase(name)) {
    String contextLinkPrefix=(String)this.context.get("_CONTEXT_LINK_PREFIX_");
    if (UtilValidate.isNotEmpty(contextLinkPrefix)) {
      StringBuffer linkBuf=new StringBuffer();
      linkBuf.append(contextLinkPrefix);
      if (!contextLinkPrefix.endsWith("/")) {
        linkBuf.append("/");
      }
      linkBuf.append(this.contentId);
      return linkBuf.toString();
    }
 else {
      return this.contentId;
    }
  }
 else   if ("data".equalsIgnoreCase(name) || "dataresource".equalsIgnoreCase(name)) {
    return dataResource;
  }
 else   if ("subcontent_all".equalsIgnoreCase(name)) {
    List subContent=FastList.newInstance();
    List subs=null;
    try {
      if (cache) {
        subs=delegator.findByAndCache("ContentAssoc",UtilMisc.toMap("contentId",contentId),UtilMisc.toList("-fromDate"));
      }
 else {
        subs=delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentId",contentId),UtilMisc.toList("-fromDate"));
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    if (subs != null) {
      subs=EntityUtil.filterByDate(subs);
      Iterator i=subs.iterator();
      while (i.hasNext()) {
        GenericValue v=(GenericValue)i.next();
        subContent.add(new ContentMapFacade(dispatcher,delegator,v.getString("contentIdTo"),context,locale,mimeType,cache));
      }
    }
    return subContent;
  }
 else   if ("subcontent".equalsIgnoreCase(name)) {
    return this.subContent;
  }
 else   if ("metadata".equalsIgnoreCase(name)) {
    return this.metaData;
  }
 else   if ("content".equalsIgnoreCase(name)) {
    return content;
  }
 else   if ("render".equalsIgnoreCase(name)) {
    return this.renderThis();
  }
  return null;
}
