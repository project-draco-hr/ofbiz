{
  String operator=methodContext.expandString(this.operator);
  String type=methodContext.expandString(this.type);
  String format=methodContext.expandString(this.format);
  Object fieldVal1=null;
  Object fieldVal2=null;
  if (!mapAcsr.isEmpty()) {
    Map fromMap=(Map)mapAcsr.get(methodContext);
    if (fromMap == null) {
      if (Debug.infoOn())       Debug.logInfo("Map not found with name " + mapAcsr + ", using null for comparison",module);
    }
 else {
      fieldVal1=fieldAcsr.get(fromMap,methodContext);
    }
  }
 else {
    fieldVal1=fieldAcsr.get(methodContext);
  }
  if (!toMapAcsr.isEmpty()) {
    Map toMap=(Map)toMapAcsr.get(methodContext);
    if (toMap == null) {
      if (Debug.infoOn())       Debug.logInfo("To Map not found with name " + toMapAcsr + ", using null for comparison",module);
    }
 else {
      fieldVal2=toFieldAcsr.get(toMap,methodContext);
    }
  }
 else {
    fieldVal2=toFieldAcsr.get(methodContext);
  }
  List messages=FastList.newInstance();
  Boolean resultBool=BaseCompare.doRealCompare(fieldVal1,fieldVal2,operator,type,format,messages,null,methodContext.getLoader(),false);
  if (messages.size() > 0) {
    messages.add(0,"Error with comparison in if-compare-field between fields [" + mapAcsr.toString() + "."+ fieldAcsr.toString()+ "] with value ["+ fieldVal1+ "] and ["+ toMapAcsr.toString()+ "."+ toFieldAcsr.toString()+ "] with value ["+ fieldVal2+ "] with operator ["+ operator+ "] and type ["+ type+ "]: ");
    if (methodContext.getMethodType() == MethodContext.EVENT) {
      StringBuffer fullString=new StringBuffer();
      Iterator miter=messages.iterator();
      while (miter.hasNext()) {
        fullString.append((String)miter.next());
      }
      Debug.logWarning(fullString.toString(),module);
      methodContext.putEnv(simpleMethod.getEventErrorMessageName(),fullString.toString());
      methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
    }
 else     if (methodContext.getMethodType() == MethodContext.SERVICE) {
      methodContext.putEnv(simpleMethod.getServiceErrorMessageListName(),messages);
      methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
    }
    return false;
  }
  if (resultBool != null && resultBool.booleanValue()) {
    return SimpleMethod.runSubOps(subOps,methodContext);
  }
 else {
    if (elseSubOps != null) {
      return SimpleMethod.runSubOps(elseSubOps,methodContext);
    }
 else {
      return true;
    }
  }
}
