{
  Delegator delegator=dctx.getDelegator();
  String path=System.getProperty("user.dir") + "/spreadsheet";
  List<File> fileItems=FastList.newInstance();
  if (path != null && path.length() > 0) {
    File importDir=new File(path);
    if (importDir.isDirectory() && importDir.canRead()) {
      File[] files=importDir.listFiles();
      for (int i=0; i < files.length; i++) {
        if (files[i].getName().toUpperCase().endsWith("XLS")) {
          fileItems.add(files[i]);
        }
      }
    }
 else {
      return ServiceUtil.returnError("Directory not found or can not be read");
    }
  }
 else {
    return ServiceUtil.returnError("No path specified, doing nothing");
  }
  if (fileItems.size() < 1) {
    return ServiceUtil.returnError("No spreadsheet exists in" + path);
  }
  for (  File item : fileItems) {
    List<Map<String,Object>> products=FastList.newInstance();
    List<Map<String,Object>> inventoryItems=FastList.newInstance();
    POIFSFileSystem fs=null;
    HSSFWorkbook wb=null;
    try {
      fs=new POIFSFileSystem(new FileInputStream(item));
      wb=new HSSFWorkbook(fs);
    }
 catch (    IOException e) {
      Debug.logError("Unable to read or create workbook from file",module);
      return ServiceUtil.returnError("Unable to read or create workbook from file");
    }
    HSSFSheet sheet=wb.getSheetAt(0);
    int sheetLastRowNumber=sheet.getLastRowNum();
    for (int j=1; j <= sheetLastRowNumber; j++) {
      HSSFRow row=sheet.getRow(j);
      if (row != null) {
        HSSFCell cell2=row.getCell((int)2);
        cell2.setCellType(HSSFCell.CELL_TYPE_STRING);
        String productId=cell2.getRichStringCellValue().toString();
        HSSFCell cell5=row.getCell((int)5);
        BigDecimal quantityOnHand=BigDecimal.ZERO;
        if (cell5 != null && cell5.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)         quantityOnHand=new BigDecimal(cell5.getNumericCellValue());
        boolean productExists=ImportProductHelper.checkProductExists(productId,delegator);
        if (productId != null && !productId.trim().equalsIgnoreCase("") && !productExists) {
          products.add(ImportProductHelper.prepareProduct(productId));
          if (quantityOnHand.compareTo(BigDecimal.ZERO) >= 0)           inventoryItems.add(ImportProductHelper.prepareInventoryItem(productId,quantityOnHand,delegator.getNextSeqId("InventoryItem")));
 else           inventoryItems.add(ImportProductHelper.prepareInventoryItem(productId,BigDecimal.ZERO,delegator.getNextSeqId("InventoryItem")));
        }
        int rowNum=row.getRowNum() + 1;
        if (row.toString() != null && !row.toString().trim().equalsIgnoreCase("") && productExists) {
          Debug.logWarning("Row number " + rowNum + " not imported from "+ item.getName(),module);
        }
      }
    }
    for (int j=0; j < products.size(); j++) {
      GenericValue productGV=delegator.makeValue("Product",products.get(j));
      GenericValue inventoryItemGV=delegator.makeValue("InventoryItem",inventoryItems.get(j));
      if (!ImportProductHelper.checkProductExists(productGV.getString("productId"),delegator)) {
        try {
          delegator.create(productGV);
          delegator.create(inventoryItemGV);
        }
 catch (        GenericEntityException e) {
          Debug.logError("Cannot store product",module);
          return ServiceUtil.returnError("Cannot store product");
        }
      }
    }
    int uploadedProducts=products.size() + 1;
    if (products.size() > 0)     Debug.logInfo("Uploaded " + uploadedProducts + " products from file "+ item.getName(),module);
  }
  return ServiceUtil.returnSuccess();
}
