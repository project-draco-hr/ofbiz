{
  List<String> sizeTypeList=UtilMisc.toList("small","medium","large","detail");
  List<String> extensionList=UtilMisc.toList("jpeg","jpg","png");
  int index;
  LinkedHashMap<String,LinkedHashMap<String,String>> imgPropertyMap=new LinkedHashMap<String,LinkedHashMap<String,String>>();
  BufferedImage bufImg, bufNewImg;
  double imgHeight, imgWidth, defaultHeight, defaultWidth, scaleFactor;
  AffineTransformOp op;
  LinkedHashMap<String,String> imgUrlMap=new LinkedHashMap<String,String>();
  LinkedHashMap resultXMLMap=new LinkedHashMap();
  LinkedHashMap resultBufImgMap=new LinkedHashMap();
  LinkedHashMap resultScaleImgMap=new LinkedHashMap();
  FastMap result=new FastMap();
  String imgPropertyFullPath=System.getProperty("ofbiz.home") + "/applications/product/config/ImageProperties.xml";
  resultXMLMap.putAll(getXMLValue(imgPropertyFullPath));
  if (resultXMLMap.containsKey("responseMessage") && resultXMLMap.get("responseMessage").equals("success")) {
    imgPropertyMap.putAll((LinkedHashMap)resultXMLMap.get("xml"));
  }
 else {
    String errMsg="Impossible to parse ImageProperties.xml ";
    Debug.logError(errMsg,module);
    result.put("errorMessage",errMsg);
    return result;
  }
  index=filenameToUse.lastIndexOf(".");
  String imgName=filenameToUse.substring(0,index - 1);
  String imgExtension=filenameToUse.substring(index + 1);
  String mainFilenameFormat=UtilProperties.getPropertyValue("catalog","image.filename.format");
  String imageServerPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.server.path"),context);
  String imageUrlPrefix=UtilProperties.getPropertyValue("catalog","image.url.prefix");
  String id=new String();
  String type=new String();
  if (viewType.toLowerCase().contains("main")) {
    type="original";
    id=imgName;
  }
 else   if (viewType.toLowerCase().contains("additional") && viewNumber != null && !viewNumber.equals("0")) {
    type="additional";
    id=imgName + "_View_" + viewNumber;
  }
 else {
    return ServiceUtil.returnError("View Type : " + type + " is wrong");
  }
  FlexibleStringExpander mainFilenameExpander=FlexibleStringExpander.getInstance(mainFilenameFormat);
  String fileLocation=mainFilenameExpander.expandString(UtilMisc.toMap("location","products","type",type,"id",filenameToUse));
  String filePathPrefix="";
  if (fileLocation.lastIndexOf("/") != -1) {
    filePathPrefix=fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);
  }
  resultBufImgMap.putAll(this.getBufferedImage(imageServerPath + "/" + filePathPrefix+ filenameToUse));
  if (resultBufImgMap.containsKey("responseMessage") && resultBufImgMap.get("responseMessage").equals("success")) {
    bufImg=(BufferedImage)resultBufImgMap.get("bufferedImage");
    imgHeight=(double)bufImg.getHeight();
    imgWidth=(double)bufImg.getWidth();
    if (imgHeight == 0.0 || imgWidth == 0.0) {
      String errMsg="Any current image dimension is null : imgHeight = " + imgHeight + " ; imgWidth = "+ imgWidth+ ";";
      Debug.logError(errMsg,module);
      result.put("errorMessage",errMsg);
      return result;
    }
    FlexibleStringExpander addFilenameExpander=mainFilenameExpander;
    if (viewType.toLowerCase().contains("additional")) {
      String addFilenameFormat=UtilProperties.getPropertyValue("catalog","image.filename.additionalviewsize.format");
      addFilenameExpander=FlexibleStringExpander.getInstance(addFilenameFormat);
    }
    Iterator<String> sizeIter=sizeTypeList.iterator();
    while (sizeIter.hasNext()) {
      String sizeType=sizeIter.next();
      resultScaleImgMap.putAll(this.scaleImage(bufImg,imgHeight,imgWidth,imgPropertyMap,sizeType));
      if (resultScaleImgMap.containsKey("responseMessage") && resultScaleImgMap.get("responseMessage").equals("success")) {
        bufNewImg=(BufferedImage)resultScaleImgMap.get("bufferedImage");
        Double scaleFactorDb=(Double)resultScaleImgMap.get("scaleFactor");
        scaleFactor=scaleFactorDb.doubleValue();
        LinkedHashMap<RenderingHints.Key,Object> rhMap=new LinkedHashMap<RenderingHints.Key,Object>();
        rhMap.put(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
        rhMap.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        rhMap.put(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);
        rhMap.put(RenderingHints.KEY_DITHERING,RenderingHints.VALUE_DITHER_DISABLE);
        rhMap.put(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
        rhMap.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        rhMap.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
        rhMap.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        RenderingHints rh=new RenderingHints(rhMap);
        AffineTransform tx=new AffineTransform();
        tx.scale(scaleFactor,scaleFactor);
        try {
          op=new AffineTransformOp(tx,rh);
        }
 catch (        ImagingOpException e) {
          String errMsg="The transform is non-invertible" + e.toString();
          Debug.logError(errMsg,module);
          result.put("errorMessage",errMsg);
          return result;
        }
        String newFileLocation=new String();
        if (viewType.toLowerCase().contains("main")) {
          newFileLocation=mainFilenameExpander.expandString(UtilMisc.toMap("location","products","type",sizeType,"id",id));
        }
 else         if (viewType.toLowerCase().contains("additional")) {
          newFileLocation=addFilenameExpander.expandString(UtilMisc.toMap("location","products","viewtype",viewType,"sizetype",sizeType,"id",id));
        }
        String newFilePathPrefix="";
        if (newFileLocation.lastIndexOf("/") != -1) {
          newFilePathPrefix=newFileLocation.substring(0,newFileLocation.lastIndexOf("/") + 1);
        }
        String finalExtension=new String();
        if (!extensionList.contains(imgExtension.toLowerCase())) {
          finalExtension=imgPropertyMap.get("format").get("extension");
        }
 else {
          finalExtension=imgExtension;
        }
        String targetDirectory=imageServerPath + "/" + newFilePathPrefix;
        File targetDir=new File(targetDirectory);
        if (!targetDir.exists()) {
          boolean created=targetDir.mkdirs();
          if (!created) {
            Debug.logFatal("Unable to create target directory - " + targetDirectory,module);
            return ServiceUtil.returnError("Unable to create target directory - " + targetDirectory);
          }
        }
        try {
          ImageIO.write(op.filter(bufImg,bufNewImg),imgExtension,new File(imageServerPath + "/" + newFilePathPrefix+ filenameToUse));
        }
 catch (        IllegalArgumentException e) {
          String errMsg="Any parameter is null" + e.toString();
          Debug.logError(errMsg,module);
          result.put("errorMessage",errMsg);
          return result;
        }
catch (        IOException e) {
          String errMsg="An error occurs during writing" + e.toString();
          Debug.logError(errMsg,module);
          result.put("errorMessage",errMsg);
          return result;
        }
        String imageUrl=imageUrlPrefix + "/" + newFilePathPrefix+ filenameToUse;
        imgUrlMap.put(sizeType,imageUrl);
      }
    }
    result.put("responseMessage","success");
    result.put("imageUrlMap",imgUrlMap);
    result.put("original",resultBufImgMap);
    return result;
  }
 else {
    String errMsg="Impossible to scale original image : " + filenameToUse;
    Debug.logError(errMsg,module);
    result.put("errorMessage",errMsg);
    return ServiceUtil.returnError(errMsg);
  }
}
