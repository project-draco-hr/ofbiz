{
  String errMsg="";
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String productId=request.getParameter("productId");
  String variantProductId=request.getParameter("variantProductId");
  String featureTypeSizeStr=request.getParameter("featureTypeSize");
  if (UtilValidate.isEmpty(productId)) {
    errMsg=UtilProperties.getMessage(resource,"variantevents.productId_required_but_missing",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  if (UtilValidate.isEmpty(variantProductId)) {
    errMsg=UtilProperties.getMessage(resource,"variantevents.variantProductId_required_but_missing_enter_an_id",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  int featureTypeSize=0;
  try {
    featureTypeSize=Integer.parseInt(featureTypeSizeStr);
  }
 catch (  NumberFormatException e) {
    Map<String,String> messageMap=UtilMisc.toMap("featureTypeSizeStr",featureTypeSizeStr);
    errMsg=UtilProperties.getMessage(resource,"variantevents.featureTypeSize_not_number",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  try {
    boolean beganTransacton=TransactionUtil.begin();
    try {
      GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();
      if (product == null) {
        Map<String,String> messageMap=UtilMisc.toMap("productId",productId);
        errMsg=UtilProperties.getMessage(resource,"variantevents.product_not_found_with_ID",messageMap,UtilHttp.getLocale(request));
        TransactionUtil.rollback(beganTransacton,errMsg,null);
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
        return "error";
      }
      GenericValue variantProduct=delegator.findOne("Product",UtilMisc.toMap("productId",variantProductId),false);
      if (variantProduct == null) {
        variantProduct=GenericValue.create(product);
        variantProduct.set("productId",variantProductId);
        variantProduct.set("isVirtual","N");
        variantProduct.set("isVariant","Y");
        variantProduct.set("primaryProductCategoryId",null);
        variantProduct.create();
      }
 else {
        variantProduct.set("isVirtual","N");
        variantProduct.set("isVariant","Y");
        variantProduct.set("primaryProductCategoryId",null);
        variantProduct.store();
      }
      GenericValue productAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",variantProductId,"productAssocTypeId","PRODUCT_VARIANT","fromDate",UtilDateTime.nowTimestamp()));
      productAssoc.create();
      for (int i=0; i < featureTypeSize; i++) {
        String productFeatureId=request.getParameter("feature_" + i);
        if (productFeatureId == null) {
          Map<String,String> messageMap=UtilMisc.toMap("i",Integer.toString(i));
          errMsg=UtilProperties.getMessage(resource,"variantevents.productFeatureId_for_feature_type_number_not_found",messageMap,UtilHttp.getLocale(request));
          TransactionUtil.rollback(beganTransacton,errMsg,null);
          request.setAttribute("_ERROR_MESSAGE_",errMsg);
          return "error";
        }
        GenericValue productFeature=EntityQuery.use(delegator).from("ProductFeature").where("productFeatureId",productFeatureId).queryOne();
        GenericValue productFeatureAppl=delegator.makeValue("ProductFeatureAppl",UtilMisc.toMap("productId",variantProductId,"productFeatureId",productFeatureId,"productFeatureApplTypeId","STANDARD_FEATURE","fromDate",UtilDateTime.nowTimestamp()));
        if (productFeature != null) {
          productFeatureAppl.set("sequenceNum",productFeature.get("defaultSequenceNum"));
        }
        productFeatureAppl.create();
      }
      TransactionUtil.commit(beganTransacton);
    }
 catch (    GenericEntityException e) {
      Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());
      errMsg=UtilProperties.getMessage(resource,"variantevents.entity_error_quick_add_variant_data",messageMap,UtilHttp.getLocale(request));
      TransactionUtil.rollback(beganTransacton,errMsg,null);
      Debug.logError(e,"Entity error creating quick add variant data",module);
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
 catch (  GenericTransactionException e) {
    Debug.logError(e,"Transaction error creating quick add variant data",module);
    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());
    errMsg=UtilProperties.getMessage(resource,"variantevents.transaction_error_quick_add_variant_data",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  Map<String,String> messageMap=UtilMisc.toMap("variantProductId",variantProductId);
  String sucMsg=UtilProperties.getMessage(resource,"variantevents.successfully_created_variant_product_with_id",messageMap,UtilHttp.getLocale(request));
  request.setAttribute("_EVENT_MESSAGE_",sucMsg);
  return "success";
}
