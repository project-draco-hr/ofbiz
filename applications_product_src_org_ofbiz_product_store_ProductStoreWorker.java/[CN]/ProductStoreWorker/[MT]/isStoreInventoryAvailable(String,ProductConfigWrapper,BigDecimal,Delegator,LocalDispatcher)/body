{
  GenericValue productStore=getProductStore(productStoreId,delegator);
  if (productStore == null) {
    Debug.logWarning("No ProductStore found with id " + productStoreId + ", returning false for inventory available check",module);
    return false;
  }
  if ("N".equals(productStore.getString("checkInventory"))) {
    if (Debug.verboseOn())     Debug.logVerbose("ProductStore with id " + productStoreId + ", is set to NOT check inventory, returning true for inventory available check",module);
    return true;
  }
  boolean isInventoryAvailable=false;
  if ("Y".equals(productStore.getString("oneInventoryFacility"))) {
    String inventoryFacilityId=productStore.getString("inventoryFacilityId");
    if (UtilValidate.isEmpty(inventoryFacilityId)) {
      Debug.logWarning("ProductStore with id " + productStoreId + " has Y for oneInventoryFacility but inventoryFacilityId is empty, returning false for inventory check",module);
      return false;
    }
    return ProductWorker.isProductInventoryAvailableByFacility(productConfig,inventoryFacilityId,quantity,dispatcher);
  }
 else {
    GenericValue product=productConfig.getProduct();
    List<GenericValue> productFacilities=null;
    try {
      productFacilities=product.getRelatedCache("ProductFacility");
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Error invoking getRelatedCache in isCatalogInventoryAvailable",module);
      return false;
    }
    if (UtilValidate.isNotEmpty(productFacilities)) {
      for (      GenericValue pfValue : productFacilities) {
        isInventoryAvailable=ProductWorker.isProductInventoryAvailableByFacility(productConfig,pfValue.getString("facilityId"),quantity,dispatcher);
        if (isInventoryAvailable == true) {
          return isInventoryAvailable;
        }
      }
    }
    return false;
  }
}
