{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  String rootDir=(String)context.get("rootDir");
  String webSiteId=(String)context.get("webSiteId");
  String https=(String)context.get("https");
  Delegator delegator=dctx.getDelegator();
  String contentId=(String)context.get("contentId");
  String contentRevisionSeqId=(String)context.get("contentRevisionSeqId");
  String oooHost=(String)context.get("oooHost");
  String oooPort=(String)context.get("oooPort");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  try {
    Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
    List<EntityCondition> exprList=FastList.newInstance();
    exprList.add(EntityCondition.makeCondition("contentIdTo",EntityOperator.EQUALS,contentId));
    exprList.add(EntityCondition.makeCondition("rootRevisionContentId",EntityOperator.EQUALS,contentId));
    if (UtilValidate.isNotEmpty(contentRevisionSeqId)) {
      exprList.add(EntityCondition.makeCondition("contentRevisionSeqId",EntityOperator.LESS_THAN_EQUAL_TO,contentRevisionSeqId));
    }
    exprList.add(EntityCondition.makeCondition("contentAssocTypeId",EntityOperator.EQUALS,"COMPDOC_PART"));
    exprList.add(EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp));
    List<EntityCondition> thruList=FastList.newInstance();
    thruList.add(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null));
    thruList.add(EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN,nowTimestamp));
    exprList.add(EntityCondition.makeCondition(thruList,EntityOperator.OR));
    EntityConditionList<EntityCondition> conditionList=EntityCondition.makeCondition(exprList,EntityOperator.AND);
    String[] fields={"rootRevisionContentId","itemContentId","maxRevisionSeqId","contentId","dataResourceId","contentIdTo","contentAssocTypeId","fromDate","sequenceNum"};
    Set<String> selectFields=UtilMisc.toSetArray(fields);
    List<String> orderByFields=UtilMisc.toList("sequenceNum");
    List<GenericValue> compDocParts=delegator.findList("ContentAssocRevisionItemView",conditionList,selectFields,orderByFields,null,false);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Document document=new Document();
    document.setPageSize(PageSize.LETTER);
    PdfCopy writer=new PdfCopy(document,baos);
    document.open();
    Iterator<GenericValue> iter=compDocParts.iterator();
    int pgCnt=0;
    while (iter.hasNext()) {
      GenericValue contentAssocRevisionItemView=iter.next();
      String thisDataResourceId=contentAssocRevisionItemView.getString("dataResourceId");
      GenericValue dataResource=delegator.findByPrimaryKey("DataResource",UtilMisc.toMap("dataResourceId",thisDataResourceId));
      String inputMimeType=null;
      if (dataResource != null) {
        inputMimeType=dataResource.getString("mimeTypeId");
      }
      byte[] inputByteArray=null;
      PdfReader reader=null;
      if (inputMimeType != null && inputMimeType.equals("application/pdf")) {
        ByteBuffer byteBuffer=DataResourceWorker.getContentAsByteBuffer(delegator,thisDataResourceId,https,webSiteId,locale,rootDir);
        inputByteArray=byteBuffer.array();
        reader=new PdfReader(inputByteArray);
      }
 else       if (inputMimeType != null && inputMimeType.equals("text/html")) {
        ByteBuffer byteBuffer=DataResourceWorker.getContentAsByteBuffer(delegator,thisDataResourceId,https,webSiteId,locale,rootDir);
        inputByteArray=byteBuffer.array();
        String s=new String(inputByteArray);
        Debug.logInfo("text/html string:" + s,module);
        continue;
      }
 else       if (inputMimeType != null && inputMimeType.equals("application/vnd.ofbiz.survey.response")) {
        String surveyResponseId=dataResource.getString("relatedDetailId");
        String surveyId=null;
        String acroFormContentId=null;
        GenericValue surveyResponse=null;
        if (UtilValidate.isNotEmpty(surveyResponseId)) {
          surveyResponse=delegator.findByPrimaryKey("SurveyResponse",UtilMisc.toMap("surveyResponseId",surveyResponseId));
          if (surveyResponse != null) {
            surveyId=surveyResponse.getString("surveyId");
          }
        }
        if (UtilValidate.isNotEmpty(surveyId)) {
          GenericValue survey=delegator.findByPrimaryKey("Survey",UtilMisc.toMap("surveyId",surveyId));
          if (survey != null) {
            acroFormContentId=survey.getString("acroFormContentId");
            if (UtilValidate.isNotEmpty(acroFormContentId)) {
            }
          }
        }
        if (surveyResponse != null) {
          if (UtilValidate.isEmpty(acroFormContentId)) {
            Map<String,Object> survey2PdfResults=dispatcher.runSync("buildPdfFromSurveyResponse",UtilMisc.toMap("surveyResponseId",surveyId));
            if (ServiceUtil.isError(survey2PdfResults)) {
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentSurveyErrorBuildingPDF",locale),null,null,survey2PdfResults);
            }
            ByteBuffer outByteBuffer=(ByteBuffer)survey2PdfResults.get("outByteBuffer");
            inputByteArray=outByteBuffer.array();
            reader=new PdfReader(inputByteArray);
          }
 else {
            Map<String,Object> survey2AcroFieldResults=dispatcher.runSync("setAcroFieldsFromSurveyResponse",UtilMisc.toMap("surveyResponseId",surveyResponseId));
            if (ServiceUtil.isError(survey2AcroFieldResults)) {
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentSurveyErrorSettingAcroFields",locale),null,null,survey2AcroFieldResults);
            }
            ByteBuffer outByteBuffer=(ByteBuffer)survey2AcroFieldResults.get("outByteBuffer");
            inputByteArray=outByteBuffer.array();
            reader=new PdfReader(inputByteArray);
          }
        }
      }
 else {
        ByteBuffer inByteBuffer=DataResourceWorker.getContentAsByteBuffer(delegator,thisDataResourceId,https,webSiteId,locale,rootDir);
        Map<String,Object> convertInMap=UtilMisc.<String,Object>toMap("userLogin",userLogin,"inByteBuffer",inByteBuffer,"inputMimeType",inputMimeType,"outputMimeType","application/pdf");
        if (UtilValidate.isNotEmpty(oooHost))         convertInMap.put("oooHost",oooHost);
        if (UtilValidate.isNotEmpty(oooPort))         convertInMap.put("oooPort",oooPort);
        Map<String,Object> convertResult=dispatcher.runSync("convertDocumentByteBuffer",convertInMap);
        if (ServiceUtil.isError(convertResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentConvertingDocumentByteBuffer",locale),null,null,convertResult);
        }
        ByteBuffer outByteBuffer=(ByteBuffer)convertResult.get("outByteBuffer");
        inputByteArray=outByteBuffer.array();
        reader=new PdfReader(inputByteArray);
      }
      if (reader != null) {
        int n=reader.getNumberOfPages();
        for (int i=0; i < n; i++) {
          PdfImportedPage pg=writer.getImportedPage(reader,i + 1);
          writer.addPage(pg);
          pgCnt++;
        }
      }
    }
    document.close();
    ByteBuffer outByteBuffer=ByteBuffer.wrap(baos.toByteArray());
    Map<String,Object> results=ServiceUtil.returnSuccess();
    results.put("outByteBuffer",outByteBuffer);
    return results;
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.toString());
  }
catch (  IOException e) {
    Debug.logError(e,"Error in CompDoc operation: ",module);
    return ServiceUtil.returnError(e.toString());
  }
catch (  Exception e) {
    Debug.logError(e,"Error in CompDoc operation: ",module);
    return ServiceUtil.returnError(e.toString());
  }
}
