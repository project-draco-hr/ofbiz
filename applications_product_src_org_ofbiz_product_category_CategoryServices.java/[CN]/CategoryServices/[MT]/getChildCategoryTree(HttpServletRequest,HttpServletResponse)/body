{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String productCategoryId=request.getParameter("productCategoryId");
  String isCatalog=request.getParameter("isCatalog");
  String isCategoryType=request.getParameter("isCategoryType");
  String onclickFunction=request.getParameter("onclickFunction");
  String additionParam=request.getParameter("additionParam");
  String hrefString=request.getParameter("hrefString");
  String hrefString2=request.getParameter("hrefString2");
  String entityName=null;
  String primaryKeyName=null;
  if (isCatalog.equals("true")) {
    entityName="ProdCatalog";
    primaryKeyName="prodCatalogId";
  }
 else {
    entityName="ProductCategory";
    primaryKeyName="productCategoryId";
  }
  List categoryList=FastList.newInstance();
  List<GenericValue> childOfCats;
  List<String> sortList=org.ofbiz.base.util.UtilMisc.toList("sequenceNum","title");
  try {
    GenericValue category=delegator.findOne(entityName,UtilMisc.toMap(primaryKeyName,productCategoryId),false);
    if (UtilValidate.isNotEmpty(category)) {
      if (isCatalog.equals("true") && isCategoryType.equals("false")) {
        CategoryWorker.getRelatedCategories(request,"ChildCatalogList",CatalogWorker.getCatalogTopCategoryId(request,productCategoryId),true);
        childOfCats=EntityUtil.filterByDate((List<GenericValue>)request.getAttribute("ChildCatalogList"));
      }
 else       if (isCatalog.equals("false") && isCategoryType.equals("false")) {
        childOfCats=EntityUtil.filterByDate(delegator.findByAnd("ProductCategoryRollupAndChild",UtilMisc.toMap("parentProductCategoryId",productCategoryId),null,false));
      }
 else {
        childOfCats=EntityUtil.filterByDate(delegator.findByAnd("ProdCatalogCategory",UtilMisc.toMap("prodCatalogId",productCategoryId),null,false));
      }
      if (UtilValidate.isNotEmpty(childOfCats)) {
        for (        GenericValue childOfCat : childOfCats) {
          Object catId=null;
          String catNameField=null;
          catId=childOfCat.get("productCategoryId");
          catNameField="CATEGORY_NAME";
          Map josonMap=FastMap.newInstance();
          List<GenericValue> childList=null;
          childList=EntityUtil.filterByDate(delegator.findByAnd("ProductCategoryRollup",UtilMisc.toMap("parentProductCategoryId",catId),null,false));
          GenericValue cate=delegator.findOne("ProductCategory",UtilMisc.toMap("productCategoryId",catId),false);
          if (UtilValidate.isNotEmpty(childList)) {
            josonMap.put("state","closed");
          }
          Map dataMap=FastMap.newInstance();
          Map dataAttrMap=FastMap.newInstance();
          CategoryContentWrapper categoryContentWrapper=new CategoryContentWrapper(cate,request);
          String title=null;
          if (UtilValidate.isNotEmpty(categoryContentWrapper.get(catNameField))) {
            title=categoryContentWrapper.get(catNameField) + " " + "["+ catId+ "]";
            dataMap.put("title",title);
          }
 else {
            title=catId.toString();
            dataMap.put("title",catId);
          }
          dataAttrMap.put("onClick",onclickFunction + "('" + catId+ additionParam+ "')");
          String hrefStr=hrefString + catId;
          if (UtilValidate.isNotEmpty(hrefString2)) {
            hrefStr=hrefStr + hrefString2;
          }
          dataAttrMap.put("href",hrefStr);
          dataMap.put("attr",dataAttrMap);
          josonMap.put("data",dataMap);
          Map attrMap=FastMap.newInstance();
          attrMap.put("id",catId);
          attrMap.put("isCatalog",false);
          attrMap.put("rel","CATEGORY");
          josonMap.put("attr",attrMap);
          josonMap.put("sequenceNum",childOfCat.get("sequenceNum"));
          josonMap.put("title",title);
          categoryList.add(josonMap);
        }
        List<Map<Object,Object>> sortedCategoryList=UtilMisc.sortMaps(categoryList,sortList);
        toJsonObjectList(sortedCategoryList,response);
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
}
