{
  for (  Map.Entry<String,ModelMemberEntity> entry : memberModelMemberEntities.entrySet()) {
    ModelMemberEntity modelMemberEntity=entry.getValue();
    String aliasedEntityName=modelMemberEntity.getEntityName();
    ModelEntity aliasedEntity=modelReader.getModelEntityNoCheck(aliasedEntityName);
    if (aliasedEntity == null) {
      continue;
    }
    memberModelEntities.put(entry.getKey(),aliasedEntityName);
    Iterator<ModelField> aliasedFieldIterator=aliasedEntity.getFieldsIterator();
    while (aliasedFieldIterator.hasNext()) {
      ModelField aliasedModelField=aliasedFieldIterator.next();
      ModelField newModelField=ModelField.create(this,aliasedModelField.getDescription(),modelMemberEntity.getEntityAlias() + "." + aliasedModelField.getName(),aliasedModelField.getType(),modelMemberEntity.getEntityAlias() + "." + aliasedModelField.getColName(),null,null,false,false,false,false,false,aliasedModelField.getValidators());
      aliasedModelEntity.addField(newModelField);
    }
  }
  expandAllAliasAlls(modelReader);
  for (  ModelAlias alias : aliases) {
    if (UtilValidate.isNotEmpty(alias.function) && alias.groupBy) {
      Debug.logWarning("[" + this.getEntityName() + "]: The view-entity alias with name="+ alias.name+ " has a function value and is specified as a group-by field; this may be an error, but is not necessarily.",module);
    }
    String description=alias.description;
    String name=alias.name;
    String type="";
    String colName="";
    String colValue="";
    String fieldSet="";
    boolean isNotNull=false;
    boolean isPk=false;
    ModelField.EncryptMethod encryptMethod=ModelField.EncryptMethod.FALSE;
    boolean isAutoCreatedInternal=false;
    boolean enableAuditLog=false;
    List<String> validators=null;
    if (alias.isComplexAlias()) {
      StringBuilder colNameBuffer=new StringBuilder();
      StringBuilder fieldTypeBuffer=new StringBuilder();
      alias.makeAliasColName(colNameBuffer,fieldTypeBuffer,this,modelReader);
      colValue=colNameBuffer.toString();
      colName=ModelUtil.javaNameToDbName(alias.name);
      type=fieldTypeBuffer.toString();
      isPk=false;
      fieldSet=alias.getFieldSet();
    }
 else {
      ModelEntity aliasedEntity=getAliasedEntity(alias.entityAlias,modelReader);
      ModelField aliasedField=getAliasedField(aliasedEntity,alias.field,modelReader);
      if (aliasedField == null) {
        Debug.logError("[" + this.getEntityName() + "]: [populateFields] ERROR: could not find ModelField for field name \""+ alias.field+ "\" on entity with name: "+ aliasedEntity.getEntityName(),module);
        continue;
      }
      if (alias.isPk != null) {
        isPk=alias.isPk.booleanValue();
      }
 else {
        isPk=aliasedField.getIsPk();
      }
      encryptMethod=aliasedField.getEncryptMethod();
      type=aliasedField.getType();
      validators=aliasedField.getValidators();
      colValue=alias.entityAlias + "." + SqlJdbcUtil.filterColName(aliasedField.getColName());
      colName=SqlJdbcUtil.filterColName(colValue);
      if (description.isEmpty()) {
        description=aliasedField.getDescription();
      }
      if (alias.getFieldSet().isEmpty()) {
        String aliasedFieldSet=aliasedField.getFieldSet();
        if (!aliasedFieldSet.isEmpty()) {
          StringBuilder fieldSetBuffer=new StringBuilder(alias.entityAlias);
          fieldSetBuffer.append("_");
          fieldSetBuffer.append(Character.toUpperCase(aliasedFieldSet.charAt(0)));
          fieldSetBuffer.append(aliasedFieldSet.substring(1));
          fieldSet=fieldSetBuffer.toString().intern();
          Debug.logInfo("[" + this.getEntityName() + "]: copied field set on ["+ name+ "]: "+ fieldSet,module);
        }
      }
 else {
        fieldSet=alias.getFieldSet();
      }
    }
    if (numericFunctionsSet.contains(alias.function)) {
      type="numeric";
    }
    if (UtilValidate.isNotEmpty(alias.function)) {
      String prefix=functionPrefixMap.get(alias.function);
      if (prefix == null) {
        Debug.logWarning("[" + this.getEntityName() + "]: Specified alias function ["+ alias.function+ "] not valid; must be: min, max, sum, avg, count or count-distinct; using a column name with no function function",module);
      }
 else {
        colValue=prefix + colValue + ")";
      }
    }
    ModelField field=ModelField.create(this,description,name,type,colName,colValue,fieldSet,isNotNull,isPk,encryptMethod,isAutoCreatedInternal,enableAuditLog,validators);
    if (alias.groupBy || groupByFields.contains(alias.name)) {
      this.groupBys.add(field);
    }
    addField(field);
  }
}
