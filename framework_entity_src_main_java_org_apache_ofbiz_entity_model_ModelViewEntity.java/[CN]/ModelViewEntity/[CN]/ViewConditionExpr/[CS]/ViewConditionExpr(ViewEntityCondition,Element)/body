{
  this.viewEntityCondition=viewEntityCondition;
  String entityAlias=conditionExprElement.getAttribute("entity-alias");
  this.fieldName=conditionExprElement.getAttribute("field-name");
  String operator=UtilFormatOut.checkEmpty(conditionExprElement.getAttribute("operator"),"equals");
  try {
    this.operator=EntityOperator.lookupComparison(operator);
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException("[" + this.viewEntityCondition.modelViewEntity.getEntityName() + "]: Could not find an entity operator for the name: "+ operator);
  }
  String relEntityAlias=conditionExprElement.getAttribute("rel-entity-alias");
  String relFieldNameStr=conditionExprElement.getAttribute("rel-field-name");
  if (UtilValidate.isEmpty(relFieldNameStr)) {
    this.relFieldName=null;
  }
 else {
    this.relFieldName=relFieldNameStr;
  }
  String valueStr=conditionExprElement.getAttribute("value");
  if (UtilValidate.isEmpty(valueStr)) {
    this.value=null;
  }
 else {
    this.value=valueStr;
  }
  this.ignoreCase="true".equals(conditionExprElement.getAttribute("ignore-case"));
  if (this.viewEntityCondition.modelViewLink != null) {
    if (UtilValidate.isEmpty(entityAlias)) {
      entityAlias=this.viewEntityCondition.modelViewLink.getEntityAlias();
    }
    if (UtilValidate.isEmpty(relEntityAlias)) {
      relEntityAlias=this.viewEntityCondition.modelViewLink.getRelEntityAlias();
    }
  }
  this.entityAlias=entityAlias;
  this.relEntityAlias=relEntityAlias;
}
