{
  if (asOfDateTime == null)   asOfDateTime=UtilDateTime.nowTimestamp();
  BigDecimal incrementTotal=ZERO;
  BigDecimal decrementTotal=ZERO;
  GenericValue finAccount=delegator.findByPrimaryKeyCache("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
  String currencyUomId=finAccount.getString("currencyUomId");
  EntityConditionList incrementConditions=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("finAccountId",EntityOperator.EQUALS,finAccountId),EntityCondition.makeCondition("transactionDate",EntityOperator.LESS_THAN_EQUAL_TO,asOfDateTime),EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"DEPOSIT"),EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"ADJUSTMENT")),EntityOperator.OR)),EntityOperator.AND);
  List transSums=delegator.findList("FinAccountTransSum",incrementConditions,UtilMisc.toSet("amount"),null,null,false);
  incrementTotal=addFirstEntryAmount(incrementTotal,transSums,"amount",(decimals + 1),rounding);
  EntityConditionList decrementConditions=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("finAccountId",EntityOperator.EQUALS,finAccountId),EntityCondition.makeCondition("transactionDate",EntityOperator.LESS_THAN_EQUAL_TO,asOfDateTime),EntityCondition.makeCondition("currencyUomId",EntityOperator.EQUALS,currencyUomId),EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"WITHDRAWAL")),EntityOperator.AND);
  transSums=delegator.findList("FinAccountTransSum",decrementConditions,UtilMisc.toSet("amount"),null,null,false);
  decrementTotal=addFirstEntryAmount(decrementTotal,transSums,"amount",(decimals + 1),rounding);
  return incrementTotal.subtract(decrementTotal).setScale(decimals,rounding);
}
