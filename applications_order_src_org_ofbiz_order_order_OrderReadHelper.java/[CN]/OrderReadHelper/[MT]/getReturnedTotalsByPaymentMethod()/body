{
  Map<String,BigDecimal> paymentMethodAmounts=FastMap.newInstance();
  List<GenericValue> paymentPrefs=getPaymentPreferences();
  Iterator<GenericValue> ppit=paymentPrefs.iterator();
  while (ppit.hasNext()) {
    GenericValue paymentPref=ppit.next();
    List<GenericValue> returnItemResponses=FastList.newInstance();
    try {
      returnItemResponses=orderHeader.getDelegator().findByAnd("ReturnItemResponse",UtilMisc.toMap("orderPaymentPreferenceId",paymentPref.getString("orderPaymentPreferenceId")));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    BigDecimal refundedToPaymentPref=ZERO;
    Iterator<GenericValue> ririt=returnItemResponses.iterator();
    while (ririt.hasNext()) {
      GenericValue returnItemResponse=ririt.next();
      refundedToPaymentPref=refundedToPaymentPref.add(returnItemResponse.getBigDecimal("responseAmount")).setScale(scale + 1,rounding);
    }
    if (refundedToPaymentPref.compareTo(ZERO) == 1) {
      String paymentMethodId=paymentPref.getString("paymentMethodId") != null ? paymentPref.getString("paymentMethodId") : paymentPref.getString("paymentMethodTypeId");
      paymentMethodAmounts.put(paymentMethodId,refundedToPaymentPref.setScale(scale,rounding));
    }
  }
  return paymentMethodAmounts;
}
