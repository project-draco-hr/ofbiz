{
  Map<String,BigDecimal> paymentMethodAmounts=new HashMap<String,BigDecimal>();
  List<GenericValue> paymentPrefs=getPaymentPreferences();
  for (  GenericValue paymentPref : paymentPrefs) {
    List<GenericValue> returnItemResponses=new LinkedList<GenericValue>();
    try {
      returnItemResponses=orderHeader.getDelegator().findByAnd("ReturnItemResponse",UtilMisc.toMap("orderPaymentPreferenceId",paymentPref.getString("orderPaymentPreferenceId")),null,false);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    BigDecimal refundedToPaymentPref=ZERO;
    for (    GenericValue returnItemResponse : returnItemResponses) {
      refundedToPaymentPref=refundedToPaymentPref.add(returnItemResponse.getBigDecimal("responseAmount")).setScale(scale + 1,rounding);
    }
    if (refundedToPaymentPref.compareTo(ZERO) == 1) {
      String paymentMethodId=paymentPref.getString("paymentMethodId") != null ? paymentPref.getString("paymentMethodId") : paymentPref.getString("paymentMethodTypeId");
      paymentMethodAmounts.put(paymentMethodId,refundedToPaymentPref.setScale(scale,rounding));
    }
  }
  return paymentMethodAmounts;
}
