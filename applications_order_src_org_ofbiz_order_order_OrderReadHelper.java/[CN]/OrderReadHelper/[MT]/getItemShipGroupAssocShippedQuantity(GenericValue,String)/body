{
  BigDecimal quantityShipped=ZERO;
  if (orderItem == null)   return null;
  if (this.orderItemIssuances == null) {
    Delegator delegator=orderItem.getDelegator();
    try {
      orderItemIssuances=EntityQuery.use(delegator).from("ItemIssuance").where("orderId",orderItem.get("orderId"),"shipGroupSeqId",shipGroupSeqId).queryList();
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Trouble getting ItemIssuance(s)",module);
    }
  }
  Map<String,Object> filter=UtilMisc.toMap("orderItemSeqId",orderItem.get("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId);
  List<GenericValue> issuances=EntityUtil.filterByAnd(orderItemIssuances,filter);
  if (UtilValidate.isNotEmpty(issuances)) {
    for (    GenericValue issue : issuances) {
      BigDecimal issueQty=issue.getBigDecimal("quantity");
      BigDecimal cancelQty=issue.getBigDecimal("cancelQuantity");
      if (cancelQty == null) {
        cancelQty=ZERO;
      }
      if (issueQty == null) {
        issueQty=ZERO;
      }
      quantityShipped=quantityShipped.add(issueQty.subtract(cancelQty)).setScale(scale,rounding);
    }
  }
  return quantityShipped.setScale(scale,rounding);
}
