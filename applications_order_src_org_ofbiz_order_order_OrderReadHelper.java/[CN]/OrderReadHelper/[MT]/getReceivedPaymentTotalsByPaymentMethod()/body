{
  Map<String,BigDecimal> paymentMethodAmounts=FastMap.newInstance();
  List<GenericValue> paymentPrefs=getPaymentPreferences();
  for (  GenericValue paymentPref : paymentPrefs) {
    List<GenericValue> payments=FastList.newInstance();
    try {
      List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PMNT_RECEIVED"),EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PMNT_CONFIRMED"));
      payments=paymentPref.getRelated("Payment");
      payments=EntityUtil.filterByOr(payments,exprs);
      List<EntityExpr> conds=UtilMisc.toList(EntityCondition.makeCondition("paymentTypeId",EntityOperator.EQUALS,"CUSTOMER_PAYMENT"),EntityCondition.makeCondition("paymentTypeId",EntityOperator.EQUALS,"CUSTOMER_DEPOSIT"),EntityCondition.makeCondition("paymentTypeId",EntityOperator.EQUALS,"INTEREST_RECEIPT"),EntityCondition.makeCondition("paymentTypeId",EntityOperator.EQUALS,"GC_DEPOSIT"),EntityCondition.makeCondition("paymentTypeId",EntityOperator.EQUALS,"POS_PAID_IN"));
      payments=EntityUtil.filterByOr(payments,conds);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    BigDecimal chargedToPaymentPref=ZERO;
    for (    GenericValue payment : payments) {
      if (payment.get("amount") != null) {
        chargedToPaymentPref=chargedToPaymentPref.add(payment.getBigDecimal("amount")).setScale(scale + 1,rounding);
      }
    }
    if (chargedToPaymentPref.compareTo(ZERO) > 0) {
      String paymentMethodKey=paymentPref.getString("paymentMethodId") != null ? paymentPref.getString("paymentMethodId") : paymentPref.getString("paymentMethodTypeId");
      if (paymentMethodAmounts.containsKey(paymentMethodKey)) {
        BigDecimal value=paymentMethodAmounts.get(paymentMethodKey);
        if (value != null)         chargedToPaymentPref=chargedToPaymentPref.add(value);
      }
      paymentMethodAmounts.put(paymentMethodKey,chargedToPaymentPref.setScale(scale,rounding));
    }
  }
  return paymentMethodAmounts;
}
