{
  Map paymentMethodAmounts=FastMap.newInstance();
  List paymentPrefs=getPaymentPreferences();
  Iterator ppit=paymentPrefs.iterator();
  while (ppit.hasNext()) {
    GenericValue paymentPref=(GenericValue)ppit.next();
    List payments=FastList.newInstance();
    try {
      List exprs=UtilMisc.toList(new EntityExpr("statusId",EntityOperator.EQUALS,"PMNT_RECEIVED"),new EntityExpr("statusId",EntityOperator.EQUALS,"PMNT_CONFIRMED"));
      payments=paymentPref.getRelated("Payment");
      payments=EntityUtil.filterByOr(payments,exprs);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    BigDecimal chargedToPaymentPref=ZERO;
    Iterator payit=payments.iterator();
    while (payit.hasNext()) {
      GenericValue payment=(GenericValue)payit.next();
      if (payment.get("amount") != null) {
        chargedToPaymentPref=chargedToPaymentPref.add(payment.getBigDecimal("amount")).setScale(scale + 1,rounding);
      }
    }
    if (chargedToPaymentPref.compareTo(ZERO) == 1) {
      String paymentMethodKey=paymentPref.getString("paymentMethodId") != null ? paymentPref.getString("paymentMethodId") : paymentPref.getString("paymentMethodTypeId");
      paymentMethodAmounts.put(paymentMethodKey,new Double(chargedToPaymentPref.setScale(scale,rounding).doubleValue()));
    }
  }
  return paymentMethodAmounts;
}
