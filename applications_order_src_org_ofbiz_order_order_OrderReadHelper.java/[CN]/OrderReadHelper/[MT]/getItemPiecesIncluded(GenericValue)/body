{
  Delegator delegator=orderHeader.getDelegator();
  long piecesIncluded=1;
  GenericValue product=null;
  try {
    product=item.getRelatedOne("Product",false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting Product from OrderItem; returning 1",module);
    return 1;
  }
  if (product != null) {
    if (ProductWorker.shippingApplies(product)) {
      Long pieces=product.getLong("piecesIncluded");
      String isVariant=product.getString("isVariant");
      if (pieces == null && isVariant != null && "Y".equals(isVariant)) {
        GenericValue virtual=null;
        try {
          virtual=EntityQuery.use(delegator).from("ProductAssoc").where("productIdTo",product.get("productId"),"productAssocTypeId","PRODUCT_VARIANT").orderBy("-fromDate").filterByDate().queryFirst();
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"Problem getting virtual product");
        }
        if (virtual != null) {
          try {
            GenericValue virtualProduct=virtual.getRelatedOne("MainProduct",false);
            pieces=virtualProduct.getLong("piecesIncluded");
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"Problem getting virtual product");
          }
        }
      }
      if (pieces != null) {
        piecesIncluded=pieces.longValue();
      }
    }
  }
  return piecesIncluded;
}
