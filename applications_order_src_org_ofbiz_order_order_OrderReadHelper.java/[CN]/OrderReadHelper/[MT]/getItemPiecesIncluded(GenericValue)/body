{
  GenericDelegator delegator=orderHeader.getDelegator();
  long piecesIncluded=1;
  GenericValue product=null;
  try {
    product=item.getRelatedOne("Product");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting Product from OrderItem; returning 1",module);
    return 1;
  }
  if (product != null) {
    if (ProductWorker.shippingApplies(product)) {
      Long pieces=product.getLong("piecesIncluded");
      String isVariant=product.getString("isVariant");
      if (pieces == null && isVariant != null && "Y".equals(isVariant)) {
        GenericValue virtual=null;
        try {
          List virtuals=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productIdTo",product.getString("productId"),"productAssocTypeId","PRODUCT_VARIENT"),UtilMisc.toList("-fromDate"));
          if (virtuals != null) {
            virtuals=EntityUtil.filterByDate(virtuals);
          }
          virtual=EntityUtil.getFirst(virtuals);
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"Problem getting virtual product");
        }
        if (virtual != null) {
          pieces=virtual.getLong("piecesIncluded");
        }
      }
      if (pieces != null) {
        piecesIncluded=pieces.longValue();
      }
    }
  }
  return piecesIncluded;
}
