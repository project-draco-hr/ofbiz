{
  Map featureMap=new HashMap();
  List validItems=getValidOrderItems(shipGroupSeqId);
  if (validItems != null) {
    Iterator i=validItems.iterator();
    while (i.hasNext()) {
      GenericValue item=(GenericValue)i.next();
      List featureAppls=null;
      if (item.get("productId") != null) {
        try {
          featureAppls=item.getDelegator().findByAndCache("ProductFeatureAppl",UtilMisc.toMap("productId",item.getString("productId")));
          List filterExprs=UtilMisc.toList(new EntityExpr("productFeatureApplTypeId",EntityOperator.EQUALS,"STANDARD_FEATURE"));
          filterExprs.add(new EntityExpr("productFeatureApplTypeId",EntityOperator.EQUALS,"REQUIRED_FEATURE"));
          featureAppls=EntityUtil.filterByOr(featureAppls,filterExprs);
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"Unable to get ProductFeatureAppl for item : " + item,module);
        }
        if (featureAppls != null) {
          Iterator fai=featureAppls.iterator();
          while (fai.hasNext()) {
            GenericValue appl=(GenericValue)fai.next();
            Double lastQuantity=(Double)featureMap.get(appl.getString("productFeatureId"));
            if (lastQuantity == null) {
              lastQuantity=new Double(0);
            }
            Double newQuantity=new Double(lastQuantity.doubleValue() + getOrderItemQuantity(item).doubleValue());
            featureMap.put(appl.getString("productFeatureId"),newQuantity);
          }
        }
      }
      List additionalFeatures=null;
      try {
        additionalFeatures=item.getRelatedByAnd("OrderAdjustment",UtilMisc.toMap("orderAdjustmentTypeId","ADDITIONAL_FEATURE"));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Unable to get OrderAdjustment from item : " + item,module);
      }
      if (additionalFeatures != null) {
        Iterator afi=additionalFeatures.iterator();
        while (afi.hasNext()) {
          GenericValue adj=(GenericValue)afi.next();
          String featureId=adj.getString("productFeatureId");
          if (featureId != null) {
            Double lastQuantity=(Double)featureMap.get(featureId);
            if (lastQuantity == null) {
              lastQuantity=new Double(0);
            }
            Double newQuantity=new Double(lastQuantity.doubleValue() + getOrderItemQuantity(item).doubleValue());
            featureMap.put(featureId,newQuantity);
          }
        }
      }
    }
  }
  return featureMap;
}
