{
  List<GenericValue> digitalItems=FastList.newInstance();
  List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"ITEM_APPROVED"),EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"ITEM_COMPLETED"));
  List<GenericValue> items=EntityUtil.filterByOr(getOrderItems(),exprs);
  for (  GenericValue item : items) {
    if (item.get("productId") != null) {
      GenericValue product=null;
      try {
        product=item.getRelatedOne("Product",false);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Unable to get Product from OrderItem",module);
      }
      if (product != null) {
        GenericValue productType=null;
        try {
          productType=product.getRelatedOne("ProductType",false);
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"ERROR: Unable to get ProductType from Product",module);
        }
        if (productType != null) {
          String isDigital=productType.getString("isDigital");
          if (isDigital != null && "Y".equalsIgnoreCase(isDigital)) {
            List<GenericValue> orderItemBillings=null;
            try {
              orderItemBillings=item.getRelated("OrderItemBilling");
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,"Unable to get OrderItemBilling from OrderItem");
            }
            if (UtilValidate.isNotEmpty(orderItemBillings)) {
              List<GenericValue> productContents=null;
              try {
                productContents=product.getRelated("ProductContent");
              }
 catch (              GenericEntityException e) {
                Debug.logError("Unable to get ProductContent from Product",module);
              }
              List<EntityExpr> cExprs=UtilMisc.toList(EntityCondition.makeCondition("productContentTypeId",EntityOperator.EQUALS,"DIGITAL_DOWNLOAD"),EntityCondition.makeCondition("productContentTypeId",EntityOperator.EQUALS,"FULFILLMENT_EMAIL"),EntityCondition.makeCondition("productContentTypeId",EntityOperator.EQUALS,"FULFILLMENT_EXTERNAL"));
              productContents=EntityUtil.filterByDate(productContents);
              productContents=EntityUtil.filterByOr(productContents,cExprs);
              if (UtilValidate.isNotEmpty(productContents)) {
                for (                GenericValue productContent : productContents) {
                  Timestamp fromDate=productContent.getTimestamp("purchaseFromDate");
                  Timestamp thruDate=productContent.getTimestamp("purchaseThruDate");
                  if (fromDate == null || item.getTimestamp("orderDate").after(fromDate)) {
                    if (thruDate == null || item.getTimestamp("orderDate").before(thruDate)) {
                      digitalItems.add(item);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return digitalItems;
}
