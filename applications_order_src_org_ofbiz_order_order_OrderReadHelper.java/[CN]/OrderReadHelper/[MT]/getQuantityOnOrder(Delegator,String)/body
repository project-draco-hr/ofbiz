{
  BigDecimal quantity=BigDecimal.ZERO;
  List<EntityExpr> openOrdersExprs=UtilMisc.toList(EntityCondition.makeCondition("orderTypeId",EntityOperator.EQUALS,"PURCHASE_ORDER"));
  openOrdersExprs.add(EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_CANCELLED"));
  openOrdersExprs.add(EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_REJECTED"));
  openOrdersExprs.add(EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_COMPLETED"));
  openOrdersExprs.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));
  EntityCondition openOrdersCond=EntityCondition.makeCondition(openOrdersExprs,EntityOperator.AND);
  List<GenericValue> openOrders=null;
  try {
    openOrders=delegator.findList("OrderHeaderAndItems",openOrdersCond,null,null,null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (UtilValidate.isNotEmpty(openOrders)) {
    Iterator<GenericValue> i=openOrders.iterator();
    while (i.hasNext()) {
      GenericValue order=i.next();
      BigDecimal thisQty=order.getBigDecimal("quantity");
      if (thisQty == null) {
        thisQty=BigDecimal.ZERO;
      }
      quantity=quantity.add(thisQty);
    }
  }
  return quantity;
}
