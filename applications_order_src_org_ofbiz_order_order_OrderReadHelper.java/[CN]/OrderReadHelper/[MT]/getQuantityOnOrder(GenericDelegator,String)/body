{
  double quantity=0.0;
  List openOrdersExprs=UtilMisc.toList(EntityCondition.makeCondition("orderTypeId",EntityOperator.EQUALS,"PURCHASE_ORDER"));
  openOrdersExprs.add(EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_CANCELLED"));
  openOrdersExprs.add(EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_REJECTED"));
  openOrdersExprs.add(EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_COMPLETED"));
  openOrdersExprs.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));
  EntityCondition openOrdersCond=EntityCondition.makeCondition(openOrdersExprs,EntityOperator.AND);
  List openOrders=null;
  try {
    openOrders=delegator.findList("OrderHeaderAndItems",openOrdersCond,null,null,null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (UtilValidate.isNotEmpty(openOrders)) {
    Iterator i=openOrders.iterator();
    while (i.hasNext()) {
      GenericValue order=(GenericValue)i.next();
      Double thisQty=order.getDouble("quantity");
      if (thisQty == null) {
        thisQty=new Double(0);
      }
      quantity+=thisQty.doubleValue();
    }
  }
  return quantity;
}
