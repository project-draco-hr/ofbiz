{
  List returnedItemsBase=getOrderReturnItems();
  List returnedItems=new ArrayList(returnedItemsBase.size());
  returnedItems.addAll(EntityUtil.filterByAnd(returnedItemsBase,UtilMisc.toMap("statusId","RETURN_RECEIVED")));
  returnedItems.addAll(EntityUtil.filterByAnd(returnedItemsBase,UtilMisc.toMap("statusId","RETURN_COMPLETED")));
  Map itemReturnedQuantities=new HashMap();
  Iterator i=returnedItems.iterator();
  while (i.hasNext()) {
    GenericValue returnedItem=(GenericValue)i.next();
    String orderItemSeqId=returnedItem.getString("orderItemSeqId");
    BigDecimal returnedQuantity=returnedItem.getBigDecimal("returnQuantity");
    if (orderItemSeqId != null && returnedQuantity != null) {
      BigDecimal existingQuantity=(BigDecimal)itemReturnedQuantities.get(orderItemSeqId);
      if (existingQuantity == null) {
        itemReturnedQuantities.put(orderItemSeqId,returnedQuantity);
      }
 else {
        itemReturnedQuantities.put(orderItemSeqId,returnedQuantity.add(existingQuantity));
      }
    }
  }
  BigDecimal totalSubTotalNotReturned=ZERO;
  BigDecimal totalTaxNotReturned=ZERO;
  BigDecimal totalShippingNotReturned=ZERO;
  Iterator orderItems=this.getValidOrderItems().iterator();
  while (orderItems.hasNext()) {
    GenericValue orderItem=(GenericValue)orderItems.next();
    BigDecimal itemQuantityDbl=orderItem.getBigDecimal("quantity");
    if (itemQuantityDbl == null) {
      continue;
    }
    BigDecimal itemQuantity=itemQuantityDbl;
    BigDecimal itemSubTotal=this.getOrderItemSubTotalBd(orderItem);
    BigDecimal itemTaxes=this.getOrderItemTaxBd(orderItem);
    BigDecimal itemShipping=this.getOrderItemShippingBd(orderItem);
    BigDecimal quantityReturnedDouble=(BigDecimal)itemReturnedQuantities.get(orderItem.get("orderItemSeqId"));
    BigDecimal quantityReturned=ZERO;
    if (quantityReturnedDouble != null) {
      quantityReturned=quantityReturnedDouble;
    }
    BigDecimal quantityNotReturned=itemQuantity.subtract(quantityReturned);
    BigDecimal factorNotReturned=quantityNotReturned.divide(itemQuantity,100,rounding);
    BigDecimal subTotalNotReturned=itemSubTotal.multiply(factorNotReturned).setScale(scale,rounding);
    BigDecimal itemTaxNotReturned=itemTaxes.multiply(factorNotReturned).setScale(scale,rounding);
    BigDecimal itemShippingNotReturned=itemShipping.multiply(factorNotReturned).setScale(scale,rounding);
    totalSubTotalNotReturned=totalSubTotalNotReturned.add(subTotalNotReturned);
    totalTaxNotReturned=totalTaxNotReturned.add(itemTaxNotReturned);
    totalShippingNotReturned=totalShippingNotReturned.add(itemShippingNotReturned);
  }
  BigDecimal orderItemsSubTotal=this.getOrderItemsSubTotalBd();
  BigDecimal orderFactorNotReturned=ZERO;
  if (orderItemsSubTotal.signum() != 0) {
    orderFactorNotReturned=totalSubTotalNotReturned.divide(orderItemsSubTotal,100,rounding);
  }
  BigDecimal orderTaxNotReturned=this.getHeaderTaxTotalBd().multiply(orderFactorNotReturned).setScale(scale,rounding);
  BigDecimal orderShippingNotReturned=this.getShippingTotalBd().multiply(orderFactorNotReturned).setScale(scale,rounding);
  return totalTaxNotReturned.add(totalShippingNotReturned).add(orderTaxNotReturned).add(orderShippingNotReturned).setScale(scale,rounding);
}
