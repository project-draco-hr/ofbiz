{
  List<GenericValue> returnedItemsBase=getOrderReturnItems();
  List<GenericValue> returnedItems=new ArrayList<GenericValue>(returnedItemsBase.size());
  List<EntityExpr> orderItemExprs=UtilMisc.toList(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_PROD_ITEM"));
  orderItemExprs.add(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_FPROD_ITEM"));
  orderItemExprs.add(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_DPROD_ITEM"));
  orderItemExprs.add(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_FDPROD_ITEM"));
  orderItemExprs.add(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_PROD_FEATR_ITEM"));
  orderItemExprs.add(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_SPROD_ITEM"));
  orderItemExprs.add(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_WE_ITEM"));
  orderItemExprs.add(EntityCondition.makeCondition("returnItemTypeId",EntityOperator.EQUALS,"RET_TE_ITEM"));
  returnedItemsBase=EntityUtil.filterByOr(returnedItemsBase,orderItemExprs);
  returnedItems.addAll(EntityUtil.filterByAnd(returnedItemsBase,UtilMisc.toMap("statusId","RETURN_RECEIVED")));
  returnedItems.addAll(EntityUtil.filterByAnd(returnedItemsBase,UtilMisc.toMap("statusId","RETURN_COMPLETED")));
  BigDecimal returnedQuantity=ZERO;
  Iterator<GenericValue> i=returnedItems.iterator();
  while (i.hasNext()) {
    GenericValue returnedItem=i.next();
    if (returnedItem.get("returnQuantity") != null) {
      returnedQuantity=returnedQuantity.add(returnedItem.getBigDecimal("returnQuantity")).setScale(scale,rounding);
    }
  }
  return returnedQuantity.setScale(scale,rounding);
}
