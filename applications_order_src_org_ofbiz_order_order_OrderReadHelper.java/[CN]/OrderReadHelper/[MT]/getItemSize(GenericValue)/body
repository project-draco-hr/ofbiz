{
  Delegator delegator=orderHeader.getDelegator();
  BigDecimal size=BigDecimal.ZERO;
  GenericValue product=null;
  try {
    product=item.getRelatedOne("Product");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting Product from OrderItem",module);
    return BigDecimal.ZERO;
  }
  if (product != null) {
    if (ProductWorker.shippingApplies(product)) {
      BigDecimal height=product.getBigDecimal("shippingHeight");
      BigDecimal width=product.getBigDecimal("shippingWidth");
      BigDecimal depth=product.getBigDecimal("shippingDepth");
      String isVariant=product.getString("isVariant");
      if ((height == null || width == null || depth == null) && "Y".equals(isVariant)) {
        try {
          String virtualId=ProductWorker.getVariantVirtualId(product);
          if (UtilValidate.isNotEmpty(virtualId)) {
            GenericValue virtual=delegator.findByPrimaryKeyCache("Product",UtilMisc.toMap("productId",virtualId));
            if (virtual != null) {
              if (height == null)               height=virtual.getBigDecimal("shippingHeight");
              if (width == null)               width=virtual.getBigDecimal("shippingWidth");
              if (depth == null)               depth=virtual.getBigDecimal("shippingDepth");
            }
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"Problem getting virtual product");
        }
      }
      if (height == null)       height=BigDecimal.ZERO;
      if (width == null)       width=BigDecimal.ZERO;
      if (depth == null)       depth=BigDecimal.ZERO;
      BigDecimal[] sizeInfo={height,width,depth};
      Arrays.sort(sizeInfo);
      size=sizeInfo[0].multiply(new BigDecimal("2")).add(sizeInfo[1].multiply(new BigDecimal("2"))).add(sizeInfo[2]);
    }
  }
  return size;
}
