{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Map<String,String> shipmentMap=new HashMap<String,String>();
  EntityListIterator eli=null;
  try {
    eli=EntityQuery.use(delegator).from("OdbcPackageIn").orderBy("shipmentId","shipmentPackageSeqId","voidIndicator").queryIterator();
    GenericValue pkgInfo;
    while ((pkgInfo=eli.next()) != null) {
      String packageSeqId=pkgInfo.getString("shipmentPackageSeqId");
      String shipmentId=pkgInfo.getString("shipmentId");
      GenericValue shipmentPackage=EntityQuery.use(delegator).from("ShipmentPackage").where("shipmentId",shipmentId,"shipmentPackageSeqId",packageSeqId).queryOne();
      if (shipmentPackage != null) {
        if ("00001".equals(packageSeqId)) {
          GenericValue rtSeg=null;
          try {
            rtSeg=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId","00001").queryOne();
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
          if (rtSeg == null) {
            rtSeg=delegator.makeValue("ShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId","00001"));
            try {
              delegator.create(rtSeg);
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              return ServiceUtil.returnError(e.getMessage());
            }
          }
          rtSeg.set("actualStartDate",pkgInfo.get("shippedDate"));
          rtSeg.set("billingWeight",pkgInfo.get("billingWeight"));
          rtSeg.set("actualCost",pkgInfo.get("shippingTotal"));
          rtSeg.set("trackingIdNumber",pkgInfo.get("trackingNumber"));
          try {
            delegator.store(rtSeg);
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
        }
        Map<String,Object> pkgCtx=new HashMap<String,Object>();
        pkgCtx.put("shipmentId",shipmentId);
        pkgCtx.put("shipmentPackageSeqId",packageSeqId);
        GenericValue pkg=null;
        try {
          pkg=EntityQuery.use(delegator).from("ShipmentPackage").where(pkgCtx).queryOne();
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
        if (pkg == null) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductShipmentPackageNotFound",UtilMisc.toMap("shipmentPackageSeqId",packageSeqId,"shipmentId",shipmentId),locale));
        }
        pkg.set("weight",pkgInfo.get("packageWeight"));
        try {
          delegator.store(pkg);
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
        pkgCtx.put("shipmentRouteSegmentId","00001");
        GenericValue pkgRtSeg=null;
        try {
          pkgRtSeg=EntityQuery.use(delegator).from("ShipmentPackageRouteSeg").where(pkgCtx).queryOne();
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
        if (pkgRtSeg == null) {
          pkgRtSeg=delegator.makeValue("ShipmentPackageRouteSeg",pkgCtx);
          try {
            delegator.create(pkgRtSeg);
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
        }
        pkgRtSeg.set("trackingCode",pkgInfo.get("trackingNumber"));
        pkgRtSeg.set("boxNumber",pkgInfo.get("shipmentPackageSeqId"));
        pkgRtSeg.set("packageServiceCost",pkgInfo.get("packageTotal"));
        try {
          delegator.store(pkgRtSeg);
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
        shipmentMap.put(shipmentId,pkgInfo.getString("voidIndicator"));
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
 finally {
    if (eli != null) {
      try {
        eli.close();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
    }
  }
  for (  Map.Entry<String,String> entry : shipmentMap.entrySet()) {
    String shipmentId=entry.getKey();
    String voidInd=entry.getValue();
    Map<String,Object> shipCtx=new HashMap<String,Object>();
    shipCtx.put("shipmentId",shipmentId);
    if ("Y".equals(voidInd)) {
      shipCtx.put("statusId","SHIPMENT_CANCELLED");
    }
 else {
      shipCtx.put("statusId","SHIPMENT_SHIPPED");
    }
    shipCtx.put("userLogin",userLogin);
    Map<String,Object> shipResp=null;
    try {
      shipResp=dispatcher.runSync("updateShipment",shipCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (ServiceUtil.isError(shipResp)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(shipResp));
    }
    Map<String,Object> clearResp=null;
    try {
      clearResp=dispatcher.runSync("clearShipmentStaging",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"userLogin",userLogin));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (ServiceUtil.isError(clearResp)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(clearResp));
    }
  }
  return ServiceUtil.returnSuccess();
}
