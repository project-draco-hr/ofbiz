{
  GenericDelegator delegator=dctx.getDelegator();
  Properties props=getProperties(context);
  ValueLinkApi vl=ValueLinkApi.getInstance(delegator,props);
  vl.reload();
  String testString=(String)context.get("kekTest");
  Integer mode=(Integer)context.get("mode");
  byte[] testBytes=StringUtil.fromHexString(testString);
  byte[] testEncryption=new byte[0];
  String desc="";
  if (mode.intValue() == 1) {
    testEncryption=vl.encryptViaKek(testBytes);
    desc="Encrypted";
  }
 else {
    testEncryption=vl.decryptViaKek(testBytes);
    desc="Decrypted";
  }
  StringBuffer buf=new StringBuffer();
  buf.append("======== Begin Test String (" + testString.length() + ") ========\n");
  buf.append(testString + "\n");
  buf.append("======== End Test String ========\n\n");
  buf.append("======== Begin Test Bytes (" + testBytes.length + ") ========\n");
  buf.append(StringUtil.toHexString(testBytes) + "\n");
  buf.append("======== End Test Bytes ========\n\n");
  buf.append("======== Begin Test Bytes " + desc + " ("+ testEncryption.length+ ") ========\n");
  buf.append(StringUtil.toHexString(testEncryption) + "\n");
  buf.append("======== End Test Bytes " + desc + " ========\n\n");
  String output=buf.toString();
  Debug.log(":: KEK Test Output ::\n\n" + output,module);
  Map result=ServiceUtil.returnSuccess();
  result.put("output",output);
  return result;
}
