{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericValue orderItem=(GenericValue)context.get("orderItem");
  Locale locale=(Locale)context.get("locale");
  String orderId=orderItem.getString("orderId");
  GenericValue orderHeader=null;
  try {
    orderHeader=orderItem.getRelatedOne("OrderHeader");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to get OrderHeader from OrderItem",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  String currency=orh.getCurrency();
  if (currency == null) {
    currency=EntityUtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD",delegator);
  }
  String productStoreId=null;
  if (orderHeader != null) {
    productStoreId=orh.getProductStoreId();
  }
  if (productStoreId == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCannotProcess",UtilMisc.toMap("orderId",orderId),locale));
  }
  GenericValue paymentSetting=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStoreId,"GIFT_CARD",null,true);
  String paymentConfig=null;
  if (paymentSetting != null) {
    paymentConfig=paymentSetting.getString("paymentPropertiesPath");
  }
  if (paymentConfig == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCannotGetPaymentConfiguration",locale));
  }
  GenericValue placingParty=orh.getPlacingParty();
  String partyId=null;
  if (placingParty != null) {
    partyId=placingParty.getString("partyId");
  }
  BigDecimal amount=orderItem.getBigDecimal("unitPrice");
  String surveyId=UtilProperties.getPropertyValue(paymentConfig,"payment.giftcert.reload.surveyId");
  GenericValue surveyResponse=null;
  try {
    Map<String,Object> fields=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"surveyId",surveyId);
    List<String> order=UtilMisc.toList("-responseDate");
    List<GenericValue> responses=delegator.findByAnd("SurveyResponse",fields,order);
    surveyResponse=EntityUtil.getFirst(responses);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCannotFulfill",locale));
  }
  List<GenericValue> responseAnswers=null;
  try {
    responseAnswers=surveyResponse.getRelated("SurveyResponseAnswer");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCannotFulfillFromSurveyAnswers",locale));
  }
  Map<String,Object> answerMap=FastMap.newInstance();
  if (responseAnswers != null) {
    for (    GenericValue answer : responseAnswers) {
      GenericValue question=null;
      try {
        question=answer.getRelatedOne("SurveyQuestion");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCannotFulfillFromSurveyAnswers",locale));
      }
      if (question != null) {
        String desc=question.getString("description");
        String ans=answer.getString("textResponse");
        answerMap.put(desc,ans);
      }
    }
  }
  String cardNumberKey=UtilProperties.getPropertyValue(paymentConfig,"payment.giftcert.reload.survey.cardNumber");
  String pinNumberKey=UtilProperties.getPropertyValue(paymentConfig,"payment.giftcert.reload.survey.pinNumber");
  String cardNumber=(String)answerMap.get(cardNumberKey);
  String pinNumber=(String)answerMap.get(pinNumberKey);
  Map<String,Object> reloadCtx=FastMap.newInstance();
  reloadCtx.put("paymentConfig",paymentConfig);
  reloadCtx.put("currency",currency);
  reloadCtx.put("partyId",partyId);
  reloadCtx.put("orderId",orderId);
  reloadCtx.put("cardNumber",cardNumber);
  reloadCtx.put("pin",pinNumber);
  reloadCtx.put("amount",amount);
  reloadCtx.put("userLogin",userLogin);
  Map<String,Object> reloadResult=null;
  try {
    reloadResult=dispatcher.runSync("reloadGiftCard",reloadCtx);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Unable to reload gift card",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingValueLinkUnableToReloadGiftCard",locale));
  }
  Map<String,Object> vlFulFill=FastMap.newInstance();
  vlFulFill.put("typeEnumId","GC_RELOAD");
  vlFulFill.put("merchantId",UtilProperties.getPropertyValue(paymentConfig,"payment.valuelink.merchantId"));
  vlFulFill.put("partyId",partyId);
  vlFulFill.put("orderId",orderId);
  vlFulFill.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
  vlFulFill.put("surveyResponseId",surveyResponse.get("surveyResponseId"));
  vlFulFill.put("cardNumber",cardNumber);
  vlFulFill.put("pinNumber",pinNumber);
  vlFulFill.put("amount",amount);
  vlFulFill.put("responseCode",reloadResult.get("responseCode"));
  vlFulFill.put("referenceNum",reloadResult.get("referenceNum"));
  vlFulFill.put("authCode",reloadResult.get("authCode"));
  vlFulFill.put("userLogin",userLogin);
  try {
    dispatcher.runAsync("createGcFulFillmentRecord",vlFulFill,true);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCannotStoreFulfillmentInfo",locale));
  }
  Boolean processResult=(Boolean)reloadResult.get("processResult");
  if (reloadResult == null || reloadResult.containsKey(ModelService.ERROR_MESSAGE) || !processResult.booleanValue()) {
    Debug.logError("Reload Failed Need to Refund : " + reloadResult,module);
    try {
      Map<String,Object> refundCtx=UtilMisc.<String,Object>toMap("orderItem",orderItem,"partyId",partyId,"userLogin",userLogin);
      dispatcher.runAsync("refundGcPurchase",refundCtx,null,true,300,true);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"ERROR! Unable to call create refund service; this failed reload will NOT be refunded",module);
    }
    String responseCode="-1";
    if (processResult != null) {
      responseCode=(String)reloadResult.get("responseCode");
    }
    if ("17".equals(responseCode)) {
      Debug.logError("Error code : " + responseCode + " : Max Balance Exceeded",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingValueLinkUnableToRefundGiftCardMaxBalanceExceeded",locale));
    }
 else {
      Debug.logError("Error code : " + responseCode + " : Processing Error",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingValueLinkUnableToReloadGiftCardFailed",locale));
    }
  }
  answerMap.put("processResult",reloadResult.get("processResult"));
  answerMap.put("responseCode",reloadResult.get("responseCode"));
  answerMap.put("previousAmount",reloadResult.get("previousAmount"));
  answerMap.put("amount",reloadResult.get("amount"));
  GenericValue productStoreEmail=null;
  String emailType="PRDS_GC_RELOAD";
  try {
    productStoreEmail=delegator.findByPrimaryKey("ProductStoreEmailSetting",UtilMisc.toMap("productStoreId",productStoreId,"emailType",emailType));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to get product store email setting for gift card purchase",module);
  }
  if (productStoreEmail == null) {
    Debug.logError("No gift card purchase email setting found for this store; cannot send gift card information",module);
  }
 else {
    Map<String,Object> emailCtx=FastMap.newInstance();
    ResourceBundleMapWrapper uiLabelMap=UtilProperties.getResourceBundleMap("EcommerceUiLabels",locale);
    uiLabelMap.addBottomResourceBundle("OrderUiLabels");
    uiLabelMap.addBottomResourceBundle("CommonUiLabels");
    answerMap.put("uiLabelMap",uiLabelMap);
    answerMap.put("locale",locale);
    String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
    if (UtilValidate.isEmpty(bodyScreenLocation)) {
      bodyScreenLocation=ProductStoreWorker.getDefaultProductStoreEmailScreenLocation(emailType);
    }
    emailCtx.put("bodyScreenUri",bodyScreenLocation);
    emailCtx.put("bodyParameters",answerMap);
    emailCtx.put("sendTo",orh.getOrderEmailString());
    emailCtx.put("contentType",productStoreEmail.get("contentType"));
    emailCtx.put("sendFrom",productStoreEmail.get("fromAddress"));
    emailCtx.put("sendCc",productStoreEmail.get("ccAddress"));
    emailCtx.put("sendBcc",productStoreEmail.get("bccAddress"));
    emailCtx.put("subject",productStoreEmail.getString("subject"));
    emailCtx.put("userLogin",userLogin);
    try {
      dispatcher.runAsync("sendMailFromScreen",emailCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem sending mail",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingGiftCerticateNumberCannotSendEmailNotice",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
  return ServiceUtil.returnSuccess();
}
