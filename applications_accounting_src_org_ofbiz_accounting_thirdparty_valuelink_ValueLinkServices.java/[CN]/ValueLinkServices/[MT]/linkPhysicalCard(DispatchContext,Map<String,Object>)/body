{
  Delegator delegator=dctx.getDelegator();
  Properties props=getProperties(context);
  String virtualCard=(String)context.get("virtualCard");
  String virtualPin=(String)context.get("virtualPin");
  String physicalCard=(String)context.get("physicalCard");
  String physicalPin=(String)context.get("physicalPin");
  String partyId=(String)context.get("partyId");
  Locale locale=(Locale)context.get("locale");
  ValueLinkApi vl=ValueLinkApi.getInstance(delegator,props);
  Map<String,Object> request=vl.getInitialRequestMap(context);
  request.put("Interface","Link");
  request.put("VCardNo",virtualCard);
  request.put("VPIN",vl.encryptPin(virtualPin));
  request.put("PCardNo",physicalCard);
  request.put("PPIN",vl.encryptPin(physicalPin));
  if (UtilValidate.isNotEmpty(partyId)) {
    request.put("User2",partyId);
  }
  Map<String,Object> response=null;
  try {
    response=vl.send(request);
  }
 catch (  HttpClientException e) {
    Debug.logError(e,"Problem communicating with VL");
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingValueLinkUnableToLinkGiftCard",locale));
  }
  if (response != null) {
    String responseCode=(String)response.get("responsecode");
    Map<String,Object> result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingValueLinkGiftCardActivated",locale));
    if (responseCode.equals("00")) {
      result.put("processResult",Boolean.TRUE);
    }
 else {
      result.put("processResult",Boolean.FALSE);
    }
    result.put("responseCode",responseCode);
    result.put("authCode",response.get("authcode"));
    result.put("amount",vl.getAmount((String)response.get("newbal")));
    result.put("expireDate",response.get("expiredate"));
    result.put("cardClass",response.get("cardclass"));
    result.put("referenceNum",response.get("traceno"));
    Debug.log("Link Result : " + result,module);
    return result;
  }
 else {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingValueLinkReceivedEmptyResponse",locale));
  }
}
