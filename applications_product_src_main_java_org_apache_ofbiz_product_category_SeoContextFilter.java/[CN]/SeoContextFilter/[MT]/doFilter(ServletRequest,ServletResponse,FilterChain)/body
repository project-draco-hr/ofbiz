{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  String uri=httpRequest.getRequestURI();
  boolean forwarded=forwardUri(httpResponse,uri);
  if (forwarded) {
    return;
  }
  URL controllerConfigURL=ConfigXMLReader.getControllerConfigURL(config.getServletContext());
  ControllerConfig controllerConfig=null;
  Map<String,ConfigXMLReader.RequestMap> requestMaps=null;
  try {
    controllerConfig=ConfigXMLReader.getControllerConfig(controllerConfigURL);
    requestMaps=controllerConfig.getRequestMapMap();
  }
 catch (  WebAppConfigurationException e) {
    Debug.logError(e,"Exception thrown while parsing controller.xml file: ",module);
    throw new ServletException(e);
  }
  Set<String> uris=requestMaps.keySet();
  String requestPath=null;
  String contextUri=null;
  if (httpRequest.getAttribute(ControlFilter.FORWARDED_FROM_SERVLET) == null) {
    String allowedPath=config.getInitParameter("allowedPaths");
    String redirectPath=config.getInitParameter("redirectPath");
    String errorCode=config.getInitParameter("errorCode");
    List<String> allowList=StringUtil.split(allowedPath,":");
    requestPath=httpRequest.getServletPath();
    if (requestPath == null)     requestPath="";
    if (requestPath.lastIndexOf("/") > 0) {
      if (requestPath.indexOf("/") == 0) {
        requestPath="/" + requestPath.substring(1,requestPath.indexOf("/",1));
      }
 else {
        requestPath=requestPath.substring(1,requestPath.indexOf("/"));
      }
    }
    String requestInfo=httpRequest.getServletPath();
    if (requestInfo == null)     requestInfo="";
    if (requestInfo.lastIndexOf("/") >= 0) {
      requestInfo=requestInfo.substring(0,requestInfo.lastIndexOf("/")) + "/*";
    }
    StringBuilder contextUriBuffer=new StringBuilder();
    if (httpRequest.getContextPath() != null) {
      contextUriBuffer.append(httpRequest.getContextPath());
    }
    if (httpRequest.getServletPath() != null) {
      contextUriBuffer.append(httpRequest.getServletPath());
    }
    if (httpRequest.getPathInfo() != null) {
      contextUriBuffer.append(httpRequest.getPathInfo());
    }
    contextUri=contextUriBuffer.toString();
    List<String> pathItemList=StringUtil.split(httpRequest.getPathInfo(),"/");
    String viewName="";
    if (pathItemList != null) {
      viewName=pathItemList.get(0);
    }
    String requestUri=UtilHttp.getRequestUriFromTarget(httpRequest.getRequestURI());
    if (!allowList.contains(requestPath) && !allowList.contains(requestInfo) && !allowList.contains(httpRequest.getServletPath())&& !allowList.contains(requestUri)&& !allowList.contains("/" + viewName)&& (UtilValidate.isEmpty(requestPath) && UtilValidate.isEmpty(httpRequest.getServletPath()) && !uris.contains(viewName))) {
      String filterMessage="[Filtered request]: " + contextUri;
      if (redirectPath == null) {
        if (UtilValidate.isEmpty(viewName)) {
          RequestDispatcher rd=request.getRequestDispatcher(SeoControlServlet.defaultPage);
          rd.forward(request,response);
        }
 else {
          int error=404;
          if (UtilValidate.isNotEmpty(errorCode)) {
            try {
              error=Integer.parseInt(errorCode);
            }
 catch (            NumberFormatException nfe) {
              Debug.logWarning(nfe,"Error code specified would not parse to Integer : " + errorCode,module);
            }
          }
          filterMessage=filterMessage + " (" + error+ ")";
          httpResponse.sendError(error,contextUri);
          request.setAttribute("filterRequestUriError",contextUri);
        }
      }
 else {
        filterMessage=filterMessage + " (" + redirectPath+ ")";
        if (!redirectPath.toLowerCase().startsWith("http")) {
          redirectPath=httpRequest.getContextPath() + redirectPath;
        }
        if (uri.equals("") || uri.equals("/")) {
          RequestDispatcher rd=request.getRequestDispatcher(redirectPath);
          rd.forward(request,response);
        }
 else {
          httpResponse.setStatus(SeoConfigUtil.getDefaultResponseCode());
          httpResponse.setHeader("Location",redirectPath);
        }
      }
      Debug.logWarning(filterMessage,module);
      return;
    }
 else     if ((allowList.contains(requestPath) || allowList.contains(requestInfo) || allowList.contains(httpRequest.getServletPath())|| allowList.contains(requestUri)|| allowList.contains("/" + viewName)) && !WebServlets.contains(httpRequest.getServletPath())) {
      request.setAttribute(SeoControlServlet.REQUEST_IN_ALLOW_LIST,Boolean.TRUE);
    }
  }
  chain.doFilter(httpRequest,httpResponse);
}
