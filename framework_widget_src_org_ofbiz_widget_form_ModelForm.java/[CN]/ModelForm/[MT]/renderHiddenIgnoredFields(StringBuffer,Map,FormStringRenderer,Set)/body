{
  Iterator fieldIter=this.fieldList.iterator();
  while (fieldIter.hasNext()) {
    ModelFormField modelFormField=(ModelFormField)fieldIter.next();
    ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
switch (fieldInfo.getFieldType()) {
case ModelFormField.FieldInfo.HIDDEN:
case ModelFormField.FieldInfo.IGNORED:
      if (modelFormField.shouldUse(context)) {
        modelFormField.renderFieldString(buffer,context,formStringRenderer);
        if (alreadyRendered != null)         alreadyRendered.add(modelFormField.getName());
      }
    break;
case ModelFormField.FieldInfo.DISPLAY:
case ModelFormField.FieldInfo.DISPLAY_ENTITY:
  ModelFormField.DisplayField displayField=(ModelFormField.DisplayField)fieldInfo;
if (displayField.getAlsoHidden() && modelFormField.shouldUse(context)) {
  formStringRenderer.renderHiddenField(buffer,context,modelFormField,modelFormField.getEntry(context));
}
break;
case ModelFormField.FieldInfo.HYPERLINK:
ModelFormField.HyperlinkField hyperlinkField=(ModelFormField.HyperlinkField)fieldInfo;
if (hyperlinkField.getAlsoHidden() && modelFormField.shouldUse(context)) {
formStringRenderer.renderHiddenField(buffer,context,modelFormField,modelFormField.getEntry(context));
}
break;
}
}
}
