{
  int maxNumOfColumns=0;
  List<ModelFormField> tempFieldList=FastList.newInstance();
  tempFieldList.addAll(this.fieldList);
  for (int j=0; j < tempFieldList.size(); j++) {
    ModelFormField modelFormField=(ModelFormField)tempFieldList.get(j);
    for (int i=j + 1; i < tempFieldList.size(); i++) {
      ModelFormField curField=(ModelFormField)tempFieldList.get(i);
      if (curField.getName() != null && curField.getName().equals(modelFormField.getName())) {
        tempFieldList.remove(i--);
      }
    }
  }
  Collection fieldListsByPosition=this.getFieldListsByPosition(tempFieldList);
  Iterator fieldListsByPositionIter=fieldListsByPosition.iterator();
  List<Map> fieldRowsByPosition=FastList.newInstance();
  while (fieldListsByPositionIter.hasNext()) {
    int numOfColumns=0;
    List mainFieldList=(List)fieldListsByPositionIter.next();
    List<ModelFormField> innerDisplayHyperlinkFieldsBegin=FastList.newInstance();
    List<ModelFormField> innerFormFields=FastList.newInstance();
    List<ModelFormField> innerDisplayHyperlinkFieldsEnd=FastList.newInstance();
    Iterator displayHyperlinkFieldIter=mainFieldList.iterator();
    boolean inputFieldFound=false;
    while (displayHyperlinkFieldIter.hasNext()) {
      ModelFormField modelFormField=(ModelFormField)displayHyperlinkFieldIter.next();
      ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
      String modelFormFieldTitle=modelFormField.getTitle(context);
      if ("".equals(modelFormFieldTitle)) {
        continue;
      }
      if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
        continue;
      }
      if (fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY_ENTITY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.HYPERLINK) {
        inputFieldFound=true;
        continue;
      }
      if (!inputFieldFound) {
        innerDisplayHyperlinkFieldsBegin.add(modelFormField);
      }
 else {
        innerDisplayHyperlinkFieldsEnd.add(modelFormField);
      }
      numOfColumns++;
    }
    Iterator formFieldIter=mainFieldList.iterator();
    while (formFieldIter.hasNext()) {
      ModelFormField modelFormField=(ModelFormField)formFieldIter.next();
      ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
      if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
        continue;
      }
      if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.DISPLAY || fieldInfo.getFieldType() == ModelFormField.FieldInfo.DISPLAY_ENTITY || fieldInfo.getFieldType() == ModelFormField.FieldInfo.HYPERLINK) {
        continue;
      }
      innerFormFields.add(modelFormField);
    }
    if (innerFormFields.size() > 0) {
      numOfColumns++;
    }
    if (maxNumOfColumns < numOfColumns) {
      maxNumOfColumns=numOfColumns;
    }
    fieldRowsByPosition.add(UtilMisc.toMap("displayBefore",innerDisplayHyperlinkFieldsBegin,"inputFields",innerFormFields,"displayAfter",innerDisplayHyperlinkFieldsEnd));
  }
  Iterator fieldRowsByPositionIt=fieldRowsByPosition.iterator();
  while (fieldRowsByPositionIt.hasNext()) {
    Map listsMap=(Map)fieldRowsByPositionIt.next();
    List innerDisplayHyperlinkFieldsBegin=(List)listsMap.get("displayBefore");
    List innerFormFields=(List)listsMap.get("inputFields");
    List innerDisplayHyperlinkFieldsEnd=(List)listsMap.get("displayAfter");
    int numOfCells=innerDisplayHyperlinkFieldsBegin.size() + innerDisplayHyperlinkFieldsEnd.size() + (innerFormFields.size() > 0 ? 1 : 0);
    int numOfColumnsToSpan=maxNumOfColumns - numOfCells + 1;
    if (numOfColumnsToSpan < 1) {
      numOfColumnsToSpan=1;
    }
    if (numOfCells > 0) {
      formStringRenderer.renderFormatHeaderRowOpen(writer,context,this);
      Iterator innerDisplayHyperlinkFieldsBeginIt=innerDisplayHyperlinkFieldsBegin.iterator();
      while (innerDisplayHyperlinkFieldsBeginIt.hasNext()) {
        ModelFormField modelFormField=(ModelFormField)innerDisplayHyperlinkFieldsBeginIt.next();
        if (innerDisplayHyperlinkFieldsBeginIt.hasNext() || numOfCells > innerDisplayHyperlinkFieldsBegin.size()) {
          formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,this,modelFormField,1);
        }
 else {
          formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,this,modelFormField,numOfColumnsToSpan);
        }
        formStringRenderer.renderFieldTitle(writer,context,modelFormField);
        formStringRenderer.renderFormatHeaderRowCellClose(writer,context,this,modelFormField);
      }
      if (innerFormFields.size() > 0) {
        formStringRenderer.renderFormatHeaderRowFormCellOpen(writer,context,this);
        Iterator innerFormFieldsIt=innerFormFields.iterator();
        while (innerFormFieldsIt.hasNext()) {
          ModelFormField modelFormField=(ModelFormField)innerFormFieldsIt.next();
          if (separateColumns || modelFormField.getSeparateColumn()) {
            formStringRenderer.renderFormatItemRowCellOpen(writer,context,this,modelFormField,1);
          }
          formStringRenderer.renderFieldTitle(writer,context,modelFormField);
          if (separateColumns || modelFormField.getSeparateColumn()) {
            formStringRenderer.renderFormatItemRowCellClose(writer,context,this,modelFormField);
          }
          if (innerFormFieldsIt.hasNext()) {
            if (!separateColumns && !modelFormField.getSeparateColumn()) {
              formStringRenderer.renderFormatHeaderRowFormCellTitleSeparator(writer,context,this,modelFormField,false);
            }
          }
        }
        formStringRenderer.renderFormatHeaderRowFormCellClose(writer,context,this);
      }
      Iterator innerDisplayHyperlinkFieldsEndIt=innerDisplayHyperlinkFieldsEnd.iterator();
      while (innerDisplayHyperlinkFieldsEndIt.hasNext()) {
        ModelFormField modelFormField=(ModelFormField)innerDisplayHyperlinkFieldsEndIt.next();
        if (innerDisplayHyperlinkFieldsEndIt.hasNext() || numOfCells > innerDisplayHyperlinkFieldsEnd.size()) {
          formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,this,modelFormField,1);
        }
 else {
          formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,this,modelFormField,numOfColumnsToSpan);
        }
        formStringRenderer.renderFieldTitle(writer,context,modelFormField);
        formStringRenderer.renderFormatHeaderRowCellClose(writer,context,this,modelFormField);
      }
      formStringRenderer.renderFormatHeaderRowClose(writer,context,this);
    }
  }
  return maxNumOfColumns;
}
