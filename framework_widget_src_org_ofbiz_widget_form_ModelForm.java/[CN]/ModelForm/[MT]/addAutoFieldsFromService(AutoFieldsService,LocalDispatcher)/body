{
  autoFieldsServices.add(autoFieldsService);
  ModelService modelService=null;
  try {
    modelService=dispatcher.getDispatchContext().getModelService(autoFieldsService.serviceName);
  }
 catch (  GenericServiceException e) {
    String errmsg="Error finding Service with name " + autoFieldsService.serviceName + " for auto-fields-service in a form widget";
    Debug.logError(e,errmsg,module);
    throw new IllegalArgumentException(errmsg);
  }
  List modelParams=modelService.getInModelParamList();
  Iterator modelParamIter=modelParams.iterator();
  while (modelParamIter.hasNext()) {
    ModelParam modelParam=(ModelParam)modelParamIter.next();
    if ("userLogin".equals(modelParam.name) || "locale".equals(modelParam.name)) {
      continue;
    }
    if (modelParam.formDisplay) {
      if (UtilValidate.isNotEmpty(modelParam.entityName) && UtilValidate.isNotEmpty(modelParam.fieldName)) {
        ModelEntity modelEntity=delegator.getModelEntity(modelParam.entityName);
        if (modelEntity != null) {
          ModelField modelField=modelEntity.getField(modelParam.fieldName);
          if (modelField != null) {
            ModelFormField modelFormField=this.addFieldFromEntityField(modelEntity,modelField,autoFieldsService.defaultFieldType);
            if (UtilValidate.isNotEmpty(autoFieldsService.mapName)) {
              modelFormField.setMapName(autoFieldsService.mapName);
            }
            continue;
          }
        }
      }
      ModelFormField modelFormField=this.addFieldFromServiceParam(modelService,modelParam,autoFieldsService.defaultFieldType);
      if (UtilValidate.isNotEmpty(autoFieldsService.mapName)) {
        modelFormField.setMapName(autoFieldsService.mapName);
      }
    }
  }
}
