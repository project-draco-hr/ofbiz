{
  this.rowCount=0;
  String lookupName=this.getListName();
  if (UtilValidate.isEmpty(lookupName)) {
    Debug.logError("No value for list or iterator name found.",module);
    return;
  }
  Object obj=context.get(lookupName);
  if (obj == null) {
    Debug.logInfo("No object for list or iterator name:" + lookupName + " found.",module);
    return;
  }
  Iterator iter=null;
  List items=null;
  if (obj instanceof Iterator) {
    iter=(Iterator)obj;
    setPaginate(true);
  }
 else   if (obj instanceof List) {
    items=(List)obj;
    iter=items.listIterator();
    setPaginate(true);
  }
  getListLimits(context,obj);
  int listSize=((Integer)context.get("listSize")).intValue();
  int lowIndex=((Integer)context.get("lowIndex")).intValue();
  int highIndex=((Integer)context.get("highIndex")).intValue();
  if (isOverridenListSize()) {
    lowIndex=0;
    highIndex=((Integer)context.get("viewSize")).intValue();
  }
  if (iter != null) {
    int itemIndex=-1;
    Object item=null;
    while ((item=this.safeNext(iter)) != null) {
      itemIndex++;
      if (itemIndex >= highIndex) {
        break;
      }
      if (itemIndex < lowIndex) {
        continue;
      }
      Map localContext=new HashMap(context);
      if (UtilValidate.isNotEmpty(this.getListEntryName())) {
        localContext.put(this.getListEntryName(),item);
      }
 else {
        Map itemMap=(Map)item;
        localContext.putAll(itemMap);
      }
      ModelFormAction.runSubActions(this.rowActions,localContext);
      localContext.put("itemIndex",new Integer(itemIndex - lowIndex));
      this.resetBshInterpreter(localContext);
      this.rowCount++;
      if (Debug.verboseOn())       Debug.logVerbose("In form got another row, context is: " + localContext,module);
      for (int j=0; j < this.fieldList.size(); j++) {
        ModelFormField modelFormField=(ModelFormField)this.fieldList.get(j);
        if (!modelFormField.isUseWhenEmpty()) {
          boolean shouldUse1=modelFormField.shouldUse(localContext);
          for (int i=j + 1; i < this.fieldList.size(); i++) {
            ModelFormField curField=(ModelFormField)this.fieldList.get(i);
            if (curField.getName() != null && curField.getName().equals(modelFormField.getName())) {
              boolean shouldUse2=curField.shouldUse(localContext);
              if (shouldUse1 == shouldUse2) {
                this.fieldList.remove(i--);
              }
            }
 else {
              continue;
            }
          }
        }
      }
      formStringRenderer.renderFormatItemRowOpen(buffer,localContext,this);
      Iterator innerDisplayHyperlinkFieldIter=this.fieldList.iterator();
      while (innerDisplayHyperlinkFieldIter.hasNext()) {
        ModelFormField modelFormField=(ModelFormField)innerDisplayHyperlinkFieldIter.next();
        ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
        if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
          continue;
        }
        if (fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY_ENTITY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.HYPERLINK) {
          break;
        }
        if (!modelFormField.shouldUse(localContext)) {
          continue;
        }
        formStringRenderer.renderFormatItemRowCellOpen(buffer,localContext,this,modelFormField);
        modelFormField.renderFieldString(buffer,localContext,formStringRenderer);
        formStringRenderer.renderFormatItemRowCellClose(buffer,localContext,this,modelFormField);
      }
      if (!listEnd) {
        formStringRenderer.renderFormatItemRowFormCellOpen(buffer,localContext,this);
      }
      if (formPerItem) {
        formStringRenderer.renderFormOpen(buffer,localContext,this);
      }
      this.renderHiddenIgnoredFields(buffer,localContext,formStringRenderer,null);
      Iterator innerFormFieldIter=this.fieldList.iterator();
      while (innerFormFieldIter.hasNext()) {
        ModelFormField modelFormField=(ModelFormField)innerFormFieldIter.next();
        ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
        if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
          continue;
        }
        if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.DISPLAY || fieldInfo.getFieldType() == ModelFormField.FieldInfo.DISPLAY_ENTITY || fieldInfo.getFieldType() == ModelFormField.FieldInfo.HYPERLINK) {
          continue;
        }
        if (!modelFormField.shouldUse(localContext)) {
          continue;
        }
        if (separateColumns || modelFormField.getSeparateColumn())         formStringRenderer.renderFormatItemRowCellOpen(buffer,localContext,this,modelFormField);
        modelFormField.renderFieldString(buffer,localContext,formStringRenderer);
        if (separateColumns || modelFormField.getSeparateColumn())         formStringRenderer.renderFormatItemRowCellClose(buffer,localContext,this,modelFormField);
      }
      if (formPerItem) {
        formStringRenderer.renderFormClose(buffer,localContext,this);
      }
      if (!listEnd) {
        formStringRenderer.renderFormatItemRowFormCellClose(buffer,localContext,this);
      }
      while (innerDisplayHyperlinkFieldIter.hasNext()) {
        ModelFormField modelFormField=(ModelFormField)innerDisplayHyperlinkFieldIter.next();
        ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
        if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
          continue;
        }
        if (fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY_ENTITY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.HYPERLINK) {
          continue;
        }
        if (!modelFormField.shouldUse(localContext)) {
          continue;
        }
        formStringRenderer.renderFormatItemRowCellOpen(buffer,localContext,this,modelFormField);
        modelFormField.renderFieldString(buffer,localContext,formStringRenderer);
        formStringRenderer.renderFormatItemRowCellClose(buffer,localContext,this,modelFormField);
      }
      formStringRenderer.renderFormatItemRowClose(buffer,localContext,this);
    }
    if ((itemIndex + 1) < highIndex) {
      highIndex=itemIndex + 1;
      context.put("highIndex",new Integer(isOverridenListSize() ? listSize : highIndex));
    }
    context.put("actualPageSize",new Integer(highIndex - lowIndex));
    if (iter instanceof EntityListIterator) {
      try {
        ((EntityListIterator)iter).close();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Error closing list form render EntityListIterator: " + e.toString(),module);
      }
    }
  }
}
