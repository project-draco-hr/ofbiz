{
  Map<String,Object> expanderContext=context;
  StringUtil.SimpleEncoder simpleEncoder=(StringUtil.SimpleEncoder)context.get("simpleEncoder");
  if (simpleEncoder != null) {
    expanderContext=StringUtil.HtmlEncodingMapWrapper.getHtmlEncodingMapWrapper(context,simpleEncoder);
  }
  try {
    Interpreter bsh=this.getBshInterpreter(context);
    for (    AltTarget altTarget : this.altTargets) {
      String useWhen=altTarget.useWhen;
      if (useWhen != null && !useWhen.isEmpty()) {
        useWhen=FlexibleStringExpander.expandString(useWhen,context);
      }
      Object retVal=bsh.eval(StringUtil.convertOperatorSubstitutions(useWhen));
      boolean condTrue=false;
      if (retVal instanceof Boolean) {
        Boolean boolVal=(Boolean)retVal;
        condTrue=boolVal.booleanValue();
      }
 else {
        throw new IllegalArgumentException("Return value from target condition eval was not a Boolean: " + retVal.getClass().getName() + " ["+ retVal+ "] of form "+ this.name);
      }
      if (condTrue && !targetType.equals("inter-app")) {
        return altTarget.targetExdr.expandString(expanderContext);
      }
    }
  }
 catch (  EvalError e) {
    String errmsg="Error evaluating BeanShell target conditions on form " + this.name;
    Debug.logError(e,errmsg,module);
    throw new IllegalArgumentException(errmsg);
  }
  return target.expandString(expanderContext);
}
