{
  String parentResource=formElement.getAttribute("extends-resource");
  String parentForm=formElement.getAttribute("extends");
  if (parentForm.length() > 0) {
    ModelForm parent=null;
    if (parentResource.length() > 0) {
      try {
        parent=FormFactory.getFormFromLocation(parentResource,parentForm,entityModelReader,dispatchContext);
        this.parentFormName=parentForm;
        this.parentFormLocation=parentResource;
      }
 catch (      Exception e) {
        Debug.logError(e,"Failed to load parent form definition '" + parentForm + "' at resource '"+ parentResource+ "'",module);
      }
    }
 else     if (!parentForm.equals(formElement.getAttribute("name"))) {
      Element rootElement=formElement.getOwnerDocument().getDocumentElement();
      List formElements=UtilXml.childElementList(rootElement,"form");
      Iterator formElementIter=formElements.iterator();
      while (formElementIter.hasNext()) {
        Element formElementEntry=(Element)formElementIter.next();
        if (formElementEntry.getAttribute("name").equals(parentForm)) {
          parent=new ModelForm(formElementEntry,entityModelReader,dispatchContext);
          break;
        }
      }
      if (parent == null) {
        Debug.logError("Failed to find parent form definition '" + parentForm + "' in same document.",module);
      }
 else {
        this.parentFormName=parentForm;
        this.parentFormLocation=this.formLocation;
      }
    }
 else {
      Debug.logError("Recursive form definition found for '" + formElement.getAttribute("name") + ".'",module);
    }
    if (parent != null) {
      this.type=parent.type;
      this.target=parent.target;
      this.containerId=parent.containerId;
      this.containerStyle=parent.containerStyle;
      this.focusFieldName=parent.focusFieldName;
      this.title=parent.title;
      this.tooltip=parent.tooltip;
      this.listName=parent.listName;
      this.listEntryName=parent.listEntryName;
      this.tooltip=parent.tooltip;
      this.defaultEntityName=parent.defaultEntityName;
      this.defaultServiceName=parent.defaultServiceName;
      this.formTitleAreaStyle=parent.formTitleAreaStyle;
      this.formWidgetAreaStyle=parent.formWidgetAreaStyle;
      this.defaultTitleAreaStyle=parent.defaultTitleAreaStyle;
      this.defaultWidgetAreaStyle=parent.defaultWidgetAreaStyle;
      this.oddRowStyle=parent.oddRowStyle;
      this.evenRowStyle=parent.evenRowStyle;
      this.defaultTableStyle=parent.defaultTableStyle;
      this.headerRowStyle=parent.headerRowStyle;
      this.defaultTitleStyle=parent.defaultTitleStyle;
      this.defaultWidgetStyle=parent.defaultWidgetStyle;
      this.defaultTooltipStyle=parent.defaultTooltipStyle;
      this.itemIndexSeparator=parent.itemIndexSeparator;
      this.separateColumns=parent.separateColumns;
      this.targetType=parent.targetType;
      this.defaultMapName=parent.defaultMapName;
      this.targetWindowExdr=parent.targetWindowExdr;
      this.hideHeader=parent.hideHeader;
      this.clientAutocompleteFields=parent.clientAutocompleteFields;
      this.altTargets=parent.altTargets;
      this.actions=parent.actions;
      this.rowActions=parent.rowActions;
      Iterator fieldListIter=parent.fieldList.iterator();
      while (fieldListIter.hasNext()) {
        ModelFormField parentChildField=(ModelFormField)fieldListIter.next();
        ModelFormField childField=new ModelFormField(this);
        childField.mergeOverrideModelFormField(parentChildField);
        this.fieldList.add(childField);
        this.fieldMap.put(childField.getName(),childField);
      }
    }
  }
  if (this.type == null || formElement.hasAttribute("type")) {
    this.type=formElement.getAttribute("type");
  }
  if (this.target == null || formElement.hasAttribute("target")) {
    setTarget(formElement.getAttribute("target"));
  }
  if (this.targetWindowExdr == null || formElement.hasAttribute("target-window")) {
    setTargetWindow(formElement.getAttribute("target-window"));
  }
  if (this.containerId == null || formElement.hasAttribute("id")) {
    this.containerId=formElement.getAttribute("id");
  }
  if (this.containerStyle == null || formElement.hasAttribute("style")) {
    this.containerStyle=formElement.getAttribute("style");
  }
  if (this.focusFieldName == null || formElement.hasAttribute("focus-field-name")) {
    this.focusFieldName=formElement.getAttribute("focus-field-name");
  }
  if (this.title == null || formElement.hasAttribute("title")) {
    this.title=formElement.getAttribute("title");
  }
  if (this.tooltip == null || formElement.hasAttribute("tooltip")) {
    this.tooltip=formElement.getAttribute("tooltip");
  }
  if (this.listName == null || formElement.hasAttribute("list-name")) {
    this.listName=formElement.getAttribute("list-name");
  }
  if (UtilValidate.isEmpty(this.listName) && formElement.hasAttribute("list-iterator-name")) {
    this.listName=formElement.getAttribute("list-iterator-name");
  }
  if (this.listEntryName == null || formElement.hasAttribute("list-entry-name")) {
    this.listEntryName=formElement.getAttribute("list-entry-name");
  }
  if (this.defaultMapName == null || formElement.hasAttribute("default-map-name")) {
    this.setDefaultMapName(formElement.getAttribute("default-map-name"));
  }
  if (this.defaultServiceName == null || formElement.hasAttribute("default-service-name")) {
    this.defaultServiceName=formElement.getAttribute("default-service-name");
  }
  if (this.defaultEntityName == null || formElement.hasAttribute("default-entity-name")) {
    this.defaultEntityName=formElement.getAttribute("default-entity-name");
  }
  if (this.formTitleAreaStyle == null || formElement.hasAttribute("form-title-area-style")) {
    this.formTitleAreaStyle=formElement.getAttribute("form-title-area-style");
  }
  if (this.formWidgetAreaStyle == null || formElement.hasAttribute("form-widget-area-style")) {
    this.formWidgetAreaStyle=formElement.getAttribute("form-widget-area-style");
  }
  if (this.defaultTitleAreaStyle == null || formElement.hasAttribute("default-title-area-style")) {
    this.defaultTitleAreaStyle=formElement.getAttribute("default-title-area-style");
  }
  if (this.defaultWidgetAreaStyle == null || formElement.hasAttribute("default-widget-area-style")) {
    this.defaultWidgetAreaStyle=formElement.getAttribute("default-widget-area-style");
  }
  if (this.oddRowStyle == null || formElement.hasAttribute("odd-row-style")) {
    this.oddRowStyle=formElement.getAttribute("odd-row-style");
  }
  if (this.evenRowStyle == null || formElement.hasAttribute("even-row-style")) {
    this.evenRowStyle=formElement.getAttribute("even-row-style");
  }
  if (this.defaultTableStyle == null || formElement.hasAttribute("default-table-style")) {
    this.defaultTableStyle=formElement.getAttribute("default-table-style");
  }
  if (this.headerRowStyle == null || formElement.hasAttribute("header-row-style")) {
    this.headerRowStyle=formElement.getAttribute("header-row-style");
  }
  if (this.defaultTitleStyle == null || formElement.hasAttribute("header-row-style")) {
    this.defaultTitleStyle=formElement.getAttribute("default-title-style");
  }
  if (this.defaultWidgetStyle == null || formElement.hasAttribute("default-widget-style")) {
    this.defaultWidgetStyle=formElement.getAttribute("default-widget-style");
  }
  if (this.defaultTooltipStyle == null || formElement.hasAttribute("default-tooltip-style")) {
    this.defaultTooltipStyle=formElement.getAttribute("default-tooltip-style");
  }
  if (this.itemIndexSeparator == null || formElement.hasAttribute("item-index-separator")) {
    this.itemIndexSeparator=formElement.getAttribute("item-index-separator");
  }
  if (this.targetType == null || formElement.hasAttribute("target-type")) {
    this.targetType=formElement.getAttribute("target-type");
  }
  if (this.defaultRequiredFieldStyle == null || formElement.hasAttribute("default-required-field-style")) {
    this.defaultRequiredFieldStyle=formElement.getAttribute("default-required-field-style");
  }
  if (this.paginateTarget == null || formElement.hasAttribute("paginate-target")) {
    setPaginateTarget(formElement.getAttribute("paginate-target"));
  }
  if (this.paginateTargetAnchor == null || formElement.hasAttribute("paginate-target-anchor")) {
    this.paginateTargetAnchor=formElement.getAttribute("paginate-target-anchor");
  }
  if (this.paginateIndexField == null || formElement.hasAttribute("paginate-index-field")) {
    setPaginateIndexField(formElement.getAttribute("paginate-index-field"));
  }
  if (this.paginateSizeField == null || formElement.hasAttribute("paginate-size-field")) {
    setPaginateSizeField(formElement.getAttribute("paginate-size-field"));
  }
  if (this.overrideListSize == null || formElement.hasAttribute("override-list-size")) {
    this.overrideListSize=new FlexibleStringExpander(formElement.getAttribute("override-list-size"));
  }
  if (this.paginateFirstLabel == null || formElement.hasAttribute("paginate-first-label")) {
    this.paginateFirstLabel=new FlexibleStringExpander(formElement.getAttribute("paginate-first-label"));
  }
  if (this.paginatePreviousLabel == null || formElement.hasAttribute("paginate-previous-label")) {
    this.paginatePreviousLabel=new FlexibleStringExpander(formElement.getAttribute("paginate-previous-label"));
  }
  if (this.paginateNextLabel == null || formElement.hasAttribute("paginate-next-label")) {
    this.paginateNextLabel=new FlexibleStringExpander(formElement.getAttribute("paginate-next-label"));
  }
  if (this.paginateLastLabel == null || formElement.hasAttribute("paginate-last-label")) {
    this.paginateLastLabel=new FlexibleStringExpander(formElement.getAttribute("paginate-last-label"));
  }
  if (this.paginateStyle == null || formElement.hasAttribute("paginate-style")) {
    setPaginateStyle(formElement.getAttribute("paginate-style"));
  }
  this.paginate="true".equals(formElement.getAttribute("paginate"));
  this.skipStart="true".equals(formElement.getAttribute("skip-start"));
  this.skipEnd="true".equals(formElement.getAttribute("skip-end"));
  this.hideHeader="true".equals(formElement.getAttribute("hide-header"));
  this.clientAutocompleteFields=!"false".equals(formElement.getAttribute("client-autocomplete-fields"));
  if (formElement.hasAttribute("separate-columns")) {
    String sepColumns=formElement.getAttribute("separate-columns");
    if (sepColumns != null && sepColumns.equalsIgnoreCase("true"))     separateColumns=true;
  }
  if (formElement.hasAttribute("use-row-submit")) {
    String rowSubmit=formElement.getAttribute("use-row-submit");
    if (rowSubmit != null && rowSubmit.equalsIgnoreCase("true"))     useRowSubmit=true;
  }
  if (formElement.hasAttribute("view-size")) {
    setDefaultViewSize(formElement.getAttribute("view-size"));
  }
  if (this.rowCountExdr == null || formElement.hasAttribute("row-count")) {
    this.rowCountExdr=new FlexibleStringExpander(formElement.getAttribute("row-count"));
  }
  List altTargetElements=UtilXml.childElementList(formElement,"alt-target");
  Iterator altTargetElementIter=altTargetElements.iterator();
  while (altTargetElementIter.hasNext()) {
    Element altTargetElement=(Element)altTargetElementIter.next();
    AltTarget altTarget=new AltTarget(altTargetElement);
    this.addAltTarget(altTarget);
  }
  List autoFieldsServiceElements=UtilXml.childElementList(formElement,"auto-fields-service");
  Iterator autoFieldsServiceElementIter=autoFieldsServiceElements.iterator();
  while (autoFieldsServiceElementIter.hasNext()) {
    Element autoFieldsServiceElement=(Element)autoFieldsServiceElementIter.next();
    AutoFieldsService autoFieldsService=new AutoFieldsService(autoFieldsServiceElement);
    this.addAutoFieldsFromService(autoFieldsService);
  }
  List autoFieldsEntityElements=UtilXml.childElementList(formElement,"auto-fields-entity");
  Iterator autoFieldsEntityElementIter=autoFieldsEntityElements.iterator();
  while (autoFieldsEntityElementIter.hasNext()) {
    Element autoFieldsEntityElement=(Element)autoFieldsEntityElementIter.next();
    AutoFieldsEntity autoFieldsEntity=new AutoFieldsEntity(autoFieldsEntityElement);
    this.addAutoFieldsFromEntity(autoFieldsEntity);
  }
  List fieldElements=UtilXml.childElementList(formElement,"field");
  Iterator fieldElementIter=fieldElements.iterator();
  String thisType=this.getType();
  while (fieldElementIter.hasNext()) {
    Element fieldElement=(Element)fieldElementIter.next();
    ModelFormField modelFormField=new ModelFormField(fieldElement,this);
    ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
    if (thisType.equals("multi") && fieldInfo instanceof ModelFormField.SubmitField) {
      multiSubmitFields.add(modelFormField);
    }
 else {
      modelFormField=this.addUpdateField(modelFormField);
    }
  }
  defaultFieldGroup=new FieldGroup(null,this);
  Element sortOrderElement=UtilXml.firstChildElement(formElement,"sort-order");
  if (sortOrderElement != null) {
    FieldGroup lastFieldGroup=new FieldGroup(null,this);
    this.fieldGroupList.add(lastFieldGroup);
    List sortFieldElements=UtilXml.childElementList(sortOrderElement);
    Iterator sortFieldElementIter=sortFieldElements.iterator();
    while (sortFieldElementIter.hasNext()) {
      Element sortFieldElement=(Element)sortFieldElementIter.next();
      String tagName=sortFieldElement.getTagName();
      if (tagName.equals("sort-field")) {
        String fieldName=sortFieldElement.getAttribute("name");
        this.sortOrderFields.add(fieldName);
        this.fieldGroupMap.put(fieldName,lastFieldGroup);
      }
 else       if (tagName.equals("banner")) {
        Banner thisBanner=new Banner(sortFieldElement,this);
        this.fieldGroupList.add(thisBanner);
        lastFieldGroup=new FieldGroup(null,this);
        this.fieldGroupList.add(lastFieldGroup);
      }
 else       if (tagName.equals("field-group")) {
        FieldGroup thisFieldGroup=new FieldGroup(sortFieldElement,this);
        this.fieldGroupList.add(thisFieldGroup);
        lastFieldGroup=new FieldGroup(null,this);
        this.fieldGroupList.add(lastFieldGroup);
      }
    }
  }
  if (sortOrderFields.size() > 0) {
    List sortedFields=new ArrayList(this.fieldList.size());
    Iterator sortOrderFieldIter=this.sortOrderFields.iterator();
    while (sortOrderFieldIter.hasNext()) {
      String fieldName=(String)sortOrderFieldIter.next();
      if (UtilValidate.isEmpty(fieldName)) {
        continue;
      }
      Iterator fieldIter=this.fieldList.iterator();
      while (fieldIter.hasNext()) {
        ModelFormField modelFormField=(ModelFormField)fieldIter.next();
        if (fieldName.equals(modelFormField.getName())) {
          fieldIter.remove();
          sortedFields.add(modelFormField);
        }
      }
    }
    sortedFields.addAll(this.fieldList);
    this.fieldList=sortedFields;
  }
  Element actionsElement=UtilXml.firstChildElement(formElement,"actions");
  if (actionsElement != null) {
    this.actions=ModelFormAction.readSubActions(this,actionsElement);
  }
  Element rowActionsElement=UtilXml.firstChildElement(formElement,"row-actions");
  if (rowActionsElement != null) {
    this.rowActions=ModelFormAction.readSubActions(this,rowActionsElement);
  }
}
