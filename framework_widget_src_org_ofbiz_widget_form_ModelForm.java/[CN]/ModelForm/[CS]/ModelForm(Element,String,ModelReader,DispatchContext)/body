{
  super(formElement);
  this.formLocation=formLocation;
  parentModelForm=getParentForm(formElement,entityModelReader,dispatchContext);
  int defaultViewSizeInt=DEFAULT_PAGE_SIZE;
  if (parentModelForm != null) {
    defaultViewSizeInt=parentModelForm.defaultViewSize;
  }
 else {
    defaultViewSizeInt=UtilProperties.getPropertyAsInteger("widget.properties","widget.form.defaultViewSize",defaultViewSizeInt);
  }
  if (formElement.hasAttribute("view-size")) {
    try {
      defaultViewSizeInt=Integer.valueOf(formElement.getAttribute("view-size"));
    }
 catch (    NumberFormatException e) {
    }
  }
  this.defaultViewSize=defaultViewSizeInt;
  String type=null;
  if (formElement.hasAttribute("type")) {
    type=formElement.getAttribute("type");
  }
 else {
    if (parentModelForm != null) {
      type=parentModelForm.type;
    }
  }
  this.type=type;
  FlexibleStringExpander target=FlexibleStringExpander.getInstance(formElement.getAttribute("target"));
  if (target.isEmpty() && parentModelForm != null) {
    target=parentModelForm.target;
  }
  this.target=target;
  String containerId=null;
  if (formElement.hasAttribute("id")) {
    containerId=formElement.getAttribute("id");
  }
 else {
    if (parentModelForm != null) {
      containerId=parentModelForm.containerId;
    }
  }
  this.containerId=containerId;
  String containerStyle="";
  if (formElement.hasAttribute("style")) {
    containerStyle=formElement.getAttribute("style");
  }
 else {
    if (parentModelForm != null) {
      containerStyle=parentModelForm.containerStyle;
    }
  }
  this.containerStyle=containerStyle;
  String title=null;
  if (formElement.hasAttribute("title")) {
    title=formElement.getAttribute("title");
  }
 else {
    if (parentModelForm != null) {
      title=parentModelForm.title;
    }
  }
  this.title=title;
  String tooltip=null;
  if (formElement.hasAttribute("tooltip")) {
    tooltip=formElement.getAttribute("tooltip");
  }
 else {
    if (parentModelForm != null) {
      tooltip=parentModelForm.tooltip;
    }
  }
  this.tooltip=tooltip;
  String listName=DEFAULT_FORM_RESULT_LIST_NAME;
  if (formElement.hasAttribute("list-name")) {
    listName=formElement.getAttribute("list-name");
  }
 else {
    if (parentModelForm != null) {
      listName=parentModelForm.listName;
    }
  }
  this.listName=listName;
  String listEntryName=null;
  if (formElement.hasAttribute("list-entry-name")) {
    listEntryName=formElement.getAttribute("list-entry-name");
  }
 else {
    if (parentModelForm != null) {
      listEntryName=parentModelForm.listEntryName;
    }
  }
  this.listEntryName=listEntryName;
  String defaultEntityName=null;
  if (formElement.hasAttribute("default-entity-name")) {
    defaultEntityName=formElement.getAttribute("default-entity-name");
  }
 else {
    if (parentModelForm != null) {
      defaultEntityName=parentModelForm.defaultEntityName;
    }
  }
  this.defaultEntityName=defaultEntityName;
  String defaultServiceName=null;
  if (formElement.hasAttribute("default-service-name")) {
    defaultServiceName=formElement.getAttribute("default-service-name");
  }
 else {
    if (parentModelForm != null) {
      defaultServiceName=parentModelForm.defaultServiceName;
    }
  }
  this.defaultServiceName=defaultServiceName;
  String formTitleAreaStyle="";
  if (formElement.hasAttribute("form-title-area-style")) {
    formTitleAreaStyle=formElement.getAttribute("form-title-area-style");
  }
 else {
    if (parentModelForm != null) {
      formTitleAreaStyle=parentModelForm.formTitleAreaStyle;
    }
  }
  this.formTitleAreaStyle=formTitleAreaStyle;
  String formWidgetAreaStyle="";
  if (formElement.hasAttribute("form-widget-area-style")) {
    formWidgetAreaStyle=formElement.getAttribute("form-widget-area-style");
  }
 else {
    if (parentModelForm != null) {
      formWidgetAreaStyle=parentModelForm.formWidgetAreaStyle;
    }
  }
  this.formWidgetAreaStyle=formWidgetAreaStyle;
  String defaultTitleAreaStyle="";
  if (formElement.hasAttribute("default-title-area-style")) {
    defaultTitleAreaStyle=formElement.getAttribute("default-title-area-style");
  }
 else {
    if (parentModelForm != null) {
      defaultTitleAreaStyle=parentModelForm.defaultTitleAreaStyle;
    }
  }
  this.defaultTitleAreaStyle=defaultTitleAreaStyle;
  String defaultWidgetAreaStyle="";
  if (formElement.hasAttribute("default-widget-area-style")) {
    defaultWidgetAreaStyle=formElement.getAttribute("default-widget-area-style");
  }
 else {
    if (parentModelForm != null) {
      defaultWidgetAreaStyle=parentModelForm.defaultWidgetAreaStyle;
    }
  }
  this.defaultWidgetAreaStyle=defaultWidgetAreaStyle;
  String oddRowStyle="";
  if (formElement.hasAttribute("odd-row-style")) {
    oddRowStyle=formElement.getAttribute("odd-row-style");
  }
 else {
    if (parentModelForm != null) {
      oddRowStyle=parentModelForm.oddRowStyle;
    }
  }
  this.oddRowStyle=oddRowStyle;
  String evenRowStyle="";
  if (formElement.hasAttribute("even-row-style")) {
    evenRowStyle=formElement.getAttribute("even-row-style");
  }
 else {
    if (parentModelForm != null) {
      evenRowStyle=parentModelForm.evenRowStyle;
    }
  }
  this.evenRowStyle=evenRowStyle;
  String defaultTableStyle="";
  if (formElement.hasAttribute("default-table-style")) {
    defaultTableStyle=formElement.getAttribute("default-table-style");
  }
 else {
    if (parentModelForm != null) {
      defaultTableStyle=parentModelForm.defaultTableStyle;
    }
  }
  this.defaultTableStyle=defaultTableStyle;
  String headerRowStyle="";
  if (formElement.hasAttribute("header-row-style")) {
    headerRowStyle=formElement.getAttribute("header-row-style");
  }
 else {
    if (parentModelForm != null) {
      headerRowStyle=parentModelForm.headerRowStyle;
    }
  }
  this.headerRowStyle=headerRowStyle;
  String defaultTitleStyle="";
  if (formElement.hasAttribute("default-title-style")) {
    defaultTitleStyle=formElement.getAttribute("default-title-style");
  }
 else {
    if (parentModelForm != null) {
      defaultTitleStyle=parentModelForm.defaultTitleStyle;
    }
  }
  this.defaultTitleStyle=defaultTitleStyle;
  String defaultWidgetStyle="";
  if (formElement.hasAttribute("default-widget-style")) {
    defaultWidgetStyle=formElement.getAttribute("default-widget-style");
  }
 else {
    if (parentModelForm != null) {
      defaultWidgetStyle=parentModelForm.defaultWidgetStyle;
    }
  }
  this.defaultWidgetStyle=defaultWidgetStyle;
  String defaultTooltipStyle="";
  if (formElement.hasAttribute("default-tooltip-style")) {
    defaultTooltipStyle=formElement.getAttribute("default-tooltip-style");
  }
 else {
    if (parentModelForm != null) {
      defaultTooltipStyle=parentModelForm.defaultTooltipStyle;
    }
  }
  this.defaultTooltipStyle=defaultTooltipStyle;
  String itemIndexSeparator=null;
  if (formElement.hasAttribute("item-index-separator")) {
    itemIndexSeparator=formElement.getAttribute("item-index-separator");
  }
 else {
    if (parentModelForm != null) {
      itemIndexSeparator=parentModelForm.itemIndexSeparator;
    }
  }
  this.itemIndexSeparator=itemIndexSeparator;
  boolean separateColumns=false;
  if (formElement.hasAttribute("separate-columns")) {
    separateColumns="true".equals(formElement.getAttribute("separate-columns"));
  }
 else {
    if (parentModelForm != null) {
      separateColumns=parentModelForm.separateColumns;
    }
  }
  this.separateColumns=separateColumns;
  boolean groupColumns=false;
  if (formElement.hasAttribute("group-columns")) {
    groupColumns=!"false".equals(formElement.getAttribute("group-columns"));
  }
 else {
    if (parentModelForm != null) {
      groupColumns=parentModelForm.groupColumns;
    }
  }
  this.groupColumns=groupColumns;
  String targetType=null;
  if (formElement.hasAttribute("target-type")) {
    targetType=formElement.getAttribute("target-type");
  }
 else {
    if (parentModelForm != null) {
      targetType=parentModelForm.targetType;
    }
  }
  this.targetType=targetType;
  FlexibleMapAccessor<Map<String,? extends Object>> defaultMapName=FlexibleMapAccessor.getInstance(formElement.getAttribute("default-map-name"));
  if (defaultMapName.isEmpty() && parentModelForm != null) {
    defaultMapName=parentModelForm.defaultMapName;
  }
  this.defaultMapName=defaultMapName;
  FlexibleStringExpander targetWindowExdr=FlexibleStringExpander.getInstance(formElement.getAttribute("target-window"));
  if (targetWindowExdr.isEmpty() && parentModelForm != null) {
    targetWindowExdr=parentModelForm.targetWindowExdr;
  }
  this.targetWindowExdr=targetWindowExdr;
  boolean hideHeader=false;
  if (formElement.hasAttribute("hide-header")) {
    hideHeader="true".equals(formElement.getAttribute("hide-header"));
  }
 else {
    if (parentModelForm != null) {
      hideHeader=parentModelForm.hideHeader;
    }
  }
  this.hideHeader=hideHeader;
  boolean clientAutocompleteFields=true;
  if (formElement.hasAttribute("client-autocomplete-fields")) {
    clientAutocompleteFields=!"false".equals(formElement.getAttribute("client-autocomplete-fields"));
  }
 else {
    if (parentModelForm != null) {
      clientAutocompleteFields=parentModelForm.clientAutocompleteFields;
    }
  }
  this.clientAutocompleteFields=clientAutocompleteFields;
  FlexibleStringExpander paginateTarget=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-target"));
  if (paginateTarget.isEmpty() && parentModelForm != null) {
    paginateTarget=parentModelForm.paginateTarget;
  }
  this.paginateTarget=paginateTarget;
  ArrayList<AltTarget> altTargets=new ArrayList<AltTarget>();
  if (parentModelForm != null) {
    altTargets.addAll(parentModelForm.altTargets);
  }
  for (  Element altTargetElement : UtilXml.childElementList(formElement,"alt-target")) {
    altTargets.add(new AltTarget(altTargetElement));
  }
  altTargets.trimToSize();
  this.altTargets=Collections.unmodifiableList(altTargets);
  ArrayList<ModelWidgetAction> actions=new ArrayList<ModelWidgetAction>();
  if (parentModelForm != null) {
    actions.addAll(parentModelForm.actions);
  }
  Element actionsElement=UtilXml.firstChildElement(formElement,"actions");
  if (actionsElement != null) {
    actions.addAll(ModelFormAction.readSubActions(this,actionsElement));
  }
  actions.trimToSize();
  this.actions=Collections.unmodifiableList(actions);
  ArrayList<ModelWidgetAction> rowActions=new ArrayList<ModelWidgetAction>();
  if (parentModelForm != null) {
    rowActions.addAll(parentModelForm.rowActions);
  }
  Element rowActionsElement=UtilXml.firstChildElement(formElement,"row-actions");
  if (rowActionsElement != null) {
    rowActions.addAll(ModelFormAction.readSubActions(this,rowActionsElement));
  }
  rowActions.trimToSize();
  this.rowActions=Collections.unmodifiableList(rowActions);
  ArrayList<UpdateArea> onPaginateUpdateAreas=new ArrayList<UpdateArea>();
  ArrayList<UpdateArea> onSubmitUpdateAreas=new ArrayList<UpdateArea>();
  ArrayList<UpdateArea> onSortColumnUpdateAreas=new ArrayList<UpdateArea>();
  if (parentModelForm != null) {
    onPaginateUpdateAreas.addAll(parentModelForm.onPaginateUpdateAreas);
    onSubmitUpdateAreas.addAll(parentModelForm.onSubmitUpdateAreas);
    onSortColumnUpdateAreas.addAll(parentModelForm.onSortColumnUpdateAreas);
  }
  for (  Element updateAreaElement : UtilXml.childElementList(formElement,"on-event-update-area")) {
    UpdateArea updateArea=new UpdateArea(updateAreaElement,defaultServiceName,defaultEntityName);
    if ("paginate".equals(updateArea.getEventType())) {
      int index=onPaginateUpdateAreas.indexOf(updateArea);
      if (index != -1) {
        if (!updateArea.areaTarget.isEmpty()) {
          onPaginateUpdateAreas.set(index,updateArea);
        }
 else {
          onPaginateUpdateAreas.remove(index);
        }
      }
 else {
        onPaginateUpdateAreas.add(updateArea);
      }
    }
 else     if ("submit".equals(updateArea.getEventType())) {
      int index=onSubmitUpdateAreas.indexOf(updateArea);
      if (index != -1) {
        onSubmitUpdateAreas.set(index,updateArea);
      }
 else {
        onSubmitUpdateAreas.add(updateArea);
      }
    }
 else     if ("sort-column".equals(updateArea.getEventType())) {
      int index=onSortColumnUpdateAreas.indexOf(updateArea);
      if (index != -1) {
        if (!updateArea.areaTarget.isEmpty()) {
          onSortColumnUpdateAreas.set(index,updateArea);
        }
 else {
          onSortColumnUpdateAreas.remove(index);
        }
      }
 else {
        onSortColumnUpdateAreas.add(updateArea);
      }
    }
  }
  onPaginateUpdateAreas.trimToSize();
  this.onPaginateUpdateAreas=Collections.unmodifiableList(onPaginateUpdateAreas);
  onSubmitUpdateAreas.trimToSize();
  this.onSubmitUpdateAreas=Collections.unmodifiableList(onSubmitUpdateAreas);
  onSortColumnUpdateAreas.trimToSize();
  this.onSortColumnUpdateAreas=Collections.unmodifiableList(onSortColumnUpdateAreas);
  ArrayList<AltRowStyle> altRowStyles=new ArrayList<AltRowStyle>();
  if (parentModelForm != null) {
    altRowStyles.addAll(parentModelForm.altRowStyles);
  }
  for (  Element altRowStyleElement : UtilXml.childElementList(formElement,"alt-row-style")) {
    AltRowStyle altRowStyle=new AltRowStyle(altRowStyleElement);
    altRowStyles.add(altRowStyle);
  }
  altRowStyles.trimToSize();
  this.altRowStyles=Collections.unmodifiableList(altRowStyles);
  Set<String> useWhenFields=new HashSet<String>();
  if (parentModelForm != null) {
    useWhenFields.addAll(parentModelForm.useWhenFields);
  }
  ArrayList<ModelFormFieldBuilder> fieldBuilderList=new ArrayList<ModelFormFieldBuilder>();
  Map<String,ModelFormFieldBuilder> fieldBuilderMap=new HashMap<String,ModelFormFieldBuilder>();
  if (parentModelForm != null) {
    for (    ModelFormField parentChildField : parentModelForm.fieldList) {
      ModelFormFieldBuilder builder=new ModelFormFieldBuilder(parentChildField);
      builder.setModelForm(this);
      fieldBuilderList.add(builder);
      fieldBuilderMap.put(builder.getName(),builder);
    }
  }
  Map<String,FieldGroupBase> fieldGroupMap=new HashMap<String,FieldGroupBase>();
  if (parentModelForm != null) {
    fieldGroupMap.putAll(parentModelForm.fieldGroupMap);
  }
  ArrayList<FieldGroupBase> fieldGroupList=new ArrayList<FieldGroupBase>();
  if (parentModelForm != null) {
    fieldGroupList.addAll(parentModelForm.fieldGroupList);
  }
  ArrayList<String> lastOrderFields=new ArrayList<String>();
  if (parentModelForm != null) {
    lastOrderFields.addAll(parentModelForm.lastOrderFields);
  }
  String sortFieldParameterName="sortField";
  if (formElement.hasAttribute("sort-field-parameter-name")) {
    sortFieldParameterName=formElement.getAttribute("sort-field-parameter-name");
  }
 else {
    if (parentModelForm != null) {
      sortFieldParameterName=parentModelForm.targetType;
    }
  }
  this.sortFieldParameterName=sortFieldParameterName;
  String defaultRequiredFieldStyle="";
  if (formElement.hasAttribute("default-required-field-style")) {
    defaultRequiredFieldStyle=formElement.getAttribute("default-required-field-style");
  }
 else {
    if (parentModelForm != null) {
      defaultRequiredFieldStyle=parentModelForm.defaultRequiredFieldStyle;
    }
  }
  this.defaultRequiredFieldStyle=defaultRequiredFieldStyle;
  String defaultSortFieldStyle=DEFAULT_SORT_FIELD_STYLE;
  if (formElement.hasAttribute("default-sort-field-style")) {
    defaultSortFieldStyle=formElement.getAttribute("default-sort-field-style");
  }
 else {
    if (parentModelForm != null) {
      defaultSortFieldStyle=parentModelForm.defaultSortFieldStyle;
    }
  }
  this.defaultSortFieldStyle=defaultSortFieldStyle;
  String defaultSortFieldAscStyle=DEFAULT_SORT_FIELD_ASC_STYLE;
  if (formElement.hasAttribute("default-sort-field-asc-style")) {
    defaultSortFieldAscStyle=formElement.getAttribute("default-sort-field-asc-style");
  }
 else {
    if (parentModelForm != null) {
      defaultSortFieldAscStyle=parentModelForm.defaultSortFieldAscStyle;
    }
  }
  this.defaultSortFieldAscStyle=defaultSortFieldAscStyle;
  String defaultSortFieldDescStyle=DEFAULT_SORT_FIELD_DESC_STYLE;
  if (formElement.hasAttribute("default-sort-field-desc-style")) {
    defaultSortFieldDescStyle=formElement.getAttribute("default-sort-field-desc-style");
  }
 else {
    if (parentModelForm != null) {
      defaultSortFieldDescStyle=parentModelForm.defaultSortFieldDescStyle;
    }
  }
  this.defaultSortFieldDescStyle=defaultSortFieldDescStyle;
  String paginateTargetAnchor=null;
  if (formElement.hasAttribute("paginate-target-anchor")) {
    paginateTargetAnchor=formElement.getAttribute("paginate-target-anchor");
  }
 else {
    if (parentModelForm != null) {
      paginateTargetAnchor=parentModelForm.paginateTargetAnchor;
    }
  }
  this.paginateTargetAnchor=paginateTargetAnchor;
  FlexibleStringExpander paginateIndexField=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-index-field"));
  if (paginateIndexField.isEmpty() && parentModelForm != null) {
    paginateIndexField=parentModelForm.paginateIndexField;
  }
  this.paginateIndexField=paginateIndexField;
  FlexibleStringExpander paginateSizeField=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-size-field"));
  if (paginateSizeField.isEmpty() && parentModelForm != null) {
    paginateSizeField=parentModelForm.paginateSizeField;
  }
  this.paginateSizeField=paginateSizeField;
  FlexibleStringExpander overrideListSize=FlexibleStringExpander.getInstance(formElement.getAttribute("override-list-size"));
  if (overrideListSize.isEmpty() && parentModelForm != null) {
    overrideListSize=parentModelForm.overrideListSize;
  }
  this.overrideListSize=overrideListSize;
  FlexibleStringExpander paginateFirstLabel=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-first-label"));
  if (paginateFirstLabel.isEmpty() && parentModelForm != null) {
    paginateFirstLabel=parentModelForm.paginateFirstLabel;
  }
  this.paginateFirstLabel=paginateFirstLabel;
  FlexibleStringExpander paginatePreviousLabel=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-previous-label"));
  if (paginatePreviousLabel.isEmpty() && parentModelForm != null) {
    paginatePreviousLabel=parentModelForm.paginatePreviousLabel;
  }
  this.paginatePreviousLabel=paginatePreviousLabel;
  FlexibleStringExpander paginateNextLabel=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-next-label"));
  if (paginateNextLabel.isEmpty() && parentModelForm != null) {
    paginateNextLabel=parentModelForm.paginateNextLabel;
  }
  this.paginateNextLabel=paginateNextLabel;
  FlexibleStringExpander paginateLastLabel=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-last-label"));
  if (paginateLastLabel.isEmpty() && parentModelForm != null) {
    paginateLastLabel=parentModelForm.paginateLastLabel;
  }
  this.paginateLastLabel=paginateLastLabel;
  FlexibleStringExpander paginateViewSizeLabel=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate-viewsize-label"));
  if (paginateViewSizeLabel.isEmpty() && parentModelForm != null) {
    paginateViewSizeLabel=parentModelForm.paginateViewSizeLabel;
  }
  this.paginateViewSizeLabel=paginateViewSizeLabel;
  String paginateStyle=DEFAULT_PAG_STYLE;
  if (formElement.hasAttribute("paginate-style")) {
    paginateStyle=formElement.getAttribute("paginate-style");
  }
 else {
    if (parentModelForm != null) {
      paginateStyle=parentModelForm.paginateStyle;
    }
  }
  this.paginateStyle=paginateStyle;
  FlexibleStringExpander paginate=FlexibleStringExpander.getInstance(formElement.getAttribute("paginate"));
  if (paginate.isEmpty() && parentModelForm != null) {
    paginate=parentModelForm.paginate;
  }
  this.paginate=paginate;
  boolean skipStart=false;
  if (formElement.hasAttribute("skip-start")) {
    skipStart="true".equals(formElement.getAttribute("skip-start"));
  }
 else {
    if (parentModelForm != null) {
      skipStart=parentModelForm.skipStart;
    }
  }
  this.skipStart=skipStart;
  boolean skipEnd=false;
  if (formElement.hasAttribute("skip-end")) {
    skipEnd="true".equals(formElement.getAttribute("skip-end"));
  }
 else {
    if (parentModelForm != null) {
      skipEnd=parentModelForm.skipEnd;
    }
  }
  this.skipEnd=skipEnd;
  boolean useRowSubmit=false;
  if (formElement.hasAttribute("use-row-submit")) {
    useRowSubmit="true".equals(formElement.getAttribute("use-row-submit"));
  }
 else {
    if (parentModelForm != null) {
      useRowSubmit=parentModelForm.useRowSubmit;
    }
  }
  this.useRowSubmit=useRowSubmit;
  FlexibleStringExpander rowCountExdr=FlexibleStringExpander.getInstance(formElement.getAttribute("row-count"));
  if (rowCountExdr.isEmpty() && parentModelForm != null) {
    rowCountExdr=parentModelForm.rowCountExdr;
  }
  this.rowCountExdr=paginate;
  ArrayList<ModelFormFieldBuilder> multiSubmitBuilders=new ArrayList<ModelFormFieldBuilder>();
  ArrayList<AutoFieldsService> autoFieldsServices=new ArrayList<AutoFieldsService>();
  ArrayList<AutoFieldsEntity> autoFieldsEntities=new ArrayList<AutoFieldsEntity>();
  ArrayList<SortField> sortOrderFields=new ArrayList<SortField>();
  this.defaultFieldGroup=new FieldGroup(null,this,sortOrderFields,fieldGroupMap);
  for (  Element autoFieldsServiceElement : UtilXml.childElementList(formElement,"auto-fields-service")) {
    AutoFieldsService autoFieldsService=new AutoFieldsService(autoFieldsServiceElement);
    autoFieldsServices.add(autoFieldsService);
    addAutoFieldsFromService(autoFieldsService,entityModelReader,dispatchContext,useWhenFields,fieldBuilderList,fieldBuilderMap);
  }
  for (  Element autoFieldsEntityElement : UtilXml.childElementList(formElement,"auto-fields-entity")) {
    AutoFieldsEntity autoFieldsEntity=new AutoFieldsEntity(autoFieldsEntityElement);
    autoFieldsEntities.add(autoFieldsEntity);
    addAutoFieldsFromEntity(autoFieldsEntity,entityModelReader,useWhenFields,fieldBuilderList,fieldBuilderMap);
  }
  String thisType=this.getType();
  for (  Element fieldElement : UtilXml.childElementList(formElement,"field")) {
    ModelFormFieldBuilder builder=new ModelFormFieldBuilder(fieldElement,this,entityModelReader,dispatchContext);
    FieldInfo fieldInfo=builder.getFieldInfo();
    if (thisType.equals("multi") && fieldInfo instanceof ModelFormField.SubmitField) {
      multiSubmitBuilders.add(builder);
    }
 else {
      addUpdateField(builder,useWhenFields,fieldBuilderList,fieldBuilderMap);
    }
  }
  Element sortOrderElement=UtilXml.firstChildElement(formElement,"sort-order");
  if (sortOrderElement != null) {
    FieldGroup lastFieldGroup=new FieldGroup(null,this,sortOrderFields,fieldGroupMap);
    fieldGroupList.add(lastFieldGroup);
    for (    Element sortFieldElement : UtilXml.childElementList(sortOrderElement)) {
      String tagName=sortFieldElement.getTagName();
      if (tagName.equals("sort-field")) {
        String fieldName=sortFieldElement.getAttribute("name");
        String position=sortFieldElement.getAttribute("position");
        sortOrderFields.add(new SortField(fieldName,position));
        fieldGroupMap.put(fieldName,lastFieldGroup);
      }
 else       if (tagName.equals("last-field")) {
        String fieldName=sortFieldElement.getAttribute("name");
        fieldGroupMap.put(fieldName,lastFieldGroup);
        lastOrderFields.add(fieldName);
      }
 else       if (tagName.equals("banner")) {
        Banner thisBanner=new Banner(sortFieldElement);
        fieldGroupList.add(thisBanner);
        lastFieldGroup=new FieldGroup(null,this,sortOrderFields,fieldGroupMap);
        fieldGroupList.add(lastFieldGroup);
      }
 else       if (tagName.equals("field-group")) {
        FieldGroup thisFieldGroup=new FieldGroup(sortFieldElement,this,sortOrderFields,fieldGroupMap);
        fieldGroupList.add(thisFieldGroup);
        lastFieldGroup=new FieldGroup(null,this,sortOrderFields,fieldGroupMap);
        fieldGroupList.add(lastFieldGroup);
      }
    }
  }
  if (sortOrderFields.size() > 0) {
    ArrayList<ModelFormFieldBuilder> sortedFields=new ArrayList<ModelFormFieldBuilder>();
    for (    SortField sortField : sortOrderFields) {
      String fieldName=sortField.getFieldName();
      if (UtilValidate.isEmpty(fieldName)) {
        continue;
      }
      Iterator<ModelFormFieldBuilder> fieldIter=fieldBuilderList.iterator();
      while (fieldIter.hasNext()) {
        ModelFormFieldBuilder builder=fieldIter.next();
        if (fieldName.equals(builder.getName())) {
          if (UtilValidate.isNotEmpty(sortField.getPosition())) {
            builder.setPosition(sortField.getPosition());
          }
          fieldIter.remove();
          sortedFields.add(builder);
        }
      }
    }
    sortedFields.addAll(fieldBuilderList);
    fieldBuilderList=sortedFields;
  }
  if (UtilValidate.isNotEmpty(lastOrderFields)) {
    List<ModelFormFieldBuilder> lastedFields=new LinkedList<ModelFormFieldBuilder>();
    for (    String fieldName : lastOrderFields) {
      if (UtilValidate.isEmpty(fieldName)) {
        continue;
      }
      Iterator<ModelFormFieldBuilder> fieldIter=fieldBuilderList.iterator();
      while (fieldIter.hasNext()) {
        ModelFormFieldBuilder builder=fieldIter.next();
        if (fieldName.equals(builder.getName())) {
          fieldIter.remove();
          lastedFields.add(builder);
        }
      }
    }
    fieldBuilderList.addAll(lastedFields);
  }
  List<ModelFormField> fieldList=new ArrayList<ModelFormField>(fieldBuilderList.size());
  for (  ModelFormFieldBuilder builder : fieldBuilderList) {
    fieldList.add(builder.build());
  }
  this.fieldList=Collections.unmodifiableList(fieldList);
  List<ModelFormField> multiSubmitFields=new ArrayList<ModelFormField>(multiSubmitBuilders.size());
  for (  ModelFormFieldBuilder builder : multiSubmitBuilders) {
    multiSubmitFields.add(builder.build());
  }
  this.multiSubmitFields=Collections.unmodifiableList(multiSubmitFields);
  this.useWhenFields=Collections.unmodifiableSet(useWhenFields);
  this.fieldGroupMap=Collections.unmodifiableMap(fieldGroupMap);
  fieldGroupList.trimToSize();
  this.fieldGroupList=Collections.unmodifiableList(fieldGroupList);
  lastOrderFields.trimToSize();
  this.lastOrderFields=Collections.unmodifiableList(lastOrderFields);
  autoFieldsServices.trimToSize();
  this.autoFieldsServices=Collections.unmodifiableList(autoFieldsServices);
  autoFieldsEntities.trimToSize();
  this.autoFieldsEntities=Collections.unmodifiableList(autoFieldsEntities);
  sortOrderFields.trimToSize();
  this.sortOrderFields=Collections.unmodifiableList(sortOrderFields);
  String focusFieldName="";
  if (formElement.hasAttribute("focus-field-name")) {
    focusFieldName=formElement.getAttribute("focus-field-name");
  }
 else {
    if (parentModelForm != null) {
      focusFieldName=parentModelForm.focusFieldName;
    }
  }
  this.focusFieldName=focusFieldName;
}
