{
  EntityFindOptions opts=new EntityFindOptions();
  opts.setMaxRows(1);
  opts.setFetchSize(1);
  List<EntityExpr> exprs=FastList.newInstance();
  exprs.add(EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"DEPOSIT"));
  exprs.add(EntityCondition.makeCondition("finAccountId",EntityOperator.EQUALS,finAccountId));
  exprs.add(EntityCondition.makeCondition("orderId",EntityOperator.NOT_EQUAL,null));
  List<String> orderBy=UtilMisc.toList("-transactionDate");
  List<GenericValue> transList=null;
  try {
    transList=delegator.findList("FinAccountTrans",EntityCondition.makeCondition(exprs,EntityOperator.AND),null,orderBy,opts,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  GenericValue trans=EntityUtil.getFirst(transList);
  if (trans != null) {
    String orderId=trans.getString("orderId");
    OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
    return orh.getProductStoreId();
  }
  try {
    GenericValue store=EntityUtil.getFirst(delegator.findList("ProductStore",null,null,UtilMisc.toList("productStoreId"),null,false));
    if (store != null)     return store.getString("productStoreId");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  return null;
}
