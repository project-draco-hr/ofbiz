{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productStoreId=(String)context.get("productStoreId");
  String finAccountId=(String)context.get("finAccountId");
  Boolean isRefund=(Boolean)context.get("isRefund");
  Double amount=(Double)context.get("amount");
  final String DEPOSIT=isRefund == null || !isRefund.booleanValue() ? "DEPOSIT" : "ADJUSTMENT";
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId)) {
    partyId="_NA_";
  }
  String currencyUom=(String)context.get("currency");
  if (UtilValidate.isEmpty(currencyUom)) {
    currencyUom=UtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD");
  }
  GenericValue finAccount;
  try {
    finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (finAccount == null) {
    return ServiceUtil.returnError("Unable to find Financial account for this transaction");
  }
  if ((finAccount.getTimestamp("thruDate") != null) && (finAccount.getTimestamp("thruDate").before(UtilDateTime.nowTimestamp()))) {
    return ServiceUtil.returnError("Financial account has expired as of " + finAccount.getTimestamp("thruDate"));
  }
  Debug.log("Deposit into financial account #" + finAccountId + " ["+ amount+ "]",module);
  BigDecimal previousBalance;
  try {
    previousBalance=FinAccountHelper.getAvailableBalance(finAccountId,delegator);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  BigDecimal balance;
  String refNum;
  try {
    refNum=FinAccountPaymentServices.createFinAcctPaymentTransaction(delegator,dispatcher,userLogin,amount,productStoreId,partyId,currencyUom,DEPOSIT,finAccountId);
    balance=FinAccountHelper.getAvailableBalance(finAccountId,delegator);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Map result=ServiceUtil.returnSuccess();
  result.put("previousBalance",new Double(previousBalance.doubleValue()));
  result.put("balance",new Double(balance.doubleValue()));
  result.put("amount",amount);
  result.put("processResult",Boolean.TRUE);
  result.put("referenceNum",refNum);
  return result;
}
