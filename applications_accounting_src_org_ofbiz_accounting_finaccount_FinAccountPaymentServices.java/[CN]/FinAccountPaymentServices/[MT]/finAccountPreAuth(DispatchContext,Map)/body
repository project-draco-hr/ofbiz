{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericValue paymentPref=(GenericValue)context.get("orderPaymentPreference");
  String finAccountCode=(String)context.get("finAccountCode");
  String finAccountPin=(String)context.get("finAccountPin");
  String finAccountId=(String)context.get("finAccountId");
  String orderId=(String)context.get("orderId");
  Double amount=(Double)context.get("processAmount");
  GenericValue authTrans=PaymentGatewayServices.getAuthTransaction(paymentPref);
  if (authTrans != null) {
    Map input=UtilMisc.toMap("userLogin",userLogin,"finAccountAuthId",authTrans.get("referenceNum"));
    try {
      dispatcher.runSync("expireFinAccountAuth",input);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  if (finAccountId == null && paymentPref != null) {
    finAccountId=paymentPref.getString("finAccountId");
  }
  OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
  String productStoreId=orh.getProductStoreId();
  GenericValue finAccount;
  if (finAccountId != null) {
    try {
      finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
 else {
    if (finAccountCode != null) {
      try {
        finAccount=FinAccountHelper.getFinAccountFromCode(finAccountCode,delegator);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError("Unable to locate financial account from account code");
      }
    }
 else {
      return ServiceUtil.returnError("Both finAccountId and finAccountCode cannot be null; at least one is required");
    }
  }
  if (finAccount == null) {
    return ServiceUtil.returnError("Invalid financial account; cannot locate account");
  }
  String finAccountTypeId=finAccount.getString("finAccountTypeId");
  finAccountId=finAccount.getString("finAccountId");
  try {
    Map findProductStoreFinActSettingMap=UtilMisc.toMap("productStoreId",productStoreId,"finAccountTypeId",finAccountTypeId);
    GenericValue finAccountSettings=delegator.findByPrimaryKeyCache("ProductStoreFinActSetting",findProductStoreFinActSettingMap);
    if (finAccountSettings == null) {
      Debug.logWarning("In finAccountPreAuth could not find ProductStoreFinActSetting record, values searched by: " + findProductStoreFinActSettingMap,module);
    }
    if (Debug.verboseOn())     Debug.logVerbose("In finAccountPreAuth finAccountSettings=" + finAccountSettings,module);
    BigDecimal minBalance=FinAccountHelper.ZERO;
    String allowAuthToNegative="N";
    if (finAccountSettings != null) {
      allowAuthToNegative=finAccountSettings.getString("allowAuthToNegative");
      minBalance=finAccountSettings.getBigDecimal("minBalance");
      if (minBalance == null) {
        minBalance=FinAccountHelper.ZERO;
      }
      if ("Y".equals(finAccountSettings.getString("requirePinCode"))) {
        if (!FinAccountHelper.validatePin(delegator,finAccountCode,finAccountPin)) {
          Map result=ServiceUtil.returnSuccess();
          result.put("authMessage","Financial account PIN/CODE combination not found");
          result.put("authResult",Boolean.FALSE);
          result.put("processAmount",amount);
          result.put("authFlag","0");
          result.put("authCode","A");
          result.put("authRefNum","0");
          Debug.logWarning("Unable to auth FinAccount: " + result,module);
          return result;
        }
      }
    }
    if ((finAccount.getTimestamp("thruDate") != null) && (finAccount.getTimestamp("thruDate").before(UtilDateTime.nowTimestamp()))) {
      Map result=ServiceUtil.returnSuccess();
      result.put("authMessage","Account has expired as of " + finAccount.getTimestamp("thruDate"));
      result.put("authResult",Boolean.FALSE);
      result.put("processAmount",amount);
      result.put("authFlag","0");
      result.put("authCode","A");
      result.put("authRefNum","0");
      Debug.logWarning("Unable to auth FinAccount: " + result,module);
      return result;
    }
    String inGoodStanding=finAccount.getString("inGoodStanding");
    if (inGoodStanding != null && "N".equals(inGoodStanding)) {
      finAccount.refresh();
      inGoodStanding=finAccount.getString("inGoodStanding");
      if (inGoodStanding != null && "N".equals(inGoodStanding)) {
        Map result=ServiceUtil.returnSuccess();
        result.put("authMessage","Account is currently not in good standing");
        result.put("authResult",Boolean.FALSE);
        result.put("processAmount",amount);
        result.put("authFlag","0");
        result.put("authCode","A");
        result.put("authRefNum","0");
        Debug.logWarning("Unable to auth FinAccount: " + result,module);
        return result;
      }
    }
    String isFrozen=finAccount.getString("isFrozen");
    if (isFrozen != null && "Y".equals(isFrozen)) {
      finAccount.refresh();
      isFrozen=finAccount.getString("isFrozen");
      if (isFrozen != null && "Y".equals(isFrozen)) {
        Map result=ServiceUtil.returnSuccess();
        result.put("authMessage","Account is currently frozen");
        result.put("authResult",Boolean.FALSE);
        result.put("processAmount",amount);
        result.put("authFlag","0");
        result.put("authCode","A");
        result.put("authRefNum","0");
        Debug.logWarning("Unable to auth FinAccount: " + result,module);
        return result;
      }
    }
    BigDecimal availableBalance=finAccount.getBigDecimal("availableBalance");
    if (availableBalance == null) {
      availableBalance=FinAccountHelper.ZERO;
    }
    Map result=ServiceUtil.returnSuccess();
    String authMessage=null;
    Boolean processResult;
    String refNum;
    BigDecimal amountBd=(new BigDecimal(amount)).setScale(FinAccountHelper.decimals,FinAccountHelper.rounding);
    Debug.logInfo("Allow auth to negative: " + allowAuthToNegative + " :: available: "+ availableBalance+ " comp: "+ minBalance+ " = "+ availableBalance.compareTo(minBalance)+ " :: req: "+ amountBd,module);
    if (("Y".equals(allowAuthToNegative) && availableBalance.compareTo(minBalance) > -1) || (availableBalance.compareTo(amountBd) > -1)) {
      Timestamp thruDate;
      if (finAccountSettings != null && finAccountSettings.getLong("authValidDays") != null) {
        thruDate=UtilDateTime.getDayEnd(UtilDateTime.nowTimestamp(),finAccountSettings.getLong("authValidDays").intValue());
      }
 else {
        thruDate=UtilDateTime.getDayEnd(UtilDateTime.nowTimestamp(),30);
      }
      Map tmpResult=dispatcher.runSync("createFinAccountAuth",UtilMisc.toMap("finAccountId",finAccountId,"amount",amount,"thruDate",thruDate,"userLogin",userLogin));
      if (ServiceUtil.isError(tmpResult)) {
        return tmpResult;
      }
 else {
        refNum=(String)tmpResult.get("finAccountAuthId");
        processResult=Boolean.TRUE;
      }
      finAccount.refresh();
    }
 else {
      Debug.logError("Attempted to authorize [" + amount + "] against a balance of only ["+ availableBalance+ "]",module);
      refNum="0";
      authMessage="Insufficient funds";
      processResult=Boolean.FALSE;
    }
    result.put("processAmount",amount);
    result.put("authMessage",authMessage);
    result.put("authResult",processResult);
    result.put("processAmount",amount);
    result.put("authFlag","1");
    result.put("authCode","A");
    result.put("authRefNum",refNum);
    Debug.logInfo("FinAccont Auth: " + result,module);
    return result;
  }
 catch (  GenericEntityException ex) {
    Debug.logError(ex,"Cannot authorize financial account",module);
    return ServiceUtil.returnError("Cannot authorize financial account due to " + ex.getMessage());
  }
catch (  GenericServiceException ex) {
    Debug.logError(ex,"Cannot authorize gift certificate",module);
    return ServiceUtil.returnError("Cannot authorize financial account due to " + ex.getMessage());
  }
}
