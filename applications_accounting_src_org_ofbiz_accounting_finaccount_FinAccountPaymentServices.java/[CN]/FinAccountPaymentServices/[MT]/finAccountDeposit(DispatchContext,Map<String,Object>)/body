{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productStoreId=(String)context.get("productStoreId");
  String finAccountId=(String)context.get("finAccountId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  String reasonEnumId=(String)context.get("reasonEnumId");
  String orderId=(String)context.get("orderId");
  Boolean isRefund=(Boolean)context.get("isRefund");
  BigDecimal amount=(BigDecimal)context.get("amount");
  final String DEPOSIT=isRefund == null || !isRefund ? "DEPOSIT" : "ADJUSTMENT";
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId)) {
    partyId="_NA_";
  }
  String currencyUom=(String)context.get("currency");
  if (UtilValidate.isEmpty(currencyUom)) {
    currencyUom=UtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD");
  }
  GenericValue finAccount;
  try {
    finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountNotFound",UtilMisc.toMap("finAccountId",finAccountId),locale));
  }
  if (finAccount == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountNotFound",UtilMisc.toMap("finAccountId",""),locale));
  }
  if ((finAccount.getTimestamp("thruDate") != null) && (finAccount.getTimestamp("thruDate").before(UtilDateTime.nowTimestamp()))) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountExpired",UtilMisc.toMap("thruDate",finAccount.getTimestamp("thruDate")),locale));
  }
  Debug.log("Deposit into financial account #" + finAccountId + " ["+ amount+ "]",module);
  BigDecimal previousBalance=finAccount.getBigDecimal("actualBalance");
  if (previousBalance == null) {
    previousBalance=FinAccountHelper.ZERO;
  }
  BigDecimal actualBalance;
  String refNum;
  try {
    refNum=FinAccountPaymentServices.createFinAcctPaymentTransaction(delegator,dispatcher,userLogin,amount,productStoreId,partyId,orderId,orderItemSeqId,currencyUom,DEPOSIT,finAccountId,reasonEnumId);
    finAccount.refresh();
    actualBalance=finAccount.getBigDecimal("actualBalance");
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (actualBalance == null) {
    actualBalance=FinAccountHelper.ZERO;
  }
 else {
    if (actualBalance.compareTo(BigDecimal.ZERO) < 0) {
      try {
        Map<String,Object> rollbackCtx=UtilMisc.toMap("userLogin",userLogin,"finAccountId",finAccountId,"statusId","FNACT_NEGPENDREPL");
        dispatcher.addRollbackService("updateFinAccount",rollbackCtx,true);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
    }
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("previousBalance",previousBalance);
  result.put("balance",actualBalance);
  result.put("amount",amount);
  result.put("processResult",Boolean.TRUE);
  result.put("referenceNum",refNum);
  return result;
}
