{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productStoreId=(String)context.get("productStoreId");
  String finAccountId=(String)context.get("finAccountId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  String reasonEnumId=(String)context.get("reasonEnumId");
  String orderId=(String)context.get("orderId");
  Boolean requireBalance=(Boolean)context.get("requireBalance");
  BigDecimal amount=(BigDecimal)context.get("amount");
  if (requireBalance == null)   requireBalance=Boolean.TRUE;
  final String WITHDRAWAL="WITHDRAWAL";
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId)) {
    partyId="_NA_";
  }
  String currencyUom=(String)context.get("currency");
  if (UtilValidate.isEmpty(currencyUom)) {
    currencyUom=UtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD");
  }
  if (amount.compareTo(BigDecimal.ZERO) < 0) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountMustBePositive",locale));
  }
  GenericValue finAccount;
  try {
    finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (finAccount == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountNotFound",UtilMisc.toMap("finAccountId",""),locale));
  }
  if ((finAccount.getTimestamp("thruDate") != null) && (finAccount.getTimestamp("thruDate").before(UtilDateTime.nowTimestamp()))) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountExpired",UtilMisc.toMap("thruDate",finAccount.getTimestamp("thruDate")),locale));
  }
  BigDecimal previousBalance=finAccount.getBigDecimal("actualBalance");
  if (previousBalance == null) {
    previousBalance=FinAccountHelper.ZERO;
  }
  BigDecimal balance;
  String refNum;
  Boolean procResult;
  if (requireBalance && previousBalance.compareTo(amount) < 0) {
    procResult=Boolean.FALSE;
    balance=previousBalance;
    refNum="N/A";
  }
 else {
    try {
      refNum=FinAccountPaymentServices.createFinAcctPaymentTransaction(delegator,dispatcher,userLogin,amount,productStoreId,partyId,orderId,orderItemSeqId,currencyUom,WITHDRAWAL,finAccountId,reasonEnumId);
      finAccount.refresh();
      balance=finAccount.getBigDecimal("actualBalance");
      procResult=Boolean.TRUE;
    }
 catch (    GeneralException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  if (balance == null) {
    balance=FinAccountHelper.ZERO;
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("previousBalance",previousBalance);
  result.put("balance",balance);
  result.put("amount",amount);
  result.put("processResult",procResult);
  result.put("referenceNum",refNum);
  return result;
}
