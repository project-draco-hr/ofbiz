{
  Map featureMap=FastMap.newInstance();
  GenericValue product=this.getProduct();
  if (product != null) {
    List featureAppls=null;
    try {
      featureAppls=product.getRelated("ProductFeatureAppl");
      List filterExprs=UtilMisc.toList(new EntityExpr("productFeatureApplTypeId",EntityOperator.EQUALS,"STANDARD_FEATURE"));
      filterExprs.add(new EntityExpr("productFeatureApplTypeId",EntityOperator.EQUALS,"REQUIRED_FEATURE"));
      featureAppls=EntityUtil.filterByOr(featureAppls,filterExprs);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Unable to get features from product : " + product.get("productId"),module);
    }
    if (featureAppls != null) {
      Iterator fai=featureAppls.iterator();
      while (fai.hasNext()) {
        GenericValue appl=(GenericValue)fai.next();
        Double lastQuantity=(Double)featureMap.get(appl.getString("productFeatureId"));
        if (lastQuantity == null) {
          lastQuantity=new Double(0);
        }
        Double newQuantity=new Double(lastQuantity.doubleValue() + quantity);
        featureMap.put(appl.getString("productFeatureId"),newQuantity);
      }
    }
  }
  if (this.additionalProductFeatureAndAppls != null) {
    Iterator aapi=this.additionalProductFeatureAndAppls.values().iterator();
    while (aapi.hasNext()) {
      GenericValue appl=(GenericValue)aapi.next();
      Double lastQuantity=(Double)featureMap.get(appl.getString("productFeatureId"));
      if (lastQuantity == null) {
        lastQuantity=new Double(0);
      }
      Double newQuantity=new Double(lastQuantity.doubleValue() + quantity);
      featureMap.put(appl.getString("productFeatureId"),newQuantity);
    }
  }
  return featureMap;
}
