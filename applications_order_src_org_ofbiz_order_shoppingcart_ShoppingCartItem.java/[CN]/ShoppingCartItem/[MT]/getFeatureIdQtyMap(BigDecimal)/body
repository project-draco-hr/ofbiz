{
  Map<String,BigDecimal> featureMap=FastMap.newInstance();
  GenericValue product=this.getProduct();
  if (product != null) {
    List<GenericValue> featureAppls=null;
    try {
      featureAppls=product.getRelated("ProductFeatureAppl");
      List<EntityExpr> filterExprs=UtilMisc.toList(EntityCondition.makeCondition("productFeatureApplTypeId",EntityOperator.EQUALS,"STANDARD_FEATURE"));
      filterExprs.add(EntityCondition.makeCondition("productFeatureApplTypeId",EntityOperator.EQUALS,"REQUIRED_FEATURE"));
      featureAppls=EntityUtil.filterByOr(featureAppls,filterExprs);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Unable to get features from product : " + product.get("productId"),module);
    }
    if (featureAppls != null) {
      Iterator<GenericValue> fai=featureAppls.iterator();
      while (fai.hasNext()) {
        GenericValue appl=fai.next();
        BigDecimal lastQuantity=featureMap.get(appl.getString("productFeatureId"));
        if (lastQuantity == null) {
          lastQuantity=BigDecimal.ZERO;
        }
        BigDecimal newQuantity=lastQuantity.add(quantity);
        featureMap.put(appl.getString("productFeatureId"),newQuantity);
      }
    }
  }
  if (this.additionalProductFeatureAndAppls != null) {
    Iterator<GenericValue> aapi=this.additionalProductFeatureAndAppls.values().iterator();
    while (aapi.hasNext()) {
      GenericValue appl=aapi.next();
      BigDecimal lastQuantity=featureMap.get(appl.getString("productFeatureId"));
      if (lastQuantity == null) {
        lastQuantity=BigDecimal.ZERO;
      }
      BigDecimal newQuantity=lastQuantity.add(quantity);
      featureMap.put(appl.getString("productFeatureId"),newQuantity);
    }
  }
  return featureMap;
}
