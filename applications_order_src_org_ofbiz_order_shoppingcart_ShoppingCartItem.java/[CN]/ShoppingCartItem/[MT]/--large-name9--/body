{
  ShoppingCartItem newItem=new ShoppingCartItem(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,cart.getLocale(),itemType,itemGroup,parentProduct);
  selectedAmount=selectedAmount == null ? BigDecimal.ZERO : selectedAmount;
  unitPrice=unitPrice == null ? BigDecimal.ZERO : unitPrice;
  reservLength=reservLength == null ? BigDecimal.ZERO : reservLength;
  reservPersons=reservPersons == null ? BigDecimal.ZERO : reservPersons;
  boolean triggerPriceRules=triggerPriceRulesBool == null ? true : triggerPriceRulesBool.booleanValue();
  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();
  if ("Y".equals(product.getString("isVirtual"))) {
    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));
    String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_virtual",messageMap,cart.getLocale());
    Debug.logWarning(excMsg,module);
    throw new CartItemModifyException(excMsg);
  }
  java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  if (!skipProductChecks.booleanValue()) {
    if (product.get("introductionDate") != null && nowTimestamp.before(product.getTimestamp("introductionDate"))) {
      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));
      String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_not_yet_available",messageMap,cart.getLocale());
      Debug.logWarning(excMsg,module);
      throw new CartItemModifyException(excMsg);
    }
    if (product.get("salesDiscontinuationDate") != null && nowTimestamp.after(product.getTimestamp("salesDiscontinuationDate"))) {
      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));
      String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_no_longer_available",messageMap,cart.getLocale());
      Debug.logWarning(excMsg,module);
      throw new CartItemModifyException(excMsg);
    }
    if ("AGGREGATED".equals(product.getString("productTypeId"))) {
      if (configWrapper == null || !configWrapper.isCompleted()) {
        Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));
        String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_not_configured_correctly",messageMap,cart.getLocale());
        Debug.logWarning(excMsg,module);
        throw new CartItemModifyException(excMsg);
      }
    }
  }
  if ("ASSET_USAGE".equals(product.getString("productTypeId"))) {
    if (reservStart == null) {
      String excMsg=UtilProperties.getMessage(resource_error,"item.missing_reservation_starting_date",cart.getLocale());
      throw new CartItemModifyException(excMsg);
    }
    if (reservStart.before(UtilDateTime.nowTimestamp())) {
      String excMsg=UtilProperties.getMessage(resource_error,"item.reservation_from_tomorrow",cart.getLocale());
      throw new CartItemModifyException(excMsg);
    }
    newItem.setReservStart(reservStart);
    if (reservLength.compareTo(BigDecimal.ONE) < 0) {
      String excMsg=UtilProperties.getMessage(resource_error,"item.number_of_days",cart.getLocale());
      throw new CartItemModifyException(excMsg);
    }
    newItem.setReservLength(reservLength);
    if (product.get("reservMaxPersons") != null) {
      BigDecimal reservMaxPersons=product.getBigDecimal("reservMaxPersons");
      if (reservMaxPersons.compareTo(reservPersons) < 0) {
        Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("reservMaxPersons",product.getString("reservMaxPersons"),"reservPersons",reservPersons);
        String excMsg=UtilProperties.getMessage(resource_error,"item.maximum_number_of_person_renting",messageMap,cart.getLocale());
        Debug.logInfo(excMsg,module);
        throw new CartItemModifyException(excMsg);
      }
    }
    newItem.setReservPersons(reservPersons);
    if (product.get("reserv2ndPPPerc") != null)     newItem.setReserv2ndPPPerc(product.getBigDecimal("reserv2ndPPPerc"));
    if (product.get("reservNthPPPerc") != null)     newItem.setReservNthPPPerc(product.getBigDecimal("reservNthPPPerc"));
    if ((accommodationMapId != null) && (accommodationSpotId != null)) {
      newItem.setAccommodationId(accommodationMapId,accommodationSpotId);
    }
    String isAvailable=checkAvailability(product.getString("productId"),quantity,reservStart,reservLength,cart);
    if (isAvailable.compareTo("OK") != 0) {
      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"availableMessage",isAvailable);
      String excMsg=UtilProperties.getMessage(resource_error,"item.product_not_available",messageMap,cart.getLocale());
      Debug.logInfo(excMsg,module);
      throw new CartItemModifyException(isAvailable);
    }
  }
  newItem.setShipBeforeDate(shipBeforeDate != null ? shipBeforeDate : cart.getDefaultShipBeforeDate());
  newItem.setShipAfterDate(shipAfterDate != null ? shipAfterDate : cart.getDefaultShipAfterDate());
  newItem.setBasePrice(unitPrice);
  if (cartLocation == null) {
    cart.addItemToEnd(newItem);
  }
 else {
    cart.addItem(cartLocation.intValue(),newItem);
  }
  if (selectedAmount.compareTo(BigDecimal.ZERO) > 0) {
    newItem.setSelectedAmount(selectedAmount);
  }
  try {
    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps,true,triggerPriceRules,skipInventoryChecks.booleanValue());
  }
 catch (  CartItemModifyException e) {
    Debug.logWarning(e.getMessage(),module);
    cart.removeCartItem(cart.getItemIndex(newItem),dispatcher);
    cart.clearItemShipInfo(newItem);
    cart.removeEmptyCartItems();
    throw e;
  }
  return newItem;
}
