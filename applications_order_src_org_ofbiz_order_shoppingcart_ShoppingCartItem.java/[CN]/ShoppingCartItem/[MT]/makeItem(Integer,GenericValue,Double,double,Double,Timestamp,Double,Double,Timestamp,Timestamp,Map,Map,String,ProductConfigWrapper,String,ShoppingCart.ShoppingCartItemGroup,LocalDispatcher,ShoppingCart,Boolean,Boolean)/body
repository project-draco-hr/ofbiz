{
  ShoppingCartItem newItem=new ShoppingCartItem(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,cart.getLocale(),itemType,itemGroup);
  double selectedAmount=selectedAmountDbl == null ? 0.0 : selectedAmountDbl.doubleValue();
  double unitPrice=unitPriceDbl == null ? 0.0 : unitPriceDbl.doubleValue();
  double reservLength=reservLengthDbl == null ? 0.0 : reservLengthDbl.doubleValue();
  double reservPersons=reservPersonsDbl == null ? 0.0 : reservPersonsDbl.doubleValue();
  boolean triggerPriceRules=triggerPriceRulesBool == null ? true : triggerPriceRulesBool.booleanValue();
  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();
  if ("Y".equals(product.getString("isVirtual"))) {
    String excMsg="Tried to add the Virtual Product " + product.getString("productName") + " (productId: "+ product.getString("productId")+ ") to the cart, not adding.";
    Debug.logWarning(excMsg,module);
    throw new CartItemModifyException(excMsg);
  }
  java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  if (product.get("introductionDate") != null && nowTimestamp.before(product.getTimestamp("introductionDate"))) {
    String excMsg="Tried to add the Product " + product.getString("productName") + " (productId: "+ product.getString("productId")+ ") to the cart. This product has not yet been made available for sale, so not adding.";
    Debug.logWarning(excMsg,module);
    throw new CartItemModifyException(excMsg);
  }
  if (product.get("salesDiscontinuationDate") != null && nowTimestamp.after(product.getTimestamp("salesDiscontinuationDate"))) {
    String excMsg="Tried to add the Product " + product.getString("productName") + " (productId: "+ product.getString("productId")+ ") to the cart. This product is no longer available for sale, so not adding.";
    Debug.logWarning(excMsg,module);
    throw new CartItemModifyException(excMsg);
  }
  if ("ASSET_USAGE".equals(product.getString("productTypeId"))) {
    if (reservStart == null) {
      String excMsg="The starting date of the reservation is missing....";
      throw new CartItemModifyException(excMsg);
    }
    if (reservStart.before(UtilDateTime.nowTimestamp())) {
      String excMsg="You can only make reservation starting tomorrow....";
      throw new CartItemModifyException(excMsg);
    }
    newItem.setReservStart(reservStart);
    if (reservLength < 1) {
      String excMsg="Please enter a number of days, 1, or more....";
      throw new CartItemModifyException(excMsg);
    }
    newItem.setReservLength(reservLength);
    if (product.get("reservMaxPersons") != null) {
      double reservMaxPersons=product.getDouble("reservMaxPersons").doubleValue();
      if (reservMaxPersons < reservPersons) {
        String excMsg="The maximum number of persons renting this object is " + product.getString("reservMaxPersons") + " however you have requested: "+ reservPersons+ " !";
        Debug.logInfo(excMsg,module);
        throw new CartItemModifyException(excMsg);
      }
    }
    newItem.setReservPersons(reservPersons);
    if (product.get("reserv2ndPPPerc") != null)     newItem.setReserv2ndPPPerc(product.getDouble("reserv2ndPPPerc").doubleValue());
    if (product.get("reservNthPPPerc") != null)     newItem.setReservNthPPPerc(product.getDouble("reservNthPPPerc").doubleValue());
    String isAvailable=checkAvailability(product.getString("productId"),quantity,reservStart,reservLength,cart);
    if (isAvailable.compareTo("OK") != 0) {
      String excMsg="Product not available, ProductId:" + product.getString("productId") + " message:"+ isAvailable.toString();
      Debug.logInfo(excMsg,module);
      throw new CartItemModifyException(isAvailable);
    }
  }
  if ("AGGREGATED".equals(product.getString("productTypeId"))) {
    if (configWrapper == null || !configWrapper.isCompleted()) {
      String excMsg="Tried to add the Product " + product.getString("productName") + " (productId: "+ product.getString("productId")+ ") to the cart, not adding: the product is not configured correctly.";
      Debug.logWarning(excMsg,module);
      throw new CartItemModifyException(excMsg);
    }
  }
  newItem.setShipBeforeDate(shipBeforeDate != null ? shipBeforeDate : cart.getDefaultShipBeforeDate());
  newItem.setShipAfterDate(shipAfterDate != null ? shipAfterDate : cart.getDefaultShipAfterDate());
  newItem.setBasePrice(unitPrice);
  if (cartLocation == null) {
    cart.addItemToEnd(newItem);
  }
 else {
    cart.addItem(cartLocation.intValue(),newItem);
  }
  if (selectedAmount > 0) {
    newItem.setSelectedAmount(selectedAmount);
  }
  try {
    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps,true,triggerPriceRules);
  }
 catch (  CartItemModifyException e) {
    Debug.logWarning(e.getMessage(),module);
    cart.removeCartItem(cart.getItemIndex(newItem),dispatcher);
    cart.clearItemShipInfo(newItem);
    cart.removeEmptyCartItems();
    throw e;
  }
  return newItem;
}
