{
  BigDecimal baseQuantity=this.getQuantity();
  int thisIndex=cart.items().indexOf(this);
  List<ShoppingCartItem> newItems=new ArrayList<ShoppingCartItem>();
  if (baseQuantity.compareTo(BigDecimal.ONE) > 1) {
    for (int i=1; i < baseQuantity.intValue(); i++) {
      ShoppingCartItem item=new ShoppingCartItem(this);
      item.setQuantity(BigDecimal.ONE,dispatcher,cart,false);
      Debug.logInfo("Clone's adj: " + item.getAdjustments(),module);
      if (UtilValidate.isNotEmpty(item.getAdjustments())) {
        List<GenericValue> adjustments=UtilMisc.makeListWritable(item.getAdjustments());
        for (        GenericValue adjustment : adjustments) {
          if (adjustment != null) {
            item.removeAdjustment(adjustment);
            GenericValue newAdjustment=GenericValue.create(adjustment);
            BigDecimal adjAmount=newAdjustment.getBigDecimal("amount");
            if (adjAmount != null && adjAmount.compareTo(BigDecimal.ZERO) != 0)             newAdjustment.set("amount",adjAmount.divide(baseQuantity,generalRounding));
            Debug.logInfo("Cloned adj: " + newAdjustment,module);
            item.addAdjustment(newAdjustment);
          }
 else {
            Debug.logInfo("Clone Adjustment is null",module);
          }
        }
      }
      newItems.add(item);
    }
    this.setQuantity(BigDecimal.ONE,dispatcher,cart,false);
    Debug.logInfo("BaseQuantity: " + baseQuantity,module);
    Debug.logInfo("Item's Adj: " + this.getAdjustments(),module);
    if (UtilValidate.isNotEmpty(this.getAdjustments())) {
      List<GenericValue> adjustments=UtilMisc.makeListWritable(this.getAdjustments());
      for (      GenericValue adjustment : adjustments) {
        if (adjustment != null) {
          this.removeAdjustment(adjustment);
          GenericValue newAdjustment=GenericValue.create(adjustment);
          BigDecimal adjAmount=newAdjustment.getBigDecimal("amount");
          if (adjAmount != null && adjAmount.compareTo(BigDecimal.ZERO) != 0)           newAdjustment.set("amount",adjAmount.divide(baseQuantity,generalRounding));
          Debug.logInfo("Updated adj: " + newAdjustment,module);
          this.addAdjustment(newAdjustment);
        }
      }
    }
    Iterator<ShoppingCartItem> newItemsItr=newItems.iterator();
    while (newItemsItr.hasNext()) {
      cart.addItem(thisIndex,newItemsItr.next());
    }
  }
}
