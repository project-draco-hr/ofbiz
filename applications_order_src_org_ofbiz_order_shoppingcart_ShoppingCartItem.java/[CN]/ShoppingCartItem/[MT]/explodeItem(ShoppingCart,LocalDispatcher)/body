{
  double baseQuantity=this.getQuantity();
  int thisIndex=cart.items().indexOf(this);
  List newItems=new ArrayList();
  if (baseQuantity > 1) {
    for (int i=1; i < baseQuantity; i++) {
      ShoppingCartItem item=new ShoppingCartItem(this);
      item.setQuantity(1,dispatcher,cart,false);
      Debug.logInfo("Clone's adj: " + item.getAdjustments(),module);
      if (item.getAdjustments() != null && item.getAdjustments().size() > 0) {
        List adjustments=new LinkedList(item.getAdjustments());
        Iterator adjIterator=adjustments.iterator();
        while (adjIterator.hasNext()) {
          GenericValue adjustment=(GenericValue)adjIterator.next();
          if (adjustment != null) {
            item.removeAdjustment(adjustment);
            GenericValue newAdjustment=GenericValue.create(adjustment);
            Double adjAmount=newAdjustment.getDouble("amount");
            if (adjAmount != null && adjAmount.doubleValue() != 0.00)             newAdjustment.set("amount",new Double(adjAmount.doubleValue() / baseQuantity));
            Debug.logInfo("Cloned adj: " + newAdjustment,module);
            item.addAdjustment(newAdjustment);
          }
 else {
            Debug.logInfo("Clone Adjustment is null",module);
          }
        }
      }
      newItems.add(item);
    }
    this.setQuantity(1,dispatcher,cart,false);
    Debug.logInfo("BaseQuantity: " + baseQuantity,module);
    Debug.logInfo("Item's Adj: " + this.getAdjustments(),module);
    if (this.getAdjustments() != null && this.getAdjustments().size() > 0) {
      List adjustments=new LinkedList(this.getAdjustments());
      Iterator adjIterator=adjustments.iterator();
      while (adjIterator.hasNext()) {
        GenericValue adjustment=(GenericValue)adjIterator.next();
        if (adjustment != null) {
          this.removeAdjustment(adjustment);
          GenericValue newAdjustment=GenericValue.create(adjustment);
          Double adjAmount=newAdjustment.getDouble("amount");
          if (adjAmount != null && adjAmount.doubleValue() != 0.00)           newAdjustment.set("amount",new Double(adjAmount.doubleValue() / baseQuantity));
          Debug.logInfo("Updated adj: " + newAdjustment,module);
          this.addAdjustment(newAdjustment);
        }
      }
    }
    Iterator newItemsItr=newItems.iterator();
    while (newItemsItr.hasNext()) {
      cart.addItem(thisIndex,(ShoppingCartItem)newItemsItr.next());
    }
  }
}
