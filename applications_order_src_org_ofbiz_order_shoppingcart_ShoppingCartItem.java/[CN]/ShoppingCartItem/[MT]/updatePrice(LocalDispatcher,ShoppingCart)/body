{
  if (_product != null && isModifiedPrice == false) {
    try {
      Map priceContext=FastMap.newInstance();
      priceContext.put("currencyUomId",cart.getCurrency());
      String partyId=cart.getPartyId();
      if (partyId != null) {
        priceContext.put("partyId",partyId);
      }
      priceContext.put("quantity",new Double(this.getQuantity()));
      priceContext.put("product",this.getProduct());
      if (cart.getOrderType().equals("PURCHASE_ORDER")) {
        Map priceResult=dispatcher.runSync("calculatePurchasePrice",priceContext);
        if (ServiceUtil.isError(priceResult)) {
          throw new CartItemModifyException("There was an error while calculating the price: " + ServiceUtil.getErrorMessage(priceResult));
        }
        Boolean validPriceFound=(Boolean)priceResult.get("validPriceFound");
        if (!validPriceFound.booleanValue()) {
          throw new CartItemModifyException("Could not find a valid price for the product with ID [" + this.getProductId() + "] and supplier with ID ["+ partyId+ "], not adding to cart.");
        }
        this.setBasePrice(((Double)priceResult.get("price")).doubleValue());
        this.setDisplayPrice(this.basePrice);
        this.orderItemPriceInfos=(List)priceResult.get("orderItemPriceInfos");
      }
 else {
        priceContext.put("prodCatalogId",this.getProdCatalogId());
        priceContext.put("webSiteId",cart.getWebSiteId());
        priceContext.put("productStoreId",cart.getProductStoreId());
        priceContext.put("agreementId",cart.getAgreementId());
        Map priceResult=dispatcher.runSync("calculateProductPrice",priceContext);
        if (ServiceUtil.isError(priceResult)) {
          throw new CartItemModifyException("There was an error while calculating the price: " + ServiceUtil.getErrorMessage(priceResult));
        }
        Boolean validPriceFound=(Boolean)priceResult.get("validPriceFound");
        if (!validPriceFound.booleanValue()) {
          throw new CartItemModifyException("Could not find a valid price for the product with ID [" + this.getProductId() + "], not adding to cart.");
        }
        if (priceResult.get("listPrice") != null) {
          this.listPrice=((Double)priceResult.get("listPrice")).doubleValue();
        }
        if (priceResult.get("basePrice") != null) {
          this.setBasePrice(((Double)priceResult.get("basePrice")).doubleValue());
        }
        if (priceResult.get("price") != null) {
          this.setDisplayPrice(((Double)priceResult.get("price")).doubleValue());
        }
        this.setSpecialPromoPrice((Double)priceResult.get("specialPromoPrice"));
        this.orderItemPriceInfos=(List)priceResult.get("orderItemPriceInfos");
        if (configWrapper != null) {
          this.setBasePrice(configWrapper.getTotalPrice());
          this.setDisplayPrice(configWrapper.getTotalPrice());
        }
      }
    }
 catch (    GenericServiceException e) {
      throw new CartItemModifyException("There was an error while calculating the price",e);
    }
  }
}
