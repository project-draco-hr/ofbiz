{
  if (_product != null && isModifiedPrice == false) {
    try {
      Map priceContext=FastMap.newInstance();
      priceContext.put("currencyUomId",cart.getCurrency());
      String partyId=cart.getPartyId();
      if (partyId != null) {
        priceContext.put("partyId",partyId);
      }
      boolean isAlternativePacking=ProductWorker.isAlternativePacking(delegator,this.productId,this.getParentProductId());
      BigDecimal pieces=BigDecimal.ONE;
      if (isAlternativePacking) {
        GenericValue originalProduct=this.getParentProduct();
        if (originalProduct != null)         pieces=new BigDecimal(originalProduct.getLong("piecesIncluded"));
        priceContext.put("product",originalProduct);
        this._parentProduct=null;
      }
 else {
        priceContext.put("product",this.getProduct());
      }
      priceContext.put("quantity",this.getQuantity());
      priceContext.put("amount",this.getSelectedAmount());
      if (cart.getOrderType().equals("PURCHASE_ORDER")) {
        Map priceResult=dispatcher.runSync("calculatePurchasePrice",priceContext);
        if (ServiceUtil.isError(priceResult)) {
          throw new CartItemModifyException("There was an error while calculating the price: " + ServiceUtil.getErrorMessage(priceResult));
        }
        Boolean validPriceFound=(Boolean)priceResult.get("validPriceFound");
        if (!validPriceFound.booleanValue()) {
          throw new CartItemModifyException("Could not find a valid price for the product with ID [" + this.getProductId() + "] and supplier with ID ["+ partyId+ "], not adding to cart.");
        }
        if (isAlternativePacking) {
          this.setBasePrice(((BigDecimal)priceResult.get("price")).divide(pieces,RoundingMode.HALF_UP));
        }
 else {
          this.setBasePrice(((BigDecimal)priceResult.get("price")));
        }
        this.setDisplayPrice(this.basePrice);
        this.orderItemPriceInfos=(List)priceResult.get("orderItemPriceInfos");
      }
 else {
        if (productId != null) {
          String productStoreId=cart.getProductStoreId();
          List productSurvey=ProductStoreWorker.getProductSurveys(delegator,productStoreId,productId,"CART_ADD",parentProductId);
          if (UtilValidate.isNotEmpty(productSurvey) && UtilValidate.isNotEmpty(attributes)) {
            List surveyResponses=(List)attributes.get("surveyResponses");
            if (UtilValidate.isNotEmpty(surveyResponses)) {
              Iterator surveyItr=surveyResponses.iterator();
              while (surveyItr.hasNext()) {
                String surveyResponseId=(String)surveyItr.next();
                if (UtilValidate.isNotEmpty(surveyResponseId)) {
                  priceContext.put("surveyResponseId",surveyResponseId);
                  break;
                }
              }
            }
          }
        }
        priceContext.put("prodCatalogId",this.getProdCatalogId());
        priceContext.put("webSiteId",cart.getWebSiteId());
        priceContext.put("productStoreId",cart.getProductStoreId());
        priceContext.put("agreementId",cart.getAgreementId());
        priceContext.put("productPricePurposeId","PURCHASE");
        priceContext.put("checkIncludeVat","Y");
        List surveyResponses=(List)getAttribute("surveyResponses");
        if (UtilValidate.isNotEmpty(surveyResponses)) {
          priceContext.put("surveyResponseId",surveyResponses.get(0));
        }
        Map priceResult=dispatcher.runSync("calculateProductPrice",priceContext);
        if (ServiceUtil.isError(priceResult)) {
          throw new CartItemModifyException("There was an error while calculating the price: " + ServiceUtil.getErrorMessage(priceResult));
        }
        Boolean validPriceFound=(Boolean)priceResult.get("validPriceFound");
        if (Boolean.FALSE.equals(validPriceFound)) {
          throw new CartItemModifyException("Could not find a valid price for the product with ID [" + this.getProductId() + "], not adding to cart.");
        }
        if (isAlternativePacking) {
          int decimals=2;
          if (priceResult.get("listPrice") != null) {
            this.listPrice=((BigDecimal)priceResult.get("listPrice")).divide(pieces,decimals,RoundingMode.HALF_UP);
          }
          if (priceResult.get("basePrice") != null) {
            this.setBasePrice(((BigDecimal)priceResult.get("basePrice")).divide(pieces,decimals,RoundingMode.HALF_UP));
          }
          if (priceResult.get("price") != null) {
            this.setDisplayPrice(((BigDecimal)priceResult.get("price")).divide(pieces,decimals,RoundingMode.HALF_UP));
          }
          if (priceResult.get("specialPromoPrice") != null) {
            this.setSpecialPromoPrice(((BigDecimal)priceResult.get("specialPromoPrice")).divide(pieces,decimals,RoundingMode.HALF_UP));
          }
        }
 else {
          if (priceResult.get("listPrice") != null) {
            this.listPrice=((BigDecimal)priceResult.get("listPrice"));
          }
          if (priceResult.get("basePrice") != null) {
            this.setBasePrice(((BigDecimal)priceResult.get("basePrice")));
          }
          if (priceResult.get("price") != null) {
            this.setDisplayPrice(((BigDecimal)priceResult.get("price")));
          }
          this.setSpecialPromoPrice((BigDecimal)priceResult.get("specialPromoPrice"));
        }
        this.orderItemPriceInfos=(List)priceResult.get("orderItemPriceInfos");
        if (configWrapper != null) {
          this.setBasePrice(configWrapper.getTotalPrice());
          GenericValue productStore=ProductStoreWorker.getProductStore(cart.getProductStoreId(),delegator);
          if (UtilValidate.isNotEmpty(productStore) && "Y".equals(productStore.get("showPricesWithVatTax"))) {
            BigDecimal totalPrice=configWrapper.getTotalPrice();
            Map totalPriceWithTaxMap=dispatcher.runSync("calcTaxForDisplay",UtilMisc.toMap("basePrice",totalPrice,"productId",this.productId,"productStoreId",cart.getProductStoreId()));
            this.setDisplayPrice((BigDecimal)totalPriceWithTaxMap.get("priceWithTax"));
          }
 else {
            this.setDisplayPrice(configWrapper.getTotalPrice());
          }
        }
        Map recurringPriceContext=FastMap.newInstance();
        recurringPriceContext.putAll(priceContext);
        recurringPriceContext.put("productPricePurposeId","RECURRING_CHARGE");
        Map recurringPriceResult=dispatcher.runSync("calculateProductPrice",recurringPriceContext);
        if (ServiceUtil.isError(recurringPriceResult)) {
          throw new CartItemModifyException("There was an error while calculating the price: " + ServiceUtil.getErrorMessage(recurringPriceResult));
        }
        Boolean validRecurringPriceFound=(Boolean)recurringPriceResult.get("validPriceFound");
        if (Boolean.TRUE.equals(validRecurringPriceFound)) {
          if (recurringPriceResult.get("basePrice") != null) {
            this.setRecurringBasePrice((BigDecimal)recurringPriceResult.get("basePrice"));
          }
          if (recurringPriceResult.get("price") != null) {
            this.setRecurringDisplayPrice((BigDecimal)recurringPriceResult.get("price"));
          }
        }
      }
    }
 catch (    GenericServiceException e) {
      throw new CartItemModifyException("There was an error while calculating the price",e);
    }
  }
}
