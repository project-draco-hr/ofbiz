{
  String productId=getDocumentIdentifier().text();
  try {
    GenericValue product=delegator.findOne("Product",true,"productId",productId);
    if (product == null) {
      return null;
    }
 else {
      if ("Y".equals(product.getString("isVariant")) && "true".equals(UtilProperties.getPropertyValue("prodsearch","index.ignore.variants"))) {
        return null;
      }
      Document doc=new Document();
      Timestamp nextReIndex=null;
      doc.add(new StringField("productId",productId,Field.Store.YES));
      this.addTextFieldByWeight(doc,"productName",product.getString("productName"),"index.weight.Product.productName",0,false,"fullText");
      this.addTextFieldByWeight(doc,"internalName",product.getString("internalName"),"index.weight.Product.internalName",0,false,"fullText");
      this.addTextFieldByWeight(doc,"brandName",product.getString("brandName"),"index.weight.Product.brandName",0,false,"fullText");
      this.addTextFieldByWeight(doc,"description",product.getString("description"),"index.weight.Product.description",0,false,"fullText");
      this.addTextFieldByWeight(doc,"longDescription",product.getString("longDescription"),"index.weight.Product.longDescription",0,false,"fullText");
      doc.add(new LongField("introductionDate",quantizeTimestampToDays(product.getTimestamp("introductionDate")),Field.Store.NO));
      nextReIndex=this.checkSetNextReIndex(product.getTimestamp("introductionDate"),nextReIndex);
      doc.add(new LongField("salesDiscontinuationDate",quantizeTimestampToDays(product.getTimestamp("salesDiscontinuationDate")),Field.Store.NO));
      nextReIndex=this.checkSetNextReIndex(product.getTimestamp("salesDiscontinuationDate"),nextReIndex);
      doc.add(new StringField("isVariant",product.get("isVariant") != null && product.getBoolean("isVariant") ? "true" : "false",Field.Store.NO));
      if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductFeatureAndAppl.description","0")) || !"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductFeatureAndAppl.abbrev","0")) || !"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductFeatureAndAppl.idCode","0"))) {
        List<GenericValue> productFeatureAndAppls=delegator.findByAnd("ProductFeatureAndAppl",UtilMisc.toMap("productId",productId),null,false);
        productFeatureAndAppls=this.filterByThruDate(productFeatureAndAppls);
        for (        GenericValue productFeatureAndAppl : productFeatureAndAppls) {
          Timestamp fromDate=productFeatureAndAppl.getTimestamp("fromDate");
          Timestamp thruDate=productFeatureAndAppl.getTimestamp("thruDate");
          if (fromDate != null && fromDate.after(UtilDateTime.nowTimestamp())) {
            nextReIndex=this.checkSetNextReIndex(fromDate,nextReIndex);
            continue;
          }
 else           if (thruDate != null) {
            nextReIndex=this.checkSetNextReIndex(thruDate,nextReIndex);
          }
          doc.add(new StringField("productFeatureId",productFeatureAndAppl.getString("productFeatureId"),Field.Store.NO));
          doc.add(new StringField("productFeatureCategoryId",productFeatureAndAppl.getString("productFeatureCategoryId"),Field.Store.NO));
          doc.add(new StringField("productFeatureTypeId",productFeatureAndAppl.getString("productFeatureTypeId"),Field.Store.NO));
          this.addTextFieldByWeight(doc,"featureDescription",productFeatureAndAppl.getString("description"),"index.weight.ProductFeatureAndAppl.description",0,false,"fullText");
          this.addTextFieldByWeight(doc,"featureAbbreviation",productFeatureAndAppl.getString("abbrev"),"index.weight.ProductFeatureAndAppl.abbrev",0,false,"fullText");
          this.addTextFieldByWeight(doc,"featureCode",productFeatureAndAppl.getString("idCode"),"index.weight.ProductFeatureAndAppl.idCode",0,false,"fullText");
          List<GenericValue> productFeatureGroupAppls=delegator.findByAnd("ProductFeatureGroupAppl",UtilMisc.toMap("productFeatureId",productFeatureAndAppl.get("productFeatureId")),null,false);
          productFeatureGroupAppls=this.filterByThruDate(productFeatureGroupAppls);
          for (          GenericValue productFeatureGroupAppl : productFeatureGroupAppls) {
            fromDate=productFeatureGroupAppl.getTimestamp("fromDate");
            thruDate=productFeatureGroupAppl.getTimestamp("thruDate");
            if (fromDate != null && fromDate.after(UtilDateTime.nowTimestamp())) {
              nextReIndex=this.checkSetNextReIndex(fromDate,nextReIndex);
              continue;
            }
 else             if (thruDate != null) {
              nextReIndex=this.checkSetNextReIndex(thruDate,nextReIndex);
            }
            doc.add(new StringField("productFeatureGroupId",productFeatureGroupAppl.getString("productFeatureGroupId"),Field.Store.NO));
          }
        }
      }
      if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductAttribute.attrName","0")) || !"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductAttribute.attrValue","0"))) {
        List<GenericValue> productAttributes=delegator.findByAnd("ProductAttribute",UtilMisc.toMap("productId",productId),null,false);
        for (        GenericValue productAttribute : productAttributes) {
          this.addTextFieldByWeight(doc,"attributeName",productAttribute.getString("attrName"),"index.weight.ProductAttribute.attrName",0,false,"fullText");
          this.addTextFieldByWeight(doc,"attributeValue",productAttribute.getString("attrValue"),"index.weight.ProductAttribute.attrValue",0,false,"fullText");
        }
      }
      if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.GoodIdentification.idValue","0"))) {
        List<GenericValue> goodIdentifications=delegator.findByAnd("GoodIdentification",UtilMisc.toMap("productId",productId),null,false);
        for (        GenericValue goodIdentification : goodIdentifications) {
          String goodIdentificationTypeId=goodIdentification.getString("goodIdentificationTypeId");
          String idValue=goodIdentification.getString("idValue");
          doc.add(new StringField("goodIdentificationTypeId",goodIdentificationTypeId,Field.Store.NO));
          doc.add(new StringField("goodIdentificationIdValue",idValue,Field.Store.NO));
          doc.add(new StringField(goodIdentificationTypeId + "_GoodIdentification",idValue,Field.Store.NO));
          this.addTextFieldByWeight(doc,"identificationValue",idValue,"index.weight.GoodIdentification.idValue",0,false,"fullText");
        }
      }
      if ("Y".equals(product.getString("isVirtual"))) {
        if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.Variant.Product.productId","0"))) {
          List<GenericValue> variantProductAssocs=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",productId,"productAssocTypeId","PRODUCT_VARIANT"),null,false);
          variantProductAssocs=this.filterByThruDate(variantProductAssocs);
          for (          GenericValue variantProductAssoc : variantProductAssocs) {
            Timestamp fromDate=variantProductAssoc.getTimestamp("fromDate");
            Timestamp thruDate=variantProductAssoc.getTimestamp("thruDate");
            if (fromDate != null && fromDate.after(UtilDateTime.nowTimestamp())) {
              nextReIndex=this.checkSetNextReIndex(fromDate,nextReIndex);
              continue;
            }
 else             if (thruDate != null) {
              nextReIndex=this.checkSetNextReIndex(thruDate,nextReIndex);
            }
            this.addTextFieldByWeight(doc,"variantProductId",variantProductAssoc.getString("productIdTo"),"index.weight.Variant.Product.productId",0,false,"fullText");
          }
        }
      }
      String productContentTypes=UtilProperties.getPropertyValue("prodsearch","index.include.ProductContentTypes");
      for (      String productContentTypeId : productContentTypes.split(",")) {
        int weight=1;
        try {
          weight=Integer.parseInt(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductContent." + productContentTypeId,"1"));
        }
 catch (        Exception e) {
          Debug.logWarning("Could not parse weight number: " + e.toString(),module);
        }
        List<GenericValue> productContentAndInfos=delegator.findByAnd("ProductContentAndInfo",UtilMisc.toMap("productId",productId,"productContentTypeId",productContentTypeId),null,false);
        productContentAndInfos=this.filterByThruDate(productContentAndInfos);
        for (        GenericValue productContentAndInfo : productContentAndInfos) {
          Timestamp fromDate=productContentAndInfo.getTimestamp("fromDate");
          Timestamp thruDate=productContentAndInfo.getTimestamp("thruDate");
          if (fromDate != null && fromDate.after(UtilDateTime.nowTimestamp())) {
            nextReIndex=this.checkSetNextReIndex(fromDate,nextReIndex);
            continue;
          }
 else           if (thruDate != null) {
            nextReIndex=this.checkSetNextReIndex(thruDate,nextReIndex);
          }
          try {
            Map<String,Object> drContext=UtilMisc.<String,Object>toMap("product",product);
            String contentText=DataResourceWorker.renderDataResourceAsText(delegator,productContentAndInfo.getString("dataResourceId"),drContext,null,null,false);
            this.addTextFieldByWeight(doc,"content",contentText,null,weight,false,"fullText");
          }
 catch (          IOException e1) {
            Debug.logError(e1,"Error getting content text to index",module);
          }
catch (          GeneralException e1) {
            Debug.logError(e1,"Error getting content text to index",module);
          }
        }
      }
      this.populateCategoryData(doc,product);
      List<GenericValue> productPrices=product.getRelated("ProductPrice",null,null,false);
      productPrices=this.filterByThruDate(productPrices);
      for (      GenericValue productPrice : productPrices) {
        Timestamp fromDate=productPrice.getTimestamp("fromDate");
        Timestamp thruDate=productPrice.getTimestamp("thruDate");
        if (fromDate != null && fromDate.after(UtilDateTime.nowTimestamp())) {
          nextReIndex=this.checkSetNextReIndex(fromDate,nextReIndex);
          continue;
        }
 else         if (thruDate != null) {
          nextReIndex=this.checkSetNextReIndex(thruDate,nextReIndex);
        }
        StringBuilder fieldNameSb=new StringBuilder();
        fieldNameSb.append(productPrice.getString("productPriceTypeId"));
        fieldNameSb.append('_');
        fieldNameSb.append(productPrice.getString("productPricePurposeId"));
        fieldNameSb.append('_');
        fieldNameSb.append(productPrice.getString("currencyUomId"));
        fieldNameSb.append('_');
        fieldNameSb.append(productPrice.getString("productStoreGroupId"));
        fieldNameSb.append("_price");
        doc.add(new DoubleField(fieldNameSb.toString(),productPrice.getDouble("price"),Field.Store.NO));
      }
      List<GenericValue> supplierProducts=product.getRelated("SupplierProduct",null,null,false);
      supplierProducts=this.filterByThruDate(supplierProducts,"availableThruDate");
      Set<String> supplierPartyIds=new TreeSet<String>();
      for (      GenericValue supplierProduct : supplierProducts) {
        Timestamp fromDate=supplierProduct.getTimestamp("availableFromDate");
        Timestamp thruDate=supplierProduct.getTimestamp("availableThruDate");
        if (fromDate != null && fromDate.after(UtilDateTime.nowTimestamp())) {
          nextReIndex=this.checkSetNextReIndex(fromDate,nextReIndex);
          continue;
        }
 else         if (thruDate != null) {
          nextReIndex=this.checkSetNextReIndex(thruDate,nextReIndex);
        }
        supplierPartyIds.add(supplierProduct.getString("partyId"));
      }
      for (      String supplierPartyId : supplierPartyIds) {
        doc.add(new StringField("supplierPartyId",supplierPartyId,Field.Store.NO));
      }
      return doc;
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  return null;
}
