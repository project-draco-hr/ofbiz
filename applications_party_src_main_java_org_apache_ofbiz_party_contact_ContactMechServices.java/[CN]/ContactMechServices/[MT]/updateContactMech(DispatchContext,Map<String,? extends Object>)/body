{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Timestamp now=UtilDateTime.nowTimestamp();
  List<GenericValue> toBeStored=new LinkedList<GenericValue>();
  boolean isModified=false;
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");
  if (result.size() > 0)   return result;
  String newCmId=null;
  try {
    newCmId=delegator.getNextSeqId("ContactMech");
  }
 catch (  IllegalArgumentException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));
  }
  String contactMechId=(String)context.get("contactMechId");
  GenericValue contactMech=null;
  GenericValue partyContactMech=null;
  try {
    contactMech=EntityQuery.use(delegator).from("ContactMech").where("contactMechId",contactMechId).queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    contactMech=null;
  }
  if (!partyId.equals("_NA_")) {
    try {
      partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();
      if (partyContactMech == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));
      }
 else {
        toBeStored.add(partyContactMech);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      contactMech=null;
    }
  }
  if (contactMech == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));
  }
  String contactMechTypeId=contactMech.getString("contactMechTypeId");
  GenericValue newContactMech=GenericValue.create(contactMech);
  GenericValue newPartyContactMech=GenericValue.create(partyContactMech);
  if ("POSTAL_ADDRESS".equals(contactMechTypeId)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_updateContactMech_not_be_used_for_POSTAL_ADDRESS",locale));
  }
 else   if ("TELECOM_NUMBER".equals(contactMechTypeId)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_updateContactMech_not_be_used_for_TELECOM_NUMBER",locale));
  }
 else {
    newContactMech.set("infoString",context.get("infoString"));
  }
  newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));
  newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));
  if (!newContactMech.equals(contactMech))   isModified=true;
  if (!newPartyContactMech.equals(partyContactMech))   isModified=true;
  toBeStored.add(newContactMech);
  toBeStored.add(newPartyContactMech);
  if (isModified) {
    newContactMech.set("contactMechId",newCmId);
    newPartyContactMech.set("contactMechId",newCmId);
    newPartyContactMech.set("fromDate",now);
    newPartyContactMech.set("thruDate",null);
    try {
      Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose",null,null,false));
      while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {
        GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());
        tempVal.set("contactMechId",newCmId);
        toBeStored.add(tempVal);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));
    }
    partyContactMech.set("thruDate",now);
    try {
      delegator.storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));
    }
  }
 else {
    result.put("newContactMechId",contactMechId);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));
    return result;
  }
  result.put("newContactMechId",newCmId);
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
