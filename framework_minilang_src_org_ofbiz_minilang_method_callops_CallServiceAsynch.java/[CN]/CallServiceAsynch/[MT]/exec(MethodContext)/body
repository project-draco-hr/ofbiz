{
  if (methodContext.isTraceOn()) {
    outputTraceMessage(methodContext,"Begin call-service-asynch.");
  }
  String serviceName=serviceNameFse.expandString(methodContext.getEnvMap());
  Map<String,Object> inMap=inMapFma.get(methodContext.getEnvMap());
  if (inMap == null) {
    inMap=FastMap.newInstance();
  }
  if (includeUserLogin) {
    GenericValue userLogin=methodContext.getUserLogin();
    if (userLogin != null && inMap.get("userLogin") == null) {
      inMap.put("userLogin",userLogin);
    }
  }
  Locale locale=methodContext.getLocale();
  if (locale != null) {
    inMap.put("locale",locale);
  }
  try {
    if (methodContext.isTraceOn()) {
      outputTraceMessage(methodContext,"Invoking service \"" + serviceName + "\", IN attributes:",inMap.toString());
    }
    methodContext.getDispatcher().runAsync(serviceName,inMap);
  }
 catch (  GenericServiceException e) {
    if (methodContext.isTraceOn()) {
      outputTraceMessage(methodContext,"Service engine threw an exception: " + e.getMessage() + ", halting script execution. End call-service-asynch.");
    }
    Debug.logError(e,module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [problem invoking the "+ serviceName+ " service: "+ e.getMessage()+ "]";
    if (methodContext.getMethodType() == MethodContext.EVENT) {
      methodContext.putEnv(simpleMethod.getEventErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
    }
 else {
      methodContext.putEnv(simpleMethod.getServiceErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
    }
    return false;
  }
  if (methodContext.isTraceOn()) {
    outputTraceMessage(methodContext,"End call-service-asynch.");
  }
  return true;
}
