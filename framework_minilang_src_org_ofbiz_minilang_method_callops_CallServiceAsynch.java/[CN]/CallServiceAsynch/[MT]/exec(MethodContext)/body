{
  String serviceName=methodContext.expandString(this.serviceName);
  boolean includeUserLogin=!"false".equals(methodContext.expandString(includeUserLoginStr));
  Map inMap=null;
  if (inMapAcsr.isEmpty()) {
    inMap=new HashMap();
  }
 else {
    inMap=(Map)inMapAcsr.get(methodContext);
    if (inMap == null) {
      inMap=new HashMap();
      inMapAcsr.put(methodContext,inMap);
    }
  }
  if (includeUserLogin) {
    GenericValue userLogin=methodContext.getUserLogin();
    if (userLogin != null && inMap.get("userLogin") == null) {
      inMap.put("userLogin",userLogin);
    }
  }
  Locale locale=methodContext.getLocale();
  if (locale != null) {
    inMap.put("locale",locale);
  }
  try {
    methodContext.getDispatcher().runAsync(serviceName,inMap);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [problem invoking the "+ serviceName+ " service: "+ e.getMessage()+ "]";
    if (methodContext.getMethodType() == MethodContext.EVENT) {
      methodContext.putEnv(simpleMethod.getEventErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
    }
 else     if (methodContext.getMethodType() == MethodContext.SERVICE) {
      methodContext.putEnv(simpleMethod.getServiceErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
    }
    return false;
  }
  return true;
}
