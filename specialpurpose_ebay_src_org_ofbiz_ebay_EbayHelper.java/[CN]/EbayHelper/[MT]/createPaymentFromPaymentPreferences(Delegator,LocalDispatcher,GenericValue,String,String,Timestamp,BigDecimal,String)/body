{
  List<GenericValue> paymentPreferences=null;
  try {
    Map<String,String> paymentFields=UtilMisc.toMap("orderId",orderId,"statusId","PAYMENT_RECEIVED","paymentMethodTypeId","EXT_EBAY");
    paymentPreferences=delegator.findByAnd("OrderPaymentPreference",paymentFields);
    if (UtilValidate.isNotEmpty(paymentPreferences)) {
      Iterator<GenericValue> i=paymentPreferences.iterator();
      while (i.hasNext()) {
        GenericValue pref=i.next();
        boolean okay=createPayment(dispatcher,userLogin,pref,orderId,externalId,orderDate,partyIdFrom);
        if (!okay)         return false;
      }
    }
 else {
      paymentFields=UtilMisc.toMap("orderId",orderId,"statusId","PAYMENT_NOT_RECEIVED","paymentMethodTypeId","EXT_EBAY");
      paymentPreferences=delegator.findByAnd("OrderPaymentPreference",paymentFields);
      if (UtilValidate.isNotEmpty(paymentPreferences)) {
        Iterator<GenericValue> i=paymentPreferences.iterator();
        while (i.hasNext()) {
          GenericValue pref=i.next();
          if (UtilValidate.isNotEmpty(amount)) {
            pref.set("statusId","PAYMENT_RECEIVED");
            pref.set("maxAmount",amount);
            pref.store();
          }
          boolean okay=createPayment(dispatcher,userLogin,pref,orderId,externalId,orderDate,partyIdFrom);
          if (!okay)           return false;
        }
      }
    }
  }
 catch (  Exception e) {
    Debug.logError(e,"Cannot get payment preferences for order #" + orderId,module);
    return false;
  }
  return true;
}
