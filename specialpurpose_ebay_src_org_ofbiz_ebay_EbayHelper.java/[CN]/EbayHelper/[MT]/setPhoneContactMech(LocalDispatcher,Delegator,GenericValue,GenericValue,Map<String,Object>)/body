{
  String contactMechId=null;
  String partyId=(String)party.get("partyId");
  Collection<GenericValue> phoneNumbers=ContactHelper.getContactMechByPurpose(party,"PHONE_SHIPPING",false);
  Iterator<GenericValue> phoneNumbersIterator=phoneNumbers.iterator();
  while (phoneNumbersIterator.hasNext()) {
    GenericValue phoneNumberContactMech=phoneNumbersIterator.next();
    contactMechId=phoneNumberContactMech.getString("contactMechId");
    GenericValue phoneNumber;
    try {
      phoneNumber=delegator.findByPrimaryKey("TelecomNumber",UtilMisc.toMap("contactMechId",contactMechId));
      if (context.get("shippingAddressPhone").toString().equals((phoneNumber.get("contactNumber").toString()))) {
        return contactMechId;
      }
    }
 catch (    Exception e) {
      Debug.logError("Problem with verifying phone number for contactMechId " + contactMechId + ".",module);
    }
  }
  Debug.logInfo("Unable to find matching postal address for partyId " + partyId + ". Creating a new one.",module);
  return createPartyPhone(dispatcher,partyId,(String)context.get("shippingAddressPhone"),userLogin);
}
