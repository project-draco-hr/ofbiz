{
  Map<String,Object> result=FastMap.newInstance();
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=dctx.getDelegator();
  GetSellingManagerInventoryRequestType invenReq=null;
  GetSellingManagerInventoryResponseType invenResp=null;
  boolean checkProd=false;
  boolean status=false;
  try {
    if (context.get("productStoreId") == null || context.get("productId") == null || context.get("folderId") == null) {
      result=ServiceUtil.returnError("The process was required productStoreId, productId and ebay inventory folderId.");
      result.put("productStoreId",context.get("productStoreId"));
      result.put("facilityId",context.get("facilityId"));
      result.put("folderId",context.get("folderId"));
      return result;
    }
    String productId=(String)context.get("productId");
    String folderId=(String)context.get("folderId");
    if (folderId != null) {
      GetSellingManagerInventoryCall invenCall=new GetSellingManagerInventoryCall(EbayStoreHelper.getApiContext((String)context.get("productStoreId"),locale,delegator));
      invenReq=new GetSellingManagerInventoryRequestType();
      invenResp=(GetSellingManagerInventoryResponseType)invenCall.execute(invenReq);
      if (invenResp != null && "SUCCESS".equals(invenResp.getAck().toString())) {
        GenericValue ebayProductStoreInventory=delegator.findByPrimaryKey("EbayProductStoreInventory",UtilMisc.toMap("productId",productId,"facilityId",context.get("facilityId"),"productStoreId",context.get("productStoreId")));
        SellingManagerProductType[] sellingManagerProductTypeList=invenResp.getSellingManagerProduct();
        for (        SellingManagerProductType sellingManagerProductType : sellingManagerProductTypeList) {
          SellingManagerProductDetailsType sellingManagerProductDetailsType=sellingManagerProductType.getSellingManagerProductDetails();
          if (String.valueOf(sellingManagerProductDetailsType.getFolderID()).equals(folderId) && String.valueOf(sellingManagerProductDetailsType.getProductID()).equals(String.valueOf(ebayProductStoreInventory.getLong("ebayProductId"))) && String.valueOf(sellingManagerProductDetailsType.getCustomLabel()).equals(productId)) {
            checkProd=true;
            break;
          }
        }
      }
      if (checkProd == true) {
        status=updateProductInEbayInventoryFolder(dctx,context);
      }
 else {
        status=createNewProductInEbayInventoryFolder(dctx,context);
      }
      if (status == true) {
        Debug.logInfo("Done to updated product ".concat(context.get("productId").toString()),module);
        result=ServiceUtil.returnSuccess("Updated ebay store inventory in folder " + context.get("folderId") + " success..");
      }
 else {
        result=ServiceUtil.returnError("Fail to update ebay store inventory.");
      }
    }
  }
 catch (  ApiException e) {
    result=ServiceUtil.returnFailure(e.getMessage());
  }
catch (  SdkSoapException e) {
    result=ServiceUtil.returnFailure(e.getMessage());
  }
catch (  SdkException e) {
    result=ServiceUtil.returnFailure(e.getMessage());
  }
catch (  GenericEntityException e) {
    result=ServiceUtil.returnFailure(e.getMessage());
  }
  result.put("productStoreId",context.get("productStoreId"));
  result.put("facilityId",context.get("facilityId"));
  result.put("folderId",context.get("folderId"));
  return result;
}
