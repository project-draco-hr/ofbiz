{
  Delegator delegator=dctx.getDelegator();
  String organizationPartyId=(String)context.get("organizationPartyId");
  String periodTypeId=(String)context.get("periodTypeId");
  Date findDate=(Date)context.get("findDate");
  Locale locale=(Locale)context.get("locale");
  if (findDate == null) {
    findDate=new Date(UtilDateTime.nowTimestamp().getTime());
  }
  Timestamp lastClosedDate=null;
  GenericValue lastClosedTimePeriod=null;
  Map<String,Object> result=ServiceUtil.returnSuccess();
  try {
    List<EntityCondition> findClosedConditions=UtilMisc.toList(EntityCondition.makeConditionMap("organizationPartyId",organizationPartyId),EntityCondition.makeCondition("thruDate",EntityOperator.LESS_THAN_EQUAL_TO,findDate),EntityCondition.makeConditionMap("isClosed","Y"));
    if (UtilValidate.isNotEmpty(periodTypeId)) {
      findClosedConditions.add(EntityCondition.makeConditionMap("periodTypeId",periodTypeId));
    }
    GenericValue closedTimePeriod=EntityQuery.use(delegator).from("CustomTimePeriod").select("customTimePeriodId","periodTypeId","isClosed","fromDate","thruDate").where(findClosedConditions).orderBy("thruDate DESC").queryFirst();
    if (UtilValidate.isNotEmpty(closedTimePeriod) && UtilValidate.isNotEmpty(closedTimePeriod.get("thruDate"))) {
      lastClosedTimePeriod=closedTimePeriod;
      lastClosedDate=lastClosedTimePeriod.getTimestamp("thruDate");
    }
 else {
      Map<String,String> findParams=UtilMisc.toMap("organizationPartyId",organizationPartyId);
      if (UtilValidate.isNotEmpty(periodTypeId)) {
        findParams.put("periodTypeId",periodTypeId);
      }
      GenericValue timePeriod=EntityQuery.use(delegator).from("CustomTimePeriod").where(findParams).orderBy("fromDate ASC").queryFirst();
      if (UtilValidate.isNotEmpty(timePeriod) && UtilValidate.isNotEmpty(timePeriod.get("fromDate"))) {
        lastClosedDate=timePeriod.getTimestamp("fromDate");
      }
 else {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPeriodCannotGet",locale));
      }
    }
    result.put("lastClosedTimePeriod",lastClosedTimePeriod);
    result.put("lastClosedDate",lastClosedDate);
    return result;
  }
 catch (  GenericEntityException ex) {
    return (ServiceUtil.returnError(ex.getMessage()));
  }
}
