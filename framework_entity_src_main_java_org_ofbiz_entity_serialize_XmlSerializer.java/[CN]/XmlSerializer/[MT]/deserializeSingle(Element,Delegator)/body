{
  String tagName=element.getLocalName();
  if (tagName.equals("null"))   return null;
  if (tagName.startsWith("std-")) {
    if ("std-String".equals(tagName)) {
      return element.getAttribute("value");
    }
 else     if ("std-Integer".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return Integer.valueOf(valStr);
    }
 else     if ("std-Long".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return Long.valueOf(valStr);
    }
 else     if ("std-Float".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return Float.valueOf(valStr);
    }
 else     if ("std-Double".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return Double.valueOf(valStr);
    }
 else     if ("std-BigDecimal".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return new BigDecimal(valStr);
    }
 else     if ("std-Boolean".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return Boolean.valueOf(valStr);
    }
 else     if ("std-Locale".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return UtilMisc.parseLocale(valStr);
    }
 else     if ("std-Date".equals(tagName)) {
      String valStr=element.getAttribute("value");
      DateFormat formatter=getDateFormat();
      java.util.Date value=null;
      try {
synchronized (formatter) {
          value=formatter.parse(valStr);
        }
      }
 catch (      ParseException e) {
        throw new SerializeException("Could not parse date String: " + valStr,e);
      }
      return value;
    }
  }
 else   if (tagName.startsWith("sql-")) {
    if ("sql-Timestamp".equals(tagName)) {
      String valStr=element.getAttribute("value");
      try {
        Calendar cal=DatatypeConverter.parseDate(valStr);
        return new java.sql.Timestamp(cal.getTimeInMillis());
      }
 catch (      Exception e) {
        Debug.logWarning("sql-Timestamp does not conform to XML Schema definition, try java.sql.Timestamp format",module);
        return java.sql.Timestamp.valueOf(valStr);
      }
    }
 else     if ("sql-Date".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return java.sql.Date.valueOf(valStr);
    }
 else     if ("sql-Time".equals(tagName)) {
      String valStr=element.getAttribute("value");
      return java.sql.Time.valueOf(valStr);
    }
  }
 else   if (tagName.startsWith("col-")) {
    Collection<Object> value=null;
    if ("col-ArrayList".equals(tagName)) {
      value=new ArrayList<Object>();
    }
 else     if ("col-LinkedList".equals(tagName)) {
      value=new LinkedList<Object>();
    }
 else     if ("col-Stack".equals(tagName)) {
      value=new Stack<Object>();
    }
 else     if ("col-Vector".equals(tagName)) {
      value=new Vector<Object>();
    }
 else     if ("col-TreeSet".equals(tagName)) {
      value=new TreeSet<Object>();
    }
 else     if ("col-HashSet".equals(tagName)) {
      value=new HashSet<Object>();
    }
 else     if ("col-Collection".equals(tagName)) {
      value=new LinkedList<Object>();
    }
    if (value == null) {
      return deserializeCustom(element);
    }
 else {
      Node curChild=element.getFirstChild();
      while (curChild != null) {
        if (curChild.getNodeType() == Node.ELEMENT_NODE) {
          value.add(deserializeSingle((Element)curChild,delegator));
        }
        curChild=curChild.getNextSibling();
      }
      return value;
    }
  }
 else   if (tagName.startsWith("map-")) {
    Map<Object,Object> value=null;
    if ("map-HashMap".equals(tagName)) {
      value=new HashMap<Object,Object>();
    }
 else     if ("map-Properties".equals(tagName)) {
      value=new Properties();
    }
 else     if ("map-Hashtable".equals(tagName)) {
      value=new Hashtable<Object,Object>();
    }
 else     if ("map-WeakHashMap".equals(tagName)) {
      value=new WeakHashMap<Object,Object>();
    }
 else     if ("map-TreeMap".equals(tagName)) {
      value=new TreeMap<Object,Object>();
    }
 else     if ("map-Map".equals(tagName)) {
      value=new HashMap<Object,Object>();
    }
    if (value == null) {
      return deserializeCustom(element);
    }
 else {
      Node curChild=element.getFirstChild();
      while (curChild != null) {
        if (curChild.getNodeType() == Node.ELEMENT_NODE) {
          Element curElement=(Element)curChild;
          if ("map-Entry".equals(curElement.getLocalName())) {
            Element mapKeyElement=UtilXml.firstChildElement(curElement,"map-Key");
            Element keyElement=null;
            Node tempNode=mapKeyElement.getFirstChild();
            while (tempNode != null) {
              if (tempNode.getNodeType() == Node.ELEMENT_NODE) {
                keyElement=(Element)tempNode;
                break;
              }
              tempNode=tempNode.getNextSibling();
            }
            if (keyElement == null)             throw new SerializeException("Could not find an element under the map-Key");
            Element mapValueElement=UtilXml.firstChildElement(curElement,"map-Value");
            Element valueElement=null;
            tempNode=mapValueElement.getFirstChild();
            while (tempNode != null) {
              if (tempNode.getNodeType() == Node.ELEMENT_NODE) {
                valueElement=(Element)tempNode;
                break;
              }
              tempNode=tempNode.getNextSibling();
            }
            if (valueElement == null)             throw new SerializeException("Could not find an element under the map-Value");
            value.put(deserializeSingle(keyElement,delegator),deserializeSingle(valueElement,delegator));
          }
        }
        curChild=curChild.getNextSibling();
      }
      return value;
    }
  }
 else   if (tagName.startsWith("eepk-")) {
    return delegator.makePK(element);
  }
 else   if (tagName.startsWith("eeval-")) {
    return delegator.makeValue(element);
  }
  return deserializeCustom(element);
}
