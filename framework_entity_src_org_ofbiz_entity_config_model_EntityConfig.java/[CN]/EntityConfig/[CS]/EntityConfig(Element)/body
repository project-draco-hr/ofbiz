{
  List<? extends Element> resourceLoaderElementList=UtilXml.childElementList(element,"resource-loader");
  if (resourceLoaderElementList.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child elements <resource-loader> are missing");
  }
 else {
    List<ResourceLoader> resourceLoaderList=new ArrayList<ResourceLoader>(resourceLoaderElementList.size());
    for (    Element resourceLoaderElement : resourceLoaderElementList) {
      resourceLoaderList.add(new ResourceLoader(resourceLoaderElement));
    }
    this.resourceLoaderList=Collections.unmodifiableList(resourceLoaderList);
  }
  Element transactionFactoryElement=UtilXml.firstChildElement(element,"transaction-factory");
  if (transactionFactoryElement == null) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child element <transaction-factory> is missing");
  }
 else {
    this.transactionFactory=new TransactionFactory(transactionFactoryElement);
  }
  Element connectionFactoryElement=UtilXml.firstChildElement(element,"connection-factory");
  if (connectionFactoryElement == null) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child element <connection-factory> is missing");
  }
 else {
    this.connectionFactory=new ConnectionFactory(connectionFactoryElement);
  }
  Element debugXaResourcesElement=UtilXml.firstChildElement(element,"debug-xa-resources");
  if (debugXaResourcesElement == null) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child element <debug-xa-resources> is missing");
  }
 else {
    this.debugXaResources=new DebugXaResources(debugXaResourcesElement);
  }
  List<? extends Element> delegatorElementList=UtilXml.childElementList(element,"delegator");
  if (delegatorElementList.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child elements <delegator> are missing");
  }
 else {
    List<Delegator> delegatorList=new ArrayList<Delegator>(delegatorElementList.size());
    for (    Element delegatorElement : delegatorElementList) {
      delegatorList.add(new Delegator(delegatorElement));
    }
    this.delegatorList=Collections.unmodifiableList(delegatorList);
  }
  List<? extends Element> entityModelReaderElementList=UtilXml.childElementList(element,"entity-model-reader");
  if (entityModelReaderElementList.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child elements <entity-model-reader> are missing");
  }
 else {
    List<EntityModelReader> entityModelReaderList=new ArrayList<EntityModelReader>(entityModelReaderElementList.size());
    for (    Element entityModelReaderElement : entityModelReaderElementList) {
      entityModelReaderList.add(new EntityModelReader(entityModelReaderElement));
    }
    this.entityModelReaderList=Collections.unmodifiableList(entityModelReaderList);
  }
  List<? extends Element> entityGroupReaderElementList=UtilXml.childElementList(element,"entity-group-reader");
  if (entityGroupReaderElementList.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child elements <entity-group-reader> are missing");
  }
 else {
    List<EntityGroupReader> entityGroupReaderList=new ArrayList<EntityGroupReader>(entityGroupReaderElementList.size());
    for (    Element entityGroupReaderElement : entityGroupReaderElementList) {
      entityGroupReaderList.add(new EntityGroupReader(entityGroupReaderElement));
    }
    this.entityGroupReaderList=Collections.unmodifiableList(entityGroupReaderList);
  }
  List<? extends Element> entityEcaReaderElementList=UtilXml.childElementList(element,"entity-eca-reader");
  if (entityEcaReaderElementList.isEmpty()) {
    this.entityEcaReaderList=Collections.emptyList();
  }
 else {
    List<EntityEcaReader> entityEcaReaderList=new ArrayList<EntityEcaReader>(entityEcaReaderElementList.size());
    for (    Element entityEcaReaderElement : entityEcaReaderElementList) {
      entityEcaReaderList.add(new EntityEcaReader(entityEcaReaderElement));
    }
    this.entityEcaReaderList=Collections.unmodifiableList(entityEcaReaderList);
  }
  List<? extends Element> entityDataReaderElementList=UtilXml.childElementList(element,"entity-data-reader");
  if (entityDataReaderElementList.isEmpty()) {
    this.entityDataReaderList=Collections.emptyList();
  }
 else {
    List<EntityDataReader> entityDataReaderList=new ArrayList<EntityDataReader>(entityDataReaderElementList.size());
    for (    Element entityDataReaderElement : entityDataReaderElementList) {
      entityDataReaderList.add(new EntityDataReader(entityDataReaderElement));
    }
    this.entityDataReaderList=Collections.unmodifiableList(entityDataReaderList);
  }
  List<? extends Element> fieldTypeElementList=UtilXml.childElementList(element,"field-type");
  if (fieldTypeElementList.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child elements <field-type> are missing");
  }
 else {
    List<FieldType> fieldTypeList=new ArrayList<FieldType>(fieldTypeElementList.size());
    for (    Element fieldTypeElement : fieldTypeElementList) {
      fieldTypeList.add(new FieldType(fieldTypeElement));
    }
    this.fieldTypeList=Collections.unmodifiableList(fieldTypeList);
  }
  List<? extends Element> datasourceElementList=UtilXml.childElementList(element,"datasource");
  if (datasourceElementList.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element child elements <datasource> are missing");
  }
 else {
    List<Datasource> datasourceList=new ArrayList<Datasource>(datasourceElementList.size());
    Map<String,Datasource> datasourceMap=new HashMap<String,Datasource>();
    for (    Element datasourceElement : datasourceElementList) {
      Datasource datasource=new Datasource(datasourceElement);
      datasourceList.add(datasource);
      datasourceMap.put(datasource.getName(),datasource);
    }
    this.datasourceList=Collections.unmodifiableList(datasourceList);
    this.datasourceMap=Collections.unmodifiableMap(datasourceMap);
  }
}
