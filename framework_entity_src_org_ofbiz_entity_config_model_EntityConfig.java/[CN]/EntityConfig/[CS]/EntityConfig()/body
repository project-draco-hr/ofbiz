{
  Element element;
  URL confUrl=UtilURL.fromResource(ENTITY_ENGINE_XML_FILENAME);
  if (confUrl == null) {
    throw new GenericEntityConfException("Could not find the " + ENTITY_ENGINE_XML_FILENAME + " file");
  }
  try {
    element=UtilXml.readXmlDocument(confUrl,true,true).getDocumentElement();
  }
 catch (  Exception e) {
    throw new GenericEntityConfException("Exception thrown while reading " + ENTITY_ENGINE_XML_FILENAME + ": ",e);
  }
  List<? extends Element> resourceLoaderElementList=UtilXml.childElementList(element,"resource-loader");
  if (resourceLoaderElementList.isEmpty()) {
    throw new GenericEntityConfException("<entity-config> element child elements <resource-loader> are missing");
  }
 else {
    List<ResourceLoader> resourceLoaderList=new ArrayList<ResourceLoader>(resourceLoaderElementList.size());
    Map<String,ResourceLoader> resourceLoaderMap=new HashMap<String,ResourceLoader>();
    for (    Element resourceLoaderElement : resourceLoaderElementList) {
      ResourceLoader resourceLoader=new ResourceLoader(resourceLoaderElement);
      resourceLoaderList.add(resourceLoader);
      resourceLoaderMap.put(resourceLoader.getName(),resourceLoader);
    }
    this.resourceLoaderList=Collections.unmodifiableList(resourceLoaderList);
    this.resourceLoaderMap=Collections.unmodifiableMap(resourceLoaderMap);
  }
  Element transactionFactoryElement=UtilXml.firstChildElement(element,"transaction-factory");
  if (transactionFactoryElement == null) {
    throw new GenericEntityConfException("<entity-config> element child element <transaction-factory> is missing");
  }
 else {
    this.transactionFactory=new TransactionFactory(transactionFactoryElement);
  }
  Element connectionFactoryElement=UtilXml.firstChildElement(element,"connection-factory");
  if (connectionFactoryElement == null) {
    throw new GenericEntityConfException("<entity-config> element child element <connection-factory> is missing");
  }
 else {
    this.connectionFactory=new ConnectionFactory(connectionFactoryElement);
  }
  Element debugXaResourcesElement=UtilXml.firstChildElement(element,"debug-xa-resources");
  if (debugXaResourcesElement == null) {
    throw new GenericEntityConfException("<entity-config> element child element <debug-xa-resources> is missing");
  }
 else {
    this.debugXaResources=new DebugXaResources(debugXaResourcesElement);
  }
  List<? extends Element> delegatorElementList=UtilXml.childElementList(element,"delegator");
  if (delegatorElementList.isEmpty()) {
    throw new GenericEntityConfException("<entity-config> element child elements <delegator> are missing");
  }
 else {
    List<DelegatorElement> delegatorList=new ArrayList<DelegatorElement>(delegatorElementList.size());
    Map<String,DelegatorElement> delegatorMap=new HashMap<String,DelegatorElement>();
    for (    Element delegatorElement : delegatorElementList) {
      DelegatorElement delegator=new DelegatorElement(delegatorElement);
      delegatorList.add(delegator);
      delegatorMap.put(delegator.getName(),delegator);
    }
    this.delegatorList=Collections.unmodifiableList(delegatorList);
    this.delegatorMap=Collections.unmodifiableMap(delegatorMap);
  }
  List<? extends Element> entityModelReaderElementList=UtilXml.childElementList(element,"entity-model-reader");
  if (entityModelReaderElementList.isEmpty()) {
    throw new GenericEntityConfException("<entity-config> element child elements <entity-model-reader> are missing");
  }
 else {
    List<EntityModelReader> entityModelReaderList=new ArrayList<EntityModelReader>(entityModelReaderElementList.size());
    Map<String,EntityModelReader> entityModelReaderMap=new HashMap<String,EntityModelReader>();
    for (    Element entityModelReaderElement : entityModelReaderElementList) {
      EntityModelReader entityModelReader=new EntityModelReader(entityModelReaderElement);
      entityModelReaderList.add(entityModelReader);
      entityModelReaderMap.put(entityModelReader.getName(),entityModelReader);
    }
    this.entityModelReaderList=Collections.unmodifiableList(entityModelReaderList);
    this.entityModelReaderMap=Collections.unmodifiableMap(entityModelReaderMap);
  }
  List<? extends Element> entityGroupReaderElementList=UtilXml.childElementList(element,"entity-group-reader");
  if (entityGroupReaderElementList.isEmpty()) {
    throw new GenericEntityConfException("<entity-config> element child elements <entity-group-reader> are missing");
  }
 else {
    List<EntityGroupReader> entityGroupReaderList=new ArrayList<EntityGroupReader>(entityGroupReaderElementList.size());
    Map<String,EntityGroupReader> entityGroupReaderMap=new HashMap<String,EntityGroupReader>();
    for (    Element entityGroupReaderElement : entityGroupReaderElementList) {
      EntityGroupReader entityGroupReader=new EntityGroupReader(entityGroupReaderElement);
      entityGroupReaderList.add(entityGroupReader);
      entityGroupReaderMap.put(entityGroupReader.getName(),entityGroupReader);
    }
    this.entityGroupReaderList=Collections.unmodifiableList(entityGroupReaderList);
    this.entityGroupReaderMap=Collections.unmodifiableMap(entityGroupReaderMap);
  }
  List<? extends Element> entityEcaReaderElementList=UtilXml.childElementList(element,"entity-eca-reader");
  if (entityEcaReaderElementList.isEmpty()) {
    this.entityEcaReaderList=Collections.emptyList();
    this.entityEcaReaderMap=Collections.emptyMap();
  }
 else {
    List<EntityEcaReader> entityEcaReaderList=new ArrayList<EntityEcaReader>(entityEcaReaderElementList.size());
    Map<String,EntityEcaReader> entityEcaReaderMap=new HashMap<String,EntityEcaReader>();
    for (    Element entityEcaReaderElement : entityEcaReaderElementList) {
      EntityEcaReader entityEcaReader=new EntityEcaReader(entityEcaReaderElement);
      entityEcaReaderList.add(new EntityEcaReader(entityEcaReaderElement));
      entityEcaReaderMap.put(entityEcaReader.getName(),entityEcaReader);
    }
    this.entityEcaReaderList=Collections.unmodifiableList(entityEcaReaderList);
    this.entityEcaReaderMap=Collections.unmodifiableMap(entityEcaReaderMap);
  }
  List<? extends Element> entityDataReaderElementList=UtilXml.childElementList(element,"entity-data-reader");
  if (entityDataReaderElementList.isEmpty()) {
    this.entityDataReaderList=Collections.emptyList();
    this.entityDataReaderMap=Collections.emptyMap();
  }
 else {
    List<EntityDataReader> entityDataReaderList=new ArrayList<EntityDataReader>(entityDataReaderElementList.size());
    Map<String,EntityDataReader> entityDataReaderMap=new HashMap<String,EntityDataReader>();
    for (    Element entityDataReaderElement : entityDataReaderElementList) {
      EntityDataReader entityDataReader=new EntityDataReader(entityDataReaderElement);
      entityDataReaderList.add(entityDataReader);
      entityDataReaderMap.put(entityDataReader.getName(),entityDataReader);
    }
    this.entityDataReaderList=Collections.unmodifiableList(entityDataReaderList);
    this.entityDataReaderMap=Collections.unmodifiableMap(entityDataReaderMap);
  }
  List<? extends Element> fieldTypeElementList=UtilXml.childElementList(element,"field-type");
  if (fieldTypeElementList.isEmpty()) {
    throw new GenericEntityConfException("<entity-config> element child elements <field-type> are missing");
  }
 else {
    List<FieldType> fieldTypeList=new ArrayList<FieldType>(fieldTypeElementList.size());
    Map<String,FieldType> fieldTypeMap=new HashMap<String,FieldType>();
    for (    Element fieldTypeElement : fieldTypeElementList) {
      FieldType fieldType=new FieldType(fieldTypeElement);
      fieldTypeList.add(fieldType);
      fieldTypeMap.put(fieldType.getName(),fieldType);
    }
    this.fieldTypeList=Collections.unmodifiableList(fieldTypeList);
    this.fieldTypeMap=Collections.unmodifiableMap(fieldTypeMap);
  }
  List<? extends Element> datasourceElementList=UtilXml.childElementList(element,"datasource");
  if (datasourceElementList.isEmpty()) {
    throw new GenericEntityConfException("<entity-config> element child elements <datasource> are missing");
  }
 else {
    List<Datasource> datasourceList=new ArrayList<Datasource>(datasourceElementList.size());
    Map<String,Datasource> datasourceMap=new HashMap<String,Datasource>();
    for (    Element datasourceElement : datasourceElementList) {
      Datasource datasource=new Datasource(datasourceElement);
      datasourceList.add(datasource);
      datasourceMap.put(datasource.getName(),datasource);
    }
    this.datasourceList=Collections.unmodifiableList(datasourceList);
    this.datasourceMap=Collections.unmodifiableMap(datasourceMap);
  }
}
