{
  String lineNumberText=EntityConfig.createConfigFileLineNumberText(element);
  String name=element.getAttribute("name").intern();
  if (name.isEmpty()) {
    throw new GenericEntityConfException("<delegator> element name attribute is empty" + lineNumberText);
  }
  this.name=name;
  String entityModelReader=element.getAttribute("entity-model-reader").intern();
  if (entityModelReader.isEmpty()) {
    throw new GenericEntityConfException("<delegator> element entity-model-reader attribute is empty" + lineNumberText);
  }
  this.entityModelReader=entityModelReader;
  String entityGroupReader=element.getAttribute("entity-group-reader").intern();
  if (entityGroupReader.isEmpty()) {
    throw new GenericEntityConfException("<delegator> element entity-group-reader attribute is empty" + lineNumberText);
  }
  this.entityGroupReader=entityGroupReader;
  this.entityEcaReader=element.getAttribute("entity-eca-reader").intern();
  this.entityEcaEnabled=!"false".equalsIgnoreCase(element.getAttribute("entity-eca-enabled"));
  String entityEcaHandlerClassName=element.getAttribute("entity-eca-handler-class-name").intern();
  if (entityEcaHandlerClassName.isEmpty()) {
    entityEcaHandlerClassName="org.apache.ofbiz.entityext.eca.DelegatorEcaHandler";
  }
  this.entityEcaHandlerClassName=entityEcaHandlerClassName;
  this.distributedCacheClearEnabled="true".equalsIgnoreCase(element.getAttribute("distributed-cache-clear-enabled"));
  String distributedCacheClearClassName=element.getAttribute("distributed-cache-clear-class-name").intern();
  if (distributedCacheClearClassName.isEmpty()) {
    distributedCacheClearClassName="org.apache.ofbiz.entityext.cache.EntityCacheServices";
  }
  this.distributedCacheClearClassName=distributedCacheClearClassName;
  String distributedCacheClearUserLoginId=element.getAttribute("distributed-cache-clear-user-login-id").intern();
  if (distributedCacheClearUserLoginId.isEmpty()) {
    distributedCacheClearUserLoginId="system";
  }
  this.distributedCacheClearUserLoginId=distributedCacheClearUserLoginId;
  this.sequencedIdPrefix=element.getAttribute("sequenced-id-prefix").intern();
  String defaultGroupName=element.getAttribute("default-group-name").intern();
  if (defaultGroupName.isEmpty()) {
    defaultGroupName="org.apache.ofbiz";
  }
  this.defaultGroupName=defaultGroupName;
  this.keyEncryptingKey=element.getAttribute("key-encrypting-key").intern();
  List<? extends Element> groupMapElementList=UtilXml.childElementList(element,"group-map");
  if (groupMapElementList.isEmpty()) {
    throw new GenericEntityConfException("<delegator> element child elements <group-map> are missing" + lineNumberText);
  }
 else {
    List<GroupMap> groupMapList=new ArrayList<GroupMap>(groupMapElementList.size());
    Map<String,String> groupMapMap=new HashMap<String,String>();
    for (    Element groupMapElement : groupMapElementList) {
      GroupMap groupMap=new GroupMap(groupMapElement);
      groupMapList.add(groupMap);
      groupMapMap.put(groupMap.getGroupName(),groupMap.getDatasourceName());
    }
    this.groupMapList=Collections.unmodifiableList(groupMapList);
    this.groupMapMap=Collections.unmodifiableMap(groupMapMap);
  }
}
