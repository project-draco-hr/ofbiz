{
  Delegator delegator=dctx.getDelegator();
  Map results=FastMap.newInstance();
  Locale locale=(Locale)context.get("locale");
  String contentId=(String)context.get("contentId");
  String direction=(String)context.get("direction");
  if (direction != null && direction.equalsIgnoreCase("From")) {
    direction="From";
  }
 else {
    direction="To";
  }
  if (contentId == null) {
    contentId="PUBLISH_ROOT";
  }
  GenericValue content=null;
  try {
    content=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Entity Error:" + e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentNoContentFound",UtilMisc.toMap("contentId",contentId),locale));
  }
  String fromDateStr=(String)context.get("fromDateStr");
  String thruDateStr=(String)context.get("thruDateStr");
  Timestamp fromDate=null;
  if (UtilValidate.isNotEmpty(fromDateStr)) {
    fromDate=UtilDateTime.toTimestamp(fromDateStr);
  }
  Timestamp thruDate=null;
  if (UtilValidate.isNotEmpty(thruDateStr)) {
    thruDate=UtilDateTime.toTimestamp(thruDateStr);
  }
  Map whenMap=FastMap.newInstance();
  whenMap.put("followWhen",context.get("followWhen"));
  whenMap.put("pickWhen",context.get("pickWhen"));
  whenMap.put("returnBeforePickWhen",context.get("returnBeforePickWhen"));
  whenMap.put("returnAfterPickWhen",context.get("returnAfterPickWhen"));
  String startContentAssocTypeId=(String)context.get("contentAssocTypeId");
  if (startContentAssocTypeId != null) {
    startContentAssocTypeId="PUBLISH";
  }
  Map nodeMap=FastMap.newInstance();
  List pickList=FastList.newInstance();
  ContentWorker.traverse(delegator,content,fromDate,thruDate,whenMap,0,nodeMap,startContentAssocTypeId,pickList,direction);
  results.put("nodeMap",nodeMap);
  results.put("pickList",pickList);
  return results;
}
