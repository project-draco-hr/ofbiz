{
  Map results=new HashMap();
  GenericDelegator delegator=dctx.getDelegator();
  Writer out=(Writer)context.get("outWriter");
  Map templateContext=(Map)context.get("templateContext");
  String contentId=(String)context.get("contentId");
  if (templateContext != null && UtilValidate.isEmpty(contentId)) {
    contentId=(String)templateContext.get("contentId");
  }
  String mimeTypeId=(String)context.get("mimeTypeId");
  if (templateContext != null && UtilValidate.isEmpty(mimeTypeId)) {
    mimeTypeId=(String)templateContext.get("mimeTypeId");
  }
  Locale locale=(Locale)context.get("locale");
  if (templateContext != null && locale == null) {
    locale=(Locale)templateContext.get("locale");
  }
  if (templateContext == null) {
    templateContext=new HashMap();
  }
  Writer outWriter=new StringWriter();
  GenericValue view=(GenericValue)context.get("subContentDataResourceView");
  if (view != null && view.containsKey("contentId")) {
    contentId=view.getString("contentId");
  }
  try {
    ContentWorker.renderContentAsText(delegator,contentId,outWriter,templateContext,locale,mimeTypeId,true);
    out.write(outWriter.toString());
    results.put("textData",outWriter.toString());
  }
 catch (  GeneralException e) {
    Debug.logError(e,"Error rendering sub-content text",module);
    return ServiceUtil.returnError(e.toString());
  }
catch (  IOException e) {
    Debug.logError(e,"Error rendering sub-content text",module);
    return ServiceUtil.returnError(e.toString());
  }
  return results;
}
