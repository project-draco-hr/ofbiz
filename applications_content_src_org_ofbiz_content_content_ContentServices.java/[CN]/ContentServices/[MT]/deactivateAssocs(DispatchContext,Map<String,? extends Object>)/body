{
  Delegator delegator=dctx.getDelegator();
  String contentIdTo=(String)context.get("contentIdTo");
  String mapKey=(String)context.get("mapKey");
  String contentAssocTypeId=(String)context.get("contentAssocTypeId");
  String activeContentId=(String)context.get("activeContentId");
  String contentId=(String)context.get("contentId");
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  Locale locale=(Locale)context.get("locale");
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  String sequenceNum=null;
  Map<String,Object> results=FastMap.newInstance();
  try {
    GenericValue activeAssoc=null;
    if (fromDate != null) {
      activeAssoc=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",activeContentId,"contentIdTo",contentIdTo,"fromDate",fromDate,"contentAssocTypeId",contentAssocTypeId).queryOne();
      if (activeAssoc == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocNotFound",UtilMisc.toMap("activeContentId",activeContentId,"contentIdTo",contentIdTo,"contentAssocTypeId",contentAssocTypeId,"fromDate",fromDate),locale));
      }
      sequenceNum=(String)activeAssoc.get("sequenceNum");
    }
    List<EntityCondition> exprList=FastList.newInstance();
    exprList.add(EntityCondition.makeCondition("mapKey",EntityOperator.EQUALS,mapKey));
    if (sequenceNum != null) {
      exprList.add(EntityCondition.makeCondition("sequenceNum",EntityOperator.EQUALS,sequenceNum));
    }
    exprList.add(EntityCondition.makeCondition("mapKey",EntityOperator.EQUALS,mapKey));
    exprList.add(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null));
    exprList.add(EntityCondition.makeCondition("contentIdTo",EntityOperator.EQUALS,contentIdTo));
    exprList.add(EntityCondition.makeCondition("contentAssocTypeId",EntityOperator.EQUALS,contentAssocTypeId));
    if (UtilValidate.isNotEmpty(activeContentId)) {
      exprList.add(EntityCondition.makeCondition("contentId",EntityOperator.NOT_EQUAL,activeContentId));
    }
    if (UtilValidate.isNotEmpty(contentId)) {
      exprList.add(EntityCondition.makeCondition("contentId",EntityOperator.EQUALS,contentId));
    }
    EntityConditionList<EntityCondition> assocExprList=EntityCondition.makeCondition(exprList,EntityOperator.AND);
    List<GenericValue> relatedAssocs=EntityQuery.use(delegator).from("ContentAssoc").where(assocExprList).orderBy("fromDate").filterByDate().queryList();
    for (    GenericValue val : relatedAssocs) {
      val.set("thruDate",nowTimestamp);
      val.store();
    }
    results.put("deactivatedList",relatedAssocs);
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return results;
}
