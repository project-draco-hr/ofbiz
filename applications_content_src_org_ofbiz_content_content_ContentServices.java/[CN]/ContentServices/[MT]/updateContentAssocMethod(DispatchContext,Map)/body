{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map result=new HashMap();
  context.put("entityOperation","_UPDATE");
  List targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");
  List contentPurposeList=ContentWorker.prepContentPurposeList(context);
  context.put("targetOperationList",targetOperationList);
  context.put("contentPurposeList",contentPurposeList);
  String contentIdFrom=(String)context.get("contentId");
  String contentIdTo=(String)context.get("contentIdTo");
  String contentId=(String)context.get("contentId");
  String contentAssocTypeId=(String)context.get("contentAssocTypeId");
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  GenericValue contentAssoc=null;
  try {
    contentAssoc=delegator.findByPrimaryKey("ContentAssoc",UtilMisc.toMap("contentId",contentId,"contentIdTo",contentIdTo,"contentAssocTypeId",contentAssocTypeId,"fromDate",fromDate));
  }
 catch (  GenericEntityException e) {
    System.out.println("Entity Error:" + e.getMessage());
    return ServiceUtil.returnError("Error in retrieving Content. " + e.getMessage());
  }
  if (contentAssoc == null) {
    return ServiceUtil.returnError("Error in updating ContentAssoc. Entity is null.");
  }
  contentAssoc.put("contentAssocPredicateId",context.get("contentAssocPredicateId"));
  contentAssoc.put("dataSourceId",context.get("dataSourceId"));
  contentAssoc.set("thruDate",context.get("thruDate"));
  contentAssoc.set("sequenceNum",context.get("sequenceNum"));
  contentAssoc.put("mapKey",context.get("mapKey"));
  String upperCoordinateStr=(String)context.get("upperCoordinate");
  if (UtilValidate.isEmpty(upperCoordinateStr)) {
    contentAssoc.put("upperCoordinate",null);
  }
 else {
    contentAssoc.setString("upperCoordinate",upperCoordinateStr);
  }
  String leftCoordinateStr=(String)context.get("leftCoordinate");
  if (UtilValidate.isEmpty(leftCoordinateStr)) {
    contentAssoc.put("leftCoordinate",null);
  }
 else {
    contentAssoc.setString("leftCoordinate",leftCoordinateStr);
  }
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String userLoginId=(String)userLogin.get("userLoginId");
  String lastModifiedByUserLogin=userLoginId;
  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();
  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);
  contentAssoc.put("lastModifiedDate",lastModifiedDate);
  String permissionStatus=null;
  Map serviceInMap=new HashMap();
  serviceInMap.put("userLogin",context.get("userLogin"));
  serviceInMap.put("targetOperationList",targetOperationList);
  serviceInMap.put("contentPurposeList",contentPurposeList);
  serviceInMap.put("entityOperation",context.get("entityOperation"));
  serviceInMap.put("contentIdTo",contentIdTo);
  serviceInMap.put("contentIdFrom",contentIdFrom);
  Map permResults=null;
  try {
    permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Problem checking permissions","ContentServices");
    return ServiceUtil.returnError("Problem checking association permissions");
  }
  permissionStatus=(String)permResults.get("permissionStatus");
  if (permissionStatus != null && permissionStatus.equals("granted")) {
    try {
      contentAssoc.store();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
  }
 else {
    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);
    return ServiceUtil.returnError(errorMsg);
  }
  return result;
}
