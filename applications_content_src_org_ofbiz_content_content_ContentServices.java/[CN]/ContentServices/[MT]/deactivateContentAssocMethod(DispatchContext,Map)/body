{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map result=FastMap.newInstance();
  context.put("entityOperation","_UPDATE");
  List targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");
  List contentPurposeList=ContentWorker.prepContentPurposeList(context);
  context.put("targetOperationList",targetOperationList);
  context.put("contentPurposeList",contentPurposeList);
  GenericValue pk=delegator.makeValue("ContentAssoc");
  pk.setAllFields(context,false,null,Boolean.TRUE);
  pk.setAllFields(context,false,"ca",Boolean.TRUE);
  GenericValue contentAssoc=null;
  try {
    contentAssoc=delegator.findByPrimaryKey("ContentAssoc",pk);
  }
 catch (  GenericEntityException e) {
    System.out.println("Entity Error:" + e.getMessage());
    return ServiceUtil.returnError("Error in retrieving Content. " + e.getMessage());
  }
  if (contentAssoc == null) {
    return ServiceUtil.returnError("Error in deactivating ContentAssoc. Entity is null.");
  }
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String userLoginId=(String)userLogin.get("userLoginId");
  String lastModifiedByUserLogin=userLoginId;
  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();
  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);
  contentAssoc.put("lastModifiedDate",lastModifiedDate);
  contentAssoc.put("thruDate",UtilDateTime.nowTimestamp());
  String permissionStatus=null;
  Map serviceInMap=FastMap.newInstance();
  serviceInMap.put("userLogin",context.get("userLogin"));
  serviceInMap.put("targetOperationList",targetOperationList);
  serviceInMap.put("contentPurposeList",contentPurposeList);
  serviceInMap.put("entityOperation",context.get("entityOperation"));
  serviceInMap.put("contentIdTo",contentAssoc.get("contentIdTo"));
  serviceInMap.put("contentIdFrom",contentAssoc.get("contentId"));
  Map permResults=null;
  try {
    permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Problem checking permissions","ContentServices");
    return ServiceUtil.returnError("Problem checking association permissions");
  }
  permissionStatus=(String)permResults.get("permissionStatus");
  if (permissionStatus != null && permissionStatus.equals("granted")) {
    try {
      contentAssoc.store();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
  }
 else {
    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);
    return ServiceUtil.returnError(errorMsg);
  }
  return result;
}
