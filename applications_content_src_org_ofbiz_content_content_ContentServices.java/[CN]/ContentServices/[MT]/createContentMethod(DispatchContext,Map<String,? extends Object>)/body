{
  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);
  context.put("entityOperation","_CREATE");
  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");
  if (Debug.infoOn())   Debug.logInfo("in createContentMethod, targetOperationList: " + targetOperationList,null);
  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);
  context.put("targetOperationList",targetOperationList);
  context.put("contentPurposeList",contentPurposeList);
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String contentId=(String)context.get("contentId");
  if (UtilValidate.isEmpty(contentId)) {
    contentId=delegator.getNextSeqId("Content");
  }
  GenericValue content=delegator.makeValue("Content",UtilMisc.toMap("contentId",contentId));
  content.setNonPKFields(context);
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String userLoginId=(String)userLogin.get("userLoginId");
  if (UtilValidate.isEmpty(context.get("statusId"))) {
    try {
      List<GenericValue> statusItems=delegator.findByAnd("StatusItem",UtilMisc.toMap("statusTypeId","CONTENT_STATUS"),UtilMisc.toList("sequenceId"));
      if (!UtilValidate.isEmpty(statusItems)) {
        content.put("statusId",((GenericValue)statusItems.get(0)).getString("statusId"));
      }
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  content.put("createdByUserLogin",userLoginId);
  content.put("lastModifiedByUserLogin",userLoginId);
  content.put("createdDate",nowTimestamp);
  content.put("lastModifiedDate",nowTimestamp);
  context.put("currentContent",content);
  if (Debug.infoOn())   Debug.logInfo("in createContentMethod, context: " + context,null);
  Map<String,Object> permResults=ContentWorker.callContentPermissionCheckResult(delegator,dispatcher,context);
  String permissionStatus=(String)permResults.get("permissionStatus");
  if (permissionStatus != null && permissionStatus.equalsIgnoreCase("granted")) {
    try {
      content.create();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
catch (    Exception e2) {
      return ServiceUtil.returnError(e2.getMessage());
    }
    result.put("contentId",contentId);
  }
 else {
    String errorMsg=(String)permResults.get(ModelService.ERROR_MESSAGE);
    result.put(ModelService.ERROR_MESSAGE,errorMsg);
    return ServiceUtil.returnFailure(errorMsg);
  }
  context.remove("currentContent");
  return result;
}
