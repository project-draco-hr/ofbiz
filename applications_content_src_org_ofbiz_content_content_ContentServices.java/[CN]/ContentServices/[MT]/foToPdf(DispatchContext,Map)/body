{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Map result=new HashMap();
  String foFileIn=(String)context.get("foFileIn");
  String pdfFileOut=(String)context.get("pdfFileOut");
  String outputDataResourceTypeId=(String)context.get("outputDataResourceTypeId");
  String inputDataResourceTypeId=(String)context.get("inputDataResourceTypeId");
  if (UtilValidate.isEmpty(inputDataResourceTypeId)) {
    inputDataResourceTypeId="LOCAL_FILE";
  }
  String outputContentId=(String)context.get("outputContentId");
  String foContentId=(String)context.get("foContentId");
  String templateDataResourceId=(String)context.get("templateDataResourceId");
  Map fmContext=(Map)context.get("fmContext");
  Map fmPrefixMap=(Map)context.get("fmPrefixMap");
  Logger logger=new Log4JLogger(Debug.getLogger(module));
  MessageHandler.setScreenLogger(logger);
  String processedFo=null;
  if (UtilValidate.isEmpty(foContentId)) {
    if (UtilValidate.isEmpty(foFileIn)) {
      return ServiceUtil.returnError("No FO file or contentId available.");
    }
    Map mapIn=new HashMap();
    mapIn.put("drObjectInfo",foFileIn);
    mapIn.put("drDataResourceTypeId",inputDataResourceTypeId);
    mapIn.put("contentTypeId","DOCUMENT");
    mapIn.put("templateDataResourceId",templateDataResourceId);
    mapIn.put("drDataTemplateTypeId","FTL");
    mapIn.put("userLogin",userLogin);
    try {
      Map thisResult=dispatcher.runSync("persistContentAndAssoc",mapIn);
      foContentId=(String)thisResult.get("contentId");
      if (UtilValidate.isEmpty(foContentId)) {
        Debug.logError("Could not add FO content - foContentId is null.","ContentServices");
        return ServiceUtil.returnError("Could not add FO conten - foContentId is null.");
      }
      result.put("foContentId",foContentId);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem adding FO content.","ContentServices");
      return ServiceUtil.returnError("Problem adding FO content.");
    }
  }
 else {
    if (UtilValidate.isNotEmpty(templateDataResourceId)) {
      try {
        GenericDelegator delegator=dctx.getDelegator();
        GenericValue content=delegator.findByPrimaryKeyCache("Content",UtilMisc.toMap("contentId",foContentId));
        String thisTemplateDataResourceId=content.getString("templateDataResourceId");
        if (thisTemplateDataResourceId == null || !thisTemplateDataResourceId.equals(templateDataResourceId)) {
          content.put("templateDataResourceId",templateDataResourceId);
          content.store();
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"ContentServices");
        return ServiceUtil.returnError(e.getMessage());
      }
    }
  }
  Map mapIn=new HashMap();
  mapIn.put("contentId",foContentId);
  if (fmContext != null) {
    mapIn.put("templateContext",fmContext);
  }
 else {
    mapIn.put("templateContext",fmPrefixMap);
  }
  StringWriter sw=new StringWriter();
  mapIn.put("outWriter",sw);
  try {
    Map thisResult=dispatcher.runSync("renderContentAsText",mapIn);
    processedFo=(String)thisResult.get("textData");
    if (UtilValidate.isEmpty(processedFo)) {
      Debug.logError("Could not get FO text","ContentServices");
      return ServiceUtil.returnError("Could not get FO text");
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Problem getting FO text","ContentServices");
    return ServiceUtil.returnError("Problem getting FO text");
  }
  Driver driver=new Driver();
  driver.setRenderer(Driver.RENDER_PDF);
  driver.setLogger(logger);
  Document xslfo=null;
  try {
    xslfo=UtilXml.readXmlDocument(processedFo);
  }
 catch (  FileNotFoundException e) {
    return ServiceUtil.returnError("Error getting FO file: " + e.toString());
  }
catch (  IOException e2) {
    return ServiceUtil.returnError("Error getting FO file: " + e2.toString());
  }
catch (  ParserConfigurationException e3) {
    return ServiceUtil.returnError("Error getting FO file: " + e3.toString());
  }
catch (  SAXException e4) {
    return ServiceUtil.returnError("Error getting FO file: " + e4.toString());
  }
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  driver.setOutputStream(out);
  InputSource is=new DocumentInputSource(xslfo);
  driver.setInputSource(is);
  try {
    driver.run();
    FopImageFactory.resetCache();
  }
 catch (  Throwable t) {
    Debug.logError("Error processing PDF." + t.getMessage(),"ContentServices");
    return ServiceUtil.returnError("Error processing PDF." + t.getMessage());
  }
  ByteWrapper pdfByteWrapper=new ByteWrapper(out.toByteArray());
  result.put("pdfByteWrapper",pdfByteWrapper);
  if (UtilValidate.isNotEmpty(outputDataResourceTypeId)) {
    if (pdfByteWrapper != null) {
      Map mapIn2=new HashMap();
      mapIn2.put("contentId",outputContentId);
      mapIn2.put("drDataResourceTypeId",outputDataResourceTypeId);
      mapIn2.put("contentTypeId","DOCUMENT");
      mapIn2.put("imageData",pdfByteWrapper);
      mapIn2.put("_imageData_contentType","application/pdf");
      mapIn2.put("_imageData_fileName",pdfFileOut);
      mapIn2.put("drObjectInfo",pdfFileOut);
      mapIn2.put("userLogin",userLogin);
      try {
        Map thisResult=dispatcher.runSync("persistContentAndAssoc",mapIn2);
        outputContentId=(String)thisResult.get("contentId");
        if (UtilValidate.isEmpty(foContentId)) {
          Debug.logError("Could not add PDF content - contentId is null.","ContentServices");
          return ServiceUtil.returnError("Could not add PDF conten - contentId is null.");
        }
        result.put("outputContentId",outputContentId);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem adding FO content.",module);
        return ServiceUtil.returnError("Problem adding FO content.");
      }
      result.put("outputContentId",outputContentId);
    }
  }
 else {
    if (UtilValidate.isEmpty(pdfFileOut)) {
      String outputPath=null;
      String thisDataResourceTypeId=null;
      String ofbizHome=System.getProperty("ofbiz.home");
      int pos=pdfFileOut.indexOf("${OFBIZ_HOME}");
      if (pos > 0) {
        outputPath=pdfFileOut.substring(pos + 13);
        thisDataResourceTypeId="OFBIZ_FILE";
      }
 else {
        outputPath=pdfFileOut;
        thisDataResourceTypeId="LOCAL_FILE";
      }
      Map mapIn3=new HashMap();
      mapIn3.put("objectInfo",outputPath);
      mapIn3.put("drDataResourceTypeId",thisDataResourceTypeId);
      mapIn3.put("binData",pdfByteWrapper);
      try {
        Map thisResult=dispatcher.runSync("createFile",mapIn3);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem writing FO content.",module);
        return ServiceUtil.returnError("Problem adding FO content.");
      }
    }
  }
  return result;
}
