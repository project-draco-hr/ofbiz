{
  UtilCache<String,String> cache=createUtilCache(5,5,2000,false);
  Listener<String,String> gotListener=createListener(cache);
  Listener<String,String> wantedListener=new Listener<String,String>();
  wantedListener.noteKeyAddition(cache,"key","value");
  wantedListener.noteKeyAddition(cache,"anotherKey","anotherValue");
  assertNull("no-get",cache.get("key"));
  assertEquals("putIfAbsentAndGet","value",cache.putIfAbsentAndGet("key","value"));
  assertHasSingleKey(cache,"key","value");
  assertEquals("putIfAbsentAndGet","value",cache.putIfAbsentAndGet("key","newValue"));
  assertHasSingleKey(cache,"key","value");
  String anotherValueAddedToCache=new String("anotherValue");
  String anotherValueNotAddedToCache=new String("anotherValue");
  assertEquals(anotherValueAddedToCache,anotherValueNotAddedToCache);
  assertNotSame(anotherValueAddedToCache,anotherValueNotAddedToCache);
  String cachedValue=cache.putIfAbsentAndGet("anotherKey",anotherValueAddedToCache);
  assertSame(cachedValue,anotherValueAddedToCache);
  cachedValue=cache.putIfAbsentAndGet("anotherKey",anotherValueNotAddedToCache);
  assertNotSame(cachedValue,anotherValueNotAddedToCache);
  assertSame(cachedValue,anotherValueAddedToCache);
  cache.removeListener(gotListener);
  assertEquals("listener",wantedListener,gotListener);
}
