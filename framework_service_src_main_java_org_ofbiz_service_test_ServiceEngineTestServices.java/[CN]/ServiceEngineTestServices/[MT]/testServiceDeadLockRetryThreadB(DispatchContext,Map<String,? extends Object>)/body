{
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  try {
    GenericValue testingTypeB=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","SVCLRT_B").queryOne();
    testingTypeB.set("description","New description for SVCLRT_B");
    testingTypeB.store();
    Debug.logInfo("In testServiceDeadLockRetryThreadB just updated SVCLRT_B, beginning wait",module);
    Thread.sleep(100);
    Debug.logInfo("In testServiceDeadLockRetryThreadB done with wait, updating SVCLRT_A",module);
    GenericValue testingTypeA=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","SVCLRT_A").queryOne();
    testingTypeA.set("description","New description for SVCLRT_A");
    testingTypeA.store();
    Debug.logInfo("In testServiceDeadLockRetryThreadA done with updating SVCLRT_A, updating SVCLRT_BONLY",module);
    GenericValue testingTypeAOnly=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","SVCLRT_BONLY").queryOne();
    testingTypeAOnly.set("description","New description for SVCLRT_BONLY; this is only changed by thread B so if it doesn't match something happened to thread B!");
    testingTypeAOnly.store();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Entity Engine Exception running dead lock test thread B: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestEntityEngineExceptionThreadB",UtilMisc.toMap("errorString",e.toString()),locale));
  }
catch (  InterruptedException e) {
    Debug.logError(e,"Wait Interrupted Exception running dead lock test thread B: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestEntityEngineWaitInterruptedExceptionThreadB",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  return ServiceUtil.returnSuccess();
}
