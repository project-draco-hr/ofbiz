{
  Delegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> results=ServiceUtil.returnSuccess();
  Map<String,Object> request=new HashMap<String,Object>();
  Properties props=buildAIMProperties(context,delegator);
  buildMerchantInfo(context,props,request);
  buildGatewayResponeConfig(context,props,request);
  buildCustomerBillingInfo(context,props,request);
  buildEmailSettings(context,props,request);
  buildInvoiceInfo(context,props,request);
  props.put("transType","AUTH_CAPTURE");
  buildAuthTransaction(context,props,request);
  Map<String,Object> validateResults=validateRequest(context,props,request);
  String respMsg=(String)validateResults.get(ModelService.RESPONSE_MESSAGE);
  if (ModelService.RESPOND_ERROR.equals(respMsg)) {
    results.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resource,"AccountingValidationFailedInvalidValues",locale));
    return results;
  }
  Map<String,Object> reply=processCard(request,props,locale);
  processAuthCaptureTransResult(request,reply,results);
  if (results.get("captureRefNum") == null) {
    return ServiceUtil.returnError((String)results.get("captureMessage"));
  }
  return results;
}
