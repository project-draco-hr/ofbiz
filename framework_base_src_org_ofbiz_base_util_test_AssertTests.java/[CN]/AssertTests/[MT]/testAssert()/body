{
  Object testObject=new Object();
  try {
    Assert.argumentNotNull("foo",testObject);
  }
 catch (  Exception e) {
    fail("argumentNotNull threw an exception - " + e);
  }
  try {
    Assert.argumentNotNull("foo",null);
    fail("argumentNotNull - IllegalArgumentException not thrown");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Assert.argumentsNotNull("foo",testObject,"bar",testObject);
  }
 catch (  Exception e) {
    fail("argumentsNotNull threw an exception - " + e);
  }
  try {
    Assert.argumentsNotNull("foo",testObject,"bar",null);
    fail("argumentsNotNull - IllegalArgumentException not thrown");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Assert.argumentIsClass("foo",testObject,Object.class);
  }
 catch (  Exception e) {
    fail("argumentIsClass threw an exception - " + e);
  }
  try {
    Assert.argumentIsClass("foo",testObject,AssertTests.class);
    fail("argumentIsClass - IllegalArgumentException not thrown");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Assert.argumentEqualsObject("foo",testObject,testObject);
  }
 catch (  Exception e) {
    fail("argumentEqualsObject threw an exception - " + e);
  }
  try {
    Assert.argumentEqualsObject("foo",testObject,this);
    fail("argumentEqualsObject - IllegalArgumentException not thrown");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Assert.argumentEqualsObject("foo",testObject,testObject);
  }
 catch (  Exception e) {
    fail("argumentEqualsObject threw an exception - " + e);
  }
  try {
    Assert.argumentEqualsObject("foo",testObject,this);
    fail("argumentEqualsObject - IllegalArgumentException not thrown");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Assert.argumentCanBeCastTo("foo",testObject,Object.class);
  }
 catch (  Exception e) {
    fail("argumentCanBeCastTo threw an exception - " + e);
  }
  try {
    Assert.argumentCanBeCastTo("foo",this,Map.class);
    fail("argumentCanBeCastTo - IllegalArgumentException not thrown");
  }
 catch (  IllegalArgumentException e) {
  }
}
