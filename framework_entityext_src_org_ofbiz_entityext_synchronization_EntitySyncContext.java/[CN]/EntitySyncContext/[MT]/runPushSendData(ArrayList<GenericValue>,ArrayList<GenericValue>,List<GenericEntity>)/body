{
  this.setTotalRowCounts(valuesToCreate,valuesToStore,keysToRemove);
  if (this.totalRowsPerSplit > 0) {
    Map<String,Object> targetServiceMap=UtilMisc.toMap("entitySyncId",entitySyncId,"valuesToCreate",valuesToCreate,"valuesToStore",valuesToStore,"keysToRemove",keysToRemove,"userLogin",userLogin);
    if (UtilValidate.isNotEmpty(targetDelegatorName)) {
      targetServiceMap.put("delegatorName",targetDelegatorName);
    }
    String serviceErrorMsg="Error running EntitySync [" + entitySyncId + "], call to store service ["+ targetServiceName+ "] failed.";
    try {
      Map<String,Object> remoteStoreResult=dispatcher.runSync(targetServiceName,targetServiceMap);
      if (ServiceUtil.isError(remoteStoreResult)) {
        throw new SyncOtherErrorException(serviceErrorMsg,null,null,remoteStoreResult,null);
      }
      this.totalStoreCalls++;
      long toCreateInsertedCur=remoteStoreResult.get("toCreateInserted") == null ? 0 : ((Long)remoteStoreResult.get("toCreateInserted")).longValue();
      long toCreateUpdatedCur=remoteStoreResult.get("toCreateUpdated") == null ? 0 : ((Long)remoteStoreResult.get("toCreateUpdated")).longValue();
      long toCreateNotUpdatedCur=remoteStoreResult.get("toCreateNotUpdated") == null ? 0 : ((Long)remoteStoreResult.get("toCreateNotUpdated")).longValue();
      long toStoreInsertedCur=remoteStoreResult.get("toStoreInserted") == null ? 0 : ((Long)remoteStoreResult.get("toStoreInserted")).longValue();
      long toStoreUpdatedCur=remoteStoreResult.get("toStoreUpdated") == null ? 0 : ((Long)remoteStoreResult.get("toStoreUpdated")).longValue();
      long toStoreNotUpdatedCur=remoteStoreResult.get("toStoreNotUpdated") == null ? 0 : ((Long)remoteStoreResult.get("toStoreNotUpdated")).longValue();
      long toRemoveDeletedCur=remoteStoreResult.get("toRemoveDeleted") == null ? 0 : ((Long)remoteStoreResult.get("toRemoveDeleted")).longValue();
      long toRemoveAlreadyDeletedCur=remoteStoreResult.get("toRemoveAlreadyDeleted") == null ? 0 : ((Long)remoteStoreResult.get("toRemoveAlreadyDeleted")).longValue();
      this.toCreateInserted+=toCreateInsertedCur;
      this.toCreateUpdated+=toCreateUpdatedCur;
      this.toCreateNotUpdated+=toCreateNotUpdatedCur;
      this.toStoreInserted+=toStoreInsertedCur;
      this.toStoreUpdated+=toStoreUpdatedCur;
      this.toStoreNotUpdated+=toStoreNotUpdatedCur;
      this.toRemoveDeleted+=toRemoveDeletedCur;
      this.toRemoveAlreadyDeleted+=toRemoveAlreadyDeletedCur;
    }
 catch (    GenericServiceException e) {
      throw new SyncServiceErrorException(serviceErrorMsg,e);
    }
  }
}
