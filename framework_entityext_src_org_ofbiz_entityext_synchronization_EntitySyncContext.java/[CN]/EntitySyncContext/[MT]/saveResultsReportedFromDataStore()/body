{
  try {
    long runningTimeMillis=System.currentTimeMillis() - startDate.getTime();
    long splitTotalTime=System.currentTimeMillis() - this.splitStartTime;
    if (splitTotalTime < this.perSplitMinMillis) {
      this.perSplitMinMillis=splitTotalTime;
    }
    if (splitTotalTime > this.perSplitMaxMillis) {
      this.perSplitMaxMillis=splitTotalTime;
    }
    setSplitStartTime();
    this.totalRowsPerSplit=this.toCreateInserted + this.toCreateNotUpdated + this.toCreateUpdated+ this.toStoreInserted+ this.toStoreNotUpdated+ this.toStoreUpdated+ this.toRemoveAlreadyDeleted+ this.toRemoveDeleted;
    if (this.totalRowsPerSplit < this.perSplitMinItems) {
      this.perSplitMinItems=this.totalRowsPerSplit;
    }
    if (this.totalRowsPerSplit > this.perSplitMaxItems) {
      this.perSplitMaxItems=this.totalRowsPerSplit;
    }
    this.totalRowsToCreate+=this.toCreateInserted + this.toCreateNotUpdated + this.toCreateUpdated;
    this.totalRowsToStore+=this.toStoreInserted + this.toStoreNotUpdated + this.toStoreUpdated;
    this.totalRowsToRemove+=this.toRemoveAlreadyDeleted + this.toRemoveDeleted;
    Map<String,Object> updateEsRunResult=dispatcher.runSync("updateEntitySyncRunning",UtilMisc.toMap("entitySyncId",entitySyncId,"lastSuccessfulSynchTime",this.currentRunEndTime,"userLogin",userLogin));
    Map<String,Object> updateHistoryMap=UtilMisc.toMap("entitySyncId",entitySyncId,"startDate",startDate,"lastSuccessfulSynchTime",this.currentRunEndTime,"lastCandidateEndTime",this.getNextRunEndTime(),"lastSplitStartTime",Long.valueOf(this.splitStartTime));
    updateHistoryMap.put("toCreateInserted",Long.valueOf(toCreateInserted));
    updateHistoryMap.put("toCreateUpdated",Long.valueOf(toCreateUpdated));
    updateHistoryMap.put("toCreateNotUpdated",Long.valueOf(toCreateNotUpdated));
    updateHistoryMap.put("toStoreInserted",Long.valueOf(toStoreInserted));
    updateHistoryMap.put("toStoreUpdated",Long.valueOf(toStoreUpdated));
    updateHistoryMap.put("toStoreNotUpdated",Long.valueOf(toStoreNotUpdated));
    updateHistoryMap.put("toRemoveDeleted",Long.valueOf(toRemoveDeleted));
    updateHistoryMap.put("toRemoveAlreadyDeleted",Long.valueOf(toRemoveAlreadyDeleted));
    updateHistoryMap.put("runningTimeMillis",Long.valueOf(runningTimeMillis));
    updateHistoryMap.put("totalStoreCalls",Long.valueOf(totalStoreCalls));
    updateHistoryMap.put("totalSplits",Long.valueOf(totalSplits));
    updateHistoryMap.put("totalRowsExported",Long.valueOf(totalRowsExported));
    updateHistoryMap.put("totalRowsToCreate",Long.valueOf(totalRowsToCreate));
    updateHistoryMap.put("totalRowsToStore",Long.valueOf(totalRowsToStore));
    updateHistoryMap.put("totalRowsToRemove",Long.valueOf(totalRowsToRemove));
    updateHistoryMap.put("perSplitMinMillis",Long.valueOf(perSplitMinMillis));
    updateHistoryMap.put("perSplitMaxMillis",Long.valueOf(perSplitMaxMillis));
    updateHistoryMap.put("perSplitMinItems",Long.valueOf(perSplitMinItems));
    updateHistoryMap.put("perSplitMaxItems",Long.valueOf(perSplitMaxItems));
    updateHistoryMap.put("userLogin",userLogin);
    Map<String,Object> updateEsHistRunResult=dispatcher.runSync("updateEntitySyncHistory",updateHistoryMap);
    if (ServiceUtil.isError(updateEsRunResult)) {
      String errorMsg="Error running EntitySync [" + entitySyncId + "], update of EntitySync record with lastSuccessfulSynchTime failed.";
      throw new SyncDataErrorException(errorMsg,null,null,updateEsRunResult,null);
    }
    if (ServiceUtil.isError(updateEsHistRunResult)) {
      String errorMsg="Error running EntitySync [" + entitySyncId + "], update of EntitySyncHistory (startDate:["+ startDate+ "]) record with lastSuccessfulSynchTime and result stats failed.";
      throw new SyncDataErrorException(errorMsg,null,null,updateEsHistRunResult,null);
    }
  }
 catch (  GenericServiceException e) {
    throw new SyncServiceErrorException("Error saving results reported from data store",e);
  }
}
