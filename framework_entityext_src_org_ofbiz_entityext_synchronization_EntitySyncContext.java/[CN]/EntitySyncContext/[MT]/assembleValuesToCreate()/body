{
  ArrayList<GenericValue> valuesToCreate=new ArrayList<GenericValue>();
  if (this.nextCreateTxTime != null && (this.nextCreateTxTime.equals(currentRunEndTime) || this.nextCreateTxTime.after(currentRunEndTime))) {
    return valuesToCreate;
  }
  int entitiesSkippedForKnownNext=0;
  for (  ModelEntity modelEntity : entityModelToUseList) {
    int insertBefore=0;
    Timestamp knownNextCreateTime=this.nextEntityCreateTxTime.get(modelEntity.getEntityName());
    if (knownNextCreateTime != null && (knownNextCreateTime.equals(currentRunEndTime) || knownNextCreateTime.after(currentRunEndTime))) {
      entitiesSkippedForKnownNext++;
      continue;
    }
    boolean beganTransaction=false;
    try {
      beganTransaction=TransactionUtil.begin(7200);
    }
 catch (    GenericTransactionException e) {
      throw new SyncDataErrorException("Unable to begin JTA transaction",e);
    }
    try {
      EntityCondition findValCondition=EntityCondition.makeCondition(EntityCondition.makeCondition(ModelEntity.CREATE_STAMP_TX_FIELD,EntityOperator.GREATER_THAN_EQUAL_TO,currentRunStartTime),EntityCondition.makeCondition(ModelEntity.CREATE_STAMP_TX_FIELD,EntityOperator.LESS_THAN,currentRunEndTime));
      EntityListIterator eli=delegator.find(modelEntity.getEntityName(),findValCondition,null,null,UtilMisc.toList(ModelEntity.CREATE_STAMP_TX_FIELD,ModelEntity.CREATE_STAMP_FIELD),null);
      GenericValue nextValue=null;
      long valuesPerEntity=0;
      while ((nextValue=eli.next()) != null) {
        while (insertBefore < valuesToCreate.size() && valuesToCreate.get(insertBefore).getTimestamp(ModelEntity.CREATE_STAMP_TX_FIELD).before(nextValue.getTimestamp(ModelEntity.CREATE_STAMP_TX_FIELD))) {
          insertBefore++;
        }
        while (insertBefore < valuesToCreate.size() && valuesToCreate.get(insertBefore).getTimestamp(ModelEntity.CREATE_STAMP_FIELD).before(nextValue.getTimestamp(ModelEntity.CREATE_STAMP_FIELD))) {
          insertBefore++;
        }
        valuesToCreate.add(insertBefore,nextValue);
        valuesPerEntity++;
      }
      eli.close();
      if (valuesPerEntity == 0) {
        Timestamp startCheckStamp=new Timestamp(System.currentTimeMillis() - syncEndBufferMillis);
        EntityCondition findNextCondition=EntityCondition.makeCondition(EntityCondition.makeCondition(ModelEntity.CREATE_STAMP_TX_FIELD,EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition(ModelEntity.CREATE_STAMP_TX_FIELD,EntityOperator.GREATER_THAN_EQUAL_TO,currentRunEndTime));
        EntityListIterator eliNext=delegator.find(modelEntity.getEntityName(),findNextCondition,null,null,UtilMisc.toList(ModelEntity.CREATE_STAMP_TX_FIELD),null);
        GenericValue firstVal=eliNext.next();
        eliNext.close();
        Timestamp nextTxTime;
        if (firstVal != null) {
          nextTxTime=firstVal.getTimestamp(ModelEntity.CREATE_STAMP_TX_FIELD);
        }
 else {
          nextTxTime=startCheckStamp;
        }
        if (this.nextCreateTxTime == null || nextTxTime.before(this.nextCreateTxTime)) {
          this.nextCreateTxTime=nextTxTime;
          Debug.logInfo("EntitySync: Set nextCreateTxTime to [" + nextTxTime + "]",module);
        }
        Timestamp curEntityNextTxTime=this.nextEntityCreateTxTime.get(modelEntity.getEntityName());
        if (curEntityNextTxTime == null || nextTxTime.before(curEntityNextTxTime)) {
          this.nextEntityCreateTxTime.put(modelEntity.getEntityName(),nextTxTime);
          Debug.logInfo("EntitySync: Set nextEntityCreateTxTime to [" + nextTxTime + "] for the entity ["+ modelEntity.getEntityName()+ "]",module);
        }
      }
    }
 catch (    GenericEntityException e) {
      try {
        TransactionUtil.rollback(beganTransaction,"Entity Engine error in assembleValuesToCreate",e);
      }
 catch (      GenericTransactionException e2) {
        Debug.logWarning(e2,"Unable to call rollback()",module);
      }
      throw new SyncDataErrorException("Error getting values to create from the datasource",e);
    }
catch (    Throwable t) {
      try {
        TransactionUtil.rollback(beganTransaction,"Throwable error in assembleValuesToCreate",t);
      }
 catch (      GenericTransactionException e2) {
        Debug.logWarning(e2,"Unable to call rollback()",module);
      }
      throw new SyncDataErrorException("Caught runtime error while getting values to create",t);
    }
    try {
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericTransactionException e) {
      throw new SyncDataErrorException("Commit transaction failed",e);
    }
  }
  if (entitiesSkippedForKnownNext > 0) {
    if (Debug.infoOn())     Debug.logInfo("In assembleValuesToCreate skipped [" + entitiesSkippedForKnownNext + "/"+ entityModelToUseList+ "] entities for the time period ending at ["+ currentRunEndTime+ "] because of next known create times",module);
  }
  boolean logValues=false;
  if (logValues && valuesToCreate.size() > 0) {
    StringBuilder toCreateInfo=new StringBuilder();
    for (    GenericValue valueToCreate : valuesToCreate) {
      toCreateInfo.append("\n-->[");
      toCreateInfo.append(valueToCreate.get(ModelEntity.CREATE_STAMP_TX_FIELD));
      toCreateInfo.append(":");
      toCreateInfo.append(valueToCreate.get(ModelEntity.CREATE_STAMP_FIELD));
      toCreateInfo.append("] ");
      toCreateInfo.append(valueToCreate.getPrimaryKey());
    }
    Debug.logInfo(toCreateInfo.toString(),module);
  }
  if (valuesToCreate.size() > 0) {
    this.nextCreateTxTime=null;
  }
  return valuesToCreate;
}
