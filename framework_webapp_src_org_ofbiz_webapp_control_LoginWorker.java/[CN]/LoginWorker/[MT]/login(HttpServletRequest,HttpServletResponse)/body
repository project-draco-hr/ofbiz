{
  HttpSession session=request.getSession();
  String username=request.getParameter("USERNAME");
  String password=request.getParameter("PASSWORD");
  if (username == null)   username=(String)session.getAttribute("USERNAME");
  if (password == null)   password=(String)session.getAttribute("PASSWORD");
  if (UtilValidate.isNotEmpty((String)request.getAttribute("USERNAME"))) {
    username=(String)request.getAttribute("USERNAME");
  }
  if (UtilValidate.isNotEmpty((String)request.getAttribute("PASSWORD"))) {
    password=(String)request.getAttribute("PASSWORD");
  }
  List unpwErrMsgList=FastList.newInstance();
  if (UtilValidate.isEmpty(username)) {
    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request)));
  }
  if (UtilValidate.isEmpty(password)) {
    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp,"loginevents.password_was_empty_reenter",UtilHttp.getLocale(request)));
  }
  if (!unpwErrMsgList.isEmpty()) {
    request.setAttribute("_ERROR_MESSAGE_LIST_",unpwErrMsgList);
    return "error";
  }
  if ((username != null) && ("true".equalsIgnoreCase(UtilProperties.getPropertyValue("security.properties","username.lowercase")))) {
    username=username.toLowerCase();
  }
  if ((password != null) && ("true".equalsIgnoreCase(UtilProperties.getPropertyValue("security.properties","password.lowercase")))) {
    password=password.toLowerCase();
  }
  String requirePasswordChange=request.getParameter("requirePasswordChange");
  String visitId=VisitHandler.getVisitId(session);
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Map result=null;
  if (UtilValidate.isNotEmpty(requirePasswordChange) && "Y".equals(requirePasswordChange)) {
    Map inMap=UtilMisc.toMap("login.username",username,"login.password",password,"locale",UtilHttp.getLocale(request));
    inMap.put("userLoginId",username);
    inMap.put("currentPassword",password);
    inMap.put("newPassword",request.getParameter("newPassword"));
    inMap.put("newPasswordVerify",request.getParameter("newPasswordVerify"));
    try {
      result=dispatcher.runSync("updatePassword",inMap);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Error calling updatePassword service",module);
      Map messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    if (ServiceUtil.isError(result)) {
      Map messageMap=UtilMisc.toMap("errorMessage",(String)result.get(ModelService.ERROR_MESSAGE));
      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
 else {
      password=request.getParameter("newPassword");
    }
  }
  try {
    result=dispatcher.runSync("userLogin",UtilMisc.toMap("login.username",username,"login.password",password,"visitId",visitId,"locale",UtilHttp.getLocale(request)));
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Error calling userLogin service",module);
    Map messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
    String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  if (ModelService.RESPOND_SUCCESS.equals(result.get(ModelService.RESPONSE_MESSAGE))) {
    GenericValue userLogin=(GenericValue)result.get("userLogin");
    Map userLoginSession=(Map)result.get("userLoginSession");
    if (userLogin != null && "Y".equals(userLogin.getString("requirePasswordChange"))) {
      return "requirePasswordChange";
    }
    return doMainLogin(request,response,userLogin,userLoginSession);
  }
 else {
    Map messageMap=UtilMisc.toMap("errorMessage",(String)result.get(ModelService.ERROR_MESSAGE));
    String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
}
