{
  HttpSession session=request.getSession();
  String username=request.getParameter("USERNAME");
  String password=request.getParameter("PASSWORD");
  if (username == null)   username=(String)session.getAttribute("USERNAME");
  if (password == null)   password=(String)session.getAttribute("PASSWORD");
  if (UtilValidate.isNotEmpty(request.getAttribute("USERNAME"))) {
    username=(String)request.getAttribute("USERNAME");
  }
  if (UtilValidate.isNotEmpty(request.getAttribute("PASSWORD"))) {
    password=(String)request.getAttribute("PASSWORD");
  }
  List<String> unpwErrMsgList=new LinkedList<String>();
  if (UtilValidate.isEmpty(username)) {
    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request)));
  }
  if (UtilValidate.isEmpty(password)) {
    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp,"loginevents.password_was_empty_reenter",UtilHttp.getLocale(request)));
  }
  boolean requirePasswordChange="Y".equals(request.getParameter("requirePasswordChange"));
  if (!unpwErrMsgList.isEmpty()) {
    request.setAttribute("_ERROR_MESSAGE_LIST_",unpwErrMsgList);
    return requirePasswordChange ? "requirePasswordChange" : "error";
  }
  boolean setupNewDelegatorEtc=false;
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  ServletContext servletContext=session.getServletContext();
  String tenantId=request.getParameter("userTenantId");
  if (UtilValidate.isEmpty(tenantId)) {
    tenantId=(String)request.getAttribute("userTenantId");
  }
  if (UtilValidate.isNotEmpty(tenantId)) {
    String oldDelegatorName=delegator.getDelegatorName();
    int delegatorNameHashIndex=oldDelegatorName.indexOf('#');
    String currentDelegatorTenantId=null;
    if (delegatorNameHashIndex > 0) {
      currentDelegatorTenantId=oldDelegatorName.substring(delegatorNameHashIndex + 1);
      if (currentDelegatorTenantId != null)       currentDelegatorTenantId=currentDelegatorTenantId.trim();
    }
    if (delegatorNameHashIndex == -1 || (currentDelegatorTenantId != null && !tenantId.equals(currentDelegatorTenantId))) {
      String delegatorName=delegator.getDelegatorBaseName() + "#" + tenantId;
      try {
        delegator=DelegatorFactory.getDelegator(delegatorName);
        dispatcher=ContextFilter.makeWebappDispatcher(servletContext,delegator);
      }
 catch (      NullPointerException e) {
        Debug.logError(e,"Error getting tenant delegator",module);
        Map<String,String> messageMap=UtilMisc.toMap("errorMessage","Tenant [" + tenantId + "]  not found...");
        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
        return "error";
      }
      setupNewDelegatorEtc=true;
    }
  }
 else {
    Debug.logInfo("Setting default delegator",module);
    String delegatorName=delegator.getDelegatorBaseName();
    try {
      delegator=DelegatorFactory.getDelegator(delegatorName);
      dispatcher=ContextFilter.makeWebappDispatcher(servletContext,delegator);
    }
 catch (    NullPointerException e) {
      Debug.logError(e,"Error getting default delegator",module);
      Map<String,String> messageMap=UtilMisc.toMap("errorMessage","Error getting default delegator");
      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    setupNewDelegatorEtc=true;
  }
  Map<String,Object> result=null;
  try {
    String visitId=VisitHandler.getVisitId(session);
    result=dispatcher.runSync("userLogin",UtilMisc.toMap("login.username",username,"login.password",password,"visitId",visitId,"locale",UtilHttp.getLocale(request)));
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Error calling userLogin service",module);
    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
    String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  if (ModelService.RESPOND_SUCCESS.equals(result.get(ModelService.RESPONSE_MESSAGE))) {
    GenericValue userLogin=(GenericValue)result.get("userLogin");
    if (requirePasswordChange) {
      Map<String,Object> inMap=UtilMisc.<String,Object>toMap("login.username",username,"login.password",password,"locale",UtilHttp.getLocale(request));
      inMap.put("userLoginId",username);
      inMap.put("currentPassword",password);
      inMap.put("newPassword",request.getParameter("newPassword"));
      inMap.put("newPasswordVerify",request.getParameter("newPasswordVerify"));
      Map<String,Object> resultPasswordChange=null;
      try {
        resultPasswordChange=dispatcher.runSync("updatePassword",inMap);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Error calling updatePassword service",module);
        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
        return "requirePasswordChange";
      }
      if (ServiceUtil.isError(resultPasswordChange)) {
        String errorMessage=(String)resultPasswordChange.get(ModelService.ERROR_MESSAGE);
        if (UtilValidate.isNotEmpty(errorMessage)) {
          Map<String,String> messageMap=UtilMisc.toMap("errorMessage",errorMessage);
          String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
          request.setAttribute("_ERROR_MESSAGE_",errMsg);
        }
        request.setAttribute("_ERROR_MESSAGE_LIST_",resultPasswordChange.get(ModelService.ERROR_MESSAGE_LIST));
        return "requirePasswordChange";
      }
 else {
        try {
          userLogin.refresh();
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"Error refreshing userLogin value",module);
          Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
          String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
          request.setAttribute("_ERROR_MESSAGE_",errMsg);
          return "requirePasswordChange";
        }
      }
    }
    if (setupNewDelegatorEtc) {
      setWebContextObjects(request,response,delegator,dispatcher);
    }
    Map<String,Object> userLoginSession=checkMap(result.get("userLoginSession"),String.class,Object.class);
    if (userLogin != null && "Y".equals(userLogin.getString("requirePasswordChange"))) {
      return "requirePasswordChange";
    }
    String autoChangePassword=EntityUtilProperties.getPropertyValue("security.properties","user.auto.change.password.enable","false",delegator);
    if ("true".equalsIgnoreCase(autoChangePassword)) {
      if ("requirePasswordChange".equals(autoChangePassword(request,response))) {
        return "requirePasswordChange";
      }
    }
    String javaScriptEnabled="N";
    if ("Y".equals(request.getParameter("JavaScriptEnabled"))) {
      javaScriptEnabled="Y";
    }
    try {
      result=dispatcher.runSync("setUserPreference",UtilMisc.toMap("userPrefTypeId","javaScriptEnabled","userPrefGroupTypeId","GLOBAL_PREFERENCES","userPrefValue",javaScriptEnabled,"userLogin",userLogin));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Error setting user preference",module);
    }
    return doMainLogin(request,response,userLogin,userLoginSession);
  }
 else {
    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",(String)result.get(ModelService.ERROR_MESSAGE));
    String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return requirePasswordChange ? "requirePasswordChange" : "error";
  }
}
