{
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  if (userLogin != null && "anonymous".equals(userLogin.getString("userLoginId"))) {
    userLogin=null;
  }
  if (userLogin != null) {
    if (!hasBasePermission(userLogin,request) || isFlaggedLoggedOut(userLogin)) {
      Debug.logInfo("User does not have permission or is flagged as logged out",module);
      doBasicLogout(userLogin,request,response);
      userLogin=null;
      session=request.getSession();
    }
  }
  String username=null;
  String password=null;
  if (userLogin == null) {
    username=request.getParameter("USERNAME");
    password=request.getParameter("PASSWORD");
    if (username == null)     username=(String)session.getAttribute("USERNAME");
    if (password == null)     password=(String)session.getAttribute("PASSWORD");
    if ((username == null) || (password == null) || ("error".equals(login(request,response)))) {
      request.removeAttribute("_LOGIN_PASSED_");
      session.setAttribute("_PREVIOUS_REQUEST_",request.getPathInfo());
      Map<String,Object> urlParams=UtilHttp.getUrlOnlyParameterMap(request);
      if (UtilValidate.isNotEmpty(urlParams)) {
        session.setAttribute("_PREVIOUS_PARAM_MAP_URL_",urlParams);
      }
      Map<String,Object> formParams=UtilHttp.getParameterMap(request,urlParams.keySet(),false);
      if (UtilValidate.isNotEmpty(formParams)) {
        session.setAttribute("_PREVIOUS_PARAM_MAP_FORM_",formParams);
      }
      return "error";
    }
  }
  return "success";
}
