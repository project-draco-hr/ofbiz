{
  boolean doCheck="true".equalsIgnoreCase(UtilProperties.getPropertyValue("security.properties","security.login.cert.allow","true"));
  if (doCheck) {
    GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
    HttpSession session=request.getSession();
    GenericValue currentUserLogin=(GenericValue)session.getAttribute("userLogin");
    if (currentUserLogin != null) {
      String hasLoggedOut=currentUserLogin.getString("hasLoggedOut");
      if (hasLoggedOut != null && "Y".equals(hasLoggedOut)) {
        currentUserLogin=null;
      }
    }
    String cnPattern=UtilProperties.getPropertyValue("security.properties","security.login.cert.pattern","(.*)");
    Pattern pattern=Pattern.compile(cnPattern);
    if (currentUserLogin == null) {
      X509Certificate[] clientCerts=(X509Certificate[])request.getAttribute("javax.servlet.request.X509Certificate");
      if (clientCerts == null) {
        clientCerts=(X509Certificate[])request.getAttribute("javax.net.ssl.peer_certificates");
      }
      if (clientCerts != null) {
        String userLoginId=null;
        for (int i=0; i < clientCerts.length; i++) {
          X500Principal x500=clientCerts[i].getSubjectX500Principal();
          Map x500Map=KeyStoreUtil.getCertX500Map(clientCerts[i]);
          if (i == 0) {
            String cn=(String)x500Map.get("CN");
            cn=cn.replaceAll("\\\\","");
            Matcher m=pattern.matcher(cn);
            if (m.matches()) {
              userLoginId=m.group(1);
            }
 else {
              Debug.log("Client certificate CN does not match pattern: [" + cnPattern + "]",module);
            }
          }
          try {
            if (LoginWorker.checkValidIssuer(delegator,x500Map,clientCerts[i].getSerialNumber())) {
              GenericValue userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));
              if (userLogin != null) {
                String enabled=userLogin.getString("enabled");
                if (enabled == null || "Y".equals(enabled)) {
                  userLogin.set("hasLoggedOut","N");
                  userLogin.store();
                  Map ulSessionMap=LoginServices.getUserLoginSession(userLogin);
                  return doMainLogin(request,response,userLogin,ulSessionMap);
                }
              }
            }
          }
 catch (          GeneralException e) {
            Debug.logError(e,module);
          }
        }
      }
    }
  }
  return "success";
}
