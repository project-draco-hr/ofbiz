{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  VerifyPickSession pickSession=(VerifyPickSession)context.get("verifyPickSession");
  String orderId=(String)context.get("orderId");
  String facilityId=(String)context.get("facilityId");
  String shipGroupSeqId=(String)context.get("shipGroupSeqId");
  String productId=(String)context.get("productId");
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  List<String> orderItemSeqIds=FastList.newInstance();
  boolean isProductId=false;
  BigDecimal qtyToVerify=ZERO;
  BigDecimal qtyToVerified=ZERO;
  BigDecimal verifiedQuantity=ZERO;
  BigDecimal readyToVerifyQty=ZERO;
  int counter=0;
  try {
    List<GenericValue> orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId));
    for (    GenericValue orderItem : orderItems) {
      if (productId.equals(orderItem.getString("productId"))) {
        orderItemSeqIds.add(orderItem.getString("orderItemSeqId"));
        isProductId=true;
      }
    }
    if (isProductId) {
      for (      String orderItemSeqId : orderItemSeqIds) {
        counter++;
        if (quantity.compareTo(ZERO) > 0) {
          GenericValue orderItem=delegator.findOne("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId),false);
          BigDecimal orderedQuantity=orderItem.getBigDecimal("quantity");
          List<GenericValue> shipments=delegator.findByAnd("Shipment",UtilMisc.toMap("primaryOrderId",orderId,"statusId","SHIPMENT_PICKED"));
          for (          GenericValue shipment : shipments) {
            List<GenericValue> orderShipments=shipment.getRelatedByAnd("OrderShipment",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
            for (            GenericValue orderShipment : orderShipments) {
              verifiedQuantity=verifiedQuantity.add(orderShipment.getBigDecimal("quantity"));
            }
          }
          qtyToVerify=orderedQuantity.subtract(verifiedQuantity);
          if (qtyToVerify.compareTo(quantity) > -1) {
            readyToVerifyQty=pickSession.getReadyToVerifyQuantity(orderId,orderItemSeqId);
            qtyToVerified=orderedQuantity.subtract(readyToVerifyQty);
            if (qtyToVerified.compareTo(quantity) > -1) {
              pickSession.createRow(orderId,orderItemSeqId,shipGroupSeqId,productId,quantity,facilityId,orderItem);
              counter--;
              break;
            }
 else             if (orderItems.size() == counter) {
              throw new GeneralException("No valid order item found for product [" + productId + "] with quantity: "+ quantity);
            }
          }
 else           if (orderItemSeqIds.size() == counter) {
            throw new GeneralException("No valid order item found for product [" + productId + "] with quantity: "+ quantity);
          }
        }
      }
    }
 else {
      throw new GeneralException("No valid order item found for product [" + productId + "] with quantity: "+ quantity);
    }
  }
 catch (  Exception ex) {
    return ServiceUtil.returnError(ex.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
