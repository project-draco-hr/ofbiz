{
  if (productId == null && product != null) {
    productId=product.getString("productId");
  }
  if (delegator == null && product != null) {
    delegator=product.getDelegator();
  }
  if (UtilValidate.isEmpty(mimeTypeId)) {
    mimeTypeId="text/html";
  }
  if (delegator == null) {
    throw new GeneralRuntimeException("Unable to find a delegator to use!");
  }
  String candidateFieldName=ModelUtil.dbNameToVarName(productContentTypeId);
  ModelEntity productModel=delegator.getModelEntity("Product");
  if (product == null) {
    product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();
  }
  if (UtilValidate.isEmpty(product)) {
    Debug.logWarning("No Product entity found for productId: " + productId,module);
    return;
  }
  if (productModel.isField(candidateFieldName)) {
    String candidateValue=product.getString(candidateFieldName);
    if (UtilValidate.isNotEmpty(candidateValue)) {
      outWriter.write(candidateValue);
      return;
    }
 else     if ("Y".equals(product.getString("isVariant"))) {
      GenericValue parent=ProductWorker.getParentProduct(productId,delegator);
      if (parent != null) {
        candidateValue=parent.getString(candidateFieldName);
        if (UtilValidate.isNotEmpty(candidateValue)) {
          outWriter.write(candidateValue);
          return;
        }
      }
    }
  }
  List<GenericValue> productContentList=EntityQuery.use(delegator).from("ProductContent").where("productId",productId,"productContentTypeId",productContentTypeId).orderBy("-fromDate").cache(true).filterByDate().queryList();
  if (UtilValidate.isEmpty(productContentList) && ("Y".equals(product.getString("isVariant")))) {
    GenericValue parent=ProductWorker.getParentProduct(productId,delegator);
    if (UtilValidate.isNotEmpty(parent)) {
      productContentList=EntityQuery.use(delegator).from("ProductContent").where("productId",parent.get("productId"),"productContentTypeId",productContentTypeId).orderBy("-fromDate").cache(true).filterByDate().queryList();
    }
  }
  GenericValue productContent=EntityUtil.getFirst(productContentList);
  if (productContent != null) {
    Map<String,Object> inContext=new HashMap<String,Object>();
    inContext.put("product",product);
    inContext.put("productContent",productContent);
    ContentWorker.renderContentAsText(dispatcher,delegator,productContent.getString("contentId"),outWriter,inContext,locale,mimeTypeId,partyId,roleTypeId,true);
  }
}
