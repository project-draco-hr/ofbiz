{
  Map results=ServiceUtil.returnSuccess();
  GenericDelegator delegator=dctx.getDelegator();
  try {
    Map acroFieldMap=(Map)context.get("acroFieldMap");
    ByteWrapper byteWrapper=getInputByteWrapper(context,delegator);
    PdfReader r=new PdfReader(byteWrapper.getBytes());
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PdfStamper s=new PdfStamper(r,baos);
    AcroFields fs=s.getAcroFields();
    Map map=fs.getFields();
    s.setFormFlattening(true);
    Iterator iter=map.keySet().iterator();
    while (iter.hasNext()) {
      String fieldName=(String)iter.next();
      String fieldValue=fs.getField(fieldName);
      Object obj=acroFieldMap.get(fieldName);
      if (obj instanceof Date) {
        Date d=(Date)obj;
        fieldValue=UtilDateTime.toDateString(d);
      }
 else       if (obj instanceof Long) {
        Long lg=(Long)obj;
        fieldValue=lg.toString();
      }
 else       if (obj instanceof Integer) {
        Integer ii=(Integer)obj;
        fieldValue=ii.toString();
      }
 else {
        fieldValue=(String)obj;
      }
      if (UtilValidate.isNotEmpty(fieldValue))       fs.setField(fieldName,fieldValue);
    }
    s.close();
    baos.close();
    ByteWrapper outByteWrapper=new ByteWrapper(baos.toByteArray());
    results.put("outByteWrapper",outByteWrapper);
  }
 catch (  DocumentException e) {
    System.err.println(e.getMessage());
    ServiceUtil.returnError(e.getMessage());
  }
catch (  GeneralException e) {
    System.err.println(e.getMessage());
    ServiceUtil.returnError(e.getMessage());
  }
catch (  FileNotFoundException e) {
    System.err.println(e.getMessage());
    ServiceUtil.returnError(e.getMessage());
  }
catch (  IOException ioe) {
    System.err.println(ioe.getMessage());
    ServiceUtil.returnError(ioe.getMessage());
  }
catch (  Exception ioe) {
    System.err.println(ioe.getMessage());
    ServiceUtil.returnError(ioe.getMessage());
  }
  return results;
}
