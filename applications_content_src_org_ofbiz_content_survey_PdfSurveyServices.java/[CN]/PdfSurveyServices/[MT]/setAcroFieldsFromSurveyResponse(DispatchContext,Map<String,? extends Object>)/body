{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map results=ServiceUtil.returnSuccess();
  Map acroFieldMap=FastMap.newInstance();
  String surveyResponseId=(String)context.get("surveyResponseId");
  String acroFormContentId=null;
  try {
    String surveyId=null;
    if (UtilValidate.isNotEmpty(surveyResponseId)) {
      GenericValue surveyResponse=delegator.findByPrimaryKey("SurveyResponse",UtilMisc.toMap("surveyResponseId",surveyResponseId));
      if (surveyResponse != null) {
        surveyId=surveyResponse.getString("surveyId");
      }
    }
    if (UtilValidate.isNotEmpty(surveyId)) {
      GenericValue survey=delegator.findByPrimaryKey("Survey",UtilMisc.toMap("surveyId",surveyId));
      if (survey != null) {
        acroFormContentId=survey.getString("acroFormContentId");
      }
    }
    List responses=delegator.findByAnd("SurveyResponseAnswer",UtilMisc.toMap("surveyResponseId",surveyResponseId));
    Iterator iter=responses.iterator();
    while (iter.hasNext()) {
      String value=null;
      GenericValue surveyResponseAnswer=(GenericValue)iter.next();
      String surveyQuestionId=(String)surveyResponseAnswer.get("surveyQuestionId");
      GenericValue surveyQuestion=delegator.findByPrimaryKeyCache("SurveyQuestion",UtilMisc.toMap("surveyQuestionId",surveyQuestionId));
      List surveyQuestionApplList=EntityUtil.filterByDate(delegator.findByAndCache("SurveyQuestionAppl",UtilMisc.toMap("surveyId",surveyId,"surveyQuestionId",surveyQuestionId),UtilMisc.toList("-fromDate")),false);
      GenericValue surveyQuestionAppl=EntityUtil.getFirst(surveyQuestionApplList);
      String questionType=surveyQuestion.getString("surveyQuestionTypeId");
      String fieldName=surveyQuestionAppl.getString("externalFieldRef");
      if ("OPTION".equals(questionType)) {
        value=surveyResponseAnswer.getString("surveyOptionSeqId");
      }
 else       if ("BOOLEAN".equals(questionType)) {
        value=surveyResponseAnswer.getString("booleanResponse");
      }
 else       if ("NUMBER_LONG".equals(questionType) || "NUMBER_CURRENCY".equals(questionType) || "NUMBER_FLOAT".equals(questionType)) {
        Double num=surveyResponseAnswer.getDouble("numericResponse");
        if (num != null) {
          value=num.toString();
        }
      }
 else       if ("SEPERATOR_LINE".equals(questionType) || "SEPERATOR_TEXT".equals(questionType)) {
      }
 else {
        value=surveyResponseAnswer.getString("textResponse");
      }
      acroFieldMap.put(fieldName,value);
    }
  }
 catch (  GenericEntityException e) {
    System.err.println(e.getMessage());
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    ModelService modelService=dispatcher.getDispatchContext().getModelService("setAcroFields");
    Map ctx=modelService.makeValid(context,"IN");
    ctx.put("acroFieldMap",acroFieldMap);
    ctx.put("contentId",acroFormContentId);
    Map map=dispatcher.runSync("setAcroFields",ctx);
    if (ServiceUtil.isError(map)) {
      String errMsg=ServiceUtil.makeErrorMessage(map,null,null,null,null);
      System.err.println(errMsg);
      return ServiceUtil.returnError(errMsg);
    }
    String pdfFileNameOut=(String)context.get("pdfFileNameOut");
    ByteBuffer outByteBuffer=(ByteBuffer)map.get("outByteBuffer");
    results.put("outByteBuffer",outByteBuffer);
    if (UtilValidate.isNotEmpty(pdfFileNameOut)) {
      FileOutputStream fos=new FileOutputStream(pdfFileNameOut);
      fos.write(outByteBuffer.array());
      fos.close();
    }
  }
 catch (  FileNotFoundException e) {
    System.err.println(e.getMessage());
    results=ServiceUtil.returnError(e.getMessage());
  }
catch (  IOException e) {
    System.err.println(e.getMessage());
    results=ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException e) {
    System.err.println(e.getMessage());
    results=ServiceUtil.returnError(e.getMessage());
  }
  return results;
}
