{
  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);
  Delegator delegator=dctx.getDelegator();
  Map<String,Object> results=ServiceUtil.returnSuccess();
  String surveyResponseId=(String)context.get("surveyResponseId");
  String contentId=(String)context.get("contentId");
  String surveyId=null;
  Document document=new Document();
  try {
    if (UtilValidate.isNotEmpty(surveyResponseId)) {
      GenericValue surveyResponse=EntityQuery.use(delegator).from("SurveyResponse").where("surveyResponseId",surveyResponseId).queryOne();
      if (surveyResponse != null) {
        surveyId=surveyResponse.getString("surveyId");
      }
    }
    if (UtilValidate.isNotEmpty(surveyId) && UtilValidate.isEmpty(contentId)) {
      GenericValue survey=EntityQuery.use(delegator).from("Survey").where("surveyId",surveyId).queryOne();
      if (survey != null) {
        String acroFormContentId=survey.getString("acroFormContentId");
        if (UtilValidate.isNotEmpty(acroFormContentId)) {
          context.put("contentId",acroFormContentId);
        }
      }
    }
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PdfWriter.getInstance(document,baos);
    List<GenericValue> responses=EntityQuery.use(delegator).from("SurveyResponseAnswer").where("surveyResponseId",surveyResponseId).queryList();
    for (    GenericValue surveyResponseAnswer : responses) {
      String value=null;
      String surveyQuestionId=(String)surveyResponseAnswer.get("surveyQuestionId");
      GenericValue surveyQuestion=EntityQuery.use(delegator).from("SurveyQuestion").where("surveyQuestionId",surveyQuestionId).queryOne();
      String questionType=surveyQuestion.getString("surveyQuestionTypeId");
      if ("OPTION".equals(questionType)) {
        value=surveyResponseAnswer.getString("surveyOptionSeqId");
      }
 else       if ("BOOLEAN".equals(questionType)) {
        value=surveyResponseAnswer.getString("booleanResponse");
      }
 else       if ("NUMBER_LONG".equals(questionType) || "NUMBER_CURRENCY".equals(questionType) || "NUMBER_FLOAT".equals(questionType)) {
        Double num=surveyResponseAnswer.getDouble("numericResponse");
        if (num != null) {
          value=num.toString();
        }
      }
 else       if ("SEPERATOR_LINE".equals(questionType) || "SEPERATOR_TEXT".equals(questionType)) {
      }
 else {
        value=surveyResponseAnswer.getString("textResponse");
      }
      Chunk chunk=new Chunk(surveyQuestion.getString("question") + ": " + value);
      Paragraph p=new Paragraph(chunk);
      document.add(p);
    }
    ByteBuffer outByteBuffer=ByteBuffer.wrap(baos.toByteArray());
    results.put("outByteBuffer",outByteBuffer);
  }
 catch (  GenericEntityException e) {
    System.err.println(e.getMessage());
    results=ServiceUtil.returnError(e.getMessage());
  }
catch (  DocumentException e) {
    System.err.println(e.getMessage());
    results=ServiceUtil.returnError(e.getMessage());
  }
  return results;
}
