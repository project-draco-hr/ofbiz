{
  String surveyResponseId=null;
  Locale locale=(Locale)context.get("locale");
  try {
    Delegator delegator=dctx.getDelegator();
    String partyId=(String)context.get("partyId");
    String surveyId=(String)context.get("surveyId");
    surveyResponseId=(String)context.get("surveyResponseId");
    if (UtilValidate.isNotEmpty(surveyResponseId)) {
      GenericValue surveyResponse=delegator.findOne("SurveyResponse",UtilMisc.toMap("surveyResponseId",surveyResponseId),false);
      if (surveyResponse != null) {
        surveyId=surveyResponse.getString("surveyId");
      }
    }
 else {
      surveyResponseId=delegator.getNextSeqId("SurveyResponse");
      GenericValue surveyResponse=delegator.makeValue("SurveyResponse",UtilMisc.toMap("surveyResponseId",surveyResponseId,"surveyId",surveyId,"partyId",partyId));
      surveyResponse.set("responseDate",UtilDateTime.nowTimestamp());
      surveyResponse.set("lastModifiedDate",UtilDateTime.nowTimestamp());
      surveyResponse.create();
    }
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    ByteBuffer byteBuffer=getInputByteBuffer(context,delegator);
    PdfReader r=new PdfReader(byteBuffer.array());
    PdfStamper s=new PdfStamper(r,os);
    AcroFields fs=s.getAcroFields();
    Map<String,Object> hm=UtilGenerics.checkMap(fs.getFields());
    s.setFormFlattening(true);
    for (    String fieldName : hm.keySet()) {
      String value=fs.getField(fieldName);
      List<GenericValue> questions=delegator.findByAnd("SurveyQuestionAndAppl",UtilMisc.toMap("surveyId",surveyId,"externalFieldRef",fieldName));
      if (questions.size() == 0) {
        Debug.logInfo("No question found for surveyId:" + surveyId + " and externalFieldRef:"+ fieldName,module);
        continue;
      }
      GenericValue surveyQuestionAndAppl=questions.get(0);
      String surveyQuestionId=(String)surveyQuestionAndAppl.get("surveyQuestionId");
      String surveyQuestionTypeId=(String)surveyQuestionAndAppl.get("surveyQuestionTypeId");
      GenericValue surveyResponseAnswer=delegator.makeValue("SurveyResponseAnswer",UtilMisc.toMap("surveyResponseId",surveyResponseId,"surveyQuestionId",surveyQuestionId));
      if (surveyQuestionTypeId == null || surveyQuestionTypeId.equals("TEXT_SHORT")) {
        surveyResponseAnswer.set("textResponse",value);
      }
      delegator.create(surveyResponseAnswer);
    }
    s.close();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error generating PDF: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPDFGeneratingError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
catch (  GeneralException e) {
    Debug.logError(e,"Error generating PDF: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPDFGeneratingError",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
catch (  Exception e) {
    Debug.logError(e,"Error generating PDF: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPDFGeneratingError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  Map<String,Object> results=ServiceUtil.returnSuccess();
  results.put("surveyResponseId",surveyResponseId);
  return results;
}
