{
  this.componentConfig=componentConfig;
  this.name=element.getAttribute("name");
  String title=element.getAttribute("title");
  if (title.isEmpty()) {
    title=Character.toUpperCase(name.charAt(0)) + name.substring(1).toLowerCase();
  }
  this.title=title;
  String description=element.getAttribute("description");
  if (description.isEmpty()) {
    description=this.title;
  }
  this.description=description;
  this.server=element.getAttribute("server");
  String mountPoint=element.getAttribute("mount-point");
  if (mountPoint.isEmpty()) {
    mountPoint=this.name;
  }
  if (!"/".equals(mountPoint)) {
    if (!mountPoint.startsWith("/")) {
      mountPoint="/" + mountPoint;
    }
    if (!mountPoint.endsWith("/*")) {
      if (!mountPoint.endsWith("/")) {
        mountPoint=mountPoint + "/";
      }
      mountPoint=mountPoint + "*";
    }
  }
  this.mountPoint=mountPoint;
  if (this.mountPoint.endsWith("/*")) {
    this.contextRoot=this.mountPoint.substring(0,this.mountPoint.length() - 2);
  }
 else {
    this.contextRoot=this.mountPoint;
  }
  this.location=element.getAttribute("location");
  this.appBarDisplay=!"false".equals(element.getAttribute("app-bar-display"));
  this.sessionCookieAccepted=!"false".equals(element.getAttribute("session-cookie-accepted"));
  this.privileged=!"false".equals(element.getAttribute("privileged"));
  String basePermStr=element.getAttribute("base-permission");
  if (basePermStr.isEmpty()) {
    this.basePermission=basePermStr.split(",");
  }
 else {
    this.basePermission=new String[]{"NONE"};
  }
  for (int i=0; i < this.basePermission.length; i++) {
    this.basePermission[i]=this.basePermission[i].trim();
    if (this.basePermission[i].indexOf('_') != -1) {
      this.basePermission[i]=this.basePermission[i].substring(0,this.basePermission[i].indexOf('_'));
    }
  }
  String menuNameStr=element.getAttribute("menu-name");
  if (UtilValidate.isNotEmpty(menuNameStr)) {
    this.menuName=menuNameStr;
  }
 else {
    this.menuName="main";
  }
  this.position=element.getAttribute("position");
  List<? extends Element> virtHostList=UtilXml.childElementList(element,"virtual-host");
  if (!virtHostList.isEmpty()) {
    List<String> virtualHosts=new ArrayList<String>(virtHostList.size());
    for (    Element e : virtHostList) {
      virtualHosts.add(e.getAttribute("host-name"));
    }
    this.virtualHosts=Collections.unmodifiableList(virtualHosts);
  }
 else {
    this.virtualHosts=Collections.emptyList();
  }
  List<? extends Element> initParamList=UtilXml.childElementList(element,"init-param");
  if (!initParamList.isEmpty()) {
    Map<String,String> initParameters=new LinkedHashMap<String,String>();
    for (    Element e : initParamList) {
      initParameters.put(e.getAttribute("name"),e.getAttribute("value"));
    }
    this.initParameters=Collections.unmodifiableMap(initParameters);
  }
 else {
    this.initParameters=Collections.emptyMap();
  }
}
