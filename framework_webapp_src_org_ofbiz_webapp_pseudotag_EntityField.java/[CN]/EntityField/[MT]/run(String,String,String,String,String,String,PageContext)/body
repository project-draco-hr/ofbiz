{
  if (attribute == null || pageContext == null) {
    throw new IllegalArgumentException("Required parameter (attribute or pageContext) missing");
  }
  if (defaultStr == null)   defaultStr="";
  String fieldObjectType=null;
  Object fieldObject=null;
  if (type == null) {
    Object attrObject=pageContext.findAttribute(attribute);
    if (attrObject == null) {
      fieldObject=defaultStr;
      fieldObjectType="comment";
    }
 else {
      if (attrObject instanceof GenericValue) {
        GenericValue valueObject=(GenericValue)attrObject;
        ModelEntity entityModel=valueObject.getModelEntity();
        fieldObject=valueObject.get(field);
        if (fieldObject != null) {
          ModelField fieldModel=entityModel.getField(field);
          fieldObjectType=fieldModel.getType();
        }
 else {
          fieldObject=defaultStr;
          fieldObjectType="comment";
        }
      }
 else       if (attrObject instanceof Map<?,?>) {
        Map<String,?> valueMap=UtilGenerics.cast(attrObject);
        fieldObject=valueMap.get(field);
        fieldObjectType="comment";
      }
 else {
        fieldObject=attrObject;
        fieldObjectType="comment";
      }
    }
  }
 else {
    fieldObject=pageContext.findAttribute(attribute);
    if (fieldObject == null) {
      fieldObject=defaultStr;
    }
    if (type.equalsIgnoreCase("currency")) {
      if (fieldObject instanceof String) {
        String objStr=(String)fieldObject;
        try {
          if (objStr.length() > 0) {
            fieldObject=Double.valueOf(objStr);
          }
        }
 catch (        NumberFormatException nfe) {
          throw new IllegalStateException("String not a number for printing of type currency: " + objStr);
        }
      }
      fieldObjectType="currency-amount";
    }
  }
  Locale userLocale=null;
  if (userLocale == null) {
    userLocale=Locale.getDefault();
  }
  String fieldString=null;
  if (fieldObject instanceof java.lang.String) {
    fieldString=(String)fieldObject;
  }
 else   if (fieldObject instanceof java.lang.Double) {
    Double doubleValue=(Double)fieldObject;
    NumberFormat nf=null;
    if ("currency-amount".equals(fieldObjectType)) {
      nf=NumberFormat.getCurrencyInstance(userLocale);
    }
 else {
      nf=NumberFormat.getNumberInstance(userLocale);
    }
    fieldString=nf.format(doubleValue);
  }
 else   if (fieldObject instanceof java.lang.Float) {
    Float floatValue=(Float)fieldObject;
    NumberFormat nf=null;
    if ("currency-amount".equals(fieldObjectType)) {
      nf=NumberFormat.getCurrencyInstance(userLocale);
    }
 else {
      nf=NumberFormat.getNumberInstance(userLocale);
    }
    fieldString=nf.format(floatValue);
  }
 else   if (fieldObject instanceof java.lang.Long) {
    Long longValue=(Long)fieldObject;
    NumberFormat nf=NumberFormat.getNumberInstance(userLocale);
    fieldString=nf.format(longValue);
  }
 else   if (fieldObject instanceof java.lang.Integer) {
    Integer intValue=(Integer)fieldObject;
    NumberFormat nf=NumberFormat.getNumberInstance(userLocale);
    fieldString=nf.format(intValue);
  }
 else   if (fieldObject instanceof java.lang.Boolean) {
    Boolean booleanValue=(Boolean)fieldObject;
    if (booleanValue.booleanValue()) {
      fieldString="Yes";
    }
 else {
      fieldString="No";
    }
  }
 else   if (fieldObject instanceof java.sql.Timestamp) {
    Date dateValue=(Date)fieldObject;
    DateFormat df=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.FULL,userLocale);
    fieldString=df.format(dateValue);
  }
 else   if (fieldObject instanceof java.sql.Time) {
    Date dateValue=(Date)fieldObject;
    DateFormat df=DateFormat.getTimeInstance(DateFormat.FULL,userLocale);
    fieldString=df.format(dateValue);
  }
 else   if (fieldObject instanceof java.sql.Date) {
    Date dateValue=(Date)fieldObject;
    DateFormat df=DateFormat.getDateInstance(DateFormat.LONG,userLocale);
    fieldString=df.format(dateValue);
  }
 else {
    if (fieldObject != null) {
      fieldString=fieldObject.toString();
    }
 else {
      fieldString="";
    }
  }
  JspWriter out=pageContext.getOut();
  if (fieldString.length() > 0) {
    if (prefix != null)     out.print(prefix);
    out.print(fieldString);
    if (suffix != null)     out.print(suffix);
  }
}
