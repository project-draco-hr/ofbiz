{
  String msgPrefix="[XaWrapper] ";
switch (type) {
case TYPE_ROLLBACK:
    msgPrefix="[Rollback] ";
  break;
case TYPE_COMMIT:
msgPrefix="[Commit] ";
break;
}
if (UtilValidate.isNotEmpty(service)) {
Transaction parentTx=null;
boolean beganTx;
try {
int currentTxStatus=Status.STATUS_UNKNOWN;
try {
currentTxStatus=TransactionUtil.getStatus();
}
 catch (GenericTransactionException e) {
Debug.logWarning(e,module);
}
if (currentTxStatus != Status.STATUS_NO_TRANSACTION) {
parentTx=TransactionUtil.suspend();
}
beganTx=TransactionUtil.begin();
try {
ModelService model=dctx.getModelService(service);
Map thisContext=context;
if (model.validate) {
  thisContext=model.makeValid(context,ModelService.IN_PARAM);
}
thisContext.put("userLogin",ServiceUtil.getUserLogin(dctx,thisContext,runAsUser));
switch (mode) {
case MODE_ASYNC:
  Debug.log(msgPrefix + "Invoking [" + service+ "] via runAsync",module);
dctx.getDispatcher().runAsync(service,thisContext,persist);
break;
case MODE_SYNC:
Debug.log(msgPrefix + "Invoking [" + service+ "] via runSyncIgnore",module);
dctx.getDispatcher().runSyncIgnore(service,thisContext);
break;
}
}
 catch (Throwable t) {
Debug.logError(t,"Problem calling " + msgPrefix + "service : "+ service+ " / "+ context,module);
try {
TransactionUtil.rollback(beganTx,t.getMessage(),t);
}
 catch (GenericTransactionException e) {
Debug.logError(e,module);
}
if (mode != MODE_ASYNC) {
throw new XAException(XAException.XA_RBOTHER);
}
}
 finally {
try {
TransactionUtil.commit(beganTx);
}
 catch (GenericTransactionException e) {
Debug.logError(e,module);
}
}
}
 catch (GenericTransactionException e) {
Debug.logError(e,module);
}
 finally {
if (parentTx != null) {
try {
TransactionUtil.resume(parentTx);
}
 catch (Exception e) {
Debug.logError(e,module);
}
}
}
}
 else {
Debug.log("No " + msgPrefix + "service defined; nothing to do",module);
}
this.xid=null;
this.active=false;
}
