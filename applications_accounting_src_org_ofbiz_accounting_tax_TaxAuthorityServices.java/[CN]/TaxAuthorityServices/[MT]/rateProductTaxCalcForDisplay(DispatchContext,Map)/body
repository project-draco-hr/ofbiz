{
  Delegator delegator=dctx.getDelegator();
  String productStoreId=(String)context.get("productStoreId");
  String billToPartyId=(String)context.get("billToPartyId");
  String productId=(String)context.get("productId");
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  BigDecimal basePrice=(BigDecimal)context.get("basePrice");
  BigDecimal shippingPrice=(BigDecimal)context.get("shippingPrice");
  if (quantity == null)   quantity=ONE_BASE;
  BigDecimal amount=basePrice.multiply(quantity);
  BigDecimal taxTotal=ZERO_BASE;
  BigDecimal taxPercentage=ZERO_BASE;
  BigDecimal priceWithTax=basePrice;
  if (shippingPrice != null)   priceWithTax=priceWithTax.add(shippingPrice);
  try {
    GenericValue product=delegator.findByPrimaryKeyCache("Product",UtilMisc.toMap("productId",productId));
    GenericValue productStore=delegator.findByPrimaryKeyCache("ProductStore",UtilMisc.toMap("productStoreId",productStoreId));
    if (productStore == null) {
      throw new IllegalArgumentException("Could not find ProductStore with ID [" + productStoreId + "] for tax calculation");
    }
    if ("Y".equals(productStore.getString("showPricesWithVatTax"))) {
      Set taxAuthoritySet=FastSet.newInstance();
      if (productStore.get("vatTaxAuthPartyId") == null) {
        List taxAuthorityRawList=delegator.findList("TaxAuthority",EntityCondition.makeCondition("taxAuthGeoId",EntityOperator.EQUALS,productStore.get("vatTaxAuthGeoId")),null,null,null,true);
        taxAuthoritySet.addAll(taxAuthorityRawList);
      }
 else {
        GenericValue taxAuthority=delegator.findByPrimaryKeyCache("TaxAuthority",UtilMisc.toMap("taxAuthGeoId",productStore.get("vatTaxAuthGeoId"),"taxAuthPartyId",productStore.get("vatTaxAuthPartyId")));
        taxAuthoritySet.add(taxAuthority);
      }
      if (taxAuthoritySet.size() == 0) {
        throw new IllegalArgumentException("Could not find any Tax Authories for store with ID [" + productStoreId + "] for tax calculation; the store settings may need to be corrected.");
      }
      List taxAdustmentList=getTaxAdjustments(delegator,product,productStore,null,billToPartyId,taxAuthoritySet,basePrice,amount,shippingPrice,ZERO_BASE);
      if (taxAdustmentList.size() == 0) {
        Debug.logWarning("Could not find any Tax Authories Rate Rules for store with ID [" + productStoreId + "], productId ["+ productId+ "], basePrice ["+ basePrice+ "], amount ["+ amount+ "], for tax calculation; the store settings may need to be corrected.",module);
      }
      Iterator taxAdustmentIter=taxAdustmentList.iterator();
      while (taxAdustmentIter.hasNext()) {
        GenericValue taxAdjustment=(GenericValue)taxAdustmentIter.next();
        taxPercentage=taxPercentage.add(taxAdjustment.getBigDecimal("sourcePercentage"));
        BigDecimal adjAmount=taxAdjustment.getBigDecimal("amount");
        taxTotal=taxTotal.add(adjAmount);
        priceWithTax=priceWithTax.add(adjAmount.divide(quantity,salestaxCalcDecimals,salestaxRounding));
        Debug.logInfo("For productId [" + productId + "] added ["+ adjAmount.divide(quantity,salestaxCalcDecimals,salestaxRounding)+ "] of tax to price for geoId ["+ taxAdjustment.getString("taxAuthGeoId")+ "], new price is ["+ priceWithTax+ "]",module);
      }
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Data error getting tax settings: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  taxTotal=taxTotal.setScale(salestaxFinalDecimals,salestaxRounding);
  priceWithTax=priceWithTax.setScale(salestaxFinalDecimals,salestaxRounding);
  Map result=ServiceUtil.returnSuccess();
  result.put("taxTotal",taxTotal);
  result.put("taxPercentage",taxPercentage);
  result.put("priceWithTax",priceWithTax);
  return result;
}
