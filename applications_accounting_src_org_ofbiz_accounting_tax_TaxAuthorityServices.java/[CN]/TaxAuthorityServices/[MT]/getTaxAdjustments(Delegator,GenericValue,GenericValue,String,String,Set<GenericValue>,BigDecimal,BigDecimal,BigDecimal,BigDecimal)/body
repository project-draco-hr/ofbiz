{
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  List<GenericValue> adjustments=FastList.newInstance();
  if (payToPartyId == null) {
    if (productStore != null) {
      payToPartyId=productStore.getString("payToPartyId");
    }
  }
  EntityCondition storeCond=null;
  if (productStore != null) {
    storeCond=EntityCondition.makeCondition(EntityCondition.makeCondition("productStoreId",EntityOperator.EQUALS,productStore.get("productStoreId")),EntityOperator.OR,EntityCondition.makeCondition("productStoreId",EntityOperator.EQUALS,null));
  }
 else {
    storeCond=EntityCondition.makeCondition("productStoreId",EntityOperator.EQUALS,null);
  }
  List<EntityCondition> taxAuthCondOrList=FastList.newInstance();
  taxAuthCondOrList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("taxAuthPartyId",EntityOperator.EQUALS,"_NA_"),EntityOperator.AND,EntityCondition.makeCondition("taxAuthGeoId",EntityOperator.EQUALS,"_NA_")));
  Iterator<GenericValue> taxAuthorityIter=taxAuthoritySet.iterator();
  while (taxAuthorityIter.hasNext()) {
    GenericValue taxAuthority=taxAuthorityIter.next();
    EntityCondition taxAuthCond=EntityCondition.makeCondition(EntityCondition.makeCondition("taxAuthPartyId",EntityOperator.EQUALS,taxAuthority.getString("taxAuthPartyId")),EntityOperator.AND,EntityCondition.makeCondition("taxAuthGeoId",EntityOperator.EQUALS,taxAuthority.getString("taxAuthGeoId")));
    taxAuthCondOrList.add(taxAuthCond);
  }
  EntityCondition taxAuthoritiesCond=EntityCondition.makeCondition(taxAuthCondOrList,EntityOperator.OR);
  try {
    EntityCondition productCategoryCond=null;
    if (product != null) {
      Set<String> productCategoryIdSet=FastSet.newInstance();
      List<GenericValue> pcmList=delegator.findByAndCache("ProductCategoryMember",UtilMisc.toMap("productId",product.get("productId")));
      pcmList=EntityUtil.filterByDate(pcmList,true);
      Iterator<GenericValue> pcmIter=pcmList.iterator();
      while (pcmIter.hasNext()) {
        GenericValue pcm=pcmIter.next();
        productCategoryIdSet.add((String)pcm.get("productCategoryId"));
      }
      if (productCategoryIdSet.size() == 0) {
        productCategoryCond=EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,null);
      }
 else {
        productCategoryCond=EntityCondition.makeCondition(EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("productCategoryId",EntityOperator.IN,productCategoryIdSet));
      }
    }
 else {
      productCategoryCond=EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,null);
    }
    List<EntityCondition> mainExprs=UtilMisc.toList(storeCond,taxAuthoritiesCond,productCategoryCond);
    mainExprs.add(EntityCondition.makeCondition(EntityCondition.makeCondition("minItemPrice",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("minItemPrice",EntityOperator.LESS_THAN_EQUAL_TO,itemPrice)));
    mainExprs.add(EntityCondition.makeCondition(EntityCondition.makeCondition("minPurchase",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("minPurchase",EntityOperator.LESS_THAN_EQUAL_TO,itemAmount)));
    EntityCondition mainCondition=EntityCondition.makeCondition(mainExprs,EntityOperator.AND);
    List<String> orderList=UtilMisc.toList("minItemPrice","minPurchase","fromDate");
    List<GenericValue> lookupList=delegator.findList("TaxAuthorityRateProduct",mainCondition,null,orderList,null,false);
    List<GenericValue> filteredList=EntityUtil.filterByDate(lookupList,true);
    if (filteredList.size() == 0) {
      Debug.logWarning("In TaxAuthority Product Rate no records were found for condition:" + mainCondition.toString(),module);
      return adjustments;
    }
    Iterator<GenericValue> flIt=filteredList.iterator();
    while (flIt.hasNext()) {
      GenericValue taxAuthorityRateProduct=flIt.next();
      BigDecimal taxRate=taxAuthorityRateProduct.get("taxPercentage") != null ? taxAuthorityRateProduct.getBigDecimal("taxPercentage") : ZERO_BASE;
      BigDecimal taxable=ZERO_BASE;
      if (product != null && (product.get("taxable") == null || (product.get("taxable") != null && product.getBoolean("taxable").booleanValue()))) {
        taxable=taxable.add(itemAmount);
      }
      if (shippingAmount != null && taxAuthorityRateProduct != null && (taxAuthorityRateProduct.get("taxShipping") == null || (taxAuthorityRateProduct.get("taxShipping") != null && taxAuthorityRateProduct.getBoolean("taxShipping").booleanValue()))) {
        taxable=taxable.add(shippingAmount);
      }
      if (orderPromotionsAmount != null && taxAuthorityRateProduct != null && (taxAuthorityRateProduct.get("taxPromotions") == null || (taxAuthorityRateProduct.get("taxPromotions") != null && taxAuthorityRateProduct.getBoolean("taxPromotions").booleanValue()))) {
        taxable=taxable.add(orderPromotionsAmount);
      }
      if (taxable.compareTo(BigDecimal.ZERO) == 0) {
        continue;
      }
      BigDecimal taxAmount=(taxable.multiply(taxRate)).divide(PERCENT_SCALE,salestaxCalcDecimals,salestaxRounding);
      String taxAuthGeoId=taxAuthorityRateProduct.getString("taxAuthGeoId");
      String taxAuthPartyId=taxAuthorityRateProduct.getString("taxAuthPartyId");
      GenericValue taxAuthorityGlAccount=delegator.findByPrimaryKey("TaxAuthorityGlAccount",UtilMisc.toMap("taxAuthPartyId",taxAuthPartyId,"taxAuthGeoId",taxAuthGeoId,"organizationPartyId",payToPartyId));
      String taxAuthGlAccountId=null;
      if (taxAuthorityGlAccount != null) {
        taxAuthGlAccountId=taxAuthorityGlAccount.getString("glAccountId");
      }
 else {
      }
      GenericValue adjValue=delegator.makeValue("OrderAdjustment");
      adjValue.set("taxAuthorityRateSeqId",taxAuthorityRateProduct.getString("taxAuthorityRateSeqId"));
      adjValue.set("amount",taxAmount);
      adjValue.set("sourcePercentage",taxRate);
      adjValue.set("orderAdjustmentTypeId","SALES_TAX");
      adjValue.set("primaryGeoId",taxAuthGeoId);
      adjValue.set("comments",taxAuthorityRateProduct.getString("description"));
      if (taxAuthPartyId != null)       adjValue.set("taxAuthPartyId",taxAuthPartyId);
      if (taxAuthGlAccountId != null)       adjValue.set("overrideGlAccountId",taxAuthGlAccountId);
      if (taxAuthGeoId != null)       adjValue.set("taxAuthGeoId",taxAuthGeoId);
      if (UtilValidate.isNotEmpty(billToPartyId) && UtilValidate.isNotEmpty(taxAuthGeoId)) {
        Set<String> billToPartyIdSet=FastSet.newInstance();
        billToPartyIdSet.add(billToPartyId);
        List<GenericValue> partyRelationshipList=EntityUtil.filterByDate(delegator.findByAndCache("PartyRelationship",UtilMisc.toMap("partyIdTo",billToPartyId,"partyRelationshipTypeId","GROUP_ROLLUP")),true);
        Iterator<GenericValue> partyRelationshipIter=partyRelationshipList.iterator();
        while (partyRelationshipIter.hasNext()) {
          GenericValue partyRelationship=partyRelationshipIter.next();
          billToPartyIdSet.add((String)partyRelationship.get("partyIdFrom"));
        }
        handlePartyTaxExempt(adjValue,billToPartyIdSet,taxAuthGeoId,taxAuthPartyId,taxAmount,nowTimestamp,delegator);
      }
 else {
        Debug.logInfo("NOTE: A tax calculation was done without a billToPartyId or taxAuthGeoId, so no tax exemptions or tax IDs considered; billToPartyId=[" + billToPartyId + "] taxAuthGeoId=["+ taxAuthGeoId+ "]",module);
      }
      adjustments.add(adjValue);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up tax rates",module);
    return new ArrayList<GenericValue>();
  }
  return adjustments;
}
