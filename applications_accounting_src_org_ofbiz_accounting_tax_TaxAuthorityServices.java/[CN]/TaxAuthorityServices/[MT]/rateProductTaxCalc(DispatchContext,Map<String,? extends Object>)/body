{
  Delegator delegator=dctx.getDelegator();
  String productStoreId=(String)context.get("productStoreId");
  String facilityId=(String)context.get("facilityId");
  String payToPartyId=(String)context.get("payToPartyId");
  String billToPartyId=(String)context.get("billToPartyId");
  List<GenericValue> itemProductList=UtilGenerics.checkList(context.get("itemProductList"));
  List<BigDecimal> itemAmountList=UtilGenerics.checkList(context.get("itemAmountList"));
  List<BigDecimal> itemPriceList=UtilGenerics.checkList(context.get("itemPriceList"));
  List<BigDecimal> itemQuantityList=UtilGenerics.checkList(context.get("itemQuantityList"));
  List<BigDecimal> itemShippingList=UtilGenerics.checkList(context.get("itemShippingList"));
  BigDecimal orderShippingAmount=(BigDecimal)context.get("orderShippingAmount");
  BigDecimal orderPromotionsAmount=(BigDecimal)context.get("orderPromotionsAmount");
  GenericValue shippingAddress=(GenericValue)context.get("shippingAddress");
  Locale locale=(Locale)context.get("locale");
  GenericValue productStore=null;
  GenericValue facility=null;
  try {
    if (productStoreId != null) {
      productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).queryOne();
    }
    if (facilityId != null) {
      facility=EntityQuery.use(delegator).from("Facility").where("facilityId",facilityId).queryOne();
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Data error getting tax settings: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTaxSettingError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  if (productStore == null && payToPartyId == null) {
    throw new IllegalArgumentException("Could not find payToPartyId [" + payToPartyId + "] or ProductStore ["+ productStoreId+ "] for tax calculation");
  }
  if (shippingAddress == null && facility != null) {
    try {
      GenericValue facilityContactMech=ContactMechWorker.getFacilityContactMechByPurpose(delegator,facilityId,UtilMisc.toList("SHIP_ORIG_LOCATION","PRIMARY_LOCATION"));
      if (facilityContactMech != null) {
        shippingAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",facilityContactMech.get("contactMechId")).queryOne();
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Data error getting tax settings: " + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTaxSettingError",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
  if (shippingAddress == null || (shippingAddress.get("countryGeoId") == null && shippingAddress.get("stateProvinceGeoId") == null && shippingAddress.get("postalCodeGeoId") == null)) {
    String errMsg=UtilProperties.getMessage(resource,"AccountingTaxNoAddressSpecified",locale);
    if (shippingAddress != null) {
      errMsg+=UtilProperties.getMessage(resource,"AccountingTaxNoAddressSpecifiedDetails",UtilMisc.toMap("contactMechId",shippingAddress.getString("contactMechId"),"address1",shippingAddress.get("address1"),"postalCodeGeoId",shippingAddress.get("postalCodeGeoId"),"stateProvinceGeoId",shippingAddress.get("stateProvinceGeoId"),"countryGeoId",shippingAddress.get("countryGeoId")),locale);
      Debug.logError(errMsg,module);
    }
    return ServiceUtil.returnError(errMsg);
  }
  Set<GenericValue> taxAuthoritySet=FastSet.newInstance();
  try {
    getTaxAuthorities(delegator,shippingAddress,taxAuthoritySet);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Data error getting tax settings: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTaxSettingError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  List<GenericValue> orderAdjustments=FastList.newInstance();
  List<List<GenericValue>> itemAdjustments=FastList.newInstance();
  for (int i=0; i < itemProductList.size(); i++) {
    GenericValue product=itemProductList.get(i);
    BigDecimal itemAmount=itemAmountList.get(i);
    BigDecimal itemPrice=itemPriceList.get(i);
    BigDecimal itemQuantity=itemQuantityList != null ? itemQuantityList.get(i) : null;
    BigDecimal shippingAmount=itemShippingList != null ? itemShippingList.get(i) : null;
    List<GenericValue> taxList=null;
    if (shippingAddress != null) {
      taxList=getTaxAdjustments(delegator,product,productStore,payToPartyId,billToPartyId,taxAuthoritySet,itemPrice,itemQuantity,itemAmount,shippingAmount,ZERO_BASE);
    }
    itemAdjustments.add(taxList);
  }
  if (orderShippingAmount != null && orderShippingAmount.compareTo(BigDecimal.ZERO) > 0) {
    List<GenericValue> taxList=getTaxAdjustments(delegator,null,productStore,payToPartyId,billToPartyId,taxAuthoritySet,ZERO_BASE,ZERO_BASE,ZERO_BASE,orderShippingAmount,ZERO_BASE);
    orderAdjustments.addAll(taxList);
  }
  if (orderPromotionsAmount != null && orderPromotionsAmount.compareTo(BigDecimal.ZERO) != 0) {
    List<GenericValue> taxList=getTaxAdjustments(delegator,null,productStore,payToPartyId,billToPartyId,taxAuthoritySet,ZERO_BASE,ZERO_BASE,ZERO_BASE,ZERO_BASE,orderPromotionsAmount);
    orderAdjustments.addAll(taxList);
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("orderAdjustments",orderAdjustments);
  result.put("itemAdjustments",itemAdjustments);
  return result;
}
