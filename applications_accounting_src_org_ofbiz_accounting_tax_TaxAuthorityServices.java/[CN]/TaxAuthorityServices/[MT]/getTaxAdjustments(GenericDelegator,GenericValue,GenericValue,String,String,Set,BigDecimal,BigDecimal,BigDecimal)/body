{
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  List adjustments=FastList.newInstance();
  if (payToPartyId == null) {
    if (productStore != null) {
      payToPartyId=productStore.getString("payToPartyId");
    }
  }
  EntityCondition storeCond=null;
  if (productStore != null) {
    storeCond=new EntityExpr(new EntityExpr("productStoreId",EntityOperator.EQUALS,productStore.get("productStoreId")),EntityOperator.OR,new EntityExpr("productStoreId",EntityOperator.EQUALS,null));
  }
 else {
    storeCond=new EntityExpr("productStoreId",EntityOperator.EQUALS,null);
  }
  List taxAuthCondOrList=FastList.newInstance();
  taxAuthCondOrList.add(new EntityExpr(new EntityExpr("taxAuthPartyId",EntityOperator.EQUALS,"_NA_"),EntityOperator.AND,new EntityExpr("taxAuthGeoId",EntityOperator.EQUALS,"_NA_")));
  Iterator taxAuthorityIter=taxAuthoritySet.iterator();
  while (taxAuthorityIter.hasNext()) {
    GenericValue taxAuthority=(GenericValue)taxAuthorityIter.next();
    EntityCondition taxAuthCond=new EntityExpr(new EntityExpr("taxAuthPartyId",EntityOperator.EQUALS,taxAuthority.getString("taxAuthPartyId")),EntityOperator.AND,new EntityExpr("taxAuthGeoId",EntityOperator.EQUALS,taxAuthority.getString("taxAuthGeoId")));
    taxAuthCondOrList.add(taxAuthCond);
  }
  EntityCondition taxAuthoritiesCond=new EntityConditionList(taxAuthCondOrList,EntityOperator.OR);
  try {
    EntityCondition productCategoryCond=null;
    if (product != null) {
      Set productCategoryIdSet=FastSet.newInstance();
      List pcmList=delegator.findByAndCache("ProductCategoryMember",UtilMisc.toMap("productId",product.get("productId")));
      pcmList=EntityUtil.filterByDate(pcmList,true);
      Iterator pcmIter=pcmList.iterator();
      while (pcmIter.hasNext()) {
        GenericValue pcm=(GenericValue)pcmIter.next();
        productCategoryIdSet.add(pcm.get("productCategoryId"));
      }
      if (productCategoryIdSet.size() == 0) {
        productCategoryCond=new EntityExpr("productCategoryId",EntityOperator.EQUALS,null);
      }
 else {
        productCategoryCond=new EntityExpr(new EntityExpr("productCategoryId",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("productCategoryId",EntityOperator.IN,productCategoryIdSet));
      }
    }
 else {
      productCategoryCond=new EntityExpr("productCategoryId",EntityOperator.EQUALS,null);
    }
    List mainExprs=UtilMisc.toList(storeCond,taxAuthoritiesCond,productCategoryCond);
    mainExprs.add(new EntityExpr(new EntityExpr("minItemPrice",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("minItemPrice",EntityOperator.LESS_THAN_EQUAL_TO,itemPrice)));
    mainExprs.add(new EntityExpr(new EntityExpr("minPurchase",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("minPurchase",EntityOperator.LESS_THAN_EQUAL_TO,itemAmount)));
    EntityCondition mainCondition=new EntityConditionList(mainExprs,EntityOperator.AND);
    List orderList=UtilMisc.toList("minItemPrice","minPurchase","fromDate");
    List lookupList=delegator.findByCondition("TaxAuthorityRateProduct",mainCondition,null,orderList);
    List filteredList=EntityUtil.filterByDate(lookupList,true);
    if (filteredList.size() == 0) {
      Debug.logWarning("In TaxAuthority Product Rate no records were found for condition:" + mainCondition.toString(),module);
      return adjustments;
    }
    Iterator flIt=filteredList.iterator();
    while (flIt.hasNext()) {
      GenericValue taxAuthorityRateProduct=(GenericValue)flIt.next();
      BigDecimal taxRate=taxAuthorityRateProduct.get("taxPercentage") != null ? taxAuthorityRateProduct.getBigDecimal("taxPercentage") : ZERO_BASE;
      BigDecimal taxable=ZERO_BASE;
      if (product != null && (product.get("taxable") == null || (product.get("taxable") != null && product.getBoolean("taxable").booleanValue()))) {
        taxable=taxable.add(itemAmount);
      }
      if (shippingAmount != null && taxAuthorityRateProduct != null && (taxAuthorityRateProduct.get("taxShipping") == null || (taxAuthorityRateProduct.get("taxShipping") != null && taxAuthorityRateProduct.getBoolean("taxShipping").booleanValue()))) {
        taxable=taxable.add(shippingAmount);
      }
      if (taxable.doubleValue() == 0) {
        continue;
      }
      BigDecimal taxAmount=(taxable.multiply(taxRate)).divide(PERCENT_SCALE,3,BigDecimal.ROUND_CEILING);
      String taxAuthGeoId=taxAuthorityRateProduct.getString("taxAuthGeoId");
      String taxAuthPartyId=taxAuthorityRateProduct.getString("taxAuthPartyId");
      GenericValue taxAuthorityGlAccount=delegator.findByPrimaryKey("TaxAuthorityGlAccount",UtilMisc.toMap("taxAuthPartyId",taxAuthPartyId,"taxAuthGeoId",taxAuthGeoId,"organizationPartyId",payToPartyId));
      String taxAuthGlAccountId=null;
      if (taxAuthorityGlAccount != null) {
        taxAuthGlAccountId=taxAuthorityGlAccount.getString("glAccountId");
      }
 else {
      }
      GenericValue adjValue=delegator.makeValue("OrderAdjustment",null);
      adjValue.set("taxAuthorityRateSeqId",taxAuthorityRateProduct.getString("taxAuthorityRateSeqId"));
      adjValue.set("amount",taxAmount);
      adjValue.set("sourcePercentage",taxRate);
      adjValue.set("orderAdjustmentTypeId","SALES_TAX");
      adjValue.set("primaryGeoId",taxAuthGeoId);
      adjValue.set("comments",taxAuthorityRateProduct.getString("description"));
      if (taxAuthPartyId != null)       adjValue.set("taxAuthPartyId",taxAuthPartyId);
      if (taxAuthGlAccountId != null)       adjValue.set("overrideGlAccountId",taxAuthGlAccountId);
      if (taxAuthGeoId != null)       adjValue.set("taxAuthGeoId",taxAuthGeoId);
      if (UtilValidate.isNotEmpty(billToPartyId) && taxAuthGeoId != null) {
        Set billToPartyIdSet=FastSet.newInstance();
        billToPartyIdSet.add(billToPartyId);
        List partyRelationshipList=EntityUtil.filterByDate(delegator.findByAndCache("PartyRelationship",UtilMisc.toMap("partyIdTo",billToPartyId,"partyRelationshipTypeId","GROUP_ROLLUP")),true);
        Iterator partyRelationshipIter=partyRelationshipList.iterator();
        while (partyRelationshipIter.hasNext()) {
          GenericValue partyRelationship=(GenericValue)partyRelationshipIter.next();
          billToPartyIdSet.add(partyRelationship.get("partyIdFrom"));
        }
        List ptiConditionList=UtilMisc.toList(new EntityExpr("partyId",EntityOperator.IN,billToPartyIdSet),new EntityExpr("taxAuthGeoId",EntityOperator.EQUALS,taxAuthGeoId),new EntityExpr("taxAuthPartyId",EntityOperator.EQUALS,taxAuthPartyId));
        ptiConditionList.add(new EntityExpr("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp));
        ptiConditionList.add(new EntityExpr(new EntityExpr("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("thruDate",EntityOperator.GREATER_THAN,nowTimestamp)));
        EntityCondition ptiCondition=new EntityConditionList(ptiConditionList,EntityOperator.AND);
        List partyTaxInfos=delegator.findByCondition("PartyTaxAuthInfo",ptiCondition,null,UtilMisc.toList("-fromDate"));
        if (partyTaxInfos.size() > 0) {
          GenericValue partyTaxInfo=(GenericValue)partyTaxInfos.get(0);
          adjValue.set("customerReferenceId",partyTaxInfo.get("partyTaxId"));
          if ("Y".equals(partyTaxInfo.getString("isExempt"))) {
            adjValue.set("amount",new Double(0));
            adjValue.set("exemptAmount",taxAmount);
          }
        }
      }
 else {
        Debug.logInfo("NOTE: A tax calculation was done without a billToPartyId or taxAuthGeoId, so no tax exemptions or tax IDs considered; billToPartyId=[" + billToPartyId + "] taxAuthGeoId=["+ taxAuthGeoId+ "]",module);
      }
      adjustments.add(adjValue);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up tax rates",module);
    return new ArrayList();
  }
  return adjustments;
}
