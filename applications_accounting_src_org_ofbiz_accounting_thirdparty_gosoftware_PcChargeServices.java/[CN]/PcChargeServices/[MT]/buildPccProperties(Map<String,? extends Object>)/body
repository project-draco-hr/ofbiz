{
  String configString=(String)context.get("paymentConfig");
  if (configString == null) {
    configString="payment.properties";
  }
  String processorId=UtilProperties.getPropertyValue(configString,"payment.pccharge.processorID");
  String merchantId=UtilProperties.getPropertyValue(configString,"payment.pccharge.merchantID");
  String userId=UtilProperties.getPropertyValue(configString,"payment.pccharge.userID");
  String host=UtilProperties.getPropertyValue(configString,"payment.pccharge.host");
  String port=UtilProperties.getPropertyValue(configString,"payment.pccharge.port");
  String autoBill=UtilProperties.getPropertyValue(configString,"payment.pccharge.autoBill","true");
  if (UtilValidate.isEmpty(processorId)) {
    Debug.logWarning("The processorID property in [" + configString + "] is not configured",module);
    return null;
  }
  if (UtilValidate.isEmpty(merchantId)) {
    Debug.logWarning("The merchantID property in [" + configString + "] is not configured",module);
    return null;
  }
  if (UtilValidate.isEmpty(userId)) {
    Debug.logWarning("The userID property in [" + configString + "] is not configured",module);
    return null;
  }
  Properties props=new Properties();
  props.put("processorID",processorId);
  props.put("merchantID",merchantId);
  props.put("userID",userId);
  props.put("host",host);
  props.put("port",port);
  props.put("autoBill",autoBill);
  Debug.logInfo("Returning properties - " + props,module);
  return props;
}
