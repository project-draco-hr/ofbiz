{
  GenericValue orderPaymentPreference=(GenericValue)context.get("orderPaymentPreference");
  GenericValue authTransaction=(GenericValue)context.get("authTrans");
  if (authTransaction == null) {
    authTransaction=PaymentGatewayServices.getAuthTransaction(orderPaymentPreference);
  }
  if (authTransaction == null) {
    return ServiceUtil.returnError("No authorization transaction found for the OrderPaymentPreference; cannot release");
  }
  Properties props=buildPccProperties(context);
  PcChargeApi api=getApi(props);
  if (api == null) {
    return ServiceUtil.returnError("PCCharge is not configured properly");
  }
  api.set(PcChargeApi.TROUTD,authTransaction.getString("referenceNum"));
  api.set(PcChargeApi.COMMAND,"3");
  if (!"true".equalsIgnoreCase(props.getProperty("autoBill"))) {
    return ServiceUtil.returnError("PCCharge does not support releasing pre-auths.");
  }
  PcChargeApi out=null;
  try {
    out=api.send();
  }
 catch (  IOException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GeneralException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (out != null) {
    Map result=ServiceUtil.returnSuccess();
    String resultCode=out.get(PcChargeApi.RESULT);
    if ("VOIDED".equals(resultCode)) {
      result.put("releaseResult",Boolean.TRUE);
    }
 else {
      result.put("releaseResult",Boolean.FALSE);
    }
    result.put("releaseAmount",context.get("releaseAmount"));
    result.put("releaseRefNum",out.get(PcChargeApi.TROUTD) != null ? out.get(PcChargeApi.TROUTD) : "");
    result.put("releaseCode",out.get(PcChargeApi.AUTH_CODE));
    result.put("releaseFlag",out.get(PcChargeApi.REFERENCE));
    result.put("releaseMessage",out.get(PcChargeApi.RESULT));
    return result;
  }
 else {
    return ServiceUtil.returnError("Receive a null result from PcCharge");
  }
}
