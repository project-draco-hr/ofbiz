{
  GenericDelegator delegator=dctx.getDelegator();
  WeightPackageSession weightPackageSession=(WeightPackageSession)context.get("weightPackageSession");
  Locale locale=(Locale)context.get("locale");
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  String invoiceId=(String)context.get("invoiceId");
  String dimensionUomId=(String)context.get("dimensionUomId");
  String weightUomId=(String)context.get("weightUomId");
  BigDecimal estimatedShippingCost=(BigDecimal)context.get("estimatedShippingCost");
  BigDecimal newEstimatedShippingCost=(BigDecimal)context.get("newEstimatedShippingCost");
  if (UtilValidate.isEmpty(newEstimatedShippingCost)) {
    newEstimatedShippingCost=ZERO;
  }
  weightPackageSession.setDimensionUomId(dimensionUomId);
  weightPackageSession.setWeightUomId(weightUomId);
  weightPackageSession.setShipmentId(shipmentId);
  weightPackageSession.setInvoiceId(invoiceId);
  weightPackageSession.setEstimatedShipCost(estimatedShippingCost);
  BigDecimal diffInShipCostInPerc=ZERO;
  Map<String,Object> response=FastMap.newInstance();
  try {
    String shipNow=(String)context.get("shipNow");
    if (UtilValidate.isEmpty(shipNow)) {
      shipNow="N";
    }
    if ("N".equals(shipNow)) {
      BigDecimal doEstimates=new BigDecimal(UtilProperties.getPropertyValue("shipment.properties","shipment.default.cost.actual_over_estimated_percent_allowed","10"));
      if (estimatedShippingCost.compareTo(ZERO) > 0) {
        diffInShipCostInPerc=(((newEstimatedShippingCost.subtract(estimatedShippingCost)).divide(estimatedShippingCost,2,rounding)).multiply(new BigDecimal(100))).abs();
      }
 else {
        diffInShipCostInPerc=newEstimatedShippingCost;
      }
      if (doEstimates.compareTo(diffInShipCostInPerc) == -1) {
        response.put("showWarningForm",true);
      }
 else       if (weightPackageSession.complete(orderId,locale)) {
        response.put("shipmentId",shipmentId);
      }
 else {
        response=ServiceUtil.returnError(UtilProperties.getMessage("ProductErrorUiLabels","ProductErrorNoItemsCurrentlySetToBeShippedCannotComplete",locale));
      }
    }
 else     if (weightPackageSession.complete(orderId,locale)) {
      response.put("shipmentId",shipmentId);
    }
 else {
      response=ServiceUtil.returnError(UtilProperties.getMessage("ProductErrorUiLabels","ProductErrorNoItemsCurrentlySetToBeShippedCannotComplete",locale));
    }
  }
 catch (  GeneralException e) {
    return ServiceUtil.returnError(e.getMessage(),e.getMessageList());
  }
  return response;
}
