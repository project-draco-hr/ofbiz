{
  GenericDelegator delegator=dctx.getDelegator();
  WeightPackageSession weightPackageSession=(WeightPackageSession)context.get("weightPackageSession");
  Locale locale=(Locale)context.get("locale");
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  String invoiceId=(String)context.get("invoiceId");
  String dimensionUomId=(String)context.get("dimensionUomId");
  String weightUomId=(String)context.get("weightUomId");
  BigDecimal estimatedShipCost=(BigDecimal)context.get("shipmentEstimateCost");
  weightPackageSession.setDimensionUomId(dimensionUomId);
  weightPackageSession.setWeightUomId(weightUomId);
  weightPackageSession.setShipmentId(shipmentId);
  weightPackageSession.setInvoiceId(invoiceId);
  weightPackageSession.setEstimatedShipCost(estimatedShipCost);
  Map<String,Object> response=FastMap.newInstance();
  try {
    if (weightPackageSession.complete(orderId,locale)) {
      response.put("shipmentId",shipmentId);
    }
 else {
      response=ServiceUtil.returnError(UtilProperties.getMessage("ProductErrorUiLabels","ProductErrorNoItemsCurrentlySetToBeShippedCannotComplete",locale));
    }
  }
 catch (  GeneralException e) {
    return ServiceUtil.returnError(e.getMessage(),e.getMessageList());
  }
  return response;
}
