{
  String serviceNameExpanded=this.serviceNameExdr.expandString(context);
  if (UtilValidate.isEmpty(serviceNameExpanded)) {
    throw new IllegalArgumentException("Service name was empty, expanded from: " + this.serviceNameExdr.getOriginal());
  }
  String autoFieldMapString=this.autoFieldMapExdr.expandString(context);
  try {
    Map<String,Object> serviceContext=null;
    if ("true".equals(autoFieldMapString)) {
      DispatchContext dc=WidgetWorker.getDispatcher(context).getDispatchContext();
      Map<String,Object> combinedMap=new HashMap<String,Object>();
      Map<String,Object> parametersObj=UtilGenerics.toMap(context.get("parameters"));
      if (parametersObj != null) {
        combinedMap.putAll(parametersObj);
      }
      combinedMap.putAll(context);
      serviceContext=dc.makeValidContext(serviceNameExpanded,ModelService.IN_PARAM,combinedMap);
    }
 else     if (UtilValidate.isNotEmpty(autoFieldMapString) && !"false".equals(autoFieldMapString)) {
      FlexibleMapAccessor<Object> fieldFma=FlexibleMapAccessor.getInstance(autoFieldMapString);
      Map<String,Object> autoFieldMap=UtilGenerics.toMap(fieldFma.get(context));
      if (autoFieldMap != null) {
        serviceContext=WidgetWorker.getDispatcher(context).getDispatchContext().makeValidContext(serviceNameExpanded,ModelService.IN_PARAM,autoFieldMap);
      }
    }
    if (serviceContext == null) {
      serviceContext=new HashMap<String,Object>();
    }
    if (this.fieldMap != null) {
      EntityFinderUtil.expandFieldMapToContext(this.fieldMap,context,serviceContext);
    }
    Map<String,Object> result=WidgetWorker.getDispatcher(context).runSync(serviceNameExpanded,serviceContext);
    if (!this.resultMapNameAcsr.isEmpty()) {
      this.resultMapNameAcsr.put(context,result);
      String queryString=(String)result.get("queryString");
      context.put("queryString",queryString);
      context.put("queryStringMap",result.get("queryStringMap"));
      if (UtilValidate.isNotEmpty(queryString)) {
        try {
          String queryStringEncoded=queryString.replaceAll("&","%26");
          context.put("queryStringEncoded",queryStringEncoded);
        }
 catch (        PatternSyntaxException e) {
        }
      }
    }
 else {
      context.putAll(result);
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error calling service with name " + serviceNameExpanded + ": "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new IllegalArgumentException(errMsg);
  }
}
