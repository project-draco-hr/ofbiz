{
  Assert.notNull("filePath",filePath,"context",context);
  try {
    CompiledScript script=compileScriptFile(filePath);
    if (script != null) {
      return executeScript(script,functionName,context);
    }
    String fileExtension=getFileExtension(filePath);
    if ("bsh".equals(fileExtension)) {
      return BshUtil.runBshAtLocation(filePath,context);
    }
 else {
      ScriptEngineManager manager=new ScriptEngineManager();
      ScriptEngine engine=manager.getEngineByExtension(fileExtension);
      if (engine == null) {
        throw new IllegalArgumentException("The script type is not supported for location: " + filePath);
      }
      if (Debug.verboseOn()) {
        Debug.logVerbose("Begin processing script [" + script + "] using engine "+ engine.getClass().getName(),module);
      }
      ScriptContext scriptContext=createScriptContext(context);
      URL scriptUrl=FlexibleLocation.resolveLocation(filePath);
      FileReader reader=new FileReader(new File(scriptUrl.getFile()));
      Object result=engine.eval(reader,scriptContext);
      if (UtilValidate.isNotEmpty(functionName)) {
        try {
          Invocable invocableEngine=(Invocable)engine;
          result=invocableEngine.invokeFunction(functionName,EMPTY_ARGS);
        }
 catch (        ClassCastException e) {
          throw new ScriptException("Script engine " + engine.getClass().getName() + " does not support function/method invocations");
        }
      }
      return result;
    }
  }
 catch (  Exception e) {
    String errMsg="Error running script at location [" + filePath + "]: "+ e.toString();
    Debug.logWarning(e,errMsg,module);
    throw new IllegalArgumentException(errMsg);
  }
}
