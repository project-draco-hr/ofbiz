{
  Locale locale=(Locale)context.get("locale");
  GenericDelegator delegator=dctx.getDelegator();
  productExportSuccessMessageList.clear();
  productExportFailureMessageList.clear();
  Map<String,Object> result=FastMap.newInstance();
  Map response=null;
  try {
    List selectResult=(List)context.get("selectResult");
    List productsList=delegator.findList("Product",EntityCondition.makeCondition("productId",EntityOperator.IN,selectResult),null,null,null,false);
    if (UtilValidate.isNotEmpty(productsList)) {
      Iterator productsListIter=productsList.iterator();
      while (productsListIter.hasNext()) {
        GenericValue product=(GenericValue)productsListIter.next();
        GenericValue startPriceValue=EntityUtil.getFirst(EntityUtil.filterByDate(product.getRelatedByAnd("ProductPrice",UtilMisc.toMap("productPricePurposeId","EBAY","productPriceTypeId","MINIMUM_PRICE"))));
        if (UtilValidate.isEmpty(startPriceValue)) {
          String startPriceMissingMsg="Unable to find a starting price for auction of product with id (" + product.getString("productId") + "). So Ignoring the export of this product to eBay.  \n";
          productExportFailureMessageList.add(startPriceMissingMsg);
          continue;
        }
        Map<String,Object> eBayConfigResult=EbayHelper.buildEbayConfig(context,delegator);
        StringBuffer dataItemsXml=new StringBuffer();
        Map resultMap=buildDataItemsXml(dctx,context,dataItemsXml,eBayConfigResult.get("token").toString(),product);
        if (!ServiceUtil.isFailure(resultMap)) {
          response=postItem(eBayConfigResult.get("xmlGatewayUri").toString(),dataItemsXml,eBayConfigResult.get("devID").toString(),eBayConfigResult.get("appID").toString(),eBayConfigResult.get("certID").toString(),"AddItem",eBayConfigResult.get("compatibilityLevel").toString(),eBayConfigResult.get("siteID").toString());
          if (ServiceUtil.isFailure(response)) {
            return ServiceUtil.returnFailure(ServiceUtil.getErrorMessage(response));
          }
          if (UtilValidate.isNotEmpty(response)) {
            exportToEbayResponse((String)response.get("successMessage"),product);
          }
        }
 else {
          return ServiceUtil.returnFailure(ServiceUtil.getErrorMessage(resultMap));
        }
      }
    }
  }
 catch (  Exception e) {
    Debug.logError("Exception in exportToEbay " + e,module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToEbay.exceptionInExportToEbay",locale));
  }
  if (UtilValidate.isNotEmpty(productExportSuccessMessageList)) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put(ModelService.SUCCESS_MESSAGE_LIST,productExportSuccessMessageList);
  }
  if (UtilValidate.isNotEmpty(productExportFailureMessageList)) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_FAIL);
    result.put(ModelService.ERROR_MESSAGE_LIST,productExportFailureMessageList);
  }
  return result;
}
