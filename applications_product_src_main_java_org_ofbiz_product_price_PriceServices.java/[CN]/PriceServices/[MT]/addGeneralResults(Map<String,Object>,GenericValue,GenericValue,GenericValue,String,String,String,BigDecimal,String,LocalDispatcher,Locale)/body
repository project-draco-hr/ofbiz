{
  result.put("competitivePrice",competitivePriceValue != null ? competitivePriceValue.getBigDecimal("price") : null);
  result.put("specialPromoPrice",specialPromoPriceValue != null ? specialPromoPriceValue.getBigDecimal("price") : null);
  result.put("currencyUsed",currencyUomId);
  if ("Y".equals(checkIncludeVat) && productStore != null && "Y".equals(productStore.getString("showPricesWithVatTax"))) {
    Map<String,Object> calcTaxForDisplayContext=UtilMisc.toMap("productStoreId",productStore.get("productStoreId"),"productId",productId,"quantity",quantity,"basePrice",(BigDecimal)result.get("price"));
    if (UtilValidate.isNotEmpty(partyId)) {
      calcTaxForDisplayContext.put("billToPartyId",partyId);
    }
    try {
      Map<String,Object> calcTaxForDisplayResult=dispatcher.runSync("calcTaxForDisplay",calcTaxForDisplayContext);
      if (ServiceUtil.isError(calcTaxForDisplayResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotCalculateVatTax",locale),null,null,calcTaxForDisplayResult);
      }
      result.put("price",calcTaxForDisplayResult.get("priceWithTax"));
      BigDecimal taxPercentage=(BigDecimal)calcTaxForDisplayResult.get("taxPercentage");
      BigDecimal taxMultiplier=ONE_BASE.add(taxPercentage.divide(PERCENT_SCALE,taxCalcScale));
      if (result.get("listPrice") != null) {
        result.put("listPrice",((BigDecimal)result.get("listPrice")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
      }
      if (result.get("defaultPrice") != null) {
        result.put("defaultPrice",((BigDecimal)result.get("defaultPrice")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
      }
      if (result.get("averageCost") != null) {
        result.put("averageCost",((BigDecimal)result.get("averageCost")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
      }
      if (result.get("promoPrice") != null) {
        result.put("promoPrice",((BigDecimal)result.get("promoPrice")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
      }
      if (result.get("competitivePrice") != null) {
        result.put("competitivePrice",((BigDecimal)result.get("competitivePrice")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
      }
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Error calculating VAT tax (with calcTaxForDisplay service): " + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotCalculateVatTax",locale));
    }
  }
  return null;
}
