{
  Locale locale=(Locale)context.get("locale");
  List<String> sizeTypeList=UtilMisc.toList("small","medium","large","detail");
  int index;
  Map<String,Map<String,String>> imgPropertyMap=FastMap.newInstance();
  BufferedImage bufImg, bufNewImg;
  double imgHeight, imgWidth;
  Map<String,String> imgUrlMap=FastMap.newInstance();
  Map<String,Object> resultXMLMap=FastMap.newInstance();
  Map<String,Object> resultBufImgMap=FastMap.newInstance();
  Map<String,Object> resultScaleImgMap=FastMap.newInstance();
  Map<String,Object> result=FastMap.newInstance();
  String imgPropertyFullPath=System.getProperty("ofbiz.home") + "/applications/product/config/ImageProperties.xml";
  resultXMLMap.putAll((Map<String,Object>)ImageTransform.getXMLValue(imgPropertyFullPath,locale));
  if (resultXMLMap.containsKey("responseMessage") && resultXMLMap.get("responseMessage").equals("success")) {
    imgPropertyMap.putAll(UtilGenerics.<Map<String,Map<String,String>>>cast(resultXMLMap.get("xml")));
  }
 else {
    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_parse",locale) + " : ImageProperties.xml";
    Debug.logError(errMsg,module);
    result.put("errorMessage",errMsg);
    return result;
  }
  index=filenameToUse.lastIndexOf(".");
  String imgName=filenameToUse.substring(0,index - 1);
  String imgExtension=filenameToUse.substring(index + 1);
  String mainFilenameFormat=UtilProperties.getPropertyValue("catalog","image.filename.format");
  String imageServerPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.server.path"),context);
  String imageUrlPrefix=UtilProperties.getPropertyValue("catalog","image.url.prefix");
  String id=null;
  String type=null;
  if (viewType.toLowerCase().contains("main")) {
    type="original";
    id=imgName;
  }
 else   if (viewType.toLowerCase().contains("additional") && viewNumber != null && !viewNumber.equals("0")) {
    type="additional";
    id=imgName + "_View_" + viewNumber;
  }
 else {
    return ServiceUtil.returnError("View Type : " + type + " is wrong");
  }
  FlexibleStringExpander mainFilenameExpander=FlexibleStringExpander.getInstance(mainFilenameFormat);
  String fileLocation=mainFilenameExpander.expandString(UtilMisc.toMap("location","products","type",type,"id",filenameToUse));
  String filePathPrefix="";
  if (fileLocation.lastIndexOf("/") != -1) {
    filePathPrefix=fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);
  }
  resultBufImgMap.putAll(ImageTransform.getBufferedImage(imageServerPath + "/" + filePathPrefix+ filenameToUse,locale));
  if (resultBufImgMap.containsKey("responseMessage") && resultBufImgMap.get("responseMessage").equals("success")) {
    bufImg=(BufferedImage)resultBufImgMap.get("bufferedImage");
    imgHeight=(double)bufImg.getHeight();
    imgWidth=(double)bufImg.getWidth();
    if (imgHeight == 0.0 || imgWidth == 0.0) {
      String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_current_image_dimension_is_null",locale) + " : imgHeight = " + imgHeight+ " ; imgWidth = "+ imgWidth;
      Debug.logError(errMsg,module);
      result.put("errorMessage",errMsg);
      return result;
    }
    FlexibleStringExpander addFilenameExpander=mainFilenameExpander;
    if (viewType.toLowerCase().contains("additional")) {
      String addFilenameFormat=UtilProperties.getPropertyValue("catalog","image.filename.additionalviewsize.format");
      addFilenameExpander=FlexibleStringExpander.getInstance(addFilenameFormat);
    }
    Iterator<String> sizeIter=sizeTypeList.iterator();
    while (sizeIter.hasNext()) {
      String sizeType=sizeIter.next();
      resultScaleImgMap.putAll(ImageTransform.scaleImage(bufImg,imgHeight,imgWidth,imgPropertyMap,sizeType,locale));
      if (resultScaleImgMap.containsKey("responseMessage") && resultScaleImgMap.get("responseMessage").equals("success")) {
        bufNewImg=(BufferedImage)resultScaleImgMap.get("bufferedImage");
        String newFileLocation=null;
        if (viewType.toLowerCase().contains("main")) {
          newFileLocation=mainFilenameExpander.expandString(UtilMisc.toMap("location","products","type",sizeType,"id",id));
        }
 else         if (viewType.toLowerCase().contains("additional")) {
          newFileLocation=addFilenameExpander.expandString(UtilMisc.toMap("location","products","viewtype",viewType,"sizetype",sizeType,"id",id));
        }
        String newFilePathPrefix="";
        if (newFileLocation.lastIndexOf("/") != -1) {
          newFilePathPrefix=newFileLocation.substring(0,newFileLocation.lastIndexOf("/") + 1);
        }
        String targetDirectory=imageServerPath + "/" + newFilePathPrefix;
        File targetDir=new File(targetDirectory);
        if (!targetDir.exists()) {
          boolean created=targetDir.mkdirs();
          if (!created) {
            String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_create_target_directory",locale) + " - " + targetDirectory;
            Debug.logFatal(errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
        }
        try {
          ImageIO.write((RenderedImage)bufNewImg,imgExtension,new File(imageServerPath + "/" + newFilePathPrefix+ filenameToUse));
        }
 catch (        IllegalArgumentException e) {
          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_parameter_is_null",locale) + e.toString();
          Debug.logError(errMsg,module);
          result.put("errorMessage",errMsg);
          return result;
        }
catch (        IOException e) {
          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.error_occurs_during_writing",locale) + e.toString();
          Debug.logError(errMsg,module);
          result.put("errorMessage",errMsg);
          return result;
        }
        String imageUrl=imageUrlPrefix + "/" + newFilePathPrefix+ filenameToUse;
        imgUrlMap.put(sizeType,imageUrl);
      }
    }
    result.put("responseMessage","success");
    result.put("imageUrlMap",imgUrlMap);
    result.put("original",resultBufImgMap);
    return result;
  }
 else {
    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_scale_original_image",locale) + " : " + filenameToUse;
    Debug.logError(errMsg,module);
    result.put("errorMessage",errMsg);
    return ServiceUtil.returnError(errMsg);
  }
}
