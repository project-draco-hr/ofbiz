{
  Locale locale=(Locale)context.get("locale");
  int index;
  Map<String,Map<String,String>> imgPropertyMap=FastMap.newInstance();
  BufferedImage bufImg, bufNewImg;
  double imgHeight, imgWidth;
  Map<String,String> imgUrlMap=FastMap.newInstance();
  Map<String,Object> resultXMLMap=FastMap.newInstance();
  Map<String,Object> resultBufImgMap=FastMap.newInstance();
  Map<String,Object> resultScaleImgMap=FastMap.newInstance();
  Map<String,Object> result=FastMap.newInstance();
  String imgPropertyFullPath=System.getProperty("ofbiz.home") + "/applications/product/config/ImageProperties.xml";
  resultXMLMap.putAll(ImageTransform.getXMLValue(imgPropertyFullPath,locale));
  if (resultXMLMap.containsKey("responseMessage") && resultXMLMap.get("responseMessage").equals("success")) {
    imgPropertyMap.putAll(UtilGenerics.<Map<String,Map<String,String>>>cast(resultXMLMap.get("xml")));
  }
 else {
    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_parse",locale) + " : ImageProperties.xml";
    Debug.logError(errMsg,module);
    result.put("errorMessage",errMsg);
    return result;
  }
  index=filenameToUse.lastIndexOf(".");
  String imgExtension=filenameToUse.substring(index + 1);
  Map<String,Object> imageContext=FastMap.newInstance();
  imageContext.putAll(context);
  imageContext.put("tenantId",((Delegator)context.get("delegator")).getDelegatorTenantId());
  String imageServerPath=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.server.path",(Delegator)context.get("delegator")),imageContext);
  String imageUrlPrefix=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.url.prefix",(Delegator)context.get("delegator")),imageContext);
  imageServerPath=imageServerPath.endsWith("/") ? imageServerPath.substring(0,imageServerPath.length() - 1) : imageServerPath;
  imageUrlPrefix=imageUrlPrefix.endsWith("/") ? imageUrlPrefix.substring(0,imageUrlPrefix.length() - 1) : imageUrlPrefix;
  FlexibleStringExpander filenameExpander;
  String fileLocation=null;
  String type=null;
  String id=null;
  if (viewType.toLowerCase().contains("main")) {
    String filenameFormat=EntityUtilProperties.getPropertyValue("catalog","image.filename.format",(Delegator)context.get("delegator"));
    filenameExpander=FlexibleStringExpander.getInstance(filenameFormat);
    id=(String)context.get("productId");
    fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"type","original"));
  }
 else   if (viewType.toLowerCase().contains("additional") && viewNumber != null && !viewNumber.equals("0")) {
    String filenameFormat=EntityUtilProperties.getPropertyValue("catalog","image.filename.additionalviewsize.format",(Delegator)context.get("delegator"));
    filenameExpander=FlexibleStringExpander.getInstance(filenameFormat);
    id=(String)context.get("productId");
    if (filenameFormat.endsWith("${id}")) {
      id=id + "_View_" + viewNumber;
    }
 else {
      viewType="additional" + viewNumber;
    }
    fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"viewtype",viewType,"sizetype","original"));
  }
 else {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductImageViewType",UtilMisc.toMap("viewType",type),locale));
  }
  if (fileLocation.lastIndexOf("/") != -1) {
    fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);
  }
  resultBufImgMap.putAll(ImageTransform.getBufferedImage(imageServerPath + "/" + fileLocation+ "."+ imgExtension,locale));
  if (resultBufImgMap.containsKey("responseMessage") && resultBufImgMap.get("responseMessage").equals("success")) {
    bufImg=(BufferedImage)resultBufImgMap.get("bufferedImage");
    imgHeight=bufImg.getHeight();
    imgWidth=bufImg.getWidth();
    if (imgHeight == 0.0 || imgWidth == 0.0) {
      String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_current_image_dimension_is_null",locale) + " : imgHeight = " + imgHeight+ " ; imgWidth = "+ imgWidth;
      Debug.logError(errMsg,module);
      result.put("errorMessage",errMsg);
      return result;
    }
    for (    Map.Entry<String,Map<String,String>> entry : imgPropertyMap.entrySet()) {
      String sizeType=entry.getKey();
      resultScaleImgMap.putAll(ImageTransform.scaleImage(bufImg,imgHeight,imgWidth,imgPropertyMap,sizeType,locale));
      if (resultScaleImgMap.containsKey("responseMessage") && resultScaleImgMap.get("responseMessage").equals("success")) {
        bufNewImg=(BufferedImage)resultScaleImgMap.get("bufferedImage");
        String newFileLocation=null;
        filenameToUse=sizeType + filenameToUse.substring(filenameToUse.lastIndexOf("."));
        if (viewType.toLowerCase().contains("main")) {
          newFileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"type",sizeType));
        }
 else         if (viewType.toLowerCase().contains("additional")) {
          newFileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"viewtype",viewType,"sizetype",sizeType));
        }
        String newFilePathPrefix="";
        if (newFileLocation.lastIndexOf("/") != -1) {
          newFilePathPrefix=newFileLocation.substring(0,newFileLocation.lastIndexOf("/") + 1);
        }
        String targetDirectory=imageServerPath + "/" + newFilePathPrefix;
        try {
          File targetDir=new File(targetDirectory);
          if (!targetDir.exists()) {
            boolean created=targetDir.mkdirs();
            if (!created) {
              String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_create_target_directory",locale) + " - " + targetDirectory;
              Debug.logFatal(errMsg,module);
              return ServiceUtil.returnError(errMsg);
            }
          }
 else           if (newFileLocation.endsWith("/" + id)) {
            try {
              File[] files=targetDir.listFiles();
              for (              File file : files) {
                if (file.isFile() && file.getName().startsWith(id)) {
                  file.delete();
                }
              }
            }
 catch (            SecurityException e) {
              Debug.logError(e,module);
            }
          }
        }
 catch (        NullPointerException e) {
          Debug.logError(e,module);
        }
        try {
          ImageIO.write(bufNewImg,imgExtension,new File(imageServerPath + "/" + newFileLocation+ "."+ imgExtension));
        }
 catch (        IllegalArgumentException e) {
          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_parameter_is_null",locale) + e.toString();
          Debug.logError(errMsg,module);
          result.put("errorMessage",errMsg);
          return result;
        }
catch (        IOException e) {
          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.error_occurs_during_writing",locale) + e.toString();
          Debug.logError(errMsg,module);
          result.put("errorMessage",errMsg);
          return result;
        }
        if (sizeTypeList.contains(sizeType)) {
          String imageUrl=imageUrlPrefix + "/" + newFileLocation+ "."+ imgExtension;
          imgUrlMap.put(sizeType,imageUrl);
        }
      }
    }
    result.put("responseMessage","success");
    result.put("imageUrlMap",imgUrlMap);
    result.put("original",resultBufImgMap);
    return result;
  }
 else {
    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_scale_original_image",locale) + " : " + filenameToUse;
    Debug.logError(errMsg,module);
    result.put("errorMessage",errMsg);
    return ServiceUtil.returnError(errMsg);
  }
}
