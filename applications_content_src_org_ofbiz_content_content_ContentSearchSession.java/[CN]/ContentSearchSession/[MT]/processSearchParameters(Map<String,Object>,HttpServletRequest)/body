{
  Boolean alreadyRun=(Boolean)request.getAttribute("processSearchParametersAlreadyRun");
  if (Boolean.TRUE.equals(alreadyRun)) {
    return;
  }
 else {
    request.setAttribute("processSearchParametersAlreadyRun",Boolean.TRUE);
  }
  HttpSession session=request.getSession();
  boolean constraintsChanged=false;
  String clearSearchString=(String)parameters.get("clearSearch");
  if (!"N".equals(clearSearchString)) {
    searchClear(session);
    constraintsChanged=true;
  }
 else {
    String removeConstraint=(String)parameters.get("removeConstraint");
    if (UtilValidate.isNotEmpty(removeConstraint)) {
      try {
        searchRemoveConstraint(Integer.parseInt(removeConstraint),session);
        constraintsChanged=true;
      }
 catch (      Exception e) {
        Debug.logError(e,"Error removing constraint [" + removeConstraint + "]",module);
      }
    }
  }
  if (UtilValidate.isNotEmpty(parameters.get("SEARCH_CONTENT_ID"))) {
    String contentId=(String)parameters.get("SEARCH_CONTENT_ID");
    String contentAssocTypeId=(String)parameters.get("contentAssocTypeId");
    boolean includeAllSubContents=!"N".equalsIgnoreCase((String)parameters.get("SEARCH_SUB_CONTENTS"));
    searchAddConstraint(new ContentSearch.ContentAssocConstraint(contentId,contentAssocTypeId,includeAllSubContents),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty(parameters.get("fromDate")) || UtilValidate.isNotEmpty(parameters.get("thruDate"))) {
    Timestamp fromDate=null;
    if (UtilValidate.isNotEmpty(parameters.get("fromDate"))) {
      fromDate=Timestamp.valueOf((String)parameters.get("fromDate"));
    }
    Timestamp thruDate=null;
    if (UtilValidate.isNotEmpty(parameters.get("thruDate"))) {
      thruDate=Timestamp.valueOf((String)parameters.get("thruDate"));
    }
    searchAddConstraint(new ContentSearch.LastUpdatedRangeConstraint(fromDate,thruDate),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty(parameters.get("SEARCH_STRING"))) {
    String keywordString=(String)parameters.get("SEARCH_STRING");
    String searchOperator=(String)parameters.get("SEARCH_OPERATOR");
    boolean anyPrefixSuffix=!"N".equals(parameters.get("SEARCH_ANYPRESUF"));
    searchAddConstraint(new ContentSearch.KeywordConstraint(keywordString,anyPrefixSuffix,anyPrefixSuffix,null,"AND".equals(searchOperator)),session);
    constraintsChanged=true;
  }
  String sortOrder=(String)parameters.get("sortOrder");
  String sortAscending=(String)parameters.get("sortAscending");
  boolean ascending=!"N".equals(sortAscending);
  if (sortOrder != null) {
    if (sortOrder.equals("SortKeywordRelevancy")) {
      searchSetSortOrder(new ContentSearch.SortKeywordRelevancy(),session);
    }
 else     if (sortOrder.startsWith("SortContentField:")) {
      String fieldName=sortOrder.substring("SortContentField:".length());
      searchSetSortOrder(new ContentSearch.SortContentField(fieldName,ascending),session);
    }
  }
  ContentSearchOptions contentSearchOptions=getContentSearchOptions(session);
  if (constraintsChanged) {
    contentSearchOptions.clearViewInfo();
  }
  String viewIndexStr=(String)parameters.get("VIEW_INDEX");
  if (UtilValidate.isNotEmpty(viewIndexStr)) {
    try {
      contentSearchOptions.setViewIndex(Integer.valueOf(viewIndexStr));
    }
 catch (    Exception e) {
      Debug.logError(e,"Error formatting VIEW_INDEX, setting to 0",module);
      contentSearchOptions.setViewIndex(Integer.valueOf(0));
    }
  }
  String viewSizeStr=(String)parameters.get("VIEW_SIZE");
  if (UtilValidate.isNotEmpty(viewSizeStr)) {
    try {
      contentSearchOptions.setViewSize(Integer.valueOf(viewSizeStr));
    }
 catch (    Exception e) {
      Debug.logError(e,"Error formatting VIEW_SIZE, setting to 20",module);
      contentSearchOptions.setViewSize(Integer.valueOf(20));
    }
  }
}
