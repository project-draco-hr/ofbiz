{
  Delegator delegator=dctx.getDelegator();
  String resource=(String)context.get("serviceConfigProps");
  String shipmentGatewayConfigId=(String)context.get("shipmentGatewayConfigId");
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> result=FastMap.newInstance();
  String postalCode=(String)context.get("postalCode");
  String accountNbr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessAccountNbr",resource,"shipment.dhl.access.accountNbr");
  if (accountNbr == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlAccessAccountNbrMandotoryForRegisterAccount",locale));
  }
  Document requestDocument=createAccessRequestDocument(delegator,shipmentGatewayConfigId,resource);
  String requestString=null;
  Element requesElement=requestDocument.getDocumentElement();
  Element registerRequestElement=UtilXml.addChildElement(requesElement,"Register",requestDocument);
  registerRequestElement.setAttribute("version","1.0");
  registerRequestElement.setAttribute("action","ShippingKey");
  UtilXml.addChildElementValue(registerRequestElement,"AccountNbr",accountNbr,requestDocument);
  UtilXml.addChildElementValue(registerRequestElement,"PostalCode",postalCode,requestDocument);
  try {
    requestString=UtilXml.writeXmlDocument(requestDocument);
    Debug.logInfo("AccessRequest XML Document:" + requestString,module);
  }
 catch (  IOException e) {
    String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
    Debug.logError(e,ioeErrMsg,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlErrorAccessRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  String registerResponseString=null;
  try {
    registerResponseString=sendDhlRequest(requestString,delegator,shipmentGatewayConfigId,resource,locale);
    Debug.logInfo("DHL request for DHL Register Account:" + registerResponseString,module);
  }
 catch (  DhlConnectException e) {
    String uceErrMsg="Error sending DHL request for DHL Register Account: " + e.toString();
    Debug.logError(e,uceErrMsg,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlErrorSendingRequestRegisterAccount",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  Document registerResponseDocument=null;
  try {
    registerResponseDocument=UtilXml.readXmlDocument(registerResponseString,false);
    result=handleDhlRegisterResponse(registerResponseDocument,locale);
    Debug.logInfo("DHL response for DHL Register Account:" + registerResponseString,module);
  }
 catch (  SAXException e2) {
    String excErrMsg="Error parsing the RegisterAccountServiceSelectionResponse: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlErrorParsingRegisterAccountResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
  }
catch (  ParserConfigurationException e2) {
    String excErrMsg="Error parsing the RegisterAccountServiceSelectionResponse: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlErrorParsingRegisterAccountResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
  }
catch (  IOException e2) {
    String excErrMsg="Error parsing the RegisterAccountServiceSelectionResponse: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlErrorParsingRegisterAccountResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
  }
  return result;
}
