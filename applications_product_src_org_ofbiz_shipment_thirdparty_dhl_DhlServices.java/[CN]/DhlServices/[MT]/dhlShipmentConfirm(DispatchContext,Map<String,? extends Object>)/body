{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);
  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");
  String resource=(String)shipmentGatewayConfig.get("configProps");
  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlGatewayNotAvailable",locale));
  }
  String shipmentConfirmResponseString=null;
  try {
    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();
    if (shipment == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentNotFoundId",locale) + shipmentId);
    }
    GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId).queryOne();
    if (shipmentRouteSegment == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentRouteSegmentNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (!"DHL".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
    }
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("carrierServiceStatusId")) && !"SHRSCS_NOT_STARTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlRouteSegmentStatusNotStarted",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId,"shipmentRouteSegmentStatus",shipmentRouteSegment.getString("carrierServiceStatusId")),locale));
    }
    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress",false);
    if (originPostalAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber",false);
    if (originTelecomNumber == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String originPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !"001".equals(originTelecomNumber.getString("countryCode"))) {
      originPhoneNumber=originTelecomNumber.getString("countryCode") + originPhoneNumber;
    }
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber,"-","");
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber," ","");
    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo",false);
    if (originCountryGeo == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress",false);
    if (destPostalAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String destPhoneNumber=originPhoneNumber;
    GenericValue destTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber",false);
    if (destTelecomNumber != null) {
      destPhoneNumber=destTelecomNumber.getString("areaCode") + destTelecomNumber.getString("contactNumber");
      if (UtilValidate.isNotEmpty(destTelecomNumber.getString("countryCode")) && !"001".equals(destTelecomNumber.getString("countryCode"))) {
        destPhoneNumber=destTelecomNumber.getString("countryCode") + destPhoneNumber;
      }
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber,"-","");
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber," ","");
    }
    String recipientEmail=null;
    Map<String,Object> results=dispatcher.runSync("getPartyEmail",UtilMisc.toMap("partyId",shipment.get("partyIdTo"),"userLogin",userLogin));
    if (results.get("emailAddress") != null) {
      recipientEmail=(String)results.get("emailAddress");
    }
    GenericValue destCountryGeo=destPostalAddress.getRelatedOne("CountryGeo",false);
    if (destCountryGeo == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"),false);
    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (shipmentPackageRouteSegs.size() != 1) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlMultiplePackagesNotSupported",locale));
    }
    boolean hasBillingWeight=false;
    BigDecimal billingWeight=shipmentRouteSegment.getBigDecimal("billingWeight");
    String billingWeightUomId=shipmentRouteSegment.getString("billingWeightUomId");
    if ((billingWeight != null) && (billingWeight.compareTo(BigDecimal.ZERO) > 0)) {
      hasBillingWeight=true;
      if (billingWeightUomId == null) {
        Debug.logWarning("Shipment Route Segment missing billingWeightUomId in shipmentId " + shipmentId,module);
        billingWeightUomId="WT_lb";
      }
      results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",billingWeightUomId,"uomIdTo",DHL_WEIGHT_UOM_ID,"originalValue",billingWeight));
      if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
        Debug.logWarning("Unable to convert billing weights for shipmentId " + shipmentId,module);
        hasBillingWeight=false;
      }
 else {
        billingWeight=(BigDecimal)results.get("convertedValue");
      }
    }
    BigDecimal packageWeight=null;
    for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage",false);
      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType",false);
      if (shipmentBoxType != null) {
      }
      if (hasBillingWeight)       continue;
      if (shipmentPackage.getString("weight") != null) {
        packageWeight=new BigDecimal(shipmentPackage.getString("weight"));
      }
 else {
        try {
          packageWeight=new BigDecimal(EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.value",delegator));
        }
 catch (        NumberFormatException ne) {
          Debug.logWarning("Default shippable weight not configured (shipment.default.weight.value)",module);
          packageWeight=BigDecimal.ONE;
        }
      }
      String weightUomId=(String)shipmentPackage.get("weightUomId");
      if (weightUomId == null) {
        Debug.logWarning("Shipment Route Segment missing weightUomId in shipmentId " + shipmentId,module);
        weightUomId="WT_lb";
      }
      results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",weightUomId,"uomIdTo",DHL_WEIGHT_UOM_ID,"originalValue",packageWeight));
      if ((results == null) || (results.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR)) || (results.get("convertedValue") == null)) {
        Debug.logWarning("Unable to convert weights for shipmentId " + shipmentId,module);
        packageWeight=BigDecimal.ONE;
      }
 else {
        packageWeight=(BigDecimal)results.get("convertedValue");
      }
    }
    BigDecimal weight=null;
    if (hasBillingWeight) {
      weight=billingWeight;
    }
 else {
      weight=packageWeight;
    }
    String roundedWeight=weight.setScale(0,BigDecimal.ROUND_HALF_UP).toPlainString();
    String shipmentMethodTypeId=shipmentRouteSegment.getString("shipmentMethodTypeId");
    String dhlShipmentDetailCode=null;
    GenericValue carrierShipmentMethod=EntityQuery.use(delegator).from("CarrierShipmentMethod").where("shipmentMethodTypeId",shipmentMethodTypeId,"partyId","DHL","roleTypeId","CARRIER").queryOne();
    if (carrierShipmentMethod == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlNoCarrierShipmentMethod",UtilMisc.toMap("carrierPartyId","DHL","shipmentMethodTypeId",shipmentMethodTypeId),locale));
    }
    dhlShipmentDetailCode=carrierShipmentMethod.getString("carrierServiceCode");
    String userid=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessUserId",resource,"shipment.dhl.access.userid");
    String password=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessPassword",resource,"shipment.dhl.access.password");
    String shippingKey=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessShippingKey",resource,"shipment.dhl.access.shippingKey");
    String accountNbr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessAccountNbr",resource,"shipment.dhl.access.accountNbr");
    if ((shippingKey == null) || (accountNbr == null) || (shippingKey.length() == 0)|| (accountNbr.length() == 0)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlGatewayNotAvailable",locale));
    }
    String labelImagePreference=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"labelImageFormat",resource,"shipment.dhl.label.image.format");
    if (labelImagePreference == null) {
      Debug.logInfo("shipment.dhl.label.image.format not specified, assuming PNG",module);
      labelImagePreference="PNG";
    }
 else     if (!(labelImagePreference.equals("PNG") || labelImagePreference.equals("GIF"))) {
      Debug.logError("Illegal shipment.dhl.label.image.format: " + labelImagePreference,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlUnknownLabelImageFormat",UtilMisc.toMap("labelImagePreference",labelImagePreference),locale));
    }
    String templateName=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"rateEstimateTemplate",resource,"shipment.dhl.template.rate.estimate");
    if ((templateName == null) || (templateName.trim().length() == 0)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlRateEstimateTemplateNotConfigured",locale));
    }
    StringWriter outWriter=new StringWriter();
    Map<String,Object> inContext=FastMap.newInstance();
    inContext.put("action","GenerateLabel");
    inContext.put("userid",userid);
    inContext.put("password",password);
    inContext.put("accountNbr",accountNbr);
    inContext.put("shippingKey",shippingKey);
    inContext.put("shipDate",UtilDateTime.nowTimestamp());
    inContext.put("dhlShipmentDetailCode",dhlShipmentDetailCode);
    inContext.put("weight",roundedWeight);
    inContext.put("senderPhoneNbr",originPhoneNumber);
    inContext.put("companyName",destPostalAddress.getString("toName"));
    inContext.put("attnTo",destPostalAddress.getString("attnName"));
    inContext.put("street",destPostalAddress.getString("address1"));
    inContext.put("streetLine2",destPostalAddress.getString("address2"));
    inContext.put("city",destPostalAddress.getString("city"));
    inContext.put("state",destPostalAddress.getString("stateProvinceGeoId"));
    if ((destPostalAddress.getString("postalCode") != null) && (destPostalAddress.getString("postalCode").length() > 5)) {
      inContext.put("postalCode",destPostalAddress.getString("postalCode").substring(0,5));
    }
 else {
      inContext.put("postalCode",destPostalAddress.getString("postalCode"));
    }
    inContext.put("phoneNbr",destPhoneNumber);
    inContext.put("labelImageType",labelImagePreference);
    inContext.put("shipperReference",shipment.getString("primaryOrderId") + "-" + shipment.getString("primaryShipGroupSeqId"));
    inContext.put("notifyEmailAddress",recipientEmail);
    try {
      ContentWorker.renderContentAsText(dispatcher,delegator,templateName,outWriter,inContext,locale,"text/plain",null,null,false);
    }
 catch (    Exception e) {
      Debug.logError(e,"Cannot confirm DHL shipment: Failed to render DHL XML Request.",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRateTemplateRenderingError",locale));
    }
    String requestString=outWriter.toString();
    if (Debug.verboseOn()) {
      Debug.logVerbose(requestString,module);
    }
    String responseString=null;
    try {
      responseString=sendDhlRequest(requestString,delegator,shipmentGatewayConfigId,resource,locale);
      if (Debug.verboseOn()) {
        Debug.logVerbose(responseString,module);
      }
    }
 catch (    DhlConnectException e) {
      String uceErrMsg="Error sending DHL request for DHL Service Rate: " + e.toString();
      Debug.logError(e,uceErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRateTemplateSendingError",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    return handleDhlShipmentConfirmResponse(responseString,shipmentRouteSegment,shipmentPackageRouteSegs,locale);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    if (shipmentConfirmResponseString != null) {
      Debug.logError("Got XML ShipmentConfirmRespose: " + shipmentConfirmResponseString,module);
      return ServiceUtil.returnError(UtilMisc.toList(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRateTemplateReadingError",UtilMisc.toMap("errorString",e.toString()),locale),UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentConfirmResponse",UtilMisc.toMap("shipmentConfirmResponseString",shipmentConfirmResponseString),locale)));
    }
 else {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRateTemplateReadingError",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRateTemplateReadingError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
}
