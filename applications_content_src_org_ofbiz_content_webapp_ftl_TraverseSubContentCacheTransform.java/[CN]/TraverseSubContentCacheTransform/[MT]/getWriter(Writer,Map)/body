{
  final StringBuffer buf=new StringBuffer();
  final Environment env=Environment.getCurrentEnvironment();
  final Map templateRoot=FreeMarkerWorker.createEnvironmentMap(env);
  final Map savedValuesUp=FastMap.newInstance();
  FreeMarkerWorker.saveContextValues(templateRoot,upSaveKeyNames,savedValuesUp);
  final Map savedValues=FastMap.newInstance();
  FreeMarkerWorker.overrideWithArgs(templateRoot,args);
  String startContentAssocTypeId=(String)templateRoot.get("contentAssocTypeId");
  final GenericDelegator delegator=(GenericDelegator)FreeMarkerWorker.getWrappedObject("delegator",env);
  final HttpServletRequest request=(HttpServletRequest)FreeMarkerWorker.getWrappedObject("request",env);
  FreeMarkerWorker.getSiteParameters(request,templateRoot);
  final GenericValue userLogin=(GenericValue)FreeMarkerWorker.getWrappedObject("userLogin",env);
  Object obj=templateRoot.get("globalNodeTrail");
  List globalNodeTrail=(List)obj;
  String csvTrail=ContentWorker.nodeTrailToCsv(globalNodeTrail);
  String strNullThruDatesOnly=(String)templateRoot.get("nullThruDatesOnly");
  String contentAssocPredicateId=(String)templateRoot.get("contentAssocPredicateId");
  Boolean nullThruDatesOnly=(strNullThruDatesOnly != null && strNullThruDatesOnly.equalsIgnoreCase("true")) ? Boolean.TRUE : Boolean.FALSE;
  GenericValue val=null;
  try {
    val=ContentWorker.getCurrentContent(delegator,globalNodeTrail,userLogin,templateRoot,nullThruDatesOnly,contentAssocPredicateId);
  }
 catch (  GeneralException e) {
    throw new RuntimeException("Error getting current content. " + e.toString());
  }
  final GenericValue view=val;
  final Map traverseContext=FastMap.newInstance();
  traverseContext.put("delegator",delegator);
  Map whenMap=FastMap.newInstance();
  whenMap.put("followWhen",(String)templateRoot.get("followWhen"));
  whenMap.put("pickWhen",(String)templateRoot.get("pickWhen"));
  whenMap.put("returnBeforePickWhen",(String)templateRoot.get("returnBeforePickWhen"));
  whenMap.put("returnAfterPickWhen",(String)templateRoot.get("returnAfterPickWhen"));
  traverseContext.put("whenMap",whenMap);
  env.setVariable("whenMap",FreeMarkerWorker.autoWrap(whenMap,env));
  String fromDateStr=(String)templateRoot.get("fromDateStr");
  String thruDateStr=(String)templateRoot.get("thruDateStr");
  Timestamp fromDate=null;
  if (fromDateStr != null && fromDateStr.length() > 0) {
    fromDate=UtilDateTime.toTimestamp(fromDateStr);
  }
  traverseContext.put("fromDate",fromDate);
  Timestamp thruDate=null;
  if (thruDateStr != null && thruDateStr.length() > 0) {
    thruDate=UtilDateTime.toTimestamp(thruDateStr);
  }
  traverseContext.put("thruDate",thruDate);
  traverseContext.put("contentAssocTypeId",startContentAssocTypeId);
  String direction=(String)templateRoot.get("direction");
  if (UtilValidate.isEmpty(direction)) {
    direction="From";
  }
  traverseContext.put("direction",direction);
  return new LoopWriter(out){
    public void write(    char cbuf[],    int off,    int len){
      buf.append(cbuf,off,len);
    }
    public void flush() throws IOException {
      out.flush();
    }
    public int onStart() throws TemplateModelException, IOException {
      List nodeTrail=null;
      Map node=null;
      GenericValue subContentDataResourceView=null;
      List globalNodeTrail=(List)templateRoot.get("globalNodeTrail");
      String trailCsv=ContentWorker.nodeTrailToCsv(globalNodeTrail);
      if (globalNodeTrail.size() > 0) {
        int sz=globalNodeTrail.size();
        nodeTrail=FastList.newInstance();
        node=(Map)globalNodeTrail.get(sz - 1);
        Boolean checkedObj=(Boolean)node.get("checked");
        Map whenMap=(Map)templateRoot.get("whenMap");
        if (checkedObj == null || !checkedObj.booleanValue()) {
          ContentWorker.checkConditions(delegator,node,null,whenMap);
        }
        subContentDataResourceView=(GenericValue)node.get("value");
      }
 else {
        throw new IOException("Empty node trail entries");
      }
      Boolean isReturnBeforePickBool=(Boolean)node.get("isReturnBeforePick");
      if (isReturnBeforePickBool != null && isReturnBeforePickBool.booleanValue())       return TransformControl.SKIP_BODY;
      GenericValue content=null;
      ContentWorker.selectKids(node,traverseContext);
      nodeTrail.add(node);
      traverseContext.put("nodeTrail",nodeTrail);
      Boolean isPickBool=(Boolean)node.get("isPick");
      Boolean isFollowBool=(Boolean)node.get("isFollow");
      boolean isPick=true;
      if ((isPickBool == null || !isPickBool.booleanValue()) && (isFollowBool != null && isFollowBool.booleanValue())) {
        isPick=ContentWorker.traverseSubContent(traverseContext);
      }
      if (isPick) {
        populateContext(traverseContext,templateRoot);
        FreeMarkerWorker.saveContextValues(templateRoot,saveKeyNames,savedValues);
        return TransformControl.EVALUATE_BODY;
      }
 else {
        return TransformControl.SKIP_BODY;
      }
    }
    public int afterBody() throws TemplateModelException, IOException {
      FreeMarkerWorker.reloadValues(templateRoot,savedValues,env);
      List globalNodeTrail=(List)templateRoot.get("globalNodeTrail");
      List nodeTrail=(List)traverseContext.get("nodeTrail");
      boolean inProgress=ContentWorker.traverseSubContent(traverseContext);
      int sz=nodeTrail.size();
      if (inProgress) {
        populateContext(traverseContext,templateRoot);
        FreeMarkerWorker.saveContextValues(templateRoot,saveKeyNames,savedValues);
        return TransformControl.REPEAT_EVALUATION;
      }
 else       return TransformControl.END_EVALUATION;
    }
    public void close() throws IOException {
      FreeMarkerWorker.reloadValues(templateRoot,savedValuesUp,env);
      String wrappedContent=buf.toString();
      out.write(wrappedContent);
    }
    public void populateContext(    Map traverseContext,    Map templateContext){
      List nodeTrail=(List)traverseContext.get("nodeTrail");
      int sz=nodeTrail.size();
      Map node=(Map)nodeTrail.get(sz - 1);
      GenericValue content=(GenericValue)node.get("value");
      String contentId=(String)node.get("contentId");
      String subContentId=(String)node.get("subContentId");
      String contentAssocTypeId=(String)node.get("contentAssocTypeId");
      envWrap("contentAssocTypeId",contentAssocTypeId);
      envWrap("contentId",contentId);
      envWrap("content",content);
      String mapKey=(String)node.get("mapKey");
      envWrap("mapKey",mapKey);
      envWrap("subContentDataResourceView",null);
      List globalNodeTrail=(List)templateContext.get("globalNodeTrail");
      String contentIdEnd=null;
      String contentIdStart=null;
      if (globalNodeTrail != null) {
        Map ndEnd=(Map)globalNodeTrail.get(globalNodeTrail.size() - 1);
        contentIdEnd=(String)ndEnd.get("contentId");
        Map ndStart=(Map)nodeTrail.get(0);
        contentIdStart=(String)ndStart.get("contentId");
      }
 else {
        globalNodeTrail=FastList.newInstance();
      }
      boolean bIdEnd=UtilValidate.isNotEmpty(contentIdEnd);
      boolean bIdStart=UtilValidate.isNotEmpty(contentIdStart);
      boolean bEquals=contentIdStart.equals(contentIdEnd);
      if (bIdEnd && bIdStart && bEquals) {
        List subList=nodeTrail.subList(1,sz);
        globalNodeTrail.addAll(subList);
      }
 else {
        globalNodeTrail.addAll(nodeTrail);
      }
      int indentSz=globalNodeTrail.size();
      envWrap("indent",Integer.valueOf(indentSz));
      String trailCsv=ContentWorker.nodeTrailToCsv(globalNodeTrail);
      envWrap("nodeTrailCsv",trailCsv);
      envWrap("globalNodeTrail",globalNodeTrail);
    }
    public void envWrap(    String varName,    Object obj){
      templateRoot.put(varName,obj);
      env.setVariable(varName,FreeMarkerWorker.autoWrap(obj,env));
    }
  }
;
}
