{
  HttpSolrClient client=null;
  Map<String,Object> result;
  GenericDelegator delegator=(GenericDelegator)dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String solrIndexName=(String)context.get("indexName");
  Boolean treatConnectErrorNonFatal=(Boolean)context.get("treatConnectErrorNonFatal");
  try {
    client=SolrUtil.getInstance().getHttpSolrClient(solrIndexName);
    List<Map<String,Object>> solrDocs=new ArrayList<Map<String,Object>>();
    List<GenericValue> products=delegator.findList("Product",null,null,null,null,true);
    int numDocs=0;
    if (products != null) {
      numDocs=products.size();
    }
    Debug.logInfo("Solr: Clearing solr index and rebuilding with " + numDocs + " found products",module);
    Iterator<GenericValue> productIterator=products.iterator();
    while (productIterator.hasNext()) {
      GenericValue product=productIterator.next();
      Map<String,Object> dispatchContext=ProductUtil.getProductContent(product,dctx,context);
      solrDocs.add(dispatchContext);
    }
    client.deleteByQuery("*:*");
    client.commit();
    Map<String,Object> runResult=dispatcher.runSync("addListToSolrIndex",UtilMisc.toMap("fieldList",solrDocs,"userLogin",userLogin,"locale",locale,"indexName",solrIndexName,"treatConnectErrorNonFatal",treatConnectErrorNonFatal));
    String runMsg=ServiceUtil.getErrorMessage(runResult);
    if (UtilValidate.isEmpty(runMsg)) {
      runMsg=null;
    }
    if (ServiceUtil.isError(runResult)) {
      result=ServiceUtil.returnError(runMsg);
    }
 else     if (ServiceUtil.isFailure(runResult)) {
      result=ServiceUtil.returnFailure(runMsg);
    }
 else {
      final String statusMsg=UtilProperties.getMessage(resource,"SolrClearedSolrIndexAndReindexedDocuments",UtilMisc.toMap("numDocs",numDocs),locale);
      result=ServiceUtil.returnSuccess(statusMsg);
    }
  }
 catch (  MalformedURLException e) {
    Debug.logError(e,e.getMessage(),module);
    result=ServiceUtil.returnError(e.toString());
  }
catch (  SolrServerException e) {
    if (e.getCause() != null && e.getCause() instanceof ConnectException) {
      final String statusStr=UtilProperties.getMessage(resource,"SolrFailureConnectingToSolrServerToRebuildIndex",locale);
      if (Boolean.TRUE.equals(treatConnectErrorNonFatal)) {
        Debug.logWarning(e,"Solr: " + statusStr,module);
        result=ServiceUtil.returnFailure(statusStr);
      }
 else {
        Debug.logError(e,"Solr: " + statusStr,module);
        result=ServiceUtil.returnError(statusStr);
      }
    }
 else {
      Debug.logError(e,e.getMessage(),module);
      result=ServiceUtil.returnError(e.toString());
    }
  }
catch (  IOException e) {
    Debug.logError(e,e.getMessage(),module);
    result=ServiceUtil.returnError(e.toString());
  }
catch (  ServiceAuthException e) {
    Debug.logError(e,e.getMessage(),module);
    result=ServiceUtil.returnError(e.toString());
  }
catch (  ServiceValidationException e) {
    Debug.logError(e,e.getMessage(),module);
    result=ServiceUtil.returnError(e.toString());
  }
catch (  GenericServiceException e) {
    Debug.logError(e,e.getMessage(),module);
    result=ServiceUtil.returnError(e.toString());
  }
catch (  Exception e) {
    Debug.logError(e,e.getMessage(),module);
    result=ServiceUtil.returnError(e.toString());
  }
 finally {
    if (client != null) {
      try {
        client.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return result;
}
