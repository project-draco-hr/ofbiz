{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  String requestPath=null;
  String contextUri=null;
  if (httpRequest.getAttribute(FORWARDED_FROM_SERVLET) == null) {
    String allowedPath=config.getInitParameter("allowedPaths");
    String redirectPath=config.getInitParameter("redirectPath");
    String errorCode=config.getInitParameter("errorCode");
    List<String> allowList=null;
    if ((allowList=StringUtil.split(allowedPath,":")) != null) {
      allowList.add("/");
      allowList.add("");
    }
    if (debug)     Debug.logInfo("[Domain]: " + httpRequest.getServerName() + " [Request]: "+ httpRequest.getRequestURI(),module);
    requestPath=httpRequest.getServletPath();
    if (requestPath == null)     requestPath="";
    if (requestPath.lastIndexOf("/") > 0) {
      if (requestPath.indexOf("/") == 0) {
        requestPath="/" + requestPath.substring(1,requestPath.indexOf("/",1));
      }
 else {
        requestPath=requestPath.substring(1,requestPath.indexOf("/"));
      }
    }
    String requestInfo=httpRequest.getServletPath();
    if (requestInfo == null)     requestInfo="";
    if (requestInfo.lastIndexOf("/") >= 0) {
      requestInfo=requestInfo.substring(0,requestInfo.lastIndexOf("/")) + "/*";
    }
    StringBuilder contextUriBuffer=new StringBuilder();
    if (httpRequest.getContextPath() != null) {
      contextUriBuffer.append(httpRequest.getContextPath());
    }
    if (httpRequest.getServletPath() != null) {
      contextUriBuffer.append(httpRequest.getServletPath());
    }
    if (httpRequest.getPathInfo() != null) {
      contextUriBuffer.append(httpRequest.getPathInfo());
    }
    contextUri=contextUriBuffer.toString();
    if (Debug.verboseOn()) {
      if (allowList != null) {
        for (        String allow : allowList) {
          Debug.logVerbose("[Allow]: " + allow,module);
        }
      }
      Debug.logVerbose("[Request path]: " + requestPath,module);
      Debug.logVerbose("[Request info]: " + requestInfo,module);
      Debug.logVerbose("[Servlet path]: " + httpRequest.getServletPath(),module);
    }
    if (allowList != null && (!allowList.contains(requestPath) && !allowList.contains(requestInfo) && !allowList.contains(httpRequest.getServletPath()))) {
      String filterMessage="[Filtered request]: " + contextUri;
      if (redirectPath == null) {
        int error=404;
        if (UtilValidate.isNotEmpty(errorCode)) {
          try {
            error=Integer.parseInt(errorCode);
          }
 catch (          NumberFormatException nfe) {
            Debug.logWarning(nfe,"Error code specified would not parse to Integer : " + errorCode,module);
          }
        }
        filterMessage=filterMessage + " (" + error+ ")";
        httpResponse.sendError(error,contextUri);
        request.setAttribute("filterRequestUriError",contextUri);
      }
 else {
        filterMessage=filterMessage + " (" + redirectPath+ ")";
        if (!redirectPath.toLowerCase().startsWith("http")) {
          redirectPath=httpRequest.getContextPath() + redirectPath;
        }
        httpResponse.sendRedirect(redirectPath);
      }
      Debug.logWarning(filterMessage,module);
      return;
    }
  }
  setCharacterEncoding(httpRequest);
  setAttributesFromRequestBody(httpRequest);
  boolean useMultitenant=EntityUtil.isMultiTenantEnabled();
  if (useMultitenant) {
    String serverName=httpRequest.getServerName();
    try {
      Delegator delegator=getDelegator(config.getServletContext());
      Delegator baseDelegator=DelegatorFactory.getDelegator(delegator.getDelegatorBaseName());
      GenericValue tenantDomainName=EntityQuery.use(baseDelegator).from("TenantDomainName").where("domainName",serverName).queryOne();
      String tenantId=null;
      if (UtilValidate.isNotEmpty(tenantDomainName)) {
        tenantId=tenantDomainName.getString("tenantId");
      }
      if (UtilValidate.isEmpty(tenantId)) {
        tenantId=(String)httpRequest.getAttribute("userTenantId");
      }
      if (UtilValidate.isEmpty(tenantId)) {
        tenantId=(String)httpRequest.getParameter("userTenantId");
      }
      if (UtilValidate.isNotEmpty(tenantId)) {
        if (UtilValidate.isNotEmpty(requestPath) && requestPath.equals(contextUri)) {
          GenericValue tenant=EntityQuery.use(baseDelegator).from("Tenant").where("tenantId",tenantId).queryOne();
          String initialPath=tenant.getString("initialPath");
          if (UtilValidate.isNotEmpty(initialPath) && !"/".equals(initialPath)) {
            ((HttpServletResponse)response).sendRedirect(initialPath);
            return;
          }
        }
        String tenantDelegatorName=delegator.getDelegatorBaseName() + "#" + tenantId;
        httpRequest.getSession().setAttribute("delegatorName",tenantDelegatorName);
        delegator=DelegatorFactory.getDelegator(tenantDelegatorName);
        config.getServletContext().setAttribute("delegator",delegator);
        config.getServletContext().setAttribute("security",null);
        config.getServletContext().setAttribute("dispatcher",null);
        Security security=getSecurity();
        LocalDispatcher dispatcher=getDispatcher(config.getServletContext());
        request.setAttribute("dispatcher",dispatcher);
        request.setAttribute("security",security);
        request.setAttribute("userTenantId",tenantId);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Unable to get Tenant",module);
    }
  }
}
