{
  try {
    Map<String,Object> context=methodContext.getEnvMap();
    GenericDelegator delegator=methodContext.getDelegator();
    String entityName=this.entityNameExdr.expandString(context);
    String delegatorName=this.delegatorNameExdr.expandString(context);
    if (delegatorName != null && delegatorName.length() > 0) {
      delegator=DelegatorFactory.getGenericDelegator(delegatorName);
    }
    ModelEntity modelEntity=delegator.getModelEntity(entityName);
    EntityCondition whereEntityCondition=null;
    if (this.whereCondition != null) {
      whereEntityCondition=this.whereCondition.createCondition(context,modelEntity,delegator.getModelFieldTypeReader(modelEntity));
    }
    EntityCondition havingEntityCondition=null;
    if (this.havingCondition != null) {
      havingEntityCondition=this.havingCondition.createCondition(context,modelEntity,delegator.getModelFieldTypeReader(modelEntity));
    }
    long count=delegator.findCountByCondition(entityName,whereEntityCondition,havingEntityCondition,null);
    this.countAcsr.put(context,count);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process: "+ e.getMessage();
    if (methodContext.getMethodType() == MethodContext.EVENT) {
      methodContext.putEnv(simpleMethod.getEventErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
    }
 else     if (methodContext.getMethodType() == MethodContext.SERVICE) {
      methodContext.putEnv(simpleMethod.getServiceErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
    }
    return false;
  }
  return true;
}
