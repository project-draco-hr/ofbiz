{
  GenericDelegator delegator=dctx.getDelegator();
  PackingSession session=(PackingSession)context.get("packingSession");
  Locale locale=(Locale)context.get("locale");
  Map<String,String> packageWeights=UtilGenerics.checkMap(context.get("packageWeights"));
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  String invoiceId=(String)context.get("invoiceId");
  String productStoreId=(String)context.get("productStoreId");
  String pickerPartyId=(String)context.get("pickerPartyId");
  String carrierPartyId=(String)context.get("carrierPartyId");
  String carrierRoleTypeId=(String)context.get("carrierRoleTypeId");
  String shippingContactMechId=(String)context.get("shippingContactMechId");
  String shipmentMethodTypeId=(String)context.get("shipmentMethodTypeId");
  String dimensionUomId=(String)context.get("dimensionUomId");
  String weightUomId=(String)context.get("weightUomId");
  Boolean forceComplete=(Boolean)context.get("forceComplete");
  String shipmentCostEstimateForShipGroup=(String)context.get("shipmentCostEstimateForShipGroup");
  BigDecimal estimatedShipCost=new BigDecimal(shipmentCostEstimateForShipGroup);
  BigDecimal doEstimates=new BigDecimal(UtilProperties.getPropertyValue("shipment.properties","shipment.default.cost.actual_over_estimated_percent_allowed","10"));
  Map<String,Object> response=FastMap.newInstance();
  BigDecimal diffInShipCostInPerc=ZERO;
  BigDecimal shippableWeight=setSessionPackageWeights(session,packageWeights);
  BigDecimal newEstimatedShipCost=session.getShipmentCostEstimate(shippingContactMechId,shipmentMethodTypeId,carrierPartyId,carrierRoleTypeId,productStoreId,null,null,shippableWeight,null);
  session.setAdditionalShippingCharge(newEstimatedShipCost);
  session.setDimensionUomId(dimensionUomId);
  session.setWeightUomId(weightUomId);
  session.setPickerPartyId(pickerPartyId);
  session.setShipmentId(shipmentId);
  session.setInvoiceId(invoiceId);
  try {
    session.checkPackedQty(orderId,locale);
    FastList<GenericValue> shipments=(FastList)delegator.findByAnd("Shipment",UtilMisc.toMap("primaryOrderId",orderId,"statusId","SHIPMENT_PACKED"));
    for (    GenericValue shipment : shipments) {
      BigDecimal additionalShippingCharge=shipment.getBigDecimal("additionalShippingCharge");
      if (UtilValidate.isNotEmpty(additionalShippingCharge)) {
        newEstimatedShipCost=newEstimatedShipCost.add(shipment.getBigDecimal("additionalShippingCharge"));
      }
    }
    diffInShipCostInPerc=(((newEstimatedShipCost.subtract(estimatedShipCost)).divide(estimatedShipCost,2,rounding)).multiply(new BigDecimal(100))).abs();
    if (doEstimates.compareTo(diffInShipCostInPerc) == -1) {
      response.put("showWarningForm",true);
    }
 else {
      if (forceComplete == null) {
        forceComplete=Boolean.FALSE;
      }
      try {
        shipmentId=session.complete(forceComplete,orderId,locale);
      }
 catch (      GeneralException e) {
        return ServiceUtil.returnError(e.getMessage(),e.getMessageList());
      }
      if (UtilValidate.isEmpty(shipmentId)) {
        response=ServiceUtil.returnError(UtilProperties.getMessage("ProductErrorUiLabels","ProductErrorNoItemsCurrentlySetToBeShippedCannotComplete",locale));
      }
 else {
        response=ServiceUtil.returnSuccess(UtilProperties.getMessage("ProductUiLabels","FacilityShipmentCreatedAndMarkedAsPacked",UtilMisc.toMap("shipmentId",shipmentId),locale));
      }
      response.put("shipmentId",shipmentId);
      response.put("showWarningForm",false);
    }
  }
 catch (  GeneralException e) {
    return ServiceUtil.returnError(e.getMessage(),e.getMessageList());
  }
  return response;
}
