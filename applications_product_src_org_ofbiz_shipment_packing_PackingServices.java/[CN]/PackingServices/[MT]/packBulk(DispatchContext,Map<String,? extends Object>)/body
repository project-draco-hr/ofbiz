{
  PackingSession session=(PackingSession)context.get("packingSession");
  String orderId=(String)context.get("orderId");
  String shipGroupSeqId=(String)context.get("shipGroupSeqId");
  Boolean updateQuantity=(Boolean)context.get("updateQuantity");
  if (updateQuantity == null) {
    updateQuantity=Boolean.FALSE;
  }
  String instructions=(String)context.get("handlingInstructions");
  session.setHandlingInstructions(instructions);
  String pickerPartyId=(String)context.get("pickerPartyId");
  session.setPickerPartyId(pickerPartyId);
  Map<String,?> selInfo=UtilGenerics.checkMap(context.get("selInfo"));
  Map<String,String> iteInfo=UtilGenerics.checkMap(context.get("iteInfo"));
  Map<String,String> prdInfo=UtilGenerics.checkMap(context.get("prdInfo"));
  Map<String,String> qtyInfo=UtilGenerics.checkMap(context.get("qtyInfo"));
  Map<String,String> pkgInfo=UtilGenerics.checkMap(context.get("pkgInfo"));
  Map<String,String> wgtInfo=UtilGenerics.checkMap(context.get("wgtInfo"));
  Map<String,String> numPackagesInfo=UtilGenerics.checkMap(context.get("numPackagesInfo"));
  Map<String,String> boxTypeInfo=UtilGenerics.checkMap(context.get("boxTypeInfo"));
  if (selInfo != null) {
    for (    String rowKey : selInfo.keySet()) {
      String orderItemSeqId=iteInfo.get(rowKey);
      String prdStr=prdInfo.get(rowKey);
      if (UtilValidate.isEmpty(prdStr)) {
        prdStr=null;
      }
      String pkgStr=pkgInfo.get(rowKey);
      String qtyStr=qtyInfo.get(rowKey);
      String wgtStr=wgtInfo.get(rowKey);
      String boxType=boxTypeInfo.get(rowKey);
      session.setShipmentBoxTypeId(boxType);
      Debug.log("Item: " + orderItemSeqId + " / Product: "+ prdStr+ " / Quantity: "+ qtyStr+ " /  Package: "+ pkgStr+ " / Weight: "+ wgtStr,module);
      String[] quantities;
      String[] packages;
      String[] weights;
      if (pkgStr.indexOf(",") != -1) {
        packages=pkgStr.split(",");
      }
 else {
        packages=new String[]{pkgStr};
      }
      if (packages == null || packages.length == 0) {
        return ServiceUtil.returnError("No packages defined for processing.");
      }
      if (qtyStr == null) {
        quantities=new String[packages.length];
        for (int p=0; p < packages.length; p++) {
          quantities[p]=qtyInfo.get(rowKey + ":" + packages[p]);
        }
        if (quantities.length != packages.length) {
          return ServiceUtil.returnError("Packages and quantities do not match.");
        }
      }
 else {
        quantities=new String[]{qtyStr};
      }
      if (UtilValidate.isEmpty(wgtStr))       wgtStr="0";
      weights=new String[]{wgtStr};
      for (int p=0; p < packages.length; p++) {
        BigDecimal quantity;
        int packageSeq;
        BigDecimal weightSeq;
        try {
          quantity=new BigDecimal(quantities[p]);
          packageSeq=Integer.parseInt(packages[p]);
          weightSeq=new BigDecimal(weights[p]);
        }
 catch (        Exception e) {
          return ServiceUtil.returnError(e.getMessage());
        }
        try {
          String numPackagesStr=numPackagesInfo.get(rowKey);
          int numPackages=1;
          if (numPackagesStr != null) {
            try {
              numPackages=Integer.parseInt(numPackagesStr);
              if (numPackages < 1) {
                numPackages=1;
              }
            }
 catch (            NumberFormatException nex) {
            }
          }
          for (int numPackage=0; numPackage < numPackages; numPackage++) {
            session.addOrIncreaseLine(orderId,orderItemSeqId,shipGroupSeqId,prdStr,quantity,packageSeq + numPackage,weightSeq,updateQuantity.booleanValue());
          }
        }
 catch (        GeneralException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
