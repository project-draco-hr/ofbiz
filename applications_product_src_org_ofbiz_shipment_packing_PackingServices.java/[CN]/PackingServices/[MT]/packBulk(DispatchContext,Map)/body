{
  PackingSession session=(PackingSession)context.get("packingSession");
  String orderId=(String)context.get("orderId");
  String shipGroupSeqId=(String)context.get("shipGroupSeqId");
  String instructions=(String)context.get("handlingInstructions");
  session.setHandlingInstructions(instructions);
  Map prdInfo=(Map)context.get("prdInfo");
  Map qtyInfo=(Map)context.get("qtyInfo");
  Map pkgInfo=(Map)context.get("pkgInfo");
  Map selInfo=(Map)context.get("selInfo");
  if (selInfo != null) {
    Iterator i=selInfo.keySet().iterator();
    while (i.hasNext()) {
      String orderItemSeqId=(String)i.next();
      String qtyStr=(String)qtyInfo.get(orderItemSeqId);
      String pkgStr=(String)pkgInfo.get(orderItemSeqId);
      String prdStr=(String)prdInfo.get(orderItemSeqId);
      if (UtilValidate.isEmpty(prdStr)) {
        prdStr=null;
      }
      Debug.log("Item: " + orderItemSeqId + " / Product: "+ prdStr+ " / Quantity: "+ qtyStr+ " /  Package: "+ pkgStr,module);
      double quantity=0;
      int packageSeq=0;
      try {
        quantity=Double.parseDouble(qtyStr);
        packageSeq=Integer.parseInt(pkgStr);
      }
 catch (      Exception e) {
        return ServiceUtil.returnError(e.getMessage());
      }
      try {
        session.addOrIncreaseLine(orderId,orderItemSeqId,shipGroupSeqId,prdStr,quantity,packageSeq);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
