{
  PackingSession session=(PackingSession)context.get("packingSession");
  String orderId=(String)context.get("orderId");
  String shipGroupSeqId=(String)context.get("shipGroupSeqId");
  Boolean updateQuantity=(Boolean)context.get("updateQuantity");
  if (updateQuantity == null) {
    updateQuantity=Boolean.FALSE;
  }
  String instructions=(String)context.get("handlingInstructions");
  session.setHandlingInstructions(instructions);
  String pickerPartyId=(String)context.get("pickerPartyId");
  session.setPickerPartyId(pickerPartyId);
  Map selInfo=(Map)context.get("selInfo");
  Map prdInfo=(Map)context.get("prdInfo");
  Map qtyInfo=(Map)context.get("qtyInfo");
  Map pkgInfo=(Map)context.get("pkgInfo");
  if (selInfo != null) {
    Iterator i=selInfo.keySet().iterator();
    while (i.hasNext()) {
      String orderItemSeqId=(String)i.next();
      String prdStr=(String)prdInfo.get(orderItemSeqId);
      if (UtilValidate.isEmpty(prdStr)) {
        prdStr=null;
      }
      String pkgStr=(String)pkgInfo.get(orderItemSeqId);
      String qtyStr=(String)qtyInfo.get(orderItemSeqId);
      Debug.log("Item: " + orderItemSeqId + " / Product: "+ prdStr+ " / Quantity: "+ qtyStr+ " /  Package: "+ pkgStr,module);
      String[] quantities;
      String[] packages;
      if (pkgStr.indexOf(",") != -1) {
        packages=pkgStr.split(",");
      }
 else {
        packages=new String[]{pkgStr};
      }
      if (packages == null || packages.length == 0) {
        return ServiceUtil.returnError("No packages defined for processing.");
      }
      if (qtyStr == null) {
        quantities=new String[packages.length];
        for (int p=0; p < packages.length; p++) {
          quantities[p]=(String)qtyInfo.get(orderItemSeqId + ":" + packages[p]);
        }
        if (quantities.length != packages.length) {
          return ServiceUtil.returnError("Packages and quantities do not match.");
        }
      }
 else {
        quantities=new String[]{qtyStr};
      }
      for (int p=0; p < packages.length; p++) {
        double quantity;
        int packageSeq;
        try {
          quantity=Double.parseDouble(quantities[p]);
          packageSeq=Integer.parseInt(packages[p]);
        }
 catch (        Exception e) {
          return ServiceUtil.returnError(e.getMessage());
        }
        try {
          session.addOrIncreaseLine(orderId,orderItemSeqId,shipGroupSeqId,prdStr,quantity,packageSeq,updateQuantity.booleanValue());
        }
 catch (        GeneralException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
