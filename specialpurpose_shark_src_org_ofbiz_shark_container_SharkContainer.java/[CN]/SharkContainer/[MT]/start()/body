{
  ContainerConfig.Container cfg=ContainerConfig.getContainer("shark-container",configFile);
  ContainerConfig.Container.Property dispatcherProp=cfg.getProperty("dispatcher-name");
  ContainerConfig.Container.Property delegatorProp=cfg.getProperty("delegator-name");
  ContainerConfig.Container.Property adminProp=cfg.getProperty("admin-user");
  ContainerConfig.Container.Property adminPassProp=cfg.getProperty("admin-pass");
  ContainerConfig.Container.Property engineName=cfg.getProperty("engine-name");
  ContainerConfig.Container.Property iiopHost=cfg.getProperty("iiop-host");
  ContainerConfig.Container.Property iiopPort=cfg.getProperty("iiop-port");
  if (delegatorProp == null || delegatorProp.value == null || delegatorProp.value.length() == 0) {
    throw new ContainerException("Invalid delegator-name defined in container configuration");
  }
  if (dispatcherProp == null || dispatcherProp.value == null || dispatcherProp.value.length() == 0) {
    throw new ContainerException("Invalid dispatcher-name defined in container configuration");
  }
  if (adminProp == null || adminProp.value == null || adminProp.value.length() == 0) {
    throw new ContainerException("Invalid admin-user defined in container configuration");
  }
  if (adminPassProp == null || adminPassProp.value == null || adminPassProp.value.length() == 0) {
    throw new ContainerException("Invalid admin-pass defined in container configuration");
  }
  if (engineName == null || engineName.value == null || engineName.value.length() == 0) {
    throw new ContainerException("Invalid engine-name defined in container configuration");
  }
  SharkContainer.delegator=GenericDelegator.getGenericDelegator(delegatorProp.value);
  try {
    SharkContainer.dispatcher=GenericDispatcher.getLocalDispatcher(dispatcherProp.value,SharkContainer.delegator);
  }
 catch (  GenericServiceException e) {
    throw new ContainerException(e);
  }
  try {
    SharkContainer.adminUser=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId",adminProp.value));
  }
 catch (  GenericEntityException e) {
    throw new ContainerException(e);
  }
  if (SharkContainer.adminUser == null) {
    Debug.logWarning("Invalid admin-user; UserLogin not found not starting Shark!",module);
    return false;
  }
  SharkContainer.adminPass=adminPassProp.value;
  Properties props=UtilProperties.getProperties("shark.properties");
  Shark.configure(props);
  String java_home=System.getenv("JAVA_HOME");
  if ((java_home == null) && (java_home.length() > 0)) {
    Debug.logError("OUT :Java home variable is undefined",module);
  }
 else   if (iiopHost != null && iiopHost.value != null && iiopHost.value.length() > 0) {
    if (iiopPort != null && iiopPort.value != null && iiopPort.value.length() > 0) {
      try {
        p=Runtime.getRuntime().exec(java_home + "\\" + "bin\\tnameserv"+ " -ORBInitialPort "+ iiopPort.value);
        Thread.sleep(5000);
      }
 catch (      IOException e) {
        Debug.logError("OUT : Could not start SERVER",module);
        e.printStackTrace();
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
 else     Debug.logError("OUT : Error in iiop port property",module);
  }
 else   Debug.logError("OUT : Error in iiop host property",module);
  SharkContainer.shark=Shark.getInstance();
  Debug.logInfo("Started Shark workflow service",module);
  if (iiopHost != null && iiopHost.value != null && iiopHost.value.length() > 0) {
    if (iiopPort != null && iiopPort.value != null && iiopPort.value.length() > 0) {
      try {
        corbaServer=new SharkCORBAServer(engineName.value,iiopHost.value,iiopPort.value,shark);
        orbThread=new Thread(this);
        orbThread.setDaemon(false);
        orbThread.setName(this.getClass().getName());
        orbThread.start();
        Debug.logInfo("Started Shark CORBA service",module);
      }
 catch (      IllegalArgumentException e) {
        throw new ContainerException(e);
      }
catch (      GeneralRuntimeException e) {
        throw new ContainerException(e);
      }
    }
  }
  ExecutionAdministration exAdmin=SharkContainer.getAdminInterface().getExecutionAdministration();
  try {
    exAdmin.connect(adminUser.getString("userLoginId"),adminUser.getString("currentPassword"),null,null);
    exAdmin.reevaluateAssignments();
    exAdmin.disconnect();
  }
 catch (  ConnectFailed e) {
    String errMsg="Shark Connection error (if it is a password wrong error, check the admin-pass property in the container config file, probably ofbiz-containers.xml): " + e.toString();
    throw new ContainerException(errMsg,e);
  }
catch (  NotConnected e) {
    throw new ContainerException(e);
  }
catch (  BaseException e) {
    throw new ContainerException(e);
  }
  return true;
}
