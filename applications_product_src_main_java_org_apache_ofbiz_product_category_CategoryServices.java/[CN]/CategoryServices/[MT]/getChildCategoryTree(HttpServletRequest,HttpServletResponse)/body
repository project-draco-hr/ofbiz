{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String productCategoryId=request.getParameter("productCategoryId");
  String isCatalog=request.getParameter("isCatalog");
  String isCategoryType=request.getParameter("isCategoryType");
  String onclickFunction=request.getParameter("onclickFunction");
  String additionParam=request.getParameter("additionParam");
  String hrefString=request.getParameter("hrefString");
  String hrefString2=request.getParameter("hrefString2");
  String entityName=null;
  String primaryKeyName=null;
  if (isCatalog.equals("true")) {
    entityName="ProdCatalog";
    primaryKeyName="prodCatalogId";
  }
 else {
    entityName="ProductCategory";
    primaryKeyName="productCategoryId";
  }
  List categoryList=new LinkedList();
  List<GenericValue> childOfCats;
  List<String> sortList=org.apache.ofbiz.base.util.UtilMisc.toList("sequenceNum","title");
  try {
    GenericValue category=EntityQuery.use(delegator).from(entityName).where(primaryKeyName,productCategoryId).queryOne();
    if (UtilValidate.isNotEmpty(category)) {
      if (isCatalog.equals("true") && isCategoryType.equals("false")) {
        CategoryWorker.getRelatedCategories(request,"ChildCatalogList",CatalogWorker.getCatalogTopCategoryId(request,productCategoryId),true);
        childOfCats=EntityUtil.filterByDate((List<GenericValue>)request.getAttribute("ChildCatalogList"));
      }
 else       if (isCatalog.equals("false") && isCategoryType.equals("false")) {
        childOfCats=EntityQuery.use(delegator).from("ProductCategoryRollupAndChild").where("parentProductCategoryId",productCategoryId).filterByDate().queryList();
      }
 else {
        childOfCats=EntityQuery.use(delegator).from("ProdCatalogCategory").where("prodCatalogId",productCategoryId).filterByDate().queryList();
      }
      if (UtilValidate.isNotEmpty(childOfCats)) {
        for (        GenericValue childOfCat : childOfCats) {
          Object catId=null;
          String catNameField=null;
          catId=childOfCat.get("productCategoryId");
          catNameField="CATEGORY_NAME";
          Map josonMap=new HashMap();
          List<GenericValue> childList=null;
          childList=EntityQuery.use(delegator).from("ProductCategoryRollup").where("parentProductCategoryId",catId).filterByDate().queryList();
          GenericValue cate=EntityQuery.use(delegator).from("ProductCategory").where("productCategoryId",catId).queryOne();
          if (UtilValidate.isNotEmpty(childList)) {
            josonMap.put("state","closed");
          }
          Map dataMap=new HashMap();
          Map dataAttrMap=new HashMap();
          CategoryContentWrapper categoryContentWrapper=new CategoryContentWrapper(cate,request);
          String title=null;
          if (UtilValidate.isNotEmpty(categoryContentWrapper.get(catNameField,"html"))) {
            title=new StringBuffer(categoryContentWrapper.get(catNameField,"html").toString()).append(" [").append(catId).append("]").toString();
            dataMap.put("title",title);
          }
 else {
            title=catId.toString();
            dataMap.put("title",catId);
          }
          dataAttrMap.put("onClick",new StringBuffer(onclickFunction).append("('").append(catId).append(additionParam).append("')").toString());
          String hrefStr=hrefString + catId;
          if (UtilValidate.isNotEmpty(hrefString2)) {
            hrefStr=hrefStr + hrefString2;
          }
          dataAttrMap.put("href",hrefStr);
          dataMap.put("attr",dataAttrMap);
          josonMap.put("data",dataMap);
          Map attrMap=new HashMap();
          attrMap.put("id",catId);
          attrMap.put("isCatalog",false);
          attrMap.put("rel","CATEGORY");
          josonMap.put("attr",attrMap);
          josonMap.put("sequenceNum",childOfCat.get("sequenceNum"));
          josonMap.put("title",title);
          categoryList.add(josonMap);
        }
        List<Map<Object,Object>> sortedCategoryList=UtilMisc.sortMaps(categoryList,sortList);
        request.setAttribute("treeData",sortedCategoryList);
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return "error";
  }
  return "success";
}
