{
  ResourceBundle res=ResourceBundle.getBundle("cache");
  if (res != null) {
    try {
      String value=getPropertyParam(res,propNames,"maxSize");
      if (UtilValidate.isNotEmpty(value)) {
        this.maxSize=Integer.parseInt(value);
      }
    }
 catch (    Exception e) {
      Debug.logWarning(e,"Error getting maxSize value from cache.properties file for propNames: " + propNames,module);
    }
    try {
      String value=getPropertyParam(res,propNames,"maxInMemory");
      if (UtilValidate.isNotEmpty(value)) {
        this.maxInMemory=Integer.parseInt(value);
      }
    }
 catch (    Exception e) {
      Debug.logWarning(e,"Error getting maxInMemory value from cache.properties file for propNames: " + propNames,module);
    }
    try {
      String value=getPropertyParam(res,propNames,"expireTime");
      if (UtilValidate.isNotEmpty(value)) {
        this.expireTime=Long.parseLong(value);
      }
    }
 catch (    Exception e) {
      Debug.logWarning(e,"Error getting expireTime value from cache.properties file for propNames: " + propNames,module);
    }
    try {
      String value=getPropertyParam(res,propNames,"useSoftReference");
      if (value != null) {
        useSoftReference="true".equals(value);
      }
    }
 catch (    Exception e) {
      Debug.logWarning(e,"Error getting useSoftReference value from cache.properties file for propNames: " + propNames,module);
    }
    try {
      String value=getPropertyParam(res,propNames,"useFileSystemStore");
      if (value != null) {
        useFileSystemStore="true".equals(value);
      }
    }
 catch (    Exception e) {
      Debug.logWarning(e,"Error getting useFileSystemStore value from cache.properties file for propNames: " + propNames,module);
    }
    try {
      String value=res.getString("cache.file.store");
      if (value != null) {
        fileStore=value;
      }
    }
 catch (    MissingResourceException e) {
    }
catch (    Exception e) {
      Debug.logWarning(e,"Error getting cache.file.store value from cache.properties file for propNames: " + propNames,module);
    }
  }
}
