{
  ValueAndState<T> container;
  ValueAndState<T> nextContainer=null;
  do {
    container=getContainer();
switch (container.state) {
case INVALID:
      nextContainer=container.refresh(State.GENERATE);
    break;
case REGENERATING:
  nextContainer=container.refresh(State.REGEN);
break;
case GENERATING:
nextContainer=container.refresh(State.GENERATE);
break;
case ERROR_INITIAL:
nextContainer=container.refresh(State.INVALID);
break;
case ERROR:
case VALID:
nextContainer=container.refresh(getForeground() ? State.GENERATE : State.REGEN);
break;
case REGEN:
case GENERATE:
return;
}
}
 while (!objectAccessor.compareAndSet(this,container,nextContainer));
cancelFuture(container);
}
