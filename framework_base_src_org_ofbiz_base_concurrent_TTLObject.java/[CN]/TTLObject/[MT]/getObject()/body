{
  try {
    ValueAndState<T> container;
    ValueAndState<T> nextContainer=null;
    do {
      do {
        container=getContainer();
        if (container.state == State.ERROR || container.state == State.ERROR_INITIAL) {
          throw container.t;
        }
 else         if (container.state == State.VALID) {
          return container.getValue();
        }
 else         if (container.state == State.INVALID) {
          nextContainer=container.submit(getInitial(),State.GENERATING_INITIAL);
        }
 else         if (container.state == State.SET) {
          nextContainer=container.valid(container.getValue());
        }
 else         if (container.state == State.REGENERATING || container.state == State.GENERATING || container.state == State.GENERATING_INITIAL) {
          if (container.state == State.REGENERATING && !container.future.isDone()) {
            return container.getValue();
          }
          try {
            try {
              nextContainer=container.valid(container.future.get());
            }
 catch (            ExecutionException e) {
              throw e.getCause();
            }
          }
 catch (          Throwable t) {
            nextContainer=container.error(t);
          }
        }
 else         if (container.state == State.REGEN) {
          nextContainer=container.submit(container.getValue(),State.REGENERATING);
        }
 else {
          nextContainer=container.submit(container.getValue(),State.GENERATING);
        }
      }
 while (!objectAccessor.compareAndSet(this,container,nextContainer));
      if (nextContainer.state == State.GENERATING || nextContainer.state == State.GENERATING_INITIAL) {
        nextContainer.future.run();
      }
 else       if (nextContainer.state == State.REGENERATING) {
        updateExecutor.submit(nextContainer.future);
      }
 else {
        ExecutionPool.removePulse(container.pulse);
        ExecutionPool.addPulse(nextContainer.pulse);
      }
    }
 while (true);
  }
 catch (  Throwable e) {
    return ObjectException.<T>checkException(e);
  }
}
