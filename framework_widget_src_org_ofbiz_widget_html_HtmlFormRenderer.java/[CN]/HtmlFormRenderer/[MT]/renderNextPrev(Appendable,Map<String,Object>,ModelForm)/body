{
  boolean ajaxEnabled=false;
  List<ModelForm.UpdateArea> updateAreas=modelForm.getOnPaginateUpdateAreas();
  String targetService=modelForm.getPaginateTarget(context);
  if (this.javaScriptEnabled) {
    if (UtilValidate.isNotEmpty(updateAreas)) {
      ajaxEnabled=true;
    }
  }
  if (targetService == null) {
    targetService="${targetService}";
  }
  if (UtilValidate.isEmpty(targetService) && updateAreas == null) {
    Debug.logWarning("Cannot paginate because TargetService is empty for the form: " + modelForm.getName(),module);
    return;
  }
  int paginatorNumber=WidgetWorker.getPaginatorNumber(context);
  String viewIndexParam=modelForm.getMultiPaginateIndexField(context);
  String viewSizeParam=modelForm.getMultiPaginateSizeField(context);
  int viewIndex=modelForm.getViewIndex(context);
  int viewSize=modelForm.getViewSize(context);
  int listSize=modelForm.getListSize(context);
  int lowIndex=modelForm.getLowIndex(context);
  int highIndex=modelForm.getHighIndex(context);
  int actualPageSize=modelForm.getActualPageSize(context);
  if (actualPageSize >= listSize && listSize >= 0)   return;
  Map<String,String> uiLabelMap=UtilGenerics.checkMap(context.get("uiLabelMap"));
  String pageLabel="";
  String commonDisplaying="";
  if (uiLabelMap == null) {
    Debug.logWarning("Could not find uiLabelMap in context",module);
  }
 else {
    pageLabel=uiLabelMap.get("CommonPage");
    Map<String,Integer> messageMap=UtilMisc.toMap("lowCount",Integer.valueOf(lowIndex + 1),"highCount",Integer.valueOf(lowIndex + actualPageSize),"total",Integer.valueOf(listSize));
    commonDisplaying=UtilProperties.getMessage("CommonUiLabels","CommonDisplaying",messageMap,(Locale)context.get("locale"));
  }
  if (viewIndexParam.equals("viewIndex" + "_" + paginatorNumber))   viewIndexParam="VIEW_INDEX" + "_" + paginatorNumber;
  if (viewSizeParam.equals("viewSize" + "_" + paginatorNumber))   viewSizeParam="VIEW_SIZE" + "_" + paginatorNumber;
  String str=(String)context.get("_QBESTRING_");
  String queryString=UtilHttp.stripViewParamsFromQueryString(str,"" + paginatorNumber);
  HashSet<String> paramNames=new HashSet<String>();
  paramNames.add(viewIndexParam);
  paramNames.add(viewSizeParam);
  queryString=UtilHttp.stripNamedParamsFromQueryString(queryString,paramNames);
  String anchor="";
  String paginateAnchor=modelForm.getPaginateTargetAnchor();
  if (paginateAnchor != null)   anchor="#" + paginateAnchor;
  String urlPath=UtilHttp.removeQueryStringFromTarget(targetService);
  StringBuilder prepLinkBuffer=new StringBuilder();
  String prepLinkQueryString=UtilHttp.getQueryStringFromTarget(targetService);
  if (prepLinkQueryString != null) {
    prepLinkBuffer.append(prepLinkQueryString);
  }
  if (prepLinkBuffer.indexOf("?") < 0) {
    prepLinkBuffer.append("?");
  }
 else   if (prepLinkBuffer.indexOf("?",prepLinkBuffer.length() - 1) > 0) {
    prepLinkBuffer.append("&amp;");
  }
  if (!UtilValidate.isEmpty(queryString) && !queryString.equals("null")) {
    prepLinkBuffer.append(queryString).append("&amp;");
  }
  prepLinkBuffer.append(viewSizeParam).append("=").append(viewSize).append("&amp;").append(viewIndexParam).append("=");
  String prepLinkText=prepLinkBuffer.toString();
  if (ajaxEnabled) {
    prepLinkText=prepLinkText.replace("?","");
    prepLinkText=prepLinkText.replace("&amp;","&");
  }
  writer.append("<div class=\"").append(modelForm.getPaginateStyle()).append("\">");
  appendWhitespace(writer);
  writer.append(" <ul>");
  appendWhitespace(writer);
  String linkText;
  writer.append("  <li class=\"").append(modelForm.getPaginateFirstStyle());
  if (viewIndex > 0) {
    writer.append("\"><a href=\"");
    if (ajaxEnabled) {
      writer.append("javascript:ajaxUpdateAreas('").append(createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + 0 + anchor,context)).append("')");
    }
 else {
      linkText=prepLinkText + 0 + anchor;
      appendOfbizUrl(writer,urlPath + linkText);
    }
    writer.append("\">").append(modelForm.getPaginateFirstLabel(context)).append("</a>");
  }
 else {
    writer.append("-disabled\">").append(modelForm.getPaginateFirstLabel(context));
  }
  writer.append("</li>");
  appendWhitespace(writer);
  writer.append("  <li class=\"").append(modelForm.getPaginatePreviousStyle());
  if (viewIndex > 0) {
    writer.append("\"><a href=\"");
    if (ajaxEnabled) {
      writer.append("javascript:ajaxUpdateAreas('").append(createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + (viewIndex - 1) + anchor,context)).append("')");
    }
 else {
      linkText=prepLinkText + (viewIndex - 1) + anchor;
      appendOfbizUrl(writer,urlPath + linkText);
    }
    writer.append("\">").append(modelForm.getPaginatePreviousLabel(context)).append("</a>");
  }
 else {
    writer.append("-disabled\">").append(modelForm.getPaginatePreviousLabel(context));
  }
  writer.append("</li>");
  appendWhitespace(writer);
  if (listSize > 0 && this.javaScriptEnabled) {
    writer.append("  <li>").append(pageLabel).append(" <select name=\"page\" size=\"1\" onchange=\"");
    if (ajaxEnabled) {
      writer.append("javascript:ajaxUpdateAreas('").append(createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + "' + this.value",context)).append(")");
    }
 else {
      linkText=prepLinkText;
      if (linkText.startsWith("/")) {
        linkText=linkText.substring(1);
      }
      writer.append("location.href = '");
      appendOfbizUrl(writer,urlPath + linkText);
      writer.append("' + this.value;");
    }
    writer.append("\">");
    int page=0;
    for (int i=0; i < listSize; ) {
      if (page == viewIndex) {
        writer.append("<option selected value=\"");
      }
 else {
        writer.append("<option value=\"");
      }
      writer.append(Integer.toString(page));
      writer.append("\">");
      writer.append(Integer.toString(1 + page));
      writer.append("</option>");
      page++;
      i=page * viewSize;
    }
    writer.append("</select></li>");
  }
  writer.append("<li>");
  writer.append(commonDisplaying);
  writer.append("</li>");
  appendWhitespace(writer);
  writer.append("  <li class=\"").append(modelForm.getPaginateNextStyle());
  if (highIndex < listSize) {
    writer.append("\"><a href=\"");
    if (ajaxEnabled) {
      writer.append("javascript:ajaxUpdateAreas('").append(createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + (viewIndex + 1) + anchor,context)).append("')");
    }
 else {
      linkText=prepLinkText + (viewIndex + 1) + anchor;
      appendOfbizUrl(writer,urlPath + linkText);
    }
    writer.append("\">").append(modelForm.getPaginateNextLabel(context)).append("</a>");
  }
 else {
    writer.append("-disabled\">").append(modelForm.getPaginateNextLabel(context));
  }
  writer.append("</li>");
  appendWhitespace(writer);
  writer.append("  <li class=\"").append(modelForm.getPaginateLastStyle());
  if (highIndex < listSize) {
    writer.append("\"><a href=\"");
    if (ajaxEnabled) {
      writer.append("javascript:ajaxUpdateAreas('").append(createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + (listSize / viewSize) + anchor,context)).append("')");
    }
 else {
      linkText=prepLinkText + (listSize / viewSize) + anchor;
      appendOfbizUrl(writer,urlPath + linkText);
    }
    writer.append("\">").append(modelForm.getPaginateLastLabel(context)).append("</a>");
  }
 else {
    writer.append("-disabled\">").append(modelForm.getPaginateLastLabel(context));
  }
  writer.append("</li>");
  appendWhitespace(writer);
  writer.append(" </ul>");
  appendWhitespace(writer);
  writer.append("</div>");
  appendWhitespace(writer);
}
