{
  ModelFormField modelFormField=dateTimeField.getModelFormField();
  String paramName=modelFormField.getParameterName(context);
  String defaultDateTimeString=dateTimeField.getDefaultDateTimeString(context);
  Map uiLabelMap=(Map)context.get("uiLabelMap");
  if (uiLabelMap == null) {
    Debug.logWarning("Could not find uiLabelMap in context",module);
  }
  String localizedInputTitle="", localizedIconTitle="";
  boolean shortDateInput=("date".equals(dateTimeField.getType()) || "time-dropdown".equals(dateTimeField.getInputMethod()) ? true : false);
  buffer.append("<input type=\"text\"");
  appendClassNames(buffer,context,modelFormField);
  buffer.append(" name=\"");
  if ("time-dropdown".equals(dateTimeField.getInputMethod())) {
    buffer.append(UtilHttp.makeCompositeParam(paramName,"date"));
  }
 else {
    buffer.append(paramName);
  }
  buffer.append('"');
  int size=25;
  int maxlength=30;
  if (shortDateInput) {
    size=maxlength=10;
    if (uiLabelMap != null) {
      localizedInputTitle=(String)uiLabelMap.get("CommonFormatDate");
    }
  }
 else   if ("time".equals(dateTimeField.getType())) {
    size=maxlength=8;
    if (uiLabelMap != null) {
      localizedInputTitle=(String)uiLabelMap.get("CommonFormatTime");
    }
  }
 else {
    if (uiLabelMap != null) {
      localizedInputTitle=(String)uiLabelMap.get("CommonFormatDateTime");
    }
  }
  buffer.append(" title=\"");
  buffer.append(localizedInputTitle);
  buffer.append('"');
  String value=modelFormField.getEntry(context,dateTimeField.getDefaultValue(context));
  if (UtilValidate.isNotEmpty(value)) {
    if (value.length() > maxlength) {
      value=value.substring(0,maxlength);
    }
    buffer.append(" value=\"");
    buffer.append(value);
    buffer.append('"');
  }
  buffer.append(" size=\"");
  buffer.append(size);
  buffer.append('"');
  buffer.append(" maxlength=\"");
  buffer.append(maxlength);
  buffer.append('"');
  String idName=modelFormField.getIdName();
  if (UtilValidate.isNotEmpty(idName)) {
    buffer.append(" id=\"");
    buffer.append(idName);
    buffer.append('"');
  }
  buffer.append("/>");
  if (uiLabelMap != null) {
    localizedIconTitle=(String)uiLabelMap.get("CommonViewCalendar");
  }
  if (!"time".equals(dateTimeField.getType())) {
    if (shortDateInput) {
      buffer.append("<a href=\"javascript:call_cal_notime(document.");
    }
 else {
      buffer.append("<a href=\"javascript:call_cal(document.");
    }
    buffer.append(modelFormField.getModelForm().getCurrentFormName(context));
    buffer.append('.');
    if ("time-dropdown".equals(dateTimeField.getInputMethod())) {
      buffer.append(UtilHttp.makeCompositeParam(paramName,"date"));
    }
 else {
      buffer.append(paramName);
    }
    buffer.append(",'");
    buffer.append(UtilHttp.encodeBlanks(modelFormField.getEntry(context,defaultDateTimeString)));
    buffer.append("');\">");
    buffer.append("<img src=\"");
    this.appendContentUrl(buffer,"/images/cal.gif");
    buffer.append("\" width=\"16\" height=\"16\" border=\"0\" alt=\"");
    buffer.append(localizedIconTitle);
    buffer.append("\" title=\"");
    buffer.append(localizedIconTitle);
    buffer.append("\"/></a>");
  }
  if ("time-dropdown".equals(dateTimeField.getInputMethod())) {
    String className=modelFormField.getWidgetStyle();
    String classString=(className != null ? " class=\"" + className + "\" " : "");
    boolean isTwelveHour="12".equals(dateTimeField.getClock());
    Calendar cal=null;
    try {
      Timestamp defaultTimestamp=Timestamp.valueOf(modelFormField.getEntry(context,defaultDateTimeString));
      cal=Calendar.getInstance();
      cal.setTime(defaultTimestamp);
    }
 catch (    IllegalArgumentException e) {
      Debug.logWarning("Form widget field [" + paramName + "] with input-method=\"time-dropdown\" was not able to understand the default time ["+ defaultDateTimeString+ "]. The parsing error was: "+ e.getMessage(),module);
    }
    buffer.append("&nbsp;<select name=\"").append(UtilHttp.makeCompositeParam(paramName,"hour")).append("\"");
    buffer.append(classString).append(">");
    if (isTwelveHour) {
      for (int i=1; i <= 12; i++) {
        buffer.append("<option value=\"").append(i).append("\"");
        if (cal != null) {
          int hour=cal.get(Calendar.HOUR_OF_DAY);
          if (hour == 0)           hour=12;
          if (hour > 12)           hour-=12;
          if (i == hour)           buffer.append(" selected");
        }
        buffer.append(">").append(i).append("</option>");
      }
    }
 else {
      for (int i=0; i < 24; i++) {
        buffer.append("<option value=\"").append(i).append("\"");
        if (cal != null && i == cal.get(Calendar.HOUR_OF_DAY)) {
          buffer.append(" selected");
        }
        buffer.append(">").append(i).append("</option>");
      }
    }
    buffer.append("</select>:<select name=\"");
    buffer.append(UtilHttp.makeCompositeParam(paramName,"minutes")).append("\"");
    buffer.append(classString).append(">");
    for (int i=0; i < 60; i++) {
      buffer.append("<option value=\"").append(i).append("\"");
      if (cal != null && i == cal.get(Calendar.MINUTE)) {
        buffer.append(" selected");
      }
      buffer.append(">").append(i).append("</option>");
    }
    buffer.append("</select>");
    if (isTwelveHour) {
      String amSelected=((cal != null && cal.get(Calendar.AM_PM) == Calendar.AM) ? "selected" : "");
      String pmSelected=((cal != null && cal.get(Calendar.AM_PM) == Calendar.PM) ? "selected" : "");
      buffer.append("<select name=\"").append(UtilHttp.makeCompositeParam(paramName,"ampm")).append("\"");
      buffer.append(classString).append(">");
      buffer.append("<option value=\"").append("AM").append("\" ").append(amSelected).append(">AM</option>");
      buffer.append("<option value=\"").append("PM").append("\" ").append(pmSelected).append(">PM</option>");
      buffer.append("</select>");
    }
    buffer.append("<input type=\"hidden\" name=\"");
    buffer.append(UtilHttp.makeCompositeParam(paramName,"compositeType"));
    buffer.append("\" value=\"Timestamp\"/>");
  }
  this.appendTooltip(buffer,context,modelFormField);
}
