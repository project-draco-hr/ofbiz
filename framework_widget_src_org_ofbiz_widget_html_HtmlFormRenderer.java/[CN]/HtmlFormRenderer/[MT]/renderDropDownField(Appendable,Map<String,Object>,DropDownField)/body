{
  ModelFormField modelFormField=dropDownField.getModelFormField();
  ModelForm modelForm=modelFormField.getModelForm();
  ModelFormField.AutoComplete autoComplete=dropDownField.getAutoComplete();
  boolean ajaxEnabled=autoComplete != null && this.javaScriptEnabled;
  List<ModelFormField.OptionValue> allOptionValues=dropDownField.getAllOptionValues(context,modelForm.getDelegator(context));
  String event=modelFormField.getEvent();
  String action=modelFormField.getAction(context);
  String currentValue=modelFormField.getEntry(context);
  String currentDescription=null;
  if (UtilValidate.isNotEmpty(currentValue)) {
    for (    ModelFormField.OptionValue optionValue : allOptionValues) {
      if (optionValue.getKey().equals(currentValue)) {
        currentDescription=optionValue.getDescription();
      }
    }
  }
  if (ajaxEnabled) {
    writer.append("<input type=\"text\"");
  }
 else {
    writer.append("<select");
  }
  appendClassNames(writer,context,modelFormField);
  writer.append(" name=\"");
  writer.append(modelFormField.getParameterName(context));
  String idName=modelFormField.getIdName();
  if (ajaxEnabled) {
    writer.append("_description\"");
    String textFieldIdName=idName;
    if (UtilValidate.isNotEmpty(textFieldIdName)) {
      textFieldIdName+="_description";
      writer.append(" id=\"");
      writer.append(textFieldIdName);
      writer.append('"');
    }
    if (UtilValidate.isNotEmpty(currentValue)) {
      writer.append(" value=\"");
      String explicitDescription=(currentDescription != null ? currentDescription : dropDownField.getCurrentDescription(context));
      if (UtilValidate.isNotEmpty(explicitDescription)) {
        writer.append(explicitDescription);
      }
 else {
        writer.append(ModelFormField.FieldInfoWithOptions.getDescriptionForOptionKey(currentValue,allOptionValues));
      }
      writer.append('"');
    }
    writer.append("/>");
    appendWhitespace(writer);
    writer.append("<input type=\"hidden\"");
    writer.append(" name=\"");
    writer.append(modelFormField.getParameterName(context));
    writer.append('"');
    if (UtilValidate.isNotEmpty(idName)) {
      writer.append(" id=\"");
      writer.append(idName);
      writer.append('"');
    }
    if (UtilValidate.isNotEmpty(currentValue)) {
      writer.append(" value=\"");
      writer.append(currentValue);
      writer.append('"');
    }
    writer.append("/>");
    appendWhitespace(writer);
    writer.append("<script language=\"JavaScript\" type=\"text/javascript\">");
    appendWhitespace(writer);
    writer.append("var data = {");
    int count=0;
    for (    ModelFormField.OptionValue optionValue : allOptionValues) {
      count++;
      writer.append("" + optionValue.getKey() + ": ");
      writer.append(" '" + optionValue.getDescription() + "'");
      if (count != allOptionValues.size()) {
        writer.append(", ");
      }
    }
    writer.append("};");
    appendWhitespace(writer);
    writer.append("ajaxAutoCompleteDropDown('" + textFieldIdName + "', '"+ idName+ "', data, {autoSelect: "+ autoComplete.getAutoSelect()+ ", frequency: "+ autoComplete.getFrequency()+ ", minChars: "+ autoComplete.getMinChars()+ ", choices: "+ autoComplete.getChoices()+ ", partialSearch: "+ autoComplete.getPartialSearch()+ ", partialChars: "+ autoComplete.getPartialChars()+ ", ignoreCase: "+ autoComplete.getIgnoreCase()+ ", fullSearch: "+ autoComplete.getFullSearch()+ "});");
    appendWhitespace(writer);
    writer.append("</script>");
  }
 else {
    writer.append('"');
    if (UtilValidate.isNotEmpty(idName)) {
      writer.append(" id=\"");
      writer.append(idName);
      writer.append('"');
    }
    if (dropDownField.isAllowMultiple()) {
      writer.append(" multiple=\"multiple\"");
    }
    int otherFieldSize=dropDownField.getOtherFieldSize();
    String otherFieldName=dropDownField.getParameterNameOther(context);
    if (otherFieldSize > 0) {
      writer.append(" onchange=\"process_choice(this,document.");
      writer.append(modelForm.getName());
      writer.append(".");
      writer.append(otherFieldName);
      writer.append(")\" ");
    }
    if (UtilValidate.isNotEmpty(event) && UtilValidate.isNotEmpty(action)) {
      writer.append(" ");
      writer.append(event);
      writer.append("=\"");
      writer.append(action);
      writer.append('"');
    }
    writer.append(" size=\"" + dropDownField.getSize() + "\">");
    if (UtilValidate.isNotEmpty(currentValue) && "first-in-list".equals(dropDownField.getCurrent())) {
      writer.append("<option");
      writer.append(" selected=\"selected\"");
      writer.append(" value=\"");
      writer.append(currentValue);
      writer.append("\">");
      String explicitDescription=(currentDescription != null ? currentDescription : dropDownField.getCurrentDescription(context));
      if (UtilValidate.isNotEmpty(explicitDescription)) {
        writer.append(explicitDescription);
      }
 else {
        writer.append(ModelFormField.FieldInfoWithOptions.getDescriptionForOptionKey(currentValue,allOptionValues));
      }
      writer.append("</option>");
      writer.append("<option value=\"");
      writer.append(currentValue);
      writer.append("\">---</option>");
    }
    if (dropDownField.isAllowEmpty()) {
      writer.append("<option value=\"\">&nbsp;</option>");
    }
    Iterator optionValueIter=allOptionValues.iterator();
    while (optionValueIter.hasNext()) {
      ModelFormField.OptionValue optionValue=(ModelFormField.OptionValue)optionValueIter.next();
      String noCurrentSelectedKey=dropDownField.getNoCurrentSelectedKey(context);
      writer.append("<option");
      if (UtilValidate.isNotEmpty(currentValue) && currentValue.equals(optionValue.getKey()) && "selected".equals(dropDownField.getCurrent())) {
        writer.append(" selected=\"selected\"");
      }
 else       if (UtilValidate.isEmpty(currentValue) && noCurrentSelectedKey != null && noCurrentSelectedKey.equals(optionValue.getKey())) {
        writer.append(" selected=\"selected\"");
      }
      writer.append(" value=\"");
      writer.append(optionValue.getKey());
      writer.append("\">");
      writer.append(optionValue.getDescription());
      writer.append("</option>");
    }
    writer.append("</select>");
    if (otherFieldSize > 0) {
      String fieldName=modelFormField.getParameterName(context);
      Map dataMap=modelFormField.getMap(context);
      if (dataMap == null) {
        dataMap=context;
      }
      Object otherValueObj=dataMap.get(otherFieldName);
      String otherValue=(otherValueObj == null) ? "" : otherValueObj.toString();
      writer.append("<noscript>");
      writer.append("<input type='text' name='");
      writer.append(otherFieldName);
      writer.append("'/> ");
      writer.append("</noscript>");
      writer.append("\n<script type='text/javascript' language='JavaScript'><!--");
      writer.append("\ndisa = ' disabled';");
      writer.append("\nif(other_choice(document.");
      writer.append(modelForm.getName());
      writer.append(".");
      writer.append(fieldName);
      writer.append(")) disa = '';");
      writer.append("\ndocument.write(\"<input type=");
      writer.append("'text' name='");
      writer.append(otherFieldName);
      writer.append("' value='");
      writer.append(otherValue);
      writer.append("' size='");
      writer.append(Integer.toString(otherFieldSize));
      writer.append("' ");
      writer.append("\" +disa+ \" onfocus='check_choice(document.");
      writer.append(modelForm.getName());
      writer.append(".");
      writer.append(fieldName);
      writer.append(")'/>\");");
      writer.append("\nif(disa && document.styleSheets)");
      writer.append(" document.");
      writer.append(modelForm.getName());
      writer.append(".");
      writer.append(otherFieldName);
      writer.append(".style.visibility  = 'hidden';");
      writer.append("\n//--></script>");
    }
  }
  this.makeHyperlinkString(writer,dropDownField.getSubHyperlink(),context);
  this.appendTooltip(writer,context,modelFormField);
}
