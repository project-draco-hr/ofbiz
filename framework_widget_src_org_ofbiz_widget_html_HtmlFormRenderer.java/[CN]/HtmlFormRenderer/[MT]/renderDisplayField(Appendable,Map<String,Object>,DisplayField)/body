{
  ModelFormField modelFormField=displayField.getModelFormField();
  ModelForm modelForm=modelFormField.getModelForm();
  StringBuilder str=new StringBuilder();
  String idName=modelFormField.getIdName();
  if (UtilValidate.isNotEmpty(idName) && ("list".equals(modelForm.getType()) || "multi".equals(modelForm.getType()))) {
    idName+="_" + modelForm.getRowCount();
  }
  if (UtilValidate.isNotEmpty(modelFormField.getWidgetStyle()) || modelFormField.shouldBeRed(context)) {
    str.append("<span class=\"");
    str.append(modelFormField.getWidgetStyle());
    str.append('"');
    if (UtilValidate.isNotEmpty(idName)) {
      str.append(" id=\"");
      str.append(idName);
      str.append('"');
    }
    if (modelFormField.shouldBeRed(context)) {
      str.append(" alert");
    }
    str.append('>');
  }
  if (str.length() > 0) {
    writer.append(str.toString());
  }
  String description=displayField.getDescription(context);
  description=description.replaceAll("\n","<br/>");
  if (UtilValidate.isEmpty(description)) {
    this.renderFormatEmptySpace(writer,context,modelFormField.getModelForm());
  }
 else {
    writer.append(description);
  }
  if (str.length() > 0) {
    writer.append("</span>");
  }
  ModelFormField.InPlaceEditor inPlaceEditor=displayField.getInPlaceEditor();
  boolean ajaxEnabled=inPlaceEditor != null && this.javaScriptEnabled;
  if (ajaxEnabled) {
    writer.append("<script language=\"JavaScript\" type=\"text/javascript\">");
    String url=inPlaceEditor.getUrl(context);
    Map<String,Object> fieldMap=inPlaceEditor.getFieldMap(context);
    if (fieldMap != null) {
      url+='?';
      Set<Entry<String,Object>> fieldSet=fieldMap.entrySet();
      Iterator<Entry<String,Object>> fieldIterator=fieldSet.iterator();
      int count=0;
      while (fieldIterator.hasNext()) {
        count++;
        Entry<String,Object> field=fieldIterator.next();
        url+=(String)field.getKey() + '=' + (String)field.getValue();
        if (count < fieldSet.size()) {
          url+='&';
        }
      }
    }
    writer.append("ajaxInPlaceEditDisplayField('");
    writer.append(idName).append("', '").append(url).append("', {");
    if (UtilValidate.isNotEmpty(inPlaceEditor.getParamName())) {
      writer.append("paramName: '").append(inPlaceEditor.getParamName()).append("'");
    }
 else {
      writer.append("paramName: '").append(modelFormField.getFieldName()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getCancelControl())) {
      writer.append(", cancelControl: ");
      if (!"false".equals(inPlaceEditor.getCancelControl())) {
        writer.append("'");
      }
      writer.append(inPlaceEditor.getCancelControl());
      if (!"false".equals(inPlaceEditor.getCancelControl())) {
        writer.append("'");
      }
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getCancelText())) {
      writer.append(", cancelText: '").append(inPlaceEditor.getCancelText()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getClickToEditText())) {
      writer.append(", clickToEditText: '").append(inPlaceEditor.getClickToEditText()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getFieldPostCreation())) {
      writer.append(", fieldPostCreation: ");
      if (!"false".equals(inPlaceEditor.getFieldPostCreation())) {
        writer.append("'");
      }
      writer.append(inPlaceEditor.getFieldPostCreation());
      if (!"false".equals(inPlaceEditor.getFieldPostCreation())) {
        writer.append("'");
      }
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getFormClassName())) {
      writer.append(", formClassName: '").append(inPlaceEditor.getFormClassName()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getHighlightColor())) {
      writer.append(", highlightColor: '").append(inPlaceEditor.getHighlightColor()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getHighlightEndColor())) {
      writer.append(", highlightEndColor: '").append(inPlaceEditor.getHighlightEndColor()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getHoverClassName())) {
      writer.append(", hoverClassName: '").append(inPlaceEditor.getHoverClassName()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getHtmlResponse())) {
      writer.append(", htmlResponse: ").append(inPlaceEditor.getHtmlResponse());
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getLoadingClassName())) {
      writer.append(", loadingClassName: '").append(inPlaceEditor.getLoadingClassName()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getLoadingText())) {
      writer.append(", loadingText: '").append(inPlaceEditor.getLoadingText()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getOkControl())) {
      writer.append(", okControl: ");
      if (!"false".equals(inPlaceEditor.getOkControl())) {
        writer.append("'");
      }
      writer.append(inPlaceEditor.getOkControl());
      if (!"false".equals(inPlaceEditor.getOkControl())) {
        writer.append("'");
      }
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getOkText())) {
      writer.append(", okText: '").append(inPlaceEditor.getOkText()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getSavingClassName())) {
      writer.append(", savingClassName: '").append(inPlaceEditor.getSavingClassName()).append("', ");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getSavingText())) {
      writer.append(", savingText: '").append(inPlaceEditor.getSavingText()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getSubmitOnBlur())) {
      writer.append(", submitOnBlur: ").append(inPlaceEditor.getSubmitOnBlur());
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getTextBeforeControls())) {
      writer.append(", textBeforeControls: '").append(inPlaceEditor.getTextBeforeControls()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getTextAfterControls())) {
      writer.append(", textAfterControls: '").append(inPlaceEditor.getTextAfterControls()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getTextBetweenControls())) {
      writer.append(", textBetweenControls: '").append(inPlaceEditor.getTextBetweenControls()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getUpdateAfterRequestCall())) {
      writer.append(", updateAfterRequestCall: ").append(inPlaceEditor.getUpdateAfterRequestCall());
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getRows())) {
      writer.append(", rows: '").append(inPlaceEditor.getRows()).append("'");
    }
    if (UtilValidate.isNotEmpty(inPlaceEditor.getCols())) {
      writer.append(", cols: '").append(inPlaceEditor.getCols()).append("'");
    }
    writer.append("});");
    writer.append("</script>");
  }
  if (displayField instanceof DisplayEntityField) {
    this.makeHyperlinkString(writer,((DisplayEntityField)displayField).getSubHyperlink(),context);
  }
  this.appendTooltip(writer,context,modelFormField);
}
