{
  ModelFormField modelFormField=textField.getModelFormField();
  writer.append("<input type=\"text\"");
  appendClassNames(writer,context,modelFormField);
  writer.append(" name=\"");
  writer.append(modelFormField.getParameterName(context));
  writer.append('"');
  String value=modelFormField.getEntry(context,textField.getDefaultValue(context));
  if (UtilValidate.isNotEmpty(value)) {
    writer.append(" value=\"");
    writer.append(value);
    writer.append('"');
  }
  writer.append(" size=\"");
  writer.append(Integer.toString(textField.getSize()));
  writer.append('"');
  Integer maxlength=textField.getMaxlength();
  if (maxlength != null) {
    writer.append(" maxlength=\"");
    writer.append(maxlength.toString());
    writer.append('"');
  }
  String idName=modelFormField.getIdName();
  if (UtilValidate.isNotEmpty(idName)) {
    writer.append(" id=\"");
    writer.append(idName);
    writer.append('"');
  }
  String event=modelFormField.getEvent();
  String action=modelFormField.getAction(context);
  if (UtilValidate.isNotEmpty(event) && UtilValidate.isNotEmpty(action)) {
    writer.append(" ");
    writer.append(event);
    writer.append("=\"");
    writer.append(action);
    writer.append('"');
  }
  List<ModelForm.UpdateArea> updateAreas=modelFormField.getOnChangeUpdateAreas();
  boolean ajaxEnabled=updateAreas != null && this.javaScriptEnabled;
  if (!textField.getClientAutocompleteField() || ajaxEnabled) {
    writer.append(" autocomplete=\"off\"");
  }
  writer.append("/>");
  this.addAsterisks(writer,context,modelFormField);
  this.makeHyperlinkString(writer,textField.getSubHyperlink(),context);
  this.appendTooltip(writer,context,modelFormField);
  if (ajaxEnabled) {
    appendWhitespace(writer);
    writer.append("<script language=\"JavaScript\" type=\"text/javascript\">");
    appendWhitespace(writer);
    writer.append("ajaxAutoCompleter('" + createAjaxParamsFromUpdateAreas(updateAreas,null,context) + "');");
    appendWhitespace(writer);
    writer.append("</script>");
  }
  appendWhitespace(writer);
}
