{
  String targetService=modelForm.getPaginateTarget(context);
  if (targetService == null) {
    targetService="${targetService}";
  }
  if (UtilValidate.isEmpty(targetService)) {
    Debug.logWarning("Cannot paginate because TargetService is empty for the form: " + modelForm.getName(),module);
    return;
  }
  String viewIndexParam=modelForm.getPaginateIndexField(context);
  String viewSizeParam=modelForm.getPaginateSizeField(context);
  int viewIndex=modelForm.getViewIndex(context);
  int viewSize=modelForm.getViewSize(context);
  int listSize=modelForm.getListSize(context);
  int lowIndex=modelForm.getLowIndex(context);
  int highIndex=modelForm.getHighIndex(context);
  int actualPageSize=modelForm.getActualPageSize(context);
  if (actualPageSize >= listSize && listSize >= 0)   return;
  Map uiLabelMap=(Map)context.get("uiLabelMap");
  String pageLabel="";
  String rowsLabel="";
  String ofLabel="";
  if (uiLabelMap == null) {
    Debug.logWarning("Could not find uiLabelMap in context",module);
  }
 else {
    pageLabel=(String)uiLabelMap.get("CommonPage");
    rowsLabel=(String)uiLabelMap.get("CommonRows");
    ofLabel=(String)uiLabelMap.get("CommonOf");
    ofLabel=ofLabel.toLowerCase();
  }
  if (viewIndexParam.equals("viewIndex"))   viewIndexParam="VIEW_INDEX";
  if (viewSizeParam.equals("viewSize"))   viewSizeParam="VIEW_SIZE";
  String str=(String)context.get("_QBESTRING_");
  ServletContext ctx=(ServletContext)request.getAttribute("servletContext");
  RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");
  String queryString=UtilHttp.stripViewParamsFromQueryString(str);
  HashSet paramNames=new HashSet();
  paramNames.add(viewIndexParam);
  paramNames.add(viewSizeParam);
  queryString=UtilHttp.stripNamedParamsFromQueryString(queryString,paramNames);
  String anchor="";
  String paginateAnchor=modelForm.getPaginateTargetAnchor();
  if (paginateAnchor != null)   anchor="#" + paginateAnchor;
  String prepLinkText="";
  prepLinkText=targetService;
  if (prepLinkText.indexOf("?") < 0) {
    prepLinkText+="?";
  }
 else   if (!prepLinkText.endsWith("?")) {
    prepLinkText+="&amp;";
  }
  if (!UtilValidate.isEmpty(queryString) && !queryString.equals("null")) {
    prepLinkText+=queryString + "&amp;";
  }
  prepLinkText+=viewSizeParam + "=" + viewSize+ "&amp;"+ viewIndexParam+ "=";
  buffer.append("<div class=\"").append(modelForm.getPaginateStyle()).append("\">");
  buffer.append("<ul>");
  String linkText;
  buffer.append("<li class=\"").append(modelForm.getPaginateFirstStyle());
  if (viewIndex > 0) {
    buffer.append("\"><a href=\"");
    linkText=prepLinkText + 0 + anchor+ "\"";
    buffer.append(rh.makeLink(this.request,this.response,linkText)).append("\">").append(modelForm.getPaginateFirstLabel(context)).append("</a>");
  }
 else {
    buffer.append("-disabled\">").append(modelForm.getPaginateFirstLabel(context));
  }
  buffer.append("</li>");
  buffer.append("<li class=\"").append(modelForm.getPaginatePreviousStyle());
  if (viewIndex > 0) {
    buffer.append("\"><a href=\"");
    linkText=prepLinkText + (viewIndex - 1) + anchor+ "\"";
    buffer.append(rh.makeLink(this.request,this.response,linkText)).append("\">").append(modelForm.getPaginatePreviousLabel(context)).append("</a>");
  }
 else {
    buffer.append("-disabled\">").append(modelForm.getPaginatePreviousLabel(context));
  }
  buffer.append("</li>");
  int page=0;
  if (listSize > 0) {
    linkText=prepLinkText;
    if (linkText.startsWith("/")) {
      linkText=linkText.substring(1,linkText.length());
    }
    buffer.append("<li>").append(pageLabel).append(" <select name=\"page\" size=\"1\" onchange=\"location.href = '" + linkText + "' + this.value;\" >");
    for (int i=0; i < listSize; ) {
      if (page == viewIndex) {
        buffer.append("<option selected value=\"");
      }
 else {
        buffer.append("<option value=\"");
      }
      buffer.append(page);
      buffer.append("\">");
      buffer.append(1 + page);
      buffer.append("</option>");
      page++;
      i=page * viewSize;
    }
    buffer.append("</select></li>");
    buffer.append("<li>");
    buffer.append((lowIndex + 1) + " - " + (lowIndex + actualPageSize)+ " "+ ofLabel+ " "+ listSize).append(" " + rowsLabel);
    buffer.append("</li>");
  }
  buffer.append("<li class=\"").append(modelForm.getPaginateNextStyle());
  if (highIndex < listSize) {
    buffer.append("\"><a href=\"");
    linkText=prepLinkText + (viewIndex + 1) + anchor+ "\"";
    buffer.append(rh.makeLink(this.request,this.response,linkText)).append("\">").append(modelForm.getPaginateNextLabel(context)).append("</a>");
  }
 else {
    buffer.append("-disabled\">").append(modelForm.getPaginateNextLabel(context));
  }
  buffer.append("</li>");
  buffer.append("<li class=\"").append(modelForm.getPaginateLastStyle());
  if (highIndex < listSize) {
    buffer.append("\"><a href=\"");
    linkText=prepLinkText + (page - 1) + anchor+ "\"";
    buffer.append(rh.makeLink(this.request,this.response,linkText)).append("\">").append(modelForm.getPaginateLastLabel(context)).append("</a>");
  }
 else {
    buffer.append("-disabled\">").append(modelForm.getPaginateLastLabel(context));
  }
  buffer.append("</li>");
  buffer.append("</ul>").append("</div>");
  this.appendWhitespace(buffer);
}
