{
  int shipGroups=cart.getShipGroupSize();
  for (int gi=0; gi < shipGroups; gi++) {
    String shipmentMethodTypeId=cart.getShipmentMethodTypeId(gi);
    String carrierPartyId=cart.getCarrierPartyId(gi);
    Debug.logInfo("Getting ship estimate for group #" + gi + " ["+ shipmentMethodTypeId+ " / "+ carrierPartyId+ "]",module);
    Map<String,Object> result=ShippingEvents.getShipGroupEstimate(dispatcher,delegator,cart,gi);
    if (("SALES_ORDER".equals(cart.getOrderType())) && (ServiceUtil.isError(result))) {
      Debug.logError(ServiceUtil.getErrorMessage(result),module);
      throw new GeneralException(ServiceUtil.getErrorMessage(result));
    }
    BigDecimal shippingTotal=(BigDecimal)result.get("shippingTotal");
    if (shippingTotal == null) {
      shippingTotal=BigDecimal.ZERO;
    }
    cart.setItemShipGroupEstimate(shippingTotal,gi);
  }
  CheckOutHelper coh=new CheckOutHelper(dispatcher,delegator,cart);
  if (calcTax) {
    try {
      coh.calcAndAddTax();
    }
 catch (    GeneralException e) {
      Debug.logError(e,module);
      throw new GeneralException(e.getMessage());
    }
  }
  List<Map<String,Object>> modifiedItems=FastList.newInstance();
  List<Map<String,Object>> newItems=FastList.newInstance();
  List<GenericValue> toStore=new LinkedList<GenericValue>();
  List<GenericValue> toAddList=new ArrayList<GenericValue>();
  toAddList.addAll(cart.makeAllAdjustments());
  cart.clearAllPromotionAdjustments();
  ProductPromoWorker.doPromotions(cart,dispatcher);
  Map<String,Object> validateResp=coh.validatePaymentMethods();
  if (ServiceUtil.isError(validateResp)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(validateResp));
  }
  String billingAccountId=cart.getBillingAccountId();
  if (UtilValidate.isNotEmpty(billingAccountId)) {
    try {
      GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
      orderHeader.set("billingAccountId",billingAccountId);
      toStore.add(orderHeader);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      throw new GeneralException(e.getMessage());
    }
  }
  toStore.addAll(cart.makeOrderItems());
  toStore.addAll(cart.makeAllAdjustments());
  String shipGroupSeqId=null;
  long groupIndex=cart.getShipInfoSize();
  if (!deleteItems) {
    for (long itr=1; itr <= groupIndex; itr++) {
      shipGroupSeqId=UtilFormatOut.formatPaddedNumber(itr,5);
      List<GenericValue> removeList=new ArrayList<GenericValue>();
      for (      GenericValue stored : toStore) {
        if ("OrderAdjustment".equals(stored.getEntityName())) {
          if (("SHIPPING_CHARGES".equals(stored.get("orderAdjustmentTypeId")) || "SALES_TAX".equals(stored.get("orderAdjustmentTypeId"))) && stored.get("orderId").equals(orderId) && stored.get("shipGroupSeqId").equals(shipGroupSeqId)) {
            removeList.add(stored);
          }
          if (stored.get("comments") != null && ((String)stored.get("comments")).startsWith("Added manually by")) {
            removeList.add(stored);
          }
        }
      }
      toStore.removeAll(removeList);
    }
    for (    GenericValue toAdd : toAddList) {
      if ("OrderAdjustment".equals(toAdd.getEntityName())) {
        if (toAdd.get("comments") != null && ((String)toAdd.get("comments")).startsWith("Added manually by") && (("PROMOTION_ADJUSTMENT".equals(toAdd.get("orderAdjustmentTypeId"))) || ("SHIPPING_CHARGES".equals(toAdd.get("orderAdjustmentTypeId"))) || ("SALES_TAX".equals(toAdd.get("orderAdjustmentTypeId"))))) {
          toStore.add(toAdd);
        }
      }
    }
  }
 else {
    toStore.addAll(toAddList);
  }
  toStore.addAll(cart.makeAllShipGroupInfos());
  toStore.addAll(cart.makeAllOrderPaymentInfos(dispatcher));
  toStore.addAll(cart.makeAllOrderItemAttributes(orderId,ShoppingCart.FILLED_ONLY));
  List<GenericValue> toRemove=FastList.newInstance();
  if (deleteItems) {
    try {
      toRemove.addAll(delegator.findByAnd("OrderItemShipGroupAssoc",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderItemContactMech",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderItemPriceInfo",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderItemAttribute",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderItemBilling",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderItemRole",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderItemChange",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderAdjustment",UtilMisc.toMap("orderId",orderId),null,false));
      toRemove.addAll(delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId),null,false));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
  }
 else {
    toRemove.addAll(cart.makeAllOrderItemAttributes(orderId,ShoppingCart.EMPTY_ONLY));
  }
  for (  String promoCodeEntered : cart.getProductPromoCodesEntered()) {
    GenericValue orderProductPromoCode=delegator.makeValue("OrderProductPromoCode");
    orderProductPromoCode.set("orderId",orderId);
    orderProductPromoCode.set("productPromoCodeId",promoCodeEntered);
    toStore.add(orderProductPromoCode);
  }
  for (  GenericValue promoUse : cart.makeProductPromoUses()) {
    promoUse.set("orderId",orderId);
    toStore.add(promoUse);
  }
  List<GenericValue> existingPromoCodes=null;
  List<GenericValue> existingPromoUses=null;
  try {
    existingPromoCodes=delegator.findByAnd("OrderProductPromoCode",UtilMisc.toMap("orderId",orderId),null,false);
    existingPromoUses=delegator.findByAnd("ProductPromoUse",UtilMisc.toMap("orderId",orderId),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  toRemove.addAll(existingPromoCodes);
  toRemove.addAll(existingPromoUses);
  List<String> dropShipGroupIds=FastList.newInstance();
  for (  GenericValue valueObj : toStore) {
    valueObj.set("orderId",orderId);
    if ("OrderItemShipGroup".equals(valueObj.getEntityName())) {
      if (valueObj.get("carrierRoleTypeId") == null) {
        valueObj.set("carrierRoleTypeId","CARRIER");
      }
      if (!UtilValidate.isEmpty(valueObj.get("supplierPartyId"))) {
        dropShipGroupIds.add(valueObj.getString("shipGroupSeqId"));
      }
    }
 else     if ("OrderAdjustment".equals(valueObj.getEntityName())) {
      if (UtilValidate.isEmpty(valueObj.get("orderItemSeqId"))) {
        valueObj.set("orderItemSeqId",DataModelConstants.SEQ_ID_NA);
      }
      if (UtilValidate.isEmpty(valueObj.getString("orderAdjustmentId"))) {
        valueObj.set("orderAdjustmentId",delegator.getNextSeqId("OrderAdjustment"));
      }
      valueObj.set("createdDate",UtilDateTime.nowTimestamp());
      valueObj.set("createdByUserLogin",userLogin.getString("userLoginId"));
    }
 else     if ("OrderPaymentPreference".equals(valueObj.getEntityName())) {
      if (valueObj.get("orderPaymentPreferenceId") == null) {
        valueObj.set("orderPaymentPreferenceId",delegator.getNextSeqId("OrderPaymentPreference"));
        valueObj.set("createdDate",UtilDateTime.nowTimestamp());
        valueObj.set("createdByUserLogin",userLogin.getString("userLoginId"));
      }
      if (valueObj.get("statusId") == null) {
        valueObj.set("statusId","PAYMENT_NOT_RECEIVED");
      }
    }
 else     if ("OrderItem".equals(valueObj.getEntityName()) && !deleteItems) {
      if ("Y".equals(valueObj.getString("isPromo"))) {
        Map<String,Object> promoItem=FastMap.newInstance();
        promoItem.put("orderId",valueObj.getString("orderId"));
        promoItem.put("orderItemSeqId",valueObj.getString("orderItemSeqId"));
        promoItem.put("quantity",valueObj.getBigDecimal("quantity"));
        newItems.add(promoItem);
        continue;
      }
      GenericValue oldOrderItem=null;
      try {
        oldOrderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",valueObj.getString("orderId"),"orderItemSeqId",valueObj.getString("orderItemSeqId")).queryOne();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        throw new GeneralException(e.getMessage());
      }
      if (UtilValidate.isNotEmpty(oldOrderItem)) {
        String oldItemDescription=oldOrderItem.getString("itemDescription") != null ? oldOrderItem.getString("itemDescription") : "";
        BigDecimal oldQuantity=oldOrderItem.getBigDecimal("quantity") != null ? oldOrderItem.getBigDecimal("quantity") : BigDecimal.ZERO;
        BigDecimal oldUnitPrice=oldOrderItem.getBigDecimal("unitPrice") != null ? oldOrderItem.getBigDecimal("unitPrice") : BigDecimal.ZERO;
        String oldItemComment=oldOrderItem.getString("comments") != null ? oldOrderItem.getString("comments") : "";
        boolean changeFound=false;
        Map<String,Object> modifiedItem=FastMap.newInstance();
        if (!oldItemDescription.equals(valueObj.getString("itemDescription"))) {
          modifiedItem.put("itemDescription",oldItemDescription);
          changeFound=true;
        }
        if (!oldItemComment.equals(valueObj.getString("comments"))) {
          modifiedItem.put("changeComments",valueObj.getString("comments"));
          changeFound=true;
        }
        BigDecimal quantityDif=valueObj.getBigDecimal("quantity").subtract(oldQuantity);
        BigDecimal unitPriceDif=valueObj.getBigDecimal("unitPrice").subtract(oldUnitPrice);
        if (quantityDif.compareTo(BigDecimal.ZERO) != 0) {
          modifiedItem.put("quantity",quantityDif);
          changeFound=true;
        }
        if (unitPriceDif.compareTo(BigDecimal.ZERO) != 0) {
          modifiedItem.put("unitPrice",unitPriceDif);
          changeFound=true;
        }
        if (changeFound) {
          Map<String,String> itemReasonMap=UtilGenerics.checkMap(changeMap.get("itemReasonMap"));
          if (UtilValidate.isNotEmpty(itemReasonMap)) {
            String changeReasonId=itemReasonMap.get(valueObj.getString("orderItemSeqId"));
            modifiedItem.put("reasonEnumId",changeReasonId);
          }
          modifiedItem.put("orderId",valueObj.getString("orderId"));
          modifiedItem.put("orderItemSeqId",valueObj.getString("orderItemSeqId"));
          modifiedItem.put("changeTypeEnumId","ODR_ITM_UPDATE");
          modifiedItems.add(modifiedItem);
        }
      }
 else {
        Map<String,String> itemReasonMap=UtilGenerics.checkMap(changeMap.get("itemReasonMap"));
        Map<String,String> itemCommentMap=UtilGenerics.checkMap(changeMap.get("itemCommentMap"));
        Map<String,Object> appendedItem=FastMap.newInstance();
        if (UtilValidate.isNotEmpty(itemReasonMap)) {
          String changeReasonId=itemReasonMap.get("reasonEnumId");
          appendedItem.put("reasonEnumId",changeReasonId);
        }
        if (UtilValidate.isNotEmpty(itemCommentMap)) {
          String changeComments=itemCommentMap.get("changeComments");
          appendedItem.put("changeComments",changeComments);
        }
        appendedItem.put("orderId",valueObj.getString("orderId"));
        appendedItem.put("orderItemSeqId",valueObj.getString("orderItemSeqId"));
        appendedItem.put("quantity",valueObj.getBigDecimal("quantity"));
        appendedItem.put("changeTypeEnumId","ODR_ITM_APPEND");
        modifiedItems.add(appendedItem);
        newItems.add(appendedItem);
      }
    }
  }
  if (Debug.verboseOn())   Debug.logVerbose("To Store Contains: " + toStore,module);
  try {
    delegator.removeAll(toRemove);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    throw new GeneralException(e.getMessage());
  }
  try {
    delegator.storeAll(toStore);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    throw new GeneralException(e.getMessage());
  }
  if (UtilValidate.isNotEmpty(modifiedItems)) {
    for (    Map<String,Object> modifiendItem : modifiedItems) {
      Map<String,Object> serviceCtx=FastMap.newInstance();
      serviceCtx.put("orderId",modifiendItem.get("orderId"));
      serviceCtx.put("orderItemSeqId",modifiendItem.get("orderItemSeqId"));
      serviceCtx.put("itemDescription",modifiendItem.get("itemDescription"));
      serviceCtx.put("quantity",modifiendItem.get("quantity"));
      serviceCtx.put("unitPrice",modifiendItem.get("unitPrice"));
      serviceCtx.put("changeTypeEnumId",modifiendItem.get("changeTypeEnumId"));
      serviceCtx.put("reasonEnumId",modifiendItem.get("reasonEnumId"));
      serviceCtx.put("changeComments",modifiendItem.get("changeComments"));
      serviceCtx.put("userLogin",userLogin);
      Map<String,Object> resp=null;
      try {
        resp=dispatcher.runSync("createOrderItemChange",serviceCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        throw new GeneralException(e.getMessage());
      }
      if (ServiceUtil.isError(resp)) {
        throw new GeneralException((String)resp.get(ModelService.ERROR_MESSAGE));
      }
    }
  }
  if (UtilValidate.isNotEmpty(newItems)) {
    for (    Map<String,Object> newItem : newItems) {
      String itemStatusId=delegator.getNextSeqId("OrderStatus");
      GenericValue itemStatus=delegator.makeValue("OrderStatus",UtilMisc.toMap("orderStatusId",itemStatusId));
      itemStatus.put("statusId","ITEM_CREATED");
      itemStatus.put("orderId",newItem.get("orderId"));
      itemStatus.put("orderItemSeqId",newItem.get("orderItemSeqId"));
      itemStatus.put("statusDatetime",UtilDateTime.nowTimestamp());
      itemStatus.set("statusUserLogin",userLogin.get("userLogin"));
      delegator.create(itemStatus);
    }
  }
  List<GenericValue> orderItemShipGroupAssoc=new LinkedList<GenericValue>();
  Map<String,GenericValue> itemValuesBySeqId=new HashMap<String,GenericValue>();
  for (  GenericValue v : toStore) {
    if ("OrderItem".equals(v.getEntityName())) {
      itemValuesBySeqId.put(v.getString("orderItemSeqId"),v);
    }
 else     if ("OrderItemShipGroupAssoc".equals(v.getEntityName())) {
      orderItemShipGroupAssoc.add(v);
    }
  }
  String productStoreId=cart.getProductStoreId();
  String orderTypeId=cart.getOrderType();
  List<String> resErrorMessages=new LinkedList<String>();
  try {
    Debug.logInfo("Calling reserve inventory...",module);
    reserveInventory(delegator,dispatcher,userLogin,locale,orderItemShipGroupAssoc,dropShipGroupIds,itemValuesBySeqId,orderTypeId,productStoreId,resErrorMessages);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    throw new GeneralException(e.getMessage());
  }
  if (resErrorMessages.size() > 0) {
    throw new GeneralException(ServiceUtil.getErrorMessage(ServiceUtil.returnError(resErrorMessages)));
  }
}
