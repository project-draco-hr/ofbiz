{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  String sendTo=(String)context.get("sendTo");
  String sendCc=(String)context.get("sendCc");
  String note=(String)context.get("note");
  String screenUri=(String)context.get("screenUri");
  if (userLogin == null) {
    GenericValue temporaryAnonymousUserLogin=(GenericValue)context.get("temporaryAnonymousUserLogin");
    userLogin=temporaryAnonymousUserLogin;
  }
  Map sendMap=FastMap.newInstance();
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting OrderHeader",module);
  }
  if (orderHeader == null) {
    return ServiceUtil.returnFailure("Could not find OrderHeader with ID [" + orderId + "]");
  }
  GenericValue productStoreEmail=null;
  try {
    productStoreEmail=delegator.findByPrimaryKey("ProductStoreEmailSetting",UtilMisc.toMap("productStoreId",orderHeader.get("productStoreId"),"emailType",emailType));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting the ProductStoreEmailSetting for productStoreId=" + orderHeader.get("productStoreId") + " and emailType="+ emailType,module);
  }
  if (productStoreEmail == null) {
    return ServiceUtil.returnFailure("No valid email setting for store with productStoreId=" + orderHeader.get("productStoreId") + " and emailType="+ emailType);
  }
  if (UtilValidate.isEmpty(screenUri)) {
    String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
    if (UtilValidate.isEmpty(bodyScreenLocation)) {
      bodyScreenLocation=ProductStoreWorker.getDefaultProductStoreEmailScreenLocation(emailType);
    }
    sendMap.put("bodyScreenUri",bodyScreenLocation);
    String xslfoAttachScreenLocation=productStoreEmail.getString("xslfoAttachScreenLocation");
    sendMap.put("xslfoAttachScreenLocation",xslfoAttachScreenLocation);
  }
 else {
    sendMap.put("bodyScreenUri",screenUri);
  }
  sendMap.put("webSiteId",orderHeader.get("webSiteId"));
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  String emailString=orh.getOrderEmailString();
  if (UtilValidate.isEmpty(emailString)) {
    Debug.logInfo("Customer is not setup to receive emails; no address(s) found [" + orderId + "]",module);
    return ServiceUtil.returnError("No sendTo email address found");
  }
  Locale locale=null;
  GenericValue placingParty=orh.getPlacingParty();
  GenericValue placingUserLogin=placingParty == null ? null : PartyWorker.findPartyLatestUserLogin(placingParty.getString("partyId"),delegator);
  if (locale == null && placingParty != null) {
    locale=PartyWorker.findPartyLastLocale(placingParty.getString("partyId"),delegator);
  }
  GenericValue productStore=OrderReadHelper.getProductStoreFromOrder(orderHeader);
  if (locale == null && productStore != null) {
    String localeString=productStore.getString("defaultLocaleString");
    if (UtilValidate.isNotEmpty(localeString)) {
      locale=UtilMisc.parseLocale(localeString);
    }
  }
  if (locale == null) {
    locale=Locale.getDefault();
  }
  ResourceBundleMapWrapper uiLabelMap=(ResourceBundleMapWrapper)UtilProperties.getResourceBundleMap("EcommerceUiLabels",locale);
  uiLabelMap.addBottomResourceBundle("OrderUiLabels");
  uiLabelMap.addBottomResourceBundle("CommonUiLabels");
  Map bodyParameters=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"userLogin",placingUserLogin,"uiLabelMap",uiLabelMap,"locale",locale);
  if (placingParty != null) {
    bodyParameters.put("partyId",placingParty.get("partyId"));
  }
  bodyParameters.put("note",note);
  sendMap.put("bodyParameters",bodyParameters);
  sendMap.put("userLogin",userLogin);
  String subjectString=productStoreEmail.getString("subject");
  sendMap.put("subject",subjectString);
  sendMap.put("contentType",productStoreEmail.get("contentType"));
  sendMap.put("sendFrom",productStoreEmail.get("fromAddress"));
  sendMap.put("sendCc",productStoreEmail.get("ccAddress"));
  sendMap.put("sendBcc",productStoreEmail.get("bccAddress"));
  if ((sendTo != null) && UtilValidate.isEmail(sendTo)) {
    sendMap.put("sendTo",sendTo);
  }
 else {
    sendMap.put("sendTo",emailString);
  }
  if ((sendCc != null) && UtilValidate.isEmail(sendCc)) {
    sendMap.put("sendCc",sendCc);
  }
 else {
    sendMap.put("sendCc",productStoreEmail.get("ccAddress"));
  }
  Map sendResp=null;
  try {
    sendResp=dispatcher.runSync("sendMailFromScreen",sendMap);
  }
 catch (  Exception e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderServiceExceptionSeeLogs",locale));
  }
  if (sendResp != null && !ServiceUtil.isError(sendResp)) {
    sendResp.put("emailType",emailType);
  }
  return sendResp;
}
