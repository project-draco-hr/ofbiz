{
  GenericDelegator delegator=ctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  String fromStatusId=(String)context.get("fromStatusId");
  String statusId=(String)context.get("statusId");
  Timestamp statusDateTime=(Timestamp)context.get("statusDateTime");
  Locale locale=(Locale)context.get("locale");
  Security security=ctx.getSecurity();
  if (!security.hasEntityPermission("ORDERMGR","_UPDATE",userLogin)) {
    GenericValue placingCustomer=null;
    try {
      Map placingCustomerFields=UtilMisc.toMap("orderId",orderId,"partyId",userLogin.getString("partyId"),"roleTypeId","PLACING_CUSTOMER");
      placingCustomer=delegator.findByPrimaryKey("OrderRole",placingCustomerFields);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderRoleEntity",locale) + e.getMessage());
    }
    if (placingCustomer == null)     return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));
  }
  Map fields=UtilMisc.toMap("orderId",orderId);
  if (orderItemSeqId != null)   fields.put("orderItemSeqId",orderItemSeqId);
  if (fromStatusId != null)   fields.put("statusId",fromStatusId);
  List orderItems=null;
  try {
    orderItems=delegator.findByAnd("OrderItem",fields);
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderItemEntity ",locale) + e.getMessage());
  }
  if (orderItems != null && orderItems.size() > 0) {
    List toBeStored=new ArrayList();
    Iterator itemsIterator=orderItems.iterator();
    while (itemsIterator.hasNext()) {
      GenericValue orderItem=(GenericValue)itemsIterator.next();
      if (orderItem == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotChangeItemStatusItemNotFound",locale));
      }
      if (Debug.verboseOn())       Debug.logVerbose("[OrderServices.setItemStatus] : Status Change: [" + orderId + "] ("+ orderItem.getString("orderItemSeqId"),module);
      if (Debug.verboseOn())       Debug.logVerbose("[OrderServices.setItemStatus] : From Status : " + orderItem.getString("statusId"),module);
      if (Debug.verboseOn())       Debug.logVerbose("[OrderServices.setOrderStatus] : To Status : " + statusId,module);
      if (orderItem.getString("statusId").equals(statusId)) {
        continue;
      }
      try {
        Map statusFields=UtilMisc.toMap("statusId",orderItem.getString("statusId"),"statusIdTo",statusId);
        GenericValue statusChange=delegator.findByPrimaryKeyCache("StatusValidChange",statusFields);
        if (statusChange == null) {
          Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderItemStatusNotChangedIsNotAValidChange",UtilMisc.toMap("orderStatusId",orderItem.getString("statusId"),"statusId",statusId),locale),module);
          continue;
        }
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotChangeItemStatus",locale) + e.getMessage());
      }
      orderItem.set("statusId",statusId);
      toBeStored.add(orderItem);
      if (statusDateTime == null) {
        statusDateTime=UtilDateTime.nowTimestamp();
      }
      Map changeFields=new HashMap();
      changeFields.put("orderStatusId",delegator.getNextSeqId("OrderStatus").toString());
      changeFields.put("statusId",statusId);
      changeFields.put("orderId",orderId);
      changeFields.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
      changeFields.put("statusDatetime",statusDateTime);
      changeFields.put("statusUserLogin",userLogin.getString("userLoginId"));
      GenericValue orderStatus=delegator.makeValue("OrderStatus",changeFields);
      toBeStored.add(orderStatus);
    }
    if (toBeStored.size() > 0) {
      try {
        delegator.storeAll(toBeStored);
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotStoreStatusChanges",locale) + e.getMessage());
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
