{
  boolean isImmediatelyFulfilled=false;
  GenericValue productStore=null;
  if (UtilValidate.isNotEmpty(productStoreId)) {
    try {
      productStore=delegator.findOne("ProductStore",UtilMisc.toMap("productStoreId",productStoreId),true);
    }
 catch (    GenericEntityException e) {
      throw new GeneralException(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotFindProductStoreWithID",UtilMisc.toMap("productStoreId",productStoreId),locale) + e.toString());
    }
  }
  if (productStore != null) {
    isImmediatelyFulfilled="Y".equals(productStore.getString("isImmediatelyFulfilled"));
  }
  boolean reserveInventory=("SALES_ORDER".equals(orderTypeId));
  if (reserveInventory && isImmediatelyFulfilled) {
    reserveInventory=false;
  }
  if (UtilValidate.isNotEmpty(orderItemShipGroupInfo)) {
    for (    GenericValue orderItemShipGroupAssoc : orderItemShipGroupInfo) {
      if ("OrderItemShipGroupAssoc".equals(orderItemShipGroupAssoc.getEntityName())) {
        if (dropShipGroupIds != null && dropShipGroupIds.contains(orderItemShipGroupAssoc.getString("shipGroupSeqId"))) {
          continue;
        }
        GenericValue orderItem=itemValuesBySeqId.get(orderItemShipGroupAssoc.get("orderItemSeqId"));
        GenericValue orderItemShipGroup=orderItemShipGroupAssoc.getRelatedOne("OrderItemShipGroup");
        String shipGroupFacilityId=orderItemShipGroup.getString("facilityId");
        String itemStatus=orderItem.getString("statusId");
        if ("ITEM_REJECTED".equals(itemStatus) || "ITEM_CANCELLED".equals(itemStatus) || "ITEM_COMPLETED".equals(itemStatus)) {
          Debug.logInfo("Order item [" + orderItem.getString("orderId") + " / "+ orderItem.getString("orderItemSeqId")+ "] is not in a proper status for reservation",module);
          continue;
        }
        if (UtilValidate.isNotEmpty(orderItem.getString("productId")) && !"RENTAL_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId"))) {
          try {
            GenericValue product=orderItem.getRelatedOne("Product");
            if (product == null) {
              Debug.logError("Error when looking up product in reserveInventory service",module);
              resErrorMessages.add("Error when looking up product in reserveInventory service");
              continue;
            }
            if (reserveInventory) {
              if (EntityTypeUtil.hasParentType(delegator,"ProductType","productTypeId",product.getString("productTypeId"),"parentTypeId","MARKETING_PKG_PICK")) {
                Map<String,Object> componentsRes=dispatcher.runSync("getAssociatedProducts",UtilMisc.toMap("productId",orderItem.getString("productId"),"type","PRODUCT_COMPONENT"));
                if (ServiceUtil.isError(componentsRes)) {
                  resErrorMessages.add((String)componentsRes.get(ModelService.ERROR_MESSAGE));
                  continue;
                }
 else {
                  List<GenericValue> assocProducts=UtilGenerics.checkList(componentsRes.get("assocProducts"));
                  for (                  GenericValue productAssoc : assocProducts) {
                    BigDecimal quantityOrd=productAssoc.getBigDecimal("quantity");
                    BigDecimal quantityKit=orderItemShipGroupAssoc.getBigDecimal("quantity");
                    BigDecimal quantity=quantityOrd.multiply(quantityKit);
                    Map<String,Object> reserveInput=new HashMap<String,Object>();
                    reserveInput.put("productStoreId",productStoreId);
                    reserveInput.put("productId",productAssoc.getString("productIdTo"));
                    reserveInput.put("orderId",orderItem.getString("orderId"));
                    reserveInput.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
                    reserveInput.put("shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                    reserveInput.put("quantity",quantity);
                    reserveInput.put("userLogin",userLogin);
                    reserveInput.put("facilityId",shipGroupFacilityId);
                    Map<String,Object> reserveResult=dispatcher.runSync("reserveStoreInventory",reserveInput);
                    if (ServiceUtil.isError(reserveResult)) {
                      String invErrMsg="The product ";
                      if (product != null) {
                        invErrMsg+=getProductName(product,orderItem);
                      }
                      invErrMsg+=" with ID " + orderItem.getString("productId") + " is no longer in stock. Please try reducing the quantity or removing the product from this order.";
                      resErrorMessages.add(invErrMsg);
                    }
                  }
                }
              }
 else {
                Map<String,Object> reserveInput=new HashMap<String,Object>();
                reserveInput.put("productStoreId",productStoreId);
                reserveInput.put("productId",orderItem.getString("productId"));
                reserveInput.put("orderId",orderItem.getString("orderId"));
                reserveInput.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
                reserveInput.put("shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                reserveInput.put("facilityId",shipGroupFacilityId);
                reserveInput.put("quantity",orderItemShipGroupAssoc.getBigDecimal("quantity"));
                reserveInput.put("userLogin",userLogin);
                Map<String,Object> reserveResult=dispatcher.runSync("reserveStoreInventory",reserveInput);
                if (ServiceUtil.isError(reserveResult)) {
                  String invErrMsg="The product ";
                  if (product != null) {
                    invErrMsg+=getProductName(product,orderItem);
                  }
                  invErrMsg+=" with ID " + orderItem.getString("productId") + " is no longer in stock. Please try reducing the quantity or removing the product from this order.";
                  resErrorMessages.add(invErrMsg);
                }
              }
            }
            if (EntityTypeUtil.hasParentType(delegator,"ProductType","productTypeId",product.getString("productTypeId"),"parentTypeId","MARKETING_PKG_AUTO")) {
              GenericValue permUserLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId","system"),true);
              Map<String,Object> inputMap=new HashMap<String,Object>();
              if (UtilValidate.isNotEmpty(shipGroupFacilityId)) {
                inputMap.put("facilityId",shipGroupFacilityId);
              }
 else {
                inputMap.put("facilityId",productStore.getString("inventoryFacilityId"));
              }
              inputMap.put("orderId",orderItem.getString("orderId"));
              inputMap.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
              inputMap.put("userLogin",permUserLogin);
              Map<String,Object> prunResult=dispatcher.runSync("createProductionRunForMktgPkg",inputMap);
              if (ServiceUtil.isError(prunResult)) {
                Debug.logError(ServiceUtil.getErrorMessage(prunResult) + " for input:" + inputMap,module);
              }
            }
          }
 catch (          GenericServiceException e) {
            String errMsg="Fatal error calling reserveStoreInventory service: " + e.toString();
            Debug.logError(e,errMsg,module);
            resErrorMessages.add(errMsg);
          }
        }
        if (UtilValidate.isNotEmpty(orderItem.getString("productId")) && "RENTAL_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId"))) {
          try {
            GenericValue product=orderItem.getRelatedOne("Product");
            if (product == null) {
              Debug.logError("Error when looking up product in reserveInventory service",module);
              resErrorMessages.add("Error when looking up product in reserveInventory service");
              continue;
            }
            String productType=(String)product.get("productTypeId");
            if ("ASSET_USAGE_OUT_IN".equals(productType)) {
              if (reserveInventory) {
                if (EntityTypeUtil.hasParentType(delegator,"ProductType","productTypeId",product.getString("productTypeId"),"parentTypeId","MARKETING_PKG_PICK")) {
                  Map<String,Object> componentsRes=dispatcher.runSync("getAssociatedProducts",UtilMisc.toMap("productId",orderItem.getString("productId"),"type","PRODUCT_COMPONENT"));
                  if (ServiceUtil.isError(componentsRes)) {
                    resErrorMessages.add((String)componentsRes.get(ModelService.ERROR_MESSAGE));
                    continue;
                  }
 else {
                    List<GenericValue> assocProducts=UtilGenerics.checkList(componentsRes.get("assocProducts"));
                    for (                    GenericValue productAssoc : assocProducts) {
                      BigDecimal quantityOrd=productAssoc.getBigDecimal("quantity");
                      BigDecimal quantityKit=orderItemShipGroupAssoc.getBigDecimal("quantity");
                      BigDecimal quantity=quantityOrd.multiply(quantityKit);
                      Map<String,Object> reserveInput=new HashMap<String,Object>();
                      reserveInput.put("productStoreId",productStoreId);
                      reserveInput.put("productId",productAssoc.getString("productIdTo"));
                      reserveInput.put("orderId",orderItem.getString("orderId"));
                      reserveInput.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
                      reserveInput.put("shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                      reserveInput.put("quantity",quantity);
                      reserveInput.put("userLogin",userLogin);
                      reserveInput.put("facilityId",shipGroupFacilityId);
                      Map<String,Object> reserveResult=dispatcher.runSync("reserveStoreInventory",reserveInput);
                      if (ServiceUtil.isError(reserveResult)) {
                        String invErrMsg="The product ";
                        if (product != null) {
                          invErrMsg+=getProductName(product,orderItem);
                        }
                        invErrMsg+=" with ID " + orderItem.getString("productId") + " is no longer in stock. Please try reducing the quantity or removing the product from this order.";
                        resErrorMessages.add(invErrMsg);
                      }
                    }
                  }
                }
 else {
                  Map<String,Object> reserveInput=new HashMap<String,Object>();
                  reserveInput.put("productStoreId",productStoreId);
                  reserveInput.put("productId",orderItem.getString("productId"));
                  reserveInput.put("orderId",orderItem.getString("orderId"));
                  reserveInput.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
                  reserveInput.put("shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                  reserveInput.put("facilityId",shipGroupFacilityId);
                  reserveInput.put("quantity",orderItemShipGroupAssoc.getBigDecimal("quantity"));
                  reserveInput.put("userLogin",userLogin);
                  Map<String,Object> reserveResult=dispatcher.runSync("reserveStoreInventory",reserveInput);
                  if (ServiceUtil.isError(reserveResult)) {
                    String invErrMsg="The product ";
                    if (product != null) {
                      invErrMsg+=getProductName(product,orderItem);
                    }
                    invErrMsg+=" with ID " + orderItem.getString("productId") + " is no longer in stock. Please try reducing the quantity or removing the product from this order.";
                    resErrorMessages.add(invErrMsg);
                  }
                }
              }
              if (EntityTypeUtil.hasParentType(delegator,"ProductType","productTypeId",product.getString("productTypeId"),"parentTypeId","MARKETING_PKG_AUTO")) {
                GenericValue permUserLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId","system"),true);
                Map<String,Object> inputMap=new HashMap<String,Object>();
                if (UtilValidate.isNotEmpty(shipGroupFacilityId)) {
                  inputMap.put("facilityId",shipGroupFacilityId);
                }
 else {
                  inputMap.put("facilityId",productStore.getString("inventoryFacilityId"));
                }
                inputMap.put("orderId",orderItem.getString("orderId"));
                inputMap.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
                inputMap.put("userLogin",permUserLogin);
                Map<String,Object> prunResult=dispatcher.runSync("createProductionRunForMktgPkg",inputMap);
                if (ServiceUtil.isError(prunResult)) {
                  Debug.logError(ServiceUtil.getErrorMessage(prunResult) + " for input:" + inputMap,module);
                }
              }
            }
          }
 catch (          GenericServiceException e) {
            String errMsg="Fatal error calling reserveStoreInventory service: " + e.toString();
            Debug.logError(e,errMsg,module);
            resErrorMessages.add(errMsg);
          }
        }
      }
    }
  }
}
