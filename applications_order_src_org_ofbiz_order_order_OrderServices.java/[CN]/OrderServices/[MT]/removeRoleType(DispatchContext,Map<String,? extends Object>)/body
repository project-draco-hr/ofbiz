{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  String partyId=(String)context.get("partyId");
  String roleTypeId=(String)context.get("roleTypeId");
  GenericValue testValue=null;
  try {
    testValue=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId).queryOne();
  }
 catch (  GenericEntityException e) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not add role to order (" + e.getMessage() + ").");
    return result;
  }
  if (testValue == null) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    return result;
  }
  try {
    GenericValue value=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId).queryOne();
    value.remove();
  }
 catch (  GenericEntityException e) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not remove role from order (" + e.getMessage() + ").");
    return result;
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
