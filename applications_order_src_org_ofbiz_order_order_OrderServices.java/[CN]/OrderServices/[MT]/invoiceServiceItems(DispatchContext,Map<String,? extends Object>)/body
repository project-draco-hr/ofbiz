{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  Locale locale=(Locale)context.get("locale");
  OrderReadHelper orh=null;
  try {
    orh=new OrderReadHelper(delegator,orderId);
  }
 catch (  IllegalArgumentException e) {
    Debug.logError(e,"ERROR: Unable to get OrderHeader for orderId : " + orderId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetOrderHeaderForOrderId",UtilMisc.toMap("orderId",orderId),locale));
  }
  List<GenericValue> orderItems=null;
  orderItems=orh.getOrderItemsByCondition(EntityCondition.makeCondition("statusId","ITEM_APPROVED"));
  List<GenericValue> serviceItems=FastList.newInstance();
  if (UtilValidate.isNotEmpty(orderItems)) {
    for (    GenericValue item : orderItems) {
      GenericValue product=null;
      try {
        product=item.getRelatedOne("Product");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"ERROR: Unable to get Product from OrderItem",module);
      }
      if (product != null) {
        if ("SERVICE".equals(product.get("productTypeId"))) {
          serviceItems.add(item);
        }
      }
    }
  }
  if (UtilValidate.isNotEmpty(serviceItems)) {
    List<GenericValue> billItems=FastList.newInstance();
    for (    GenericValue item : serviceItems) {
      BigDecimal orderQuantity=OrderReadHelper.getOrderItemQuantity(item);
      BigDecimal invoiceQuantity=OrderReadHelper.getOrderItemInvoicedQuantity(item);
      BigDecimal outstandingQuantity=orderQuantity.subtract(invoiceQuantity);
      if (outstandingQuantity.compareTo(ZERO) > 0) {
        billItems.add(item);
      }
    }
    Map<String,Object> invoiceResult=null;
    try {
      GenericValue permUserLogin=ServiceUtil.getUserLogin(dctx,context,"system");
      Map<String,Object> invoiceContext=UtilMisc.toMap("orderId",orderId,"billItems",billItems,"userLogin",permUserLogin);
      invoiceResult=dispatcher.runSync("createInvoiceForOrder",invoiceContext);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"ERROR: Unable to invoice service items",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithInvoiceCreationServiceItems",locale));
    }
    if (ModelService.RESPOND_ERROR.equals(invoiceResult.get(ModelService.RESPONSE_MESSAGE))) {
      return ServiceUtil.returnError((String)invoiceResult.get(ModelService.ERROR_MESSAGE));
    }
    for (    GenericValue item : serviceItems) {
      Map<String,Object> statusCtx=FastMap.newInstance();
      statusCtx.put("orderId",item.getString("orderId"));
      statusCtx.put("orderItemSeqId",item.getString("orderItemSeqId"));
      statusCtx.put("statusId","ITEM_COMPLETED");
      statusCtx.put("userLogin",userLogin);
      try {
        dispatcher.runSyncIgnore("changeOrderItemStatus",statusCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"ERROR: Problem setting the status to COMPLETED : " + item,module);
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
