{
  OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
  String orderTypeId=orh.getOrderTypeId();
  String partyId=null;
  GenericValue orderParty=orh.getEndUserParty();
  if (UtilValidate.isEmpty(orderParty)) {
    orderParty=orh.getPlacingParty();
  }
  if (UtilValidate.isNotEmpty(orderParty)) {
    partyId=orderParty.getString("partyId");
  }
  boolean hasPermission=hasPermission(orderTypeId,partyId,userLogin,action,security);
  if (!hasPermission) {
    GenericValue placingCustomer=null;
    try {
      Map<String,Object> placingCustomerFields=UtilMisc.<String,Object>toMap("orderId",orderId,"partyId",userLogin.getString("partyId"),"roleTypeId","PLACING_CUSTOMER");
      placingCustomer=delegator.findOne("OrderRole",placingCustomerFields,false);
    }
 catch (    GenericEntityException e) {
      Debug.logError("Could not select OrderRoles for order " + orderId + " due to "+ e.getMessage(),module);
    }
    hasPermission=(placingCustomer != null);
  }
  return hasPermission;
}
