{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  Transaction trans=null;
  try {
    trans=TransactionUtil.suspend();
    ShoppingCart cart=(ShoppingCart)context.get("shoppingCart");
    GenericValue userLogin=cart.getUserLogin();
    Boolean manualHold=(Boolean)context.get("manualHold");
    if (manualHold == null) {
      manualHold=Boolean.FALSE;
    }
    if (!"PURCHASE_ORDER".equals(cart.getOrderType())) {
      String productStoreId=cart.getProductStoreId();
      GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);
      CheckOutHelper coh=new CheckOutHelper(dispatcher,delegator,cart);
      Map payResp;
      try {
        payResp=coh.processPayment(productStore,userLogin,false,manualHold.booleanValue());
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      if (ServiceUtil.isError(payResp)) {
        return ServiceUtil.returnError("Error processing order payments: ",null,null,payResp);
      }
    }
    return ServiceUtil.returnSuccess();
  }
 catch (  GenericTransactionException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
 finally {
    try {
      TransactionUtil.resume(trans);
    }
 catch (    GenericTransactionException e) {
      Debug.logWarning(e,e.getMessage(),module);
    }
  }
}
