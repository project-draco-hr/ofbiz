{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  Locale locale=(Locale)context.get("locale");
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"ERROR: Unable to get OrderHeader for orderId : " + orderId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetOrderHeaderForOrderId",UtilMisc.toMap("orderId",orderId),locale));
  }
  List orderItems=null;
  if (orderHeader != null) {
    try {
      orderItems=orderHeader.getRelated("OrderItem");
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"ERROR: Unable to get OrderItem list for orderId : " + orderId,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetOrderItemListForOrderId",UtilMisc.toMap("orderId",orderId),locale));
    }
  }
  Map digitalProducts=new HashMap();
  List digitalItems=new ArrayList();
  if (orderItems != null && orderItems.size() > 0) {
    Iterator i=orderItems.iterator();
    while (i.hasNext()) {
      GenericValue item=(GenericValue)i.next();
      GenericValue product=null;
      try {
        product=item.getRelatedOne("Product");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"ERROR: Unable to get Product from OrderItem",module);
      }
      if (product != null) {
        GenericValue productType=null;
        try {
          productType=product.getRelatedOne("ProductType");
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"ERROR: Unable to get ProductType from Product",module);
        }
        if (productType != null) {
          String isPhysical=productType.getString("isPhysical");
          String isDigital=productType.getString("isDigital");
          if (isDigital != null && "Y".equalsIgnoreCase(isDigital)) {
            if ("ITEM_APPROVED".equals(item.getString("statusId"))) {
              digitalItems.add(item);
            }
            if (isPhysical == null || !"Y".equalsIgnoreCase(isPhysical)) {
              digitalProducts.put(item,product);
            }
          }
        }
      }
    }
  }
  if (digitalItems.size() > 0) {
    GenericValue productStore=OrderReadHelper.getProductStoreFromOrder(dispatcher.getDelegator(),orderId);
    boolean invoiceItems=true;
    if (productStore != null && productStore.get("autoInvoiceDigitalItems") != null) {
      invoiceItems="Y".equalsIgnoreCase(productStore.getString("autoInvoiceDigitalItems"));
    }
    if (invoiceItems) {
      Map invoiceResult=null;
      try {
        GenericValue permUserLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
        Map invoiceContext=UtilMisc.toMap("orderId",orderId,"billItems",digitalItems,"userLogin",permUserLogin);
        invoiceResult=dispatcher.runSync("createInvoiceForOrder",invoiceContext);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"ERROR: Unable to invoice digital items",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithInvoiceCreationDigitalItemsNotFulfilled",locale));
      }
catch (      GenericServiceException e) {
        Debug.logError(e,"ERROR: Unable to invoice digital items",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithInvoiceCreationDigitalItemsNotFulfilled",locale));
      }
      if (ModelService.RESPOND_ERROR.equals(invoiceResult.get(ModelService.RESPONSE_MESSAGE))) {
        return ServiceUtil.returnError((String)invoiceResult.get(ModelService.ERROR_MESSAGE));
      }
      Iterator dii=digitalItems.iterator();
      while (dii.hasNext()) {
        GenericValue productType=null;
        GenericValue item=(GenericValue)dii.next();
        GenericValue product=(GenericValue)digitalProducts.get(item);
        if (product != null) {
          try {
            productType=product.getRelatedOne("ProductType");
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"ERROR: Unable to get ProductType from Product",module);
          }
        }
        if (product != null && productType != null) {
          String isPhysical=productType.getString("isPhysical");
          String isDigital=productType.getString("isDigital");
          if ((isDigital != null && "Y".equalsIgnoreCase(isDigital)) && (isPhysical == null || !"Y".equalsIgnoreCase(isPhysical))) {
            Map statusCtx=new HashMap();
            statusCtx.put("orderId",item.getString("orderId"));
            statusCtx.put("orderItemSeqId",item.getString("orderItemSeqId"));
            statusCtx.put("statusId","ITEM_COMPLETED");
            statusCtx.put("userLogin",userLogin);
            try {
              dispatcher.runSyncIgnore("changeOrderItemStatus",statusCtx);
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,"ERROR: Problem setting the status to COMPLETED : " + item,module);
            }
          }
        }
      }
    }
    Map fulfillContext=UtilMisc.toMap("orderId",orderId,"orderItems",digitalItems,"userLogin",userLogin);
    Map fulfillResult=null;
    try {
      fulfillResult=dispatcher.runSync("fulfillDigitalItems",fulfillContext,300,true);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"ERROR: Unable to fulfill digital items",module);
    }
    if (ModelService.RESPOND_ERROR.equals(fulfillResult.get(ModelService.RESPONSE_MESSAGE))) {
      return ServiceUtil.returnSuccess((String)fulfillResult.get(ModelService.ERROR_MESSAGE));
    }
  }
  return ServiceUtil.returnSuccess();
}
