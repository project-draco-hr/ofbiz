{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  String paymentRefNum=(String)context.get("paymentRefNum");
  String paymentFromId=(String)context.get("paymentFromId");
  String comments=(String)context.get("comments");
  Timestamp eventDate=(Timestamp)context.get("eventDate");
  Locale locale=(Locale)context.get("locale");
  if (UtilValidate.isEmpty(eventDate)) {
    eventDate=UtilDateTime.nowTimestamp();
  }
  try {
    GenericValue orderPaymentPreference=delegator.findOne("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId),false);
    if (orderPaymentPreference == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreated",UtilMisc.toMap("orderPaymentPreferenceId","orderPaymentPreferenceId"),locale));
    }
    GenericValue orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader",false);
    if (orderHeader == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedWithRelatedOrderHeader",locale));
    }
    GenericValue productStore=orderHeader.getRelatedOne("ProductStore",false);
    if (productStore == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedWithRelatedProductStore",locale));
    }
    if (paymentFromId == null) {
      OrderReadHelper orh=new OrderReadHelper(orderHeader);
      GenericValue billToParty=orh.getBillToParty();
      if (billToParty != null) {
        paymentFromId=billToParty.getString("partyId");
      }
 else {
        paymentFromId="_NA_";
      }
    }
    String payToPartyId=productStore.getString("payToPartyId");
    if (payToPartyId == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedPayToPartyIdNotSet",locale));
    }
    Map<String,Object> paymentParams=new HashMap<String,Object>();
    BigDecimal maxAmount=orderPaymentPreference.getBigDecimal("maxAmount");
    paymentParams.put("paymentTypeId","CUSTOMER_PAYMENT");
    paymentParams.put("paymentMethodTypeId",orderPaymentPreference.getString("paymentMethodTypeId"));
    paymentParams.put("paymentPreferenceId",orderPaymentPreference.getString("orderPaymentPreferenceId"));
    paymentParams.put("amount",maxAmount);
    paymentParams.put("statusId","PMNT_RECEIVED");
    paymentParams.put("effectiveDate",eventDate);
    paymentParams.put("partyIdFrom",paymentFromId);
    paymentParams.put("currencyUomId",productStore.getString("defaultCurrencyUomId"));
    paymentParams.put("partyIdTo",payToPartyId);
    if (paymentRefNum != null) {
      paymentParams.put("paymentRefNum",paymentRefNum);
    }
    if (comments != null) {
      paymentParams.put("comments",comments);
    }
    paymentParams.put("userLogin",userLogin);
    return dispatcher.runSync("createPayment",paymentParams);
  }
 catch (  GenericEntityException ex) {
    Debug.logError(ex,"Unable to create payment using payment preference.",module);
    return (ServiceUtil.returnError(ex.getMessage()));
  }
catch (  GenericServiceException ex) {
    Debug.logError(ex,"Unable to create payment using payment preference.",module);
    return (ServiceUtil.returnError(ex.getMessage()));
  }
}
