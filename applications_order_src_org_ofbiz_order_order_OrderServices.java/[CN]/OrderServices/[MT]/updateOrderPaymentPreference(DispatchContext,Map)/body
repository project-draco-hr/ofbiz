{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  String checkOutPaymentId=(String)context.get("checkOutPaymentId");
  String statusId=(String)context.get("statusId");
  Locale locale=(Locale)context.get("locale");
  try {
    GenericValue opp=delegator.findByPrimaryKey("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId));
    String paymentMethodId=null;
    String paymentMethodTypeId=null;
    if (checkOutPaymentId != null) {
      List paymentMethodTypes=delegator.findList("PaymentMethodType",null,null,null,null,true);
      for (Iterator iter=paymentMethodTypes.iterator(); iter.hasNext(); ) {
        GenericValue type=(GenericValue)iter.next();
        if (type.get("paymentMethodTypeId").equals(checkOutPaymentId)) {
          paymentMethodTypeId=(String)type.get("paymentMethodTypeId");
          break;
        }
      }
      if (paymentMethodTypeId == null) {
        GenericValue method=delegator.findByPrimaryKey("PaymentMethod",UtilMisc.toMap("paymentMethodTypeId",paymentMethodTypeId));
        paymentMethodId=checkOutPaymentId;
        paymentMethodTypeId=(String)method.get("paymentMethodTypeId");
      }
    }
    Map results=ServiceUtil.returnSuccess();
    if (UtilValidate.isNotEmpty(statusId) && statusId.equalsIgnoreCase("PAYMENT_CANCELLED")) {
      opp.set("statusId","PAYMENT_CANCELLED");
      opp.store();
      results.put("orderPaymentPreferenceId",opp.get("orderPaymentPreferenceId"));
    }
 else {
      GenericValue newOpp=(GenericValue)opp.clone();
      opp.set("statusId","PAYMENT_CANCELLED");
      opp.store();
      newOpp.set("orderPaymentPreferenceId",delegator.getNextSeqId("OrderPaymentPreference"));
      newOpp.set("paymentMethodId",paymentMethodId);
      newOpp.set("paymentMethodTypeId",paymentMethodTypeId);
      newOpp.setNonPKFields(context);
      newOpp.create();
      results.put("orderPaymentPreferenceId",newOpp.get("orderPaymentPreferenceId"));
    }
    return results;
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
}
