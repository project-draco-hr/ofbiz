{
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String orderId=(String)context.get("orderId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  GenericValue orderHeader=null;
  GenericValue orderItemToCheck=null;
  BigDecimal orderItemTotalValue=ZERO;
  BigDecimal invoicedQuantity=ZERO;
  try {
    orderHeader=delegator.findOne("OrderHeader",UtilMisc.toMap("orderId",orderId),false);
    if (UtilValidate.isEmpty(orderHeader)) {
      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderIdNotFound",context,locale);
      Debug.logError(errorMessage,module);
      return ServiceUtil.returnError(errorMessage);
    }
    orderItemToCheck=delegator.findOne("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId),false);
    if (UtilValidate.isEmpty(orderItemToCheck)) {
      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderItemNotFound",context,locale);
      Debug.logError(errorMessage,module);
      return ServiceUtil.returnError(errorMessage);
    }
    BigDecimal orderItemsSubtotal=ZERO;
    BigDecimal invoicedTotal=ZERO;
    BigDecimal itemAdjustments=ZERO;
    List<GenericValue> orderItems=orderHeader.getRelated("OrderItem",null,UtilMisc.toList("orderItemSeqId"),false);
    for (    GenericValue orderItem : orderItems) {
      List<GenericValue> orderItemBillings=delegator.findByAnd("OrderItemBilling",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId")),null,false);
      for (      GenericValue orderItemBilling : orderItemBillings) {
        BigDecimal quantity=orderItemBilling.getBigDecimal("quantity");
        BigDecimal amount=orderItemBilling.getBigDecimal("amount").setScale(orderDecimals,orderRounding);
        if (UtilValidate.isEmpty(invoicedQuantity) || UtilValidate.isEmpty(amount))         continue;
        orderItemsSubtotal=orderItemsSubtotal.add(quantity.multiply(amount));
        if (orderItemSeqId.equals(orderItem.get("orderItemSeqId"))) {
          invoicedQuantity=invoicedQuantity.add(quantity);
          invoicedTotal=invoicedTotal.add(quantity.multiply(amount));
        }
      }
      List<GenericValue> orderAdjustments=delegator.findByAnd("OrderAdjustment",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId")),null,false);
      for (      GenericValue orderAdjustment : orderAdjustments) {
        String orderAdjustmentTypeId=orderAdjustment.getString("orderAdjustmentTypeId");
        List<GenericValue> orderAdjustmentBillings=delegator.findByAnd("OrderAdjustmentBilling",UtilMisc.toMap("orderAdjustmentId",orderAdjustment.get("orderAdjustmentId")),null,false);
        for (        GenericValue orderAjustmentBilling : orderAdjustmentBillings) {
          BigDecimal amount=orderAjustmentBilling.getBigDecimal("amount").setScale(orderDecimals,orderRounding);
          if (UtilValidate.isEmpty(amount))           continue;
          if ("SALES_TAX".equals(orderAdjustmentTypeId) || "SHIPPING_CHARGES".equals(orderAdjustmentTypeId)) {
            if (orderItemSeqId.equals(orderItem.get("orderItemSeqId"))) {
              itemAdjustments=itemAdjustments.add(amount);
            }
          }
 else {
            orderItemsSubtotal=orderItemsSubtotal.add(amount);
            if (orderItemSeqId.equals(orderItem.get("orderItemSeqId"))) {
              invoicedTotal=invoicedTotal.add(amount);
            }
          }
        }
      }
    }
    BigDecimal orderHeaderAdjustmentsTotalValue=ZERO;
    List<GenericValue> orderHeaderAdjustments=delegator.findByAnd("OrderAdjustment",UtilMisc.toMap("orderId",orderId,"orderItemSeqId","_NA_"),null,false);
    for (    GenericValue orderHeaderAdjustment : orderHeaderAdjustments) {
      List<GenericValue> orderHeaderAdjustmentBillings=delegator.findByAnd("OrderAdjustmentBilling",UtilMisc.toMap("orderAdjustmentId",orderHeaderAdjustment.get("orderAdjustmentId")),null,false);
      for (      GenericValue orderHeaderAdjustmentBilling : orderHeaderAdjustmentBillings) {
        BigDecimal amount=orderHeaderAdjustmentBilling.getBigDecimal("amount").setScale(orderDecimals,orderRounding);
        if (UtilValidate.isEmpty(amount))         continue;
        orderHeaderAdjustmentsTotalValue=orderHeaderAdjustmentsTotalValue.add(amount);
      }
    }
    BigDecimal invoicedAmountProportion=ZERO;
    if (orderItemsSubtotal.signum() != 0) {
      invoicedAmountProportion=invoicedTotal.divide(orderItemsSubtotal,5,orderRounding);
    }
    BigDecimal orderItemHeaderAjustmentAmount=orderHeaderAdjustmentsTotalValue.multiply(invoicedAmountProportion);
    orderItemTotalValue=invoicedTotal.add(orderItemHeaderAjustmentAmount);
    orderItemTotalValue=orderItemTotalValue.add(itemAdjustments);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("invoicedAmount",orderItemTotalValue.setScale(orderDecimals,orderRounding));
  result.put("invoicedQuantity",invoicedQuantity.setScale(orderDecimals,orderRounding));
  return result;
}
