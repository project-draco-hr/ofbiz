{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Double cancelQuantity=(Double)context.get("cancelQuantity");
  String orderId=(String)context.get("orderId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  String shipGroupSeqId=(String)context.get("shipGroupSeqId");
  Map itemReasonMap=(Map)context.get("itemReasonMap");
  Map itemCommentMap=(Map)context.get("itemCommentMap");
  String itemMsgInfo=orderId + " / " + orderItemSeqId+ " / "+ shipGroupSeqId;
  Security security=ctx.getSecurity();
  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);
  if (!hasPermission) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));
  }
  Map fields=UtilMisc.toMap("orderId",orderId);
  if (orderItemSeqId != null) {
    fields.put("orderItemSeqId",orderItemSeqId);
  }
  if (shipGroupSeqId != null) {
    fields.put("shipGroupSeqId",shipGroupSeqId);
  }
  List orderItemShipGroupAssocs=null;
  try {
    orderItemShipGroupAssocs=delegator.findByAnd("OrderItemShipGroupAssoc",fields);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderItemAssocEntity",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));
  }
  if (orderItemShipGroupAssocs != null) {
    Iterator i=orderItemShipGroupAssocs.iterator();
    while (i.hasNext()) {
      GenericValue orderItemShipGroupAssoc=(GenericValue)i.next();
      GenericValue orderItem=null;
      try {
        orderItem=orderItemShipGroupAssoc.getRelatedOne("OrderItem");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      if (orderItem == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCancelItemItemNotFound",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));
      }
      Double aisgaCancelQuantity=orderItemShipGroupAssoc.getDouble("cancelQuantity");
      if (aisgaCancelQuantity == null) {
        aisgaCancelQuantity=new Double(0.0);
      }
      Double availableQuantity=Double.valueOf(orderItemShipGroupAssoc.getDouble("quantity").doubleValue() - aisgaCancelQuantity.doubleValue());
      Double itemCancelQuantity=orderItem.getDouble("cancelQuantity");
      if (itemCancelQuantity == null) {
        itemCancelQuantity=new Double(0.0);
      }
      Double itemQuantity=Double.valueOf(orderItem.getDouble("quantity").doubleValue() - itemCancelQuantity.doubleValue());
      if (availableQuantity == null)       availableQuantity=new Double(0.0);
      if (itemQuantity == null)       itemQuantity=new Double(0.0);
      Double thisCancelQty=null;
      if (cancelQuantity != null) {
        thisCancelQty=new Double(cancelQuantity.doubleValue());
      }
 else {
        thisCancelQty=new Double(availableQuantity.doubleValue());
      }
      if (availableQuantity.doubleValue() >= thisCancelQty.doubleValue()) {
        if (availableQuantity.doubleValue() == 0) {
          continue;
        }
        orderItem.set("cancelQuantity",Double.valueOf(itemCancelQuantity.doubleValue() + thisCancelQty.doubleValue()));
        orderItemShipGroupAssoc.set("cancelQuantity",Double.valueOf(aisgaCancelQuantity.doubleValue() + thisCancelQty.doubleValue()));
        try {
          List toStore=UtilMisc.toList(orderItem,orderItemShipGroupAssoc);
          delegator.storeAll(toStore);
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToSetCancelQuantity",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));
        }
        if (!"Y".equals(orderItem.getString("isPromo"))) {
          String reasonEnumId=null;
          String changeComments=null;
          if (UtilValidate.isNotEmpty(itemReasonMap)) {
            reasonEnumId=(String)itemReasonMap.get(orderItem.getString("orderItemSeqId"));
          }
          if (UtilValidate.isNotEmpty(itemCommentMap)) {
            changeComments=(String)itemCommentMap.get(orderItem.getString("orderItemSeqId"));
          }
          Map serviceCtx=FastMap.newInstance();
          serviceCtx.put("orderId",orderItem.getString("orderId"));
          serviceCtx.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
          serviceCtx.put("cancelQuantity",thisCancelQty);
          serviceCtx.put("changeTypeEnumId","ODR_ITM_CANCEL");
          serviceCtx.put("reasonEnumId",reasonEnumId);
          serviceCtx.put("changeComments",changeComments);
          serviceCtx.put("userLogin",userLogin);
          Map resp=null;
          try {
            resp=dispatcher.runSync("createOrderItemChange",serviceCtx);
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
          if (ServiceUtil.isError(resp)) {
            return ServiceUtil.returnError((String)resp.get(ModelService.ERROR_MESSAGE));
          }
        }
        if (thisCancelQty.doubleValue() >= itemQuantity.doubleValue()) {
          Map statusCtx=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"),"statusId","ITEM_CANCELLED","userLogin",userLogin);
          try {
            dispatcher.runSyncIgnore("changeOrderItemStatus",statusCtx);
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToCancelOrderLine",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));
          }
        }
 else {
          Map invCtx=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId,"cancelQuantity",thisCancelQty,"userLogin",userLogin);
          try {
            dispatcher.runSyncIgnore("cancelOrderItemInvResQty",invCtx);
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToUpdateInventoryReservations",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));
          }
        }
      }
 else {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderInvalidCancelQuantityCannotCancel",UtilMisc.toMap("thisCancelQty",thisCancelQty),locale));
      }
    }
  }
 else {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCancelItemItemNotFound",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));
  }
  return ServiceUtil.returnSuccess();
}
