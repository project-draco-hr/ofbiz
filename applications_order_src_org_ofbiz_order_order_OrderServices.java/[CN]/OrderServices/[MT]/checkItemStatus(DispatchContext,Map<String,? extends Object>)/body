{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  Security security=ctx.getSecurity();
  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);
  if (!hasPermission) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));
  }
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findOne("OrderHeader",UtilMisc.toMap("orderId",orderId),false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot get OrderHeader record",module);
  }
  if (orderHeader == null) {
    Debug.logError("OrderHeader came back as null",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCannotUpdateNullOrderHeader",UtilMisc.toMap("orderId",orderId),locale));
  }
  List<GenericValue> orderItems=null;
  try {
    orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot get OrderItem records",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemGettingOrderItemRecords",locale));
  }
  String orderHeaderStatusId=orderHeader.getString("statusId");
  String orderTypeId=orderHeader.getString("orderTypeId");
  boolean allCanceled=true;
  boolean allComplete=true;
  boolean allApproved=true;
  if (orderItems != null) {
    for (    GenericValue item : orderItems) {
      String statusId=item.getString("statusId");
      if (!"ITEM_CANCELLED".equals(statusId)) {
        allCanceled=false;
        if (!"ITEM_COMPLETED".equals(statusId)) {
          allComplete=false;
          if (!"ITEM_APPROVED".equals(statusId)) {
            allApproved=false;
            break;
          }
        }
      }
    }
    String newStatus=null;
    if (allCanceled) {
      if (!"PURCHASE_ORDER".equals(orderTypeId)) {
        newStatus="ORDER_CANCELLED";
      }
    }
 else     if (allComplete) {
      newStatus="ORDER_COMPLETED";
    }
 else     if (allApproved) {
      boolean changeToApprove=true;
      if (UtilValidate.isNotEmpty(orderHeader.getString("productStoreId"))) {
        try {
          GenericValue productStore=delegator.findOne("ProductStore",UtilMisc.toMap("productStoreId",orderHeader.getString("productStoreId")),false);
          if (productStore != null) {
            String headerApprovedStatus=productStore.getString("headerApprovedStatus");
            if (UtilValidate.isNotEmpty(headerApprovedStatus)) {
              if (headerApprovedStatus.equals(orderHeaderStatusId)) {
                Map<String,Object> orderStatusCheckMap=UtilMisc.<String,Object>toMap("orderId",orderId,"statusId",headerApprovedStatus,"orderItemSeqId",null);
                List<GenericValue> orderStatusList=delegator.findByAnd("OrderStatus",orderStatusCheckMap,null,false);
                if (orderStatusList.size() <= 1) {
                  changeToApprove=false;
                }
              }
            }
          }
        }
 catch (        GenericEntityException e) {
          String errMsg="Database error checking if we should change order header status to approved: " + e.toString();
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
      }
      if ("ORDER_SENT".equals(orderHeaderStatusId))       changeToApprove=false;
      if ("ORDER_COMPLETED".equals(orderHeaderStatusId)) {
        if ("SALES_ORDER".equals(orderTypeId)) {
          changeToApprove=false;
        }
      }
      if ("ORDER_CANCELLED".equals(orderHeaderStatusId))       changeToApprove=false;
      if (changeToApprove) {
        newStatus="ORDER_APPROVED";
      }
    }
    if (newStatus != null && !newStatus.equals(orderHeaderStatusId)) {
      Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("orderId",orderId,"statusId",newStatus,"userLogin",userLogin);
      Map<String,Object> newSttsResult=null;
      try {
        newSttsResult=dispatcher.runSync("changeOrderStatus",serviceContext);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem calling the changeOrderStatus service",module);
      }
      if (ServiceUtil.isError(newSttsResult)) {
        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(newSttsResult));
      }
    }
  }
 else {
    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderReceivedNullForOrderItemRecordsOrderId",UtilMisc.toMap("orderId",orderId),locale),module);
  }
  return ServiceUtil.returnSuccess();
}
