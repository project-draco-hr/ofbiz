{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  List ordersToCheck=null;
  List exprs=new ArrayList();
  exprs.add(new EntityExpr("orderTypeId",EntityOperator.EQUALS,"SALES_ORDER"));
  exprs.add(new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"ORDER_COMPLETED"));
  exprs.add(new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"ORDER_CANCELLED"));
  exprs.add(new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"ORDER_REJECTED"));
  try {
    ordersToCheck=delegator.findByAnd("OrderHeader",exprs,UtilMisc.toList("orderDate"));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting order headers",module);
  }
  if (ordersToCheck == null || ordersToCheck.size() == 0) {
    Debug.logInfo("No orders to check, finished",module);
    return ServiceUtil.returnSuccess();
  }
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  Iterator i=ordersToCheck.iterator();
  while (i.hasNext()) {
    GenericValue orderHeader=(GenericValue)i.next();
    String orderId=orderHeader.getString("orderId");
    String orderStatus=orderHeader.getString("statusId");
    if (orderStatus.equals("ORDER_CREATED")) {
      Timestamp orderDate=orderHeader.getTimestamp("entryDate");
      GenericValue productStore=null;
      try {
        productStore=orderHeader.getRelatedOne("ProductStore");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Unable to get ProductStore from OrderHeader",module);
      }
      int daysTillCancel=30;
      if (productStore != null && productStore.get("daysToCancelNonPay") != null) {
        daysTillCancel=productStore.getLong("daysToCancelNonPay").intValue();
      }
      if (daysTillCancel > 0) {
        Calendar cal=Calendar.getInstance();
        cal.setTimeInMillis(orderDate.getTime());
        cal.add(Calendar.DAY_OF_YEAR,daysTillCancel);
        Date cancelDate=cal.getTime();
        Date nowDate=new Date();
        if (cancelDate.equals(nowDate) || nowDate.after(cancelDate)) {
          Map svcCtx=UtilMisc.toMap("orderId",orderId,"statusId","ITEM_CANCELLED","userLogin",userLogin);
          try {
            Map ores=dispatcher.runSync("changeOrderItemStatus",svcCtx);
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,"Problem calling change item status service : " + svcCtx,module);
          }
        }
      }
    }
 else {
      List itemsExprs=new ArrayList();
      itemsExprs.add(new EntityExpr("orderId",EntityOperator.EQUALS,orderId));
      itemsExprs.add(new EntityConditionList(UtilMisc.toList(new EntityExpr("statusId",EntityOperator.EQUALS,"ITEM_CREATED"),new EntityExpr("statusId",EntityOperator.EQUALS,"ITEM_APPROVED")),EntityOperator.OR));
      itemsExprs.add(new EntityExpr("dontCancelSetUserLogin",EntityOperator.EQUALS,GenericEntity.NULL_FIELD));
      itemsExprs.add(new EntityExpr("dontCancelSetDate",EntityOperator.EQUALS,GenericEntity.NULL_FIELD));
      itemsExprs.add(new EntityExpr("autoCancelDate",EntityOperator.NOT_EQUAL,GenericEntity.NULL_FIELD));
      List orderItems=null;
      try {
        orderItems=delegator.findByAnd("OrderItem",itemsExprs,null);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problem getting order item records",module);
      }
      if (orderItems != null && orderItems.size() > 0) {
        Iterator oii=orderItems.iterator();
        while (oii.hasNext()) {
          GenericValue orderItem=(GenericValue)oii.next();
          String orderItemSeqId=orderItem.getString("orderItemSeqId");
          Timestamp autoCancelDate=orderItem.getTimestamp("autoCancelDate");
          if (autoCancelDate != null) {
            if (nowTimestamp.equals(autoCancelDate) || nowTimestamp.after(autoCancelDate)) {
              Map svcCtx=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"statusId","ITEM_CANCELLED","userLogin",userLogin);
              try {
                Map res=dispatcher.runSync("changeOrderItemStatus",svcCtx);
              }
 catch (              GenericServiceException e) {
                Debug.logError(e,"Problem calling change item status service : " + svcCtx,module);
              }
            }
          }
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
