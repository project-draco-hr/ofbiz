{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  String paymentRefNum=(String)context.get("paymentRefNum");
  String paymentFromId=(String)context.get("paymentFromId");
  String comments=(String)context.get("comments");
  try {
    GenericValue orderPaymentPreference=delegator.findByPrimaryKey("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId));
    if (orderPaymentPreference == null) {
      return ServiceUtil.returnError("Failed to create Payment: Cannot find OrderPaymentPreference with orderPaymentPreferenceId " + orderPaymentPreferenceId);
    }
    GenericValue orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader");
    if (orderHeader == null) {
      return ServiceUtil.returnError("Failed to create Payment: Cannot get related OrderHeader from payment preference");
    }
    GenericValue productStore=orderHeader.getRelatedOne("ProductStore");
    if (productStore == null) {
      return ServiceUtil.returnError("Failed to create Payment: Cannot get the ProductStore for the order header");
    }
    OrderReadHelper orh=new OrderReadHelper(orderHeader);
    GenericValue billToParty=orh.getBillToParty();
    if (billToParty == null) {
      return ServiceUtil.returnError("Failed to create Payment: cannot find the bill to customer party");
    }
    String payToPartyId=productStore.getString("payToPartyId");
    if (payToPartyId == null) {
      return ServiceUtil.returnError("Failed to create Payment: Cannot get the ProductStore for the order header");
    }
    Map paymentParams=new HashMap();
    double maxAmount=orderPaymentPreference.getDouble("maxAmount").doubleValue();
    paymentParams.put("paymentTypeId","CUSTOMER_PAYMENT");
    paymentParams.put("paymentMethodTypeId",orderPaymentPreference.getString("paymentMethodTypeId"));
    paymentParams.put("paymentPreferenceId",orderPaymentPreference.getString("orderPaymentPreferenceId"));
    paymentParams.put("amount",new Double(maxAmount));
    paymentParams.put("statusId","PMNT_RECEIVED");
    paymentParams.put("effectiveDate",UtilDateTime.nowTimestamp());
    paymentParams.put("partyIdFrom",billToParty.getString("partyId"));
    paymentParams.put("currencyUomId",productStore.getString("defaultCurrencyUomId"));
    paymentParams.put("partyIdTo",payToPartyId);
    if (paymentRefNum != null) {
      paymentParams.put("paymentRefNum",paymentRefNum);
    }
    if (paymentFromId != null) {
      paymentParams.put("partyIdFrom",paymentFromId);
    }
 else {
      paymentParams.put("partyIdFrom","_NA_");
    }
    if (comments != null) {
      paymentParams.put("comments",comments);
    }
    paymentParams.put("userLogin",userLogin);
    return dispatcher.runSync("createPayment",paymentParams);
  }
 catch (  GenericEntityException ex) {
    Debug.logError(ex,"Unable to create payment using payment preference.",module);
    return (ServiceUtil.returnError(ex.getMessage()));
  }
catch (  GenericServiceException ex) {
    Debug.logError(ex,"Unable to create payment using payment preference.",module);
    return (ServiceUtil.returnError(ex.getMessage()));
  }
}
