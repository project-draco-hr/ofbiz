{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Delegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Security security=ctx.getSecurity();
  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);
  if (!hasPermission) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));
  }
  GenericValue orderHeader=null;
  try {
    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderHeaderEntity",locale) + e.getMessage());
  }
  if (orderHeader == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorNoValidOrderHeaderFoundForOrderId",UtilMisc.toMap("orderId",orderId),locale));
  }
  List<GenericValue> orderTaxAdjustments=null;
  try {
    orderTaxAdjustments=EntityQuery.use(delegator).from("OrderAdjustment").where("orderId",orderId,"orderAdjustmentTypeId","SALES_TAX").queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to retrieve SALES_TAX adjustments for order : " + orderId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToRetrieveSalesTaxAdjustments",locale));
  }
  BigDecimal totalExistingOrderTax=ZERO;
  for (  GenericValue orderTaxAdjustment : orderTaxAdjustments) {
    if (orderTaxAdjustment.get("amount") != null) {
      totalExistingOrderTax=totalExistingOrderTax.add(orderTaxAdjustment.getBigDecimal("amount").setScale(taxDecimals,taxRounding));
    }
  }
  BigDecimal totalNewOrderTax=ZERO;
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  List<GenericValue> shipGroups=orh.getOrderItemShipGroups();
  if (shipGroups != null) {
    for (    GenericValue shipGroup : shipGroups) {
      String shipGroupSeqId=shipGroup.getString("shipGroupSeqId");
      List<GenericValue> validOrderItems=orh.getValidOrderItems(shipGroupSeqId);
      if (validOrderItems != null) {
        List<GenericValue> products=new ArrayList<GenericValue>(validOrderItems.size());
        List<BigDecimal> amounts=new ArrayList<BigDecimal>(validOrderItems.size());
        List<BigDecimal> shipAmts=new ArrayList<BigDecimal>(validOrderItems.size());
        List<BigDecimal> itPrices=new ArrayList<BigDecimal>(validOrderItems.size());
        List<BigDecimal> itQuantities=new ArrayList<BigDecimal>(validOrderItems.size());
        List<GenericValue> allAdjustments=orh.getAdjustments();
        List<GenericValue> orderHeaderAdjustments=OrderReadHelper.getOrderHeaderAdjustments(allAdjustments,shipGroupSeqId);
        BigDecimal orderSubTotal=OrderReadHelper.getOrderItemsSubTotal(validOrderItems,allAdjustments);
        BigDecimal orderShipping=OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments,orderSubTotal,false,false,true);
        BigDecimal orderPromotions=OrderReadHelper.calcOrderPromoAdjustmentsBd(allAdjustments);
        for (int i=0; i < validOrderItems.size(); i++) {
          GenericValue orderItem=validOrderItems.get(i);
          String productId=orderItem.getString("productId");
          try {
            products.add(i,EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne());
            amounts.add(i,OrderReadHelper.getOrderItemSubTotal(orderItem,allAdjustments,true,false));
            shipAmts.add(i,OrderReadHelper.getOrderItemAdjustmentsTotal(orderItem,allAdjustments,false,false,true));
            itPrices.add(i,orderItem.getBigDecimal("unitPrice"));
            itQuantities.add(i,orderItem.getBigDecimal("quantity"));
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"Cannot read order item entity : " + orderItem,module);
            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCannotReadTheOrderItemEntity",locale));
          }
        }
        GenericValue shippingAddress=orh.getShippingAddress(shipGroupSeqId);
        if (shippingAddress == null) {
          List<GenericValue> billingAddressList=orh.getBillingLocations();
          if (billingAddressList.size() > 0) {
            shippingAddress=billingAddressList.get(0);
          }
        }
        if (shippingAddress == null) {
          String facilityId=orderHeader.getString("originFacilityId");
          if (facilityId != null) {
            GenericValue facilityContactMech=ContactMechWorker.getFacilityContactMechByPurpose(delegator,facilityId,UtilMisc.toList("SHIP_ORIG_LOCATION","PRIMARY_LOCATION"));
            if (facilityContactMech != null) {
              try {
                shippingAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",facilityContactMech.getString("contactMechId")).queryOne();
              }
 catch (              GenericEntityException e) {
                Debug.logError(e,module);
              }
            }
          }
        }
        if (shippingAddress == null) {
          Debug.logWarning("Not calculating tax for Order [" + orderId + "] because there is no shippingAddress, and no address on the origin facility ["+ orderHeader.getString("originFacilityId")+ "]",module);
          continue;
        }
        Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("productStoreId",orh.getProductStoreId(),"itemProductList",products,"itemAmountList",amounts,"itemShippingList",shipAmts,"itemPriceList",itPrices,"itemQuantityList",itQuantities,"orderShippingAmount",orderShipping);
        serviceContext.put("shippingAddress",shippingAddress);
        serviceContext.put("orderPromotionsAmount",orderPromotions);
        if (orh.getBillToParty() != null)         serviceContext.put("billToPartyId",orh.getBillToParty().getString("partyId"));
        if (orh.getBillFromParty() != null)         serviceContext.put("payToPartyId",orh.getBillFromParty().getString("partyId"));
        Map<String,Object> serviceResult=null;
        try {
          serviceResult=dispatcher.runSync("calcTax",serviceContext);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemOccurredInTaxService",locale));
        }
        if (ServiceUtil.isError(serviceResult)) {
          return ServiceUtil.returnError(ServiceUtil.getErrorMessage(serviceResult));
        }
        List<GenericValue> orderAdj=UtilGenerics.checkList(serviceResult.get("orderAdjustments"));
        List<List<GenericValue>> itemAdj=UtilGenerics.checkList(serviceResult.get("itemAdjustments"));
        if (UtilValidate.isNotEmpty(orderAdj)) {
          for (          GenericValue oa : orderAdj) {
            if (oa.get("amount") != null) {
              totalNewOrderTax=totalNewOrderTax.add(oa.getBigDecimal("amount").setScale(taxDecimals,taxRounding));
            }
          }
        }
        if (UtilValidate.isNotEmpty(itemAdj)) {
          for (int i=0; i < itemAdj.size(); i++) {
            List<GenericValue> itemAdjustments=itemAdj.get(i);
            for (            GenericValue ia : itemAdjustments) {
              if (ia.get("amount") != null) {
                totalNewOrderTax=totalNewOrderTax.add(ia.getBigDecimal("amount").setScale(taxDecimals,taxRounding));
              }
            }
          }
        }
      }
    }
    BigDecimal orderTaxDifference=totalNewOrderTax.subtract(totalExistingOrderTax).setScale(taxDecimals,taxRounding);
    if (orderTaxDifference.signum() != 0) {
      Map<String,Object> createOrderAdjContext=new HashMap<String,Object>();
      createOrderAdjContext.put("orderAdjustmentTypeId","SALES_TAX");
      createOrderAdjContext.put("orderId",orderId);
      if (UtilValidate.isNotEmpty(orderItemSeqId)) {
        createOrderAdjContext.put("orderItemSeqId",orderItemSeqId);
      }
 else {
        createOrderAdjContext.put("orderItemSeqId","_NA_");
      }
      createOrderAdjContext.put("shipGroupSeqId","_NA_");
      createOrderAdjContext.put("description","Tax adjustment due to order change");
      createOrderAdjContext.put("amount",orderTaxDifference);
      createOrderAdjContext.put("userLogin",userLogin);
      Map<String,Object> createOrderAdjResponse=null;
      try {
        createOrderAdjResponse=dispatcher.runSync("createOrderAdjustment",createOrderAdjContext);
      }
 catch (      GenericServiceException e) {
        String createOrderAdjErrMsg=UtilProperties.getMessage(resource_error,"OrderErrorCallingCreateOrderAdjustmentService",locale);
        Debug.logError(createOrderAdjErrMsg,module);
        return ServiceUtil.returnError(createOrderAdjErrMsg);
      }
      if (ServiceUtil.isError(createOrderAdjResponse)) {
        Debug.logError(ServiceUtil.getErrorMessage(createOrderAdjResponse),module);
        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(createOrderAdjResponse));
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
