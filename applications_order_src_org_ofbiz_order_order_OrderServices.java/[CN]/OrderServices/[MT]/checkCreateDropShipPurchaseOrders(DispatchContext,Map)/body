{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String orderId=(String)context.get("orderId");
  OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
  try {
    if ("SALES_ORDER".equals(orh.getOrderTypeId())) {
      Iterator shipGroups=orh.getOrderItemShipGroups().iterator();
      while (shipGroups.hasNext()) {
        GenericValue shipGroup=(GenericValue)shipGroups.next();
        if (!UtilValidate.isEmpty(shipGroup.getString("supplierPartyId"))) {
          String supplierPartyId=shipGroup.getString("supplierPartyId");
          ShoppingCart cart=new ShoppingCart(delegator,orh.getProductStoreId(),null,orh.getCurrency());
          cart.setOrderType("PURCHASE_ORDER");
          cart.setBillToCustomerPartyId(cart.getBillFromVendorPartyId());
          cart.setBillFromVendorPartyId(supplierPartyId);
          cart.setOrderPartyId(supplierPartyId);
          Iterator items=orh.getValidOrderItems(shipGroup.getString("shipGroupSeqId")).iterator();
          while (items.hasNext()) {
            GenericValue item=(GenericValue)items.next();
            try {
              int itemIndex=cart.addOrIncreaseItem(item.getString("productId"),null,item.getDouble("quantity").doubleValue(),null,null,null,item.getTimestamp("shipBeforeDate"),item.getTimestamp("shipAfterDate"),null,null,null,null,null,null,dispatcher);
              ShoppingCartItem sci=cart.findCartItem(itemIndex);
              sci.setAssociatedOrderId(orderId);
              sci.setAssociatedOrderItemSeqId(item.getString("orderItemSeqId"));
            }
 catch (            Exception e) {
              ServiceUtil.returnError("The following error occurred creating drop shipments for order [" + orderId + "]: "+ e.getMessage());
            }
          }
          cart.setDefaultCheckoutOptions(dispatcher);
          cart.setShippingContactMechId(shipGroup.getString("contactMechId"));
          CheckOutHelper coh=new CheckOutHelper(dispatcher,delegator,cart);
          Map resultOrderMap=coh.createOrder(userLogin);
          String purchaseOrderId=(String)resultOrderMap.get("orderId");
        }
      }
    }
  }
 catch (  Exception exc) {
    ServiceUtil.returnError("The following error occurred creating drop shipments for order [" + orderId + "]: "+ exc.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
