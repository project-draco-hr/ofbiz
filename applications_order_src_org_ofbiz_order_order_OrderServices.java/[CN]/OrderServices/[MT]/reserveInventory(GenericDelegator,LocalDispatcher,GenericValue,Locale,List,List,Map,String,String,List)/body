{
  boolean isImmediatelyFulfilled=false;
  GenericValue productStore=null;
  if (UtilValidate.isNotEmpty(productStoreId)) {
    try {
      productStore=delegator.findByPrimaryKeyCache("ProductStore",UtilMisc.toMap("productStoreId",productStoreId));
    }
 catch (    GenericEntityException e) {
      throw new GeneralException(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotFindProductStoreWithID",UtilMisc.toMap("productStoreId",productStoreId),locale) + e.toString());
    }
  }
  if (productStore != null) {
    isImmediatelyFulfilled="Y".equals(productStore.getString("isImmediatelyFulfilled"));
  }
  boolean reserveInventory=("SALES_ORDER".equals(orderTypeId));
  if (reserveInventory && isImmediatelyFulfilled) {
    reserveInventory=false;
  }
  if (UtilValidate.isNotEmpty(orderItemShipGroupInfo)) {
    Iterator osiInfos=orderItemShipGroupInfo.iterator();
    while (osiInfos.hasNext()) {
      GenericValue orderItemShipGroupAssoc=(GenericValue)osiInfos.next();
      if ("OrderItemShipGroupAssoc".equals(orderItemShipGroupAssoc.getEntityName())) {
        if (dropShipGroupIds != null && dropShipGroupIds.contains(orderItemShipGroupAssoc.getString("shipGroupSeqId"))) {
          continue;
        }
        GenericValue orderItem=(GenericValue)itemValuesBySeqId.get(orderItemShipGroupAssoc.get("orderItemSeqId"));
        String itemStatus=orderItem.getString("statusId");
        if ("ITEM_REJECTED".equals(itemStatus) || "ITEM_CANCELLED".equals(itemStatus) || "ITEM_COMPLETED".equals(itemStatus)) {
          Debug.logInfo("Order item [" + orderItem.getString("orderId") + " / "+ orderItem.getString("orderItemSeqId")+ "] is not in a proper status for reservation",module);
          continue;
        }
        if (UtilValidate.isNotEmpty(orderItem.getString("productId")) && !"RENTAL_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId"))) {
          try {
            GenericValue product=orderItem.getRelatedOne("Product");
            if (product == null) {
              Debug.logError("Error when looking up product in reserveInventory service",module);
              resErrorMessages.add("Error when looking up product in reserveInventory service");
              continue;
            }
            if (reserveInventory) {
              if ("MARKETING_PKG_PICK".equals(product.get("productTypeId"))) {
                Map componentsRes=dispatcher.runSync("getAssociatedProducts",UtilMisc.toMap("productId",orderItem.getString("productId"),"type","PRODUCT_COMPONENT"));
                if (ServiceUtil.isError(componentsRes)) {
                  resErrorMessages.add(componentsRes.get(ModelService.ERROR_MESSAGE));
                  continue;
                }
 else {
                  List assocProducts=(List)componentsRes.get("assocProducts");
                  Iterator assocProductsIter=assocProducts.iterator();
                  while (assocProductsIter.hasNext()) {
                    GenericValue productAssoc=(GenericValue)assocProductsIter.next();
                    Double quantityOrd=productAssoc.getDouble("quantity");
                    Double quantityKit=orderItemShipGroupAssoc.getDouble("quantity");
                    Double quantity=new Double(quantityOrd.doubleValue() * quantityKit.doubleValue());
                    Map reserveInput=new HashMap();
                    reserveInput.put("productStoreId",productStoreId);
                    reserveInput.put("productId",productAssoc.getString("productIdTo"));
                    reserveInput.put("orderId",orderItem.getString("orderId"));
                    reserveInput.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
                    reserveInput.put("shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                    reserveInput.put("quantity",quantity);
                    reserveInput.put("userLogin",userLogin);
                    Map reserveResult=dispatcher.runSync("reserveStoreInventory",reserveInput);
                    if (ServiceUtil.isError(reserveResult)) {
                      String invErrMsg="The product ";
                      if (product != null) {
                        invErrMsg+=getProductName(product,orderItem);
                      }
                      invErrMsg+=" with ID " + orderItem.getString("productId") + " is no longer in stock. Please try reducing the quantity or removing the product from this order.";
                      resErrorMessages.add(invErrMsg);
                    }
                  }
                }
              }
 else {
                Map reserveInput=new HashMap();
                reserveInput.put("productStoreId",productStoreId);
                reserveInput.put("productId",orderItem.getString("productId"));
                reserveInput.put("orderId",orderItem.getString("orderId"));
                reserveInput.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
                reserveInput.put("shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                reserveInput.put("quantity",orderItemShipGroupAssoc.getDouble("quantity"));
                reserveInput.put("userLogin",userLogin);
                Map reserveResult=dispatcher.runSync("reserveStoreInventory",reserveInput);
                if (ServiceUtil.isError(reserveResult)) {
                  String invErrMsg="The product ";
                  if (product != null) {
                    invErrMsg+=getProductName(product,orderItem);
                  }
                  invErrMsg+=" with ID " + orderItem.getString("productId") + " is no longer in stock. Please try reducing the quantity or removing the product from this order.";
                  resErrorMessages.add(invErrMsg);
                }
              }
            }
            if ("MARKETING_PKG_AUTO".equals(product.get("productTypeId"))) {
              GenericValue permUserLogin=delegator.findByPrimaryKeyCache("UserLogin",UtilMisc.toMap("userLoginId","system"));
              Map inputMap=new HashMap();
              inputMap.put("facilityId",productStore.getString("inventoryFacilityId"));
              inputMap.put("orderId",orderItem.getString("orderId"));
              inputMap.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
              inputMap.put("userLogin",permUserLogin);
              Map prunResult=dispatcher.runSync("createProductionRunForMktgPkg",inputMap);
              if (ServiceUtil.isError(prunResult)) {
                Debug.logError(ServiceUtil.getErrorMessage(prunResult) + " for input:" + inputMap,module);
              }
            }
          }
 catch (          GenericServiceException e) {
            String errMsg="Fatal error calling reserveStoreInventory service: " + e.toString();
            Debug.logError(e,errMsg,module);
            resErrorMessages.add(errMsg);
          }
        }
      }
    }
  }
}
