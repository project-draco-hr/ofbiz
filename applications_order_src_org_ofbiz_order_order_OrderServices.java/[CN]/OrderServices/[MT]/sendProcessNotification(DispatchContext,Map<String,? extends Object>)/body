{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  String adminEmailList=(String)context.get("adminEmailList");
  String assignedToUser=(String)context.get("assignedPartyId");
  String workEffortId=(String)context.get("workEffortId");
  Locale locale=(Locale)context.get("locale");
  GenericValue workEffort=null;
  GenericValue orderHeader=null;
  try {
    workEffort=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",workEffortId).queryOne();
    String sourceReferenceId=workEffort.getString("sourceReferenceId");
    if (sourceReferenceId != null)     orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",sourceReferenceId).queryOne();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithEntityLookup",locale));
  }
  GenericValue party=null;
  Collection<GenericValue> assignedToEmails=null;
  try {
    party=EntityQuery.use(delegator).from("Party").where("partyId",assignedToUser).queryOne();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithEntityLookup",locale));
  }
  if (party != null) {
    assignedToEmails=ContactHelper.getContactMechByPurpose(party,"PRIMARY_EMAIL",false);
  }
  Map<String,Object> templateData=new HashMap<String,Object>(context);
  templateData.putAll(orderHeader);
  templateData.putAll(workEffort);
  templateData.put("omgStatusId",workEffort.getString("currentStatusId"));
  List<GenericValue> assignments=null;
  if (workEffort != null) {
    try {
      assignments=workEffort.getRelated("WorkEffortPartyAssignment",null,null,false);
    }
 catch (    GenericEntityException e1) {
      Debug.logError(e1,"Problems getting assignements",module);
    }
  }
  templateData.put("assignments",assignments);
  StringBuilder emailList=new StringBuilder();
  if (assignedToEmails != null) {
    for (    GenericValue ct : assignedToEmails) {
      if (ct != null && ct.get("infoString") != null) {
        if (emailList.length() > 1)         emailList.append(",");
        emailList.append(ct.getString("infoString"));
      }
    }
  }
  if (adminEmailList != null) {
    if (emailList.length() > 1)     emailList.append(",");
    emailList.append(adminEmailList);
  }
  String ofbizHome=System.getProperty("ofbiz.home");
  String templateName=ofbizHome + "/applications/order/email/default/emailprocessnotify.ftl";
  Map<String,Object> sendMailContext=new HashMap<String,Object>();
  sendMailContext.put("sendTo",emailList.toString());
  sendMailContext.put("sendFrom","workflow@ofbiz.org");
  sendMailContext.put("subject","Workflow Notification");
  sendMailContext.put("templateName",templateName);
  sendMailContext.put("templateData",templateData);
  try {
    dispatcher.runAsync("sendGenericNotificationEmail",sendMailContext);
  }
 catch (  GenericServiceException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderSendMailServiceFailed",locale) + e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
