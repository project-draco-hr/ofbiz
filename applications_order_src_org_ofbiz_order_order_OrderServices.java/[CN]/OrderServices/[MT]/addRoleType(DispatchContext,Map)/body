{
  Map result=new HashMap();
  Delegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  String partyId=(String)context.get("partyId");
  String roleTypeId=(String)context.get("roleTypeId");
  Boolean removeOld=(Boolean)context.get("removeOld");
  if (removeOld != null && removeOld.booleanValue()) {
    try {
      delegator.removeByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId",roleTypeId));
    }
 catch (    GenericEntityException e) {
      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
      result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not remove old roles (" + e.getMessage() + ").");
      return result;
    }
  }
  Map fields=UtilMisc.toMap("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId);
  try {
    GenericValue testValue=delegator.findByPrimaryKey("OrderRole",fields);
    if (testValue != null) {
      ServiceUtil.returnSuccess();
    }
 else {
      GenericValue value=delegator.makeValue("OrderRole",fields);
      delegator.create(value);
    }
  }
 catch (  GenericEntityException e) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not add role to order (" + e.getMessage() + ").");
    return result;
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
