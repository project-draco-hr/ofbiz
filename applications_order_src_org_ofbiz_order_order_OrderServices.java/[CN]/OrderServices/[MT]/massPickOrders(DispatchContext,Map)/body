{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Map facilityOrdersMap=FastMap.newInstance();
  List orderIds=(List)context.get("orderIdList");
  Iterator i=orderIds.iterator();
  while (i.hasNext()) {
    String orderId=(String)i.next();
    if (UtilValidate.isEmpty(orderId)) {
      continue;
    }
    List invInfo=null;
    try {
      invInfo=delegator.findByAnd("OrderItemAndShipGrpInvResAndItem",UtilMisc.toMap("orderId",orderId,"statusId","ITEM_APPROVED"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (invInfo != null) {
      Iterator ii=invInfo.iterator();
      while (ii.hasNext()) {
        GenericValue inv=(GenericValue)ii.next();
        String facilityId=inv.getString("facilityId");
        List orderIdsByFacility=(List)facilityOrdersMap.get(facilityId);
        if (orderIdsByFacility == null) {
          orderIdsByFacility=new ArrayList();
        }
        orderIdsByFacility.add(orderId);
        facilityOrdersMap.put(facilityId,orderIdsByFacility);
      }
    }
  }
  Iterator fi=facilityOrdersMap.keySet().iterator();
  while (fi.hasNext()) {
    String facilityId=(String)fi.next();
    List orderIdList=(List)facilityOrdersMap.get(facilityId);
    Map ctx=FastMap.newInstance();
    ctx.put("userLogin",userLogin);
    ctx.put("orderIdList",orderIdList);
    ctx.put("facilityId",facilityId);
    Map resp=null;
    try {
      resp=dispatcher.runSync("createPicklistFromOrders",ctx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (ServiceUtil.isError(resp)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(resp));
    }
  }
  return ServiceUtil.returnSuccess();
}
