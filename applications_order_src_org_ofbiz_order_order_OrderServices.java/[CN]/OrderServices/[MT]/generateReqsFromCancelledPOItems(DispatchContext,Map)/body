{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String orderId=(String)context.get("orderId");
  String facilityId=(String)context.get("facilityId");
  try {
    GenericValue orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
    if (UtilValidate.isEmpty(orderHeader)) {
      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderIdNotFound",UtilMisc.toMap("orderId",orderId),locale);
      Debug.logError(errorMessage,module);
      return ServiceUtil.returnError(errorMessage);
    }
    if (!"PURCHASE_ORDER".equals(orderHeader.getString("orderTypeId"))) {
      String errorMessage=UtilProperties.getMessage(resource_error,"ProductErrorOrderNotPurchaseOrder",UtilMisc.toMap("orderId",orderId),locale);
      Debug.logError(errorMessage,module);
      return ServiceUtil.returnError(errorMessage);
    }
    Map productRequirementQuantities=new HashMap();
    List orderItems=orderHeader.getRelated("OrderItem");
    Iterator oiit=orderItems.iterator();
    while (oiit.hasNext()) {
      GenericValue orderItem=(GenericValue)oiit.next();
      if (!"PRODUCT_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId")))       continue;
      double orderItemCancelQuantity=0;
      if (!UtilValidate.isEmpty(orderItem.get("cancelQuantity"))) {
        orderItemCancelQuantity=orderItem.getDouble("cancelQuantity").doubleValue();
      }
      if (orderItemCancelQuantity <= 0)       continue;
      String productId=orderItem.getString("productId");
      if (productRequirementQuantities.containsKey(productId)) {
        orderItemCancelQuantity+=((Double)productRequirementQuantities.get(productId)).doubleValue();
      }
      productRequirementQuantities.put(productId,new Double(orderItemCancelQuantity));
    }
    Iterator cqit=productRequirementQuantities.keySet().iterator();
    while (cqit.hasNext()) {
      String productId=(String)cqit.next();
      Double requiredQuantity=(Double)productRequirementQuantities.get(productId);
      Map createRequirementResult=dispatcher.runSync("createRequirement",UtilMisc.toMap("requirementTypeId","PRODUCT_REQUIREMENT","facilityId",facilityId,"productId",productId,"quantity",requiredQuantity,"userLogin",userLogin));
      if (ServiceUtil.isError(createRequirementResult))       return createRequirementResult;
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException se) {
    Debug.logError(se,module);
    return ServiceUtil.returnError(se.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
