{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  List orderItems=(List)context.get("orderItems");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  if (orderItems != null && orderItems.size() > 0) {
    Iterator itemsIterator=orderItems.iterator();
    while (itemsIterator.hasNext()) {
      GenericValue orderItem=(GenericValue)itemsIterator.next();
      if (orderItem == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCheckForFulfillmentItemNotFound",locale));
      }
      GenericValue product=null;
      List productContent=null;
      try {
        product=orderItem.getRelatedOne("Product");
        if (product == null) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCheckForFulfillmentProductNotFound",locale));
        }
        List allProductContent=product.getRelated("ProductContent");
        if (((allProductContent == null) || allProductContent.size() == 0) && ("Y".equals(product.getString("isVariant")))) {
          GenericValue parentProduct=ProductWorker.getParentProduct(product.getString("productId"),delegator);
          if (allProductContent == null) {
            allProductContent=FastList.newInstance();
          }
          if (parentProduct != null) {
            allProductContent.addAll(parentProduct.getRelated("ProductContent"));
          }
        }
        if (allProductContent != null && allProductContent.size() > 0) {
          productContent=EntityUtil.filterByDate(allProductContent,UtilDateTime.nowTimestamp(),"fromDate","thruDate",true);
          Debug.logInfo("Product has " + allProductContent.size() + " associations, "+ (productContent == null ? "0" : "" + productContent.size())+ " has valid from/thru dates",module);
        }
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetProductEntity",locale) + e.getMessage());
      }
      if (productContent != null && productContent.size() > 0) {
        Iterator prodcontentIterator=productContent.iterator();
        while (prodcontentIterator.hasNext()) {
          GenericValue productContentItem=(GenericValue)prodcontentIterator.next();
          GenericValue content=null;
          try {
            content=productContentItem.getRelatedOne("Content");
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"ERROR: Cannot get Content entity: " + e.getMessage(),module);
            continue;
          }
          String fulfillmentType=productContentItem.getString("productContentTypeId");
          if ("FULFILLMENT_EXTASYNC".equals(fulfillmentType) || "FULFILLMENT_EXTSYNC".equals(fulfillmentType)) {
            String fulfillmentService=(String)content.get("serviceName");
            if (fulfillmentService == null) {
              Debug.logError("ProductContent of type FULFILLMENT_EXTERNAL had Content with empty serviceName, can not run fulfillment",module);
            }
            Map serviceCtx=UtilMisc.toMap("userLogin",userLogin,"orderItem",orderItem);
            serviceCtx.putAll(productContentItem.getPrimaryKey());
            try {
              Debug.logInfo("Running external fulfillment '" + fulfillmentService + "'",module);
              if ("FULFILLMENT_EXTASYNC".equals(fulfillmentType)) {
                dispatcher.runAsync(fulfillmentService,serviceCtx,true);
              }
 else               if ("FULFILLMENT_EXTSYNC".equals(fulfillmentType)) {
                Map resp=dispatcher.runSync(fulfillmentService,serviceCtx);
                if (ServiceUtil.isError(resp)) {
                  return ServiceUtil.returnError("Error running external fulfillment service",null,null,resp);
                }
              }
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,"ERROR: Could not run external fulfillment service '" + fulfillmentService + "'; "+ e.getMessage(),module);
            }
          }
 else           if ("FULFILLMENT_EMAIL".equals(fulfillmentType)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderEmailFulfillmentTypeNotYetImplemented",locale));
          }
 else           if ("DIGITAL_DOWNLOAD".equals(fulfillmentType)) {
          }
 else {
            Debug.logError("Invalid fulfillment type : " + fulfillmentType + " not supported.",module);
          }
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
