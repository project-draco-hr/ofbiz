{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  Locale locale=(Locale)context.get("locale");
  OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
  try {
    if ("SALES_ORDER".equals(orh.getOrderTypeId())) {
      Iterator<GenericValue> shipGroups=orh.getOrderItemShipGroups().iterator();
      while (shipGroups.hasNext()) {
        GenericValue shipGroup=shipGroups.next();
        if (!UtilValidate.isEmpty(shipGroup.getString("supplierPartyId"))) {
          String supplierPartyId=shipGroup.getString("supplierPartyId");
          ShoppingCart cart=new ShoppingCart(delegator,orh.getProductStoreId(),null,orh.getCurrency());
          cart.setOrderType("PURCHASE_ORDER");
          cart.setBillToCustomerPartyId(cart.getBillFromVendorPartyId());
          cart.setBillFromVendorPartyId(supplierPartyId);
          cart.setOrderPartyId(supplierPartyId);
          List<GenericValue> items=orh.getValidOrderItems(shipGroup.getString("shipGroupSeqId"));
          if (!UtilValidate.isEmpty(items)) {
            Iterator<GenericValue> itemsIt=items.iterator();
            while (itemsIt.hasNext()) {
              GenericValue item=itemsIt.next();
              try {
                int itemIndex=cart.addOrIncreaseItem(item.getString("productId"),null,item.getBigDecimal("quantity"),null,null,null,item.getTimestamp("shipBeforeDate"),item.getTimestamp("shipAfterDate"),null,null,null,null,null,null,null,dispatcher);
                ShoppingCartItem sci=cart.findCartItem(itemIndex);
                sci.setAssociatedOrderId(orderId);
                sci.setAssociatedOrderItemSeqId(item.getString("orderItemSeqId"));
                sci.setOrderItemAssocTypeId("DROP_SHIPMENT");
              }
 catch (              Exception e) {
                return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderCreatingDropShipmentsError",UtilMisc.toMap("orderId",orderId,"errorString",e.getMessage()),locale));
              }
            }
          }
          if (!UtilValidate.isEmpty(cart.items())) {
            cart.setDefaultCheckoutOptions(dispatcher);
            cart.setShippingContactMechId(shipGroup.getString("contactMechId"));
            ShoppingCart.CartShipInfo cartShipInfo=cart.getShipGroups().get(0);
            cartShipInfo.setAssociatedShipGroupSeqId(shipGroup.getString("shipGroupSeqId"));
            CheckOutHelper coh=new CheckOutHelper(dispatcher,delegator,cart);
            coh.createOrder(userLogin);
          }
 else {
            Debug.logWarning("No drop ship items found for order [" + shipGroup.getString("orderId") + "] and ship group ["+ shipGroup.getString("shipGroupSeqId")+ "] and supplier party ["+ shipGroup.getString("supplierPartyId")+ "].  Supplier party information will be cleared for this ship group",module);
            shipGroup.set("supplierPartyId",null);
            shipGroup.store();
          }
        }
      }
    }
  }
 catch (  Exception exc) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderCreatingDropShipmentsError",UtilMisc.toMap("orderId",orderId,"errorString",exc.getMessage()),locale));
  }
  return ServiceUtil.returnSuccess();
}
