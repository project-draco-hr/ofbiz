{
  if (document == null)   return null;
  if (object == null)   return document.createElement("null");
  if (object instanceof String) {
    return makeElement("std-String",object,document);
  }
 else   if (object instanceof Integer) {
    return makeElement("std-Integer",object,document);
  }
 else   if (object instanceof Long) {
    return makeElement("std-Long",object,document);
  }
 else   if (object instanceof Float) {
    return makeElement("std-Float",object,document);
  }
 else   if (object instanceof Double) {
    return makeElement("std-Double",object,document);
  }
 else   if (object instanceof Boolean) {
    return makeElement("std-Boolean",object,document);
  }
 else   if (object instanceof Locale) {
    return makeElement("std-Locale",object,document);
  }
 else   if (object instanceof java.sql.Timestamp) {
    return makeElement("sql-Timestamp",object,document);
  }
 else   if (object instanceof java.sql.Date) {
    return makeElement("sql-Date",object,document);
  }
 else   if (object instanceof java.sql.Time) {
    return makeElement("sql-Time",object,document);
  }
 else   if (object instanceof java.util.Date) {
    DateFormat formatter=getDateFormat();
    String stringValue=null;
synchronized (formatter) {
      stringValue=formatter.format((java.util.Date)object);
    }
    return makeElement("std-Date",stringValue,document);
  }
 else   if (object instanceof Collection<?>) {
    String elementName=null;
    if (object instanceof ArrayList<?>) {
      elementName="col-ArrayList";
    }
 else     if (object instanceof LinkedList<?>) {
      elementName="col-LinkedList";
    }
 else     if (object instanceof Stack<?>) {
      elementName="col-Stack";
    }
 else     if (object instanceof Vector<?>) {
      elementName="col-Vector";
    }
 else     if (object instanceof TreeSet<?>) {
      elementName="col-TreeSet";
    }
 else     if (object instanceof HashSet<?>) {
      elementName="col-HashSet";
    }
 else {
      elementName="col-Collection";
    }
    Collection<?> value=UtilGenerics.cast(object);
    Element element=document.createElement(elementName);
    Iterator<?> iter=value.iterator();
    while (iter.hasNext()) {
      element.appendChild(serializeSingle(iter.next(),document));
    }
    return element;
  }
 else   if (object instanceof GenericPK) {
    GenericPK value=(GenericPK)object;
    return value.makeXmlElement(document,"eepk-");
  }
 else   if (object instanceof GenericValue) {
    GenericValue value=(GenericValue)object;
    return value.makeXmlElement(document,"eeval-");
  }
 else   if (object instanceof Map<?,?>) {
    String elementName=null;
    if (object instanceof HashMap<?,?>) {
      elementName="map-HashMap";
    }
 else     if (object instanceof Properties) {
      elementName="map-Properties";
    }
 else     if (object instanceof Hashtable<?,?>) {
      elementName="map-Hashtable";
    }
 else     if (object instanceof WeakHashMap<?,?>) {
      elementName="map-WeakHashMap";
    }
 else     if (object instanceof TreeMap<?,?>) {
      elementName="map-TreeMap";
    }
 else {
      elementName="map-Map";
    }
    Element element=document.createElement(elementName);
    Map<?,?> value=UtilGenerics.cast(object);
    Iterator<Map.Entry<?,?>> iter=UtilGenerics.cast(value.entrySet().iterator());
    while (iter.hasNext()) {
      Map.Entry<?,?> entry=iter.next();
      Element entryElement=document.createElement("map-Entry");
      element.appendChild(entryElement);
      Element key=document.createElement("map-Key");
      entryElement.appendChild(key);
      key.appendChild(serializeSingle(entry.getKey(),document));
      Element mapValue=document.createElement("map-Value");
      entryElement.appendChild(mapValue);
      mapValue.appendChild(serializeSingle(entry.getValue(),document));
    }
    return element;
  }
  return serializeCustom(object,document);
}
