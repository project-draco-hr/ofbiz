{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.attributeNames(simpleMethod,element,"location","script");
    MiniLangValidate.requireAnyAttribute(simpleMethod,element,"location","script");
    MiniLangValidate.constantAttributes(simpleMethod,element,"location");
    MiniLangValidate.scriptAttributes(simpleMethod,element,"script");
    MiniLangValidate.noChildElements(simpleMethod,element);
  }
  boolean elementModified=autoCorrect(element);
  if (elementModified && MiniLangUtil.autoCorrectOn()) {
    MiniLangUtil.flagDocumentAsCorrected(element);
  }
  String inlineScript=element.getAttribute("script");
  if (inlineScript.length() == 0) {
    inlineScript=UtilXml.elementValue(element);
  }
  if (MiniLangUtil.containsScript(inlineScript)) {
    this.scriptlet=new Scriptlet(StringUtil.convertOperatorSubstitutions(inlineScript));
    this.location=null;
    this.method=null;
  }
 else {
    this.scriptlet=null;
    String scriptLocation=element.getAttribute("location");
    int pos=scriptLocation.lastIndexOf("#");
    if (pos == -1) {
      this.location=scriptLocation;
      this.method=null;
    }
 else {
      this.location=scriptLocation.substring(0,pos);
      this.method=scriptLocation.substring(pos + 1);
    }
  }
}
