{
  Delegator delegator=ctx.getDelegator();
  Map<String,Object> result=new HashMap<String,Object>();
  GenericValue orderItemShipGroup=(GenericValue)context.get("orderItemShipGroup");
  if (UtilValidate.isEmpty(orderItemShipGroup)) {
    String orderId=(String)context.get("orderId");
    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
    String shipGroupSeqId=(String)context.get("shipGroupSeqId");
    if (UtilValidate.isNotEmpty(orderHeader) && UtilValidate.isNotEmpty(shipGroupSeqId)) {
      orderItemShipGroup=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();
      if (UtilValidate.isEmpty(orderItemShipGroup)) {
        return ServiceUtil.returnError("OrderItemShipGroup Does Not Exist");
      }
    }
  }
  if (UtilValidate.isNotEmpty(orderItemShipGroup)) {
    orderItemShipGroup.remove();
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  }
  return result;
}
