{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  String shipGroupSeqId=(String)context.get("shipGroupSeqId");
  String contactMechId=(String)context.get("contactMechId");
  String oldContactMechId=(String)context.get("oldContactMechId");
  String shipmentMethod=(String)context.get("shipmentMethod");
  ShoppingCart shoppingCart=null;
  try {
    shoppingCart=loadCartForUpdate(dispatcher,delegator,userLogin,orderId);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
  }
  String message=null;
  if (UtilValidate.isNotEmpty(shipGroupSeqId)) {
    OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
    List<GenericValue> shippingMethods=null;
    String shipmentMethodTypeId=null;
    String carrierPartyId=null;
    if (UtilValidate.isNotEmpty(shipmentMethod)) {
      String[] arr=shipmentMethod.split("@");
      shipmentMethodTypeId=arr[0];
      carrierPartyId=arr[1];
    }
 else {
      GenericValue orderItemshipGroup=orh.getOrderItemShipGroup(shipGroupSeqId);
      shipmentMethodTypeId=orderItemshipGroup.getString("shipmentMethodTypeId");
      carrierPartyId=orderItemshipGroup.getString("carrierPartyId");
    }
    int groupIdx=Integer.parseInt(shipGroupSeqId);
    if (UtilValidate.isNotEmpty(oldContactMechId) && oldContactMechId.equals(contactMechId)) {
      shoppingCart.setShipmentMethodTypeId(groupIdx - 1,shipmentMethodTypeId);
      shoppingCart.setCarrierPartyId(groupIdx - 1,carrierPartyId);
    }
 else {
      Map<String,BigDecimal> shippableItemFeatures=orh.getFeatureIdQtyMap(shipGroupSeqId);
      BigDecimal shippableTotal=orh.getShippableTotal(shipGroupSeqId);
      BigDecimal shippableWeight=orh.getShippableWeight(shipGroupSeqId);
      List<BigDecimal> shippableItemSizes=orh.getShippableSizes(shipGroupSeqId);
      GenericValue shippingAddress=null;
      if (UtilValidate.isEmpty(shippingAddress)) {
        shippingAddress=orh.getShippingAddress(shipGroupSeqId);
      }
      shippingMethods=ProductStoreWorker.getAvailableStoreShippingMethods(delegator,orh.getProductStoreId(),shippingAddress,shippableItemSizes,shippableItemFeatures,shippableWeight,shippableTotal);
      boolean isShippingMethodAvailable=false;
      for (      GenericValue shippingMethod : shippingMethods) {
        isShippingMethodAvailable=shippingMethod.getString("partyId").equals(carrierPartyId) && shippingMethod.getString("shipmentMethodTypeId").equals(shipmentMethodTypeId);
        if (isShippingMethodAvailable) {
          shoppingCart.setShipmentMethodTypeId(groupIdx - 1,shipmentMethodTypeId);
          shoppingCart.setCarrierPartyId(groupIdx - 1,carrierPartyId);
          break;
        }
      }
      if (!isShippingMethodAvailable) {
        shoppingCart.setShipmentMethodTypeId(groupIdx - 1,shippingMethods.get(0).getString("shipmentMethodTypeId"));
        shoppingCart.setCarrierPartyId(groupIdx - 1,shippingMethods.get(0).getString("carrierPartyId"));
        String newShipMethTypeDesc=null;
        String shipMethTypeDesc=null;
        try {
          shipMethTypeDesc=delegator.findOne("ShipmentMethodType",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId),false).getString("description");
          newShipMethTypeDesc=delegator.findOne("ShipmentMethodType",UtilMisc.toMap("shipmentMethodTypeId",shippingMethods.get(0).getString("shipmentMethodTypeId")),false).getString("description");
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
        message="Shipping Method " + carrierPartyId + " "+ shipMethTypeDesc+ " is not applicable to shipping address. "+ shippingMethods.get(0).getString("carrierPartyId")+ " "+ newShipMethTypeDesc+ " has been set for shipping address.";
      }
      shoppingCart.setShippingContactMechId(groupIdx - 1,contactMechId);
    }
  }
  Map<String,Object> changeMap=new HashMap<String,Object>();
  try {
    saveUpdatedCartToOrder(dispatcher,delegator,shoppingCart,locale,userLogin,orderId,changeMap,true,false);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
  }
  if (UtilValidate.isNotEmpty(message)) {
    return ServiceUtil.returnSuccess(message);
  }
 else {
    return ServiceUtil.returnSuccess();
  }
}
