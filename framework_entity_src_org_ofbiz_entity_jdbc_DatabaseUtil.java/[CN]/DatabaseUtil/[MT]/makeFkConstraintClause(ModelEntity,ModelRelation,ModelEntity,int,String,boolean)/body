{
  Iterator keyMapsIter=modelRelation.getKeyMapsIterator();
  StringBuffer mainCols=new StringBuffer();
  StringBuffer relCols=new StringBuffer();
  while (keyMapsIter.hasNext()) {
    ModelKeyMap keyMap=(ModelKeyMap)keyMapsIter.next();
    ModelField mainField=entity.getField(keyMap.getFieldName());
    if (mainField == null) {
      Debug.logError("Bad key-map in entity [" + entity.getEntityName() + "] relation to ["+ modelRelation.getTitle()+ modelRelation.getRelEntityName()+ "] for field ["+ keyMap.getFieldName()+ "]",module);
      return null;
    }
    if (mainCols.length() > 0) {
      mainCols.append(", ");
    }
    mainCols.append(mainField.getColName());
    ModelField relField=relModelEntity.getField(keyMap.getRelFieldName());
    if (relCols.length() > 0) {
      relCols.append(", ");
    }
    relCols.append(relField.getColName());
  }
  StringBuffer sqlBuf=new StringBuffer("");
  if ("name_constraint".equals(fkStyle)) {
    sqlBuf.append("CONSTRAINT ");
    String relConstraintName=makeFkConstraintName(modelRelation,constraintNameClipLength);
    sqlBuf.append(relConstraintName);
    sqlBuf.append(" FOREIGN KEY (");
    sqlBuf.append(mainCols.toString());
    sqlBuf.append(") REFERENCES ");
    sqlBuf.append(relModelEntity.getTableName(datasourceInfo));
    sqlBuf.append(" (");
    sqlBuf.append(relCols.toString());
    sqlBuf.append(")");
    if (useFkInitiallyDeferred) {
      sqlBuf.append(" INITIALLY DEFERRED");
    }
  }
 else   if ("name_fk".equals(fkStyle)) {
    sqlBuf.append(" FOREIGN KEY ");
    String relConstraintName=makeFkConstraintName(modelRelation,constraintNameClipLength);
    sqlBuf.append(relConstraintName);
    sqlBuf.append(" (");
    sqlBuf.append(mainCols.toString());
    sqlBuf.append(") REFERENCES ");
    sqlBuf.append(relModelEntity.getTableName(datasourceInfo));
    sqlBuf.append(" (");
    sqlBuf.append(relCols.toString());
    sqlBuf.append(")");
    if (useFkInitiallyDeferred) {
      sqlBuf.append(" INITIALLY DEFERRED");
    }
  }
 else {
    String emsg="ERROR: fk-style specified for this data-source is not valid: " + fkStyle;
    Debug.logError(emsg,module);
    throw new IllegalArgumentException(emsg);
  }
  return sqlBuf.toString();
}
