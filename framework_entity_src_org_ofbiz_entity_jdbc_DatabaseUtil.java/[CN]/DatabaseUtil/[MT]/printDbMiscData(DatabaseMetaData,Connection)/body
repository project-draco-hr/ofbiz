{
  if (dbData == null) {
    return;
  }
  if (Debug.infoOn()) {
    try {
      Debug.logInfo("Database Product Name is " + dbData.getDatabaseProductName(),module);
      Debug.logInfo("Database Product Version is " + dbData.getDatabaseProductVersion(),module);
    }
 catch (    SQLException sqle) {
      Debug.logWarning("Unable to get Database name & version information",module);
    }
  }
  if (Debug.infoOn()) {
    try {
      Debug.logInfo("Database Driver Name is " + dbData.getDriverName(),module);
      Debug.logInfo("Database Driver Version is " + dbData.getDriverVersion(),module);
      Debug.logInfo("Database Driver JDBC Version is " + dbData.getJDBCMajorVersion() + "."+ dbData.getJDBCMinorVersion(),module);
    }
 catch (    SQLException sqle) {
      Debug.logWarning("Unable to get Driver name & version information",module);
    }
catch (    AbstractMethodError ame) {
      Debug.logWarning("Unable to get Driver JDBC Version",module);
    }
  }
  if (Debug.infoOn()) {
    try {
      Debug.logInfo("Database Setting/Support Information (those with a * should be true):",module);
      Debug.logInfo("- supports transactions    [" + dbData.supportsTransactions() + "]*",module);
      Debug.logInfo("- isolation None           [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_NONE) + "]",module);
      Debug.logInfo("- isolation ReadCommitted  [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_READ_COMMITTED) + "]",module);
      Debug.logInfo("- isolation ReadUncommitted[" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED) + "]",module);
      Debug.logInfo("- isolation RepeatableRead [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_REPEATABLE_READ) + "]",module);
      Debug.logInfo("- isolation Serializable   [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_SERIALIZABLE) + "]",module);
      Debug.logInfo("- default fetchsize        [" + con.createStatement().getFetchSize() + "]",module);
      Debug.logInfo("- forward only type        [" + dbData.supportsResultSetType(ResultSet.TYPE_FORWARD_ONLY) + "]",module);
      Debug.logInfo("- scroll sensitive type    [" + dbData.supportsResultSetType(ResultSet.TYPE_SCROLL_SENSITIVE) + "]",module);
      Debug.logInfo("- scroll insensitive type  [" + dbData.supportsResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE) + "]",module);
      Debug.logInfo("- is case sensitive        [" + dbData.supportsMixedCaseIdentifiers() + "]",module);
      Debug.logInfo("- stores LowerCase         [" + dbData.storesLowerCaseIdentifiers() + "]",module);
      Debug.logInfo("- stores MixedCase         [" + dbData.storesMixedCaseIdentifiers() + "]",module);
      Debug.logInfo("- stores UpperCase         [" + dbData.storesUpperCaseIdentifiers() + "]",module);
      Debug.logInfo("- max table name length    [" + dbData.getMaxTableNameLength() + "]",module);
      Debug.logInfo("- max column name length   [" + dbData.getMaxColumnNameLength() + "]",module);
      Debug.logInfo("- max schema name length   [" + dbData.getMaxSchemaNameLength() + "]",module);
      Debug.logInfo("- concurrent connections   [" + dbData.getMaxConnections() + "]",module);
      Debug.logInfo("- concurrent statements    [" + dbData.getMaxStatements() + "]",module);
      Debug.logInfo("- ANSI SQL92 Entry         [" + dbData.supportsANSI92EntryLevelSQL() + "]",module);
      Debug.logInfo("- ANSI SQL92 Itermediate   [" + dbData.supportsANSI92IntermediateSQL() + "]",module);
      Debug.logInfo("- ANSI SQL92 Full          [" + dbData.supportsANSI92FullSQL() + "]",module);
      Debug.logInfo("- ODBC SQL Grammar Core    [" + dbData.supportsCoreSQLGrammar() + "]",module);
      Debug.logInfo("- ODBC SQL Grammar Extended[" + dbData.supportsExtendedSQLGrammar() + "]",module);
      Debug.logInfo("- ODBC SQL Grammar Minimum [" + dbData.supportsMinimumSQLGrammar() + "]",module);
      Debug.logInfo("- outer joins              [" + dbData.supportsOuterJoins() + "]*",module);
      Debug.logInfo("- limited outer joins      [" + dbData.supportsLimitedOuterJoins() + "]",module);
      Debug.logInfo("- full outer joins         [" + dbData.supportsFullOuterJoins() + "]",module);
      Debug.logInfo("- group by                 [" + dbData.supportsGroupBy() + "]*",module);
      Debug.logInfo("- group by not in select   [" + dbData.supportsGroupByUnrelated() + "]",module);
      Debug.logInfo("- column aliasing          [" + dbData.supportsColumnAliasing() + "]",module);
      Debug.logInfo("- order by not in select   [" + dbData.supportsOrderByUnrelated() + "]",module);
      Debug.logInfo("- alter table add column   [" + dbData.supportsAlterTableWithAddColumn() + "]*",module);
      Debug.logInfo("- non-nullable column      [" + dbData.supportsNonNullableColumns() + "]*",module);
    }
 catch (    Exception e) {
      Debug.logWarning(e,"Unable to get misc. support/setting information",module);
    }
  }
}
