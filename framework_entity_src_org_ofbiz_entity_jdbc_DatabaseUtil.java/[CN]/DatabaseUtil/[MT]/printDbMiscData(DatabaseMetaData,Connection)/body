{
  if (dbData == null) {
    return;
  }
  if (Debug.infoOn()) {
    try {
      Debug.logInfo("Database Product Name is " + dbData.getDatabaseProductName(),module);
      Debug.logInfo("Database Product Version is " + dbData.getDatabaseProductVersion(),module);
    }
 catch (    SQLException e) {
      Debug.logWarning("Unable to get Database name & version information",module);
    }
  }
  if (Debug.infoOn()) {
    try {
      Debug.logInfo("Database Driver Name is " + dbData.getDriverName(),module);
      Debug.logInfo("Database Driver Version is " + dbData.getDriverVersion(),module);
      Debug.logInfo("Database Driver JDBC Version is " + dbData.getJDBCMajorVersion() + "."+ dbData.getJDBCMinorVersion(),module);
    }
 catch (    SQLException e) {
      Debug.logWarning("Unable to get Driver name & version information",module);
    }
catch (    AbstractMethodError ame) {
      Debug.logWarning("Unable to get Driver JDBC Version",module);
    }
  }
  if (Debug.infoOn()) {
    Debug.logInfo("Database Setting/Support Information (those with a * should be true):",module);
    try {
      Debug.logInfo("- supports transactions    [" + dbData.supportsTransactions() + "]*",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- supports transactions    [ DETECTION FAILED ]*",module);
    }
    try {
      Debug.logInfo("- isolation None           [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_NONE) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- isolation None           [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- isolation ReadCommitted  [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_READ_COMMITTED) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- isolation ReadCommitted  [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- isolation ReadUncommitted[" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- isolation ReadUncommitted[ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- isolation RepeatableRead [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_REPEATABLE_READ) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- isolation RepeatableRead [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- isolation Serializable   [" + dbData.supportsTransactionIsolationLevel(Connection.TRANSACTION_SERIALIZABLE) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- isolation Serializable   [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- default fetchsize        [" + con.createStatement().getFetchSize() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- default fetchsize        [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- forward only type        [" + dbData.supportsResultSetType(ResultSet.TYPE_FORWARD_ONLY) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- forward only type        [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- scroll sensitive type    [" + dbData.supportsResultSetType(ResultSet.TYPE_SCROLL_SENSITIVE) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- scroll sensitive type    [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- scroll insensitive type  [" + dbData.supportsResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE) + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- scroll insensitive type  [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- is case sensitive        [" + dbData.supportsMixedCaseIdentifiers() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- is case sensitive        [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- stores LowerCase         [" + dbData.storesLowerCaseIdentifiers() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- stores LowerCase         [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- stores MixedCase         [" + dbData.storesMixedCaseIdentifiers() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- stores MixedCase         [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- stores UpperCase         [" + dbData.storesUpperCaseIdentifiers() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- stores UpperCase         [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- max table name length    [" + dbData.getMaxTableNameLength() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- max table name length    [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- max column name length   [" + dbData.getMaxColumnNameLength() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- max column name length   [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- max schema name length   [" + dbData.getMaxSchemaNameLength() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- max schema name length   [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- concurrent connections   [" + dbData.getMaxConnections() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- concurrent connections   [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- concurrent statements    [" + dbData.getMaxStatements() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- concurrent statements    [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- ANSI SQL92 Entry         [" + dbData.supportsANSI92EntryLevelSQL() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- ANSI SQL92 Entry         [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- ANSI SQL92 Intermediate  [" + dbData.supportsANSI92IntermediateSQL() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- ANSI SQL92 Intermediate  [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- ANSI SQL92 Full          [" + dbData.supportsANSI92FullSQL() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- ANSI SQL92 Full          [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- ODBC SQL Grammar Core    [" + dbData.supportsCoreSQLGrammar() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- ODBC SQL Grammar Core    [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- ODBC SQL Grammar Extended[" + dbData.supportsExtendedSQLGrammar() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- ODBC SQL Grammar Extended[ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- ODBC SQL Grammar Minimum [" + dbData.supportsMinimumSQLGrammar() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- ODBC SQL Grammar Minimum [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- outer joins              [" + dbData.supportsOuterJoins() + "]*",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- outer joins              [ DETECTION FAILED]*",module);
    }
    try {
      Debug.logInfo("- limited outer joins      [" + dbData.supportsLimitedOuterJoins() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- limited outer joins      [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- full outer joins         [" + dbData.supportsFullOuterJoins() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- full outer joins         [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- group by                 [" + dbData.supportsGroupBy() + "]*",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- group by                 [ DETECTION FAILED ]*",module);
    }
    try {
      Debug.logInfo("- group by not in select   [" + dbData.supportsGroupByUnrelated() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- group by not in select   [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- column aliasing          [" + dbData.supportsColumnAliasing() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- column aliasing          [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- order by not in select   [" + dbData.supportsOrderByUnrelated() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- order by not in select   [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- named parameters         [ SKIPPED ]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- named parameters JDBC-3  [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- alter table add column   [" + dbData.supportsAlterTableWithAddColumn() + "]*",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- alter table add column   [ DETECTION FAILED ]*",module);
    }
    try {
      Debug.logInfo("- non-nullable column      [" + dbData.supportsNonNullableColumns() + "]*",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- non-nullable column      [ DETECTION FAILED ]*",module);
    }
  }
}
