{
  String tempName=makeTempFieldName(field);
  String renamedErr=renameColumn(entity,field,tempName);
  if (!UtilValidate.isEmpty(renamedErr)) {
    if (messages != null)     messages.add(renamedErr);
    Debug.logError(renamedErr,module);
    return;
  }
  String addedErr=addColumn(entity,field);
  if (!UtilValidate.isEmpty(addedErr)) {
    if (messages != null)     messages.add(addedErr);
    Debug.logError(addedErr,module);
    return;
  }
  Connection connection=null;
  Statement stmt=null;
  try {
    connection=getConnection();
  }
 catch (  SQLException e) {
    String errMsg="Unable to establish a connection with the database for helperName [" + this.helperName + "]... Error was: "+ e.toString();
    Debug.logError(e,errMsg,module);
    if (messages != null) {
      messages.add(errMsg);
    }
    return;
  }
catch (  GenericEntityException e) {
    String errMsg="Unable to establish a connection with the database for helperName [" + this.helperName + "]... Error was: "+ e.toString();
    Debug.logError(e,errMsg,module);
    if (messages != null) {
      messages.add(errMsg);
    }
    return;
  }
  StringBuffer sqlBuf1=new StringBuffer("UPDATE ");
  sqlBuf1.append(entity.getTableName(datasourceInfo));
  sqlBuf1.append(" SET ");
  sqlBuf1.append(field.getColName());
  sqlBuf1.append(" = ");
  sqlBuf1.append(tempName);
  String sql1=sqlBuf1.toString();
  if (Debug.infoOn())   Debug.logInfo("[moveData] sql=" + sql1,module);
  try {
    stmt=connection.createStatement();
    int changed=stmt.executeUpdate(sql1);
    if (Debug.infoOn())     Debug.logInfo("[moveData] " + changed + " records updated",module);
  }
 catch (  SQLException e) {
    String thisMsg="SQL Exception while executing the following:\n" + sql1 + "\nError was: "+ e.toString();
    if (messages != null)     messages.add(thisMsg);
    Debug.logError(thisMsg,module);
    return;
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
    try {
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
  }
  try {
    connection=getConnection();
  }
 catch (  SQLException e) {
    if (messages != null)     messages.add("Unable to establish a connection with the database for helperName [" + this.helperName + "]... Error was: "+ e.toString());
    return;
  }
catch (  GenericEntityException e) {
    if (messages != null)     messages.add("Unable to establish a connection with the database for helperName [" + this.helperName + "]... Error was: "+ e.toString());
    return;
  }
  StringBuffer sqlBuf2=new StringBuffer("ALTER TABLE ");
  sqlBuf2.append(entity.getTableName(datasourceInfo));
  sqlBuf2.append(" DROP COLUMN ");
  sqlBuf2.append(tempName);
  String sql2=sqlBuf2.toString();
  if (Debug.infoOn())   Debug.logInfo("[dropColumn] sql=" + sql2,module);
  try {
    stmt=connection.createStatement();
    stmt.executeUpdate(sql2);
  }
 catch (  SQLException e) {
    String thisMsg="SQL Exception while executing the following:\n" + sql2 + "\nError was: "+ e.toString();
    if (messages != null)     messages.add(thisMsg);
    Debug.logError(thisMsg,module);
    return;
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
    try {
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
  }
}
