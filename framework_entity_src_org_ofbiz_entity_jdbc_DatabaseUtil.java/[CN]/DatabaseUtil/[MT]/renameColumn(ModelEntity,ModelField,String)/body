{
  if (entity == null || field == null)   return "ModelEntity or ModelField where null, cannot rename column";
  if (entity instanceof ModelViewEntity) {
    return "ERROR: Cannot rename column for a view entity";
  }
  Connection connection=null;
  Statement stmt=null;
  try {
    connection=getConnection();
  }
 catch (  SQLException sqle) {
    return "Unable to esablish a connection with the database... Error was: " + sqle.toString();
  }
catch (  GenericEntityException e) {
    return "Unable to esablish a connection with the database... Error was: " + e.toString();
  }
  ModelFieldType type=modelFieldTypeReader.getModelFieldType(field.getType());
  if (type == null) {
    return "Field type [" + type + "] not found for field ["+ field.getName()+ "] of entity ["+ entity.getEntityName()+ "], not renaming column.";
  }
  StringBuffer sqlBuf=new StringBuffer("ALTER TABLE ");
  sqlBuf.append(entity.getTableName(datasourceInfo));
  sqlBuf.append(" RENAME ");
  sqlBuf.append(field.getColName());
  sqlBuf.append(" TO ");
  sqlBuf.append(newName);
  String sql=sqlBuf.toString();
  if (Debug.infoOn())   Debug.logInfo("[renameColumn] sql=" + sql,module);
  try {
    stmt=connection.createStatement();
    stmt.executeUpdate(sql);
  }
 catch (  SQLException sqle) {
    return "SQL Exception while executing the following:\n" + sql + "\nError was: "+ sqle.toString();
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException sqle) {
      Debug.logError(sqle,module);
    }
    try {
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException sqle) {
      Debug.logError(sqle,module);
    }
  }
  return null;
}
