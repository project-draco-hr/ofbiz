{
  if (entity == null) {
    return "ModelEntity was null and is required to create a table";
  }
  if (entity instanceof ModelViewEntity) {
    return "ERROR: Cannot create table for a view entity";
  }
  Connection connection=null;
  Statement stmt=null;
  try {
    connection=getConnection();
  }
 catch (  SQLException e) {
    String errMsg="Unable to establish a connection with the database for helperName [" + this.helperInfo.getHelperFullName() + "]... Error was: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return errMsg;
  }
catch (  GenericEntityException e) {
    String errMsg="Unable to establish a connection with the database for helperName [" + this.helperInfo.getHelperFullName() + "]... Error was: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return errMsg;
  }
  StringBuilder sqlBuf=new StringBuilder("CREATE TABLE ");
  sqlBuf.append(entity.getTableName(this.datasourceInfo));
  sqlBuf.append(" (");
  Iterator<ModelField> fieldIter=entity.getFieldsIterator();
  while (fieldIter.hasNext()) {
    ModelField field=fieldIter.next();
    ModelFieldType type=modelFieldTypeReader.getModelFieldType(field.getType());
    if (type == null) {
      return "Field type [" + type + "] not found for field ["+ field.getName()+ "] of entity ["+ entity.getEntityName()+ "], not creating table.";
    }
    sqlBuf.append(field.getColName());
    sqlBuf.append(" ");
    sqlBuf.append(type.getSqlType());
    if ("String".equals(type.getJavaType()) || "java.lang.String".equals(type.getJavaType())) {
      if (UtilValidate.isNotEmpty(this.datasourceInfo.getCharacterSet())) {
        sqlBuf.append(" CHARACTER SET ");
        sqlBuf.append(this.datasourceInfo.getCharacterSet());
      }
      if (UtilValidate.isNotEmpty(this.datasourceInfo.getCollate())) {
        sqlBuf.append(" COLLATE ");
        sqlBuf.append(this.datasourceInfo.getCollate());
      }
    }
    if (field.getIsNotNull() || field.getIsPk()) {
      if (this.datasourceInfo.getAlwaysUseConstraintKeyword()) {
        sqlBuf.append(" CONSTRAINT NOT NULL, ");
      }
 else {
        sqlBuf.append(" NOT NULL, ");
      }
    }
 else {
      sqlBuf.append(", ");
    }
  }
  String pkName=makePkConstraintName(entity,this.datasourceInfo.getConstraintNameClipLength());
  if (this.datasourceInfo.getUsePkConstraintNames()) {
    sqlBuf.append("CONSTRAINT ");
    sqlBuf.append(pkName);
  }
  sqlBuf.append(" PRIMARY KEY (");
  entity.colNameString(entity.getPkFieldsUnmodifiable(),sqlBuf,"");
  sqlBuf.append(")");
  if (addFks) {
    Iterator<ModelRelation> relationsIter=entity.getRelationsIterator();
    while (relationsIter.hasNext()) {
      ModelRelation modelRelation=relationsIter.next();
      if ("one".equals(modelRelation.getType())) {
        ModelEntity relModelEntity=modelEntities.get(modelRelation.getRelEntityName());
        if (relModelEntity == null) {
          Debug.logError("Error adding foreign key: ModelEntity was null for related entity name " + modelRelation.getRelEntityName(),module);
          continue;
        }
        if (relModelEntity instanceof ModelViewEntity) {
          Debug.logError("Error adding foreign key: related entity is a view entity for related entity name " + modelRelation.getRelEntityName(),module);
          continue;
        }
        String fkConstraintClause=makeFkConstraintClause(entity,modelRelation,relModelEntity,this.datasourceInfo.getConstraintNameClipLength(),this.datasourceInfo.getFkStyle(),this.datasourceInfo.getUseFkInitiallyDeferred());
        if (UtilValidate.isNotEmpty(fkConstraintClause)) {
          sqlBuf.append(", ");
          sqlBuf.append(fkConstraintClause);
        }
 else {
          continue;
        }
      }
    }
  }
  sqlBuf.append(")");
  if (UtilValidate.isNotEmpty(this.datasourceInfo.getTableType())) {
    sqlBuf.append(" ENGINE ");
    sqlBuf.append(this.datasourceInfo.getTableType());
  }
  if (UtilValidate.isNotEmpty(this.datasourceInfo.getCharacterSet())) {
    sqlBuf.append(" CHARACTER SET ");
    sqlBuf.append(this.datasourceInfo.getCharacterSet());
  }
  if (UtilValidate.isNotEmpty(this.datasourceInfo.getCollate())) {
    sqlBuf.append(" COLLATE ");
    sqlBuf.append(this.datasourceInfo.getCollate());
  }
  if (Debug.verboseOn())   Debug.logVerbose("[createTable] sql=" + sqlBuf.toString(),module);
  try {
    stmt=connection.createStatement();
    stmt.executeUpdate(sqlBuf.toString());
  }
 catch (  SQLException e) {
    return "SQL Exception while executing the following:\n" + sqlBuf.toString() + "\nError was: "+ e.toString();
  }
 finally {
    try {
      if (stmt != null)       stmt.close();
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
    try {
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
  }
  return null;
}
