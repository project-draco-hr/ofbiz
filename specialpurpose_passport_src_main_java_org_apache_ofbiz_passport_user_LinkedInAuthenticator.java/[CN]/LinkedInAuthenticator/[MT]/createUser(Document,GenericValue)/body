{
  Map<String,String> userInfo=parseLinkedInUserInfo(user);
  Map<String,Serializable> createPersonUlMap=new HashMap<String,Serializable>();
  String userLoginId=delegator.getNextSeqId("UserLogin");
  if (userInfo.containsKey("firstName")) {
    createPersonUlMap.put("firstName",userInfo.get("firstName"));
  }
  if (userInfo.containsKey("lastName")) {
    createPersonUlMap.put("lastName",userInfo.get("lastName"));
  }
  if (userInfo.containsKey("userId")) {
    createPersonUlMap.put("externalAuthId",userInfo.get("userId"));
  }
  createPersonUlMap.put("userLoginId",userLoginId);
  createPersonUlMap.put("currentPassword","[EXTERNAL]");
  createPersonUlMap.put("currentPasswordVerify","[EXTERNAL]");
  createPersonUlMap.put("userLogin",system);
  Map<String,Object> createPersonResult;
  try {
    createPersonResult=dispatcher.runSync("createPersonAndUserLogin",createPersonUlMap);
  }
 catch (  GenericServiceException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
  if (ServiceUtil.isError(createPersonResult)) {
    throw new AuthenticatorException(ServiceUtil.getErrorMessage(createPersonResult));
  }
  String partyId=(String)createPersonResult.get("partyId");
  GenericValue partyRole=delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId","CUSTOMER"));
  try {
    delegator.create(partyRole);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    throw new AuthenticatorException(e.getMessage(),e);
  }
  if (userInfo.containsKey("emailAddress")) {
    Map<String,Serializable> createEmailMap=new HashMap<String,Serializable>();
    createEmailMap.put("emailAddress",userInfo.get("emailAddress"));
    createEmailMap.put("contactMechPurposeTypeId","PRIMARY_EMAIL");
    createEmailMap.put("partyId",partyId);
    createEmailMap.put("userLogin",system);
    Map<String,Object> createEmailResult;
    try {
      createEmailResult=dispatcher.runSync("createPartyEmailAddress",createEmailMap);
    }
 catch (    GenericServiceException e) {
      throw new AuthenticatorException(e.getMessage(),e);
    }
    if (ServiceUtil.isError(createEmailResult)) {
      throw new AuthenticatorException(ServiceUtil.getErrorMessage(createEmailResult));
    }
  }
  Timestamp now=UtilDateTime.nowTimestamp();
  for (  String securityGroup : (new LinkedInUserGroupMapper(new String[]{"person"}).getSecurityGroups())) {
    GenericValue secGroup=null;
    try {
      secGroup=delegator.findOne("SecurityGroup",UtilMisc.toMap("groupId",securityGroup),true);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,e.getMessage(),module);
    }
    if (secGroup != null) {
      Map<String,Serializable> createSecGrpMap=new HashMap<String,Serializable>();
      createSecGrpMap.put("userLoginId",userLoginId);
      createSecGrpMap.put("groupId",securityGroup);
      createSecGrpMap.put("fromDate",now);
      createSecGrpMap.put("userLogin",system);
      Map<String,Object> createSecGrpResult;
      try {
        createSecGrpResult=dispatcher.runSync("addUserLoginToSecurityGroup",createSecGrpMap);
      }
 catch (      GenericServiceException e) {
        throw new AuthenticatorException(e.getMessage(),e);
      }
      if (ServiceUtil.isError(createSecGrpResult)) {
        throw new AuthenticatorException(ServiceUtil.getErrorMessage(createSecGrpResult));
      }
    }
  }
  return userLoginId;
}
