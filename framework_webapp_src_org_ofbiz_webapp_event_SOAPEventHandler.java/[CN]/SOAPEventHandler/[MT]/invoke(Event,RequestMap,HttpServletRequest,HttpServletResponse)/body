{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  String wsdlReq=request.getParameter("wsdl");
  if (wsdlReq == null) {
    wsdlReq=request.getParameter("WSDL");
  }
  if (wsdlReq != null) {
    String serviceName=RequestHandler.getOverrideViewUri(request.getPathInfo());
    DispatchContext dctx=dispatcher.getDispatchContext();
    String locationUri=this.getLocationURI(request);
    if (serviceName != null) {
      Document wsdl=null;
      try {
        wsdl=dctx.getWSDL(serviceName,locationUri);
      }
 catch (      GenericServiceException e) {
        serviceName=null;
      }
catch (      WSDLException e) {
        sendError(response,"Unable to obtain WSDL");
        throw new EventHandlerException("Unable to obtain WSDL",e);
      }
      if (wsdl != null) {
        try {
          OutputStream os=response.getOutputStream();
          response.setContentType("text/xml");
          UtilXml.writeXmlDocument(os,wsdl);
          response.flushBuffer();
        }
 catch (        IOException e) {
          throw new EventHandlerException(e);
        }
        return null;
      }
 else {
        sendError(response,"Unable to obtain WSDL");
        throw new EventHandlerException("Unable to obtain WSDL");
      }
    }
    if (serviceName == null) {
      try {
        Writer writer=response.getWriter();
        StringBuilder sb=new StringBuilder();
        sb.append("<html><head><title>OFBiz SOAP/1.1 Services</title></head>");
        sb.append("<body>No such service.").append("<p>Services:<ul>");
        for (        String scvName : dctx.getAllServiceNames()) {
          ModelService model=dctx.getModelService(scvName);
          if (model.export) {
            sb.append("<li><a href=\"").append(locationUri).append("/").append(model.name).append("?wsdl\">");
            sb.append(model.name).append("</a></li>");
          }
        }
        sb.append("</ul></p></body></html>");
        writer.write(sb.toString());
        writer.flush();
        return null;
      }
 catch (      Exception e) {
        sendError(response,"Unable to obtain WSDL");
        throw new EventHandlerException("Unable to obtain WSDL");
      }
    }
  }
  response.setContentType("text/xml");
  SOAPEnvelope reqEnv=null;
  try {
    XMLStreamReader xmlReader=StAXUtils.createXMLStreamReader(request.getInputStream());
    StAXSOAPModelBuilder builder=new StAXSOAPModelBuilder(xmlReader);
    reqEnv=(SOAPEnvelope)builder.getDocumentElement();
    if (Debug.verboseOn()) {
      try {
        Debug.logInfo("Request Message:\n" + reqEnv + "\n",module);
      }
 catch (      Throwable t) {
      }
    }
  }
 catch (  Exception e) {
    sendError(response,"Problem processing the service");
    throw new EventHandlerException("Cannot get the envelope",e);
  }
  Debug.logVerbose("[Processing]: SOAP Event",module);
  try {
    SOAPBody reqBody=reqEnv.getBody();
    Iterator serviceIter=reqBody.getChildElements();
    while (serviceIter.hasNext()) {
      Object serviceObj=serviceIter.next();
      if (serviceObj instanceof OMElement) {
        OMElement serviceElement=(OMElement)serviceObj;
        String serviceName=serviceElement.getLocalName();
        Map<String,Object> parameters=(Map<String,Object>)XmlSerializer.deserialize(serviceElement.toString(),delegator);
        try {
          ModelService model=dispatcher.getDispatchContext().getModelService(serviceName);
          if (model != null && model.export) {
            Map<String,Object> results=dispatcher.runSync(serviceName,parameters);
            Debug.logVerbose("[EventHandler] : Service invoked",module);
            Debug.logVerbose("[EventHandler] : Setting up response message",module);
            String xmlResults=XmlSerializer.serialize(results);
            XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(xmlResults));
            StAXOMBuilder resultsBuilder=new StAXOMBuilder(reader);
            OMElement resultSer=resultsBuilder.getDocumentElement();
            SOAPFactory factory=OMAbstractFactory.getSOAP11Factory();
            SOAPEnvelope resEnv=factory.createSOAPEnvelope();
            SOAPBody resBody=factory.createSOAPBody();
            OMElement resService=factory.createOMElement(new QName(ModelService.TNS,serviceName + "Response"));
            resService.addChild(resultSer.getFirstElement());
            resBody.addChild(resService);
            resEnv.addChild(resBody);
            if (Debug.verboseOn()) {
              try {
                Debug.log("Response Message:\n" + resEnv + "\n",module);
              }
 catch (              Throwable t) {
              }
            }
            resEnv.serialize(response.getOutputStream());
            response.getOutputStream().flush();
          }
        }
 catch (        GenericServiceException e) {
          sendError(response,"Problem processing the service");
          throw new EventHandlerException(e.getMessage(),e);
        }
      }
    }
  }
 catch (  Exception e) {
    sendError(response,e.getMessage());
    throw new EventHandlerException(e.getMessage(),e);
  }
  return null;
}
