{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  AxisServer axisServer;
  String wsdlReq=request.getParameter("wsdl");
  if (wsdlReq == null) {
    wsdlReq=request.getParameter("WSDL");
  }
  if (wsdlReq != null) {
    String serviceName=RequestHandler.getOverrideViewUri(request.getPathInfo());
    DispatchContext dctx=dispatcher.getDispatchContext();
    String locationUri=this.getLocationURI(request);
    if (serviceName != null) {
      Document wsdl=null;
      try {
        wsdl=dctx.getWSDL(serviceName,locationUri);
      }
 catch (      GenericServiceException e) {
        serviceName=null;
      }
catch (      WSDLException e) {
        sendError(response,"Unable to obtain WSDL");
        throw new EventHandlerException("Unable to obtain WSDL",e);
      }
      if (wsdl != null) {
        try {
          OutputStream os=response.getOutputStream();
          response.setContentType("text/xml");
          UtilXml.writeXmlDocument(os,wsdl);
          response.flushBuffer();
        }
 catch (        IOException e) {
          throw new EventHandlerException(e);
        }
        return null;
      }
 else {
        sendError(response,"Unable to obtain WSDL");
        throw new EventHandlerException("Unable to obtain WSDL");
      }
    }
    if (serviceName == null) {
      try {
        Writer writer=response.getWriter();
        StringBuilder sb=new StringBuilder();
        sb.append("<html><head><title>OFBiz SOAP/1.1 Services</title></head>");
        sb.append("<body>No such service.").append("<p>Services:<ul>");
        for (        String scvName : dctx.getAllServiceNames()) {
          ModelService model=dctx.getModelService(scvName);
          if (model.export) {
            sb.append("<li><a href=\"").append(locationUri).append("/").append(model.name).append("?wsdl\">");
            sb.append(model.name).append("</a></li>");
          }
        }
        sb.append("</ul></p></body></html>");
        writer.write(sb.toString());
        writer.flush();
        return null;
      }
 catch (      Exception e) {
        sendError(response,"Unable to obtain WSDL");
        throw new EventHandlerException("Unable to obtain WSDL");
      }
    }
  }
  try {
    axisServer=AxisServer.getServer(UtilMisc.toMap("name","OFBiz/Axis Server","provider",null));
  }
 catch (  AxisFault e) {
    sendError(response,e);
    throw new EventHandlerException("Problems with the AXIS server",e);
  }
  MessageContext mctx=new MessageContext(axisServer);
  mctx.setEncodingStyle(Constants.URI_LITERAL_ENC);
  Message msg=null;
  try {
    msg=new Message(request.getInputStream(),false,request.getHeader("Content-Type"),request.getHeader("Content-Location"));
  }
 catch (  IOException ioe) {
    sendError(response,"Problem processing the service");
    throw new EventHandlerException("Cannot read the input stream",ioe);
  }
  if (msg == null) {
    sendError(response,"No message");
    throw new EventHandlerException("SOAP Message is null");
  }
  if (Debug.verboseOn()) {
    try {
      Debug.logInfo("Request Message:\n" + messageToString(msg) + "\n",module);
    }
 catch (    Throwable t) {
    }
  }
  mctx.setRequestMessage(msg);
  SOAPEnvelope resEnv=new SOAPEnvelope();
  SOAPEnvelope reqEnv=null;
  try {
    reqEnv=(SOAPEnvelope)msg.getSOAPPart().getEnvelope();
  }
 catch (  SOAPException e) {
    sendError(response,"Problem processing the service");
    throw new EventHandlerException("Cannot get the envelope",e);
  }
  List<Object> bodies=null;
  try {
    bodies=reqEnv.getBodyElements();
  }
 catch (  AxisFault e) {
    sendError(response,e);
    throw new EventHandlerException(e.getMessage(),e);
  }
  Debug.logVerbose("[Processing]: SOAP Event",module);
  for (  Object o : bodies) {
    if (o instanceof RPCElement) {
      RPCElement body=(RPCElement)o;
      String serviceName=body.getMethodName();
      List<RPCParam> params=null;
      try {
        params=body.getParams();
      }
 catch (      Exception e) {
        sendError(response,e);
        throw new EventHandlerException(e.getMessage(),e);
      }
      Map<String,Object> serviceContext=FastMap.newInstance();
      for (      RPCParam param : params) {
        if (Debug.verboseOn())         Debug.logVerbose("[Reading Param]: " + param.getName(),module);
        serviceContext.put(param.getName(),param.getObjectValue());
      }
      try {
        ModelService model=dispatcher.getDispatchContext().getModelService(serviceName);
        if (model != null && model.export) {
          Map<String,Object> result=dispatcher.runSync(serviceName,serviceContext);
          Debug.logVerbose("[EventHandler] : Service invoked",module);
          RPCElement resBody=new RPCElement(serviceName + "Response");
          resBody.setPrefix(body.getPrefix());
          resBody.setNamespaceURI(body.getNamespaceURI());
          for (          Map.Entry<String,Object> entry : result.entrySet()) {
            RPCParam par=new RPCParam(entry.getKey(),entry.getValue());
            resBody.addParam(par);
          }
          resEnv.addBodyElement(resBody);
          resEnv.setEncodingStyle(Constants.URI_LITERAL_ENC);
        }
 else {
          sendError(response,"Requested service not available");
          throw new EventHandlerException("Service is not exported");
        }
      }
 catch (      GenericServiceException e) {
        sendError(response,"Problem processing the service");
        throw new EventHandlerException(e.getMessage(),e);
      }
catch (      javax.xml.soap.SOAPException e) {
        sendError(response,"Problem processing the service");
        throw new EventHandlerException(e.getMessage(),e);
      }
    }
  }
  Debug.logVerbose("[EventHandler] : Setting up response message",module);
  msg=new Message(resEnv);
  mctx.setResponseMessage(msg);
  if (msg == null) {
    sendError(response,"No response message available");
    throw new EventHandlerException("No response message available");
  }
  if (Debug.verboseOn()) {
    try {
      Debug.log("Response Message:\n" + messageToString(msg) + "\n",module);
    }
 catch (    Throwable t) {
    }
  }
  try {
    response.setContentType(msg.getContentType(Constants.DEFAULT_SOAP_VERSION));
    response.setContentLength(Integer.parseInt(Long.toString(msg.getContentLength())));
  }
 catch (  AxisFault e) {
    sendError(response,e);
    throw new EventHandlerException(e.getMessage(),e);
  }
  try {
    msg.writeTo(response.getOutputStream());
    response.flushBuffer();
  }
 catch (  IOException e) {
    throw new EventHandlerException("Cannot write to the output stream");
  }
catch (  SOAPException e) {
    throw new EventHandlerException("Cannot write message to the output stream");
  }
  Debug.logVerbose("[EventHandler] : Message sent to requester",module);
  return null;
}
