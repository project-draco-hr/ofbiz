{
  Delegator delegator=dctx.getDelegator();
  Security security=dctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=getLocale(context);
  if (!security.hasPermission("SERVICE_INVOKE_ANY",userLogin)) {
    String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.no_permission_to_run",locale) + ".";
    return ServiceUtil.returnError(errMsg);
  }
  String jobId=(String)context.get("jobId");
  Map<String,Object> fields=UtilMisc.<String,Object>toMap("jobId",jobId);
  GenericValue job=null;
  try {
    job=delegator.findOne("JobSandbox",fields,false);
    if (job != null) {
      job.set("cancelDateTime",UtilDateTime.nowTimestamp());
      job.set("statusId","SERVICE_CANCELLED");
      job.store();
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.unable_to_cancel_job",locale) + " : " + fields;
    return ServiceUtil.returnError(errMsg);
  }
  Timestamp cancelDate=job.getTimestamp("cancelDateTime");
  if (cancelDate != null) {
    Map<String,Object> result=ServiceUtil.returnSuccess();
    result.put("cancelDateTime",cancelDate);
    return result;
  }
 else {
    String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.unable_to_cancel_job",locale) + " : " + job;
    return ServiceUtil.returnError(errMsg);
  }
}
