{
  Debug.logWarning("WARNING: purgeOldJobs service invoked. This service is obsolete - the Job Scheduler will purge old jobs automatically.",module);
  String sendPool=ServiceConfigUtil.getSendPool();
  int daysToKeep=ServiceConfigUtil.getPurgeJobDays();
  Delegator delegator=dctx.getDelegator();
  Timestamp now=UtilDateTime.nowTimestamp();
  Calendar cal=Calendar.getInstance();
  cal.setTimeInMillis(now.getTime());
  cal.add(Calendar.DAY_OF_YEAR,daysToKeep * -1);
  Timestamp purgeTime=new Timestamp(cal.getTimeInMillis());
  EntityCondition pool=EntityCondition.makeCondition("poolId",sendPool);
  List<EntityExpr> finExp=UtilMisc.toList(EntityCondition.makeCondition("finishDateTime",EntityOperator.NOT_EQUAL,null));
  finExp.add(EntityCondition.makeCondition("finishDateTime",EntityOperator.LESS_THAN,purgeTime));
  List<EntityExpr> canExp=UtilMisc.toList(EntityCondition.makeCondition("cancelDateTime",EntityOperator.NOT_EQUAL,null));
  canExp.add(EntityCondition.makeCondition("cancelDateTime",EntityOperator.LESS_THAN,purgeTime));
  EntityCondition cancelled=EntityCondition.makeCondition(canExp);
  EntityCondition finished=EntityCondition.makeCondition(finExp);
  EntityCondition doneCond=EntityCondition.makeCondition(UtilMisc.toList(cancelled,finished),EntityOperator.OR);
  EntityCondition mainCond=EntityCondition.makeCondition(UtilMisc.toList(doneCond,pool));
  EntityFindOptions findOptions=new EntityFindOptions();
  findOptions.setResultSetType(EntityFindOptions.TYPE_SCROLL_INSENSITIVE);
  findOptions.setMaxRows(1000);
  Transaction parent=null;
  try {
    if (TransactionUtil.getStatus() != TransactionUtil.STATUS_NO_TRANSACTION) {
      parent=TransactionUtil.suspend();
    }
    boolean noMoreResults=false;
    boolean beganTx1=false;
    while (!noMoreResults) {
      List<GenericValue> curList=null;
      try {
        beganTx1=TransactionUtil.begin();
        EntityListIterator foundJobs=delegator.find("JobSandbox",mainCond,null,UtilMisc.toSet("jobId"),null,findOptions);
        try {
          curList=foundJobs.getPartialList(1,1000);
        }
  finally {
          foundJobs.close();
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot obtain job data from datasource",module);
        try {
          TransactionUtil.rollback(beganTx1,e.getMessage(),e);
        }
 catch (        GenericTransactionException e1) {
          Debug.logWarning(e1,module);
        }
        return ServiceUtil.returnError(e.getMessage());
      }
 finally {
        try {
          TransactionUtil.commit(beganTx1);
        }
 catch (        GenericTransactionException e) {
          Debug.logWarning(e,module);
        }
      }
      if (UtilValidate.isNotEmpty(curList)) {
        for (        GenericValue job : curList) {
          String jobId=job.getString("jobId");
          boolean beganTx2=false;
          try {
            beganTx2=TransactionUtil.begin();
            job.remove();
          }
 catch (          GenericEntityException e) {
            Debug.logInfo("Cannot remove job data for ID: " + jobId,module);
            try {
              TransactionUtil.rollback(beganTx2,e.getMessage(),e);
            }
 catch (            GenericTransactionException e1) {
              Debug.logWarning(e1,module);
            }
          }
 finally {
            try {
              TransactionUtil.commit(beganTx2);
            }
 catch (            GenericTransactionException e) {
              Debug.logWarning(e,module);
            }
          }
        }
      }
 else {
        noMoreResults=true;
      }
    }
    boolean beganTx3=false;
    GenericValue runtimeData=null;
    EntityListIterator runTimeDataIt=null;
    List<GenericValue> runtimeDataToDelete=FastList.newInstance();
    long jobsandBoxCount=0;
    try {
      beganTx3=TransactionUtil.begin();
      runTimeDataIt=delegator.find("RuntimeData",null,null,UtilMisc.toSet("runtimeDataId"),null,null);
      try {
        while ((runtimeData=runTimeDataIt.next()) != null) {
          EntityCondition whereCondition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("runtimeDataId",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("runtimeDataId",EntityOperator.EQUALS,runtimeData.getString("runtimeDataId"))),EntityOperator.AND);
          jobsandBoxCount=delegator.findCountByCondition("JobSandbox",whereCondition,null,null);
          if (BigDecimal.ZERO.compareTo(BigDecimal.valueOf(jobsandBoxCount)) == 0) {
            runtimeDataToDelete.add(runtimeData);
          }
        }
      }
  finally {
        runTimeDataIt.close();
      }
      delegator.removeAll(runtimeDataToDelete);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Cannot obtain runtime data from datasource",module);
      try {
        TransactionUtil.rollback(beganTx3,e.getMessage(),e);
      }
 catch (      GenericTransactionException e1) {
        Debug.logWarning(e1,module);
      }
      return ServiceUtil.returnError(e.getMessage());
    }
 finally {
      try {
        TransactionUtil.commit(beganTx3);
      }
 catch (      GenericTransactionException e) {
        Debug.logWarning(e,module);
      }
    }
  }
 catch (  GenericTransactionException e) {
    Debug.logError(e,"Unable to suspend transaction; cannot purge jobs!",module);
    return ServiceUtil.returnError(e.getMessage());
  }
 finally {
    if (parent != null) {
      try {
        TransactionUtil.resume(parent);
      }
 catch (      GenericTransactionException e) {
        Debug.logWarning(e,module);
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
