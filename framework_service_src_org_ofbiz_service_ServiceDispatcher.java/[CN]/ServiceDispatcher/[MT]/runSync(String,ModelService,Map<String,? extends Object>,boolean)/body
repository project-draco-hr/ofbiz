{
  ServiceSemaphore lock=null;
  if ("wait".equals(modelService.semaphore) || "fail".equals(modelService.semaphore)) {
    lock=new ServiceSemaphore(delegator,modelService);
    lock.acquire();
  }
  long serviceStartTime=System.currentTimeMillis();
  boolean debugging=checkDebug(modelService,1,true);
  if (Debug.verboseOn()) {
    Debug.logVerbose("[ServiceDispatcher.runSync] : invoking service " + modelService.name + " ["+ modelService.location+ "/"+ modelService.invoke+ "] ("+ modelService.engineName+ ")",module);
  }
  Map<String,Object> context=FastMap.newInstance();
  if (params != null) {
    context.putAll(params);
  }
  Map<String,Object> result=FastMap.newInstance();
  boolean isFailure=false;
  boolean isError=false;
  RunningService rs=this.logService(localName,modelService,GenericEngine.SYNC_MODE);
  Map<String,List<ServiceEcaRule>> eventMap=ServiceEcaUtil.getServiceEventMap(modelService.name);
  Locale locale=this.checkLocale(context);
  DispatchContext ctx=localContext.get(localName);
  GenericEngine engine=this.getGenericEngine(modelService.engineName);
  modelService.updateDefaultValues(context,ModelService.IN_PARAM);
  Map<String,Object> ecaContext=null;
  Transaction parentTransaction=null;
  boolean beganTrans=false;
  try {
    if (modelService.useTransaction) {
      if (TransactionUtil.isTransactionInPlace()) {
        if (modelService.requireNewTransaction) {
          parentTransaction=TransactionUtil.suspend();
          if (TransactionUtil.isTransactionInPlace()) {
            throw new GenericTransactionException("In service " + modelService.name + " transaction is still in place after suspend, status is "+ TransactionUtil.getStatusString());
          }
          beganTrans=TransactionUtil.begin(modelService.transactionTimeout);
        }
      }
 else {
        beganTrans=TransactionUtil.begin(modelService.transactionTimeout);
      }
      if (beganTrans && TransactionUtil.debugResources) {
        DebugXaResource dxa=new DebugXaResource(modelService.name);
        try {
          dxa.enlist();
        }
 catch (        Exception e) {
          Debug.logError(e,module);
        }
      }
    }
    try {
      int lockRetriesRemaining=LOCK_RETRIES;
      boolean needsLockRetry=false;
      do {
        lockRetriesRemaining--;
        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-rollback",ctx,context,result,isError,isFailure);
        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-commit",ctx,context,result,isError,isFailure);
        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"auth",ctx,context,result,isError,isFailure);
        isFailure=ServiceUtil.isFailure(result);
        isError=ServiceUtil.isError(result);
        context=checkAuth(localName,context,modelService);
        GenericValue userLogin=(GenericValue)context.get("userLogin");
        if (modelService.auth && userLogin == null) {
          throw new ServiceAuthException("User authorization is required for this service: " + modelService.name + modelService.debugInfo());
        }
        if (userLogin != null && userLogin.getString("userLoginId") != null) {
          GenericDelegator.pushUserIdentifier(userLogin.getString("userLoginId"));
        }
        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"in-validate",ctx,context,result,isError,isFailure);
        isFailure=ServiceUtil.isFailure(result);
        isError=ServiceUtil.isError(result);
        if (modelService.validate && !isError && !isFailure) {
          try {
            modelService.validate(context,ModelService.IN_PARAM,locale);
          }
 catch (          ServiceValidationException e) {
            Debug.logError(e,"Incoming context (in runSync : " + modelService.name + ") does not match expected requirements",module);
            throw e;
          }
        }
        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"invoke",ctx,context,result,isError,isFailure);
        isFailure=ServiceUtil.isFailure(result);
        isError=ServiceUtil.isError(result);
        if (!isError && !isFailure) {
          Map<String,Object> invokeResult=null;
          if (serviceDebugMode) {
            invokeResult=modelService.invoker.runSync(localName,engine,context);
            modelService.invoker.sendCallbacks(engine,context,invokeResult,null,GenericEngine.SYNC_MODE);
          }
 else {
            invokeResult=engine.runSync(localName,modelService,context);
            engine.sendCallbacks(modelService,context,invokeResult,GenericEngine.SYNC_MODE);
          }
          if (invokeResult != null) {
            result.putAll(invokeResult);
          }
 else {
            Debug.logWarning("Service (in runSync : " + modelService.name + ") returns null result",module);
          }
        }
        isFailure=ServiceUtil.isFailure(result);
        isError=ServiceUtil.isError(result);
        if (beganTrans) {
          String errMsg=ServiceUtil.getErrorMessage(result);
          if (errMsg != null && errMsg.toUpperCase().indexOf("DEADLOCK") >= 0) {
            String retryMsg="RETRYING SERVICE [" + modelService.name + "]: Deadlock error found in message ["+ errMsg+ "]; retry ["+ (LOCK_RETRIES - lockRetriesRemaining)+ "] of ["+ LOCK_RETRIES+ "]";
            TransactionUtil.rollback(beganTrans,retryMsg,null);
            beganTrans=TransactionUtil.begin(modelService.transactionTimeout);
            if (beganTrans && TransactionUtil.debugResources) {
              DebugXaResource dxa=new DebugXaResource(modelService.name);
              try {
                dxa.enlist();
              }
 catch (              Exception e) {
                Debug.logError(e,module);
              }
            }
            if (!beganTrans) {
              Debug.logError("After rollback attempt for lock retry did not begin a new transaction!",module);
            }
 else {
              needsLockRetry=true;
              result=FastMap.newInstance();
              isFailure=false;
              isError=false;
              Debug.logWarning(retryMsg,module);
            }
            if (errMsg != null && (errMsg.indexOf("A lock could not be obtained within the time requested") >= 0 || errMsg.indexOf("Lock wait timeout exceeded") >= 0)) {
            }
          }
        }
      }
 while (needsLockRetry && lockRetriesRemaining > 0);
      ecaContext=FastMap.newInstance();
      ecaContext.putAll(context);
      ecaContext.putAll(result);
      modelService.updateDefaultValues(context,ModelService.OUT_PARAM);
      if (modelService.validate && validateOut) {
        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"out-validate",ctx,ecaContext,result,isError,isFailure);
        try {
          modelService.validate(result,ModelService.OUT_PARAM,locale);
        }
 catch (        ServiceValidationException e) {
          throw new GenericServiceException("Outgoing result (in runSync : " + modelService.name + ") does not match expected requirements",e);
        }
      }
      if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,"commit",ctx,ecaContext,result,isError,isFailure);
      isFailure=ServiceUtil.isFailure(result);
      isError=ServiceUtil.isError(result);
      if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-commit-post-run",ctx,ecaContext,result,isError,isFailure);
      if (isFailure) {
        Debug.logWarning("Service Failure [" + modelService.name + "]: "+ ServiceUtil.getErrorMessage(result),module);
      }
    }
 catch (    Throwable t) {
      if (Debug.timingOn()) {
        UtilTimer.closeTimer(localName + " / " + modelService.name,"Sync service failed...",module);
      }
      String errMsg="Service [" + modelService.name + "] threw an unexpected exception/error";
      if (serviceDebugMode) {
        modelService.invoker.sendCallbacks(engine,context,null,t,GenericEngine.SYNC_MODE);
      }
 else {
        engine.sendCallbacks(modelService,context,t,GenericEngine.SYNC_MODE);
      }
      try {
        TransactionUtil.rollback(beganTrans,errMsg,t);
      }
 catch (      GenericTransactionException te) {
        Debug.logError(te,"Cannot rollback transaction",module);
      }
      checkDebug(modelService,0,debugging);
      rs.setEndStamp();
      if (t instanceof ServiceAuthException) {
        throw (ServiceAuthException)t;
      }
 else       if (t instanceof ServiceValidationException) {
        throw (ServiceValidationException)t;
      }
 else       if (t instanceof GenericServiceException) {
        throw (GenericServiceException)t;
      }
 else {
        throw new GenericServiceException("Service [" + modelService.name + "] Failed"+ modelService.debugInfo(),t);
      }
    }
 finally {
      if (isError) {
        String errMsg="Error in Service [" + modelService.name + "]: "+ ServiceUtil.getErrorMessage(result);
        Debug.logError(errMsg,module);
        try {
          TransactionUtil.rollback(beganTrans,errMsg,null);
        }
 catch (        GenericTransactionException e) {
          Debug.logError(e,"Could not rollback transaction: " + e.toString(),module);
        }
      }
 else {
        try {
          TransactionUtil.commit(beganTrans);
        }
 catch (        GenericTransactionException e) {
          String errMsg="Could not commit transaction for service [" + modelService.name + "] call";
          Debug.logError(e,errMsg,module);
          if (e.getMessage() != null) {
            errMsg=errMsg + ": " + e.getMessage();
          }
          throw new GenericServiceException(errMsg);
        }
      }
      modelService.evalNotifications(this.getLocalContext(localName),context,result);
      GenericDelegator.popUserIdentifier();
    }
  }
 catch (  GenericTransactionException te) {
    Debug.logError(te,"Problems with the transaction",module);
    throw new GenericServiceException("Problems with the transaction.",te.getNested());
  }
 finally {
    if (lock != null) {
      lock.release();
    }
    if (parentTransaction != null) {
      try {
        TransactionUtil.resume(parentTransaction);
      }
 catch (      GenericTransactionException ite) {
        Debug.logWarning(ite,"Transaction error, not resumed",module);
        throw new GenericServiceException("Resume transaction exception, see logs");
      }
    }
  }
  if (eventMap != null)   ServiceEcaUtil.evalRules(modelService.name,eventMap,"return",ctx,ecaContext,result,isError,isFailure);
  checkDebug(modelService,0,debugging);
  rs.setEndStamp();
  long timeToRun=System.currentTimeMillis() - serviceStartTime;
  if (Debug.timingOn() && timeToRun > 50) {
    String resultStr=result.toString();
    if (resultStr.length() > 10240) {
      resultStr=resultStr.substring(0,10226) + "...[truncated]";
    }
    Debug.logTiming("Sync service [" + localName + "/"+ modelService.name+ "] finished in ["+ timeToRun+ "] milliseconds with response ["+ resultStr+ "]",module);
  }
 else   if (timeToRun > 200 && Debug.infoOn()) {
    String resultStr=result.toString();
    if (resultStr.length() > 10240) {
      resultStr=resultStr.substring(0,10226) + "...[truncated]";
    }
    Debug.logInfo("Sync service [" + localName + "/"+ modelService.name+ "] finished in ["+ timeToRun+ "] milliseconds with response ["+ resultStr+ "]",module);
  }
  return result;
}
