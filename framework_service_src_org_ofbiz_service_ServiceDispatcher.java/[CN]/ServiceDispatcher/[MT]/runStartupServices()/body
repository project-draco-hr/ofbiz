{
  if (jm == null)   return 0;
  Element root;
  try {
    root=ServiceConfigUtil.getXmlRootElement();
  }
 catch (  GenericConfigException e) {
    Debug.logError(e,module);
    return 0;
  }
  int servicesScheduled=0;
  List<? extends Element> startupServices=UtilXml.childElementList(root,"startup-service");
  if (startupServices != null && startupServices.size() > 0) {
    for (    Element ss : startupServices) {
      String serviceName=ss.getAttribute("name");
      String runtimeDataId=ss.getAttribute("runtime-data-id");
      String delayStr=ss.getAttribute("runtime-delay");
      String sendToPool=ss.getAttribute("run-in-pool");
      if (UtilValidate.isEmpty(sendToPool)) {
        sendToPool=ServiceConfigUtil.getSendPool();
      }
      long runtimeDelay;
      try {
        runtimeDelay=Long.parseLong(delayStr);
      }
 catch (      Exception e) {
        Debug.logError(e,"Unable to parse runtime-delay value; using 0",module);
        runtimeDelay=0;
      }
      long runtime=System.currentTimeMillis() + 1000 + runtimeDelay;
      try {
        jm.schedule(sendToPool,serviceName,runtimeDataId,runtime);
      }
 catch (      JobManagerException e) {
        Debug.logError(e,"Unable to schedule service [" + serviceName + "]",module);
      }
    }
  }
  return servicesScheduled;
}
