{
  if (Debug.timingOn()) {
    UtilTimer.timerLog(localName + " / " + service.name,"ASync service started...",module);
  }
  if (Debug.verboseOn() || service.debug) {
    Debug.logVerbose("[ServiceDispatcher.runAsync] : preparing service " + service.name + " ["+ service.location+ "/"+ service.invoke+ "] ("+ service.engineName+ ")",module);
  }
  Map<String,Object> context=FastMap.newInstance();
  if (params != null) {
    context.putAll(params);
  }
  Map<String,Object> result=FastMap.newInstance();
  boolean isFailure=false;
  boolean isError=false;
  this.logService(localName,service,GenericEngine.ASYNC_MODE);
  Locale locale=this.checkLocale(context);
  DispatchContext ctx=localContext.get(localName);
  GenericEngine engine=this.getGenericEngine(service.engineName);
  Transaction parentTransaction=null;
  boolean beganTrans=false;
  try {
    if (service.useTransaction) {
      if (TransactionUtil.isTransactionInPlace()) {
        if (service.requireNewTransaction) {
          parentTransaction=TransactionUtil.suspend();
          beganTrans=TransactionUtil.begin(service.transactionTimeout);
        }
      }
 else {
        beganTrans=TransactionUtil.begin(service.transactionTimeout);
      }
      if (beganTrans && TransactionUtil.debugResources()) {
        DebugXaResource dxa=new DebugXaResource(service.name);
        try {
          dxa.enlist();
        }
 catch (        Exception e) {
          Debug.logError(e,module);
        }
      }
    }
    try {
      Map<String,List<ServiceEcaRule>> eventMap=ServiceEcaUtil.getServiceEventMap(service.name);
      if (eventMap != null)       ServiceEcaUtil.evalRules(service.name,eventMap,"auth",ctx,context,result,isError,isFailure);
      context=checkAuth(localName,context,service);
      Object userLogin=context.get("userLogin");
      if (service.auth && userLogin == null) {
        throw new ServiceAuthException("User authorization is required for this service: " + service.name + service.debugInfo());
      }
      if (eventMap != null)       ServiceEcaUtil.evalRules(service.name,eventMap,"in-validate",ctx,context,result,isError,isFailure);
      isFailure=ModelService.RESPOND_FAIL.equals(result.get(ModelService.RESPONSE_MESSAGE));
      isError=ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
      if (service.validate && !isError && !isFailure) {
        try {
          service.validate(context,ModelService.IN_PARAM,locale);
        }
 catch (        ServiceValidationException e) {
          Debug.logError(e,"Incoming service context (in runAsync: " + service.name + ") does not match expected requirements",module);
          throw e;
        }
      }
      if (!isError && !isFailure) {
        if (requester != null) {
          engine.runAsync(localName,service,context,requester,persist);
        }
 else {
          engine.runAsync(localName,service,context,persist);
        }
        engine.sendCallbacks(service,context,GenericEngine.ASYNC_MODE);
      }
      if (Debug.timingOn()) {
        UtilTimer.closeTimer(localName + " / " + service.name,"ASync service finished...",module);
      }
    }
 catch (    Throwable t) {
      if (Debug.timingOn()) {
        UtilTimer.closeTimer(localName + " / " + service.name,"ASync service failed...",module);
      }
      String errMsg="Service [" + service.name + "] threw an unexpected exception/error";
      Debug.logError(t,errMsg,module);
      engine.sendCallbacks(service,context,t,GenericEngine.ASYNC_MODE);
      try {
        TransactionUtil.rollback(beganTrans,errMsg,t);
      }
 catch (      GenericTransactionException te) {
        Debug.logError(te,"Cannot rollback transaction",module);
      }
      if (t instanceof ServiceAuthException) {
        throw (ServiceAuthException)t;
      }
 else       if (t instanceof ServiceValidationException) {
        throw (ServiceValidationException)t;
      }
 else       if (t instanceof GenericServiceException) {
        throw (GenericServiceException)t;
      }
 else {
        throw new GenericServiceException("Service [" + service.name + "] Failed"+ service.debugInfo(),t);
      }
    }
 finally {
      try {
        TransactionUtil.commit(beganTrans);
      }
 catch (      GenericTransactionException e) {
        Debug.logError(e,"Could not commit transaction",module);
        throw new GenericServiceException("Commit transaction failed");
      }
    }
  }
 catch (  GenericTransactionException se) {
    Debug.logError(se,"Problems with the transaction",module);
    throw new GenericServiceException("Problems with the transaction: " + se.getMessage() + "; See logs for more detail");
  }
 finally {
    if (parentTransaction != null) {
      try {
        TransactionUtil.resume(parentTransaction);
      }
 catch (      GenericTransactionException ise) {
        Debug.logError(ise,"Trouble resuming parent transaction",module);
        throw new GenericServiceException("Resume transaction exception: " + ise.getMessage() + "; See logs for more detail");
      }
    }
  }
}
