{
  Double shipmentCostEstimate=null;
  Map<String,Object> serviceResult=null;
  try {
    Map<String,Object> serviceContext=FastMap.newInstance();
    serviceContext.put("shippingContactMechId",shippingContactMechId);
    serviceContext.put("shipmentMethodTypeId",shipmentMethodTypeId);
    serviceContext.put("carrierPartyId",carrierPartyId);
    serviceContext.put("carrierRoleTypeId",carrierRoleTypeId);
    serviceContext.put("productStoreId",productStoreId);
    if (UtilValidate.isEmpty(shippableItemInfo)) {
      shippableItemInfo=FastList.newInstance();
      for (      PackingSessionLine line : getLines()) {
        List<GenericValue> oiasgas=getDelegator().findByAnd("OrderItemAndShipGroupAssoc",UtilMisc.toMap("orderId",line.getOrderId(),"orderItemSeqId",line.getOrderItemSeqId(),"shipGroupSeqId",line.getShipGroupSeqId()));
        shippableItemInfo.addAll(oiasgas);
      }
    }
    serviceContext.put("shippableItemInfo",shippableItemInfo);
    if (UtilValidate.isEmpty(shippableWeight)) {
      shippableWeight=Double.valueOf(getTotalWeight());
    }
    serviceContext.put("shippableWeight",shippableWeight);
    if (UtilValidate.isEmpty(shippableQuantity)) {
      shippableQuantity=Double.valueOf(getPackedQuantity(-1));
    }
    serviceContext.put("shippableQuantity",shippableQuantity);
    if (UtilValidate.isEmpty(shippableTotal)) {
      shippableTotal=Double.valueOf(0);
    }
    serviceContext.put("shippableTotal",shippableTotal);
    serviceResult=getDispatcher().runSync("calcShipmentCostEstimate",serviceContext);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
  }
  if (!UtilValidate.isEmpty(serviceResult.get("shippingEstimateAmount"))) {
    shipmentCostEstimate=(Double)serviceResult.get("shippingEstimateAmount");
  }
  return shipmentCostEstimate;
}
