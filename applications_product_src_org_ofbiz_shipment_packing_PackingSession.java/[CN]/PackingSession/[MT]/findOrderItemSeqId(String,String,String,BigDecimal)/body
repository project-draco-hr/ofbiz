{
  Map<String,Object> lookupMap=FastMap.newInstance();
  lookupMap.put("orderId",orderId);
  lookupMap.put("productId",productId);
  lookupMap.put("statusId","ITEM_APPROVED");
  lookupMap.put("shipGroupSeqId",shipGroupSeqId);
  List<String> sort=UtilMisc.toList("-quantity");
  List<GenericValue> orderItems=this.getDelegator().findByAnd("OrderItemAndShipGroupAssoc",lookupMap,sort);
  String orderItemSeqId=null;
  if (orderItems != null) {
    for (    GenericValue item : orderItems) {
      Map<String,Object> invLookup=FastMap.newInstance();
      invLookup.put("orderId",orderId);
      invLookup.put("orderItemSeqId",item.getString("orderItemSeqId"));
      invLookup.put("shipGroupSeqId",shipGroupSeqId);
      List<GenericValue> reservations=this.getDelegator().findByAnd("OrderItemShipGrpInvRes",invLookup);
      for (      GenericValue res : reservations) {
        BigDecimal qty=res.getBigDecimal("quantity");
        if (quantity.compareTo(qty) <= 0) {
          orderItemSeqId=item.getString("orderItemSeqId");
          break;
        }
      }
    }
  }
  if (orderItemSeqId != null) {
    return orderItemSeqId;
  }
 else {
    throw new GeneralException("No valid order item found for product [" + productId + "] with quantity: "+ quantity);
  }
}
