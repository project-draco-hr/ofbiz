{
  if (status == 0) {
    throw new GeneralException("Packing session has been completed; be sure to CLEAR before packing a new order! [000]");
  }
  if (!update && quantity == 0) {
    return;
  }
  productId=ProductWorker.findProductId(this.getDelegator(),productId);
  if (orderId == null) {
    orderId=primaryOrderId;
  }
  if (shipGroupSeqId == null) {
    shipGroupSeqId=primaryShipGrp;
  }
  if (orderItemSeqId == null && productId != null) {
    orderItemSeqId=this.findOrderItemSeqId(productId,orderId,shipGroupSeqId,quantity);
  }
  Map invLookup=FastMap.newInstance();
  invLookup.put("orderId",orderId);
  invLookup.put("orderItemSeqId",orderItemSeqId);
  invLookup.put("shipGroupSeqId",shipGroupSeqId);
  List reservations=this.getDelegator().findByAnd("OrderItemShipGrpInvRes",invLookup,UtilMisc.toList("quantity DESC"));
  if (UtilValidate.isEmpty(reservations)) {
    throw new GeneralException("No inventory reservations available; cannot pack this item! [101]");
  }
  if (reservations.size() == 1) {
    GenericValue res=EntityUtil.getFirst(reservations);
    int checkCode=this.checkLineForAdd(res,orderId,orderItemSeqId,shipGroupSeqId,quantity,packageSeqId,update);
    this.createPackLineItem(checkCode,res,orderId,orderItemSeqId,shipGroupSeqId,productId,quantity,weight,packageSeqId);
  }
 else {
    Map toCreateMap=FastMap.newInstance();
    Iterator i=reservations.iterator();
    double qtyRemain=quantity;
    while (i.hasNext() && qtyRemain > 0) {
      GenericValue res=(GenericValue)i.next();
      double resQty=res.getDouble("quantity").doubleValue();
      double thisQty=resQty > qtyRemain ? qtyRemain : resQty;
      int thisCheck=this.checkLineForAdd(res,orderId,orderItemSeqId,shipGroupSeqId,thisQty,packageSeqId,update);
switch (thisCheck) {
case 2:
        Debug.log("Packing check returned '2' - new pack line will be created!",module);
      toCreateMap.put(res,new Double(resQty));
    qtyRemain-=resQty;
  break;
case 1:
Debug.log("Packing check returned '1' - existing pack line has been updated!",module);
qtyRemain-=resQty;
break;
case 0:
Debug.log("Packing check returned '0' - doing nothing.",module);
break;
}
}
if (qtyRemain == 0) {
Iterator x=toCreateMap.keySet().iterator();
while (x.hasNext()) {
GenericValue res=(GenericValue)x.next();
Double qty=(Double)toCreateMap.get(res);
this.createPackLineItem(2,res,orderId,orderItemSeqId,shipGroupSeqId,productId,qty.doubleValue(),weight,packageSeqId);
}
}
 else {
throw new GeneralException("Not enough inventory reservation available; cannot pack the item! [103]");
}
}
this.runEvents(PackingEvent.EVENT_CODE_ADD);
}
