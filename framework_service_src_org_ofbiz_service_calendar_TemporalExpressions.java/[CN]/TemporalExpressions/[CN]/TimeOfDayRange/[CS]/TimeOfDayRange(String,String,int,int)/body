{
  if (UtilValidate.isEmpty(start)) {
    throw new IllegalArgumentException("start argument cannot be null or empty");
  }
  if (UtilValidate.isEmpty(end)) {
    throw new IllegalArgumentException("end argument cannot be null or empty");
  }
  if (interval != Calendar.SECOND && interval != Calendar.MINUTE && interval != Calendar.HOUR_OF_DAY) {
    throw new IllegalArgumentException("invalid interval argument");
  }
  if (count < 1) {
    throw new IllegalArgumentException("invalid count argument");
  }
  this.startStr=start;
  this.endStr=end;
  this.interval=interval;
  this.count=count;
  String strArray[]=this.startStr.split(":");
  if (strArray.length == 0 || strArray.length > 3) {
    throw new IllegalArgumentException("Invalid start time argument");
  }
  this.startHrs=Integer.valueOf(strArray[0]);
  this.startMins=strArray.length > 1 ? Integer.valueOf(strArray[1]) : 0;
  this.startSecs=strArray.length > 2 ? Integer.valueOf(strArray[2]) : 0;
  if (this.startHrs > 23 || this.startMins > 59 || this.startSecs > 59) {
    throw new IllegalArgumentException("Invalid start time argument");
  }
  strArray=this.endStr.split(":");
  if (strArray.length == 0 || strArray.length > 3) {
    throw new IllegalArgumentException("Invalid end time argument");
  }
  this.endHrs=Integer.valueOf(strArray[0]);
  this.endMins=strArray.length > 1 ? Integer.valueOf(strArray[1]) : 0;
  this.endSecs=strArray.length > 2 ? Integer.valueOf(strArray[2]) : 0;
  if (this.endHrs > 23 || this.endMins > 59 || this.endSecs > 59) {
    throw new IllegalArgumentException("Invalid end time argument");
  }
  this.sequence=SEQUENCE_TOD_RANGE + this.startHrs;
  if (Debug.verboseOn()) {
    Debug.logVerbose("Created " + this,module);
  }
}
