{
  if (lhs == null) {
    throw new IllegalArgumentException("The field name/value cannot be null");
  }
  if (operator == null) {
    throw new IllegalArgumentException("The operator argument cannot be null");
  }
  if (rhs == null || rhs == GenericEntity.NULL_FIELD) {
    if (!EntityOperator.NOT_EQUAL.equals(operator) && !EntityOperator.EQUALS.equals(operator)) {
      throw new IllegalArgumentException("Operator must be EQUALS or NOT_EQUAL when right/rhs argument is NULL ");
    }
  }
  if (EntityOperator.BETWEEN.equals(operator)) {
    if (!(rhs instanceof Collection<?>) || (((Collection<?>)rhs).size() != 2)) {
      throw new IllegalArgumentException("BETWEEN Operator requires a Collection with 2 elements for the right/rhs argument");
    }
  }
  if (lhs instanceof String) {
    this.lhs=EntityFieldValue.makeFieldValue((String)lhs);
  }
 else {
    this.lhs=lhs;
  }
  this.operator=UtilGenerics.cast(operator);
  this.rhs=rhs;
}
