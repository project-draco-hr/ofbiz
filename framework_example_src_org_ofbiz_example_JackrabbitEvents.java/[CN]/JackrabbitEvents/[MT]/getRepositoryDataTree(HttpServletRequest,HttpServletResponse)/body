{
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  RepositoryAccessJackrabbit repositoryAccess=new RepositoryAccessJackrabbit(userLogin);
  try {
    JSONArray fileTree=repositoryAccess.getJsonDataTree();
    request.setAttribute("dataTree",StringUtil.wrapString(fileTree.toString()));
  }
 catch (  RepositoryException e) {
    Debug.logError(e,module);
    request.setAttribute("dataTree",new JSONArray());
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    repositoryAccess.closeAccess();
    return "error";
  }
  List<String> contentList=new ArrayList<String>();
  Map<String,List<String>> languageList=FastMap.newInstance();
  Session session=repositoryAccess.getSession();
  Node root;
  try {
    root=session.getRootNode();
    getContentList(root,contentList);
  }
 catch (  RepositoryException e) {
    Debug.logError(e,module);
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    repositoryAccess.closeAccess();
    return "error";
  }
 finally {
  }
  try {
    for (    String path : contentList) {
      Node parent=session.getNode(path);
      NodeIterator ni=parent.getNodes();
      List<String> language=new ArrayList<String>();
      while (ni.hasNext()) {
        Node t=ni.nextNode();
        if (t.hasProperty("localized") && t.getProperty("localized").getBoolean()) {
          String l=t.getPath();
          language.add(l.substring(l.lastIndexOf("/") + 1));
        }
      }
      languageList.put(path,language);
    }
  }
 catch (  ValueFormatException e) {
    Debug.logError(e,module);
  }
catch (  PathNotFoundException e) {
    Debug.logError(e,module);
  }
catch (  RepositoryException e) {
    Debug.logError(e,module);
  }
 finally {
    repositoryAccess.closeAccess();
  }
  request.setAttribute("contentList",contentList);
  JSONObject jo=new JSONObject();
  jo.putAll(languageList);
  request.setAttribute("languageList",jo);
  return "success";
}
