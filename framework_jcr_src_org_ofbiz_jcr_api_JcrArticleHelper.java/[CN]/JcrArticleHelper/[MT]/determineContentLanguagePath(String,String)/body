{
  if (ConstantsJackrabbit.ROOTPATH.equals(contentPath)) {
    return contentPath;
  }
  String[] path=contentPath.split(ConstantsJackrabbit.NODEPATHDELIMITER);
  StringBuffer canonicalizedContentPath=new StringBuffer(ConstantsJackrabbit.NODEPATHDELIMITER);
  if (possibleLocales.contains(path[path.length - 1])) {
    if (UtilValidate.isEmpty(language)) {
      language=path[path.length - 1];
    }
    for (int i=0; i < path.length - 1; i++) {
      if (UtilValidate.isNotEmpty(path[i])) {
        canonicalizedContentPath.append(path[i]).append(ConstantsJackrabbit.NODEPATHDELIMITER);
      }
    }
  }
 else {
    for (    String p : path) {
      if (UtilValidate.isNotEmpty(p)) {
        canonicalizedContentPath.append(p).append(ConstantsJackrabbit.NODEPATHDELIMITER);
      }
    }
  }
  Session session=access.getSession();
  try {
    if (!session.itemExists(canonicalizedContentPath.toString() + language) || (!session.getNode(canonicalizedContentPath.toString() + language).hasProperty("localized") || !session.getNode(canonicalizedContentPath.toString() + language).getProperty("localized").getBoolean())) {
      if (!session.itemExists(canonicalizedContentPath.toString() + determindeTheDefaultLanguage())) {
        NodeIterator ni=session.getNode(canonicalizedContentPath.toString()).getNodes();
        while (ni.hasNext()) {
          Node n=ni.nextNode();
          if (possibleLocales.contains(n.getName())) {
            contentPath=n.getPath();
            break;
          }
        }
        ni=null;
      }
 else {
        contentPath=canonicalizedContentPath.toString() + determindeTheDefaultLanguage();
      }
    }
 else {
      contentPath=canonicalizedContentPath.toString() + language;
    }
  }
 catch (  RepositoryException e) {
    Debug.logError(e,module);
  }
  return contentPath;
}
