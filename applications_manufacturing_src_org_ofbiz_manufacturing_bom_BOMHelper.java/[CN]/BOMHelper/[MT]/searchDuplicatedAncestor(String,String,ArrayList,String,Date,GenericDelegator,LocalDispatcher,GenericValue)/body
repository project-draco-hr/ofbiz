{
  if (inDate == null)   inDate=new Date();
  if (productIdKeys == null) {
    BOMTree tree=new BOMTree(productIdKey,bomType,inDate,delegator,dispatcher,userLogin);
    productIdKeys=tree.getAllProductsId();
    productIdKeys.add(productIdKey);
  }
  List productNodesList=delegator.findByAndCache("ProductAssoc",UtilMisc.toMap("productIdTo",productId,"productAssocTypeId",bomType));
  productNodesList=EntityUtil.filterByDate(productNodesList,inDate);
  GenericValue oneNode=null;
  GenericValue duplicatedNode=null;
  Iterator nodesIterator=productNodesList.iterator();
  while (nodesIterator.hasNext()) {
    oneNode=(GenericValue)nodesIterator.next();
    for (int i=0; i < productIdKeys.size(); i++) {
      if (oneNode.getString("productId").equals((String)productIdKeys.get(i))) {
        return oneNode;
      }
    }
    duplicatedNode=searchDuplicatedAncestor(oneNode.getString("productId"),productIdKey,productIdKeys,bomType,inDate,delegator,dispatcher,userLogin);
    if (duplicatedNode != null) {
      break;
    }
  }
  return duplicatedNode;
}
