{
  Locale locale=(Locale)context.get("locale");
  LocalDispatcher dispatcher=dctx.getDispatcher();
  try {
    GenericResultWaiter threadAWaiter=dispatcher.runAsyncWait("testServiceDeadLockRetryThreadA",null,false);
    GenericResultWaiter threadBWaiter=dispatcher.runAsyncWait("testServiceDeadLockRetryThreadB",null,false);
    Map<String,Object> threadAResult=threadAWaiter.waitForResult();
    Map<String,Object> threadBResult=threadBWaiter.waitForResult();
    List<Object> errorList=FastList.newInstance();
    if (ServiceUtil.isError(threadAResult)) {
      errorList.add(UtilProperties.getMessage(resource,"ServiceTestDeadLockThreadA",UtilMisc.toMap("errorString",ServiceUtil.getErrorMessage(threadAResult)),locale));
    }
    if (ServiceUtil.isError(threadBResult)) {
      errorList.add(UtilProperties.getMessage(resource,"ServiceTestDeadLockThreadB",UtilMisc.toMap("errorString",ServiceUtil.getErrorMessage(threadBResult)),locale));
    }
    if (errorList.size() > 0) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestDeadLockRetry",locale),errorList,null,null);
    }
  }
 catch (  Exception e) {
    Debug.logError(e,"Error running deadlock test services: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestDeadLockError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  return ServiceUtil.returnSuccess();
}
