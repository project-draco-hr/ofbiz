{
  Delegator delegator=dctx.getDelegator();
  try {
    GenericValue testingTypeB=delegator.findOne("TestingType",false,"testingTypeId","SVCLRT_B");
    testingTypeB.set("description","New description for SVCLRT_B");
    testingTypeB.store();
    Debug.logInfo("In testServiceDeadLockRetryThreadB just updated SVCLRT_B, beginning wait",module);
    Thread.sleep(100);
    Debug.logInfo("In testServiceDeadLockRetryThreadB done with wait, updating SVCLRT_A",module);
    GenericValue testingTypeA=delegator.findOne("TestingType",false,"testingTypeId","SVCLRT_A");
    testingTypeA.set("description","New description for SVCLRT_A");
    testingTypeA.store();
    Debug.logInfo("In testServiceDeadLockRetryThreadA done with updating SVCLRT_A, updating SVCLRT_BONLY",module);
    GenericValue testingTypeAOnly=delegator.findOne("TestingType",false,"testingTypeId","SVCLRT_BONLY");
    testingTypeAOnly.set("description","New description for SVCLRT_BONLY; this is only changed by thread B so if it doesn't match something happened to thread B!");
    testingTypeAOnly.store();
  }
 catch (  GenericEntityException e) {
    String errMsg="Entity Engine Exception running dead lock test thread B: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  InterruptedException e) {
    String errMsg="Wait Interrupted Exception running dead lock test thread B: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  return ServiceUtil.returnSuccess();
}
