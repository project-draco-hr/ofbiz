{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  try {
    GenericValue testingType=delegator.findOne("TestingType",false,"testingTypeId","SVCLWTRTCR");
    testingType.set("description","New description for SVCLWTRTCR from Lock Wait Timeout Lock GRABBER, this should be replaced by the one in the Waiter service.");
    testingType.store();
    Debug.logInfo("In testServiceLockWaitTimeoutRetryCantRecover (grabber) just updated SVCLWTRTCR, running sub-service in own transaction",module);
    Map<String,Object> waiterResult=dispatcher.runSync("testServiceLockWaitTimeoutRetryCantRecoverWaiter",null,5,true);
    if (ServiceUtil.isError(waiterResult)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestLockWaitTimeoutRetryCantRecoverWaiter",locale),null,null,waiterResult);
    }
    Debug.logInfo("In testServiceLockWaitTimeoutRetryCantRecover (grabber) successfully finished running sub-service in own transaction",module);
  }
 catch (  GenericServiceException e) {
    String errMsg="Error running deadlock test services: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
catch (  GenericEntityException e) {
    Debug.logError(e,"Entity Engine Exception running lock wait timeout test main/Grabber thread: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestLockInterruptedExceptionRetryGrabber",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  return ServiceUtil.returnSuccess();
}
