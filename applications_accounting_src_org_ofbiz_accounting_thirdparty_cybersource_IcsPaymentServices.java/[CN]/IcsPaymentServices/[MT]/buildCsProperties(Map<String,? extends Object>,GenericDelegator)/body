{
  String paymentGatewayConfigId=(String)context.get("paymentGatewayConfigId");
  String configString=(String)context.get("paymentConfig");
  if (configString == null) {
    configString="payment.properties";
  }
  String merchantId=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantId",configString,"payment.cybersource.merchantID");
  String targetApi=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"apiVersion",configString,"payment.cybersource.api.version");
  String production=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"production",configString,"payment.cybersource.production");
  String enableLog=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"logEnabled",configString,"payment.cybersource.log");
  String logSize=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"logSize",configString,"payment.cybersource.log.size");
  String logFile=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"logFile",configString,"payment.cybersource.log.file");
  String logDir=FlexibleStringExpander.expandString(getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"logDir",configString,"payment.cybersource.log.dir"),context);
  String keysDir=FlexibleStringExpander.expandString(getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"keysDir",configString,"payment.cybersource.keysDir"),context);
  String keysFile=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"keysFile",configString,"payment.cybersource.keysFile");
  if (UtilValidate.isEmpty(merchantId)) {
    Debug.logWarning("The merchantId property is not configured",module);
    return null;
  }
  if (UtilValidate.isEmpty(keysDir)) {
    Debug.logWarning("The keysDir property is not configured",module);
    return null;
  }
  Properties props=new Properties();
  props.put("merchantID",merchantId);
  props.put("keysDirectory",keysDir);
  props.put("targetAPIVersion",targetApi);
  props.put("sendToProduction",production);
  props.put("enableLog",enableLog);
  props.put("logDirectory",logDir);
  props.put("logFilename",logFile);
  props.put("logMaximumSize",logSize);
  if (keysFile != null && keysFile.length() > 0) {
    props.put("alternateKeyFilename",keysFile);
  }
  Debug.log("Created CyberSource Properties : " + props,module);
  return props;
}
