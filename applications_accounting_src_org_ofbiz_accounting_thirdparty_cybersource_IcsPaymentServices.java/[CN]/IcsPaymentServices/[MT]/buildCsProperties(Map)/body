{
  String configString=(String)context.get("paymentConfig");
  if (configString == null) {
    configString="payment.properties";
  }
  String merchantId=UtilProperties.getPropertyValue(configString,"payment.cybersource.merchantID");
  String targetApi=UtilProperties.getPropertyValue(configString,"payment.cybersource.api.version");
  String production=UtilProperties.getPropertyValue(configString,"payment.cybersource.production");
  String enableLog=UtilProperties.getPropertyValue(configString,"payment.cybersource.log");
  String logSize=UtilProperties.getPropertyValue(configString,"payment.cybersource.log.size");
  String logFile=UtilProperties.getPropertyValue(configString,"payment.cybersource.log.file");
  String logDir=UtilProperties.getPropertyValue(configString,"payment.cybersource.log.dir");
  String keysPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue(configString,"payment.cybersource.keysDir"),context);
  String keysFile=UtilProperties.getPropertyValue(configString,"payment.cybersource.keysFile");
  if (UtilValidate.isEmpty(merchantId)) {
    Debug.logWarning("The merchantId property in [" + configString + "] is not configured",module);
    return null;
  }
  if (UtilValidate.isEmpty(keysPath)) {
    Debug.logWarning("The keysDir property in [" + configString + "] is not configured",module);
    return null;
  }
  Properties props=new Properties();
  props.put("merchantID",merchantId);
  props.put("keysDirectory",keysPath);
  props.put("targetAPIVersion",targetApi);
  props.put("sendToProduction",production);
  props.put("enableLog",enableLog);
  props.put("logDirectory",logDir);
  props.put("logFilename",logFile);
  props.put("logMaximumSize",logSize);
  if (keysFile != null && keysFile.length() > 0) {
    props.put("alternateKeyFilename",keysFile);
  }
  return props;
}
