{
  String facilityId=null;
  if (UtilValidate.isNotEmpty(this.getProductStoreId())) {
    try {
      GenericValue productStore=this.getDelegator().findOne("ProductStore",UtilMisc.toMap("productStoreId",this.getProductStoreId()),true);
      facilityId=productStore.getString("inventoryFacilityId");
    }
 catch (    Exception e) {
      Debug.logError(UtilProperties.getMessage(resource_error,"OrderProblemGettingProductStoreRecords",locale) + e.getMessage(),module);
      return;
    }
  }
  List<CartShipInfo> shipGroups=getShipGroups();
  if (shipGroups == null)   return;
  Map<String,Map<ShoppingCartItem,Map<Integer,BigDecimal>>> dropShipItems=new HashMap<String,Map<ShoppingCartItem,Map<Integer,BigDecimal>>>();
  for (int shipGroupIndex=0; shipGroupIndex < shipGroups.size(); shipGroupIndex++) {
    CartShipInfo shipInfo=shipGroups.get(shipGroupIndex);
    String shipGroupSupplierPartyId=shipInfo.getSupplierPartyId();
    if (UtilValidate.isNotEmpty(shipGroupSupplierPartyId)) {
      continue;
    }
    Set<ShoppingCartItem> shipItems=shipInfo.getShipItems();
    if (UtilValidate.isEmpty(shipItems))     continue;
    for (    ShoppingCartItem cartItem : shipItems) {
      BigDecimal itemQuantity=cartItem.getQuantity();
      BigDecimal dropShipQuantity=BigDecimal.ZERO;
      GenericValue product=cartItem.getProduct();
      if (product == null) {
        continue;
      }
      String productId=product.getString("productId");
      String requirementMethodEnumId=product.getString("requirementMethodEnumId");
      if ("PRODRQM_DS".equals(requirementMethodEnumId)) {
        dropShipQuantity=itemQuantity;
      }
 else       if ("PRODRQM_DSATP".equals(requirementMethodEnumId)) {
        try {
          Map<String,Object> getProductInventoryAvailableResult=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",facilityId));
          BigDecimal availableToPromise=(BigDecimal)getProductInventoryAvailableResult.get("availableToPromiseTotal");
          if (itemQuantity.compareTo(availableToPromise) <= 0) {
            dropShipQuantity=BigDecimal.ZERO;
          }
 else {
            dropShipQuantity=itemQuantity.subtract(availableToPromise);
          }
        }
 catch (        Exception e) {
          Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetInventoryAvailableByFacilityError",locale) + e.getMessage(),module);
        }
      }
 else {
        dropShipQuantity=BigDecimal.ZERO;
      }
      if (dropShipQuantity.compareTo(BigDecimal.ZERO) <= 0)       continue;
      String supplierPartyId=null;
      try {
        Map<String,Object> getSuppliersForProductResult=dispatcher.runSync("getSuppliersForProduct",UtilMisc.<String,Object>toMap("productId",productId,"quantity",dropShipQuantity,"canDropShip","Y","currencyUomId",getCurrency()));
        List<GenericValue> supplierProducts=UtilGenerics.checkList(getSuppliersForProductResult.get("supplierProducts"));
        supplierProducts=EntityUtil.orderBy(supplierProducts,UtilMisc.toList("supplierPrefOrderId"));
        GenericValue supplierProduct=EntityUtil.getFirst(supplierProducts);
        if (!UtilValidate.isEmpty(supplierProduct)) {
          supplierPartyId=supplierProduct.getString("partyId");
        }
      }
 catch (      Exception e) {
        Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetSuppliersForProductError",locale) + e.getMessage(),module);
      }
      if (UtilValidate.isEmpty(supplierPartyId))       continue;
      if (!dropShipItems.containsKey(supplierPartyId))       dropShipItems.put(supplierPartyId,new HashMap<ShoppingCartItem,Map<Integer,BigDecimal>>());
      Map<ShoppingCartItem,Map<Integer,BigDecimal>> supplierCartItems=UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));
      if (!supplierCartItems.containsKey(cartItem))       supplierCartItems.put(cartItem,new HashMap<Integer,BigDecimal>());
      Map<Integer,BigDecimal> cartItemGroupQuantities=UtilGenerics.checkMap(supplierCartItems.get(cartItem));
      cartItemGroupQuantities.put(Integer.valueOf(shipGroupIndex),dropShipQuantity);
    }
  }
  for (  String supplierPartyId : dropShipItems.keySet()) {
    CartShipInfo shipInfo=null;
    int newShipGroupIndex=-1;
    TreeMap<Integer,CartShipInfo> supplierShipGroups=this.getShipGroupsBySupplier(supplierPartyId);
    if (!UtilValidate.isEmpty(supplierShipGroups)) {
      newShipGroupIndex=(supplierShipGroups.firstKey()).intValue();
      shipInfo=supplierShipGroups.get(supplierShipGroups.firstKey());
    }
    if (newShipGroupIndex == -1) {
      newShipGroupIndex=addShipInfo();
      shipInfo=this.shipInfo.get(newShipGroupIndex);
    }
    shipInfo.supplierPartyId=supplierPartyId;
    Map<ShoppingCartItem,Map<Integer,BigDecimal>> supplierCartItems=UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));
    for (    ShoppingCartItem cartItem : supplierCartItems.keySet()) {
      Map<Integer,BigDecimal> cartItemGroupQuantities=UtilGenerics.checkMap(supplierCartItems.get(cartItem));
      for (      Integer previousShipGroupIndex : cartItemGroupQuantities.keySet()) {
        BigDecimal dropShipQuantity=cartItemGroupQuantities.get(previousShipGroupIndex);
        positionItemToGroup(cartItem,dropShipQuantity,previousShipGroupIndex.intValue(),newShipGroupIndex,true);
      }
    }
  }
}
