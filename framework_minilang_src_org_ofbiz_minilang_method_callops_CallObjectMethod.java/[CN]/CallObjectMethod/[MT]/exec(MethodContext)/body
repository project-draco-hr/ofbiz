{
  String methodName=methodContext.expandString(this.methodName);
  Object methodObject=null;
  if (!objMapAcsr.isEmpty()) {
    Map fromMap=(Map)objMapAcsr.get(methodContext);
    if (fromMap == null) {
      Debug.logWarning("Map not found with name " + objMapAcsr + ", which should contain the object to execute a method on; not executing method, rerturning error.",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Map not found with name "+ objMapAcsr+ ", which should contain the object to execute a method on]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
    methodObject=objFieldAcsr.get(fromMap,methodContext);
  }
 else {
    methodObject=objFieldAcsr.get(methodContext);
  }
  if (methodObject == null) {
    if (Debug.infoOn())     Debug.logInfo("Object not found to execute method on with name " + objFieldAcsr + " in Map with name "+ objMapAcsr+ ", not executing method, rerturning error.",module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Object not found to execute method on with name "+ objFieldAcsr+ " in Map with name "+ objMapAcsr+ "]";
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  Class methodClass=methodObject.getClass();
  return CallObjectMethod.callMethod(simpleMethod,methodContext,parameters,methodClass,methodObject,methodName,retFieldAcsr,retMapAcsr);
}
