{
  Object[] args=null;
  Class[] parameterTypes=null;
  if (parameters != null) {
    args=new Object[parameters.size()];
    parameterTypes=new Class[parameters.size()];
    Iterator parameterIter=parameters.iterator();
    int i=0;
    while (parameterIter.hasNext()) {
      MethodObject methodObjectDef=(MethodObject)parameterIter.next();
      args[i]=methodObjectDef.getObject(methodContext);
      Class typeClass=methodObjectDef.getTypeClass(methodContext.getLoader());
      if (typeClass == null) {
        String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Parameter type not found with name "+ methodObjectDef.getTypeName()+ "]";
        Debug.logError(errMsg,module);
        methodContext.setErrorReturn(errMsg,simpleMethod);
        return false;
      }
      parameterTypes[i]=typeClass;
      i++;
    }
  }
  try {
    Method method=methodClass.getMethod(methodName,parameterTypes);
    try {
      Object retValue=method.invoke(methodObject,args);
      if (!retFieldAcsr.isEmpty()) {
        if (!retMapAcsr.isEmpty()) {
          Map retMap=(Map)retMapAcsr.get(methodContext);
          if (retMap == null) {
            retMap=new HashMap();
            retMapAcsr.put(methodContext,retMap);
          }
          retFieldAcsr.put(retMap,retValue,methodContext);
        }
 else {
          retFieldAcsr.put(methodContext,retValue);
        }
      }
    }
 catch (    IllegalAccessException e) {
      Debug.logError(e,"Could not access method in call method operation",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Could not access method to execute named "+ methodName+ ": "+ e.toString()+ "]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
catch (    IllegalArgumentException e) {
      Debug.logError(e,"Illegal argument calling method in call method operation",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Illegal argument calling method to execute named "+ methodName+ ": "+ e.toString()+ "]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
catch (    InvocationTargetException e) {
      Debug.logError(e.getTargetException(),"Method in call method operation threw an exception",module);
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Method to execute named "+ methodName+ " threw an exception: "+ e.getTargetException()+ "]";
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
  }
 catch (  NoSuchMethodException e) {
    Debug.logError(e,"Could not find method to execute in simple-method call method operation",module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Could not find method to execute named "+ methodName+ ": "+ e.toString()+ "]";
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
catch (  SecurityException e) {
    Debug.logError(e,"Security exception finding method to execute in simple-method call method operation",module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [Security exception finding method to execute named "+ methodName+ ": "+ e.toString()+ "]";
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  return true;
}
