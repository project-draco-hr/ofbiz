{
  List<GenericValue> testingTypes=new LinkedList<GenericValue>();
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","queryIterator-1","description","Value One"));
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","queryIterator-2","description","Value Two"));
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","queryIterator-3","description","Value Three"));
  delegator.storeAll(testingTypes);
  boolean transactionStarted=false;
  try {
    transactionStarted=TransactionUtil.begin();
    EntityListIterator eliByEntityEngine=null;
    EntityListIterator eliByEntityQuery=null;
    eliByEntityEngine=delegator.find("TestingType",null,null,null,null,null);
    eliByEntityQuery=EntityQuery.use(delegator).from("TestingType").queryIterator();
    GenericValue recordByEntityEngine=eliByEntityEngine.next();
    GenericValue recordByEntityQuery=eliByEntityQuery.next();
    assertEquals("queryIterator(): Value of first record pointed by both iterators matched",recordByEntityEngine,recordByEntityQuery);
    eliByEntityEngine.close();
    eliByEntityQuery.close();
    TransactionUtil.commit(transactionStarted);
  }
 catch (  Exception e) {
    TransactionUtil.rollback(transactionStarted,"Transaction is Rolled Back",e);
  }
}
