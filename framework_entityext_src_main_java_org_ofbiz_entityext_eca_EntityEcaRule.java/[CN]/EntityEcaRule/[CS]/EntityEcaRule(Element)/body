{
  this.entityName=eca.getAttribute("entity");
  this.operationName=eca.getAttribute("operation");
  this.eventName=eca.getAttribute("event");
  this.runOnError="true".equals(eca.getAttribute("run-on-error"));
  ArrayList<EntityEcaCondition> conditions=new ArrayList<EntityEcaCondition>();
  ArrayList<Object> actionsAndSets=new ArrayList<Object>();
  for (  Element element : UtilXml.childElementList(eca)) {
    if ("condition".equals(element.getNodeName())) {
      EntityEcaCondition ecaCond=new EntityEcaCondition(element,true);
      conditions.add(ecaCond);
      conditionFieldNames.addAll(ecaCond.getFieldNames());
    }
 else     if ("condition-field".equals(element.getNodeName())) {
      EntityEcaCondition ecaCond=new EntityEcaCondition(element,false);
      conditions.add(ecaCond);
      conditionFieldNames.addAll(ecaCond.getFieldNames());
    }
 else     if ("action".equals(element.getNodeName())) {
      actionsAndSets.add(new EntityEcaAction(element));
    }
 else     if ("set".equals(element.getNodeName())) {
      actionsAndSets.add(new EntityEcaSetField(element));
    }
 else {
      Debug.logWarning("Invalid eca child element " + element.getNodeName(),module);
    }
  }
  conditions.trimToSize();
  this.conditions=Collections.unmodifiableList(conditions);
  actionsAndSets.trimToSize();
  this.actionsAndSets=Collections.unmodifiableList(actionsAndSets);
  if (Debug.verboseOn()) {
    Debug.logVerbose("Conditions: " + conditions,module);
    Debug.logVerbose("actions and sets (intermixed): " + actionsAndSets,module);
  }
}
