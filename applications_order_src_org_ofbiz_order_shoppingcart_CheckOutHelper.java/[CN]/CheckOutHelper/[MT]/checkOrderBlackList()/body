{
  if (cart == null) {
    return ServiceUtil.returnSuccess("success");
  }
  GenericValue shippingAddressObj=this.cart.getShippingAddress();
  if (shippingAddressObj == null) {
    return ServiceUtil.returnSuccess("success");
  }
  String shippingAddress=UtilFormatOut.checkNull(shippingAddressObj.getString("address1")).toUpperCase();
  shippingAddress=UtilFormatOut.makeSqlSafe(shippingAddress);
  List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("blacklistString"),EntityOperator.EQUALS,EntityFunction.UPPER(shippingAddress)),EntityOperator.AND,EntityCondition.makeCondition("orderBlacklistTypeId",EntityOperator.EQUALS,"BLACKLIST_ADDRESS")));
  String errMsg=null;
  List<GenericValue> paymentMethods=this.cart.getPaymentMethods();
  for (  GenericValue paymentMethod : paymentMethods) {
    if ((paymentMethod != null) && ("CREDIT_CARD".equals(paymentMethod.getString("paymentMethodTypeId")))) {
      GenericValue creditCard=null;
      GenericValue billingAddress=null;
      try {
        creditCard=paymentMethod.getRelatedOne("CreditCard",false);
        if (creditCard != null)         billingAddress=creditCard.getRelatedOne("PostalAddress",false);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problems getting credit card from payment method",module);
        errMsg=UtilProperties.getMessage(resource_error,"checkhelper.problems_reading_database",(cart != null ? cart.getLocale() : Locale.getDefault()));
        return ServiceUtil.returnError(errMsg);
      }
      if (creditCard != null) {
        String creditCardNumber=UtilFormatOut.checkNull(creditCard.getString("cardNumber"));
        exprs.add(EntityCondition.makeCondition(EntityCondition.makeCondition("blacklistString",EntityOperator.EQUALS,creditCardNumber),EntityOperator.AND,EntityCondition.makeCondition("orderBlacklistTypeId",EntityOperator.EQUALS,"BLACKLIST_CREDITCARD")));
      }
      if (billingAddress != null) {
        String address=UtilFormatOut.checkNull(billingAddress.getString("address1").toUpperCase());
        address=UtilFormatOut.makeSqlSafe(address);
        exprs.add(EntityCondition.makeCondition(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("blacklistString"),EntityOperator.EQUALS,EntityFunction.UPPER(address)),EntityOperator.AND,EntityCondition.makeCondition("orderBlacklistTypeId",EntityOperator.EQUALS,"BLACKLIST_ADDRESS")));
      }
    }
  }
  List<GenericValue> blacklistFound=null;
  if (exprs.size() > 0) {
    try {
      blacklistFound=EntityQuery.use(this.delegator).from("OrderBlacklist").where(exprs).queryList();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problems with OrderBlacklist lookup.",module);
      errMsg=UtilProperties.getMessage(resource_error,"checkhelper.problems_reading_database",(cart != null ? cart.getLocale() : Locale.getDefault()));
      return ServiceUtil.returnError(errMsg);
    }
  }
  if (UtilValidate.isNotEmpty(blacklistFound)) {
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource_error,"OrderFailed",(cart != null ? cart.getLocale() : Locale.getDefault())));
  }
 else {
    return ServiceUtil.returnSuccess("success");
  }
}
