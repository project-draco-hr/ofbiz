{
  String DECLINE_MESSAGE=productStore.getString("authDeclinedMessage");
  String ERROR_MESSAGE=productStore.getString("authErrorMessage");
  String RETRY_ON_ERROR=productStore.getString("retryFailedAuths");
  if (RETRY_ON_ERROR == null) {
    RETRY_ON_ERROR="Y";
  }
  double orderTotal=this.cart.getGrandTotal();
  String orderId=this.cart.getOrderId();
  List paymentMethodTypeIds=this.cart.getPaymentMethodTypeIds();
  boolean requireAuth=false;
  List allPaymentPreferences=null;
  try {
    allPaymentPreferences=this.delegator.findByAnd("OrderPaymentPreference",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    throw new GeneralException("Problems getting payment preferences",e);
  }
  List canExpr=UtilMisc.toList(new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"PAYMENT_CANCELLED"));
  allPaymentPreferences=EntityUtil.filterByAnd(allPaymentPreferences,canExpr);
  List exprs=UtilMisc.toList(new EntityExpr("manualRefNum",EntityOperator.NOT_EQUAL,null));
  List manualRefPaymentPrefs=EntityUtil.filterByAnd(allPaymentPreferences,exprs);
  if (manualRefPaymentPrefs != null && manualRefPaymentPrefs.size() > 0) {
    Iterator i=manualRefPaymentPrefs.iterator();
    while (i.hasNext()) {
      GenericValue opp=(GenericValue)i.next();
      Map authCtx=new HashMap();
      authCtx.put("orderPaymentPreference",opp);
      if (opp.get("paymentMethodId") == null) {
        authCtx.put("serviceTypeEnum","PRDS_PAY_EXTERNAL");
      }
      authCtx.put("processAmount",opp.getDouble("maxAmount"));
      authCtx.put("authRefNum",opp.getString("manualRefNum"));
      authCtx.put("authResult",Boolean.TRUE);
      authCtx.put("userLogin",userLogin);
      authCtx.put("currencyUomId",cart.getCurrency());
      Map authResp=dispatcher.runSync("processAuthResult",authCtx);
      if (authResp != null && ServiceUtil.isError(authResp)) {
        throw new GeneralException(ServiceUtil.getErrorMessage(authResp));
      }
      OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId,manualHold);
      if ("Y".equalsIgnoreCase(productStore.getString("manualAuthIsCapture"))) {
        Map captCtx=new HashMap();
        captCtx.put("orderPaymentPreference",opp);
        if (opp.get("paymentMethodId") == null) {
          captCtx.put("serviceTypeEnum","PRDS_PAY_EXTERNAL");
        }
        captCtx.put("payToPartyId",productStore.get("payToPartyId"));
        captCtx.put("captureResult",Boolean.TRUE);
        captCtx.put("captureAmount",opp.getDouble("maxAmount"));
        captCtx.put("captureRefNum",opp.getString("manualRefNum"));
        captCtx.put("userLogin",userLogin);
        captCtx.put("currencyUomId",cart.getCurrency());
        Map capResp=dispatcher.runSync("processCaptureResult",captCtx);
        if (capResp != null && ServiceUtil.isError(capResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(capResp));
        }
      }
    }
  }
  Map paymentFields=UtilMisc.toMap("statusId","PAYMENT_NOT_AUTH");
  List onlinePaymentPrefs=EntityUtil.filterByAnd(allPaymentPreferences,paymentFields);
  if (onlinePaymentPrefs != null && onlinePaymentPrefs.size() > 0) {
    requireAuth=true;
  }
  if (requireAuth) {
    if (orderTotal == 0) {
      boolean ok=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId,manualHold);
      if (!ok) {
        throw new GeneralException("Problem with order change; see above error");
      }
    }
    Map paymentResult=null;
    try {
      paymentResult=dispatcher.runSync("authOrderPayments",UtilMisc.toMap("orderId",orderId,"userLogin",userLogin),180,true);
    }
 catch (    GenericServiceException e) {
      Debug.logWarning(e,module);
      throw new GeneralException("Error in authOrderPayments service: " + e.toString(),e.getNested());
    }
    if (Debug.verboseOn())     Debug.logVerbose("Finsished w/ Payment Service",module);
    if (paymentResult != null && ServiceUtil.isError(paymentResult)) {
      throw new GeneralException(ServiceUtil.getErrorMessage(paymentResult));
    }
    List messages=(List)paymentResult.get("authResultMsgs");
    if (paymentResult != null && paymentResult.containsKey("processResult")) {
      String authResp=(String)paymentResult.get("processResult");
      if (authResp.equals("FAILED")) {
        if (Debug.verboseOn())         Debug.logVerbose("Payment auth was NOT a success!",module);
        boolean ok=OrderChangeHelper.rejectOrder(dispatcher,userLogin,orderId);
        if (!ok) {
          throw new GeneralException("Problem with order change; see above error");
        }
        cart.clearDeclinedPaymentMethodsFromOrder(delegator,orderId);
        cart.setOrderId(null);
        if (messages == null || messages.size() == 0) {
          return ServiceUtil.returnError(DECLINE_MESSAGE);
        }
 else {
          return ServiceUtil.returnError(messages);
        }
      }
 else       if (authResp.equals("APPROVED")) {
        if (Debug.verboseOn())         Debug.logVerbose("Payment auth was a success!",module);
        boolean ok=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId,manualHold);
        if (!ok) {
          throw new GeneralException("Problem with order change; see above error");
        }
      }
 else       if (authResp.equals("ERROR")) {
        if (Debug.verboseOn())         Debug.logVerbose("Payment auth failed due to processor trouble.",module);
        if (!faceToFace && "Y".equalsIgnoreCase(RETRY_ON_ERROR)) {
          return ServiceUtil.returnSuccess(ERROR_MESSAGE);
        }
 else {
          boolean ok=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);
          if (!ok) {
            throw new GeneralException("Problem with order change; see above error");
          }
          this.cart.setOrderId(null);
          if (messages == null || messages.size() == 0) {
            return ServiceUtil.returnError(ERROR_MESSAGE);
          }
 else {
            return ServiceUtil.returnError(messages);
          }
        }
      }
 else {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderPleaseContactCustomerService;PaymentReturnCodeUnknown.",(cart != null ? cart.getLocale() : Locale.getDefault())));
      }
    }
 else {
      if (Debug.verboseOn())       Debug.logVerbose("Payment auth failed due to processor trouble.",module);
      if (!faceToFace && "Y".equalsIgnoreCase(RETRY_ON_ERROR)) {
        return ServiceUtil.returnSuccess(ERROR_MESSAGE);
      }
 else {
        boolean ok=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);
        if (!ok) {
          throw new GeneralException("Problem with order change; see above error");
        }
        this.cart.setOrderId(null);
        return ServiceUtil.returnError(ERROR_MESSAGE);
      }
    }
  }
 else   if (paymentMethodTypeIds.contains("CASH") || paymentMethodTypeIds.contains("EXT_COD") || paymentMethodTypeIds.contains("EXT_BILLACT")) {
    boolean hasOther=false;
    boolean validAmount=false;
    Iterator pmti=paymentMethodTypeIds.iterator();
    while (pmti.hasNext()) {
      String type=(String)pmti.next();
      if (!"CASH".equals(type) && !"EXT_COD".equals(type) && !"EXT_BILLACT".equals(type)) {
        hasOther=true;
        break;
      }
    }
    if (!hasOther) {
      if (!paymentMethodTypeIds.contains("CASH") && !paymentMethodTypeIds.contains("EXT_COD")) {
        String billingAccountId=cart.getBillingAccountId();
        double billAcctCredit=this.availableAccountBalance(billingAccountId);
        double billingAcctAmt=cart.getBillingAccountAmount();
        if (billAcctCredit >= billingAcctAmt) {
          if (cart.getGrandTotal() > billAcctCredit) {
            validAmount=false;
          }
 else {
            validAmount=true;
          }
        }
      }
      boolean ok=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId,manualHold);
      if (!ok) {
        throw new GeneralException("Problem with order change; see above error");
      }
    }
  }
 else {
  }
  if (faceToFace) {
    Debug.log("Face-To-Face Sale - " + orderId,module);
    this.adjustFaceToFacePayment(allPaymentPreferences,userLogin);
    boolean ok=OrderChangeHelper.completeOrder(dispatcher,userLogin,orderId);
    Debug.log("Complete Order Result - " + ok,module);
    if (!ok) {
      throw new GeneralException("Problem with order change; see error logs");
    }
  }
  return ServiceUtil.returnSuccess();
}
