{
  List errorMessages=new ArrayList();
  String errMsg=null;
  if (singleUsePayments == null) {
    singleUsePayments=new ArrayList();
  }
  if (billingAccountId != null && billingAccountAmt != null && !billingAccountId.equals("_NA_")) {
    cart.setBillingAccount(billingAccountId,billingAccountAmt.doubleValue());
  }
 else {
    cart.setBillingAccount(null,0.00);
  }
  if (selectedPaymentMethods != null && selectedPaymentMethods.size() > 0) {
    cart.clearPayments();
    if (selectedPaymentMethods.containsKey("EXT_BILLACT")) {
      double accountCredit=this.availableAccountBalance(cart.getBillingAccountId());
      if (cart.getGrandTotal() > accountCredit) {
        errMsg=UtilProperties.getMessage(resource,"checkhelper.insufficient_credit_available_on_account",(cart != null ? cart.getLocale() : Locale.getDefault()));
        errorMessages.add(errMsg);
      }
    }
    Set paymentMethods=selectedPaymentMethods.keySet();
    Iterator i=paymentMethods.iterator();
    while (i.hasNext()) {
      String checkOutPaymentId=(String)i.next();
      Double paymentAmount=null;
      if (selectedPaymentMethods.get(checkOutPaymentId) != null) {
        paymentAmount=(Double)selectedPaymentMethods.get(checkOutPaymentId);
      }
      boolean singleUse=singleUsePayments.contains(checkOutPaymentId);
      cart.addPaymentAmount(checkOutPaymentId,paymentAmount,singleUse);
    }
  }
 else   if (cart.getGrandTotal() != 0.00) {
    errMsg=UtilProperties.getMessage(resource,"checkhelper.select_method_of_payment",(cart != null ? cart.getLocale() : Locale.getDefault()));
    errorMessages.add(errMsg);
  }
  return errorMessages;
}
