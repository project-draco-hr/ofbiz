{
  List errorMessages=new ArrayList();
  Map result=null;
  String errMsg=null;
  if (UtilValidate.isNotEmpty(this.cart)) {
    errorMessages.addAll(setCheckOutShippingOptionsInternal(shippingMethod,shippingInstructions,orderAdditionalEmails,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate));
    errorMessages.addAll(setCheckOutShippingAddressInternal(shippingContactMechId));
    Map shipEstimateMap=ShippingEvents.getShipGroupEstimate(dispatcher,delegator,cart,0);
    Double shippingTotal=(Double)shipEstimateMap.get("shippingTotal");
    if (shippingTotal == null) {
      shippingTotal=new Double(0.00);
    }
    cart.setItemShipGroupEstimate(shippingTotal.doubleValue(),0);
    try {
      this.calcAndAddTax();
    }
 catch (    GeneralException e) {
      Debug.logError(e,module);
    }
    errorMessages.addAll(setCheckOutPaymentInternal(selectedPaymentMethods,singleUsePayments,billingAccountId));
  }
 else {
    errMsg=UtilProperties.getMessage(resource,"checkhelper.no_items_in_cart",(cart != null ? cart.getLocale() : Locale.getDefault()));
    errorMessages.add(errMsg);
  }
  if (errorMessages.size() == 1) {
    result=ServiceUtil.returnError(errorMessages.get(0).toString());
  }
 else   if (errorMessages.size() > 0) {
    result=ServiceUtil.returnError(errorMessages);
  }
 else {
    result=ServiceUtil.returnSuccess();
  }
  return result;
}
