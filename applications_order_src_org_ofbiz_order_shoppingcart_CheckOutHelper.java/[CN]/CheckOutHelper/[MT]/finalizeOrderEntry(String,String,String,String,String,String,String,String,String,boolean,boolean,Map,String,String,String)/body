{
  Map result=ServiceUtil.returnSuccess();
  Map errorMaps=new HashMap();
  Map callResult;
  List errorMessages=new ArrayList();
  if (finalizeMode != null && finalizeMode.equals("ship")) {
    callResult=this.finalizeOrderEntryShip(shippingContactMechId);
    this.addErrors(errorMessages,errorMaps,callResult);
  }
  if (finalizeMode != null && finalizeMode.equals("options")) {
    callResult=this.finalizeOrderEntryOptions(shippingMethod,shippingInstructions,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate);
    this.addErrors(errorMessages,errorMaps,callResult);
  }
  if (finalizeMode != null && finalizeMode.equals("payment")) {
    Map selectedPaymentMethods=null;
    if (checkOutPaymentId != null) {
      callResult=this.finalizeOrderEntryPayment(checkOutPaymentId,null,isSingleUsePayment,appendPayment);
      this.addErrors(errorMessages,errorMaps,callResult);
      selectedPaymentMethods=UtilMisc.toMap(checkOutPaymentId,null);
    }
    callResult=checkGiftCard(params,selectedPaymentMethods);
    this.addErrors(errorMessages,errorMaps,callResult);
    if (errorMessages.size() == 0 && errorMaps.size() == 0) {
      String gcPaymentMethodId=(String)callResult.get("paymentMethodId");
      Double giftCardAmount=(Double)callResult.get("amount");
      Map gcCallRes=this.finalizeOrderEntryPayment(gcPaymentMethodId,giftCardAmount,true,true);
      this.addErrors(errorMessages,errorMaps,gcCallRes);
    }
  }
  if (errorMessages.size() > 0) {
    result.put(ModelService.ERROR_MESSAGE_LIST,errorMessages);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
  }
  if (errorMaps.size() > 0) {
    result.put(ModelService.ERROR_MESSAGE_MAP,errorMaps);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
  }
  return result;
}
