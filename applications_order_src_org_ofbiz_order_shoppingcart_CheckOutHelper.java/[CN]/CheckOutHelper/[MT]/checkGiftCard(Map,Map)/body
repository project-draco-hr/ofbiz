{
  List errorMessages=new ArrayList();
  Map errorMaps=new HashMap();
  Map result=new HashMap();
  String errMsg=null;
  if (params.get("addGiftCard") != null) {
    String gcNum=(String)params.get("giftCardNumber");
    String gcPin=(String)params.get("giftCardPin");
    String gcAmt=(String)params.get("giftCardAmount");
    double gcAmount=-1;
    boolean gcFieldsOkay=true;
    if (gcNum == null || gcNum.length() == 0) {
      errMsg=UtilProperties.getMessage(resource,"checkhelper.enter_gift_card_number",(cart != null ? cart.getLocale() : Locale.getDefault()));
      errorMessages.add(errMsg);
      gcFieldsOkay=false;
    }
    if (cart.isPinRequiredForGC(delegator)) {
      if ((gcPin == null) || (gcPin.length() == 0)) {
        errMsg=UtilProperties.getMessage(resource,"checkhelper.enter_gift_card_pin_number",(cart != null ? cart.getLocale() : Locale.getDefault()));
        errorMessages.add(errMsg);
        gcFieldsOkay=false;
      }
    }
    if (cart.isValidateGCFinAccount(delegator)) {
      try {
        if (!cart.isPinRequiredForGC(delegator)) {
          GenericValue finAccount=FinAccountHelper.getFinAccountFromCode(gcNum,delegator);
          if (finAccount == null) {
            errMsg=UtilProperties.getMessage(resource,"checkhelper.gift_card_does_not_exist",(cart != null ? cart.getLocale() : Locale.getDefault()));
            errorMessages.add(errMsg);
            gcFieldsOkay=false;
          }
 else           if ((FinAccountHelper.getAvailableBalance(finAccount.getString("finAccountId"),cart.getCurrency(),delegator) == null) || !(FinAccountHelper.getAvailableBalance(finAccount.getString("finAccountId"),cart.getCurrency(),delegator).compareTo(FinAccountHelper.ZERO) == 1)) {
            errMsg=UtilProperties.getMessage(resource,"checkhelper.gift_card_has_no_value",(cart != null ? cart.getLocale() : Locale.getDefault()));
            errorMessages.add(errMsg);
            gcFieldsOkay=false;
          }
        }
      }
 catch (      GenericEntityException ex) {
        errorMessages.add(ex.getMessage());
        gcFieldsOkay=false;
      }
    }
    if (selectedPaymentMethods != null && selectedPaymentMethods.size() > 0) {
      if (gcAmt == null || gcAmt.length() == 0) {
        errMsg=UtilProperties.getMessage(resource,"checkhelper.enter_amount_to_place_on_gift_card",(cart != null ? cart.getLocale() : Locale.getDefault()));
        errorMessages.add(errMsg);
        gcFieldsOkay=false;
      }
    }
    if (gcAmt != null && gcAmt.length() > 0) {
      try {
        gcAmount=Double.parseDouble(gcAmt);
      }
 catch (      NumberFormatException e) {
        Debug.logError(e,module);
        errMsg=UtilProperties.getMessage(resource,"checkhelper.invalid_amount_for_gift_card",(cart != null ? cart.getLocale() : Locale.getDefault()));
        errorMessages.add(errMsg);
        gcFieldsOkay=false;
      }
    }
    if (gcFieldsOkay) {
      Map gcCtx=new HashMap();
      gcCtx.put("partyId",params.get("partyId"));
      gcCtx.put("cardNumber",gcNum);
      if (cart.isPinRequiredForGC(delegator)) {
        gcCtx.put("pinNumber",gcPin);
      }
      gcCtx.put("userLogin",cart.getUserLogin());
      Map gcResult=null;
      try {
        gcResult=dispatcher.runSync("createGiftCard",gcCtx);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        errorMessages.add(e.getMessage());
      }
      if (gcResult != null) {
        ServiceUtil.addErrors(errorMessages,errorMaps,gcResult);
        if (errorMessages.size() == 0 && errorMaps.size() == 0) {
          Double giftCardAmount=null;
          if (gcAmount > 0) {
            giftCardAmount=new Double(gcAmount);
          }
          String gcPaymentMethodId=(String)gcResult.get("paymentMethodId");
          result=ServiceUtil.returnSuccess();
          result.put("paymentMethodId",gcPaymentMethodId);
          result.put("amount",giftCardAmount);
        }
      }
 else {
        errMsg=UtilProperties.getMessage(resource,"checkhelper.problem_with_gift_card_information",(cart != null ? cart.getLocale() : Locale.getDefault()));
        errorMessages.add(errMsg);
      }
    }
  }
 else {
    result=ServiceUtil.returnSuccess();
  }
  if (errorMessages.size() > 0) {
    result.put(ModelService.ERROR_MESSAGE_LIST,errorMessages);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
  }
  if (errorMaps.size() > 0) {
    result.put(ModelService.ERROR_MESSAGE_MAP,errorMaps);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
  }
  return result;
}
