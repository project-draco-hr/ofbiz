{
  String productStoreId=cart.getProductStoreId();
  String billToPartyId=cart.getBillToCustomerPartyId();
  ShoppingCart.CartShipInfo csi=cart.getShipInfo(shipGroup);
  int totalItems=csi.shipItemInfo.size();
  List product=new ArrayList(totalItems);
  List amount=new ArrayList(totalItems);
  List price=new ArrayList(totalItems);
  List shipAmt=new ArrayList(totalItems);
  for (int i=0; i < totalItems; i++) {
    ShoppingCartItem cartItem=(ShoppingCartItem)csi.shipItemInfo.get(i);
    ShoppingCart.CartShipInfo.CartShipItemInfo itemInfo=csi.getShipItemInfo(cartItem);
    product.add(i,cartItem.getProduct());
    amount.add(i,new BigDecimal(cartItem.getItemSubTotal(itemInfo.quantity)));
    price.add(i,new BigDecimal(cartItem.getBasePrice()));
    shipAmt.add(i,new BigDecimal("0.00"));
  }
  BigDecimal shipAmount=new BigDecimal(csi.shipEstimate);
  if (shipAddress == null) {
    shipAddress=cart.getShippingAddress(shipGroup);
  }
  if (shipAddress == null) {
    for (int i=0; i < cart.selectedPayments(); i++) {
      ShoppingCart.CartPaymentInfo cpi=cart.getPaymentInfo(i);
      GenericValue billAddr=cpi.getBillingAddress(delegator);
      if (billAddr != null) {
        shipAddress=billAddr;
        Debug.logInfo("In makeTaxContext no shipping address, but found address with ID [" + shipAddress.get("contactMechId") + "] from payment method.",module);
      }
      break;
    }
  }
  Map serviceContext=UtilMisc.toMap("productStoreId",productStoreId);
  serviceContext.put("billToPartyId",billToPartyId);
  serviceContext.put("itemProductList",product);
  serviceContext.put("itemAmountList",amount);
  serviceContext.put("itemPriceList",price);
  serviceContext.put("itemShippingList",shipAmt);
  serviceContext.put("orderShippingAmount",shipAmount);
  serviceContext.put("shippingAddress",shipAddress);
  return serviceContext;
}
