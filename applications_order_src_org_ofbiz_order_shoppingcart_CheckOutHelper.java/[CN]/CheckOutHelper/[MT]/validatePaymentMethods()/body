{
  String errMsg=null;
  String billingAccountId=cart.getBillingAccountId();
  double billingAccountAmt=cart.getBillingAccountAmount();
  double availableAmount=this.availableAccountBalance(billingAccountId);
  if (billingAccountAmt > availableAmount) {
    Map messageMap=UtilMisc.toMap("billingAccountId",billingAccountId);
    errMsg=UtilProperties.getMessage(resource,"checkevents.not_enough_available_on_account",messageMap,(cart != null ? cart.getLocale() : Locale.getDefault()));
    return ServiceUtil.returnError(errMsg);
  }
  List paymentMethods=cart.getPaymentMethodIds();
  List paymentTypes=cart.getPaymentMethodTypeIds();
  if (paymentTypes.contains("EXT_BILLACT") && paymentTypes.size() == 1 && paymentMethods.size() == 0) {
    if (cart.getGrandTotal() > availableAmount) {
      errMsg=UtilProperties.getMessage(resource,"checkevents.insufficient_credit_available_on_account",(cart != null ? cart.getLocale() : Locale.getDefault()));
      return ServiceUtil.returnError(errMsg);
    }
  }
  this.validateGiftCardAmounts();
  String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
  DecimalFormat formatter=new DecimalFormat(currencyFormat);
  if (paymentMethods != null) {
    List nullPaymentIds=new ArrayList();
    Iterator i=paymentMethods.iterator();
    while (i.hasNext()) {
      String paymentMethodId=(String)i.next();
      Double paymentAmount=cart.getPaymentAmount(paymentMethodId);
      if (paymentAmount == null || paymentAmount.doubleValue() == 0) {
        Debug.log("Found null paymentMethodId - " + paymentMethodId,module);
        nullPaymentIds.add(paymentMethodId);
      }
    }
    Iterator npi=nullPaymentIds.iterator();
    while (npi.hasNext()) {
      String paymentMethodId=(String)npi.next();
      double selectedPaymentTotal=cart.getPaymentTotal();
      double requiredAmount=cart.getGrandTotal() - cart.getBillingAccountAmount();
      double nullAmount=requiredAmount - selectedPaymentTotal;
      boolean setOverflow=false;
      ShoppingCart.CartPaymentInfo info=cart.getPaymentInfo(paymentMethodId);
      String amountString=formatter.format(nullAmount);
      double newAmount=0;
      try {
        newAmount=formatter.parse(amountString).doubleValue();
      }
 catch (      ParseException e) {
        Debug.logError(e,"Problem getting parsed new amount; unable to update payment info!",module);
      }
      Debug.log("Remaining total is - " + newAmount,module);
      if (newAmount > 0) {
        info.amount=new Double(newAmount);
        Debug.log("Set null paymentMethodId - " + info.paymentMethodId + " / "+ info.amount,module);
      }
 else {
        info.amount=new Double(0);
        Debug.log("Set null paymentMethodId - " + info.paymentMethodId + " / "+ info.amount,module);
      }
      if (!setOverflow) {
        info.overflow=setOverflow=true;
        Debug.log("Set overflow flag on payment - " + info.paymentMethodId,module);
      }
    }
  }
  double reqAmtPreParse=cart.getGrandTotal() - cart.getBillingAccountAmount();
  double selectedPaymentTotal=cart.getPaymentTotal();
  String preParseString=formatter.format(reqAmtPreParse);
  double requiredAmount=0;
  try {
    requiredAmount=formatter.parse(preParseString).doubleValue();
  }
 catch (  ParseException e) {
    requiredAmount=reqAmtPreParse;
    Debug.logError(e,"Problem getting parsed required amount; unable to update payment info!",module);
  }
  if (paymentMethods != null && paymentMethods.size() > 0 && requiredAmount > selectedPaymentTotal) {
    Debug.logError("Required Amount : " + requiredAmount + " / Selected Amount : "+ selectedPaymentTotal,module);
    errMsg=UtilProperties.getMessage(resource,"checkevents.payment_not_cover_this_order",(cart != null ? cart.getLocale() : Locale.getDefault()));
    return ServiceUtil.returnError(errMsg);
  }
  return ServiceUtil.returnSuccess();
}
