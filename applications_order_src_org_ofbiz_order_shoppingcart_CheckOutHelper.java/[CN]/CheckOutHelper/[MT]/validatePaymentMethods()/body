{
  String errMsg=null;
  String billingAccountId=cart.getBillingAccountId();
  BigDecimal billingAccountAmt=cart.getBillingAccountAmount();
  BigDecimal availableAmount=this.availableAccountBalance(billingAccountId);
  if (billingAccountAmt.compareTo(availableAmount) > 0) {
    Map messageMap=UtilMisc.toMap("billingAccountId",billingAccountId);
    errMsg=UtilProperties.getMessage(resource_error,"checkevents.not_enough_available_on_account",messageMap,(cart != null ? cart.getLocale() : Locale.getDefault()));
    return ServiceUtil.returnError(errMsg);
  }
  List paymentMethods=cart.getPaymentMethodIds();
  List paymentTypes=cart.getPaymentMethodTypeIds();
  if (paymentTypes.contains("EXT_BILLACT") && paymentTypes.size() == 1 && paymentMethods.size() == 0) {
    if (cart.getGrandTotal().compareTo(availableAmount) > 0) {
      errMsg=UtilProperties.getMessage(resource_error,"checkevents.insufficient_credit_available_on_account",(cart != null ? cart.getLocale() : Locale.getDefault()));
      return ServiceUtil.returnError(errMsg);
    }
  }
  this.validateGiftCardAmounts();
  if (paymentMethods != null) {
    List nullPaymentIds=new ArrayList();
    Iterator i=paymentMethods.iterator();
    while (i.hasNext()) {
      String paymentMethodId=(String)i.next();
      BigDecimal paymentAmount=cart.getPaymentAmount(paymentMethodId);
      if (paymentAmount == null || paymentAmount.compareTo(BigDecimal.ZERO) == 0) {
        Debug.log("Found null paymentMethodId - " + paymentMethodId,module);
        nullPaymentIds.add(paymentMethodId);
      }
    }
    Iterator npi=nullPaymentIds.iterator();
    while (npi.hasNext()) {
      String paymentMethodId=(String)npi.next();
      BigDecimal selectedPaymentTotal=cart.getPaymentTotal();
      BigDecimal requiredAmount=cart.getGrandTotal();
      BigDecimal newAmount=requiredAmount.subtract(selectedPaymentTotal);
      boolean setOverflow=false;
      ShoppingCart.CartPaymentInfo info=cart.getPaymentInfo(paymentMethodId);
      Debug.log("Remaining total is - " + newAmount,module);
      if (newAmount.compareTo(BigDecimal.ZERO) > 0) {
        info.amount=newAmount;
        Debug.log("Set null paymentMethodId - " + info.paymentMethodId + " / "+ info.amount,module);
      }
 else {
        info.amount=BigDecimal.ZERO;
        Debug.log("Set null paymentMethodId - " + info.paymentMethodId + " / "+ info.amount,module);
      }
      if (!setOverflow) {
        info.overflow=setOverflow=true;
        Debug.log("Set overflow flag on payment - " + info.paymentMethodId,module);
      }
    }
  }
  BigDecimal reqAmtPreParse=cart.getGrandTotal().subtract(cart.getBillingAccountAmount());
  BigDecimal selectedPaymentTotal=cart.getPaymentTotal();
  BigDecimal requiredAmount=reqAmtPreParse.setScale(scale,rounding);
  if (paymentMethods != null && paymentMethods.size() > 0 && requiredAmount.compareTo(selectedPaymentTotal) > 0) {
    Debug.logError("Required Amount : " + requiredAmount + " / Selected Amount : "+ selectedPaymentTotal,module);
    errMsg=UtilProperties.getMessage(resource_error,"checkevents.payment_not_cover_this_order",(cart != null ? cart.getLocale() : Locale.getDefault()));
    return ServiceUtil.returnError(errMsg);
  }
  if (paymentMethods != null && paymentMethods.size() > 0 && requiredAmount.compareTo(selectedPaymentTotal) < 0) {
    BigDecimal changeAmount=selectedPaymentTotal.subtract(requiredAmount);
    if (!paymentTypes.contains("CASH")) {
      Debug.logError("Change Amount : " + changeAmount + " / No cash.",module);
      errMsg=UtilProperties.getMessage(resource_error,"checkhelper.change_returned_cannot_be_greater_than_cash",(cart != null ? cart.getLocale() : Locale.getDefault()));
      return ServiceUtil.returnError(errMsg);
    }
 else {
      int cashIndex=paymentTypes.indexOf("CASH");
      String cashId=(String)paymentTypes.get(cashIndex);
      BigDecimal cashAmount=cart.getPaymentAmount(cashId);
      if (cashAmount.compareTo(changeAmount) < 0) {
        Debug.logError("Change Amount : " + changeAmount + " / Cash Amount : "+ cashAmount,module);
        errMsg=UtilProperties.getMessage(resource_error,"checkhelper.change_returned_cannot_be_greater_than_cash",(cart != null ? cart.getLocale() : Locale.getDefault()));
        return ServiceUtil.returnError(errMsg);
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
