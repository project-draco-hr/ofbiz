{
  List errorMessages=new ArrayList();
  String errMsg=null;
  if (singleUsePayments == null) {
    singleUsePayments=new ArrayList();
  }
  if (selectedPaymentMethods != null && selectedPaymentMethods.size() > 0) {
    cart.clearPayments();
    if (UtilValidate.isNotEmpty(billingAccountId)) {
      Double billingAccountAmt=(Double)selectedPaymentMethods.get("EXT_BILLACT");
      cart.setBillingAccount(billingAccountId,(billingAccountAmt != null ? billingAccountAmt.doubleValue() : 0.0));
    }
 else {
      cart.setBillingAccount(null,0.0);
    }
    if (selectedPaymentMethods.containsKey("EXT_BILLACT") && selectedPaymentMethods.size() == 1) {
      double accountCredit=this.availableAccountBalance(cart.getBillingAccountId());
      double amountToUse=cart.getBillingAccountAmount();
      if (amountToUse > 0 && amountToUse > accountCredit) {
        errMsg=UtilProperties.getMessage(resource,"checkhelper.insufficient_credit_available_on_account",(cart != null ? cart.getLocale() : Locale.getDefault()));
        errorMessages.add(errMsg);
      }
 else {
        amountToUse=accountCredit;
      }
      double grandTotal=cart.getGrandTotal();
      if (grandTotal > amountToUse) {
        cart.setBillingAccount(null,0.0);
        errMsg=UtilProperties.getMessage(resource,"checkhelper.insufficient_credit_available_on_account",(cart != null ? cart.getLocale() : Locale.getDefault()));
        errorMessages.add(errMsg);
      }
 else {
        amountToUse=grandTotal;
      }
      if (amountToUse > 0) {
        cart.setBillingAccount(billingAccountId,amountToUse);
        selectedPaymentMethods.put("EXT_BILLACT",new Double(amountToUse));
      }
    }
    Set paymentMethods=selectedPaymentMethods.keySet();
    Iterator i=paymentMethods.iterator();
    while (i.hasNext()) {
      String checkOutPaymentId=(String)i.next();
      String finAccountId=null;
      if (checkOutPaymentId.indexOf("|") > -1) {
        String[] splitStr=checkOutPaymentId.split("\\|");
        checkOutPaymentId=splitStr[0];
        if ("FIN_ACCOUNT".equals(checkOutPaymentId)) {
          finAccountId=splitStr[1];
        }
        Debug.log("Split checkOutPaymentId: " + splitStr[0] + " / "+ splitStr[1],module);
      }
      Double paymentAmount=null;
      if (selectedPaymentMethods.get(checkOutPaymentId) != null) {
        paymentAmount=(Double)selectedPaymentMethods.get(checkOutPaymentId);
      }
      boolean singleUse=singleUsePayments.contains(checkOutPaymentId);
      ShoppingCart.CartPaymentInfo inf=cart.addPaymentAmount(checkOutPaymentId,paymentAmount,singleUse);
      if (finAccountId != null) {
        inf.finAccountId=finAccountId;
      }
    }
  }
 else   if (cart.getGrandTotal() != 0.00) {
    errMsg=UtilProperties.getMessage(resource,"checkhelper.select_method_of_payment",(cart != null ? cart.getLocale() : Locale.getDefault()));
    errorMessages.add(errMsg);
  }
  return errorMessages;
}
