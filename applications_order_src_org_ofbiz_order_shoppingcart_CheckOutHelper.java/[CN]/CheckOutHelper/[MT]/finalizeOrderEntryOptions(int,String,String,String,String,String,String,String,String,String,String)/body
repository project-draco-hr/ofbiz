{
  Map result=ServiceUtil.returnSuccess();
  String errMsg=null;
  if (UtilValidate.isNotEmpty(shippingMethod)) {
    int delimiterPos=shippingMethod.indexOf('@');
    String shipmentMethodTypeId=null;
    String carrierPartyId=null;
    if (delimiterPos > 0) {
      shipmentMethodTypeId=shippingMethod.substring(0,delimiterPos);
      carrierPartyId=shippingMethod.substring(delimiterPos + 1);
    }
    this.cart.setShipmentMethodTypeId(shipGroupIndex,shipmentMethodTypeId);
    this.cart.setCarrierPartyId(shipGroupIndex,carrierPartyId);
  }
 else {
    errMsg=UtilProperties.getMessage(resource_error,"checkhelper.select_shipping_method",(cart != null ? cart.getLocale() : Locale.getDefault()));
    result=ServiceUtil.returnError(errMsg);
  }
  this.cart.setShippingInstructions(shipGroupIndex,shippingInstructions);
  this.cart.setGiftMessage(shipGroupIndex,giftMessage);
  this.cart.setMaySplit(shipGroupIndex,Boolean.valueOf(maySplit));
  this.cart.setIsGift(shipGroupIndex,Boolean.valueOf(isGift));
  this.cart.setInternalCode(internalCode);
  if (UtilValidate.isNotEmpty(internalOrderNotes)) {
    this.cart.addInternalOrderNote(internalOrderNotes);
  }
  if ((shipBeforeDate != null) && (shipBeforeDate.length() > 8)) {
    shipBeforeDate=shipBeforeDate.trim();
    if (shipBeforeDate.length() < 14) {
      shipBeforeDate=shipBeforeDate + " " + "00:00:00.000";
    }
    try {
      this.cart.setShipBeforeDate(shipGroupIndex,(Timestamp)ObjectType.simpleTypeConvert(shipBeforeDate,"Timestamp",null,null));
    }
 catch (    Exception e) {
      errMsg="Ship Before Date must be a valid date formed ";
      result=ServiceUtil.returnError(errMsg);
    }
  }
  if ((shipAfterDate != null) && (shipAfterDate.length() > 8)) {
    shipAfterDate=shipAfterDate.trim();
    if (shipAfterDate.length() < 14) {
      shipAfterDate=shipAfterDate + " " + "00:00:00.000";
    }
    try {
      this.cart.setShipAfterDate(shipGroupIndex,(Timestamp)ObjectType.simpleTypeConvert(shipAfterDate,"Timestamp",null,null));
    }
 catch (    Exception e) {
      errMsg="Ship After Date must be a valid date formed ";
      result=ServiceUtil.returnError(errMsg);
    }
  }
  if (UtilValidate.isNotEmpty(shippingNotes)) {
    this.cart.addOrderNote(shippingNotes);
  }
  return result;
}
