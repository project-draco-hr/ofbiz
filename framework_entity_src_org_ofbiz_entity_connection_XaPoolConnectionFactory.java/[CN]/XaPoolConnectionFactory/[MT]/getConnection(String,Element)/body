{
  StandardXAPoolDataSource pds=(StandardXAPoolDataSource)dsCache.get(helperName);
  if (pds != null) {
    if (Debug.verboseOn())     Debug.logVerbose(helperName + " pool size: " + pds.pool.getCount(),module);
    return TransactionFactory.getCursorConnection(helperName,pds.getConnection());
  }
synchronized (XaPoolConnectionFactory.class) {
    pds=(StandardXAPoolDataSource)dsCache.get(helperName);
    if (pds != null) {
      return pds.getConnection();
    }
    String wrapperClass=jdbcElement.getAttribute("pool-xa-wrapper-class");
    StandardXADataSource ds=null;
    try {
      ds=(StandardXADataSource)ObjectType.getInstance(wrapperClass);
      pds=new StandardXAPoolDataSource();
    }
 catch (    NoClassDefFoundError e) {
      throw new GenericEntityException("Cannot find xapool.jar");
    }
catch (    ClassNotFoundException e) {
      throw new GenericEntityException("Cannot load wrapper class: " + wrapperClass,e);
    }
catch (    InstantiationException e) {
      throw new GenericEntityException("Unable to instantiate " + wrapperClass,e);
    }
catch (    IllegalAccessException e) {
      throw new GenericEntityException("Problems getting instance of " + wrapperClass,e);
    }
    if (ds == null)     throw new GenericEntityException("StandardXaDataSource was not created, big problem!");
    ds.setDriverName(jdbcElement.getAttribute("jdbc-driver"));
    ds.setUrl(jdbcElement.getAttribute("jdbc-uri"));
    ds.setUser(jdbcElement.getAttribute("jdbc-username"));
    ds.setPassword(jdbcElement.getAttribute("jdbc-password"));
    ds.setDescription(helperName);
    ds.setTransactionManager(TransactionFactory.getTransactionManager());
    String transIso=jdbcElement.getAttribute("isolation-level");
    if (transIso != null && transIso.length() > 0) {
      if ("Serializable".equals(transIso)) {
        ((StandardXADataSource)ds).setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
      }
 else       if ("RepeatableRead".equals(transIso)) {
        ((StandardXADataSource)ds).setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
      }
 else       if ("ReadUncommitted".equals(transIso)) {
        ((StandardXADataSource)ds).setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
      }
 else       if ("ReadCommitted".equals(transIso)) {
        ((StandardXADataSource)ds).setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
      }
 else       if ("None".equals(transIso)) {
        ((StandardXADataSource)ds).setTransactionIsolation(Connection.TRANSACTION_NONE);
      }
    }
    pds.setDataSource(ds);
    pds.setDescription(ds.getDescription());
    pds.setUser(ds.getUser());
    pds.setPassword(ds.getPassword());
    Debug.logInfo("XADataSource: " + ds.getClass().getName() + " attached to pool.",module);
    pds.setTransactionManager(TransactionFactory.getTransactionManager());
    try {
      pds.setMaxSize(Integer.parseInt(jdbcElement.getAttribute("pool-maxsize")));
      pds.setMinSize(Integer.parseInt(jdbcElement.getAttribute("pool-minsize")));
      pds.setSleepTime(Long.parseLong(jdbcElement.getAttribute("pool-sleeptime")));
      pds.setLifeTime(Long.parseLong(jdbcElement.getAttribute("pool-lifetime")));
      pds.setDeadLockMaxWait(Long.parseLong(jdbcElement.getAttribute("pool-deadlock-maxwait")));
      pds.setDeadLockRetryWait(Long.parseLong(jdbcElement.getAttribute("pool-deadlock-retrywait")));
      String testStmt=jdbcElement.getAttribute("pool-jdbc-test-stmt");
      if (testStmt != null && testStmt.length() > 0) {
        pds.setJdbcTestStmt(testStmt);
        Debug.logInfo("Set JDBC Test Statement : " + testStmt,module);
      }
    }
 catch (    NumberFormatException nfe) {
      Debug.logError(nfe,"Problems with pool settings; the values MUST be numbers, using defaults.",module);
    }
catch (    Exception e) {
      Debug.logError(e,"Problems with pool settings",module);
    }
    dsCache.put(helperName,pds);
    return TransactionFactory.getCursorConnection(helperName,pds.getConnection());
  }
}
