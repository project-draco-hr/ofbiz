{
  Object convertedLvalue=MiniLangUtil.convertType(lValue,type,locale,timeZone,format);
  Object convertedRvalue=MiniLangUtil.convertType(rValue,type,locale,timeZone,format);
  assertValuesNotNull(convertedLvalue,convertedRvalue);
  if (convertedLvalue instanceof BigDecimal && convertedRvalue instanceof BigDecimal) {
    BigDecimal lBigDecimal=(BigDecimal)convertedLvalue;
    BigDecimal rBigDecimal=(BigDecimal)convertedRvalue;
    return compareBigDecimals(lBigDecimal,rBigDecimal) >= 0;
  }
  if (convertedLvalue instanceof Comparable && convertedRvalue instanceof Comparable) {
    Comparable<Object> comparable=UtilGenerics.cast(convertedLvalue);
    return comparable.compareTo(convertedRvalue) >= 0;
  }
  throw new IllegalArgumentException("Cannot compare: l-value is not a comparable type");
}
