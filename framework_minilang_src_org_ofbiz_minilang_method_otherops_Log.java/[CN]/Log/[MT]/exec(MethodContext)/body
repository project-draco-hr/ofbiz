{
  String levelStr=methodContext.expandString(this.levelStr);
  String message=methodContext.expandString(this.message);
  int level;
  Integer levelInt=Debug.getLevelFromString(levelStr);
  if (levelInt == null) {
    Debug.logWarning("Specified level [" + levelStr + "] was not valid, using INFO",module);
    level=Debug.INFO;
  }
 else {
    level=levelInt.intValue();
  }
  if (!Debug.isOn(level)) {
    return true;
  }
  StringBuilder buf=new StringBuilder();
  buf.append("[");
  String methodLocation=this.simpleMethod.getFromLocation();
  int pos=methodLocation.lastIndexOf("/");
  if (pos != -1) {
    methodLocation=methodLocation.substring(pos + 1);
  }
  buf.append(methodLocation);
  buf.append("#");
  buf.append(this.simpleMethod.getMethodName());
  buf.append("] ");
  if (message != null)   buf.append(message);
  if (methodStrings != null) {
    for (    MethodString methodString : methodStrings) {
      String strValue=methodString.getString(methodContext);
      if (strValue != null)       buf.append(strValue);
    }
  }
  Debug.log(level,null,buf.toString(),module);
  return true;
}
