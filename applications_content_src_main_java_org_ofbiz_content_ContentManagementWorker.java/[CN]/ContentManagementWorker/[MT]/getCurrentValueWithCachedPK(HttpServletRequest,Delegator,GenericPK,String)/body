{
  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
  GenericValue v=delegator.makeValue(entityName);
  GenericPK passedPK=v.getPrimaryKey();
  Collection<String> keyColl=passedPK.getAllKeys();
  for (  String attrName : keyColl) {
    String attrVal=(String)request.getAttribute(attrName);
    if (UtilValidate.isEmpty(attrVal)) {
      attrVal=(String)paramMap.get(attrName);
    }
    if (UtilValidate.isNotEmpty(attrVal)) {
      passedPK.put(attrName,attrVal);
    }
  }
  boolean useCached=false;
  boolean usePassed=true;
  if (cachedPK != null) {
    useCached=true;
    keyColl=cachedPK.getPrimaryKey().getAllKeys();
    for (    String ky : keyColl) {
      String sCached=null;
      String sPassed=null;
      Object oPassed=null;
      Object oCached=null;
      oPassed=passedPK.get(ky);
      if (oPassed != null) {
        sPassed=oPassed.toString();
        if (UtilValidate.isEmpty(sPassed)) {
          usePassed=false;
        }
 else {
          oCached=cachedPK.get(ky);
          if (oCached != null) {
            sCached=oCached.toString();
            if (UtilValidate.isEmpty(sCached)) {
              useCached=false;
            }
 else {
            }
          }
 else {
            useCached=false;
          }
        }
      }
 else {
        usePassed=false;
      }
    }
  }
  GenericPK currentPK=null;
  if (usePassed && useCached) {
    currentPK=passedPK;
  }
 else   if (usePassed && !useCached) {
    currentPK=passedPK;
  }
 else   if (!usePassed && useCached) {
    currentPK=cachedPK;
  }
  if (currentPK != null) {
    request.setAttribute("currentPK",currentPK);
    GenericValue currentValue=null;
    try {
      currentValue=EntityQuery.use(delegator).from(currentPK.getEntityName()).where(currentPK).queryOne();
    }
 catch (    GenericEntityException e) {
    }
    request.setAttribute("currentValue",currentValue);
  }
}
