{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String facilityId=(String)context.get("facilityId");
  String productId=(String)context.get("productId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  List<GenericValue> invItemList=null;
  try {
    invItemList=delegator.findByAnd("InventoryItem",UtilMisc.toMap("productId",productId,"facilityId",facilityId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    throw new GeneralRuntimeException(e.getMessage());
  }
  for (  GenericValue invItem : invItemList) {
    if (invItem != null) {
      int qoh=((Double)invItem.get("quantityOnHandTotal")).intValue();
      if (qoh < 0) {
        Map<String,Object> contextInput=UtilMisc.toMap("userLogin",userLogin,"inventoryItemId",invItem.get("inventoryItemId"),"varianceReasonId","VAR_LOST","availableToPromiseVar",new Double(qoh * -1),"quantityOnHandVar",new Double(qoh * -1),"comments","QOH < 0 stocktake correction");
        try {
          dispatcher.runSync("createPhysicalInventoryAndVariance",contextInput);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"fixProductNegativeQOH failed on createPhysicalInventoryAndVariance invItemId" + invItem.get("inventoryItemId"),module);
          return ServiceUtil.returnError("fixProductNegativeQOH failed on createPhysicalInventoryAndVariance invItemId" + invItem.get("inventoryItemId"));
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
