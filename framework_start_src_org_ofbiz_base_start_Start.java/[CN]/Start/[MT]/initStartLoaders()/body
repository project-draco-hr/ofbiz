{
  NativeLibClassLoader classloader=null;
  try {
    classloader=createClassLoader();
  }
 catch (  IOException e) {
    throw new StartupException("Couldn't create NativeLibClassLoader",e);
  }
  Thread.currentThread().setContextClassLoader(classloader);
  String[] argsArray=loaderArgs.toArray(new String[loaderArgs.size()]);
synchronized (this.loaders) {
    for (    Map<String,String> loaderMap : config.loaders) {
      if (this.serverState.get() == ServerState.STOPPING) {
        return;
      }
      try {
        String loaderClassName=loaderMap.get("class");
        Class<?> loaderClass=classloader.loadClass(loaderClassName);
        StartupLoader loader=(StartupLoader)loaderClass.newInstance();
        loaders.add(loader);
        loader.load(config,argsArray);
      }
 catch (      ClassNotFoundException e) {
        throw new StartupException(e.getMessage(),e);
      }
catch (      InstantiationException e) {
        throw new StartupException(e.getMessage(),e);
      }
catch (      IllegalAccessException e) {
        throw new StartupException(e.getMessage(),e);
      }
    }
    this.loaders.trimToSize();
  }
  if (classloader instanceof InstrumentingClassLoader) {
    try {
      ((InstrumentingClassLoader)classloader).closeInstrumenter();
    }
 catch (    IOException e) {
      throw new StartupException(e.getMessage(),e);
    }
  }
  StringBuilder sb=new StringBuilder();
  for (  String path : classloader.getNativeLibPaths()) {
    if (sb.length() > 0) {
      sb.append(File.pathSeparator);
    }
    sb.append(path);
  }
  System.setProperty("java.library.path",sb.toString());
}
