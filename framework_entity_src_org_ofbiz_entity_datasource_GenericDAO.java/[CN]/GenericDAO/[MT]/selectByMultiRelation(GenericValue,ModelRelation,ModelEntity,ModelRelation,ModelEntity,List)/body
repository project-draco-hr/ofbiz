{
  SQLProcessor sqlP=new SQLProcessor(helperName);
  String atable=modelEntityOne.getTableName(datasourceInfo);
  String ttable=modelEntityTwo.getTableName(datasourceInfo);
  StringBuilder selsb=new StringBuilder();
  List collist=FastList.newInstance();
  List fldlist=FastList.newInstance();
  for (Iterator iterator=modelEntityTwo.getFieldsIterator(); iterator.hasNext(); ) {
    ModelField mf=(ModelField)iterator.next();
    collist.add(mf.getColName());
    fldlist.add(mf.getName());
    selsb.append(ttable + "." + mf.getColName());
    if (iterator.hasNext()) {
      selsb.append(", ");
    }
 else {
      selsb.append(" ");
    }
  }
  int kmsize=modelRelationTwo.getKeyMapsSize();
  StringBuilder wheresb=new StringBuilder();
  for (int i=0; i < kmsize; i++) {
    ModelKeyMap mkm=modelRelationTwo.getKeyMap(i);
    String lfname=mkm.getFieldName();
    String rfname=mkm.getRelFieldName();
    if (wheresb.length() > 0) {
      wheresb.append(" AND ");
    }
    wheresb.append(atable + "." + modelEntityOne.getField(lfname).getColName()+ " = "+ ttable+ "."+ modelEntityTwo.getField(rfname).getColName());
  }
  kmsize=modelRelationOne.getKeyMapsSize();
  Map bindMap=FastMap.newInstance();
  for (int i=0; i < kmsize; i++) {
    ModelKeyMap mkm=modelRelationOne.getKeyMap(i);
    String sfldname=mkm.getFieldName();
    String lfldname=mkm.getRelFieldName();
    ModelField amf=modelEntityOne.getField(lfldname);
    String lcolname=amf.getColName();
    Object rvalue=value.get(sfldname);
    bindMap.put(amf,rvalue);
    if (wheresb.length() > 0) {
      wheresb.append(" AND ");
    }
    wheresb.append(atable + "." + lcolname+ " = ? ");
  }
  StringBuilder sqlsb=new StringBuilder();
  sqlsb.append("SELECT ");
  sqlsb.append(selsb.toString());
  sqlsb.append(" FROM ");
  sqlsb.append(atable + ", " + ttable);
  sqlsb.append(" WHERE ");
  sqlsb.append(wheresb.toString());
  sqlsb.append(SqlJdbcUtil.makeOrderByClause(modelEntityTwo,orderBy,true,datasourceInfo));
  List retlist=FastList.newInstance();
  GenericDelegator gd=value.getDelegator();
  try {
    sqlP.prepareStatement(sqlsb.toString());
    Set entrySet=bindMap.entrySet();
    for (Iterator iterator=entrySet.iterator(); iterator.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iterator.next();
      ModelField mf=(ModelField)entry.getKey();
      Object curvalue=entry.getValue();
      SqlJdbcUtil.setValue(sqlP,mf,modelEntityOne.getEntityName(),curvalue,modelFieldTypeReader);
    }
    sqlP.executeQuery();
    while (sqlP.next()) {
      GenericValue gv=gd.makeValue(modelEntityTwo.getEntityName(),Collections.EMPTY_MAP);
      int idx=1;
      Iterator fldIter=fldlist.iterator();
      while (fldIter.hasNext()) {
        String fldname=(String)fldIter.next();
        ModelField mf=modelEntityTwo.getField(fldname);
        SqlJdbcUtil.getValue(sqlP.getResultSet(),idx,mf,gv,modelFieldTypeReader);
        idx++;
      }
      retlist.add(gv);
    }
  }
  finally {
    sqlP.close();
  }
  return retlist;
}
