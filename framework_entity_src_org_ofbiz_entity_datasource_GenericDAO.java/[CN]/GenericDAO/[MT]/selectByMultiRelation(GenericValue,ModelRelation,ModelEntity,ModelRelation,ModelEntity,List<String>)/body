{
  SQLProcessor sqlP=new SQLProcessor(helperInfo);
  String atable=modelEntityOne.getTableName(datasourceInfo);
  String ttable=modelEntityTwo.getTableName(datasourceInfo);
  StringBuilder selsb=new StringBuilder();
  List<String> collist=FastList.newInstance();
  List<String> fldlist=FastList.newInstance();
  for (Iterator<ModelField> iterator=modelEntityTwo.getFieldsIterator(); iterator.hasNext(); ) {
    ModelField mf=iterator.next();
    collist.add(mf.getColName());
    fldlist.add(mf.getName());
    selsb.append(ttable).append(".").append(mf.getColName());
    if (iterator.hasNext()) {
      selsb.append(", ");
    }
 else {
      selsb.append(" ");
    }
  }
  int kmsize=modelRelationTwo.getKeyMapsSize();
  StringBuilder wheresb=new StringBuilder();
  for (int i=0; i < kmsize; i++) {
    ModelKeyMap mkm=modelRelationTwo.getKeyMap(i);
    String lfname=mkm.getFieldName();
    String rfname=mkm.getRelFieldName();
    if (wheresb.length() > 0) {
      wheresb.append(" AND ");
    }
    wheresb.append(atable).append(".").append(modelEntityOne.getField(lfname).getColName()).append(" = ").append(ttable).append(".").append(modelEntityTwo.getField(rfname).getColName());
  }
  kmsize=modelRelationOne.getKeyMapsSize();
  Map<ModelField,Object> bindMap=FastMap.newInstance();
  for (int i=0; i < kmsize; i++) {
    ModelKeyMap mkm=modelRelationOne.getKeyMap(i);
    String sfldname=mkm.getFieldName();
    String lfldname=mkm.getRelFieldName();
    ModelField amf=modelEntityOne.getField(lfldname);
    String lcolname=amf.getColName();
    Object rvalue=value.get(sfldname);
    bindMap.put(amf,rvalue);
    if (wheresb.length() > 0) {
      wheresb.append(" AND ");
    }
    wheresb.append(atable).append(".").append(lcolname).append(" = ? ");
  }
  StringBuilder sqlsb=new StringBuilder();
  sqlsb.append("SELECT ");
  sqlsb.append(selsb.toString());
  sqlsb.append(" FROM ");
  sqlsb.append(atable).append(", ").append(ttable);
  sqlsb.append(" WHERE ");
  sqlsb.append(wheresb.toString());
  sqlsb.append(SqlJdbcUtil.makeOrderByClause(modelEntityTwo,orderBy,true,datasourceInfo));
  List<GenericValue> retlist=FastList.newInstance();
  Delegator gd=value.getDelegator();
  try {
    sqlP.prepareStatement(sqlsb.toString());
    for (    Map.Entry<ModelField,Object> entry : bindMap.entrySet()) {
      ModelField mf=entry.getKey();
      Object curvalue=entry.getValue();
      SqlJdbcUtil.setValue(sqlP,mf,modelEntityOne.getEntityName(),curvalue,modelFieldTypeReader);
    }
    sqlP.executeQuery();
    while (sqlP.next()) {
      Map<String,Object> emptyMap=Collections.emptyMap();
      GenericValue gv=gd.makeValue(modelEntityTwo.getEntityName(),emptyMap);
      int idx=1;
      for (      String fldname : fldlist) {
        ModelField mf=modelEntityTwo.getField(fldname);
        SqlJdbcUtil.getValue(sqlP.getResultSet(),idx,mf,gv,modelFieldTypeReader);
        idx++;
      }
      retlist.add(gv);
    }
  }
  finally {
    sqlP.close();
  }
  return retlist;
}
