{
  if (modelEntity == null) {
    return null;
  }
  ModelViewEntity modelViewEntity=null;
  if (modelEntity instanceof ModelViewEntity) {
    modelViewEntity=(ModelViewEntity)modelEntity;
  }
  if (findOptions == null)   findOptions=new EntityFindOptions();
  boolean verboseOn=Debug.verboseOn();
  if (verboseOn) {
    Debug.logVerbose("Doing selectListIteratorByCondition with whereEntityCondition: " + whereEntityCondition,module);
  }
  List<ModelField> selectFields=FastList.newInstance();
  if (UtilValidate.isNotEmpty(fieldsToSelect)) {
    Set<String> tempKeys=FastSet.newInstance();
    tempKeys.addAll(fieldsToSelect);
    Iterator<ModelField> fieldIter=modelEntity.getFieldsIterator();
    while (fieldIter.hasNext()) {
      ModelField curField=fieldIter.next();
      if (tempKeys.contains(curField.getName())) {
        selectFields.add(curField);
        tempKeys.remove(curField.getName());
      }
    }
    if (tempKeys.size() > 0) {
      throw new GenericModelException("In selectListIteratorByCondition invalid field names specified: " + tempKeys.toString());
    }
  }
 else {
    selectFields=modelEntity.getFieldsUnmodifiable();
  }
  StringBuilder sqlBuffer=new StringBuilder("SELECT ");
  if (findOptions.getDistinct()) {
    sqlBuffer.append("DISTINCT ");
  }
  if (selectFields.size() > 0) {
    sqlBuffer.append(modelEntity.colNameString(selectFields,", ","",datasourceInfo.aliasViews));
  }
 else {
    sqlBuffer.append("*");
  }
  sqlBuffer.append(SqlJdbcUtil.makeFromClause(modelEntity,datasourceInfo));
  StringBuilder whereString=new StringBuilder();
  String entityCondWhereString="";
  List<EntityConditionParam> whereEntityConditionParams=FastList.newInstance();
  if (whereEntityCondition != null) {
    entityCondWhereString=whereEntityCondition.makeWhereString(modelEntity,whereEntityConditionParams,this.datasourceInfo);
  }
  String viewClause=SqlJdbcUtil.makeViewWhereClause(modelEntity,datasourceInfo.joinStyle);
  String viewEntityCondWhereString=null;
  if (modelViewEntity != null && modelViewEntity.getByConditionFinder() != null) {
    EntityCondition viewWhereEntityCondition=modelViewEntity.getByConditionFinder().getWhereEntityCondition(FastMap.<String,Object>newInstance(),modelEntity,this.modelFieldTypeReader);
    if (viewWhereEntityCondition != null) {
      viewEntityCondWhereString=viewWhereEntityCondition.makeWhereString(modelEntity,whereEntityConditionParams,this.datasourceInfo);
    }
  }
  if (entityCondWhereString.length() > 0) {
    whereString.append("(");
    whereString.append(entityCondWhereString);
    whereString.append(")");
  }
  if (UtilValidate.isNotEmpty(viewEntityCondWhereString)) {
    if (whereString.length() > 0)     whereString.append(" AND ");
    whereString.append("(");
    whereString.append(viewEntityCondWhereString);
    whereString.append(")");
  }
  if (viewClause.length() > 0) {
    if (whereString.length() > 0)     whereString.append(" AND ");
    whereString.append(viewClause);
  }
  if (whereString.length() > 0) {
    sqlBuffer.append(" WHERE ");
    sqlBuffer.append(whereString.toString());
  }
  if (modelViewEntity != null) {
    String groupByString=modelViewEntity.colNameString(modelViewEntity.getGroupBysCopy(selectFields),", ","",false);
    if (UtilValidate.isNotEmpty(groupByString)) {
      sqlBuffer.append(" GROUP BY ");
      sqlBuffer.append(groupByString);
    }
  }
  String entityCondHavingString="";
  List<EntityConditionParam> havingEntityConditionParams=FastList.newInstance();
  if (havingEntityCondition != null) {
    entityCondHavingString=havingEntityCondition.makeWhereString(modelEntity,havingEntityConditionParams,this.datasourceInfo);
  }
  String viewEntityCondHavingString=null;
  if (modelViewEntity != null && modelViewEntity.getByConditionFinder() != null) {
    EntityCondition viewHavingEntityCondition=modelViewEntity.getByConditionFinder().getHavingEntityCondition(FastMap.<String,Object>newInstance(),modelEntity,this.modelFieldTypeReader);
    if (viewHavingEntityCondition != null) {
      viewEntityCondHavingString=viewHavingEntityCondition.makeWhereString(modelEntity,havingEntityConditionParams,this.datasourceInfo);
    }
  }
  StringBuilder havingString=new StringBuilder();
  if (UtilValidate.isNotEmpty(entityCondHavingString)) {
    havingString.append("(");
    havingString.append(entityCondHavingString);
    havingString.append(")");
  }
  if (UtilValidate.isNotEmpty(viewEntityCondHavingString)) {
    if (havingString.length() > 0)     havingString.append(" AND ");
    havingString.append("(");
    havingString.append(viewEntityCondHavingString);
    havingString.append(")");
  }
  if (havingString.length() > 0) {
    sqlBuffer.append(" HAVING ");
    sqlBuffer.append(havingString);
  }
  List<String> orderByExpanded=FastList.<String>newInstance();
  if (orderBy != null) {
    orderByExpanded.addAll(orderBy);
  }
  if (modelViewEntity != null && modelViewEntity.getByConditionFinder() != null) {
    List<String> viewOrderBy=modelViewEntity.getByConditionFinder().getOrderByFieldList(FastMap.<String,Object>newInstance());
    if (viewOrderBy != null && viewOrderBy.size() > 0) {
      orderByExpanded.addAll(viewOrderBy);
    }
  }
  sqlBuffer.append(SqlJdbcUtil.makeOrderByClause(modelEntity,orderByExpanded,datasourceInfo));
  String sql=sqlBuffer.toString();
  SQLProcessor sqlP=new SQLProcessor(helperName);
  sqlP.prepareStatement(sql,findOptions.getSpecifyTypeAndConcur(),findOptions.getResultSetType(),findOptions.getResultSetConcurrency(),findOptions.getFetchSize(),findOptions.getMaxRows());
  if (verboseOn) {
    Debug.logVerbose("Setting the whereEntityConditionParams: " + whereEntityConditionParams,module);
  }
  for (  EntityConditionParam whereEntityConditionParam : whereEntityConditionParams) {
    SqlJdbcUtil.setValue(sqlP,whereEntityConditionParam.getModelField(),modelEntity.getEntityName(),whereEntityConditionParam.getFieldValue(),modelFieldTypeReader);
  }
  if (verboseOn) {
    Debug.logVerbose("Setting the havingEntityConditionParams: " + havingEntityConditionParams,module);
  }
  for (  EntityConditionParam havingEntityConditionParam : havingEntityConditionParams) {
    SqlJdbcUtil.setValue(sqlP,havingEntityConditionParam.getModelField(),modelEntity.getEntityName(),havingEntityConditionParam.getFieldValue(),modelFieldTypeReader);
  }
  long queryStartTime=0;
  if (Debug.timingOn()) {
    queryStartTime=System.currentTimeMillis();
  }
  sqlP.executeQuery();
  if (Debug.timingOn()) {
    long queryEndTime=System.currentTimeMillis();
    long queryTotalTime=queryEndTime - queryStartTime;
    if (queryTotalTime > 150) {
      Debug.logTiming("Ran query in " + queryTotalTime + " milli-seconds: "+ sql,module);
    }
  }
  return new EntityListIterator(sqlP,modelEntity,selectFields,modelFieldTypeReader);
}
