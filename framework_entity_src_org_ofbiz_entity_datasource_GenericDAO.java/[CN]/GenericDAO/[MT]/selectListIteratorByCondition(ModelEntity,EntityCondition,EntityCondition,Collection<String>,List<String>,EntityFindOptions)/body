{
  if (modelEntity == null) {
    return null;
  }
  ModelViewEntity modelViewEntity=null;
  if (modelEntity instanceof ModelViewEntity) {
    modelViewEntity=(ModelViewEntity)modelEntity;
  }
  if (findOptions == null)   findOptions=new EntityFindOptions();
  boolean verboseOn=Debug.verboseOn();
  if (verboseOn) {
    Debug.logVerbose("Doing selectListIteratorByCondition with whereEntityCondition: " + whereEntityCondition,module);
  }
  List<ModelField> selectFields=FastList.newInstance();
  if (UtilValidate.isNotEmpty(fieldsToSelect)) {
    Set<String> tempKeys=FastSet.newInstance();
    tempKeys.addAll(fieldsToSelect);
    Iterator<ModelField> fieldIter=modelEntity.getFieldsIterator();
    while (fieldIter.hasNext()) {
      ModelField curField=fieldIter.next();
      if (tempKeys.contains(curField.getName())) {
        selectFields.add(curField);
        tempKeys.remove(curField.getName());
      }
    }
    if (tempKeys.size() > 0) {
      throw new GenericModelException("In selectListIteratorByCondition invalid field names specified: " + tempKeys.toString());
    }
  }
 else {
    selectFields=modelEntity.getFieldsUnmodifiable();
  }
  StringBuilder sqlBuffer=new StringBuilder("SELECT ");
  if (findOptions.getDistinct()) {
    sqlBuffer.append("DISTINCT ");
  }
  if (selectFields.size() > 0) {
    modelEntity.colNameString(selectFields,sqlBuffer,"",", ","",datasourceInfo.aliasViews);
  }
 else {
    sqlBuffer.append("*");
  }
  List<EntityCondition> viewWhereConditions=null;
  List<EntityCondition> viewHavingConditions=null;
  List<String> viewOrderByList=null;
  if (modelViewEntity != null) {
    viewWhereConditions=FastList.newInstance();
    viewHavingConditions=FastList.newInstance();
    viewOrderByList=FastList.newInstance();
    modelViewEntity.populateViewEntityConditionInformation(modelFieldTypeReader,viewWhereConditions,viewHavingConditions,viewOrderByList,null);
  }
  sqlBuffer.append(SqlJdbcUtil.makeFromClause(modelEntity,datasourceInfo));
  List<EntityConditionParam> whereEntityConditionParams=FastList.newInstance();
  makeConditionWhereString(sqlBuffer," WHERE ",modelEntity,whereEntityCondition,viewWhereConditions,whereEntityConditionParams);
  if (modelViewEntity != null) {
    modelViewEntity.colNameString(modelViewEntity.getGroupBysCopy(selectFields),sqlBuffer," GROUP BY ",", ","",false);
  }
  List<EntityConditionParam> havingEntityConditionParams=FastList.newInstance();
  StringBuilder havingString=makeConditionHavingString(modelEntity,havingEntityCondition,viewHavingConditions,havingEntityConditionParams);
  if (havingString.length() > 0) {
    sqlBuffer.append(" HAVING ");
    sqlBuffer.append(havingString);
  }
  List<String> orderByExpanded=FastList.<String>newInstance();
  if (orderBy != null) {
    orderByExpanded.addAll(orderBy);
  }
  if (viewOrderByList != null) {
    orderByExpanded.addAll(viewOrderByList);
  }
  sqlBuffer.append(SqlJdbcUtil.makeOrderByClause(modelEntity,orderByExpanded,datasourceInfo));
  String sql=sqlBuffer.toString();
  SQLProcessor sqlP=new SQLProcessor(helperInfo);
  sqlP.prepareStatement(sql,findOptions.getSpecifyTypeAndConcur(),findOptions.getResultSetType(),findOptions.getResultSetConcurrency(),findOptions.getFetchSize(),findOptions.getMaxRows());
  if (verboseOn) {
    Debug.logVerbose("Setting the whereEntityConditionParams: " + whereEntityConditionParams,module);
  }
  for (  EntityConditionParam whereEntityConditionParam : whereEntityConditionParams) {
    SqlJdbcUtil.setValue(sqlP,whereEntityConditionParam.getModelField(),modelEntity.getEntityName(),whereEntityConditionParam.getFieldValue(),modelFieldTypeReader);
  }
  if (verboseOn) {
    Debug.logVerbose("Setting the havingEntityConditionParams: " + havingEntityConditionParams,module);
  }
  for (  EntityConditionParam havingEntityConditionParam : havingEntityConditionParams) {
    SqlJdbcUtil.setValue(sqlP,havingEntityConditionParam.getModelField(),modelEntity.getEntityName(),havingEntityConditionParam.getFieldValue(),modelFieldTypeReader);
  }
  long queryStartTime=0;
  if (Debug.timingOn()) {
    queryStartTime=System.currentTimeMillis();
  }
  sqlP.executeQuery();
  if (Debug.timingOn()) {
    long queryEndTime=System.currentTimeMillis();
    long queryTotalTime=queryEndTime - queryStartTime;
    if (queryTotalTime > 150) {
      Debug.logTiming("Ran query in " + queryTotalTime + " milli-seconds: "+ sql,module);
    }
  }
  return new EntityListIterator(sqlP,modelEntity,selectFields,modelFieldTypeReader,this,whereEntityCondition,havingEntityCondition,findOptions.getDistinct());
}
