{
  if (modelEntity == null) {
    return 0;
  }
  if (findOptions == null) {
    findOptions=new EntityFindOptions();
  }
  boolean verboseOn=Debug.verboseOn();
  if (verboseOn) {
    Debug.logVerbose("Doing selectListIteratorByCondition with whereEntityCondition: " + whereEntityCondition,module);
  }
  boolean isGroupBy=false;
  ModelViewEntity modelViewEntity=null;
  if (modelEntity instanceof ModelViewEntity) {
    modelViewEntity=(ModelViewEntity)modelEntity;
    isGroupBy=modelViewEntity.getGroupBysSize() > 0;
  }
  StringBuilder sqlBuffer=new StringBuilder("SELECT ");
  if (isGroupBy) {
    sqlBuffer.append("COUNT(1) FROM (SELECT ");
  }
  if (findOptions.getDistinct()) {
    if (selectFields != null && selectFields.size() > 0) {
      ModelField firstSelectField=selectFields.get(0);
      ModelViewEntity.ModelAlias firstModelAlias=modelViewEntity != null ? modelViewEntity.getAlias(firstSelectField.getName()) : null;
      if (firstModelAlias != null && UtilValidate.isNotEmpty(firstModelAlias.getFunction())) {
        sqlBuffer.append("COUNT(DISTINCT *) ");
      }
 else {
        sqlBuffer.append("COUNT(DISTINCT ");
        sqlBuffer.append(firstSelectField.getColValue());
        sqlBuffer.append(")");
      }
    }
 else {
      sqlBuffer.append("COUNT(DISTINCT *) ");
    }
  }
 else {
    sqlBuffer.append("COUNT(1) ");
  }
  List<EntityCondition> viewWhereConditions=null;
  List<EntityCondition> viewHavingConditions=null;
  List<String> viewOrderByList=null;
  if (modelViewEntity != null) {
    viewWhereConditions=FastList.newInstance();
    viewHavingConditions=FastList.newInstance();
    viewOrderByList=FastList.newInstance();
    modelViewEntity.populateViewEntityConditionInformation(modelFieldTypeReader,viewWhereConditions,viewHavingConditions,viewOrderByList,null);
  }
  sqlBuffer.append(SqlJdbcUtil.makeFromClause(modelEntity,datasourceInfo));
  List<EntityConditionParam> whereEntityConditionParams=FastList.newInstance();
  makeConditionWhereString(sqlBuffer," WHERE ",modelEntity,whereEntityCondition,viewWhereConditions,whereEntityConditionParams);
  if (isGroupBy) {
    modelViewEntity.colNameString(modelViewEntity.getGroupBysCopy(),sqlBuffer," GROUP BY ",", ","",false);
  }
  List<EntityConditionParam> havingEntityConditionParams=FastList.newInstance();
  makeConditionHavingString(sqlBuffer," HAVING ",modelEntity,havingEntityCondition,viewHavingConditions,havingEntityConditionParams);
  if (isGroupBy) {
    sqlBuffer.append(") TEMP_NAME");
  }
  String sql=sqlBuffer.toString();
  if (Debug.verboseOn())   Debug.logVerbose("Count select sql: " + sql,module);
  SQLProcessor sqlP=new SQLProcessor(helperInfo);
  sqlP.prepareStatement(sql,findOptions.getSpecifyTypeAndConcur(),findOptions.getResultSetType(),findOptions.getResultSetConcurrency(),findOptions.getFetchSize(),findOptions.getMaxRows());
  if (verboseOn) {
    Debug.logVerbose("Setting the whereEntityConditionParams: " + whereEntityConditionParams,module);
  }
  for (  EntityConditionParam whereEntityConditionParam : whereEntityConditionParams) {
    SqlJdbcUtil.setValue(sqlP,whereEntityConditionParam.getModelField(),modelEntity.getEntityName(),whereEntityConditionParam.getFieldValue(),modelFieldTypeReader);
  }
  if (verboseOn) {
    Debug.logVerbose("Setting the havingEntityConditionParams: " + havingEntityConditionParams,module);
  }
  for (  EntityConditionParam havingEntityConditionParam : havingEntityConditionParams) {
    SqlJdbcUtil.setValue(sqlP,havingEntityConditionParam.getModelField(),modelEntity.getEntityName(),havingEntityConditionParam.getFieldValue(),modelFieldTypeReader);
  }
  try {
    sqlP.executeQuery();
    long count=0;
    ResultSet resultSet=sqlP.getResultSet();
    if (resultSet.next()) {
      count=resultSet.getLong(1);
    }
    return count;
  }
 catch (  SQLException e) {
    throw new GenericDataSourceException("Error getting count value",e);
  }
 finally {
    sqlP.close();
  }
}
