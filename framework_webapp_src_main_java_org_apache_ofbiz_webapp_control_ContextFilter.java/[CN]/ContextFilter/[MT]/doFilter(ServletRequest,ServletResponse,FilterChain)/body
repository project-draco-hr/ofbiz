{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  httpRequest.setAttribute("servletContext",config.getServletContext());
  if (UtilValidate.isEmpty(httpRequest.getSession().getAttribute("webSiteId"))) {
    httpRequest.getSession().setAttribute("webSiteId",WebSiteWorker.getWebSiteId(httpRequest));
  }
  httpRequest.setAttribute("_CONTEXT_ROOT_",config.getServletContext().getRealPath("/"));
  httpRequest.setAttribute("_SERVER_ROOT_URL_",UtilHttp.getServerRootUrl(httpRequest));
  String reqAttrMapHex=(String)httpRequest.getSession().getAttribute("_REQ_ATTR_MAP_");
  if (UtilValidate.isNotEmpty(reqAttrMapHex)) {
    byte[] reqAttrMapBytes=StringUtil.fromHexString(reqAttrMapHex);
    Map<String,Object> reqAttrMap=checkMap(UtilObject.getObject(reqAttrMapBytes),String.class,Object.class);
    if (reqAttrMap != null) {
      for (      Map.Entry<String,Object> entry : reqAttrMap.entrySet()) {
        httpRequest.setAttribute(entry.getKey(),entry.getValue());
      }
    }
    httpRequest.getSession().removeAttribute("_REQ_ATTR_MAP_");
  }
  if (request.getCharacterEncoding() == null) {
    request.setCharacterEncoding(defaultCharacterEncoding);
  }
  WebAppUtil.setAttributesFromRequestBody(request);
  if (!isMultitenant) {
    request.setAttribute("delegator",config.getServletContext().getAttribute("delegator"));
    request.setAttribute("dispatcher",config.getServletContext().getAttribute("dispatcher"));
    request.setAttribute("security",config.getServletContext().getAttribute("security"));
  }
 else {
    String serverName=httpRequest.getServerName();
    try {
      Delegator delegator=WebAppUtil.getDelegator(config.getServletContext());
      Delegator baseDelegator=DelegatorFactory.getDelegator(delegator.getDelegatorBaseName());
      GenericValue tenantDomainName=EntityQuery.use(baseDelegator).from("TenantDomainName").where("domainName",serverName).queryOne();
      String tenantId=null;
      if (UtilValidate.isNotEmpty(tenantDomainName)) {
        tenantId=tenantDomainName.getString("tenantId");
      }
      if (UtilValidate.isEmpty(tenantId)) {
        tenantId=(String)httpRequest.getAttribute("userTenantId");
      }
      if (UtilValidate.isEmpty(tenantId)) {
        tenantId=httpRequest.getParameter("userTenantId");
      }
      if (UtilValidate.isNotEmpty(tenantId)) {
        if ("".equals(httpRequest.getContextPath()) && "".equals(httpRequest.getServletPath())) {
          GenericValue tenant=EntityQuery.use(baseDelegator).from("Tenant").where("tenantId",tenantId).queryOne();
          String initialPath=tenant.getString("initialPath");
          if (UtilValidate.isNotEmpty(initialPath) && !"/".equals(initialPath)) {
            ((HttpServletResponse)response).sendRedirect(initialPath);
            return;
          }
        }
        String tenantDelegatorName=delegator.getDelegatorBaseName() + "#" + tenantId;
        httpRequest.getSession().setAttribute("delegatorName",tenantDelegatorName);
        delegator=DelegatorFactory.getDelegator(tenantDelegatorName);
        config.getServletContext().setAttribute("delegator",delegator);
        config.getServletContext().setAttribute("security",null);
        config.getServletContext().setAttribute("dispatcher",null);
        Security security=WebAppUtil.getSecurity(config.getServletContext());
        LocalDispatcher dispatcher=WebAppUtil.getDispatcher(config.getServletContext());
        request.setAttribute("delegator",delegator);
        request.setAttribute("dispatcher",dispatcher);
        request.setAttribute("security",security);
        request.setAttribute("userTenantId",tenantId);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Unable to get Tenant",module);
    }
  }
  chain.doFilter(request,httpResponse);
}
