{
  Locale locale=(Locale)context.get("locale");
  String labelFileName=(String)context.get("labelFileName");
  String apacheLicenseText=null;
  try {
    apacheLicenseText=getApacheLicenseText();
  }
 catch (  IOException e) {
    Debug.logWarning(e,"Unable to read Apache License text file",module);
  }
  try {
    LabelManagerFactory.getLabelManagerFactory(dctx.getDelegator().getDelegatorName());
    Map<String,LabelInfo> labels=LabelManagerFactory.getLabels();
    Map<String,String> fileNamesFound=LabelManagerFactory.getFileNamesFound();
    Set<String> labelsList=LabelManagerFactory.getLabelsList();
    Set<String> localesFound=LabelManagerFactory.getLocalesFound();
    for (    String fileName : fileNamesFound.keySet()) {
      if (UtilValidate.isNotEmpty(labelFileName) && !(labelFileName.equalsIgnoreCase(fileName))) {
        continue;
      }
      String uri=fileNamesFound.get(fileName);
      Document resourceDocument=UtilXml.makeEmptyXmlDocument("resource");
      Element resourceElem=resourceDocument.getDocumentElement();
      resourceElem.setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
      for (      String labelKey : labelsList) {
        LabelInfo labelInfo=labels.get(labelKey);
        if (!(labelInfo.getFileName().equalsIgnoreCase(fileName))) {
          continue;
        }
        Element propertyElem=UtilXml.addChildElement(resourceElem,"property",resourceDocument);
        propertyElem.setAttribute("key",StringEscapeUtils.unescapeHtml(labelInfo.getLabelKey()));
        if (UtilValidate.isNotEmpty(labelInfo.getLabelKeyComment())) {
          Comment labelKeyComment=resourceDocument.createComment(StringEscapeUtils.unescapeHtml(labelInfo.getLabelKeyComment()));
          Node parent=propertyElem.getParentNode();
          parent.insertBefore(labelKeyComment,propertyElem);
        }
        for (        String localeFound : localesFound) {
          LabelValue labelValue=labelInfo.getLabelValue(localeFound);
          String valueString=null;
          if (labelValue != null) {
            valueString=labelValue.getLabelValue();
          }
          if (UtilValidate.isNotEmpty(valueString)) {
            valueString=StringEscapeUtils.unescapeHtml(valueString);
            Element valueElem=UtilXml.addChildElementValue(propertyElem,"value",valueString,resourceDocument);
            ;
            valueElem.setAttribute("xml:lang",localeFound);
            if (valueString.trim().length() == 0) {
              valueElem.setAttribute("xml:space","preserve");
            }
            if (UtilValidate.isNotEmpty(labelValue.getLabelComment())) {
              Comment labelComment=resourceDocument.createComment(StringEscapeUtils.unescapeHtml(labelValue.getLabelComment()));
              Node parent=valueElem.getParentNode();
              parent.insertBefore(labelComment,valueElem);
            }
          }
        }
      }
      if (UtilValidate.isNotEmpty(uri)) {
        File outFile=new File(new URI(uri));
        FileOutputStream fos=new FileOutputStream(outFile);
        try {
          if (apacheLicenseText != null) {
            fos.write(apacheLicenseText.getBytes());
          }
          UtilXml.writeXmlDocument(resourceElem,fos,"UTF-8",true,true,4);
        }
  finally {
          fos.close();
          UtilCache.clearCache("properties.UtilPropertiesBundleCache");
        }
      }
    }
  }
 catch (  Exception e) {
    Debug.logError(e,"Exception during save labels to xml file:",module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"saveLabelsToXmlFile.exceptionDuringSaveLabelsToXmlFile",locale));
  }
  return ServiceUtil.returnSuccess();
}
