{
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    EntityEcaRuleRunner<?> ecaRunner=this.getEcaRuleRunner(primaryKey.getEntityName());
    ecaRunner.evalRules(EntityEcaHandler.EV_VALIDATE,EntityEcaHandler.OP_FIND,primaryKey,false);
    GenericHelper helper=getEntityHelper(primaryKey.getEntityName());
    GenericValue value=null;
    if (!primaryKey.isPrimaryKey()) {
      throw new GenericModelException("[GenericDelegator.findByPrimaryKey] Passed primary key is not a valid primary key: " + primaryKey);
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RUN,EntityEcaHandler.OP_FIND,primaryKey,false);
    try {
      value=helper.findByPrimaryKeyPartial(primaryKey,keys);
    }
 catch (    GenericEntityNotFoundException e) {
    }
    if (value != null)     value.setDelegator(this);
    ecaRunner.evalRules(EntityEcaHandler.EV_RETURN,EntityEcaHandler.OP_FIND,primaryKey,false);
    TransactionUtil.commit(beganTransaction);
    return value;
  }
 catch (  Exception e) {
    String errMsg="Failure in findByPrimaryKeyPartial operation for entity [" + primaryKey.getEntityName() + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    TransactionUtil.rollback(beganTransaction,errMsg,e);
    throw new GenericEntityException(e);
  }
}
