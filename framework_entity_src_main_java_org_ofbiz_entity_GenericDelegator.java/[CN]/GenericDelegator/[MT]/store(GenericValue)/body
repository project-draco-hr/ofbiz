{
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    EntityEcaRuleRunner<?> ecaRunner=this.getEcaRuleRunner(value.getEntityName());
    ecaRunner.evalRules(EntityEcaHandler.EV_VALIDATE,EntityEcaHandler.OP_STORE,value,false);
    GenericHelper helper=getEntityHelper(value.getEntityName());
    ecaRunner.evalRules(EntityEcaHandler.EV_RUN,EntityEcaHandler.OP_STORE,value,false);
    if (value.getModelEntity().getHasFieldWithAuditLog()) {
      createEntityAuditLogAll(value,true,false);
    }
    GenericValue updatedEntity=null;
    if (testMode) {
      updatedEntity=this.findOne(value.getEntityName(),value.getPrimaryKey(),false);
    }
    int retVal=helper.store(value);
    ecaRunner.evalRules(EntityEcaHandler.EV_CACHE_CLEAR,EntityEcaHandler.OP_STORE,value,false);
    this.clearCacheLine(value);
    if (testMode) {
      storeForTestRollback(new TestOperation(OperationType.UPDATE,updatedEntity));
    }
    if (value.lockEnabled()) {
      refresh(value);
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RETURN,EntityEcaHandler.OP_STORE,value,false);
    TransactionUtil.commit(beganTransaction);
    return retVal;
  }
 catch (  Exception e) {
    String errMsg="Failure in store operation for entity [" + value.getEntityName() + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    TransactionUtil.rollback(beganTransaction,errMsg,e);
    throw new GenericEntityException(e);
  }
}
