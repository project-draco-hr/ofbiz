{
  if (entityGroupName == null) {
    return null;
  }
  String helperBaseName=this.getGroupHelperName(entityGroupName);
  if (helperBaseName == null) {
    return null;
  }
  if (UtilValidate.isNotEmpty(this.delegatorTenantId) && "org.ofbiz.tenant".equals(entityGroupName)) {
    Debug.logInfo("Can't access entity of entityGroup = " + entityGroupName + " using tenant delegator "+ this.getDelegatorName()+ ", use base delegator instead",module);
    return null;
  }
  GenericHelperInfo helperInfo=new GenericHelperInfo(entityGroupName,helperBaseName);
  if (UtilValidate.isNotEmpty(this.delegatorTenantId)) {
    try {
      Delegator baseDelegator=DelegatorFactory.getDelegator(this.delegatorBaseName);
      GenericValue tenantDataSource=EntityQuery.use(baseDelegator).from("TenantDataSource").where("tenantId",this.delegatorTenantId,"entityGroupName",entityGroupName).cache(true).queryOne();
      if (tenantDataSource != null) {
        helperInfo.setTenantId(this.delegatorTenantId);
        helperInfo.setOverrideJdbcUri(tenantDataSource.getString("jdbcUri"));
        helperInfo.setOverrideUsername(tenantDataSource.getString("jdbcUsername"));
        helperInfo.setOverridePassword(tenantDataSource.getString("jdbcPassword"));
      }
 else {
        return null;
      }
    }
 catch (    GenericEntityException e) {
      Debug.logInfo(e,"Error getting TenantDataSource info for tenantId=" + this.delegatorTenantId + ", entityGroupName="+ entityGroupName,module);
    }
  }
  return helperInfo;
}
