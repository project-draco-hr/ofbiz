{
  Locale locale=(Locale)context.get("locale");
  String screenLocation="component://example/widget/example/ExampleReportScreens.xml";
  String reportScreenName="ExampleReport";
  Map<String,Object> workContext=new HashMap<String,Object>();
  workContext.putAll(context);
  Writer reportWriter=new StringWriter();
  ScreenStringRenderer screenStringRenderer=null;
  try {
    screenStringRenderer=new MacroScreenRenderer(EntityUtilProperties.getPropertyValue("widget","screen.name",dctx.getDelegator()),EntityUtilProperties.getPropertyValue("widget","screen.screenrenderer",dctx.getDelegator()));
  }
 catch (  TemplateException e) {
    String errMsg=UtilProperties.getMessage(resource,"ExampleGeneralErrorRenderingScreen",UtilMisc.toMap("errorString",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  IOException e) {
    String errMsg=UtilProperties.getMessage(resource,"ExampleIOErrorRenderingScreen",UtilMisc.toMap("errorString",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  ScreenRenderer reportScreenRenderer=new ScreenRenderer(reportWriter,null,screenStringRenderer);
  reportScreenRenderer.populateContextForService(dctx,workContext);
  try {
    reportScreenRenderer.render(screenLocation,reportScreenName);
  }
 catch (  GeneralException e) {
    String errMsg=UtilProperties.getMessage(resource,"ExampleGeneralErrorRenderingScreen",UtilMisc.toMap("errorString",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  IOException e) {
    String errMsg=UtilProperties.getMessage(resource,"ExampleIOErrorRenderingScreen",UtilMisc.toMap("errorString",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  SAXException e) {
    String errMsg=UtilProperties.getMessage(resource,"ExampleSAXErrorRenderingScreen",UtilMisc.toMap("errorString",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  ParserConfigurationException e) {
    String errMsg=UtilProperties.getMessage(resource,"ExampleParserConfigurationErrorRenderingScreen",UtilMisc.toMap("errorString",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  StreamSource src=new StreamSource(new StringReader(reportWriter.toString()));
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    Fop fop=ApacheFopWorker.createFopInstance(out,MimeConstants.MIME_PDF);
    ApacheFopWorker.transform(src,null,fop);
  }
 catch (  FOPException e) {
    e.printStackTrace();
  }
  DocFlavor docFlavor=DocFlavor.BYTE_ARRAY.PDF;
  Doc myDoc=new SimpleDoc(out.toByteArray(),docFlavor,null);
  PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
  aset.add(new Copies(1));
  aset.add(Sides.ONE_SIDED);
  PrintService[] services=PrintServiceLookup.lookupPrintServices(docFlavor,aset);
  if (services.length > 0) {
    DocPrintJob job=services[0].createPrintJob();
    try {
      job.print(myDoc,aset);
    }
 catch (    PrintException pe) {
      String errMsg=UtilProperties.getMessage(resource,"ExampleUnableToPrintPDFFromXSL-FO",UtilMisc.toMap("errorString",pe.toString()),locale);
      Debug.logError(pe,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  return ServiceUtil.returnSuccess();
}
