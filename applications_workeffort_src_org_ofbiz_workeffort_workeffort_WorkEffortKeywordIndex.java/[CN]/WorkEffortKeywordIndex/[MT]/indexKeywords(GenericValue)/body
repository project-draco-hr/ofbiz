{
  if (workEffort == null)   return;
  Delegator delegator=workEffort.getDelegator();
  if (delegator == null)   return;
  String workEffortId=workEffort.getString("workEffortId");
  String separators=KeywordSearchUtil.getSeparators();
  String stopWordBagOr=KeywordSearchUtil.getStopWordBagOr();
  String stopWordBagAnd=KeywordSearchUtil.getStopWordBagAnd();
  boolean removeStems=KeywordSearchUtil.getRemoveStems();
  Set<String> stemSet=KeywordSearchUtil.getStemSet();
  Map<String,Long> keywords=new TreeMap<String,Long>();
  List<String> strings=FastList.newInstance();
  int widWeight=1;
  try {
    widWeight=Integer.parseInt(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffort.workEffortId","1"));
  }
 catch (  Exception e) {
    Debug.logWarning("Could not parse weight number: " + e.toString(),module);
  }
  keywords.put(workEffort.getString("workEffortId").toLowerCase(),Long.valueOf(widWeight));
  addWeightedKeywordSourceString(workEffort,"workEffortName",strings);
  addWeightedKeywordSourceString(workEffort,"workEffortTypeId",strings);
  addWeightedKeywordSourceString(workEffort,"currentStatusId",strings);
  if (!"0".equals(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortNoteAndData.noteInfo","1"))) {
    List<GenericValue> workEffortNotes=EntityQuery.use(delegator).from("WorkEffortNoteAndData").where("workEffortId",workEffortId).queryList();
    for (    GenericValue workEffortNote : workEffortNotes) {
      addWeightedKeywordSourceString(workEffortNote,"noteInfo",strings);
    }
  }
  if (!"0".equals(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortAttribute.attrName","1")) || !"0".equals(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortAttribute.attrValue","1"))) {
    List<GenericValue> workEffortAttributes=EntityQuery.use(delegator).from("WorkEffortAttribute").where("workEffortId",workEffortId).queryList();
    for (    GenericValue workEffortAttribute : workEffortAttributes) {
      addWeightedKeywordSourceString(workEffortAttribute,"attrName",strings);
      addWeightedKeywordSourceString(workEffortAttribute,"attrValue",strings);
    }
  }
  String workEffortContentTypes=UtilProperties.getPropertyValue("workeffortsearch","index.include.WorkEffortContentTypes");
  for (  String workEffortContentTypeId : workEffortContentTypes.split(",")) {
    int weight=1;
    try {
      weight=Integer.parseInt(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortContent." + workEffortContentTypeId,"1"));
    }
 catch (    Exception e) {
      Debug.logWarning("Could not parse weight number: " + e.toString(),module);
    }
    List<GenericValue> workEffortContentAndInfos=EntityQuery.use(delegator).from("WorkEffortContentAndInfo").where("workEffortId",workEffortId,"workEffortContentTypeId",workEffortContentTypeId).queryList();
    for (    GenericValue workEffortContentAndInfo : workEffortContentAndInfos) {
      addWeightedDataResourceString(workEffortContentAndInfo,weight,strings,delegator,workEffort);
      List<GenericValue> alternateViews=workEffortContentAndInfo.getRelated("ContentAssocDataResourceViewTo",UtilMisc.toMap("caContentAssocTypeId","ALTERNATE_LOCALE"),UtilMisc.toList("-caFromDate"),false);
      alternateViews=EntityUtil.filterByDate(alternateViews,UtilDateTime.nowTimestamp(),"caFromDate","caThruDate",true);
      for (      GenericValue thisView : alternateViews) {
        addWeightedDataResourceString(thisView,weight,strings,delegator,workEffort);
      }
    }
  }
  for (  String str : strings) {
    KeywordSearchUtil.processKeywordsForIndex(str,keywords,separators,stopWordBagAnd,stopWordBagOr,removeStems,stemSet);
  }
  List<GenericValue> toBeStored=FastList.newInstance();
  for (  Map.Entry<String,Long> entry : keywords.entrySet()) {
    if (entry.getKey().length() < 60) {
      GenericValue workEffortKeyword=delegator.makeValue("WorkEffortKeyword",UtilMisc.toMap("workEffortId",workEffort.getString("workEffortId"),"keyword",entry.getKey(),"relevancyWeight",entry.getValue()));
      toBeStored.add(workEffortKeyword);
    }
  }
  if (toBeStored.size() > 0) {
    if (Debug.verboseOn())     Debug.logVerbose("WorkEffortKeywordIndex indexKeywords Storing " + toBeStored.size() + " keywords for workEffortId "+ workEffort.getString("workEffortId"),module);
    delegator.storeAll(toBeStored);
  }
}
