{
  if (workEffort == null)   return;
  GenericDelegator delegator=workEffort.getDelegator();
  if (delegator == null)   return;
  String workEffortId=workEffort.getString("workEffortId");
  String separators=KeywordSearchUtil.getSeparators();
  String stopWordBagOr=KeywordSearchUtil.getStopWordBagOr();
  String stopWordBagAnd=KeywordSearchUtil.getStopWordBagAnd();
  boolean removeStems=KeywordSearchUtil.getRemoveStems();
  Set stemSet=KeywordSearchUtil.getStemSet();
  Map keywords=new TreeMap();
  List strings=new ArrayList(50);
  int widWeight=1;
  try {
    widWeight=Integer.parseInt(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffort.workEffortId","1"));
  }
 catch (  Exception e) {
    Debug.logWarning("Could not parse weight number: " + e.toString(),module);
  }
  keywords.put(workEffort.getString("workEffortId").toLowerCase(),new Long(widWeight));
  addWeightedKeywordSourceString(workEffort,"workEffortName",strings);
  addWeightedKeywordSourceString(workEffort,"workEffortTypeId",strings);
  addWeightedKeywordSourceString(workEffort,"currentStatusId",strings);
  if (!"0".equals(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortNoteAndData.noteInfo","1"))) {
    Iterator workEffortNotes=UtilMisc.toIterator(delegator.findByAnd("WorkEffortNoteAndData",UtilMisc.toMap("workEffortId",workEffortId)));
    while (workEffortNotes != null && workEffortNotes.hasNext()) {
      GenericValue workEffortNote=(GenericValue)workEffortNotes.next();
      addWeightedKeywordSourceString(workEffortNote,"noteInfo",strings);
    }
  }
  if (!"0".equals(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortAttribute.attrName","1")) || !"0".equals(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortAttribute.attrValue","1"))) {
    Iterator workEffortAttributes=UtilMisc.toIterator(delegator.findByAnd("WorkEffortAttribute",UtilMisc.toMap("workEffortId",workEffortId)));
    while (workEffortAttributes != null && workEffortAttributes.hasNext()) {
      GenericValue workEffortAttribute=(GenericValue)workEffortAttributes.next();
      addWeightedKeywordSourceString(workEffortAttribute,"attrName",strings);
      addWeightedKeywordSourceString(workEffortAttribute,"attrValue",strings);
    }
  }
  String workEffortContentTypes=UtilProperties.getPropertyValue("workeffortsearch","index.include.WorkEffortContentTypes");
  List workEffortContentTypeList=Arrays.asList(workEffortContentTypes.split(","));
  Iterator workEffortContentTypeIter=workEffortContentTypeList.iterator();
  while (workEffortContentTypeIter.hasNext()) {
    String workEffortContentTypeId=(String)workEffortContentTypeIter.next();
    int weight=1;
    try {
      weight=Integer.parseInt(UtilProperties.getPropertyValue("workeffortsearch","index.weight.WorkEffortContent." + workEffortContentTypeId,"1"));
    }
 catch (    Exception e) {
      Debug.logWarning("Could not parse weight number: " + e.toString(),module);
    }
    List workEffortContentAndInfos=delegator.findByAnd("WorkEffortContentAndInfo",UtilMisc.toMap("workEffortId",workEffortId,"workEffortContentTypeId",workEffortContentTypeId),null);
    Iterator workEffortContentAndInfoIter=workEffortContentAndInfos.iterator();
    while (workEffortContentAndInfoIter.hasNext()) {
      GenericValue workEffortContentAndInfo=(GenericValue)workEffortContentAndInfoIter.next();
      addWeightedDataResourceString(workEffortContentAndInfo,weight,strings,delegator,workEffort);
      List alternateViews=workEffortContentAndInfo.getRelated("ContentAssocDataResourceViewTo",UtilMisc.toMap("caContentAssocTypeId","ALTERNATE_LOCALE"),UtilMisc.toList("-caFromDate"));
      alternateViews=EntityUtil.filterByDate(alternateViews,UtilDateTime.nowTimestamp(),"caFromDate","caThruDate",true);
      Iterator alternateViewIter=alternateViews.iterator();
      while (alternateViewIter.hasNext()) {
        GenericValue thisView=(GenericValue)alternateViewIter.next();
        addWeightedDataResourceString(thisView,weight,strings,delegator,workEffort);
      }
    }
  }
  Iterator strIter=strings.iterator();
  while (strIter.hasNext()) {
    String str=(String)strIter.next();
    KeywordSearchUtil.processKeywordsForIndex(str,keywords,separators,stopWordBagAnd,stopWordBagOr,removeStems,stemSet);
  }
  List toBeStored=new LinkedList();
  Iterator kiter=keywords.entrySet().iterator();
  while (kiter.hasNext()) {
    Map.Entry entry=(Map.Entry)kiter.next();
    GenericValue workEffortKeyword=delegator.makeValue("WorkEffortKeyword",UtilMisc.toMap("workEffortId",workEffort.getString("workEffortId"),"keyword",entry.getKey(),"relevancyWeight",entry.getValue()));
    toBeStored.add(workEffortKeyword);
  }
  if (toBeStored.size() > 0) {
    if (Debug.verboseOn())     Debug.logVerbose("WorkEffortKeywordIndex indexKeywords Storing " + toBeStored.size() + " keywords for workEffortId "+ workEffort.getString("workEffortId"),module);
    delegator.storeAll(toBeStored);
  }
}
