{
  if (datedValues == null)   return null;
  if (moment == null)   return datedValues;
  if (fromDateName == null)   fromDateName="fromDate";
  if (thruDateName == null)   thruDateName="thruDate";
  List result=FastList.newInstance();
  Iterator iter=datedValues.iterator();
  if (allAreSame) {
    ModelField fromDateField=null;
    ModelField thruDateField=null;
    if (iter.hasNext()) {
      GenericValue datedValue=(GenericValue)iter.next();
      fromDateField=datedValue.getModelEntity().getField(fromDateName);
      if (fromDateField == null)       throw new IllegalArgumentException("\"" + fromDateName + "\" is not a field of "+ datedValue.getEntityName());
      thruDateField=datedValue.getModelEntity().getField(thruDateName);
      if (thruDateField == null)       throw new IllegalArgumentException("\"" + thruDateName + "\" is not a field of "+ datedValue.getEntityName());
      java.sql.Timestamp fromDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(fromDateField);
      java.sql.Timestamp thruDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(thruDateField);
      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment))) {
        result.add(datedValue);
      }
    }
    while (iter.hasNext()) {
      GenericValue datedValue=(GenericValue)iter.next();
      java.sql.Timestamp fromDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(fromDateField);
      java.sql.Timestamp thruDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(thruDateField);
      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment))) {
        result.add(datedValue);
      }
    }
  }
 else {
    while (iter.hasNext()) {
      GenericValue datedValue=(GenericValue)iter.next();
      java.sql.Timestamp fromDate=datedValue.getTimestamp(fromDateName);
      java.sql.Timestamp thruDate=datedValue.getTimestamp(thruDateName);
      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment))) {
        result.add(datedValue);
      }
    }
  }
  return result;
}
