{
  final Environment env=Environment.getCurrentEnvironment();
  Map ctx=(Map)FreeMarkerWorker.getWrappedObject("context",env);
  if (ctx == null) {
    ctx=FastMap.newInstance();
  }
  final String mapKey=getArg(args,"mapKey",ctx);
  final String subContentId=getArg(args,"subContentId",ctx);
  final String subDataResourceTypeId=getArg(args,"subDataResourceTypeId",ctx);
  final String contentId=getArg(args,"contentId",ctx);
  final String mimeTypeId=getArg(args,"mimeTypeId",ctx);
  final String throwExceptionOnError=getArg(args,"throwExceptionOnError",ctx);
  final Locale locale=(Locale)FreeMarkerWorker.getWrappedObject("locale",env);
  final HttpServletRequest request=(HttpServletRequest)FreeMarkerWorker.getWrappedObject("request",env);
  final LocalDispatcher dispatcher=(LocalDispatcher)FreeMarkerWorker.getWrappedObject("dispatcher",env);
  final GenericDelegator delegator=(GenericDelegator)FreeMarkerWorker.getWrappedObject("delegator",env);
  final GenericValue userLogin=(GenericValue)FreeMarkerWorker.getWrappedObject("userLogin",env);
  GenericValue subContentDataResourceViewTemp=(GenericValue)FreeMarkerWorker.getWrappedObject("subContentDataResourceView",env);
  if (subContentDataResourceViewTemp == null) {
    List assocTypes=UtilMisc.toList("SUB_CONTENT");
    Timestamp fromDate=UtilDateTime.nowTimestamp();
    try {
      subContentDataResourceViewTemp=ContentWorker.getSubContent(delegator,contentId,mapKey,subContentId,userLogin,assocTypes,fromDate);
    }
 catch (    IOException e) {
      throw new RuntimeException(e.getMessage());
    }
  }
  final GenericValue subContentDataResourceView=subContentDataResourceViewTemp;
  final Map templateContext=ctx;
  return new Writer(out){
    public void write(    char cbuf[],    int off,    int len){
    }
    public void flush() throws IOException {
      out.flush();
    }
    public void close() throws IOException {
      try {
        renderSubContent();
      }
 catch (      IOException e) {
        if (!"false".equals(throwExceptionOnError)) {
          throw new IOException(e.getMessage());
        }
      }
    }
    public void renderSubContent() throws IOException {
      Timestamp fromDate=UtilDateTime.nowTimestamp();
      ServletContext servletContext=request.getSession().getServletContext();
      String rootDir=servletContext.getRealPath("/");
      String webSiteId=(String)servletContext.getAttribute("webSiteId");
      String https=(String)servletContext.getAttribute("https");
      templateContext.put("webSiteId",webSiteId);
      templateContext.put("https",https);
      templateContext.put("rootDir",rootDir);
      Map templateRoot=FreeMarkerWorker.createEnvironmentMap(env);
      templateRoot.put("context",templateContext);
      if (subContentDataResourceView != null) {
      }
      try {
        if (subContentId != null) {
          ContentWorker.renderContentAsText(dispatcher,delegator,subContentId,out,templateRoot,locale,mimeTypeId,false);
        }
 else {
          ContentWorker.renderSubContentAsText(dispatcher,delegator,contentId,out,mapKey,templateRoot,locale,mimeTypeId,false);
        }
      }
 catch (      GeneralException e) {
        Debug.logError(e,"Error rendering content",module);
        throw new IOException("Error rendering content" + e.toString());
      }
      templateContext.put("mapKey",null);
      templateContext.put("subContentId",null);
      templateContext.put("subDataResourceTypeId",null);
      templateContext.put("contentId",contentId);
      templateContext.put("mimeTypeId",null);
      templateContext.put("locale",locale);
    }
  }
;
}
