{
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=dctx.getDelegator();
  productExportSuccessMessageList.clear();
  productExportFailureMessageList.clear();
  Map<String,Object> result=FastMap.newInstance();
  Map response=null;
  Map<String,Object> eBayConfigResult=EbayHelper.buildEbayConfig(context,delegator);
  StringBuffer dataStoreXml=new StringBuffer();
  try {
    Map resultMap=buildGetStoreXml(context,dataStoreXml,eBayConfigResult.get("token").toString(),eBayConfigResult.get("siteID").toString());
    if (!ServiceUtil.isFailure(resultMap)) {
      response=postItem(eBayConfigResult.get("xmlGatewayUri").toString(),dataStoreXml,eBayConfigResult.get("devID").toString(),eBayConfigResult.get("appID").toString(),eBayConfigResult.get("certID").toString(),"GetStore",eBayConfigResult.get("compatibilityLevel").toString(),eBayConfigResult.get("siteID").toString());
      String successMessage=(String)response.get("successMessage");
      if (successMessage != null) {
        String isSuccess=readEbayResponse(successMessage,context.get("productStoreId").toString());
        if (isSuccess == "success") {
          GenericValue catalogStore=null;
          if (UtilValidate.isNotEmpty(context.get("productStoreId"))) {
            catalogStore=EntityUtil.getFirst(delegator.findByAnd("ProductStoreCatalog",UtilMisc.toMap("productStoreId",context.get("productStoreId").toString(),"prodCatalogId",context.get("prodCatalogId").toString())));
          }
          List<GenericValue> catalogCategories=null;
          if (UtilValidate.isNotEmpty(context.get("prodCatalogId"))) {
            catalogCategories=delegator.findByAnd("ProdCatalogCategory",UtilMisc.toMap("prodCatalogId",context.get("prodCatalogId").toString()));
          }
          if (catalogCategories != null) {
            String isSuccess2="";
            Iterator categoriesListIter=catalogCategories.iterator();
            while (categoriesListIter.hasNext()) {
              GenericValue catalogCategory=(GenericValue)categoriesListIter.next();
              String prodCategoryId=catalogCategory.getString("productCategoryId").toString();
              StringBuffer dataCategoriesXml=new StringBuffer();
              Map resultCategoriesMap=buildSetStoreCategoriesXml(dctx,context,dataCategoriesXml,eBayConfigResult.get("token").toString(),eBayConfigResult.get("siteID").toString(),prodCategoryId);
              if (!ServiceUtil.isFailure(resultCategoriesMap)) {
                response=postItem(eBayConfigResult.get("xmlGatewayUri").toString(),dataCategoriesXml,eBayConfigResult.get("devID").toString(),eBayConfigResult.get("appID").toString(),eBayConfigResult.get("certID").toString(),"SetStoreCategories",eBayConfigResult.get("compatibilityLevel").toString(),eBayConfigResult.get("siteID").toString());
                String successMessage2=(String)response.get("successMessage");
                if (successMessage2 != null) {
                  isSuccess2=readEbayResponse(successMessage2,context.get("productStoreId").toString());
                }
              }
            }
            Map<String,Object> returnResult=FastMap.newInstance();
            StringBuffer dataGetStoreXml=new StringBuffer();
            Map resultStoreMap=buildGetStoreXml(context,dataGetStoreXml,eBayConfigResult.get("token").toString(),eBayConfigResult.get("siteID").toString());
            if (!ServiceUtil.isFailure(resultStoreMap)) {
              response=postItem(eBayConfigResult.get("xmlGatewayUri").toString(),dataGetStoreXml,eBayConfigResult.get("devID").toString(),eBayConfigResult.get("appID").toString(),eBayConfigResult.get("certID").toString(),"GetStore",eBayConfigResult.get("compatibilityLevel").toString(),eBayConfigResult.get("siteID").toString());
              String successStoreMessage=(String)response.get("successMessage");
              if (successStoreMessage != null) {
                returnResult=readEbayGetStoreCategoriesResponse(successStoreMessage,locale);
              }
            }
            if (returnResult.size() > 0) {
              List catetoriesList=FastList.newInstance();
              catetoriesList=(List)returnResult.get("categories");
              Iterator categoriesIter=catetoriesList.iterator();
              while (categoriesIter.hasNext()) {
                Map category=(Map)categoriesIter.next();
                String CategoryID=category.get("CategoryID").toString();
                String CategoryName=category.get("CategoryName").toString();
                String CategorySeq=category.get("CategorySeq").toString();
                context.put("webSiteUrl","http://demo.ofbiz.org");
                context.put("primaryCategoryId",CategoryID);
                context.put("country","US");
                context.put("location",context.get("location").toString());
                String paymentMethods=context.get("paymentMethods").toString();
                context.put("" + paymentMethods,"on");
                context.put("Currency","USD");
                context.put("UseTaxTable","false");
                context.put("DispatchTimeMax","3");
                GenericValue categoryFound=EntityUtil.getFirst(delegator.findByAnd("ProductCategory",UtilMisc.toMap("categoryName",CategoryName)));
                if (UtilValidate.isNotEmpty(categoryFound)) {
                  GenericValue catalogCategory=EntityUtil.getFirst(delegator.findByAnd("ProdCatalogCategory",UtilMisc.toMap("prodCatalogId",context.get("prodCatalogId").toString(),"productCategoryId",categoryFound.get("productCategoryId").toString())));
                  List<GenericValue> categoryMemberList=null;
                  if (UtilValidate.isNotEmpty(catalogCategory)) {
                    categoryMemberList=delegator.findByAnd("ProductCategoryMember",UtilMisc.toMap("productCategoryId",catalogCategory.get("productCategoryId").toString()));
                    if ((categoryMemberList == null) || (categoryMemberList.size() < 1)) {
                      GenericValue getChildCategory=EntityUtil.getFirst(delegator.findByAnd("ProductCategoryRollup",UtilMisc.toMap("parentProductCategoryId",catalogCategory.get("productCategoryId").toString())));
                      if (UtilValidate.isNotEmpty(getChildCategory)) {
                        categoryMemberList=delegator.findByAnd("ProductCategoryMember",UtilMisc.toMap("productCategoryId",getChildCategory.get("productCategoryId").toString()));
                      }
                    }
                  }
                  if (categoryMemberList != null) {
                    Iterator categoryMemberListIter=categoryMemberList.iterator();
                    while (categoryMemberListIter.hasNext()) {
                      StringBuffer dataItemsXml=new StringBuffer();
                      GenericValue productCategoryMem=(GenericValue)categoryMemberListIter.next();
                      GenericValue product=productCategoryMem.getRelatedOne("Product");
                      GenericValue startPriceValue=EntityUtil.getFirst(EntityUtil.filterByDate(product.getRelatedByAnd("ProductPrice",UtilMisc.toMap("productPricePurposeId","EBAY","productPriceTypeId","MINIMUM_PRICE"))));
                      if (UtilValidate.isEmpty(startPriceValue)) {
                        String startPriceMissingMsg="Unable to find a starting price for auction of product with id (" + product.getString("productId") + "), So Ignoring the export of this product to eBay.";
                        return ServiceUtil.returnFailure(startPriceMissingMsg);
                      }
 else {
                        context.put("startPrice",startPriceValue.get("price").toString());
                      }
                      Map resultItem=productExportEbay.buildDataItemsXml(dctx,context,dataItemsXml,eBayConfigResult.get("token").toString(),product);
                      if (!ServiceUtil.isFailure(resultItem)) {
                        response=postItem(eBayConfigResult.get("xmlGatewayUri").toString(),dataItemsXml,eBayConfigResult.get("devID").toString(),eBayConfigResult.get("appID").toString(),eBayConfigResult.get("certID").toString(),"AddItem",eBayConfigResult.get("compatibilityLevel").toString(),eBayConfigResult.get("siteID").toString());
                        String successMessage4=(String)response.get("successMessage");
                        if (successMessage4 != null) {
                          isSuccess2=readEbayResponse(successMessage4,context.get("productStoreId").toString());
                        }
                        if (UtilValidate.isNotEmpty(response)) {
                          String itemID=exportItemIDResponse((String)response.get("successMessage"));
                          if (itemID != "") {
                            StringBuffer dataRevItemsXml=new StringBuffer();
                            Map resultRevItem=buildReviseItemXml(dctx,context,dataRevItemsXml,eBayConfigResult.get("token").toString(),eBayConfigResult.get("siteID").toString(),itemID,CategoryID);
                            if (!ServiceUtil.isFailure(resultRevItem)) {
                              response=postItem(eBayConfigResult.get("xmlGatewayUri").toString(),dataRevItemsXml,eBayConfigResult.get("devID").toString(),eBayConfigResult.get("appID").toString(),eBayConfigResult.get("certID").toString(),"ReviseItem",eBayConfigResult.get("compatibilityLevel").toString(),eBayConfigResult.get("siteID").toString());
                              String successMessage3=(String)response.get("successMessage");
                              if (successMessage3 != null) {
                                isSuccess2=readEbayResponse(successMessage3,context.get("productStoreId").toString());
                              }
                              if (ServiceUtil.isFailure(response)) {
                                return ServiceUtil.returnFailure(ServiceUtil.getErrorMessage(response));
                              }
                            }
                            if (UtilValidate.isNotEmpty(productExportEbay.getProductExportSuccessMessageList())) {
                              result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
                              result.put(ModelService.SUCCESS_MESSAGE_LIST,productExportEbay.getProductExportSuccessMessageList());
                            }
                            if (UtilValidate.isNotEmpty(productExportEbay.getproductExportFailureMessageList())) {
                              result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_FAIL);
                              result.put(ModelService.ERROR_MESSAGE_LIST,productExportEbay.getproductExportFailureMessageList());
                            }
                          }
                        }
                      }
 else {
                        return ServiceUtil.returnFailure(ServiceUtil.getErrorMessage(resultItem));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
 else {
        ServiceUtil.returnFailure(ServiceUtil.getErrorMessage(response));
      }
    }
 else {
      return ServiceUtil.returnFailure(ServiceUtil.getErrorMessage(resultMap));
    }
  }
 catch (  Exception e) {
    Debug.logError("Exception in exportCategoriesSelectedToEbayStore : " + e,module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToEbay.exceptionInGetEbayCategories",locale));
  }
  return result;
}
