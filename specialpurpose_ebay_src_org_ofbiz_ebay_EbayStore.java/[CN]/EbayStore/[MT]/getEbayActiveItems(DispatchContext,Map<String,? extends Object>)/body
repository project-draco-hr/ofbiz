{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productStoreId=(String)context.get("productStoreId");
  List activeItems=FastList.newInstance();
  try {
    Map<String,Object> inMap=FastMap.newInstance();
    inMap.put("productStoreId",productStoreId);
    inMap.put("userLogin",userLogin);
    Map<String,Object> resultUser=dispatcher.runSync("getEbayStoreUser",inMap);
    String userID=(String)resultUser.get("userLoginId");
    ApiContext apiContext=EbayHelper.getApiContext(productStoreId,locale,delegator);
    GetMyeBaySellingCall getMyeBaySellingCall=new GetMyeBaySellingCall(apiContext);
    ItemListCustomizationType activeList=new ItemListCustomizationType();
    getMyeBaySellingCall.setActiveList(activeList);
    DetailLevelCodeType[] level={DetailLevelCodeType.RETURN_ALL};
    getMyeBaySellingCall.setDetailLevel(level);
    getMyeBaySellingCall.getMyeBaySelling();
    PaginatedItemArrayType itemListCustomizationType=getMyeBaySellingCall.getReturnedActiveList();
    if (itemListCustomizationType != null) {
      ItemArrayType itemArrayType=itemListCustomizationType.getItemArray();
      int itemArrayTypeSize=itemArrayType.getItemLength();
      for (int i=0; i < itemArrayTypeSize; i++) {
        Map<String,Object> entry=FastMap.newInstance();
        ItemType item=itemArrayType.getItem(i);
        entry.put("itemId",item.getItemID());
        entry.put("title",item.getTitle());
        if (item.getPictureDetails() != null) {
          String url[]=item.getPictureDetails().getPictureURL();
          if (url.length != 0) {
            entry.put("pictureURL",url[0]);
          }
 else {
            entry.put("pictureURL",null);
          }
        }
 else {
          entry.put("pictureURL",null);
        }
        entry.put("timeLeft",item.getTimeLeft());
        if (item.getBuyItNowPrice() != null) {
          entry.put("buyItNowPrice",item.getBuyItNowPrice().getValue());
        }
 else {
          entry.put("buyItNowPrice",null);
        }
        if (item.getStartPrice() != null) {
          entry.put("startPrice",item.getStartPrice().getValue());
        }
 else {
          entry.put("startPrice",null);
        }
        if (item.getListingDetails() != null) {
          entry.put("relistedItemId",item.getListingDetails().getRelistedItemID());
        }
 else {
          entry.put("relistedItemId",null);
        }
        if (item.getListingType() != null) {
          entry.put("listingType",item.getListingType().value());
        }
 else {
          entry.put("listingType",null);
        }
        activeItems.add(entry);
      }
    }
    result.put("activeItems",activeItems);
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
