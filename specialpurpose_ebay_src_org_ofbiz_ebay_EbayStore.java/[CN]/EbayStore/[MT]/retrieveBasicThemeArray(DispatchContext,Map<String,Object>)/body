{
  Map<String,Object> result=FastMap.newInstance();
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=dctx.getDelegator();
  GetStoreOptionsRequestType req=null;
  StoreThemeArrayType returnedBasicThemeArray=null;
  GetStoreOptionsResponseType resp=null;
  try {
    if (context.get("productStoreId") != null) {
      GetStoreOptionsCall call=new GetStoreOptionsCall(EbayHelper.getApiContext((String)context.get("productStoreId"),locale,delegator));
      req=new GetStoreOptionsRequestType();
      resp=(GetStoreOptionsResponseType)call.execute(req);
      StoreColorSchemeType storeFontColorSchemeType=null;
      if (resp != null && "SUCCESS".equals(resp.getAck().toString())) {
        returnedBasicThemeArray=resp.getBasicThemeArray();
        int i=0;
        List<Map<String,Object>> themeList=FastList.newInstance();
        while (i < returnedBasicThemeArray.getThemeLength()) {
          Map<String,Object> basictheme=FastMap.newInstance();
          StoreThemeType storeBasicThemeType=(StoreThemeType)returnedBasicThemeArray.getTheme(i);
          basictheme.put("storeThemeId",storeBasicThemeType.getThemeID());
          basictheme.put("storeThemeName",storeBasicThemeType.getName());
          StoreColorSchemeType storeColorSchemeType=storeBasicThemeType.getColorScheme();
          basictheme.put("storeColorSchemeId",storeColorSchemeType.getColorSchemeID());
          basictheme.put("storeColorSchemeName",storeColorSchemeType.getName());
          if (storeFontColorSchemeType == null) {
            storeFontColorSchemeType=storeBasicThemeType.getColorScheme();
          }
          themeList.add(basictheme);
          i++;
        }
        result=ServiceUtil.returnSuccess("load store Basic Theme option data success..");
        result.put("storeThemeList",themeList);
      }
    }
  }
 catch (  ApiException e) {
    e.printStackTrace();
  }
catch (  SdkSoapException e) {
    e.printStackTrace();
  }
catch (  SdkException e) {
    e.printStackTrace();
  }
  return result;
}
