{
  String name=element.getAttribute("name").intern();
  if (name.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element name attribute is empty");
  }
  this.name=name;
  String helperClass=element.getAttribute("helper-class").intern();
  if (helperClass.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element helper-class attribute is empty");
  }
  this.helperClass=helperClass;
  String fieldTypeName=element.getAttribute("field-type-name").intern();
  if (fieldTypeName.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element field-type-name attribute is empty");
  }
  this.fieldTypeName=fieldTypeName;
  String useSchemas=element.getAttribute("use-schemas").intern();
  if (useSchemas.isEmpty()) {
    useSchemas="true";
  }
  this.useSchemas=useSchemas;
  this.schemaName=element.getAttribute("schema-name").intern();
  String checkOnStart=element.getAttribute("check-on-start").intern();
  if (checkOnStart.isEmpty()) {
    checkOnStart="true";
  }
  this.checkOnStart=checkOnStart;
  String addMissingOnStart=element.getAttribute("add-missing-on-start").intern();
  if (addMissingOnStart.isEmpty()) {
    addMissingOnStart="false";
  }
  this.addMissingOnStart=addMissingOnStart;
  String usePkConstraintNames=element.getAttribute("use-pk-constraint-names").intern();
  if (usePkConstraintNames.isEmpty()) {
    usePkConstraintNames="true";
  }
  this.usePkConstraintNames=usePkConstraintNames;
  String checkPksOnStart=element.getAttribute("check-pks-on-start").intern();
  if (checkPksOnStart.isEmpty()) {
    checkPksOnStart="true";
  }
  this.checkPksOnStart=checkPksOnStart;
  String constraintNameClipLength=element.getAttribute("constraint-name-clip-length").intern();
  if (constraintNameClipLength.isEmpty()) {
    constraintNameClipLength="30";
  }
  this.constraintNameClipLength=constraintNameClipLength;
  String useProxyCursor=element.getAttribute("use-proxy-cursor").intern();
  if (useProxyCursor.isEmpty()) {
    useProxyCursor="false";
  }
  this.useProxyCursor=useProxyCursor;
  String proxyCursorName=element.getAttribute("proxy-cursor-name").intern();
  if (proxyCursorName.isEmpty()) {
    proxyCursorName="p_cursor";
  }
  this.proxyCursorName=proxyCursorName;
  String resultFetchSize=element.getAttribute("result-fetch-size").intern();
  if (resultFetchSize.isEmpty()) {
    resultFetchSize="-1";
  }
  this.resultFetchSize=resultFetchSize;
  String useForeignKeys=element.getAttribute("use-foreign-keys").intern();
  if (useForeignKeys.isEmpty()) {
    useForeignKeys="true";
  }
  this.useForeignKeys=useForeignKeys;
  String useForeignKeyIndices=element.getAttribute("use-foreign-key-indices").intern();
  if (useForeignKeyIndices.isEmpty()) {
    useForeignKeyIndices="true";
  }
  this.useForeignKeyIndices=useForeignKeyIndices;
  String checkFksOnStart=element.getAttribute("check-fks-on-start").intern();
  if (checkFksOnStart.isEmpty()) {
    checkFksOnStart="false";
  }
  this.checkFksOnStart=checkFksOnStart;
  String checkFkIndicesOnStart=element.getAttribute("check-fk-indices-on-start").intern();
  if (checkFkIndicesOnStart.isEmpty()) {
    checkFkIndicesOnStart="false";
  }
  this.checkFkIndicesOnStart=checkFkIndicesOnStart;
  String fkStyle=element.getAttribute("fk-style").intern();
  if (fkStyle.isEmpty()) {
    fkStyle="name_constraint";
  }
  this.fkStyle=fkStyle;
  String useFkInitiallyDeferred=element.getAttribute("use-fk-initially-deferred").intern();
  if (useFkInitiallyDeferred.isEmpty()) {
    useFkInitiallyDeferred="false";
  }
  this.useFkInitiallyDeferred=useFkInitiallyDeferred;
  String useIndices=element.getAttribute("use-indices").intern();
  if (useIndices.isEmpty()) {
    useIndices="true";
  }
  this.useIndices=useIndices;
  String useIndicesUnique=element.getAttribute("use-indices-unique").intern();
  if (useIndicesUnique.isEmpty()) {
    useIndicesUnique="true";
  }
  this.useIndicesUnique=useIndicesUnique;
  String checkIndicesOnStart=element.getAttribute("check-indices-on-start").intern();
  if (checkIndicesOnStart.isEmpty()) {
    checkIndicesOnStart="false";
  }
  this.checkIndicesOnStart=checkIndicesOnStart;
  String joinStyle=element.getAttribute("join-style").intern();
  if (joinStyle.isEmpty()) {
    joinStyle="ansi";
  }
  this.joinStyle=joinStyle;
  String aliasViewColumns=element.getAttribute("alias-view-columns").intern();
  if (aliasViewColumns.isEmpty()) {
    aliasViewColumns="false";
  }
  this.aliasViewColumns=aliasViewColumns;
  String alwaysUseConstraintKeyword=element.getAttribute("always-use-constraint-keyword").intern();
  if (alwaysUseConstraintKeyword.isEmpty()) {
    alwaysUseConstraintKeyword="false";
  }
  this.alwaysUseConstraintKeyword=alwaysUseConstraintKeyword;
  String dropFkUseForeignKeyKeyword=element.getAttribute("drop-fk-use-foreign-key-keyword").intern();
  if (dropFkUseForeignKeyKeyword.isEmpty()) {
    dropFkUseForeignKeyKeyword="false";
  }
  this.dropFkUseForeignKeyKeyword=dropFkUseForeignKeyKeyword;
  String useBinaryTypeForBlob=element.getAttribute("use-binary-type-for-blob").intern();
  if (useBinaryTypeForBlob.isEmpty()) {
    useBinaryTypeForBlob="false";
  }
  this.useBinaryTypeForBlob=useBinaryTypeForBlob;
  String useOrderByNulls=element.getAttribute("use-order-by-nulls").intern();
  if (useOrderByNulls.isEmpty()) {
    useOrderByNulls="false";
  }
  this.useOrderByNulls=useOrderByNulls;
  String offsetStyle=element.getAttribute("offset-style").intern();
  if (offsetStyle.isEmpty()) {
    offsetStyle="none";
  }
  this.offsetStyle=offsetStyle;
  this.tableType=element.getAttribute("table-type").intern();
  this.characterSet=element.getAttribute("character-set").intern();
  this.collate=element.getAttribute("collate").intern();
  String maxWorkerPoolSize=element.getAttribute("max-worker-pool-size").intern();
  if (maxWorkerPoolSize.isEmpty()) {
    maxWorkerPoolSize="0";
  }
  this.maxWorkerPoolSize=maxWorkerPoolSize;
  List<? extends Element> sqlLoadPathElementList=UtilXml.childElementList(element,"sql-load-path");
  if (sqlLoadPathElementList.isEmpty()) {
    this.sqlLoadPathList=Collections.emptyList();
  }
 else {
    List<SqlLoadPath> sqlLoadPathList=new ArrayList<SqlLoadPath>(sqlLoadPathElementList.size());
    for (    Element sqlLoadPathElement : sqlLoadPathElementList) {
      sqlLoadPathList.add(new SqlLoadPath(sqlLoadPathElement));
    }
    this.sqlLoadPathList=Collections.unmodifiableList(sqlLoadPathList);
  }
  List<? extends Element> readDataElementList=UtilXml.childElementList(element,"read-data");
  if (readDataElementList.isEmpty()) {
    this.readDataList=Collections.emptyList();
  }
 else {
    List<ReadData> readDataList=new ArrayList<ReadData>(readDataElementList.size());
    for (    Element readDataElement : readDataElementList) {
      readDataList.add(new ReadData(readDataElement));
    }
    this.readDataList=Collections.unmodifiableList(readDataList);
  }
}
