{
  String lineNumberText=EntityConfigUtil.createConfigFileLineNumberText(element);
  String name=element.getAttribute("name").intern();
  if (name.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element name attribute is empty"+ lineNumberText);
  }
  this.name=name;
  String helperClass=element.getAttribute("helper-class").intern();
  if (helperClass.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element helper-class attribute is empty"+ lineNumberText);
  }
  this.helperClass=helperClass;
  String fieldTypeName=element.getAttribute("field-type-name").intern();
  if (fieldTypeName.isEmpty()) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element field-type-name attribute is empty"+ lineNumberText);
  }
  this.fieldTypeName=fieldTypeName;
  this.useSchemas=!"false".equals(element.getAttribute("use-schemas"));
  this.schemaName=element.getAttribute("schema-name").intern();
  this.checkOnStart=!"false".equals(element.getAttribute("check-on-start"));
  this.addMissingOnStart="true".equals(element.getAttribute("add-missing-on-start"));
  this.usePkConstraintNames=!"false".equals(element.getAttribute("use-pk-constraint-names"));
  this.checkPksOnStart=!"false".equals(element.getAttribute("check-pks-on-start"));
  String constraintNameClipLength=element.getAttribute("constraint-name-clip-length");
  if (constraintNameClipLength.isEmpty()) {
    this.constraintNameClipLength=30;
  }
 else {
    try {
      this.constraintNameClipLength=Integer.parseInt(constraintNameClipLength);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<" + element.getNodeName() + "> element constraint-name-clip-length attribute is invalid"+ lineNumberText);
    }
  }
  this.useProxyCursor="true".equalsIgnoreCase(element.getAttribute("use-proxy-cursor"));
  String proxyCursorName=element.getAttribute("proxy-cursor-name").intern();
  if (proxyCursorName.isEmpty()) {
    proxyCursorName="p_cursor";
  }
  this.proxyCursorName=proxyCursorName;
  String resultFetchSize=element.getAttribute("result-fetch-size");
  if (resultFetchSize.isEmpty()) {
    this.resultFetchSize=-1;
  }
 else {
    try {
      this.resultFetchSize=Integer.parseInt(resultFetchSize);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<" + element.getNodeName() + "> element result-fetch-size attribute is invalid"+ lineNumberText);
    }
  }
  this.useForeignKeys=!"false".equals(element.getAttribute("use-foreign-keys"));
  this.useForeignKeyIndices=!"false".equals(element.getAttribute("use-foreign-key-indices"));
  this.checkFksOnStart="true".equals(element.getAttribute("check-fks-on-start"));
  this.checkFkIndicesOnStart="true".equals(element.getAttribute("check-fk-indices-on-start"));
  String fkStyle=element.getAttribute("fk-style").intern();
  if (fkStyle.isEmpty()) {
    fkStyle="name_constraint";
  }
  this.fkStyle=fkStyle;
  this.useFkInitiallyDeferred="true".equals(element.getAttribute("use-fk-initially-deferred"));
  this.useIndices=!"false".equals(element.getAttribute("use-indices"));
  this.useIndicesUnique=!"false".equals(element.getAttribute("use-indices-unique"));
  this.checkIndicesOnStart="true".equals(element.getAttribute("check-indices-on-start"));
  String joinStyle=element.getAttribute("join-style").intern();
  if (joinStyle.isEmpty()) {
    joinStyle="ansi";
  }
  this.joinStyle=joinStyle;
  this.aliasViewColumns="true".equals(element.getAttribute("alias-view-columns"));
  this.alwaysUseConstraintKeyword="true".equals(element.getAttribute("always-use-constraint-keyword"));
  this.dropFkUseForeignKeyKeyword="true".equals(element.getAttribute("drop-fk-use-foreign-key-keyword"));
  this.useBinaryTypeForBlob="true".equals(element.getAttribute("use-binary-type-for-blob"));
  this.useOrderByNulls="true".equals(element.getAttribute("use-order-by-nulls"));
  String offsetStyle=element.getAttribute("offset-style").intern();
  if (offsetStyle.isEmpty()) {
    offsetStyle="none";
  }
  this.offsetStyle=offsetStyle;
  this.tableType=element.getAttribute("table-type").intern();
  this.characterSet=element.getAttribute("character-set").intern();
  this.collate=element.getAttribute("collate").intern();
  String maxWorkerPoolSize=element.getAttribute("max-worker-pool-size").intern();
  if (maxWorkerPoolSize.isEmpty()) {
    this.maxWorkerPoolSize=1;
  }
 else {
    try {
      int maxWorkerPoolSizeInt=Integer.parseInt(maxWorkerPoolSize);
      if (maxWorkerPoolSizeInt == 0) {
        maxWorkerPoolSizeInt=1;
      }
 else       if (maxWorkerPoolSizeInt < -2) {
        maxWorkerPoolSizeInt=-2;
      }
      this.maxWorkerPoolSize=maxWorkerPoolSizeInt;
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<" + element.getNodeName() + "> element max-worker-pool-size attribute is invalid"+ lineNumberText);
    }
  }
  List<? extends Element> sqlLoadPathElementList=UtilXml.childElementList(element,"sql-load-path");
  if (sqlLoadPathElementList.isEmpty()) {
    this.sqlLoadPathList=Collections.emptyList();
  }
 else {
    List<SqlLoadPath> sqlLoadPathList=new ArrayList<SqlLoadPath>(sqlLoadPathElementList.size());
    for (    Element sqlLoadPathElement : sqlLoadPathElementList) {
      sqlLoadPathList.add(new SqlLoadPath(sqlLoadPathElement));
    }
    this.sqlLoadPathList=Collections.unmodifiableList(sqlLoadPathList);
  }
  List<? extends Element> readDataElementList=UtilXml.childElementList(element,"read-data");
  if (readDataElementList.isEmpty()) {
    this.readDataList=Collections.emptyList();
  }
 else {
    List<ReadData> readDataList=new ArrayList<ReadData>(readDataElementList.size());
    for (    Element readDataElement : readDataElementList) {
      readDataList.add(new ReadData(readDataElement));
    }
    this.readDataList=Collections.unmodifiableList(readDataList);
  }
  int jdbcElementCount=0;
  Element inlineJdbcElement=UtilXml.firstChildElement(element,"inline-jdbc");
  if (inlineJdbcElement == null) {
    this.inlineJdbc=null;
  }
 else {
    this.inlineJdbc=new InlineJdbc(inlineJdbcElement);
    jdbcElementCount++;
  }
  Element jndiJdbcElement=UtilXml.firstChildElement(element,"jndi-jdbc");
  if (jndiJdbcElement == null) {
    this.jndiJdbc=null;
  }
 else {
    this.jndiJdbc=new JndiJdbc(jndiJdbcElement);
    jdbcElementCount++;
  }
  Element tyrexElement=UtilXml.firstChildElement(element,"tyrex-dataSource");
  if (tyrexElement == null) {
    this.tyrexDataSource=null;
  }
 else {
    this.tyrexDataSource=new TyrexDataSource(tyrexElement);
    jdbcElementCount++;
  }
  if (jdbcElementCount > 1) {
    throw new GenericEntityConfException("<" + element.getNodeName() + "> element is invalid: Only one of <inline-jdbc>, <jndi-jdbc>, <tyrex-dataSource> is allowed"+ lineNumberText);
  }
}
