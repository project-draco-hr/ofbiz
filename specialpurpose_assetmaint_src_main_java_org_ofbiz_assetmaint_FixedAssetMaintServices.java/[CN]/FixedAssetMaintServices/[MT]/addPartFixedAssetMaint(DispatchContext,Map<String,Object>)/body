{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Delegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String fixedAssetId=(String)context.get("fixedAssetId");
  String maintHistSeqId=(String)context.get("maintHistSeqId");
  String productId=(String)context.get("productId");
  String facilityId=(String)context.get("facilityId");
  Double quantity=(Double)context.get("quantity");
  double requestedQty=quantity.doubleValue();
  try {
    GenericValue product=ProductWorker.findProduct(delegator,productId);
    if (product == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AssetMaintInvalidPartProductIdError",UtilMisc.toMap("productId",productId),locale));
    }
    Map<String,? extends Object> findCurrInventoryParams=UtilMisc.toMap("productId",productId,"facilityId",facilityId);
    GenericValue userLogin=(GenericValue)context.get("userLogin");
    Map<String,Object> result=dispatcher.runSync("getInventoryAvailableByFacility",findCurrInventoryParams);
    if (ServiceUtil.isError(result)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AssetMaintProblemGettingInventoryLevel",locale) + productId,null,null,result);
    }
    Object atpObj=result.get("availableToPromiseTotal");
    double atp=0.0;
    if (atpObj != null) {
      atp=Double.parseDouble(atpObj.toString());
    }
    if (requestedQty > atp) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AssetMaintLowPartInventoryError",UtilMisc.toMap("productId",productId,"quantity",Double.toString(atp)),locale));
    }
    EntityConditionList<EntityExpr> ecl=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("facilityId",EntityOperator.EQUALS,facilityId),EntityCondition.makeCondition("availableToPromiseTotal",EntityOperator.GREATER_THAN,"0")),EntityOperator.AND);
    List<GenericValue> inventoryItems=EntityQuery.use(delegator).from("InventoryItem").where(ecl).queryList();
    Iterator<GenericValue> itr=inventoryItems.iterator();
    while (requestedQty > 0 && itr.hasNext()) {
      GenericValue inventoryItem=itr.next();
      String inventoryItemId=inventoryItem.getString("inventoryItemId");
      atp=inventoryItem.getDouble("availableToPromiseTotal").doubleValue();
      findCurrInventoryParams=UtilMisc.toMap("inventoryItemId",inventoryItemId);
      Double issueQuantity=null;
      if (requestedQty > atp) {
        issueQuantity=new Double(atp);
      }
 else {
        issueQuantity=new Double(requestedQty);
      }
      Map<String,Object> itemIssuanceCtx=new HashMap<String,Object>();
      itemIssuanceCtx.put("userLogin",userLogin);
      itemIssuanceCtx.put("inventoryItemId",inventoryItemId);
      itemIssuanceCtx.put("fixedAssetId",fixedAssetId);
      itemIssuanceCtx.put("maintHistSeqId",maintHistSeqId);
      itemIssuanceCtx.put("quantity",issueQuantity);
      result=dispatcher.runSync("issueInventoryItemToFixedAssetMaint",itemIssuanceCtx);
      if (ServiceUtil.isError(result)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AssetMaintProblemCallingService",locale),null,null,result);
      }
      requestedQty=requestedQty - issueQuantity.doubleValue();
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError("Problem in retriving data from database",module);
  }
catch (  GenericServiceException e) {
    Debug.logError("Problem in calling service issueInventoryItemToFixedAssetMaint",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AssetMaintProblemCallingService",locale));
  }
  return ServiceUtil.returnSuccess();
}
