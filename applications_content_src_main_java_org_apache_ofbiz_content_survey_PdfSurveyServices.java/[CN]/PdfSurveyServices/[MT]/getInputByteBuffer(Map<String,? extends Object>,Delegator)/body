{
  ByteBuffer inputByteBuffer=(ByteBuffer)context.get("inputByteBuffer");
  if (inputByteBuffer == null) {
    String pdfFileNameIn=(String)context.get("pdfFileNameIn");
    String contentId=(String)context.get("contentId");
    if (UtilValidate.isNotEmpty(pdfFileNameIn)) {
      try (FileInputStream fis=new FileInputStream(pdfFileNameIn)){
        int c;
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        while ((c=fis.read()) != -1)         baos.write(c);
        inputByteBuffer=ByteBuffer.wrap(baos.toByteArray());
      }
 catch (      FileNotFoundException e) {
        throw (new GeneralException(e.getMessage()));
      }
catch (      IOException e) {
        throw (new GeneralException(e.getMessage()));
      }
    }
 else     if (UtilValidate.isNotEmpty(contentId)) {
      try {
        Locale locale=(Locale)context.get("locale");
        String https=(String)context.get("https");
        String webSiteId=(String)context.get("webSiteId");
        String rootDir=(String)context.get("rootDir");
        GenericValue content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).cache().queryOne();
        String dataResourceId=content.getString("dataResourceId");
        inputByteBuffer=DataResourceWorker.getContentAsByteBuffer(delegator,dataResourceId,https,webSiteId,locale,rootDir);
      }
 catch (      GenericEntityException e) {
        throw (new GeneralException(e.getMessage()));
      }
catch (      IOException e) {
        throw (new GeneralException(e.getMessage()));
      }
    }
  }
  return inputByteBuffer;
}
