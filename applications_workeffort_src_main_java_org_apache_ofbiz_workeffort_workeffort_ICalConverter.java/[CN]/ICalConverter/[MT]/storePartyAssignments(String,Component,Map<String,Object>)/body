{
  ResponseProperties responseProps=null;
  Map<String,Object> serviceMap=new HashMap<String,Object>();
  List<Property> partyList=new LinkedList<Property>();
  partyList.addAll(UtilGenerics.checkList(component.getProperties("ATTENDEE"),Property.class));
  partyList.addAll(UtilGenerics.checkList(component.getProperties("CONTACT"),Property.class));
  partyList.addAll(UtilGenerics.checkList(component.getProperties("ORGANIZER"),Property.class));
  for (  Property property : partyList) {
    String partyId=fromXParameter(property.getParameters(),partyIdXParamName);
    if (partyId == null) {
      serviceMap.clear();
      String address=property.getValue();
      if (address.toUpperCase().startsWith("MAILTO:")) {
        address=address.substring(7);
      }
      serviceMap.put("address",address);
      Map<String,Object> result=invokeService("findPartyFromEmailAddress",serviceMap,context);
      partyId=(String)result.get("partyId");
      if (partyId == null) {
        continue;
      }
      replaceParameter(property.getParameters(),toXParameter(partyIdXParamName,partyId));
    }
    serviceMap.clear();
    serviceMap.put("workEffortId",workEffortId);
    serviceMap.put("partyId",partyId);
    serviceMap.put("roleTypeId",fromRoleMap.get(property.getName()));
    Delegator delegator=(Delegator)context.get("delegator");
    List<GenericValue> assignments=null;
    try {
      assignments=EntityQuery.use(delegator).from("WorkEffortPartyAssignment").where(serviceMap).filterByDate().queryList();
      if (assignments.size() == 0) {
        serviceMap.put("statusId","PRTYASGN_OFFERED");
        serviceMap.put("fromDate",new Timestamp(System.currentTimeMillis()));
        invokeService("assignPartyToWorkEffort",serviceMap,context);
      }
    }
 catch (    GenericEntityException e) {
      responseProps=ICalWorker.createPartialContentResponse(e.getMessage());
      break;
    }
  }
  return responseProps;
}
