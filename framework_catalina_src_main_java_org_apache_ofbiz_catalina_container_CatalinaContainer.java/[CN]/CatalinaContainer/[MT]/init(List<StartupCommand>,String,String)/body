{
  this.name=name;
  ContainerConfig.Configuration cc=ContainerConfig.getConfiguration(name,configFile);
  if (cc == null) {
    throw new ContainerException("No catalina-container configuration found in container config!");
  }
  boolean useNaming=ContainerConfig.getPropertyValue(cc,"use-naming",false);
  this.contextReloadable=ContainerConfig.getPropertyValue(cc,"apps-context-reloadable",false);
  this.crossContext=ContainerConfig.getPropertyValue(cc,"apps-cross-context",true);
  this.distribute=ContainerConfig.getPropertyValue(cc,"apps-distributable",true);
  this.catalinaRuntimeHome=ContainerConfig.getPropertyValue(cc,"catalina-runtime-home","runtime/catalina");
  System.setProperty(Globals.CATALINA_HOME_PROP,System.getProperty("ofbiz.home") + "/" + this.catalinaRuntimeHome);
  System.setProperty(Globals.CATALINA_BASE_PROP,System.getProperty(Globals.CATALINA_HOME_PROP));
  System.setProperty("catalina.useNaming",String.valueOf(useNaming));
  tomcat=new Tomcat();
  tomcat.setBaseDir(System.getProperty("ofbiz.home"));
  StandardServer server=(StandardServer)tomcat.getServer();
  if (useNaming) {
    tomcat.enableNaming();
  }
  try {
    server.setGlobalNamingContext(new InitialContext());
  }
 catch (  NamingException e) {
    throw new ContainerException(e);
  }
  List<ContainerConfig.Configuration.Property> engineProps=cc.getPropertiesWithValue("engine");
  if (UtilValidate.isEmpty(engineProps)) {
    throw new ContainerException("Cannot load CatalinaContainer; no engines defined.");
  }
  if (engineProps.size() > 1) {
    throw new ContainerException("Cannot load CatalinaContainer; more than one engine configuration found; only one is supported.");
  }
  createEngine(engineProps.get(0));
  List<ContainerConfig.Configuration.Property> connectorProps=cc.getPropertiesWithValue("connector");
  if (UtilValidate.isEmpty(connectorProps)) {
    throw new ContainerException("Cannot load CatalinaContainer; no connectors defined!");
  }
  for (  ContainerConfig.Configuration.Property connectorProp : connectorProps) {
    createConnector(connectorProp);
  }
}
