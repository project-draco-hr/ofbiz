{
  String realLinkType=WidgetWorker.determineAutoLinkType(linkType,target,targetType,request);
  String encodedDescription=encode(description,modelFormField,context);
  int paginatorNumber=WidgetWorker.getPaginatorNumber(context);
  ModelForm modelForm=modelFormField.getModelForm();
  String viewIndexField=modelForm.getMultiPaginateIndexField(context);
  String viewSizeField=modelForm.getMultiPaginateSizeField(context);
  int viewIndex=Paginator.getViewIndex(modelForm,context);
  int viewSize=Paginator.getViewSize(modelForm,context);
  if (viewIndexField.equals("viewIndex" + "_" + paginatorNumber)) {
    viewIndexField="VIEW_INDEX" + "_" + paginatorNumber;
  }
  if (viewSizeField.equals("viewSize" + "_" + paginatorNumber)) {
    viewSizeField="VIEW_SIZE" + "_" + paginatorNumber;
  }
  if ("hidden-form".equals(realLinkType)) {
    parameterMap.put(viewIndexField,Integer.toString(viewIndex));
    parameterMap.put(viewSizeField,Integer.toString(viewSize));
    if (modelFormField != null && "multi".equals(modelForm.getType())) {
      WidgetWorker.makeHiddenFormLinkAnchor(writer,linkStyle,encodedDescription,confirmation,modelFormField,request,response,context);
      Map<String,Object> wholeFormContext=UtilGenerics.checkMap(context.get("wholeFormContext"));
      Appendable postMultiFormWriter=wholeFormContext != null ? (Appendable)wholeFormContext.get("postMultiFormWriter") : null;
      if (postMultiFormWriter == null) {
        postMultiFormWriter=new StringWriter();
        wholeFormContext.put("postMultiFormWriter",postMultiFormWriter);
      }
      WidgetWorker.makeHiddenFormLinkForm(postMultiFormWriter,target,targetType,targetWindow,parameterMap,modelFormField,request,response,context);
    }
 else {
      WidgetWorker.makeHiddenFormLinkForm(writer,target,targetType,targetWindow,parameterMap,modelFormField,request,response,context);
      WidgetWorker.makeHiddenFormLinkAnchor(writer,linkStyle,encodedDescription,confirmation,modelFormField,request,response,context);
    }
  }
 else {
    if ("layered-modal".equals(realLinkType)) {
      String uniqueItemName="Modal_".concat(UUID.randomUUID().toString().replace("-","_"));
      String width=(String)this.request.getAttribute("width");
      if (UtilValidate.isEmpty(width)) {
        width=String.valueOf(UtilProperties.getPropertyValue("widget","widget.link.default.layered-modal.width","800"));
        this.request.setAttribute("width",width);
      }
      String height=(String)this.request.getAttribute("height");
      if (UtilValidate.isEmpty(height)) {
        height=String.valueOf(UtilProperties.getPropertyValue("widget","widget.link.default.layered-modal.height","600"));
        this.request.setAttribute("height",height);
      }
      this.request.setAttribute("uniqueItemName",uniqueItemName);
      makeHyperlinkString(writer,linkStyle,targetType,target,parameterMap,encodedDescription,confirmation,modelFormField,request,response,context,targetWindow);
      this.request.removeAttribute("uniqueItemName");
      this.request.removeAttribute("height");
      this.request.removeAttribute("width");
    }
 else {
      makeHyperlinkString(writer,linkStyle,targetType,target,parameterMap,encodedDescription,confirmation,modelFormField,request,response,context,targetWindow);
    }
  }
}
