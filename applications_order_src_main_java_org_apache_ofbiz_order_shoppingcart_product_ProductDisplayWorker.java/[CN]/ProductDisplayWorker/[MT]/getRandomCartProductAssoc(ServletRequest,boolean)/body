{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  ShoppingCart cart=(ShoppingCart)httpRequest.getSession().getAttribute("shoppingCart");
  if (cart == null || cart.size() <= 0)   return null;
  List<GenericValue> cartAssocs=null;
  try {
    Map<String,GenericValue> products=new HashMap<String,GenericValue>();
    Iterator<ShoppingCartItem> cartiter=cart.iterator();
    while (cartiter != null && cartiter.hasNext()) {
      ShoppingCartItem item=cartiter.next();
      List<GenericValue> complementProducts=EntityQuery.use(delegator).from("ProductAssoc").where("productId",item.getProductId(),"productAssocTypeId","PRODUCT_COMPLEMENT").cache(true).filterByDate().queryList();
      List<GenericValue> productsCategories=EntityQuery.use(delegator).from("ProductCategoryMember").where("productId",item.getProductId()).cache(true).filterByDate().queryList();
      if (productsCategories != null) {
        for (        GenericValue productsCategoryMember : productsCategories) {
          GenericValue productsCategory=productsCategoryMember.getRelatedOne("ProductCategory",true);
          if ("CROSS_SELL_CATEGORY".equals(productsCategory.getString("productCategoryTypeId"))) {
            List<GenericValue> curPcms=productsCategory.getRelated("ProductCategoryMember",null,null,true);
            if (curPcms != null) {
              for (              GenericValue curPcm : curPcms) {
                if (!products.containsKey(curPcm.getString("productId"))) {
                  GenericValue product=curPcm.getRelatedOne("Product",true);
                  products.put(product.getString("productId"),product);
                }
              }
            }
          }
        }
      }
      if (UtilValidate.isNotEmpty(complementProducts)) {
        for (        GenericValue productAssoc : complementProducts) {
          if (!products.containsKey(productAssoc.getString("productIdTo"))) {
            GenericValue product=productAssoc.getRelatedOne("AssocProduct",true);
            products.put(product.getString("productId"),product);
          }
        }
      }
    }
    cartiter=cart.iterator();
    while (cartiter != null && cartiter.hasNext()) {
      ShoppingCartItem item=cartiter.next();
      products.remove(item.getProductId());
    }
    if (checkViewAllow) {
      String currentCatalogId=CatalogWorker.getCurrentCatalogId(request);
      String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,currentCatalogId);
      if (viewProductCategoryId != null) {
        List<GenericValue> tempList=new LinkedList<GenericValue>();
        tempList.addAll(products.values());
        tempList=CategoryWorker.filterProductsInCategory(delegator,tempList,viewProductCategoryId,"productId");
        cartAssocs=new LinkedList<GenericValue>();
        cartAssocs.addAll(tempList);
      }
    }
    if (cartAssocs == null) {
      cartAssocs=new LinkedList<GenericValue>();
      cartAssocs.addAll(products.values());
    }
    while (cartAssocs.size() > 3) {
      int toRemove=(int)(Math.random() * cartAssocs.size());
      cartAssocs.remove(toRemove);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  if (UtilValidate.isNotEmpty(cartAssocs)) {
    return cartAssocs;
  }
 else {
    return null;
  }
}
