{
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=ctx.getDelegator();
  Map<String,Object> results=ServiceUtil.returnSuccess();
  Map<String,Object> props=buildOrbitalProperties(context,delegator);
  GenericValue orderPaymentPreference=(GenericValue)context.get("orderPaymentPreference");
  try {
    orderPaymentPreference.getRelatedOne("CreditCard");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentUnableToGetCCInfo",locale));
  }
  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(orderPaymentPreference);
  if (authTransaction == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentTransactionAuthorizationNotFoundCannotRelease",locale));
  }
  context.put("authTransaction",authTransaction);
  context.put("orderId",orderPaymentPreference.getString("orderId"));
  try {
    request=new Request(RequestIF.REVERSE_TRANSACTION);
  }
 catch (  InitializationException e) {
    Debug.logError("Error in request initialization",module);
    e.printStackTrace();
  }
  buildReleaseTransaction(context,delegator,props,request,results);
  Map<String,Object> validateResults=validateRequest(context,props,request);
  String respMsg=(String)validateResults.get(ModelService.RESPONSE_MESSAGE);
  if (ModelService.RESPOND_ERROR.equals(respMsg)) {
    results.put(ModelService.ERROR_MESSAGE,"Validation Failed - invalid values");
    return results;
  }
  initializeTransactionProcessor();
  Map<String,Object> processCardResponseContext=processCard(request);
  printTransResult((ResponseIF)processCardResponseContext.get("processCardResponse"));
  processReleaseTransResult(processCardResponseContext,results);
  return results;
}
