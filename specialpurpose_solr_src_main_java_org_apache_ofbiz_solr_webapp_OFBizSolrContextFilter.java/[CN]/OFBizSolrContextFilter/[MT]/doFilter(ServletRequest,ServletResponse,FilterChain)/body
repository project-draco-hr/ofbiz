{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  Locale locale=UtilHttp.getLocale(httpRequest);
  httpRequest.setAttribute("servletContext",request.getServletContext());
  String servletPath=httpRequest.getServletPath();
  if (UtilValidate.isNotEmpty(servletPath) && (servletPath.startsWith("/admin/") || servletPath.endsWith("/update") || servletPath.endsWith("/update/json")|| servletPath.endsWith("/update/csv")|| servletPath.endsWith("/update/extract")|| servletPath.endsWith("/replication")|| servletPath.endsWith("/file")|| servletPath.endsWith("/file/"))) {
    HttpSession session=httpRequest.getSession();
    GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
    Security security=(Security)request.getAttribute("security");
    if (security == null) {
      security=(Security)httpRequest.getServletContext().getAttribute("security");
      if (security != null) {
        request.setAttribute("security",security);
      }
    }
    if (security == null) {
      security=WebAppUtil.getSecurity(httpRequest.getServletContext());
      if (security != null) {
        request.setAttribute("security",security);
      }
    }
    if (servletPath.startsWith("/admin/") && (UtilValidate.isEmpty(userLogin) || !LoginWorker.hasBasePermission(userLogin,httpRequest))) {
      response.setContentType("application/json");
      MapToJSON mapToJson=new MapToJSON();
      JSON json;
      OutputStream os=null;
      try {
        json=mapToJson.convert(UtilMisc.toMap("ofbizLogin",(Object)"true"));
        os=response.getOutputStream();
        os.write(json.toString().getBytes());
        os.flush();
        String message="";
        if (UtilValidate.isEmpty(userLogin)) {
          message=UtilProperties.getMessage(resource,"SolrErrorManageLoginFirst",locale);
        }
 else {
          message=UtilProperties.getMessage(resource,"SolrErrorNoManagePermission",locale);
        }
        Debug.logInfo("[" + httpRequest.getRequestURI().substring(1) + "(Domain:"+ request.getScheme()+ "://"+ request.getServerName()+ ")] Request error: "+ message,module);
      }
 catch (      ConversionException e) {
        Debug.logError("Error while converting Solr ofbizLogin map to JSON.",module);
      }
 finally {
        if (os != null) {
          os.close();
        }
      }
      return;
    }
 else     if (servletPath.endsWith("/update") || servletPath.endsWith("/update/json") || servletPath.endsWith("/update/csv")|| servletPath.endsWith("/update/extract")) {
      if (UtilValidate.isEmpty(userLogin) || !LoginWorker.hasBasePermission(userLogin,httpRequest)) {
        sendJsonHeaderMessage(httpRequest,httpResponse,userLogin,"SolrErrorUpdateLoginFirst","SolrErrorNoUpdatePermission",locale);
        return;
      }
    }
 else     if (servletPath.endsWith("/replication")) {
      if (UtilValidate.isEmpty(userLogin) || !LoginWorker.hasBasePermission(userLogin,httpRequest)) {
        sendJsonHeaderMessage(httpRequest,httpResponse,userLogin,"SolrErrorReplicateLoginFirst","SolrErrorNoReplicatePermission",locale);
        return;
      }
    }
 else     if (servletPath.endsWith("/file") || servletPath.endsWith("/file/")) {
      if (UtilValidate.isEmpty(userLogin) || !LoginWorker.hasBasePermission(userLogin,httpRequest)) {
        sendJsonHeaderMessage(httpRequest,httpResponse,userLogin,"SolrErrorViewFileLoginFirst","SolrErrorNoViewFilePermission",locale);
        return;
      }
    }
  }
  String charset=request.getCharacterEncoding();
  String rname=null;
  if (httpRequest.getRequestURI() != null) {
    rname=httpRequest.getRequestURI().substring(1);
  }
  if (rname != null && (rname.endsWith(".css") || rname.endsWith(".js") || rname.endsWith(".ico")|| rname.endsWith(".html")|| rname.endsWith(".png")|| rname.endsWith(".jpg")|| rname.endsWith(".gif"))) {
    rname=null;
  }
  UtilTimer timer=null;
  if (Debug.timingOn() && rname != null) {
    timer=new UtilTimer();
    timer.setLog(true);
    timer.timerString("[" + rname + "(Domain:"+ request.getScheme()+ "://"+ request.getServerName()+ ")] Request Begun, encoding=["+ charset+ "]",module);
  }
  super.doFilter(request,response,chain);
  if (Debug.timingOn() && rname != null)   timer.timerString("[" + rname + "(Domain:"+ request.getScheme()+ "://"+ request.getServerName()+ ")] Request Done",module);
}
