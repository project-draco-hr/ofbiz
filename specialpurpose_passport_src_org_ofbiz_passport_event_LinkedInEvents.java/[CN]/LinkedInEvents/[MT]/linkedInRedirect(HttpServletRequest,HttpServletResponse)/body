{
  GenericValue oauth2LinkedIn=getOAuth2LinkedInConfig(request);
  if (UtilValidate.isEmpty(oauth2LinkedIn)) {
    return "error";
  }
  String clientId=oauth2LinkedIn.getString(PassportUtil.ApiKeyLabel);
  String returnURI=oauth2LinkedIn.getString(envPrefix + PassportUtil.ReturnUrlLabel);
  try {
    String state=System.currentTimeMillis() + String.valueOf((new Random(10)).nextLong());
    request.getSession().setAttribute(SESSION_LINKEDIN_STATE,state);
    String redirectUrl=TokenEndpoint + AuthorizeUri + "?client_id="+ clientId+ "&response_type=code"+ "&scope="+ DEFAULT_SCOPE+ "&redirect_uri="+ URLEncoder.encode(returnURI,"UTF-8")+ "&state="+ state;
    response.sendRedirect(redirectUrl);
  }
 catch (  NullPointerException e) {
    String errMsg=UtilProperties.getMessage(resource,"RedirectToLinkedInOAuth2NullException",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  IOException e) {
    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.toString());
    String errMsg=UtilProperties.getMessage(resource,"RedirectToLinkedInOAuth2Error",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}
