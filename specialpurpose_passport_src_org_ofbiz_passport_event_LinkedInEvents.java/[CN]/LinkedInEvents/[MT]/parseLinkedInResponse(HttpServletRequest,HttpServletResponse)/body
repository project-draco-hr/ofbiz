{
  String authorizationCode=request.getParameter(PassportUtil.COMMON_CODE);
  String state=request.getParameter(PassportUtil.COMMON_STATE);
  if (!state.equals(request.getSession().getAttribute(SESSION_LINKEDIN_STATE))) {
    String errMsg=UtilProperties.getMessage(resource,"LinkedInFailedToMatchState",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  if (UtilValidate.isEmpty(authorizationCode)) {
    String error=request.getParameter(PassportUtil.COMMON_ERROR);
    String errorDescpriton=request.getParameter(PassportUtil.COMMON_ERROR_DESCRIPTION);
    String errMsg=null;
    try {
      errMsg=UtilProperties.getMessage(resource,"FailedToGetLinkedInAuthorizationCode",UtilMisc.toMap(PassportUtil.COMMON_ERROR,error,PassportUtil.COMMON_ERROR_DESCRIPTION,URLDecoder.decode(errorDescpriton,"UTF-8")),UtilHttp.getLocale(request));
    }
 catch (    UnsupportedEncodingException e) {
      errMsg=UtilProperties.getMessage(resource,"GetLinkedInAuthorizationCodeError",UtilHttp.getLocale(request));
    }
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  GenericValue oauth2LinkedIn=getOAuth2LinkedInConfig(request);
  if (UtilValidate.isEmpty(oauth2LinkedIn)) {
    String errMsg=UtilProperties.getMessage(resource,"GetOAuth2LinkedInConfigError",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  String clientId=oauth2LinkedIn.getString(PassportUtil.ApiKeyLabel);
  String secret=oauth2LinkedIn.getString(PassportUtil.SecretKeyLabel);
  String returnURI=oauth2LinkedIn.getString(envPrefix + PassportUtil.ReturnUrlLabel);
  String accessToken=null;
  HttpClient jsonClient=new HttpClient();
  PostMethod postMethod=new PostMethod(TokenEndpoint + TokenServiceUri);
  try {
    HttpMethodParams params=new HttpMethodParams();
    String queryString="client_id=" + clientId + "&client_secret="+ secret+ "&grant_type=authorization_code"+ "&code="+ authorizationCode+ "&redirect_uri="+ URLEncoder.encode(returnURI,"UTF-8");
    postMethod.setQueryString(queryString);
    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
    postMethod.setParams(params);
    jsonClient.executeMethod(postMethod);
    if (postMethod.getStatusCode() == HttpStatus.SC_OK) {
      JSON jsonObject=JSON.from(postMethod.getResponseBodyAsString(1024));
      JSONToMap jsonMap=new JSONToMap();
      Map<String,Object> userMap=jsonMap.convert(jsonObject);
      accessToken=(String)userMap.get("access_token");
    }
 else {
      String errMsg=UtilProperties.getMessage(resource,"GetOAuth2LinkedInAccessTokenError",UtilMisc.toMap("error",postMethod.getResponseBodyAsString()),UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
 catch (  UnsupportedEncodingException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  HttpException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  IOException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  ConversionException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
 finally {
    postMethod.releaseConnection();
  }
  GetMethod getMethod=new GetMethod(TokenEndpoint + UserApiUri + "?oauth2_access_token="+ accessToken);
  Document userInfo=null;
  try {
    userInfo=LinkedInAuthenticator.getUserInfo(getMethod,UtilHttp.getLocale(request));
  }
 catch (  HttpException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  IOException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  AuthenticatorException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  SAXException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  ParserConfigurationException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
 finally {
    getMethod.releaseConnection();
  }
  return checkLoginLinkedInUser(request,userInfo,accessToken);
}
