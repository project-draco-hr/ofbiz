{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  String productStoreId=ProductStoreWorker.getProductStoreId(request);
  String linkedInUserId=LinkedInAuthenticator.getLinkedInUserId(userInfo);
  GenericValue linkedInUser=null;
  try {
    linkedInUser=delegator.findOne("LinkedInUser",UtilMisc.toMap("linkedInUserId",linkedInUserId),false);
  }
 catch (  GenericEntityException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  if (UtilValidate.isNotEmpty(linkedInUser)) {
    boolean dataChanged=false;
    if (!accessToken.equals(linkedInUser.getString("accessToken"))) {
      linkedInUser.set("accessToken",accessToken);
      dataChanged=true;
    }
    if (!envPrefix.equals(linkedInUser.getString("envPrefix"))) {
      linkedInUser.set("envPrefix",envPrefix);
      dataChanged=true;
    }
    if (!productStoreId.equals(linkedInUser.getString("productStoreId"))) {
      linkedInUser.set("productStoreId",productStoreId);
      dataChanged=true;
    }
    if (dataChanged) {
      try {
        linkedInUser.store();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e.getMessage(),module);
      }
    }
  }
 else {
    linkedInUser=delegator.makeValue("LinkedInUser",UtilMisc.toMap("accessToken",accessToken,"productStoreId",productStoreId,"envPrefix",envPrefix,"linkedInUserId",linkedInUserId));
    try {
      linkedInUser.create();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e.getMessage(),module);
    }
  }
  try {
    GenericValue userLogin=EntityUtil.getFirst(delegator.findByAnd("UserLogin",UtilMisc.toMap("externalAuthId",linkedInUserId),null,false));
    LinkedInAuthenticator authn=new LinkedInAuthenticator();
    authn.initialize(dispatcher);
    if (UtilValidate.isEmpty(userLogin)) {
      String userLoginId=authn.createUser(userInfo);
      userLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId",userLoginId),false);
    }
    String password=PassportUtil.randomString();
    boolean useEncryption="true".equals(UtilProperties.getPropertyValue("security.properties","password.encrypt"));
    userLogin.set("currentPassword",useEncryption ? HashCrypt.digestHash(LoginServices.getHashType(),null,password) : password);
    userLogin.store();
    request.setAttribute("USERNAME",userLogin.getString("userLoginId"));
    request.setAttribute("PASSWORD",password);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e.getMessage(),module);
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  AuthenticatorException e) {
    Debug.logError(e.getMessage(),module);
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
  return "success";
}
