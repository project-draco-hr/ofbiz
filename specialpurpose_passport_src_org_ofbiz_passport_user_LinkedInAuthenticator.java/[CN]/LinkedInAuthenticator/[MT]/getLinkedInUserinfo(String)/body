{
  Document user=null;
  GetMethod getMethod=null;
  try {
    GenericValue userLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId",userLoginId),false);
    String externalAuthId=userLogin.getString("externalAuthId");
    GenericValue linkedInUser=delegator.findOne("LinkedInUser",UtilMisc.toMap("linkedInUserId",externalAuthId),false);
    if (UtilValidate.isNotEmpty(linkedInUser)) {
      String accessToken=linkedInUser.getString("accessToken");
      if (UtilValidate.isNotEmpty(accessToken)) {
        getMethod=new GetMethod(LinkedInEvents.TokenEndpoint + LinkedInEvents.UserApiUri + "?oauth2_access_token="+ accessToken);
        user=getUserInfo(getMethod,Locale.getDefault());
      }
    }
  }
 catch (  GenericEntityException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  HttpException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  AuthenticatorException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  SAXException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
catch (  ParserConfigurationException e) {
    throw new AuthenticatorException(e.getMessage(),e);
  }
 finally {
    if (getMethod != null) {
      getMethod.releaseConnection();
    }
  }
  return user;
}
