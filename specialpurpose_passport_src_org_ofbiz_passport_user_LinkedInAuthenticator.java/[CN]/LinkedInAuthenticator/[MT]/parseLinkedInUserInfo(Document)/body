{
  Map<String,String> results=FastMap.newInstance();
  NodeList persons=userInfo.getElementsByTagName("person");
  if (UtilValidate.isEmpty(persons) || persons.getLength() <= 0) {
    return results;
  }
  Element person=(Element)persons.item(0);
  Element standardProfileRequest=UtilXml.firstChildElement(person,"site-standard-profile-request");
  Element url=UtilXml.firstChildElement(standardProfileRequest,"url");
  if (UtilValidate.isNotEmpty(url)) {
    String urlContent=url.getTextContent();
    if (UtilValidate.isNotEmpty(urlContent)) {
      String id=urlContent.substring(urlContent.indexOf("?id="));
      id=id.substring(0,id.indexOf("&"));
      Debug.logInfo("LinkedIn user id: " + id,module);
      results.put("userId",id);
    }
  }
  Element firstNameElement=UtilXml.firstChildElement(person,"first-name");
  if (UtilValidate.isNotEmpty(firstNameElement) && UtilValidate.isNotEmpty(firstNameElement.getTextContent())) {
    results.put("firstName",firstNameElement.getTextContent());
  }
  Element lastNameElement=UtilXml.firstChildElement(person,"last-name");
  if (UtilValidate.isNotEmpty(lastNameElement) && UtilValidate.isNotEmpty(lastNameElement.getTextContent())) {
    results.put("lastName",lastNameElement.getTextContent());
  }
  Element emailElement=UtilXml.firstChildElement(person,"email-address");
  if (UtilValidate.isNotEmpty(emailElement) && UtilValidate.isNotEmpty(emailElement.getTextContent())) {
    results.put("emailAddress",emailElement.getTextContent());
  }
  return results;
}
