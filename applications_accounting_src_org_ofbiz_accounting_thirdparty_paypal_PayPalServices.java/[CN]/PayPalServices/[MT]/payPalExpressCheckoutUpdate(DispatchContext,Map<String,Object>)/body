{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  HttpServletRequest request=(HttpServletRequest)context.get("request");
  HttpServletResponse response=(HttpServletResponse)context.get("response");
  String remoteHost=request.getRemoteHost();
  if (!remoteHost.endsWith(".paypal.com")) {
    try {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
      Debug.logError("An Express Checkout Update request was received from a host other than *.paypal.com, responded with 403 Forbidden",module);
    }
 catch (    IOException e) {
      Debug.logError(e,module);
    }
    return ServiceUtil.returnSuccess();
  }
  String requestMessage=null;
  try {
    BufferedReader reader=request.getReader();
    requestMessage=reader.readLine();
    reader.close();
  }
 catch (  IOException e) {
    Debug.logError(e,module);
  }
  if (requestMessage == null) {
    return ServiceUtil.returnSuccess();
  }
  NVPDecoder decoder=new NVPDecoder();
  try {
    decoder.decode(requestMessage);
  }
 catch (  PayPalException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnSuccess();
  }
  String token=decoder.get("TOKEN");
  WeakReference<ShoppingCart> weakCart=tokenCartMap.get(new TokenWrapper(token));
  ShoppingCart customerCart=weakCart.get();
  if (customerCart != null) {
    GenericValue shipAddress=delegator.makeValue("PostalAddress");
    String contactMechId=delegator.getNextSeqId("ContactMech");
    shipAddress.put("contactMechId",contactMechId);
    shipAddress.put("address1",decoder.get("SHIPTOSTREET"));
    shipAddress.put("address2",decoder.get("SHIPTOSTREET2"));
    shipAddress.put("city",decoder.get("SHIPTOCITY"));
    shipAddress.put("stateProvinceGeoId",decoder.get("SHIPTOSTATE"));
    shipAddress.put("postalCode",decoder.get("SHIPTOZIP"));
    String countryGeoCode=decoder.get("SHIPTOCOUNTRY");
    try {
      String countryGeoId=PayPalServices.getCountryGeoIdFromGeoCode(countryGeoCode,delegator);
      if (countryGeoId == null) {
        return ServiceUtil.returnSuccess();
      }
      shipAddress.put("countryGeoId",countryGeoId);
      shipAddress.create();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    ShoppingCart cart=new ShoppingCart(customerCart);
    CheckOutHelper coh=new CheckOutHelper(dispatcher,delegator,cart);
    coh.setCheckOutShippingAddress(contactMechId);
    ShippingEstimateWrapper estWrapper=new ShippingEstimateWrapper(dispatcher,cart,0);
    int line=0;
    NVPEncoder encoder=new NVPEncoder();
    encoder.add("METHOD","CallbackResponse");
    for (    GenericValue shipMethod : estWrapper.getShippingMethods()) {
      BigDecimal estimate=estWrapper.getShippingEstimate(shipMethod);
      if (estimate == null || estimate.compareTo(BigDecimal.ZERO) < 0) {
        continue;
      }
      cart.setShipmentMethodTypeId(shipMethod.getString("shipmentMethodTypeId"));
      cart.setCarrierPartyId(shipMethod.getString("partyId"));
      try {
        coh.calcAndAddTax();
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        continue;
      }
      String estimateName=shipMethod.getString("shipmentMethodTypeId") + "@" + shipMethod.getString("partyId");
      encoder.add("L_SHIPPINGOPTIONLABEL" + line,estimateName);
      String estimateLabel=shipMethod.getString("partyId") + " " + shipMethod.getString("description");
      encoder.add("L_SHIPPINGOPTIONNAME" + line,estimateLabel);
      encoder.add("L_SHIPPINGOPTIONAMOUNT" + line,estimate.setScale(2,BigDecimal.ROUND_HALF_UP).toPlainString());
      encoder.add("L_SHIPPINGOPTIONISDEFAULT" + line,line == 0 ? "true" : "false");
      encoder.add("L_TAXAMT" + line,cart.getTotalSalesTax().setScale(2,BigDecimal.ROUND_HALF_UP).toPlainString());
      line++;
    }
    String responseMsg=null;
    try {
      responseMsg=encoder.encode();
    }
 catch (    PayPalException e) {
      Debug.logError(e,module);
    }
    if (responseMsg != null) {
      try {
        response.setContentLength(responseMsg.getBytes("UTF-8").length);
      }
 catch (      UnsupportedEncodingException e) {
        Debug.logError(e,module);
      }
      try {
        Writer writer=response.getWriter();
        writer.write(responseMsg);
        writer.close();
      }
 catch (      IOException e) {
        Debug.logError(e,module);
      }
    }
    try {
      shipAddress.remove();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
  }
  return ServiceUtil.returnSuccess();
}
