{
  GenericValue payPalConfig=getPaymentMethodGatewayPayPal(dctx,context,null);
  if (payPalConfig == null) {
    return ServiceUtil.returnError("Couldn't retrieve a PaymentGatewayConfigPayPal record for Express Checkout, cannot continue.");
  }
  GenericValue orderPaymentPreference=(GenericValue)context.get("orderPaymentPreference");
  GenericValue captureTrans=PaymentGatewayServices.getCaptureTransaction(orderPaymentPreference);
  BigDecimal refundAmount=(BigDecimal)context.get("refundAmount");
  NVPEncoder encoder=new NVPEncoder();
  encoder.add("METHOD","RefundTransaction");
  encoder.add("TRANSACTIONID",captureTrans.getString("referenceNum"));
  encoder.add("REFUNDTYPE","Partial");
  encoder.add("CURRENCYCODE",captureTrans.getString("currencyUomId"));
  encoder.add("AMT",refundAmount.setScale(2,BigDecimal.ROUND_HALF_UP).toPlainString());
  encoder.add("NOTE","Order #" + orderPaymentPreference.getString("orderId"));
  NVPDecoder decoder=null;
  try {
    decoder=sendNVPRequest(payPalConfig,encoder);
  }
 catch (  PayPalException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (decoder == null) {
    return ServiceUtil.returnError("An unknown error occurred while contacting PayPal");
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  Map<String,String> errors=getErrorMessageMap(decoder);
  if (UtilValidate.isNotEmpty(errors)) {
    result.put("refundResult",false);
    result.put("refundRefNum",captureTrans.getString("referenceNum"));
    result.put("refundAmount",BigDecimal.ZERO);
    if (errors.size() == 1) {
      result.put("responseMessage",errors.get(0));
    }
 else {
      result.put("responseMessage","Multiple errors occurred, please refer to the gateway response messages");
      result.put("internalRespMsgs",errors);
    }
  }
 else {
    result.put("refundResult",true);
    result.put("refundAmount",new BigDecimal(decoder.get("GROSSREFUNDAMT")));
    result.put("refundRefNum",decoder.get("REFUNDTRANSACTIONID"));
  }
  return result;
}
