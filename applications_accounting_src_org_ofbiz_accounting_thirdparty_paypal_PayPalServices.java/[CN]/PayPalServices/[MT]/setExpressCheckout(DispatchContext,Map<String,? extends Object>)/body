{
  ShoppingCart cart=(ShoppingCart)context.get("cart");
  Locale locale=cart.getLocale();
  if (cart == null || cart.items().size() <= 0) {
    return ServiceUtil.returnError(UtilProperties.getMessage("AccountingErrorUiLabels","AccountingPayPalShoppingCartIsEmpty",locale));
  }
  GenericValue payPalConfig=getPaymentMethodGatewayPayPal(dctx,context,null);
  if (payPalConfig == null) {
    return ServiceUtil.returnError("Couldn't retrieve a PaymentGatewayConfigPayPal record for Express Checkout, cannot continue.");
  }
  NVPEncoder encoder=new NVPEncoder();
  encoder.add("METHOD","SetExpressCheckout");
  String token=(String)cart.getAttribute("payPalCheckoutToken");
  if (UtilValidate.isNotEmpty(token)) {
    encoder.add("TOKEN",token);
  }
  encoder.add("RETURNURL",payPalConfig.getString("returnUrl"));
  encoder.add("CANCELURL",payPalConfig.getString("cancelReturnUrl"));
  if (!cart.shippingApplies()) {
    encoder.add("NOSHIPPING","1");
  }
 else {
    encoder.add("CALLBACK",payPalConfig.getString("shippingCallbackUrl"));
    encoder.add("CALLBACKTIMEOUT","6");
    String reqConfirmShipping="Y".equals(payPalConfig.getString("requireConfirmedShipping")) ? "1" : "0";
    encoder.add("REQCONFIRMSHIPPING",reqConfirmShipping);
    encoder.add("L_SHIPPINGOPTIONISDEFAULT0","true");
    encoder.add("L_SHIPPINGOPTIONNAME0","Calculated Offline");
    encoder.add("L_SHIPPINGOPTIONAMOUNT0","0.00");
  }
  encoder.add("ALLOWNOTE","1");
  encoder.add("INSURANCEOPTIONOFFERED","false");
  if (UtilValidate.isNotEmpty(payPalConfig.getString("imageUrl")))   ;
  encoder.add("PAYMENTACTION","Order");
  try {
    addCartDetails(encoder,cart);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    ServiceUtil.returnError("An error occurred while retreiving cart details");
  }
  NVPDecoder decoder;
  try {
    decoder=sendNVPRequest(payPalConfig,encoder);
  }
 catch (  PayPalException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Map<String,String> errorMessages=getErrorMessageMap(decoder);
  if (UtilValidate.isNotEmpty(errorMessages)) {
    if (errorMessages.containsKey("10411")) {
      cart.setAttribute("payPalCheckoutToken",null);
      return PayPalServices.setExpressCheckout(dctx,context);
    }
    return ServiceUtil.returnError(UtilMisc.toList(errorMessages.values()));
  }
  token=decoder.get("TOKEN");
  cart.setAttribute("payPalCheckoutToken",token);
  TokenWrapper tokenWrapper=new TokenWrapper(token);
  cart.setAttribute("payPalCheckoutTokenObj",tokenWrapper);
  PayPalServices.tokenCartMap.put(tokenWrapper,new WeakReference<ShoppingCart>(cart));
  return ServiceUtil.returnSuccess();
}
