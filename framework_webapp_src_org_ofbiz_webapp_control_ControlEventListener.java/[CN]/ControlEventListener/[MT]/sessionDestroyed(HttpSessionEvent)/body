{
  HttpSession session=event.getSession();
  boolean beganTransaction=false;
  try {
    beganTransaction=TransactionUtil.begin();
    GenericValue visit=(GenericValue)session.getAttribute("visit");
    if (visit != null) {
      Delegator delegator=visit.getDelegator();
      visit=delegator.findOne("Visit",UtilMisc.toMap("visitId",visit.get("visitId")),false);
      if (visit != null) {
        visit.set("thruDate",new Timestamp(session.getLastAccessedTime()));
        visit.store();
      }
    }
 else {
      Debug.logWarning("Could not find visit value object in session [" + session.getId() + "] that is being destroyed",module);
    }
    String userLoginSessionString=getUserLoginSession(session);
    GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
    if (userLogin != null && userLoginSessionString != null) {
      GenericValue userLoginSession=null;
      userLoginSession=userLogin.getRelatedOne("UserLoginSession",false);
      if (userLoginSession == null) {
        userLoginSession=userLogin.getDelegator().makeValue("UserLoginSession",UtilMisc.toMap("userLoginId",userLogin.getString("userLoginId")));
        userLogin.getDelegator().create(userLoginSession);
      }
      userLoginSession.set("savedDate",UtilDateTime.nowTimestamp());
      userLoginSession.set("sessionData",userLoginSessionString);
      userLoginSession.store();
    }
    countDestroySession();
    Debug.logInfo("Destroying session: " + session.getId(),module);
    this.logStats(session,visit);
  }
 catch (  GenericEntityException e) {
    try {
      TransactionUtil.rollback(beganTransaction,"Error saving information about closed HttpSession",e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"Could not rollback transaction: " + e2.toString(),module);
    }
    Debug.logError(e,"Error in session destuction information persistence",module);
  }
 finally {
    try {
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Could not commit transaction for update visit for session destuction",module);
    }
  }
}
