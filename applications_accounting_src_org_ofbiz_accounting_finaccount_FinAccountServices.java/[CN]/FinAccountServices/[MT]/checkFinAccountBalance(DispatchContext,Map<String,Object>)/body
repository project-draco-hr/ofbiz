{
  Delegator delegator=dctx.getDelegator();
  String finAccountId=(String)context.get("finAccountId");
  String finAccountCode=(String)context.get("finAccountCode");
  Locale locale=(Locale)context.get("locale");
  GenericValue finAccount;
  if (finAccountId == null) {
    try {
      finAccount=FinAccountHelper.getFinAccountFromCode(finAccountCode,delegator);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
 else {
    try {
      finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  if (finAccount == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountNotFound",UtilMisc.toMap("finAccountId",finAccountId),locale));
  }
  BigDecimal availableBalance=finAccount.getBigDecimal("availableBalance");
  BigDecimal balance=finAccount.getBigDecimal("actualBalance");
  if (availableBalance == null) {
    availableBalance=FinAccountHelper.ZERO;
  }
  if (balance == null) {
    balance=FinAccountHelper.ZERO;
  }
  String statusId=finAccount.getString("statusId");
  Debug.log("FinAccount Balance [" + balance + "] Available ["+ availableBalance+ "] - Status: "+ statusId,module);
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("availableBalance",availableBalance);
  result.put("balance",balance);
  result.put("statusId",statusId);
  return result;
}
