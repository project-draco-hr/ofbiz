{
  GenericDelegator delegator=dctx.getDelegator();
  String finAccountId=(String)context.get("finAccountId");
  String finAccountCode=(String)context.get("finAccountCode");
  GenericValue finAccount;
  if (finAccountId == null) {
    try {
      finAccount=FinAccountHelper.getFinAccountFromCode(finAccountCode,delegator);
      finAccountId=finAccount.getString("finAccountId");
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
 else {
    try {
      finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  if (finAccount == null) {
    return ServiceUtil.returnError("Unable to locate financial account");
  }
  BigDecimal availableBalance=finAccount.getBigDecimal("availableBalance");
  BigDecimal balance=finAccount.getBigDecimal("actualBalance");
  Debug.log("FinAccount Balance [" + balance + "] Available ["+ availableBalance+ "]",module);
  Boolean isFrozen=Boolean.valueOf("Y".equals(finAccount.getString("isFrozen")));
  Map result=ServiceUtil.returnSuccess();
  result.put("availableBalance",new Double(availableBalance.doubleValue()));
  result.put("balance",new Double(balance.doubleValue()));
  result.put("isFrozen",isFrozen);
  return result;
}
