{
  GenericDelegator delegator=dctx.getDelegator();
  String finAccountAuthId=(String)context.get("finAccountAuthId");
  String finAccountId=(String)context.get("finAccountId");
  if (finAccountId == null && finAccountAuthId != null) {
    GenericValue auth;
    try {
      auth=delegator.findByPrimaryKey("FinAccountAuth",UtilMisc.toMap("finAccountAuthId",finAccountAuthId));
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (auth != null) {
      finAccountId=auth.getString("finAccountId");
    }
  }
  if (finAccountId == null) {
    return ServiceUtil.returnError("Financial account ID is required for this service!");
  }
  GenericValue finAccount;
  try {
    finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
  }
 catch (  GenericEntityException ex) {
    return ServiceUtil.returnError(ex.getMessage());
  }
  if (finAccount != null) {
    String frozen=finAccount.getString("isFrozen");
    if (frozen == null)     frozen="N";
    BigDecimal availableBalance=finAccount.getBigDecimal("availableBalance");
    if ("N".equals(frozen) && FinAccountHelper.ZERO.compareTo(availableBalance) < 1) {
      finAccount.set("isFrozen","Y");
      Debug.logInfo("Financial account [" + finAccountId + "] has passed its threshold ["+ availableBalance+ "] (Frozen)",module);
    }
 else     if ("Y".equals(frozen) && FinAccountHelper.ZERO.compareTo(availableBalance) > 0) {
      finAccount.set("isFrozen","N");
      Debug.logInfo("Financial account [" + finAccountId + "] has been made current ["+ availableBalance+ "] (Un-Frozen)",module);
    }
    try {
      finAccount.store();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  return ServiceUtil.returnSuccess();
}
