{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productStoreId=(String)context.get("productStoreId");
  String finAccountTypeId=(String)context.get("finAccountTypeId");
  Locale locale=(Locale)context.get("locale");
  try {
    GenericValue productStoreFinAccountSetting=delegator.findByPrimaryKeyCache("ProductStoreFinActSetting",UtilMisc.toMap("productStoreId",productStoreId,"finAccountTypeId",finAccountTypeId));
    if (productStoreFinAccountSetting == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountSetting",UtilMisc.toMap("productStoreId",productStoreId,"finAccountTypeId",finAccountTypeId),locale));
    }
    Long accountCodeLength=productStoreFinAccountSetting.getLong("accountCodeLength");
    Long accountValidDays=productStoreFinAccountSetting.getLong("accountValidDays");
    Long pinCodeLength=productStoreFinAccountSetting.getLong("pinCodeLength");
    String requirePinCode=productStoreFinAccountSetting.getString("requirePinCode");
    ModelService createService=dctx.getModelService("createFinAccount");
    Map<String,Object> inContext=createService.makeValid(context,ModelService.IN_PARAM);
    Timestamp now=UtilDateTime.nowTimestamp();
    String finAccountCode=FinAccountHelper.getNewFinAccountCode(accountCodeLength.intValue(),delegator);
    inContext.put("finAccountCode",finAccountCode);
    if ("Y".equalsIgnoreCase(requirePinCode)) {
      String pinCode=FinAccountHelper.getNewFinAccountCode(pinCodeLength.intValue(),delegator);
      inContext.put("finAccountPin",pinCode);
    }
    if (UtilValidate.isNotEmpty(accountValidDays)) {
      inContext.put("thruDate",UtilDateTime.getDayEnd(now,accountValidDays));
    }
    inContext.put("fromDate",now);
    inContext.put("userLogin",userLogin);
    String payToPartyId=ProductStoreWorker.getProductStorePayToPartyId(productStoreId,delegator);
    inContext.put("organizationPartyId",payToPartyId);
    Map<String,Object> createResult=dispatcher.runSync("createFinAccount",inContext);
    if (ServiceUtil.isError(createResult)) {
      return createResult;
    }
    Map<String,Object> result=ServiceUtil.returnSuccess();
    result.put("finAccountId",createResult.get("finAccountId"));
    result.put("finAccountCode",finAccountCode);
    return result;
  }
 catch (  GenericEntityException ex) {
    return ServiceUtil.returnError(ex.getMessage());
  }
catch (  GenericServiceException ex) {
    return ServiceUtil.returnError(ex.getMessage());
  }
}
