{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String finAccountTypeId=(String)context.get("finAccountTypeId");
  String accountName=(String)context.get("accountName");
  String finAccountId=(String)context.get("finAccountId");
  if (finAccountTypeId == null) {
    finAccountTypeId="SVCCRED_ACCOUNT";
  }
  if (accountName == null) {
    if ("SVCCRED_ACCOUNT".equals(finAccountTypeId)) {
      accountName="Customer Service Credit Account";
    }
 else {
      accountName="Financial Account";
    }
  }
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  try {
    String partyId=(String)context.get("partyId");
    Map<String,Object> lookupMap=UtilMisc.toMap("finAccountTypeId",finAccountTypeId,"ownerPartyId",partyId);
    String productStoreId=(String)context.get("productStoreId");
    if (UtilValidate.isNotEmpty(productStoreId)) {
      String payToPartyId=ProductStoreWorker.getProductStorePayToPartyId(productStoreId,delegator);
      if (UtilValidate.isNotEmpty(payToPartyId)) {
        lookupMap.put("organizationPartyId",payToPartyId);
      }
    }
    String currencyUomId=(String)context.get("currencyUomId");
    if (UtilValidate.isNotEmpty(currencyUomId)) {
      lookupMap.put("currencyUomId",currencyUomId);
    }
    GenericValue creditAccount;
    if (finAccountId != null) {
      creditAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
    }
 else {
      List<GenericValue> creditAccounts=delegator.findByAnd("FinAccount",lookupMap,UtilMisc.toList("-fromDate"));
      creditAccount=EntityUtil.getFirst(EntityUtil.filterByDate(creditAccounts));
    }
    if (creditAccount == null) {
      String createAccountServiceName="createFinAccount";
      if (UtilValidate.isNotEmpty(productStoreId)) {
        createAccountServiceName="createFinAccountForStore";
      }
      ModelService createAccountService=dctx.getModelService(createAccountServiceName);
      Map<String,Object> createAccountContext=createAccountService.makeValid(context,ModelService.IN_PARAM);
      createAccountContext.put("finAccountTypeId",finAccountTypeId);
      createAccountContext.put("finAccountName",accountName);
      createAccountContext.put("ownerPartyId",partyId);
      createAccountContext.put("userLogin",userLogin);
      Map<String,Object> createAccountResult=dispatcher.runSync(createAccountServiceName,createAccountContext);
      if (ServiceUtil.isError(createAccountResult) || ServiceUtil.isFailure(createAccountResult)) {
        return createAccountResult;
      }
      if (createAccountResult != null) {
        String creditAccountId=(String)createAccountResult.get("finAccountId");
        if (UtilValidate.isNotEmpty(creditAccountId)) {
          creditAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",creditAccountId));
          Map<String,Object> roleCtx=FastMap.newInstance();
          roleCtx.put("partyId",partyId);
          roleCtx.put("roleTypeId","OWNER");
          roleCtx.put("finAccountId",creditAccountId);
          roleCtx.put("userLogin",userLogin);
          roleCtx.put("fromDate",UtilDateTime.nowTimestamp());
          Map<String,Object> roleResp;
          try {
            roleResp=dispatcher.runSync("createFinAccountRole",roleCtx);
          }
 catch (          GenericServiceException e) {
            return ServiceUtil.returnError(e.getMessage());
          }
          if (ServiceUtil.isError(roleResp)) {
            return roleResp;
          }
          finAccountId=creditAccountId;
        }
      }
      if (creditAccount == null) {
        return ServiceUtil.returnError("Could not find or create a service credit account");
      }
    }
    Map<String,Object> transactionMap=FastMap.newInstance();
    transactionMap.put("finAccountTransTypeId","ADJUSTMENT");
    transactionMap.put("finAccountId",creditAccount.getString("finAccountId"));
    transactionMap.put("partyId",partyId);
    transactionMap.put("amount",context.get("amount"));
    transactionMap.put("reasonEnumId",context.get("reasonEnumId"));
    transactionMap.put("comments",context.get("comments"));
    transactionMap.put("userLogin",userLogin);
    Map<String,Object> creditTransResult=dispatcher.runSync("createFinAccountTrans",transactionMap);
    if (ServiceUtil.isError(creditTransResult) || ServiceUtil.isFailure(creditTransResult)) {
      return creditTransResult;
    }
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError(gee.getMessage());
  }
catch (  GenericServiceException gse) {
    return ServiceUtil.returnError(gse.getMessage());
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("finAccountId",finAccountId);
  return result;
}
