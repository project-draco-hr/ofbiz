{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String finAccountId=(String)context.get("finAccountId");
  Map<String,Object> result=null;
  GenericValue finAccount;
  try {
    finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",finAccountId));
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  if (finAccount != null) {
    if (!"Y".equals(finAccount.getString("isRefundable"))) {
      return ServiceUtil.returnError("Account is not refunable");
    }
    BigDecimal availableBalance=finAccount.getBigDecimal("availableBalance");
    BigDecimal actualBalance=finAccount.getBigDecimal("actualBalance");
    if (actualBalance.compareTo(availableBalance) != 0) {
      return ServiceUtil.returnError("Available balance does not match the actual balance; pending authorizations; cannot refund FinAccount at this time.");
    }
    if (actualBalance.compareTo(BigDecimal.ZERO) > 0) {
      BigDecimal remainingBalance=new BigDecimal(actualBalance.toString());
      BigDecimal refundAmount=BigDecimal.ZERO;
      List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"DEPOSIT"),EntityCondition.makeCondition("finAccountId",EntityOperator.EQUALS,finAccountId));
      EntityCondition condition=EntityCondition.makeCondition(exprs,EntityOperator.AND);
      EntityListIterator eli=null;
      try {
        eli=delegator.find("FinAccountTrans",condition,null,null,UtilMisc.toList("-transactionDate"),null);
        GenericValue trans;
        while (remainingBalance.compareTo(FinAccountHelper.ZERO) < 0 && (trans=eli.next()) != null) {
          String orderId=trans.getString("orderId");
          String orderItemSeqId=trans.getString("orderItemSeqId");
          if (orderId != null && orderItemSeqId != null) {
            GenericValue orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
            GenericValue productStore=delegator.getRelatedOne("ProductStore",orderHeader);
            GenericValue orderItem=delegator.findByPrimaryKey("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
            if (!"ITEM_CANCELLED".equals(orderItem.getString("statusId"))) {
              List<GenericValue> returnItems=orderItem.getRelated("ReturnItem");
              if (UtilValidate.isEmpty(returnItems)) {
                BigDecimal txAmt=trans.getBigDecimal("amount");
                BigDecimal refAmt=txAmt;
                if (remainingBalance.compareTo(txAmt) == -1) {
                  refAmt=remainingBalance;
                }
                remainingBalance=remainingBalance.subtract(refAmt);
                refundAmount=refundAmount.add(refAmt);
                Map<String,Object> rhCtx=UtilMisc.toMap("returnHeaderTypeId","CUSTOMER_RETURN","fromPartyId",finAccount.getString("ownerPartyId"),"toPartyId",productStore.getString("payToPartyId"),"userLogin",userLogin);
                Map<String,Object> rhResp=dispatcher.runSync("createReturnHeader",rhCtx);
                if (ServiceUtil.isError(rhResp)) {
                  throw new GeneralException(ServiceUtil.getErrorMessage(rhResp));
                }
                String returnId=(String)rhResp.get("returnId");
                Map<String,Object> returnItemCtx=FastMap.newInstance();
                returnItemCtx.put("returnId",returnId);
                returnItemCtx.put("orderId",orderId);
                returnItemCtx.put("description",orderItem.getString("itemDescription"));
                returnItemCtx.put("orderItemSeqId",orderItemSeqId);
                returnItemCtx.put("returnQuantity",BigDecimal.ONE);
                returnItemCtx.put("receivedQuantity",BigDecimal.ONE);
                returnItemCtx.put("returnPrice",refAmt);
                returnItemCtx.put("returnReasonId","RTN_NOT_WANT");
                returnItemCtx.put("returnTypeId","RTN_REFUND");
                returnItemCtx.put("returnItemTypeId","RET_NPROD_ITEM");
                returnItemCtx.put("userLogin",userLogin);
                Map<String,Object> retItResp=dispatcher.runSync("createReturnItem",returnItemCtx);
                if (ServiceUtil.isError(retItResp)) {
                  throw new GeneralException(ServiceUtil.getErrorMessage(retItResp));
                }
                String returnItemSeqId=(String)retItResp.get("returnItemSeqId");
                Map<String,Object> appRet=UtilMisc.toMap("statusId","RETURN_ACCEPTED","returnId",returnId,"userLogin",userLogin);
                Map<String,Object> appResp=dispatcher.runSync("updateReturnHeader",appRet);
                if (ServiceUtil.isError(appResp)) {
                  throw new GeneralException(ServiceUtil.getErrorMessage(appResp));
                }
                Map<String,Object> recRet=UtilMisc.toMap("statusId","RETURN_RECEIVED","returnId",returnId,"userLogin",userLogin);
                Map<String,Object> recResp=dispatcher.runSync("updateReturnHeader",recRet);
                if (ServiceUtil.isError(recResp)) {
                  throw new GeneralException(ServiceUtil.getErrorMessage(recResp));
                }
                GenericValue returnItem=delegator.findByPrimaryKey("ReturnItem",UtilMisc.toMap("returnId",returnId,"returnItemSeqId",returnItemSeqId));
                GenericValue response=returnItem.getRelatedOne("ReturnItemResponse");
                if (response == null) {
                  throw new GeneralException("No return response found for: " + returnItem.getPrimaryKey());
                }
                String paymentId=response.getString("paymentId");
                Map<String,Object> txCtx=FastMap.newInstance();
                txCtx.put("finAccountTransTypeId","ADJUSTMENT");
                txCtx.put("finAccountId",finAccountId);
                txCtx.put("orderId",orderId);
                txCtx.put("orderItemSeqId",orderItemSeqId);
                txCtx.put("paymentId",paymentId);
                txCtx.put("amount",refAmt.negate());
                txCtx.put("partyId",finAccount.getString("ownerPartyId"));
                txCtx.put("userLogin",userLogin);
                Map<String,Object> txResp=dispatcher.runSync("createFinAccountTrans",txCtx);
                if (ServiceUtil.isError(txResp)) {
                  throw new GeneralException(ServiceUtil.getErrorMessage(txResp));
                }
              }
            }
          }
        }
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
 finally {
        if (eli != null) {
          try {
            eli.close();
          }
 catch (          GenericEntityException e) {
            Debug.logWarning(e,module);
          }
        }
      }
      if (remainingBalance.compareTo(FinAccountHelper.ZERO) == 1) {
        result=ServiceUtil.returnSuccess("FinAccount partially refunded; not enough replenish deposits to refund!");
      }
    }
  }
  if (result == null) {
    result=ServiceUtil.returnSuccess();
  }
  return result;
}
