{
  FileInputStream configFileIS=null;
  String result="success";
  m_seoPatterns=new HashMap<String,Pattern>();
  m_seoReplacements=new HashMap<String,String>();
  m_forwardReplacements=new HashMap<String,String>();
  m_forwardPatterns=new HashMap<String,Pattern>();
  m_forwardResponseCodes=new HashMap<String,Integer>();
  m_userExceptionPatterns=FastList.newInstance();
  m_specialProductIds=FastMap.newInstance();
  m_nameFilters=FastMap.newInstance();
  try {
    Document configDoc=UtilXml.readXmlDocument(UtilURL.fromResource(URL_REGEXP_CONFIG_FILENAME),false);
    Element rootElement=configDoc.getDocumentElement();
    String regexIfMatch=UtilXml.childElementValue(rootElement,ELEMENT_REGEXPIFMATCH,DEFAULT_REGEXP);
    try {
      m_regexpIfMatch=m_perlCompiler.compile(regexIfMatch,Perl5Compiler.DEFAULT_MASK);
    }
 catch (    MalformedPatternException e1) {
    }
    m_debug=Boolean.parseBoolean(UtilXml.childElementValue(rootElement,ELEMENT_DEBUG,"false"));
    try {
      Element categoryUrlElement=UtilXml.firstChildElement(rootElement,ELEMENT_CATEGORY_URL);
      if (categoryUrlElement != null) {
        String enableCategoryUrlValue=UtilXml.childElementValue(categoryUrlElement,ELEMENT_VALUE,DEFAULT_CATEGORY_URL_VALUE);
        if (DEFAULT_CATEGORY_URL_VALUE.equalsIgnoreCase(enableCategoryUrlValue)) {
          m_categoryUrlEnabled=true;
        }
 else {
          m_categoryUrlEnabled=false;
        }
        if (m_categoryUrlEnabled) {
          String allowedContextValue=UtilXml.childElementValue(categoryUrlElement,ELEMENT_ALLOWED_CONTEXT_PATHS,null);
          m_allowedContextPaths=FastSet.newInstance();
          if (UtilValidate.isNotEmpty(allowedContextValue)) {
            List<String> allowedContextPaths=StringUtil.split(allowedContextValue,ALLOWED_CONTEXT_PATHS_SEPERATOR);
            for (            String path : allowedContextPaths) {
              if (UtilValidate.isNotEmpty(path)) {
                path=path.trim();
                if (!m_allowedContextPaths.contains(path)) {
                  m_allowedContextPaths.add(path);
                }
              }
            }
          }
          String categoryNameValue=UtilXml.childElementValue(categoryUrlElement,ELEMENT_CATEGORY_NAME,DEFAULT_CATEGORY_NAME_VALUE);
          if (DEFAULT_CATEGORY_NAME_VALUE.equalsIgnoreCase(categoryNameValue)) {
            m_categoryNameEnabled=false;
          }
 else {
            m_categoryNameEnabled=true;
          }
          m_categoryUrlSuffix=UtilXml.childElementValue(categoryUrlElement,ELEMENT_CATEGORY_URL_SUFFIX,null);
          if (UtilValidate.isNotEmpty(m_categoryUrlSuffix)) {
            m_categoryUrlSuffix=m_categoryUrlSuffix.trim();
            if (m_categoryUrlSuffix.contains("/")) {
              m_categoryUrlSuffix=null;
            }
          }
        }
      }
    }
 catch (    NullPointerException e) {
    }
    try {
      Element jSessionId=UtilXml.firstChildElement(rootElement,ELEMENT_JSESSIONID);
      if (jSessionId != null) {
        Element anonymous=UtilXml.firstChildElement(jSessionId,ELEMENT_ANONYMOUS);
        if (anonymous != null) {
          String anonymousValue=UtilXml.childElementValue(anonymous,ELEMENT_VALUE,DEFAULT_ANONYMOUS_VALUE);
          if (DEFAULT_ANONYMOUS_VALUE.equalsIgnoreCase(anonymousValue)) {
            m_jSessionIdAnonEnabled=false;
          }
 else {
            m_jSessionIdAnonEnabled=true;
          }
        }
        Element user=UtilXml.firstChildElement(jSessionId,ELEMENT_USER);
        if (user != null) {
          String userValue=UtilXml.childElementValue(user,ELEMENT_VALUE,DEFAULT_USER_VALUE);
          if (DEFAULT_USER_VALUE.equalsIgnoreCase(userValue)) {
            m_jSessionIdUserEnabled=false;
          }
 else {
            m_jSessionIdUserEnabled=true;
          }
          Element exceptions=UtilXml.firstChildElement(user,ELEMENT_EXCEPTIONS);
          if (exceptions != null) {
            List<? extends Element> exceptionUrlPatterns=UtilXml.childElementList(exceptions,ELEMENT_URLPATTERN);
            for (int i=0; i < exceptionUrlPatterns.size(); i++) {
              Element element=(Element)exceptionUrlPatterns.get(i);
              String urlpattern=element.getTextContent();
              if (UtilValidate.isNotEmpty(urlpattern)) {
                try {
                  Pattern pattern=m_perlCompiler.compile(urlpattern,Perl5Compiler.DEFAULT_MASK);
                  m_userExceptionPatterns.add(pattern);
                }
 catch (                MalformedPatternException e) {
                }
              }
            }
          }
        }
      }
    }
 catch (    NullPointerException e) {
    }
    try {
      NodeList nameFilters=rootElement.getElementsByTagName(ELEMENT_FILTER);
      for (int i=0; i < nameFilters.getLength(); i++) {
        Element element=(Element)nameFilters.item(i);
        String charaterPattern=UtilXml.childElementValue(element,ELEMENT_CHARACTER_PATTERN,null);
        String replacement=UtilXml.childElementValue(element,ELEMENT_REPLACEMENT,null);
        if (UtilValidate.isNotEmpty(charaterPattern) && UtilValidate.isNotEmpty(replacement)) {
          try {
            m_perlCompiler.compile(charaterPattern,Perl5Compiler.DEFAULT_MASK);
            m_nameFilters.put(charaterPattern,replacement);
          }
 catch (          MalformedPatternException e) {
          }
        }
      }
    }
 catch (    NullPointerException e) {
    }
    try {
      NodeList seos=rootElement.getElementsByTagName(ELEMENT_SEO);
      for (int i=0; i < seos.getLength(); i++) {
        Element element=(Element)seos.item(i);
        String urlpattern=UtilXml.childElementValue(element,ELEMENT_URLPATTERN,null);
        String replacement=UtilXml.childElementValue(element,ELEMENT_REPLACEMENT,null);
        if (UtilValidate.isNotEmpty(urlpattern) && UtilValidate.isNotEmpty(replacement)) {
          try {
            Pattern pattern=m_perlCompiler.compile(urlpattern,Perl5Compiler.DEFAULT_MASK);
            m_seoReplacements.put(urlpattern,replacement);
            m_seoPatterns.put(urlpattern,pattern);
          }
 catch (          MalformedPatternException e) {
          }
        }
      }
      NodeList forwards=rootElement.getElementsByTagName(ELEMENT_FORWARD);
      for (int i=0; i < forwards.getLength(); i++) {
        Element element=(Element)forwards.item(i);
        String urlpattern=UtilXml.childElementValue(element,ELEMENT_URLPATTERN,null);
        String replacement=UtilXml.childElementValue(element,ELEMENT_REPLACEMENT,null);
        String responseCode=UtilXml.childElementValue(element,ELEMENT_RESPONSECODE,String.valueOf(DEFAULT_RESPONSECODE));
        if (UtilValidate.isNotEmpty(urlpattern) && UtilValidate.isNotEmpty(replacement)) {
          try {
            Pattern pattern=m_perlCompiler.compile(urlpattern,Perl5Compiler.DEFAULT_MASK);
            m_forwardReplacements.put(urlpattern,replacement);
            m_forwardPatterns.put(urlpattern,pattern);
            if (UtilValidate.isNotEmpty(responseCode)) {
              Integer responseCodeInt=DEFAULT_RESPONSECODE;
              try {
                responseCodeInt=Integer.valueOf(responseCode);
              }
 catch (              NumberFormatException nfe) {
              }
              m_forwardResponseCodes.put(urlpattern,responseCodeInt);
            }
          }
 catch (          MalformedPatternException e) {
          }
        }
      }
    }
 catch (    NullPointerException e) {
    }
  }
 catch (  SAXException e) {
    result="error";
    Debug.logError(e,module);
  }
catch (  ParserConfigurationException e) {
    result="error";
    Debug.logError(e,module);
  }
catch (  IOException e) {
    result="error";
    Debug.logError(e,module);
  }
 finally {
    if (configFileIS != null) {
      try {
        configFileIS.close();
      }
 catch (      IOException e) {
        result="error";
        Debug.logError(e,module);
      }
    }
  }
  if (m_seoReplacements.keySet().isEmpty()) {
    m_useUrlRegexp=false;
  }
 else {
    m_useUrlRegexp=true;
  }
  if (result.equals("success")) {
    m_isInitialed=true;
  }
}
