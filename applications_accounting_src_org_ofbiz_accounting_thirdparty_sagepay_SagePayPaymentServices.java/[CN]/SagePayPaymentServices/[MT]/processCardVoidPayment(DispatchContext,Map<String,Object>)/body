{
  Map<String,Object> result=ServiceUtil.returnSuccess();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  String paymentGatewayConfigId=(String)context.get("paymentGatewayConfigId");
  GenericValue captureTransaction=(GenericValue)context.get("captureTransaction");
  BigDecimal amount=(BigDecimal)context.get("refundAmount");
  String orderId=(String)captureTransaction.get("altReference");
  try {
    Map<String,Object> paymentResult=dispatcher.runSync("SagePayPaymentVoid",UtilMisc.toMap("paymentGatewayConfigId",paymentGatewayConfigId,"vendorTxCode",captureTransaction.get("altReference"),"vpsTxId",captureTransaction.get("referenceNum"),"securityKey",captureTransaction.get("gatewayFlag"),"txAuthNo",captureTransaction.get("gatewayCode")));
    Debug.logInfo("SagePay - SagePayPaymentVoid result : " + paymentResult,module);
    String status=(String)paymentResult.get("status");
    String statusDetail=(String)paymentResult.get("statusDetail");
    if (status != null && "OK".equals(status)) {
      Debug.logInfo("SagePay Payment Voided for Order : " + orderId,module);
      result=SagePayUtil.buildCardVoidPaymentResponse(Boolean.TRUE,amount,"SUCCESS",orderId,statusDetail);
    }
 else     if (status != null && "MALFORMED".equals(status)) {
      Debug.logInfo("SagePay - Malformed void request for order : " + orderId,module);
      result=SagePayUtil.buildCardVoidPaymentResponse(Boolean.FALSE,BigDecimal.ZERO,"MALFORMED",orderId,statusDetail);
    }
 else     if (status != null && "INVALID".equals(status)) {
      Debug.logInfo("SagePay - Invalid void request for order : " + orderId,module);
      result=SagePayUtil.buildCardVoidPaymentResponse(Boolean.FALSE,BigDecimal.ZERO,"INVALID",orderId,statusDetail);
    }
 else     if (status != null && "ERROR".equals(status)) {
      Debug.logInfo("SagePay - Error in void request for order : " + orderId,module);
      result=SagePayUtil.buildCardVoidPaymentResponse(Boolean.FALSE,BigDecimal.ZERO,"ERROR",orderId,statusDetail);
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Error in calling SagePayPaymentVoid",module);
    result=ServiceUtil.returnError("Exception in calling SagePayPaymentVoid : " + e.getMessage());
  }
  return result;
}
