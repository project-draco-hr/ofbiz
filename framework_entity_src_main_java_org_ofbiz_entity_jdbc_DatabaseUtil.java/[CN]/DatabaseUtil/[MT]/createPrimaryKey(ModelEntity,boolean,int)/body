{
  if (entity == null) {
    return "ModelEntity was null and is required to create the primary key for a table";
  }
  if (entity instanceof ModelViewEntity) {
    return "Ignoring view entity [" + entity.getEntityName() + "]";
  }
  String message;
  if (entity.getPksSize() > 0) {
    message="Creating primary key for entity [" + entity.getEntityName() + "]";
    Connection connection=null;
    Statement stmt=null;
    try {
      connection=getConnection();
    }
 catch (    SQLException e) {
      return "Unable to establish a connection with the database for helperName [" + this.helperInfo.getHelperFullName() + "]... Error was: "+ e.toString();
    }
catch (    GenericEntityException e) {
      return "Unable to establish a connection with the database for helperName [" + this.helperInfo.getHelperFullName() + "]... Error was: "+ e.toString();
    }
    StringBuilder sqlBuf=new StringBuilder("ALTER TABLE ");
    sqlBuf.append(entity.getTableName(datasourceInfo));
    sqlBuf.append(" ADD ");
    String pkName=makePkConstraintName(entity,constraintNameClipLength);
    if (usePkConstraintNames) {
      sqlBuf.append("CONSTRAINT ");
      sqlBuf.append(pkName);
    }
    sqlBuf.append(" PRIMARY KEY (");
    entity.colNameString(entity.getPkFieldsUnmodifiable(),sqlBuf,"");
    sqlBuf.append(")");
    if (Debug.verboseOn())     Debug.logVerbose("[createPrimaryKey] sql=" + sqlBuf.toString(),module);
    try {
      stmt=connection.createStatement();
      stmt.executeUpdate(sqlBuf.toString());
    }
 catch (    SQLException e) {
      return "SQL Exception while executing the following:\n" + sqlBuf.toString() + "\nError was: "+ e.toString();
    }
 finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
 catch (      SQLException e) {
        Debug.logError(e,module);
      }
      try {
        if (connection != null) {
          connection.close();
        }
      }
 catch (      SQLException e) {
        Debug.logError(e,module);
      }
    }
  }
 else {
    message="No primary-key defined for table [" + entity.getEntityName() + "]";
  }
  Debug.logImportant(message,module);
  return message;
}
