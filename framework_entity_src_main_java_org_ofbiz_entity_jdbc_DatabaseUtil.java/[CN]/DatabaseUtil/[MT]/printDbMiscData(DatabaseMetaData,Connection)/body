{
  if (dbData == null) {
    return;
  }
  if (Debug.infoOn()) {
    try {
      Debug.logInfo("Database Product Name is " + dbData.getDatabaseProductName(),module);
      Debug.logInfo("Database Product Version is " + dbData.getDatabaseProductVersion(),module);
    }
 catch (    SQLException e) {
      Debug.logWarning("Unable to get Database name & version information",module);
    }
    try {
      Debug.logInfo("Database Driver Name is " + dbData.getDriverName(),module);
      Debug.logInfo("Database Driver Version is " + dbData.getDriverVersion(),module);
      Debug.logInfo("Database Driver JDBC Version is " + dbData.getJDBCMajorVersion() + "."+ dbData.getJDBCMinorVersion(),module);
    }
 catch (    SQLException e) {
      Debug.logWarning("Unable to get Driver name & version information",module);
    }
catch (    AbstractMethodError ame) {
      Debug.logWarning("Unable to get Driver JDBC Version",module);
    }
    Debug.logInfo("Database Setting/Support Information (those with a * should be true):",module);
    for (    Detection detection : detections) {
      String requiredFlag=detection.required ? "*" : "";
      try {
        Object result=detection.method.invoke(dbData,detection.params);
        Debug.logInfo(String.format(goodFormatStr,detection.name,result,requiredFlag),module);
      }
 catch (      Exception e) {
        e.printStackTrace();
        Debug.logVerbose(e,module);
        Debug.logWarning(String.format(badFormatStr,detection.name,requiredFlag),module);
      }
    }
    try {
      Debug.logInfo("- default fetchsize        [" + con.createStatement().getFetchSize() + "]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- default fetchsize        [ DETECTION FAILED ]",module);
    }
    try {
      Debug.logInfo("- named parameters         [ SKIPPED ]",module);
    }
 catch (    Exception e) {
      Debug.logVerbose(e,module);
      Debug.logWarning("- named parameters JDBC-3  [ DETECTION FAILED ]",module);
    }
  }
}
