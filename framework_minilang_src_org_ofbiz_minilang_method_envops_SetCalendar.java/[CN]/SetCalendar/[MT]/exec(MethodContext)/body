{
  Object newValue=null;
  if (!this.fromField.isEmpty()) {
    newValue=this.fromField.get(methodContext);
    if (Debug.verboseOn())     Debug.logVerbose("In screen getting value for field from [" + this.fromField.toString() + "]: "+ newValue,module);
  }
 else   if (!this.valueExdr.isEmpty()) {
    newValue=methodContext.expandString(this.valueExdr);
  }
  if (ObjectType.isEmpty(newValue) && !this.defaultExdr.isEmpty()) {
    newValue=methodContext.expandString(this.defaultExdr);
  }
  if (!setIfNull && newValue == null) {
    if (Debug.verboseOn())     Debug.logVerbose("Field value not found (null) with name [" + fromField + "] and value ["+ valueExdr+ "], and there was not default value, not setting field",module);
    return true;
  }
  if (!setIfEmpty && ObjectType.isEmpty(newValue)) {
    if (Debug.verboseOn())     Debug.logVerbose("Field value not found (empty) with name [" + fromField + "] and value ["+ valueExdr+ "], and there was not default value, not setting field",module);
    return true;
  }
  Locale locale=null;
  TimeZone timeZone=null;
  Timestamp fromStamp=null;
  try {
    if (!this.localeExdr.isEmpty()) {
      locale=(Locale)ObjectType.simpleTypeConvert(methodContext.expandString(this.localeExdr),"Locale",null,null);
    }
    if (!this.timeZoneExdr.isEmpty()) {
      timeZone=(TimeZone)ObjectType.simpleTypeConvert(methodContext.expandString(this.timeZoneExdr),"TimeZone",null,null);
    }
    if (locale == null) {
      locale=methodContext.getLocale();
    }
    if (timeZone == null) {
      timeZone=methodContext.getTimeZone();
    }
    fromStamp=(Timestamp)ObjectType.simpleTypeConvert(newValue,"Timestamp",UtilDateTime.DATE_TIME_FORMAT,timeZone,locale,true);
  }
 catch (  Exception e) {
    if (Debug.verboseOn())     Debug.logVerbose("Error converting attributes to objects: " + e.getMessage(),module);
    return true;
  }
  int years=Integer.parseInt("0" + methodContext.expandString(this.yearsExdr));
  int months=Integer.parseInt("0" + methodContext.expandString(this.monthsExdr));
  int days=Integer.parseInt("0" + methodContext.expandString(this.daysExdr));
  int hours=Integer.parseInt("0" + methodContext.expandString(this.hoursExdr));
  int minutes=Integer.parseInt("0" + methodContext.expandString(this.minutesExdr));
  int seconds=Integer.parseInt("0" + methodContext.expandString(this.secondsExdr));
  int millis=Integer.parseInt("0" + methodContext.expandString(this.millisExdr));
  Calendar cal=UtilDateTime.toCalendar(fromStamp,timeZone,locale);
  cal.add(Calendar.MILLISECOND,millis);
  cal.add(Calendar.SECOND,seconds);
  cal.add(Calendar.MINUTE,minutes);
  cal.add(Calendar.HOUR,hours);
  cal.add(Calendar.DAY_OF_MONTH,days);
  cal.add(Calendar.MONTH,months);
  cal.add(Calendar.YEAR,years);
  Timestamp toStamp=new Timestamp(cal.getTimeInMillis());
  if (!periodAlignStart.isEmpty()) {
    String period=methodContext.expandString(periodAlignStart);
    if ("day".equals(period)) {
      toStamp=UtilDateTime.getDayStart(toStamp,0,timeZone,locale);
    }
 else     if ("week".equals(period)) {
      toStamp=UtilDateTime.getWeekStart(toStamp,0,timeZone,locale);
    }
 else     if ("month".equals(period)) {
      toStamp=UtilDateTime.getMonthStart(toStamp,0,timeZone,locale);
    }
 else     if ("year".equals(period)) {
      toStamp=UtilDateTime.getYearStart(toStamp,0,timeZone,locale);
    }
  }
 else   if (!periodAlignEnd.isEmpty()) {
    String period=methodContext.expandString(periodAlignEnd);
    if ("day".equals(period)) {
      toStamp=UtilDateTime.getDayEnd(toStamp,timeZone,locale);
    }
 else     if ("week".equals(period)) {
      toStamp=UtilDateTime.getWeekEnd(toStamp,timeZone,locale);
    }
 else     if ("month".equals(period)) {
      toStamp=UtilDateTime.getMonthEnd(toStamp,timeZone,locale);
    }
 else     if ("year".equals(period)) {
      toStamp=UtilDateTime.getYearEnd(toStamp,timeZone,locale);
    }
  }
  if (Debug.verboseOn())   Debug.logVerbose("In screen setting calendar [" + this.field.toString(),module);
  this.field.put(methodContext,toStamp);
  return true;
}
