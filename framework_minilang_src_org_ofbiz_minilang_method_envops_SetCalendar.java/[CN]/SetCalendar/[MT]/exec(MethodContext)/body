{
  Object newValue=null;
  if (this.scriptlet != null) {
    try {
      newValue=this.scriptlet.executeScript(methodContext.getEnvMap());
    }
 catch (    Exception exc) {
      Debug.logWarning(exc,"Error evaluating scriptlet [" + this.scriptlet + "]: "+ exc,module);
    }
  }
 else   if (!this.fromFma.isEmpty()) {
    newValue=this.fromFma.get(methodContext.getEnvMap());
  }
 else   if (!this.valueFse.isEmpty()) {
    newValue=this.valueFse.expand(methodContext.getEnvMap());
  }
  if (ObjectType.isEmpty(newValue) && !this.defaultFse.isEmpty()) {
    newValue=this.defaultFse.expand(methodContext.getEnvMap());
  }
  if (!setIfNull && newValue == null) {
    return true;
  }
  Locale locale=null;
  TimeZone timeZone=null;
  Timestamp fromStamp=null;
  int years=0;
  int months=0;
  int days=0;
  int hours=0;
  int minutes=0;
  int seconds=0;
  int millis=0;
  try {
    if (!this.localeFse.isEmpty()) {
      locale=(Locale)ObjectType.simpleTypeConvert(this.localeFse.expand(methodContext.getEnvMap()),"Locale",null,null);
    }
    if (locale == null) {
      locale=methodContext.getLocale();
    }
    if (locale == null) {
      locale=Locale.getDefault();
    }
    if (!this.timeZoneFse.isEmpty()) {
      timeZone=(TimeZone)ObjectType.simpleTypeConvert(this.timeZoneFse.expand(methodContext.getEnvMap()),"TimeZone",null,null);
    }
    if (timeZone == null) {
      timeZone=methodContext.getTimeZone();
    }
    if (timeZone == null) {
      timeZone=TimeZone.getDefault();
    }
    fromStamp=(Timestamp)MiniLangUtil.convertType(newValue,java.sql.Timestamp.class,locale,timeZone,UtilDateTime.DATE_TIME_FORMAT);
    if (!this.yearsFse.isEmpty()) {
      years=Integer.parseInt(this.yearsFse.expandString(methodContext.getEnvMap()));
    }
    if (!this.monthsFse.isEmpty()) {
      months=Integer.parseInt(this.monthsFse.expandString(methodContext.getEnvMap()));
    }
    if (!this.daysFse.isEmpty()) {
      days=Integer.parseInt(this.daysFse.expandString(methodContext.getEnvMap()));
    }
    if (!this.hoursFse.isEmpty()) {
      hours=Integer.parseInt(this.hoursFse.expandString(methodContext.getEnvMap()));
    }
    if (!this.minutesFse.isEmpty()) {
      minutes=Integer.parseInt(this.minutesFse.expandString(methodContext.getEnvMap()));
    }
    if (!this.secondsFse.isEmpty()) {
      seconds=Integer.parseInt(this.secondsFse.expandString(methodContext.getEnvMap()));
    }
    if (!this.millisFse.isEmpty()) {
      millis=Integer.parseInt(this.millisFse.expandString(methodContext.getEnvMap()));
    }
  }
 catch (  Exception e) {
    throw new MiniLangRuntimeException("Exception thrown while parsing attributes: " + e.getMessage(),this);
  }
  Calendar cal=UtilDateTime.toCalendar(fromStamp,timeZone,locale);
  cal.add(Calendar.MILLISECOND,millis);
  cal.add(Calendar.SECOND,seconds);
  cal.add(Calendar.MINUTE,minutes);
  cal.add(Calendar.HOUR,hours);
  cal.add(Calendar.DAY_OF_MONTH,days);
  cal.add(Calendar.MONTH,months);
  cal.add(Calendar.YEAR,years);
  Timestamp toStamp=new Timestamp(cal.getTimeInMillis());
  if (!periodAlignStart.isEmpty()) {
    String period=periodAlignStart.expandString(methodContext.getEnvMap());
    if ("day".equals(period)) {
      toStamp=UtilDateTime.getDayStart(toStamp,0,timeZone,locale);
    }
 else     if ("week".equals(period)) {
      toStamp=UtilDateTime.getWeekStart(toStamp,0,timeZone,locale);
    }
 else     if ("month".equals(period)) {
      toStamp=UtilDateTime.getMonthStart(toStamp,0,timeZone,locale);
    }
 else     if ("year".equals(period)) {
      toStamp=UtilDateTime.getYearStart(toStamp,0,timeZone,locale);
    }
 else {
      throw new MiniLangRuntimeException("Invalid period-align-start attribute value: " + period,this);
    }
  }
 else   if (!periodAlignEnd.isEmpty()) {
    String period=periodAlignEnd.expandString(methodContext.getEnvMap());
    if ("day".equals(period)) {
      toStamp=UtilDateTime.getDayEnd(toStamp,timeZone,locale);
    }
 else     if ("week".equals(period)) {
      toStamp=UtilDateTime.getWeekEnd(toStamp,timeZone,locale);
    }
 else     if ("month".equals(period)) {
      toStamp=UtilDateTime.getMonthEnd(toStamp,timeZone,locale);
    }
 else     if ("year".equals(period)) {
      toStamp=UtilDateTime.getYearEnd(toStamp,timeZone,locale);
    }
 else {
      throw new MiniLangRuntimeException("Invalid period-align-end attribute value: " + period,this);
    }
  }
  this.fieldFma.put(methodContext.getEnvMap(),toStamp);
  return true;
}
