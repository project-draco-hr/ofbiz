{
  super(element,simpleMethod);
  this.field=new ContextAccessor(element.getAttribute("field"));
  this.fromField=new ContextAccessor(element.getAttribute("from-field"));
  this.valueExdr=new FlexibleStringExpander(element.getAttribute("value"));
  this.defaultExdr=new FlexibleStringExpander(element.getAttribute("default-value"));
  this.yearsExdr=new FlexibleStringExpander(element.getAttribute("years"));
  this.monthsExdr=new FlexibleStringExpander(element.getAttribute("months"));
  this.daysExdr=new FlexibleStringExpander(element.getAttribute("days"));
  this.hoursExdr=new FlexibleStringExpander(element.getAttribute("hours"));
  this.minutesExdr=new FlexibleStringExpander(element.getAttribute("minutes"));
  this.secondsExdr=new FlexibleStringExpander(element.getAttribute("seconds"));
  this.millisExdr=new FlexibleStringExpander(element.getAttribute("millis"));
  this.periodAlignStart=new FlexibleStringExpander(element.getAttribute("period-align-start"));
  this.periodAlignEnd=new FlexibleStringExpander(element.getAttribute("period-align-end"));
  this.localeExdr=new FlexibleStringExpander(element.getAttribute("locale"));
  this.timeZoneExdr=new FlexibleStringExpander(element.getAttribute("time-zone"));
  this.setIfNull="true".equals(element.getAttribute("set-if-null"));
  this.setIfEmpty=!"false".equals(element.getAttribute("set-if-empty"));
  if (!this.fromField.isEmpty() && !this.valueExdr.isEmpty()) {
    throw new IllegalArgumentException("Cannot specify a from-field [" + element.getAttribute("from-field") + "] and a value ["+ element.getAttribute("value")+ "] on the set-calendar action in a screen widget");
  }
  if (this.yearsExdr.isEmpty() && this.monthsExdr.isEmpty() && this.daysExdr.isEmpty()&& this.hoursExdr.isEmpty()&& this.minutesExdr.isEmpty()&& this.secondsExdr.isEmpty()&& this.millisExdr.isEmpty()&& this.periodAlignStart.isEmpty()&& this.periodAlignEnd.isEmpty()) {
    throw new IllegalArgumentException("At least one adjuster must be specified");
  }
}
