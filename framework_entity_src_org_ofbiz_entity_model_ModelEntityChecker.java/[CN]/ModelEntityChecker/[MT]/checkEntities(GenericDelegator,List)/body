{
  ModelReader reader=delegator.getModelReader();
  TreeSet reservedWords=new TreeSet();
  initReservedWords(reservedWords);
  Map packages=FastMap.newInstance();
  TreeSet packageNames=new TreeSet();
  TreeSet tableNames=new TreeSet();
  Collection ec=reader.getEntityNames();
  TreeSet entityNames=new TreeSet(ec);
  Iterator ecIter=ec.iterator();
  while (ecIter.hasNext()) {
    String eName=(String)ecIter.next();
    ModelEntity ent=reader.getModelEntity(eName);
    if (UtilValidate.isNotEmpty(ent.getPlainTableName()))     tableNames.add(ent.getPlainTableName());
    TreeSet entities=(TreeSet)packages.get(ent.getPackageName());
    if (entities == null) {
      entities=new TreeSet();
      packages.put(ent.getPackageName(),entities);
      packageNames.add(ent.getPackageName());
    }
    entities.add(eName);
  }
  int numberShowed=0;
  TreeSet fkNames=new TreeSet();
  TreeSet indexNames=new TreeSet();
  Iterator piter=packageNames.iterator();
  while (piter.hasNext()) {
    String pName=(String)piter.next();
    TreeSet entities=(TreeSet)packages.get(pName);
    Iterator i=entities.iterator();
    while (i.hasNext()) {
      String entityName=(String)i.next();
      String helperName=delegator.getEntityHelperName(entityName);
      String groupName=delegator.getEntityGroupName(entityName);
      ModelEntity entity=reader.getModelEntity(entityName);
      if (helperName == null) {
        warningList.add("[HelperNotFound] No Helper (DataSource) definition found for entity " + entity.getEntityName() + ".");
        if (groupName == null) {
          warningList.add("[GroupNotFound] No Group Name found for entity " + entity.getEntityName() + ".");
        }
      }
      if (entity.getPlainTableName() != null && entity.getPlainTableName().length() > 30) {
        warningList.add("[TableNameGT30] Table name [" + entity.getPlainTableName() + "] of entity "+ entity.getEntityName()+ " is longer than 30 characters.");
      }
      if (entity.getPlainTableName() != null && reservedWords.contains(entity.getPlainTableName().toUpperCase())) {
        warningList.add("[TableNameRW] Table name [" + entity.getPlainTableName() + "] of entity "+ entity.getEntityName()+ " is a reserved word.");
      }
      TreeSet ufields=new TreeSet();
      Iterator fieldIter=entity.getFieldsIterator();
      while (fieldIter.hasNext()) {
        ModelField field=(ModelField)fieldIter.next();
        ModelFieldType type=delegator.getEntityFieldType(entity,field.getType());
        if (ufields.contains(field.getName())) {
          warningList.add("[FieldNotUnique] Field [" + field.getName() + " of entity "+ entity.getEntityName()+ " is not unique for that entity.");
        }
 else {
          ufields.add(field.getName());
        }
        if (field.getColName().length() > 30 && !(entity instanceof ModelViewEntity)) {
          warningList.add("[FieldNameGT30] Column name [" + field.getColName() + "] of entity "+ entity.getEntityName()+ " is longer than 30 characters.");
        }
        if (field.getColName().length() == 0) {
          warningList.add("[FieldNameEQ0] Column name for field name \"" + field.getName() + "\" of entity "+ entity.getEntityName()+ " is empty (zero length).");
        }
        if (reservedWords.contains(field.getColName().toUpperCase()))         warningList.add("[FieldNameRW] Column name " + field.getColName() + " of entity "+ entity.getEntityName()+ " is a reserved word.");
        if (type == null) {
          StringBuffer warningMsg=new StringBuffer();
          warningMsg.append("[FieldTypeNotFound] Field type " + field.getType() + " of entity "+ entity.getEntityName()+ " not found in field type definitions");
          if (helperName == null) {
            warningMsg.append(" (no helper definition found)");
          }
          warningMsg.append(".");
          warningList.add(warningMsg.toString());
        }
      }
      if (entity.getRelationsSize() > 0) {
        Iterator indexIter=entity.getIndexesIterator();
        while (indexIter.hasNext()) {
          ModelIndex index=(ModelIndex)indexIter.next();
          if (indexNames.contains(index.getName())) {
            warningList.add("[IndexDuplicateName] Index on entity " + entity.getEntityName() + " has a duplicate index-name \""+ index.getName()+ "\".");
          }
 else {
            indexNames.add(index.getName());
          }
          if (tableNames.contains(index.getName())) {
            warningList.add("[IndexTableDupName] Index on entity " + entity.getEntityName() + " has an index-name \""+ index.getName()+ "\" that is also being used as a table name.");
          }
          if (fkNames.contains(index.getName())) {
            warningList.add("[IndexFKDupName] Index on entity " + entity.getEntityName() + " has an index-name \""+ index.getName()+ "\" that is also being used as a Foreign Key name.");
          }
          if (index.getName().length() > 18) {
            warningList.add("[IndexNameGT18] The index name " + index.getName() + " (length:"+ index.getName().length()+ ") was greater than 18 characters in length for entity "+ entity.getEntityName()+ ".");
          }
        }
        TreeSet relations=new TreeSet();
        for (int r=0; r < entity.getRelationsSize(); r++) {
          ModelRelation relation=entity.getRelation(r);
          if (!entityNames.contains(relation.getRelEntityName())) {
            warningList.add("[RelatedEntityNotFound] Related entity " + relation.getRelEntityName() + " of entity "+ entity.getEntityName()+ " not found.");
          }
          if (relations.contains(relation.getTitle() + relation.getRelEntityName())) {
            warningList.add("[RelationNameNotUnique] Relation " + relation.getTitle() + relation.getRelEntityName()+ " of entity "+ entity.getEntityName()+ " is not unique for that entity.");
          }
 else {
            relations.add(relation.getTitle() + relation.getRelEntityName());
          }
          if (relation.getFkName().length() > 0) {
            if (fkNames.contains(relation.getFkName())) {
              warningList.add("[RelationFkDuplicate] Relation to " + relation.getRelEntityName() + " from entity "+ entity.getEntityName()+ " has a duplicate fk-name \""+ relation.getFkName()+ "\".");
            }
 else {
              fkNames.add(relation.getFkName());
            }
            if (tableNames.contains(relation.getFkName())) {
              warningList.add("[RelationFkTableDup] Relation to " + relation.getRelEntityName() + " from entity "+ entity.getEntityName()+ " has an fk-name \""+ relation.getFkName()+ "\" that is also being used as a table name.");
            }
            if (indexNames.contains(relation.getFkName())) {
              warningList.add("[RelationFkTableDup] Relation to " + relation.getRelEntityName() + " from entity "+ entity.getEntityName()+ " has an fk-name \""+ relation.getFkName()+ "\" that is also being used as an index name.");
            }
          }
          if (relation.getFkName().length() > 18) {
            warningList.add("[RelFKNameGT18] The foregn key name (length:" + relation.getFkName().length() + ") was greater than 18 characters in length for relation "+ relation.getTitle()+ relation.getRelEntityName()+ " of entity "+ entity.getEntityName()+ ".");
          }
          ModelEntity relatedEntity=null;
          try {
            relatedEntity=reader.getModelEntity(relation.getRelEntityName());
          }
 catch (          GenericEntityException e) {
            Debug.log("Entity referred to in relation is not defined: " + relation.getRelEntityName());
          }
          if (relatedEntity != null) {
            if ("one".equals(relation.getType()) || "one-nofk".equals(relation.getType())) {
              if (relatedEntity.getPksSize() != relation.getKeyMapsSize())               warningList.add("[RelatedOneKeyMapsWrongSize] The number of primary keys (" + relatedEntity.getPksSize() + ") of related entity "+ relation.getRelEntityName()+ " does not match the number of keymaps ("+ relation.getKeyMapsSize()+ ") for relation of type one \""+ relation.getTitle()+ relation.getRelEntityName()+ "\" of entity "+ entity.getEntityName()+ ".");
              Iterator pksIter=relatedEntity.getPksIterator();
              while (pksIter.hasNext()) {
                ModelField pk=(ModelField)pksIter.next();
                if (relation.findKeyMapByRelated(pk.getName()) == null) {
                  warningList.add("[RelationOneRelatedPrimaryKeyMissing] The primary key \"" + pk.getName() + "\" of related entity "+ relation.getRelEntityName()+ " is missing in the keymaps for relation of type one "+ relation.getTitle()+ relation.getRelEntityName()+ " of entity "+ entity.getEntityName()+ ".");
                }
              }
            }
          }
          for (int rkm=0; rkm < relation.getKeyMapsSize(); rkm++) {
            ModelKeyMap keyMap=relation.getKeyMap(rkm);
            ModelField field=entity.getField(keyMap.getFieldName());
            ModelField rfield=null;
            if (relatedEntity != null) {
              rfield=relatedEntity.getField(keyMap.getRelFieldName());
            }
            if (rfield == null) {
              warningList.add("[RelationRelatedFieldNotFound] The field \"" + keyMap.getRelFieldName() + "\" of related entity "+ relation.getRelEntityName()+ " was specified in the keymaps but is not found for relation "+ relation.getTitle()+ relation.getRelEntityName()+ " of entity "+ entity.getEntityName()+ ".");
            }
            if (field == null) {
              warningList.add("[RelationFieldNotFound] The field " + keyMap.getFieldName() + " was specified in the keymaps but is not found for relation "+ relation.getTitle()+ relation.getRelEntityName()+ " of entity "+ entity.getEntityName()+ ".");
            }
            if (field != null && rfield != null) {
              if (!field.getType().equals(rfield.getType()) && !field.getType().equals(rfield.getType() + "-ne") && !rfield.getType().equals(field.getType() + "-ne")) {
                warningList.add("[RelationFieldTypesDifferent] The field type (" + field.getType() + ") of "+ field.getName()+ " of entity "+ entity.getEntityName()+ " is not the same as field type ("+ rfield.getType()+ ") of "+ rfield.getName()+ " of entity "+ relation.getRelEntityName()+ " for relation "+ relation.getTitle()+ relation.getRelEntityName()+ ".");
              }
            }
          }
        }
      }
      numberShowed++;
    }
  }
}
