{
  if ((curSeqId + stagger) <= maxSeqId) {
    return;
  }
  long bankSize=this.bankSize;
  if (stagger > 1) {
    bankSize=stagger * defaultBankSize;
  }
  if (bankSize > maxBankSize) {
    bankSize=maxBankSize;
  }
  Transaction suspendedTransaction=null;
  try {
    suspendedTransaction=TransactionUtil.suspend();
    boolean beganTransaction=false;
    try {
      beganTransaction=TransactionUtil.begin();
      Connection connection=null;
      Statement stmt=null;
      ResultSet rs=null;
      try {
        connection=TransactionFactoryLoader.getInstance().getConnection(SequenceUtil.this.helperInfo);
      }
 catch (      SQLException sqle) {
        Debug.logWarning("Unable to esablish a connection with the database. Error was:" + sqle.toString(),module);
        throw sqle;
      }
catch (      GenericEntityException e) {
        Debug.logWarning("Unable to esablish a connection with the database. Error was: " + e.toString(),module);
        throw e;
      }
      if (connection == null) {
        throw new GenericEntityException("Unable to esablish a connection with the database, connection was null...");
      }
      try {
        stmt=connection.createStatement();
        String sql=null;
        if (stmt.executeUpdate(updateForLockStatement) <= 0) {
          Debug.logWarning("Lock failed; no sequence row was found, will try to add a new one for sequence: " + seqName,module);
          sql="INSERT INTO " + SequenceUtil.this.tableName + " ("+ SequenceUtil.this.nameColName+ ", "+ SequenceUtil.this.idColName+ ") VALUES ('"+ this.seqName+ "', "+ startSeqId+ ")";
          try {
            stmt.executeUpdate(sql);
          }
 catch (          SQLException sqle) {
            if (stmt.executeUpdate(updateForLockStatement) <= 0) {
              throw new GenericEntityException("No rows changed when trying insert new sequence: " + seqName);
            }
          }
        }
        rs=stmt.executeQuery(selectSequenceStatement);
        boolean sequenceFound=rs.next();
        if (sequenceFound) {
          curSeqId=rs.getLong(SequenceUtil.this.idColName);
        }
        rs.close();
        if (!sequenceFound) {
          throw new GenericEntityException("Failed to find the sequence record for sequence: " + seqName);
        }
        sql="UPDATE " + SequenceUtil.this.tableName + " SET "+ SequenceUtil.this.idColName+ "="+ SequenceUtil.this.idColName+ "+"+ bankSize+ " WHERE "+ SequenceUtil.this.nameColName+ "='"+ this.seqName+ "'";
        if (stmt.executeUpdate(sql) <= 0) {
          throw new GenericEntityException("Update failed, no rows changes for seqName: " + seqName);
        }
        TransactionUtil.commit(beganTransaction);
      }
 catch (      SQLException sqle) {
        Debug.logWarning(sqle,"SQL Exception:" + sqle.getMessage(),module);
        throw sqle;
      }
 finally {
        try {
          if (stmt != null)           stmt.close();
        }
 catch (        SQLException sqle) {
          Debug.logWarning(sqle,"Error closing statement in sequence util",module);
        }
        try {
          if (connection != null)           connection.close();
        }
 catch (        SQLException sqle) {
          Debug.logWarning(sqle,"Error closing connection in sequence util",module);
        }
      }
    }
 catch (    Exception e) {
      curSeqId=0;
      maxSeqId=0;
      String errMsg="General error in getting a sequenced ID";
      Debug.logError(e,errMsg,module);
      try {
        TransactionUtil.rollback(beganTransaction,errMsg,e);
      }
 catch (      GenericTransactionException gte2) {
        Debug.logError(gte2,"Unable to rollback transaction",module);
      }
      return;
    }
  }
 catch (  GenericTransactionException e) {
    Debug.logError(e,"System Error suspending transaction in sequence util",module);
    curSeqId=0;
    maxSeqId=0;
    return;
  }
 finally {
    if (suspendedTransaction != null) {
      try {
        TransactionUtil.resume(suspendedTransaction);
      }
 catch (      GenericTransactionException e) {
        Debug.logError(e,"Error resuming suspended transaction in sequence util",module);
        curSeqId=0;
        maxSeqId=0;
        return;
      }
    }
  }
  maxSeqId=curSeqId + bankSize;
  if (Debug.infoOn())   Debug.logInfo("Got bank of sequenced IDs for [" + this.seqName + "]; curSeqId="+ curSeqId+ ", maxSeqId="+ maxSeqId+ ", bankSize="+ bankSize,module);
}
