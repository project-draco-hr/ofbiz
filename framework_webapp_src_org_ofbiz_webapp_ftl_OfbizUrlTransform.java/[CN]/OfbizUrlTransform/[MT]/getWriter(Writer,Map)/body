{
  final StringBuilder buf=new StringBuilder();
  final boolean fullPath=checkBooleanArg(args,"fullPath",false);
  final boolean secure=checkBooleanArg(args,"secure",false);
  final boolean encode=checkBooleanArg(args,"encode",true);
  final String webSiteId=convertToString(args.get("webSiteId"));
  return new Writer(out){
    @Override public void close() throws IOException {
      try {
        Environment env=Environment.getCurrentEnvironment();
        String prefixString=convertToString(env.getVariable("urlPrefix"));
        if (!prefixString.isEmpty()) {
          String bufString=buf.toString();
          boolean prefixSlash=prefixString.endsWith("/");
          boolean bufSlash=bufString.startsWith("/");
          if (prefixSlash && bufSlash) {
            bufString=bufString.substring(1);
          }
 else           if (!prefixSlash && !bufSlash) {
            bufString="/" + bufString;
          }
          out.write(prefixString + bufString);
          return;
        }
        HttpServletRequest request=FreeMarkerWorker.unwrap(env.getVariable("request"));
        if (!webSiteId.isEmpty()) {
          Delegator delegator=FreeMarkerWorker.unwrap(env.getVariable("delegator"));
          if (request != null && delegator == null) {
            delegator=(Delegator)request.getAttribute("delegator");
          }
          if (delegator == null) {
            throw new IllegalStateException("Delegator not found");
          }
          WebappInfo webAppInfo=WebAppUtil.getWebappInfoFromWebsiteId(webSiteId);
          StringBuilder newUrlBuff=new StringBuilder(250);
          OfbizUrlBuilder builder=OfbizUrlBuilder.from(webAppInfo,delegator);
          builder.buildFullUrl(newUrlBuff,buf.toString(),secure);
          String newUrl=newUrlBuff.toString();
          if (encode) {
            newUrl=URLEncoder.encode(newUrl,"UTF-8");
          }
          out.write(newUrl);
          return;
        }
        if (request != null) {
          ServletContext ctx=(ServletContext)request.getAttribute("servletContext");
          HttpServletResponse response=FreeMarkerWorker.unwrap(env.getVariable("response"));
          String requestUrl=buf.toString();
          RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");
          out.write(rh.makeLink(request,response,requestUrl,fullPath,secure,encode));
        }
 else {
          out.write(buf.toString());
        }
      }
 catch (      Exception e) {
        Debug.logWarning(e,"Exception thrown while running ofbizUrl transform",module);
        throw new IOException(e);
      }
    }
    @Override public void flush() throws IOException {
      out.flush();
    }
    @Override public void write(    char cbuf[],    int off,    int len){
      buf.append(cbuf,off,len);
    }
  }
;
}
