{
  final StringBuilder buf=new StringBuilder();
  final boolean fullPath=checkArg(args,"fullPath",false);
  final boolean secure=checkArg(args,"secure",false);
  final boolean encode=checkArg(args,"encode",true);
  final String webSiteId=getArg(args,"webSiteId");
  return new Writer(out){
    @Override public void write(    char cbuf[],    int off,    int len){
      buf.append(cbuf,off,len);
    }
    @Override public void flush() throws IOException {
      out.flush();
    }
    @Override public void close() throws IOException {
      try {
        Environment env=Environment.getCurrentEnvironment();
        BeanModel req=(BeanModel)env.getVariable("request");
        BeanModel res=(BeanModel)env.getVariable("response");
        Object prefix=env.getVariable("urlPrefix");
        if (UtilValidate.isNotEmpty(webSiteId)) {
          HttpServletRequest request=(HttpServletRequest)req.getWrappedObject();
          Delegator delegator=(Delegator)request.getAttribute("delegator");
          String httpsPort=null;
          String httpsServer=null;
          String httpPort=null;
          String httpServer=null;
          Boolean enableHttps=null;
          StringBuilder newURL=new StringBuilder();
          try {
            GenericValue webSite=delegator.findByPrimaryKeyCache("WebSite",UtilMisc.toMap("webSiteId",webSiteId));
            if (webSite != null) {
              httpsPort=webSite.getString("httpsPort");
              httpsServer=webSite.getString("httpsHost");
              httpPort=webSite.getString("httpPort");
              httpServer=webSite.getString("httpHost");
              enableHttps=webSite.getBoolean("enableHttps");
            }
          }
 catch (          GenericEntityException e) {
            Debug.logWarning(e,"Problems with WebSite entity; using global defaults",module);
          }
          if (UtilValidate.isEmpty(httpsPort)) {
            httpsPort=UtilProperties.getPropertyValue("url.properties","port.https","443");
          }
          if (UtilValidate.isEmpty(httpsServer)) {
            httpsServer=UtilProperties.getPropertyValue("url.properties","force.https.host");
          }
          if (UtilValidate.isEmpty(httpPort)) {
            httpPort=UtilProperties.getPropertyValue("url.properties","port.http","80");
          }
          if (UtilValidate.isEmpty(httpServer)) {
            httpServer=UtilProperties.getPropertyValue("url.properties","force.http.host");
          }
          if (enableHttps == null) {
            enableHttps=UtilProperties.propertyValueEqualsIgnoreCase("url.properties","port.https.enabled","Y");
          }
          if (secure && enableHttps) {
            String server=httpsServer;
            if (UtilValidate.isEmpty(server)) {
              server=request.getServerName();
            }
            newURL.append("https://");
            newURL.append(httpsServer);
            newURL.append(":").append(httpsPort);
          }
 else {
            newURL.append("http://");
            newURL.append(httpServer);
            if (!"80".equals(httpPort)) {
              newURL.append(":").append(httpPort);
            }
          }
          String mountPoint=null;
          for (          WebappInfo webAppInfo : ComponentConfig.getAllWebappResourceInfos()) {
            File file=new File(webAppInfo.getLocation() + "/WEB-INF/web.xml");
            if (!file.exists()) {
              continue;
            }
            InputStream is=new FileInputStream(file);
            try {
              Document doc=UtilXml.readXmlDocument(is,true,null);
              NodeList nList=doc.getElementsByTagName("context-param");
              for (int temp=0; temp < nList.getLength(); temp++) {
                Node nNode=nList.item(temp);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                  Element eElement=(Element)nNode;
                  String paramName=getTagValue("param-name",eElement);
                  String paramValue=getTagValue("param-value",eElement);
                  if ("webSiteId".equals(paramName) && webSiteId.equals(paramValue)) {
                    mountPoint=webAppInfo.getContextRoot();
                    break;
                  }
                }
              }
            }
 catch (            SAXException e) {
              Debug.logWarning(e,e.getMessage(),module);
            }
catch (            ParserConfigurationException e) {
              Debug.logWarning(e,e.getMessage(),module);
            }
            if (UtilValidate.isNotEmpty(mountPoint)) {
              if (mountPoint.length() > 1)               newURL.append(mountPoint);
              break;
            }
          }
          String controlPath=(String)request.getAttribute("_CONTROL_PATH_");
          String[] patch=controlPath.split("/");
          String patchStr=null;
          if (patch.length > 0) {
            patchStr=patch[patch.length - 1];
          }
          if (UtilValidate.isNotEmpty(patchStr)) {
            newURL.append("/");
            newURL.append(patchStr);
          }
          newURL.append("/");
          String requestUrl=buf.toString();
          newURL.append(requestUrl);
          out.write(newURL.toString());
        }
 else         if (req != null) {
          HttpServletRequest request=(HttpServletRequest)req.getWrappedObject();
          ServletContext ctx=(ServletContext)request.getAttribute("servletContext");
          HttpServletResponse response=null;
          if (res != null) {
            response=(HttpServletResponse)res.getWrappedObject();
          }
          String requestUrl=buf.toString();
          RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");
          out.write(rh.makeLink(request,response,requestUrl,fullPath,secure,encode));
        }
 else         if (prefix != null) {
          if (prefix instanceof TemplateScalarModel) {
            TemplateScalarModel s=(TemplateScalarModel)prefix;
            String prefixString=s.getAsString();
            String bufString=buf.toString();
            boolean prefixSlash=prefixString.endsWith("/");
            boolean bufSlash=bufString.startsWith("/");
            if (prefixSlash && bufSlash) {
              bufString=bufString.substring(1);
            }
 else             if (!prefixSlash && !bufSlash) {
              bufString="/" + bufString;
            }
            out.write(prefixString + bufString);
          }
        }
 else {
          out.write(buf.toString());
        }
      }
 catch (      TemplateModelException e) {
        throw new IOException(e.getMessage());
      }
    }
  }
;
}
