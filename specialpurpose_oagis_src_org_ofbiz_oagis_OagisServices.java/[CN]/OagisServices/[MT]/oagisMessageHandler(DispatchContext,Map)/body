{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  InputStream in=(InputStream)context.get("inputStream");
  List errorList=FastList.newInstance();
  Document doc=null;
  String xmlText=null;
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(in,"UTF-8"));
    StringBuffer xmlTextBuf=new StringBuffer();
    String currentLine=null;
    while ((currentLine=br.readLine()) != null) {
      xmlTextBuf.append(currentLine);
      xmlTextBuf.append('\n');
    }
    xmlText=xmlTextBuf.toString();
    Debug.logWarning("Received OAGIS XML message, here is the text: \n" + xmlText,module);
    ByteArrayInputStream bis=new ByteArrayInputStream(xmlText.getBytes("UTF-8"));
    doc=UtilXml.readXmlDocument(bis,true,"OagisMessage");
  }
 catch (  SAXException e) {
    String errMsg="XML Error parsing the Received Message [" + e.toString() + "]; The text received we could not parse is: ["+ xmlText+ "]";
    errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","SAXException"));
    Debug.logError(e,errMsg,module);
  }
catch (  ParserConfigurationException e) {
    String errMsg="Parser Configuration Error parsing the Received Message: " + e.toString();
    errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","ParserConfigurationException"));
    Debug.logError(e,errMsg,module);
  }
catch (  IOException e) {
    String errMsg="IO Error parsing the Received Message: " + e.toString();
    errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","IOException"));
    Debug.logError(e,errMsg,module);
  }
  if (UtilValidate.isNotEmpty(errorList)) {
    return ServiceUtil.returnError("Unable to parse received message");
  }
  Element rootElement=doc.getDocumentElement();
  rootElement.normalize();
  Element controlAreaElement=UtilXml.firstChildElement(rootElement,"os:CNTROLAREA");
  Element bsrElement=UtilXml.firstChildElement(controlAreaElement,"os:BSR");
  String bsrVerb=UtilXml.childElementValue(bsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(bsrElement,"of:NOUN");
  Element senderElement=UtilXml.firstChildElement(controlAreaElement,"os:SENDER");
  String logicalId=UtilXml.childElementValue(senderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(senderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(senderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(senderElement,"of:REFERENCEID");
  if (UtilValidate.isEmpty(bsrVerb) || UtilValidate.isEmpty(bsrNoun)) {
    return ServiceUtil.returnError("Was able to receive and parse the XML message, but BSR->NOUN [" + bsrNoun + "] and/or BSR->VERB ["+ bsrVerb+ "] are empty");
  }
  GenericValue oagisMessageInfo=null;
  try {
    oagisMessageInfo=delegator.findByPrimaryKey("OagisMessageInfo",UtilMisc.toMap("logicalId",logicalId,"component",component,"task",task,"referenceId",referenceId));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting Entity OagisMessageInfo: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  if (UtilValidate.isEmpty(oagisMessageInfo)) {
    if (bsrVerb.equalsIgnoreCase("CONFIRM") && bsrNoun.equalsIgnoreCase("BOD")) {
      try {
        dispatcher.runAsync("receiveConfirmBod",UtilMisc.toMap("document",doc),true);
      }
 catch (      GenericServiceException e) {
        String errMsg="Error running service receiveConfirmBod: " + e.toString();
        errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
        Debug.logError(e,errMsg,module);
      }
    }
 else     if (bsrVerb.equalsIgnoreCase("SHOW") && bsrNoun.equalsIgnoreCase("SHIPMENT")) {
      try {
        dispatcher.runAsync("showShipment",UtilMisc.toMap("document",doc),true);
      }
 catch (      GenericServiceException e) {
        String errMsg="Error running service showShipment: " + e.toString();
        errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
        Debug.logError(e,errMsg,module);
      }
    }
 else     if (bsrVerb.equalsIgnoreCase("SYNC") && bsrNoun.equalsIgnoreCase("INVENTORY")) {
      try {
        dispatcher.runAsync("syncInventory",UtilMisc.toMap("document",doc),true);
      }
 catch (      GenericServiceException e) {
        String errMsg="Error running service syncInventory: " + e.toString();
        errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
        Debug.logError(e,errMsg,module);
      }
    }
 else     if (bsrVerb.equalsIgnoreCase("ACKNOWLEDGE") && bsrNoun.equalsIgnoreCase("DELIVERY")) {
      Element dataAreaElement=UtilXml.firstChildElement(rootElement,"ns:DATAAREA");
      Element ackDeliveryElement=UtilXml.firstChildElement(dataAreaElement,"ns:ACKNOWLEDGE_DELIVERY");
      Element receiptlnElement=UtilXml.firstChildElement(ackDeliveryElement,"ns:RECEIPTLN");
      Element docRefElement=UtilXml.firstChildElement(receiptlnElement,"os:DOCUMNTREF");
      String docType=UtilXml.childElementValue(docRefElement,"of:DOCTYPE");
      if ("PO".equals(docType)) {
        try {
          dispatcher.runAsync("receivePoAcknowledge",UtilMisc.toMap("document",doc),true);
        }
 catch (        GenericServiceException e) {
          String errMsg="Error running service receivePoAcknowledge: " + e.toString();
          errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
          Debug.logError(e,errMsg,module);
        }
      }
 else       if ("RMA".equals(docType)) {
        try {
          dispatcher.runAsync("receiveRmaAcknowledge",UtilMisc.toMap("document",doc),true);
        }
 catch (        GenericServiceException e) {
          String errMsg="Error running service receiveRmaAcknowledge: " + e.toString();
          errorList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
          Debug.logError(e,errMsg,module);
        }
      }
 else {
        return ServiceUtil.returnError("For Acknowledge Delivery message could not determine if it is for a PO or RMA. DOCTYPE from message is " + docType);
      }
    }
 else {
      String errMsg="Unknown Message Received";
      Debug.logError(errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
 else {
    String errMsg="Message has been already received";
    Debug.logError(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  Map result=ServiceUtil.returnSuccess();
  result.put("contentType","text/plain");
  return result;
}
