{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Document doc=(Document)context.get("document");
  List errorMapList=FastList.newInstance();
  GenericValue userLogin=null;
  try {
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin with userLoginId 'system':" + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element confirmBodElement=doc.getDocumentElement();
  confirmBodElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(confirmBodElement,"os:CNTROLAREA");
  Element bsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:BSR");
  String bsrVerb=UtilXml.childElementValue(bsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(bsrElement,"of:NOUN");
  String bsrRevision=UtilXml.childElementValue(bsrElement,"of:REVISION");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:SENDER");
  String logicalId=UtilXml.childElementValue(docSenderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"of:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"of:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"of:AUTHID");
  String sentDate=UtilXml.childElementValue(docCtrlAreaElement,"os:DATETIMEISO");
  Timestamp sentTimestamp=OagisServices.parseIsoDateString(sentDate,errorMapList);
  Element dataAreaElement=UtilXml.firstChildElement(confirmBodElement,"ns:DATAAREA");
  Element dataAreaConfirmBodElement=UtilXml.firstChildElement(dataAreaElement,"ns:CONFIRM_BOD");
  Element dataAreaConfirmElement=UtilXml.firstChildElement(dataAreaConfirmBodElement,"ns:CONFIRM");
  Element dataAreaCtrlElement=UtilXml.firstChildElement(dataAreaConfirmElement,"os:CNTROLAREA");
  Element dataAreaSenderElement=UtilXml.firstChildElement(dataAreaCtrlElement,"os:SENDER");
  String dataAreaLogicalId=UtilXml.childElementValue(dataAreaSenderElement,"of:LOGICALID");
  String dataAreaComponent=UtilXml.childElementValue(dataAreaSenderElement,"of:COMPONENT");
  String dataAreaTask=UtilXml.childElementValue(dataAreaSenderElement,"of:TASK");
  String dataAreaReferenceId=UtilXml.childElementValue(dataAreaSenderElement,"of:REFERENCEID");
  String dataAreaDate=UtilXml.childElementValue(dataAreaCtrlElement,"os:DATETIMEISO");
  String origRef=UtilXml.childElementValue(dataAreaConfirmElement,"of:ORIGREF");
  Timestamp receivedTimestamp=UtilDateTime.nowTimestamp();
  Map oagisMsgInfoCtx=FastMap.newInstance();
  oagisMsgInfoCtx.put("logicalId",logicalId);
  oagisMsgInfoCtx.put("component",component);
  oagisMsgInfoCtx.put("task",task);
  oagisMsgInfoCtx.put("referenceId",referenceId);
  oagisMsgInfoCtx.put("authId",authId);
  oagisMsgInfoCtx.put("receivedDate",receivedTimestamp);
  oagisMsgInfoCtx.put("sentDate",sentTimestamp);
  oagisMsgInfoCtx.put("confirmation",confirmation);
  oagisMsgInfoCtx.put("bsrVerb",bsrVerb);
  oagisMsgInfoCtx.put("bsrNoun",bsrNoun);
  oagisMsgInfoCtx.put("bsrRevision",bsrRevision);
  oagisMsgInfoCtx.put("outgoingMessage","N");
  oagisMsgInfoCtx.put("origRef",origRef);
  oagisMsgInfoCtx.put("processingStatusId","OAGMP_RECEIVED");
  oagisMsgInfoCtx.put("userLogin",userLogin);
  if (OagisServices.debugSaveXmlIn) {
    try {
      oagisMsgInfoCtx.put("fullMessageXml",UtilXml.writeXmlDocument(doc));
    }
 catch (    IOException e) {
      String errMsg="Warning: error creating text from XML Document for saving to database: " + e.toString();
      Debug.logWarning(errMsg,module);
    }
  }
  try {
    dispatcher.runSync("createOagisMessageInfo",oagisMsgInfoCtx,60,true);
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
    Debug.logError(e,errMsg,module);
  }
  Map originalOagisMsgCtx=FastMap.newInstance();
  originalOagisMsgCtx.put("logicalId",dataAreaLogicalId);
  originalOagisMsgCtx.put("component",dataAreaComponent);
  originalOagisMsgCtx.put("task",dataAreaTask);
  originalOagisMsgCtx.put("referenceId",dataAreaReferenceId);
  GenericValue originalOagisMsgInfo=null;
  try {
    originalOagisMsgInfo=delegator.findByPrimaryKey("OagisMessageInfo",originalOagisMsgCtx);
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting Entity OagisMessageInfo: " + e.toString();
    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericEntityException"));
    Debug.logError(e,errMsg,module);
  }
  originalOagisMsgCtx.put("userLogin",userLogin);
  List dataAreaConfirmMsgList=UtilXml.childElementList(dataAreaConfirmElement,"ns:CONFIRMMSG");
  Iterator dataAreaConfirmMsgListItr=dataAreaConfirmMsgList.iterator();
  if (originalOagisMsgInfo != null) {
    while (dataAreaConfirmMsgListItr.hasNext()) {
      Element dataAreaConfirmMsgElement=(Element)dataAreaConfirmMsgListItr.next();
      String description=UtilXml.childElementValue(dataAreaConfirmMsgElement,"of:DESCRIPTN");
      String reasonCode=UtilXml.childElementValue(dataAreaConfirmMsgElement,"of:REASONCODE");
      originalOagisMsgCtx.put("reasonCode",reasonCode);
      originalOagisMsgCtx.put("description",description);
      try {
        Map oagisMsgErrorInfoResult=dispatcher.runSync("createOagisMessageErrorInfo",originalOagisMsgCtx);
        if (ServiceUtil.isError(oagisMsgErrorInfoResult)) {
          String errMsg="Error creating OagisMessageErrorInfo: " + ServiceUtil.getErrorMessage(oagisMsgErrorInfoResult);
          errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","CreateOagisMessageErrorInfoServiceError"));
          Debug.logError(errMsg,module);
        }
      }
 catch (      GenericServiceException e) {
        String errMsg="Error creating OagisMessageErrorInfo: " + e.toString();
        errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
        Debug.logError(e,errMsg,module);
      }
    }
  }
 else {
    String errMsg="No such message with an error was found; Not creating OagisMessageErrorInfo; ID info: " + originalOagisMsgCtx;
    Debug.logWarning(errMsg,module);
    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","OriginalOagisMessageInfoNotFoundError"));
  }
  Map result=FastMap.newInstance();
  result.put("logicalId",logicalId);
  result.put("component",component);
  result.put("task",task);
  result.put("referenceId",referenceId);
  result.put("userLogin",userLogin);
  if (errorMapList.size() > 0) {
    Map saveErrorMapListCtx=FastMap.newInstance();
    saveErrorMapListCtx.put("logicalId",logicalId);
    saveErrorMapListCtx.put("component",component);
    saveErrorMapListCtx.put("task",task);
    saveErrorMapListCtx.put("referenceId",referenceId);
    saveErrorMapListCtx.put("errorMapList",errorMapList);
    try {
      dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    try {
      Map sendConfirmBodCtx=FastMap.newInstance();
      sendConfirmBodCtx.putAll(saveErrorMapListCtx);
      dispatcher.runAsync("oagisSendConfirmBod",sendConfirmBodCtx,null,true,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    result.putAll(ServiceUtil.returnError("Errors found processing message; information saved and return error sent back"));
    return result;
  }
 else {
    oagisMsgInfoCtx.put("processingStatusId","OAGMP_PROC_SUCCESS");
    try {
      dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  result.putAll(ServiceUtil.returnSuccess("Service Completed Successfully"));
  return result;
}
