{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  InputStream in=(InputStream)context.get("inputStream");
  try {
    GenericValue userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","admin"));
    Document doc=UtilXml.readXmlDocument(in,true,"RecieveConfirmBod");
    Element confirmBodElement=doc.getDocumentElement();
    confirmBodElement.normalize();
    Element docCtrlAreaElement=UtilXml.firstChildElement(confirmBodElement,"N1:CNTROLAREA");
    Element bsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:BSR");
    String bsrVerb=UtilXml.childElementValue(bsrElement,"N2:VERB");
    String bsrNoun=UtilXml.childElementValue(bsrElement,"N2:NOUN");
    String bsrRevision=UtilXml.childElementValue(bsrElement,"N2:REVISION");
    Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:SENDER");
    String logicalId=UtilXml.childElementValue(docSenderElement,"N2:LOGICALID");
    String component=UtilXml.childElementValue(docSenderElement,"N2:COMPONENT");
    String task=UtilXml.childElementValue(docSenderElement,"N2:TASK");
    String referenceId=UtilXml.childElementValue(docSenderElement,"N2:REFERENCEID");
    String confirmation=UtilXml.childElementValue(docSenderElement,"N2:CONFIRMATION");
    String language=UtilXml.childElementValue(docSenderElement,"N2:LANGUAGE");
    String codepage=UtilXml.childElementValue(docSenderElement,"N2:CODEPAGE");
    String authId=UtilXml.childElementValue(docSenderElement,"N2:AUTHID");
    String sentDate=UtilXml.childElementValue(docCtrlAreaElement,"N1:DATETIMEANY");
    Element dataAreaElement=UtilXml.firstChildElement(confirmBodElement,"n:DATAAREA");
    Element dataAreaConfirmBodElement=UtilXml.firstChildElement(dataAreaElement,"n:CONFIRM_BOD");
    Element dataAreaConfirmElement=UtilXml.firstChildElement(dataAreaConfirmBodElement,"n:CONFIRM");
    Element dataAreaCtrlElement=UtilXml.firstChildElement(dataAreaConfirmElement,"N1:CNTROLAREA");
    Element dataAreaSenderElement=UtilXml.firstChildElement(dataAreaCtrlElement,"N1:SENDER");
    String dataAreaLogicalId=UtilXml.childElementValue(dataAreaSenderElement,"N2:LOGICALID");
    String dataAreaComponent=UtilXml.childElementValue(dataAreaSenderElement,"N2:COMPONENT");
    String dataAreaTask=UtilXml.childElementValue(dataAreaSenderElement,"N2:TASK");
    String dataAreaReferenceId=UtilXml.childElementValue(dataAreaSenderElement,"N2:REFERENCEID");
    String dataAreaDate=UtilXml.childElementValue(dataAreaCtrlElement,"N1:DATETIMEANY");
    String origRef=UtilXml.childElementValue(dataAreaConfirmElement,"N2:ORIGREF");
    Element dataAreaConfirmMsgElement=UtilXml.firstChildElement(dataAreaConfirmElement,"n:CONFIRMMSG");
    String description=UtilXml.childElementValue(dataAreaConfirmMsgElement,"N2:DESCRIPTN");
    String reasonCode=UtilXml.childElementValue(dataAreaConfirmMsgElement,"N2:REASONCODE");
    Timestamp timestamp=UtilDateTime.nowTimestamp();
    Map oagisMsgInfoContext=new HashMap();
    oagisMsgInfoContext.put("logicalId",logicalId);
    oagisMsgInfoContext.put("component",component);
    oagisMsgInfoContext.put("task",task);
    oagisMsgInfoContext.put("referenceId",referenceId);
    oagisMsgInfoContext.put("authId",authId);
    oagisMsgInfoContext.put("receivedDate",timestamp);
    oagisMsgInfoContext.put("confirmation",confirmation);
    oagisMsgInfoContext.put("bsrVerb",bsrVerb);
    oagisMsgInfoContext.put("bsrNoun",bsrNoun);
    oagisMsgInfoContext.put("bsrRevision",bsrRevision);
    oagisMsgInfoContext.put("userLogin",userLogin);
    Map oagisMsgInfoResult=dispatcher.runSync("createOagisMessageInfo",oagisMsgInfoContext);
    if (ServiceUtil.isError(oagisMsgInfoResult))     return ServiceUtil.returnError("Error creating OagisMessageInfo");
    Map oagisMsgErrorContext=new HashMap();
    oagisMsgErrorContext.put("logicalId",dataAreaLogicalId);
    oagisMsgErrorContext.put("component",dataAreaComponent);
    oagisMsgErrorContext.put("task",dataAreaTask);
    oagisMsgErrorContext.put("referenceId",dataAreaReferenceId);
    GenericValue oagisMsgInfo=delegator.findByPrimaryKey("OagisMessageInfo",oagisMsgErrorContext);
    if (oagisMsgInfo != null) {
      oagisMsgErrorContext.put("reasonCode",reasonCode);
      oagisMsgErrorContext.put("description",description);
      oagisMsgErrorContext.put("userLogin",userLogin);
      Map oagisMsgErrorInfoResult=dispatcher.runSync("createOagisMessageErrorInfo",oagisMsgErrorContext);
      if (ServiceUtil.isError(oagisMsgInfoResult))       return ServiceUtil.returnError("Error creating OagisMessageErrorInfo");
    }
 else {
      Debug.logWarning("No such message with an error was found in OagisMessageInfoEntity ; Not creating OagisMessageErrorInfo",module);
    }
  }
 catch (  Exception e) {
    String errMsg="Error running method receiveConfirmBod";
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  return ServiceUtil.returnSuccess("Service Completed Successfully");
}
