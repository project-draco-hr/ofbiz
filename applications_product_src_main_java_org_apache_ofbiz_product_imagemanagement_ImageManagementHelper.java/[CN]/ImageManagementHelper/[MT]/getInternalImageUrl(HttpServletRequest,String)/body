{
  String internalImageUrl=null;
  if (request == null)   return internalImageUrl;
  try {
    Delegator delegator=(Delegator)request.getAttribute("delegator");
    List<GenericValue> defaultImageList=EntityQuery.use(delegator).from("ProductContentAndInfo").where("productId",productId,"productContentTypeId","DEFAULT_IMAGE","statusId","IM_APPROVED","drIsPublic","N").orderBy("sequenceNum").queryList();
    if (UtilValidate.isNotEmpty(defaultImageList)) {
      GenericValue productContent=EntityUtil.getFirst(defaultImageList);
      if (UtilValidate.isNotEmpty(productContent.get("drObjectInfo"))) {
        internalImageUrl=(String)productContent.get("drObjectInfo");
      }
    }
 else {
      List<GenericValue> productContentList=EntityQuery.use(delegator).from("ProductContentAndInfo").where("productId",productId,"productContentTypeId","IMAGE","statusId","IM_APPROVED","drIsPublic","N").orderBy("sequenceNum").queryList();
      if (UtilValidate.isNotEmpty(productContentList)) {
        GenericValue productContent=EntityUtil.getFirst(productContentList);
        if (UtilValidate.isNotEmpty(productContent.get("drObjectInfo"))) {
          internalImageUrl=(String)productContent.get("drObjectInfo");
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot get internal image url",module);
  }
  return internalImageUrl;
}
