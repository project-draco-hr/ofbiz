{
  List<GenericValue> newList=FastList.newInstance();
  if (productCategoryId == null)   return newList;
  EntityCondition productCategoryIdCondition=EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,productCategoryId);
  EntityCondition assocTypeIdCondition=EntityCondition.makeCondition("productAssocTypeId",EntityOperator.EQUALS,"PRODUCT_VARIANT");
  Set<String> allowedProductIds=FastSet.newInstance();
  Map<String,Set<String>> variants=FastMap.newInstance();
  Map<String,Set<String>> revVariantMap=FastMap.newInstance();
  Map<String,Set<String>> revParentMap=FastMap.newInstance();
  Timestamp now=UtilDateTime.nowTimestamp();
  EntityCondition valueCondition=EntityCondition.makeCondition(lookupCondition,EntityOperator.AND,EntityCondition.makeCondition("secondaryProductCategoryId",EntityOperator.EQUALS,productCategoryId));
  List<GenericValue> valueObjects=delegator.findList("ProductAndCategoryMemberDouble",valueCondition,null,orderByFields,null,true);
  if (filterConditions.isEmpty()) {
    valueObjects=EntityUtil.filterByAnd(valueObjects,filterConditions);
  }
  if (activeOnly) {
    valueObjects=EntityUtil.filterByDate(valueObjects,now);
  }
  Iterator<GenericValue> it=valueObjects.iterator();
  while (it.hasNext()) {
    GenericValue row=it.next();
    String productId=row.getString("productId");
    if (EntityUtil.isValueActive(row,now,"secondaryFromDate","secondaryThruDate")) {
      allowedProductIds.add(productId);
    }
 else     if ("Y".equals(row.get("isVariant"))) {
      variants.put(productId,null);
    }
  }
  return filterVariantsInCategory(delegator,now,productCategoryIdCondition,valueObjects,allowedProductIds,variants,"productId");
}
