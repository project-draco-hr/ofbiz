{
  LinkedHashMap<String,Object> orderCtx=new LinkedHashMap<String,Object>();
  String externalOrderId="EBS_" + order.getOrderID();
  double amountPaid=0.0;
  String emailBuyer=null;
  String createdTime=null;
  String paidTime=null;
  String paymentMethod=null;
  String shippedTime=null;
  String shippingService=null;
  String ebayUserIdBuyer=null;
  String eBayPaymentStatus=null;
  String status=null;
  double shippingServiceCost=0.0;
  double salesTaxAmount=0.0;
  double salesTaxPercent=0.0;
  double insuranceCost=0.0;
  double insuranceFee=0.0;
  String insuranceOption=null;
  boolean insuranceWanted=false;
  String salesTaxState=null;
  boolean shippingIncludedInTax=false;
  String externalTransactionId=null;
  String externalTransactionTime=null;
  double feeOrCreditAmount=0.0;
  double paymentOrRefundAmount=0.0;
  Map<String,Object> shippingServiceSelectedCtx=new HashMap<String,Object>();
  Map<String,Object> shippingDetailsCtx=new HashMap<String,Object>();
  Map<String,Object> shippingAddressMap=new HashMap<String,Object>();
  Map<String,Object> checkoutStatusCtx=new HashMap<String,Object>();
  Map<String,Object> externalTransactionCtx=new HashMap<String,Object>();
  if (UtilValidate.isNotEmpty(order.getTotal())) {
    amountPaid=order.getTotal().getValue();
  }
  if (UtilValidate.isNotEmpty(order.getCreatedTime())) {
    createdTime=EbayStoreHelper.convertDate(order.getCreatedTime().getTime(),locale);
  }
  if (UtilValidate.isNotEmpty(order.getPaidTime())) {
    paidTime=EbayStoreHelper.convertDate(order.getPaidTime().getTime(),locale);
  }
  if (UtilValidate.isNotEmpty(order.getShippedTime())) {
    shippedTime=EbayStoreHelper.convertDate(order.getShippedTime().getTime(),locale);
  }
  if (UtilValidate.isNotEmpty(order.getBuyerUserID())) {
    ebayUserIdBuyer=order.getBuyerUserID();
  }
  if (UtilValidate.isNotEmpty(order.getShippingAddress())) {
    AddressType shippingAddress=order.getShippingAddress();
    shippingAddressMap=EbayStore.getShippingDetail(shippingAddress,locale);
  }
  if (UtilValidate.isNotEmpty(order.getShippingServiceSelected())) {
    ShippingServiceOptionsType shippingServiceSelected=order.getShippingServiceSelected();
    if (UtilValidate.isNotEmpty(shippingServiceSelected.getShippingService())) {
      shippingService=shippingServiceSelected.getShippingService();
    }
    if (UtilValidate.isNotEmpty(shippingServiceSelected.getShippingServiceCost())) {
      shippingServiceCost=shippingServiceSelected.getShippingServiceCost().getValue();
    }
    if (UtilValidate.isNotEmpty(shippingServiceSelected.getShippingInsuranceCost())) {
      insuranceCost=shippingServiceSelected.getShippingInsuranceCost().getValue();
    }
  }
  shippingServiceSelectedCtx.put("shippingService",shippingService);
  shippingServiceSelectedCtx.put("shippingServiceCost",shippingServiceCost);
  shippingServiceSelectedCtx.put("shippingTotalAdditionalCost",insuranceCost);
  if (UtilValidate.isNotEmpty(order.getShippingDetails())) {
    ShippingDetailsType shippingDetail=order.getShippingDetails();
    if (UtilValidate.isNotEmpty(shippingDetail.getInsuranceFee())) {
      insuranceFee=shippingDetail.getInsuranceFee().getValue();
    }
    if (UtilValidate.isNotEmpty(shippingDetail.getInsuranceOption())) {
      insuranceOption=shippingDetail.getInsuranceOption().value();
    }
    if (UtilValidate.isNotEmpty(shippingDetail.isInsuranceWanted())) {
      insuranceWanted=shippingDetail.isInsuranceWanted();
    }
    if (UtilValidate.isNotEmpty(shippingDetail.getSalesTax())) {
      SalesTaxType salesTax=shippingDetail.getSalesTax();
      if (UtilValidate.isNotEmpty(salesTax.getSalesTaxAmount())) {
        salesTaxAmount=salesTax.getSalesTaxAmount().getValue();
      }
      if (UtilValidate.isNotEmpty(salesTax.getSalesTaxPercent())) {
        salesTaxPercent=salesTax.getSalesTaxPercent().doubleValue();
      }
      if (UtilValidate.isNotEmpty(salesTax.getSalesTaxState())) {
        salesTaxState=salesTax.getSalesTaxState();
      }
      if (UtilValidate.isNotEmpty(salesTax.isShippingIncludedInTax())) {
        shippingIncludedInTax=salesTax.isShippingIncludedInTax();
      }
    }
  }
  shippingDetailsCtx.put("insuranceFee",insuranceFee);
  shippingDetailsCtx.put("insuranceOption",insuranceOption);
  shippingDetailsCtx.put("insuranceWanted",insuranceWanted);
  shippingDetailsCtx.put("salesTaxAmount",salesTaxAmount);
  shippingDetailsCtx.put("salesTaxPercent",salesTaxPercent);
  shippingDetailsCtx.put("salesTaxState",salesTaxState);
  shippingDetailsCtx.put("shippingIncludedInTax",shippingIncludedInTax);
  if (UtilValidate.isNotEmpty(order.getCheckoutStatus())) {
    CheckoutStatusType checkoutStatus=order.getCheckoutStatus();
    if (UtilValidate.isNotEmpty(checkoutStatus.getEBayPaymentStatus())) {
      eBayPaymentStatus=checkoutStatus.getEBayPaymentStatus().value();
    }
    if (UtilValidate.isNotEmpty(checkoutStatus.getStatus())) {
      status=checkoutStatus.getStatus().value();
    }
    if (UtilValidate.isNotEmpty(checkoutStatus.getPaymentMethod())) {
      paymentMethod=checkoutStatus.getPaymentMethod().value();
    }
  }
  checkoutStatusCtx.put("eBayPaymentStatus",eBayPaymentStatus);
  checkoutStatusCtx.put("paymentMethodUsed",paymentMethod);
  checkoutStatusCtx.put("completeStatus",status);
  if (UtilValidate.isNotEmpty(order.getExternalTransaction())) {
    ExternalTransactionType[] externalTransactions=order.getExternalTransaction();
    for (int count=0; count < externalTransactions.length; count++) {
      ExternalTransactionType externalTransaction=externalTransactions[count];
      if (UtilValidate.isNotEmpty(externalTransaction.getExternalTransactionID())) {
        externalTransactionId=externalTransaction.getExternalTransactionID();
      }
      if (UtilValidate.isNotEmpty(externalTransaction.getExternalTransactionTime())) {
        externalTransactionTime=EbayStoreHelper.convertDate(externalTransaction.getExternalTransactionTime().getTime(),locale);
      }
      if (UtilValidate.isNotEmpty(externalTransaction.getFeeOrCreditAmount())) {
        feeOrCreditAmount=externalTransaction.getFeeOrCreditAmount().getValue();
      }
      if (UtilValidate.isNotEmpty(externalTransaction.getPaymentOrRefundAmount())) {
        paymentOrRefundAmount=externalTransaction.getPaymentOrRefundAmount().getValue();
      }
    }
  }
  externalTransactionCtx.put("externalTransactionID",externalTransactionId);
  externalTransactionCtx.put("externalTransactionTime",externalTransactionTime);
  externalTransactionCtx.put("feeOrCreditAmount",feeOrCreditAmount);
  externalTransactionCtx.put("paymentOrRefundAmount",paymentOrRefundAmount);
  List<Map<String,Object>> orderItemList=new LinkedList<Map<String,Object>>();
  if (UtilValidate.isNotEmpty(order.getTransactionArray().getTransaction())) {
    TransactionType[] transactions=order.getTransactionArray().getTransaction();
    for (int tranCount=0; tranCount < transactions.length; tranCount++) {
      Map<String,Object> orderItemCtx=new HashMap<String,Object>();
      TransactionType transaction=transactions[tranCount];
      int quantityPurchased=0;
      double transactionPrice=0.0;
      String createdDate=null;
      if (UtilValidate.isNotEmpty(transaction.getQuantityPurchased())) {
        quantityPurchased=transaction.getQuantityPurchased();
      }
      if (UtilValidate.isNotEmpty(transaction.getTransactionPrice())) {
        transactionPrice=transaction.getTransactionPrice().getValue();
      }
      if (UtilValidate.isNotEmpty(transaction.getCreatedDate())) {
        createdDate=EbayStoreHelper.convertDate(transaction.getCreatedDate().getTime(),locale);
      }
      if (UtilValidate.isNotEmpty(transaction.getBuyer().getEmail())) {
        emailBuyer=transaction.getBuyer().getEmail();
      }
      String itemId=null;
      String productId=null;
      double startPrice=0.0;
      String title=null;
      if (UtilValidate.isNotEmpty(transaction.getItem())) {
        ItemType item=transaction.getItem();
        if (UtilValidate.isNotEmpty(item.getSKU())) {
          productId=item.getSKU();
        }
        if (UtilValidate.isNotEmpty(item.getItemID())) {
          itemId=item.getItemID();
        }
        if (UtilValidate.isNotEmpty(item.getStartPrice())) {
          startPrice=item.getStartPrice().getValue();
        }
        if (UtilValidate.isNotEmpty(item.getTitle())) {
          title=item.getTitle();
        }
      }
      orderItemCtx.put("orderId",externalOrderId);
      orderItemCtx.put("closedDate",createdDate);
      orderItemCtx.put("goodIdentificationIdValue",itemId);
      orderItemCtx.put("quantity",quantityPurchased);
      orderItemCtx.put("startPrice",startPrice);
      orderItemCtx.put("title",title);
      orderItemCtx.put("productId",productId);
      orderItemCtx.put("transactionPrice",transactionPrice);
      orderItemList.add(orderItemCtx);
    }
  }
  orderCtx.put("externalId",externalOrderId);
  orderCtx.put("emailBuyer",emailBuyer);
  orderCtx.put("amountPaid",amountPaid);
  orderCtx.put("createdDate",createdTime);
  orderCtx.put("paidTime",paidTime);
  orderCtx.put("shippedTime",shippedTime);
  orderCtx.put("ebayUserIdBuyer",ebayUserIdBuyer);
  orderCtx.put("shippingAddressCtx",shippingAddressMap);
  orderCtx.put("shippingServiceSelectedCtx",shippingServiceSelectedCtx);
  orderCtx.put("shippingDetailsCtx",shippingDetailsCtx);
  orderCtx.put("checkoutStatusCtx",checkoutStatusCtx);
  orderCtx.put("externalTransactionCtx",externalTransactionCtx);
  orderCtx.put("orderItemList",orderItemList);
  return orderCtx;
}
