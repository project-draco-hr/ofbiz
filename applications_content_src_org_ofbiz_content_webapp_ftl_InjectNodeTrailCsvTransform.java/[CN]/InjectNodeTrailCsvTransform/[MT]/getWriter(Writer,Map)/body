{
  final StringBuilder buf=new StringBuilder();
  final Environment env=Environment.getCurrentEnvironment();
  final Map templateCtx=(Map)FreeMarkerWorker.getWrappedObject("context",env);
  final GenericDelegator delegator=(GenericDelegator)FreeMarkerWorker.getWrappedObject("delegator",env);
  final HttpServletRequest request=(HttpServletRequest)FreeMarkerWorker.getWrappedObject("request",env);
  final GenericValue userLogin=(GenericValue)FreeMarkerWorker.getWrappedObject("userLogin",env);
  FreeMarkerWorker.getSiteParameters(request,templateCtx);
  FreeMarkerWorker.overrideWithArgs(templateCtx,args);
  return new LoopWriter(out){
    final String passedCsv=(String)templateCtx.get("nodeTrailCsv");
    @Override public void write(    char cbuf[],    int off,    int len){
      buf.append(cbuf,off,len);
    }
    @Override public void flush() throws IOException {
      out.flush();
    }
    @Override public int onStart() throws TemplateModelException, IOException {
      String csvTrail=null;
      List trail=(List)templateCtx.get("globalNodeTrail");
      if (Debug.infoOn())       Debug.logInfo("in InjectNodeTrailCsv(0), trail:" + trail,module);
      String redo=(String)templateCtx.get("redo");
      if (trail == null || trail.size() == 0 || (redo != null && redo.equalsIgnoreCase("true"))) {
        String thisContentId=null;
        String subContentId=(String)templateCtx.get("subContentId");
        if (Debug.infoOn())         Debug.logInfo("in InjectNodeTrailCsv(0), subContentId:" + subContentId,module);
        String contentId=(String)templateCtx.get("contentId");
        if (Debug.infoOn())         Debug.logInfo("in InjectNodeTrailCsv(0), contentId:" + contentId,module);
        String contentAssocTypeId=(String)templateCtx.get("contentAssocTypeId");
        if (Debug.infoOn())         Debug.logInfo("in InjectNodeTrailCsv(0), contentAssocTypeId:" + contentAssocTypeId,module);
        try {
          if (UtilValidate.isNotEmpty(subContentId)) {
            csvTrail=ContentWorker.getContentAncestryNodeTrailCsv(delegator,subContentId,contentAssocTypeId,"to");
            if (UtilValidate.isNotEmpty(csvTrail))             csvTrail+=",";
            csvTrail+=subContentId;
          }
 else           if (UtilValidate.isNotEmpty(contentId)) {
            csvTrail=ContentWorker.getContentAncestryNodeTrailCsv(delegator,contentId,contentAssocTypeId,"to");
            if (UtilValidate.isNotEmpty(csvTrail))             csvTrail+=",";
            csvTrail+=contentId;
          }
        }
 catch (        GenericEntityException e) {
          throw new RuntimeException("Error getting current content. " + e.toString());
        }
        if (Debug.infoOn())         Debug.logInfo("in InjectNodeTrailCsv(0), csvTrail:" + csvTrail,module);
      }
 else {
        if (UtilValidate.isNotEmpty(passedCsv)) {
          csvTrail=passedCsv;
          int lastComma=passedCsv.lastIndexOf(",");
          String lastPassedContentId=null;
          if (lastComma >= 0) {
            lastPassedContentId=passedCsv.substring(lastComma + 1);
          }
 else {
            lastPassedContentId=passedCsv;
          }
          if (UtilValidate.isNotEmpty(lastPassedContentId)) {
            if (UtilValidate.isNotEmpty(trail)) {
              Map nd=(Map)trail.get(0);
              String firstTrailContentId=(String)nd.get("contentId");
              if (UtilValidate.isNotEmpty(firstTrailContentId) && UtilValidate.isNotEmpty(lastPassedContentId) && firstTrailContentId.equals(lastPassedContentId)) {
                csvTrail+="," + ContentWorker.nodeTrailToCsv(trail.subList(1,trail.size()));
              }
 else {
                csvTrail+="," + ContentWorker.nodeTrailToCsv(trail);
              }
            }
          }
        }
 else {
          csvTrail=ContentWorker.nodeTrailToCsv(trail);
        }
      }
      templateCtx.put("nodeTrailCsv",csvTrail);
      return TransformControl.EVALUATE_BODY;
    }
    @Override public void close() throws IOException {
      templateCtx.put("nodeTrailCsv",passedCsv);
      String wrappedContent=buf.toString();
      out.write(wrappedContent);
    }
  }
;
}
