{
  String firstArg=args.length > 0 ? args[0] : "";
  if ("start-batch".equalsIgnoreCase(firstArg) || "start-debug".equalsIgnoreCase(firstArg) || "stop".equalsIgnoreCase(firstArg)|| "-shutdown".equalsIgnoreCase(firstArg)|| "-status".equalsIgnoreCase(firstArg)) {
    firstArg="start";
  }
  if (firstArg == null || firstArg.trim().length() == 0) {
    firstArg="start";
  }
  String config="org/ofbiz/base/start/" + firstArg + ".properties";
  Properties props=this.getPropertiesFile(config);
  System.out.println("Start.java using configuration file " + config);
  String ofbizHomeTmp=props.getProperty("ofbiz.home",".");
  if (ofbizHomeTmp.equals(".")) {
    ofbizHomeTmp=System.getProperty("user.dir");
    ofbizHomeTmp=ofbizHomeTmp.replace('\\','/');
  }
  ofbizHome=ofbizHomeTmp;
  System.setProperty("ofbiz.home",ofbizHome);
  System.out.println("Set OFBIZ_HOME to - " + ofbizHome);
  logDir=getOfbizHomeProp(props,"ofbiz.log.dir","runtime/logs");
  containerConfig=getOfbizHomeProp(props,"ofbiz.container.config","framework/base/config/ofbiz-containers.xml");
  String serverHost=getProp(props,"ofbiz.admin.host","127.0.0.1");
  String adminPortStr=getProp(props,"ofbiz.admin.port","0");
  adminKey=getProp(props,"ofbiz.admin.key","NA");
  adminAddress=InetAddress.getByName(serverHost);
  int adminPortTmp;
  try {
    adminPortTmp=Integer.parseInt(adminPortStr);
    if (args.length > 0) {
      for (      String arg : args) {
        if (arg.toLowerCase().contains("portoffset=") && !arg.toLowerCase().contains("${portoffset}")) {
          adminPortTmp=adminPortTmp != 0 ? adminPortTmp : 10523;
          adminPortTmp+=Integer.parseInt(arg.split("=")[1]);
        }
      }
    }
  }
 catch (  Exception e) {
    System.out.println("Error while parsing admin port number (so default to 10523) = " + e);
    adminPortTmp=10523;
  }
  adminPort=adminPortTmp;
  String derbyPath=getProp(props,"derby.system.home","runtime/data/derby");
  System.setProperty("derby.system.home",derbyPath);
  if (System.getProperty("ofbiz.enable.hook") != null && System.getProperty("ofbiz.enable.hook").length() > 0) {
    useShutdownHook="true".equalsIgnoreCase(System.getProperty("ofbiz.enable.hook"));
  }
 else   if (props.getProperty("ofbiz.enable.hook") != null && props.getProperty("ofbiz.enable.hook").length() > 0) {
    useShutdownHook="true".equalsIgnoreCase(props.getProperty("ofbiz.enable.hook"));
  }
 else {
    useShutdownHook=true;
  }
  if (System.getProperty("ofbiz.auto.shutdown") != null && System.getProperty("ofbiz.auto.shutdown").length() > 0) {
    shutdownAfterLoad="true".equalsIgnoreCase(System.getProperty("ofbiz.auto.shutdown"));
  }
 else   if (props.getProperty("ofbiz.auto.shutdown") != null && props.getProperty("ofbiz.auto.shutdown").length() > 0) {
    shutdownAfterLoad="true".equalsIgnoreCase(props.getProperty("ofbiz.auto.shutdown"));
  }
 else {
    shutdownAfterLoad=false;
  }
  awtHeadless=getProp(props,"java.awt.headless",null);
  if (awtHeadless != null) {
    System.setProperty("java.awt.headless",awtHeadless);
  }
  splashLogo=props.getProperty("ofbiz.start.splash.logo",null);
  String localeString=props.getProperty("ofbiz.locale.default");
  if (localeString != null && localeString.length() > 0) {
    String locales[]=localeString.split("_");
switch (locales.length) {
case 1:
      Locale.setDefault(new Locale(locales[0]));
    break;
case 2:
  Locale.setDefault(new Locale(locales[0],locales[1]));
break;
case 3:
Locale.setDefault(new Locale(locales[0],locales[1],locales[2]));
}
System.setProperty("user.language",localeString);
}
String tzString=props.getProperty("ofbiz.timeZone.default");
if (tzString != null && tzString.length() > 0) {
TimeZone.setDefault(TimeZone.getTimeZone(tzString));
}
instrumenterClassName=getProp(props,"ofbiz.instrumenterClassName",null);
instrumenterFile=getProp(props,"ofbiz.instrumenterFile",null);
List<Map<String,String>> loadersTmp=new ArrayList<Map<String,String>>();
int currentPosition=1;
Map<String,String> loader=null;
while (true) {
loader=new HashMap<String,String>();
String loaderClass=props.getProperty("ofbiz.start.loader" + currentPosition);
if (loaderClass == null || loaderClass.length() == 0) {
break;
}
 else {
loader.put("class",loaderClass);
loader.put("profiles",props.getProperty("ofbiz.start.loader" + currentPosition + ".loaders"));
loadersTmp.add(Collections.unmodifiableMap(loader));
currentPosition++;
}
}
loaders=Collections.unmodifiableList(loadersTmp);
Integer portOffset=0;
if (args != null) {
for (String argument : args) {
if (argument.startsWith("-")) {
int subIdx=1;
if (argument.startsWith("--")) {
subIdx=2;
}
argument=argument.substring(subIdx);
}
if (argument.indexOf("=") != -1) {
String argumentName=argument.substring(0,argument.indexOf("="));
String argumentVal=argument.substring(argument.indexOf("=") + 1);
if ("portoffset".equalsIgnoreCase(argumentName) && !"${portoffset}".equals(argumentVal)) {
try {
  portOffset=Integer.valueOf(argumentVal);
}
 catch (NumberFormatException e) {
  System.out.println("Error while parsing portoffset (the default value 0 will be used) = " + e);
}
}
}
}
}
this.portOffset=portOffset;
}
