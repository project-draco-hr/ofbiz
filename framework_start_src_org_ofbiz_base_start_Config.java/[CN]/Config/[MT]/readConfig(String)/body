{
  String javaVersion=System.getProperty("java.version");
  String javaVendor=System.getProperty("java.vendor");
  double version=Double.parseDouble(javaVersion.substring(0,javaVersion.indexOf(".") + 2));
  if (REQUIRED_JDK > version) {
    System.err.println("");
    System.err.println("Java Version - " + javaVendor + " "+ javaVersion+ " - is not supported by OFBiz.");
    System.err.println("Please install Java2 SDK " + REQUIRED_JDK + "+");
    System.err.println("");
    System.exit(-1);
  }
  Properties props=this.getPropertiesFile(config);
  System.out.println("Start.java using configuration file " + config);
  if (ofbizHome == null) {
    ofbizHome=props.getProperty("ofbiz.home",".");
    if (ofbizHome.equals(".")) {
      ofbizHome=System.getProperty("user.dir");
      ofbizHome=ofbizHome.replace('\\','/');
      System.out.println("Set OFBIZ_HOME to - " + ofbizHome);
    }
  }
  System.setProperty("ofbiz.home",ofbizHome);
  baseConfig=getOfbizHomeProp(props,"ofbiz.base.config","framework/base/config");
  baseDtd=getOfbizHomeProp(props,"ofbiz.base.schema","framework/base/dtd");
  baseLib=getOfbizHomeProp(props,"ofbiz.base.lib","framework/base/lib");
  baseJar=getOfbizHomeProp(props,"ofbiz.base.jar","framework/base/build/lib/ofbiz-base.jar");
  String reqTJ=getProp(props,"java.tools.jar.required","false");
  requireToolsJar="true".equalsIgnoreCase(reqTJ);
  toolsJar=this.findSystemJar(props,javaVendor,javaVersion,"tools.jar",requireToolsJar);
  String reqCJ=getProp(props,"java.comm.jar.required","false");
  requireCommJar="true".equalsIgnoreCase(reqCJ);
  commJar=this.findSystemJar(props,javaVendor,javaVersion,"comm.jar",requireCommJar);
  logDir=getOfbizHomeProp(props,"ofbiz.log.dir","runtime/logs");
  containerConfig=getOfbizHomeProp(props,"ofbiz.container.config","framework/base/config/ofbiz-containers.xml");
  String serverHost=getProp(props,"ofbiz.admin.host","127.0.0.1");
  String adminPortStr=getProp(props,"ofbiz.admin.port","0");
  adminKey=getProp(props,"ofbiz.admin.key","NA");
  adminAddress=InetAddress.getByName(serverHost);
  try {
    adminPort=Integer.parseInt(adminPortStr);
  }
 catch (  Exception e) {
    adminPort=0;
  }
  String derbyPath=getProp(props,"derby.system.home","runtime/data/derby");
  System.setProperty("derby.system.home",derbyPath);
  String log4jConfig=getProp(props,"log4j.configuration","log4j.xml");
  System.setProperty("log4j.configuration",log4jConfig);
  if (System.getProperty("ofbiz.enable.hook") != null && System.getProperty("ofbiz.enable.hook").length() > 0) {
    useShutdownHook="true".equalsIgnoreCase(System.getProperty("ofbiz.enable.hook"));
  }
 else   if (props.getProperty("ofbiz.enable.hook") != null && props.getProperty("ofbiz.enable.hook").length() > 0) {
    useShutdownHook="true".equalsIgnoreCase(props.getProperty("ofbiz.enable.hook"));
  }
  if (System.getProperty("ofbiz.auto.shutdown") != null && System.getProperty("ofbiz.auto.shutdown").length() > 0) {
    shutdownAfterLoad="true".equalsIgnoreCase(System.getProperty("ofbiz.auto.shutdown"));
  }
 else   if (props.getProperty("ofbiz.auto.shutdown") != null && props.getProperty("ofbiz.auto.shutdown").length() > 0) {
    shutdownAfterLoad="true".equalsIgnoreCase(props.getProperty("ofbiz.auto.shutdown"));
  }
  awtHeadless=getProp(props,"java.awt.headless",null);
  if (awtHeadless != null) {
    System.setProperty("java.awt.headless",awtHeadless);
  }
  splashLogo=props.getProperty("ofbiz.start.splash.logo",null);
  System.setProperty("org.mortbay.jetty.servlet.AbstractSessionManager.24SessionDestroyed","true");
  String localeString=props.getProperty("ofbiz.locale.default");
  if (localeString != null && localeString.length() > 0) {
    String args[]=localeString.split("_");
switch (args.length) {
case 1:
      Locale.setDefault(new Locale(args[0]));
    break;
case 2:
  Locale.setDefault(new Locale(args[0],args[1]));
break;
case 3:
Locale.setDefault(new Locale(args[0],args[1],args[2]));
}
System.setProperty("user.language",localeString);
}
String tzString=props.getProperty("ofbiz.timeZone.default");
if (tzString != null && tzString.length() > 0) {
TimeZone.setDefault(TimeZone.getTimeZone(tzString));
}
instrumenterClassName=getProp(props,"ofbiz.instrumenterClassName",null);
instrumenterFile=getProp(props,"ofbiz.instrumenterFile",null);
loaders=new ArrayList<Map>();
int currentPosition=1;
Map loader=null;
while (true) {
loader=new HashMap<String,String>();
String loaderClass=props.getProperty("ofbiz.start.loader" + currentPosition);
if (loaderClass == null || loaderClass.length() == 0) {
break;
}
 else {
loader.put("class",loaderClass);
loader.put("profiles",props.getProperty("ofbiz.start.loader" + currentPosition + ".loaders"));
loaders.add(loader);
currentPosition++;
}
}
}
