{
  if (!folder.exists() && !folder.isDirectory()) {
    return;
  }
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  File[] componentLoadFiles;
  List<File> ofbizComponents=new ArrayList<File>();
  componentLoadFiles=folder.listFiles(componentLoadFilter);
  if (componentLoadFiles != null && componentLoadFiles.length == 1) {
    File componentLoadFile=componentLoadFiles[0];
    Document document=builder.parse(componentLoadFile);
    Element element=document.getDocumentElement();
    NodeList loadComponents=element.getElementsByTagName("load-component");
    for (int i=0; i < loadComponents.getLength(); i++) {
      Node loadComponent=loadComponents.item(i);
      NamedNodeMap attributes=loadComponent.getAttributes();
      Node componentLocation=attributes.getNamedItem("component-location");
      if (componentLocation == null) {
        continue;
      }
      ofbizComponents.add(new File(new File(folder,componentLocation.getNodeValue()),"ofbiz-component.xml"));
    }
  }
 else {
    File[] componentFolders=folder.listFiles(folderFilter);
    for (    File componentFolder : componentFolders) {
      File ofbizComponent=new File(componentFolder,"ofbiz-component.xml");
      if (ofbizComponent.exists()) {
        ofbizComponents.add(ofbizComponent);
      }
    }
  }
  String nativeLibExt=System.mapLibraryName("someLib").replace("someLib","").toLowerCase();
  for (  File ofbizComponent : ofbizComponents) {
    Document document=builder.parse(ofbizComponent);
    Element element=document.getDocumentElement();
    if (element.hasAttribute("enabled")) {
      if ("false".equals(element.getAttribute("enabled"))) {
        continue;
      }
    }
    NodeList classpathEntries=element.getElementsByTagName("classpath");
    for (int i=0; i < classpathEntries.getLength(); i++) {
      Node classpathEntry=classpathEntries.item(i);
      NamedNodeMap attributes=classpathEntry.getAttributes();
      Node type=attributes.getNamedItem("type");
      if (type == null || !("jar".equals(type.getNodeValue()) || "dir".equals(type.getNodeValue()))) {
        continue;
      }
      Node location=attributes.getNamedItem("location");
      String locationValue=location.getNodeValue();
      locationValue=locationValue.replace('\\','/');
      if (locationValue.startsWith("/")) {
        locationValue=locationValue.substring(1);
      }
      String dirLoc=locationValue;
      if (dirLoc.endsWith("/*")) {
        dirLoc=locationValue.substring(0,locationValue.length() - 2);
      }
      String fileNameSeparator=("\\".equals(File.separator) ? "\\" + File.separator : File.separator);
      dirLoc=dirLoc.replaceAll("/+|\\\\+",fileNameSeparator);
      File path=new File(ofbizComponent.getParent(),dirLoc);
      if (path.exists()) {
        if (path.isDirectory()) {
          if ("dir".equals(type.getNodeValue())) {
            classpath.addComponent(path.toString());
          }
          boolean containsNativeLibs=false;
          for (          File file : path.listFiles()) {
            String fileName=file.getName().toLowerCase();
            if (fileName.endsWith(".jar") || fileName.endsWith(".zip")) {
              classpath.addComponent(file);
            }
 else             if (fileName.endsWith(nativeLibExt)) {
              containsNativeLibs=true;
            }
          }
          if (containsNativeLibs) {
            libraryPath.addComponent(path);
          }
        }
 else {
          classpath.addComponent(path.toString());
        }
      }
    }
  }
}
