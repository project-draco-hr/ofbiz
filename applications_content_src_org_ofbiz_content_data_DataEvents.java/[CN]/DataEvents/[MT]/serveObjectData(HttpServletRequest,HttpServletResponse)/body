{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  HttpSession session=request.getSession();
  Locale locale=UtilHttp.getLocale(request);
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  String userAgent=request.getHeader("User-Agent");
  Map<String,Object> httpParams=UtilHttp.getParameterMap(request);
  String contentId=(String)httpParams.get("contentId");
  if (UtilValidate.isEmpty(contentId)) {
    String errorMsg="Required parameter contentId not found!";
    Debug.logError(errorMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errorMsg);
    return "error";
  }
  String permissionService=UtilProperties.getPropertyValue("content.properties","stream.permission.service","genericContentPermission");
  GenericValue content;
  try {
    content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  if (content == null) {
    String errorMsg="No content found for Content ID: " + contentId;
    Debug.logError(errorMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errorMsg);
    return "error";
  }
  String dataResourceId=content.getString("dataResourceId");
  if (UtilValidate.isEmpty(dataResourceId)) {
    String errorMsg="No Data Resource found for Content ID: " + contentId;
    Debug.logError(errorMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errorMsg);
    return "error";
  }
  GenericValue dataResource;
  try {
    dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  if (dataResource == null) {
    String errorMsg="No Data Resource found for ID: " + dataResourceId;
    Debug.logError(errorMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errorMsg);
    return "error";
  }
  String isPublic=dataResource.getString("isPublic");
  if (UtilValidate.isEmpty(isPublic)) {
    isPublic="N";
  }
  if (!"Y".equalsIgnoreCase(isPublic)) {
    Map<String,? extends Object> permSvcCtx=UtilMisc.toMap("userLogin",userLogin,"locale",locale,"mainAction","VIEW","contentId",contentId);
    Map<String,Object> permSvcResp;
    try {
      permSvcResp=dispatcher.runSync(permissionService,permSvcCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
      return "error";
    }
    if (ServiceUtil.isError(permSvcResp)) {
      String errorMsg=ServiceUtil.getErrorMessage(permSvcResp);
      Debug.logError(errorMsg,module);
      request.setAttribute("_ERROR_MESSAGE_",errorMsg);
      return "error";
    }
    Boolean hasPermission=(Boolean)permSvcResp.get("hasPermission");
    if (!hasPermission.booleanValue()) {
      String errorMsg=(String)permSvcResp.get("failMessage");
      Debug.logError(errorMsg,module);
      request.setAttribute("_ERROR_MESSAGE_",errorMsg);
      return "error";
    }
  }
  String contextRoot=(String)request.getAttribute("_CONTEXT_ROOT_");
  String webSiteId=(String)session.getAttribute("webSiteId");
  String dataName=dataResource.getString("dataResourceName");
  String mimeType=DataResourceWorker.getMimeType(dataResource);
  if (userAgent.indexOf("MSIE") > -1) {
    Debug.logInfo("Found MSIE changing mime type from - " + mimeType,module);
    mimeType="application/octet-stream";
  }
  String https="false";
  String protocol=request.getProtocol();
  if ("https".equalsIgnoreCase(protocol)) {
    https="true";
  }
  Map<String,Object> resourceData;
  try {
    resourceData=DataResourceWorker.getDataResourceStream(dataResource,https,webSiteId,locale,contextRoot,false);
  }
 catch (  IOException e) {
    Debug.logError(e,"Error getting DataResource stream",module);
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
catch (  GeneralException e) {
    Debug.logError(e,"Error getting DataResource stream",module);
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  InputStream stream=null;
  Long length=null;
  if (resourceData != null) {
    stream=(InputStream)resourceData.get("stream");
    length=(Long)resourceData.get("length");
  }
  Debug.logInfo("Got resource data stream: " + length + " bytes",module);
  if (stream != null && length != null) {
    try {
      UtilHttp.streamContentToBrowser(response,stream,length.intValue(),mimeType,dataName);
    }
 catch (    IOException e) {
      Debug.logError(e,"Unable to write content to browser",module);
      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
      return "io-error";
    }
  }
 else {
    String errorMsg="No data is available.";
    Debug.logError(errorMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errorMsg);
    return "error";
  }
  return "success";
}
