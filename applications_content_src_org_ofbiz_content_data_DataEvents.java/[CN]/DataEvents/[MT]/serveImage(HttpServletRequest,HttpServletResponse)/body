{
  HttpSession session=request.getSession();
  ServletContext application=session.getServletContext();
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  Map<String,Object> parameters=UtilHttp.getParameterMap(request);
  Debug.logInfo("Img UserAgent - " + request.getHeader("User-Agent"),module);
  String dataResourceId=(String)parameters.get("imgId");
  if (UtilValidate.isEmpty(dataResourceId)) {
    String errorMsg="Error getting image record from db: " + " dataResourceId is empty";
    Debug.logError(errorMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errorMsg);
    return "error";
  }
  try {
    GenericValue dataResource=delegator.findOne("DataResource",UtilMisc.toMap("dataResourceId",dataResourceId),true);
    if (!"Y".equals(dataResource.getString("isPublic"))) {
      GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
      if (userLogin == null) {
        String errorMsg="You must be logged in to download the Data Resource with ID [" + dataResourceId + "]";
        Debug.logError(errorMsg,module);
        request.setAttribute("_ERROR_MESSAGE_",errorMsg);
        return "error";
      }
      List<GenericValue> contentAndRoleList=delegator.findByAnd("ContentAndRole",UtilMisc.toMap("partyId",userLogin.get("partyId"),"dataResourceId",dataResourceId));
      if (contentAndRoleList.size() == 0) {
        String errorMsg="You do not have permission to download the Data Resource with ID [" + dataResourceId + "], ie you are not associated with it.";
        Debug.logError(errorMsg,module);
        request.setAttribute("_ERROR_MESSAGE_",errorMsg);
        return "error";
      }
    }
    String mimeType=DataResourceWorker.getMimeType(dataResource);
    String userAgent=request.getHeader("User-Agent");
    if (userAgent.indexOf("MSIE") > -1) {
      Debug.logInfo("Found MSIE changing mime type from - " + mimeType,module);
      mimeType="application/octet-stream";
    }
    if (mimeType != null) {
      response.setContentType(mimeType);
    }
    OutputStream os=response.getOutputStream();
    DataResourceWorker.streamDataResource(os,delegator,dataResourceId,"",application.getInitParameter("webSiteId"),UtilHttp.getLocale(request),application.getRealPath("/"));
    os.flush();
  }
 catch (  GenericEntityException e) {
    String errMsg="Error downloading digital product content: " + e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  GeneralException e) {
    String errMsg="Error downloading digital product content: " + e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  IOException e) {
    String errMsg="Error downloading digital product content: " + e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}
