{
  Locale locale=(Locale)context.get("locale");
  try {
    GenericDelegator delegator=dctx.getDelegator();
    LocalDispatcher dispatcher=dctx.getDispatcher();
    List selectResult=(List)context.get("selectResult");
    String webSiteUrl=(String)context.get("webSiteUrl");
    String imageUrl=(String)context.get("imageUrl");
    String trackingCodeId=(String)context.get("trackingCodeId");
    List productsList=delegator.findByCondition("Product",new EntityExpr("productId",EntityOperator.IN,selectResult),null,null);
    if (UtilValidate.isEmpty(trackingCodeId) || "_NA_".equals(trackingCodeId)) {
      trackingCodeId="";
    }
 else {
      trackingCodeId="?atc=" + trackingCodeId;
    }
    try {
      Document itemDocument=UtilXml.makeEmptyXmlDocument("AddItemRequest");
      Element itemRequestElem=itemDocument.getDocumentElement();
      itemRequestElem.setAttribute("xmlns","urn:ebay:apis:eBLBaseComponents");
      dataItemsXml.append(xmlHeader);
      Iterator productsListItr=productsList.iterator();
      while (productsListItr.hasNext()) {
        GenericValue prod=(GenericValue)productsListItr.next();
        String link=webSiteUrl + "/control/product/~product_id=" + prod.getString("productId")+ trackingCodeId;
        String title=parseText(prod.getString("productName"));
        String description=parseText(prod.getString("description"));
        String image_link="";
        if (UtilValidate.isNotEmpty(prod.getString("largeImageUrl"))) {
          image_link=imageUrl + prod.getString("largeImageUrl");
        }
        Element requesterCredentialsElem=UtilXml.addChildElement(itemRequestElem,"RequesterCredentials",itemDocument);
        UtilXml.addChildElementValue(requesterCredentialsElem,"eBayAuthToken",token,itemDocument);
        Element itemElem=UtilXml.addChildElement(itemRequestElem,"Item",itemDocument);
        UtilXml.addChildElementValue(itemElem,"Country","US",itemDocument);
        UtilXml.addChildElementValue(itemElem,"Location","New York",itemDocument);
        UtilXml.addChildElementValue(itemElem,"Currency","USD",itemDocument);
        UtilXml.addChildElementValue(itemElem,"SKU",prod.getString("productId"),itemDocument);
        UtilXml.addChildElementValue(itemElem,"Title",title,itemDocument);
        UtilXml.addChildElementValue(itemElem,"Description",title,itemDocument);
        UtilXml.addChildElementValue(itemElem,"ListingDuration","Days_1",itemDocument);
        UtilXml.addChildElementValue(itemElem,"Quantity","3",itemDocument);
        UtilXml.addChildElementValue(itemElem,"PaymentMethods","AmEx",itemDocument);
        Element primaryCatElem=UtilXml.addChildElement(itemElem,"PrimaryCategory",itemDocument);
        UtilXml.addChildElementValue(primaryCatElem,"CategoryID","20118",itemDocument);
        Element startPriceElem=UtilXml.addChildElementValue(itemElem,"StartPrice","1.00",itemDocument);
        startPriceElem.setAttribute("currencyID","USD");
      }
      OutputStream os=new ByteArrayOutputStream();
      OutputFormat format=new OutputFormat();
      format.setOmitDocumentType(true);
      format.setOmitXMLDeclaration(true);
      format.setIndenting(false);
      XMLSerializer serializer=new XMLSerializer(os,format);
      serializer.asDOMSerializer();
      serializer.serialize(itemDocument.getDocumentElement());
      dataItemsXml.append(os.toString());
    }
 catch (    Exception e) {
      Debug.logError("Exception during building data items to eBay",module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToEbay.exceptionDuringBuildingDataItemsToEbay",locale));
    }
  }
 catch (  Exception e) {
    Debug.logError("Exception during building data items to eBay",module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToEbay.exceptionDuringBuildingDataItemsToEbay",locale));
  }
  return ServiceUtil.returnSuccess();
}
