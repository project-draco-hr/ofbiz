{
  Locale locale=(Locale)context.get("locale");
  try {
    Document transDoc=UtilXml.makeEmptyXmlDocument("GetSellerTransactionsRequest");
    Element transElem=transDoc.getDocumentElement();
    transElem.setAttribute("xmlns","urn:ebay:apis:eBLBaseComponents");
    dataItemsXml.append(xmlHeader);
    Element requesterCredentialsElem=UtilXml.addChildElement(transElem,"RequesterCredentials",transDoc);
    UtilXml.addChildElementValue(requesterCredentialsElem,"eBayAuthToken",token,transDoc);
    Timestamp end=new Timestamp(System.currentTimeMillis());
    Timestamp start=UtilDateTime.getDayEnd(end,-1);
    UtilXml.addChildElementValue(transElem,"DetailLevel","ReturnAll",transDoc);
    UtilXml.addChildElementValue(transElem,"ModTimeFrom",start.toString(),transDoc);
    UtilXml.addChildElementValue(transElem,"ModTimeTo",end.toString(),transDoc);
    OutputStream os=new ByteArrayOutputStream();
    OutputFormat format=new OutputFormat();
    format.setOmitDocumentType(true);
    format.setOmitXMLDeclaration(true);
    format.setIndenting(false);
    XMLSerializer serializer=new XMLSerializer(os,format);
    serializer.asDOMSerializer();
    serializer.serialize(transDoc.getDocumentElement());
    dataItemsXml.append(os.toString());
  }
 catch (  Exception e) {
    Debug.logError("Exception during building data items to eBay",module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToEbay.exceptionDuringBuildingDataItemsToEbay",locale));
  }
  return ServiceUtil.returnSuccess();
}
