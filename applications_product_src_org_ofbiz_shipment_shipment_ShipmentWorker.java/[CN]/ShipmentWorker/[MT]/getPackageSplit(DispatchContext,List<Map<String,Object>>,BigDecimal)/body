{
  List<Map<String,BigDecimal>> packages=FastList.newInstance();
  if (UtilValidate.isNotEmpty(shippableItemInfo)) {
    for (    Map<String,Object> itemInfo : shippableItemInfo) {
      long pieces=((Long)itemInfo.get("piecesIncluded")).longValue();
      BigDecimal totalQuantity=(BigDecimal)itemInfo.get("quantity");
      BigDecimal totalWeight=(BigDecimal)itemInfo.get("weight");
      String productId=(String)itemInfo.get("productId");
      if (pieces < 1) {
        pieces=1;
      }
      BigDecimal weight=totalWeight.divide(BigDecimal.valueOf(pieces),generalRounding);
      for (int z=1; z <= totalQuantity.intValue(); z++) {
        BigDecimal partialQty=pieces > 1 ? BigDecimal.ONE.divide(BigDecimal.valueOf(pieces),generalRounding) : BigDecimal.ONE;
        for (long x=0; x < pieces; x++) {
          if (weight.compareTo(maxWeight) >= 0) {
            Map<String,BigDecimal> newPackage=FastMap.newInstance();
            newPackage.put(productId,partialQty);
            packages.add(newPackage);
          }
 else           if (totalWeight.compareTo(BigDecimal.ZERO) > 0) {
            if (packages.size() == 0) {
              packages.add(FastMap.<String,BigDecimal>newInstance());
            }
            boolean addedToPackage=false;
            for (            Map<String,BigDecimal> packageMap : packages) {
              if (!addedToPackage) {
                BigDecimal packageWeight=calcPackageWeight(dctx,packageMap,shippableItemInfo,weight);
                if (packageWeight.compareTo(maxWeight) <= 0) {
                  BigDecimal qty=(BigDecimal)packageMap.get(productId);
                  qty=UtilValidate.isEmpty(qty) ? BigDecimal.ZERO : qty;
                  packageMap.put(productId,qty.add(partialQty));
                  addedToPackage=true;
                }
              }
            }
            if (!addedToPackage) {
              Map<String,BigDecimal> packageMap=FastMap.newInstance();
              packageMap.put(productId,partialQty);
              packages.add(packageMap);
            }
          }
        }
      }
    }
  }
  return packages;
}
