{
  String partyIdFrom=(String)partyRelationshipValues.get("partyIdFrom");
  String partyIdTo=(String)partyRelationshipValues.get("partyIdTo");
  String roleTypeIdFrom=(String)partyRelationshipValues.get("roleTypeIdFrom");
  String roleTypeIdTo=(String)partyRelationshipValues.get("roleTypeIdTo");
  String partyRelationshipTypeId=(String)partyRelationshipValues.get("partyRelationshipTypeId");
  Timestamp fromDate=UtilDateTime.nowTimestamp();
  List<EntityCondition> condList=FastList.newInstance();
  condList.add(EntityCondition.makeCondition("partyIdFrom",partyIdFrom));
  condList.add(EntityCondition.makeCondition("partyIdTo",partyIdTo));
  condList.add(EntityCondition.makeCondition("roleTypeIdFrom",roleTypeIdFrom));
  condList.add(EntityCondition.makeCondition("roleTypeIdTo",roleTypeIdTo));
  condList.add(EntityCondition.makeCondition("partyRelationshipTypeId",partyRelationshipTypeId));
  condList.add(EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,fromDate));
  EntityCondition thruCond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("thruDate",null),EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN,fromDate)),EntityOperator.OR);
  condList.add(thruCond);
  EntityCondition condition=EntityCondition.makeCondition(condList);
  List<GenericValue> partyRelationships=null;
  try {
    partyRelationships=EntityQuery.use(delegator).from("PartyRelationship").where(condition).queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem finding PartyRelationships. ",module);
    return null;
  }
  if (UtilValidate.isNotEmpty(partyRelationships)) {
    return partyRelationships;
  }
 else {
    return null;
  }
}
