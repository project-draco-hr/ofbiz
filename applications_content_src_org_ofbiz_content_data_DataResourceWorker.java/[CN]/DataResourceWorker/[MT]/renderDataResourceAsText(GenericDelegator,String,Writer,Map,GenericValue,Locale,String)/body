{
  if (templateContext == null) {
    templateContext=new HashMap();
  }
  if (UtilValidate.isEmpty(mimeTypeId)) {
    mimeTypeId="text/html";
  }
  if (!mimeTypeId.startsWith("text/")) {
    throw new GeneralException("The desired mime-type is not a text type, cannot render as text: " + mimeTypeId);
  }
  GenericValue dataResource=null;
  if (view != null) {
    String entityName=view.getEntityName();
    dataResource=delegator.makeValue("DataResource",null);
    if ("DataResource".equals(entityName)) {
      dataResource.setAllFields(view,true,null,null);
    }
 else {
      dataResource.setAllFields(view,true,"dr",null);
    }
    dataResourceId=dataResource.getString("dataResourceId");
    if (UtilValidate.isEmpty(dataResourceId)) {
      throw new GeneralException("The dataResourceId [" + dataResourceId + "] is empty.");
    }
  }
  if (dataResource == null || dataResource.isEmpty()) {
    if (dataResourceId == null) {
      throw new GeneralException("DataResourceId is null");
    }
    dataResource=delegator.findByPrimaryKey("DataResource",UtilMisc.toMap("dataResourceId",dataResourceId));
  }
  if (dataResource == null || dataResource.isEmpty()) {
    throw new GeneralException("DataResource not found with id=" + dataResourceId);
  }
  String drMimeTypeId=dataResource.getString("mimeTypeId");
  if (UtilValidate.isEmpty(drMimeTypeId)) {
    drMimeTypeId="text/plain";
  }
  String dataTemplateTypeId=dataResource.getString("dataTemplateTypeId");
  if (UtilValidate.isEmpty(dataTemplateTypeId) || "NONE".equals(dataTemplateTypeId)) {
    writeDataResourceText(dataResource,mimeTypeId,locale,templateContext,delegator,out);
  }
 else {
    String subContentId=(String)templateContext.get("subContentId");
    if (UtilValidate.isNotEmpty(subContentId)) {
      templateContext.put("contentId",subContentId);
      templateContext.put("subContentId",null);
    }
    String templateText=getDataResourceText(dataResource,mimeTypeId,locale,templateContext,delegator);
    templateContext.put("mimeTypeId",null);
    if ("FTL".equals(dataTemplateTypeId)) {
      try {
        FreeMarkerWorker.renderTemplate("DataResource:" + dataResourceId,templateText,templateContext,out);
      }
 catch (      TemplateException e) {
        throw new GeneralException("Error rendering FTL template",e);
      }
    }
 else {
      throw new GeneralException("The dataTemplateTypeId [" + dataTemplateTypeId + "] is not yet supported");
    }
  }
}
