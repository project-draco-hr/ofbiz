{
  String errorMsg=null;
  String parentCategoryId=(String)categoryNode.get("id");
  String currentDataCategoryId=null;
  int sz=categoryTypeIds.size();
  if (depth >= 0 && (sz - depth) > 0) {
    currentDataCategoryId=categoryTypeIds.get(sz - depth - 1);
  }
  List<GenericValue> categoryValues=EntityQuery.use(delegator).from("DataCategory").where("parentCategoryId",parentCategoryId).cache().queryList();
  categoryNode.put("count",Integer.valueOf(categoryValues.size()));
  List<Map<String,Object>> subCategoryIds=new LinkedList<Map<String,Object>>();
  for (  GenericValue category : categoryValues) {
    String id=(String)category.get("dataCategoryId");
    String categoryName=(String)category.get("categoryName");
    Map<String,Object> newNode=new HashMap<String,Object>();
    newNode.put("id",id);
    newNode.put("name",categoryName);
    errorMsg=getDataCategoryMap(delegator,depth + 1,newNode,categoryTypeIds,getAll);
    if (errorMsg != null)     break;
    subCategoryIds.add(newNode);
  }
  if (parentCategoryId == null || parentCategoryId.equals("ROOT") || (currentDataCategoryId != null && currentDataCategoryId.equals(parentCategoryId)) || getAll) {
    categoryNode.put("kids",subCategoryIds);
  }
  return errorMsg;
}
