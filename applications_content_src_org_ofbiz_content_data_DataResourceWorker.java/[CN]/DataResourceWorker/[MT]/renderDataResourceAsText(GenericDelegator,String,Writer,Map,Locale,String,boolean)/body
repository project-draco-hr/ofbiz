{
  if (dataResourceId == null) {
    throw new GeneralException("Cannot lookup data resource with for a null dataResourceId");
  }
  if (templateContext == null) {
    templateContext=FastMap.newInstance();
  }
  if (UtilValidate.isEmpty(targetMimeTypeId)) {
    targetMimeTypeId="text/html";
  }
  if (locale == null) {
    locale=Locale.getDefault();
  }
  if (cache) {
    String disableCache=UtilProperties.getPropertyValue("content","disable.ftl.template.cache");
    if (disableCache == null || !disableCache.equalsIgnoreCase("true")) {
      Template cachedTemplate=FreeMarkerWorker.getTemplateCached(dataResourceId);
      if (cachedTemplate != null) {
        try {
          String subContentId=(String)templateContext.get("subContentId");
          if (UtilValidate.isNotEmpty(subContentId)) {
            templateContext.put("contentId",subContentId);
            templateContext.put("subContentId",null);
            templateContext.put("globalNodeTrail",null);
          }
          FreeMarkerWorker.renderTemplateCached(cachedTemplate,templateContext,out);
        }
 catch (        TemplateException e) {
          Debug.logError("Error rendering FTL template. " + e.getMessage(),module);
          throw new GeneralException("Error rendering FTL template",e);
        }
        return;
      }
    }
  }
  if (!targetMimeTypeId.startsWith("text/")) {
    throw new GeneralException("The desired mime-type is not a text type, cannot render as text: " + targetMimeTypeId);
  }
  GenericValue dataResource=null;
  if (cache) {
    dataResource=delegator.findByPrimaryKeyCache("DataResource",UtilMisc.toMap("dataResourceId",dataResourceId));
  }
 else {
    dataResource=delegator.findByPrimaryKey("DataResource",UtilMisc.toMap("dataResourceId",dataResourceId));
  }
  if (dataResource == null) {
    throw new GeneralException("No data resource object found for dataResourceId: [" + dataResourceId + "]");
  }
  String dataTemplateTypeId=dataResource.getString("dataTemplateTypeId");
  if (UtilValidate.isEmpty(dataTemplateTypeId) || "NONE".equals(dataTemplateTypeId)) {
    DataResourceWorker.writeDataResourceText(dataResource,targetMimeTypeId,locale,templateContext,delegator,out,true);
  }
 else {
    templateContext.put("mimeTypeId",targetMimeTypeId);
    if ("FTL".equals(dataTemplateTypeId)) {
      try {
        String templateText=getDataResourceText(dataResource,targetMimeTypeId,locale,templateContext,delegator,cache);
        FreeMarkerWorker.renderTemplate("DataResource:" + dataResourceId,templateText,templateContext,out);
      }
 catch (      TemplateException e) {
        throw new GeneralException("Error rendering FTL template",e);
      }
    }
 else     if ("SCREEN_COMBINED".equals(dataTemplateTypeId)) {
      try {
        MapStack context=MapStack.create(templateContext);
        context.put("locale",locale);
        Map prc=FastMap.newInstance();
        String textData=(String)context.get("textData");
        String mapKey=(String)context.get("mapKey");
        if (mapKey != null) {
          prc.put(mapKey,textData);
        }
        prc.put("body",textData);
        context.put("preRenderedContent",prc);
        ScreenRenderer screens=(ScreenRenderer)context.get("screens");
        if (screens == null) {
          screens=new ScreenRenderer(out,context,new HtmlScreenRenderer());
          screens.getContext().put("screens",screens);
        }
        ScreenStringRenderer renderer=screens.getScreenStringRenderer();
        String combinedName=(String)dataResource.get("objectInfo");
        ModelScreen modelScreen=ScreenFactory.getScreenFromLocation(combinedName);
        modelScreen.renderScreenString(out,context,renderer);
      }
 catch (      SAXException e) {
        throw new GeneralException("Error rendering Screen template",e);
      }
catch (      ParserConfigurationException e) {
        throw new GeneralException("Error rendering Screen template",e);
      }
    }
 else {
      throw new GeneralException("The dataTemplateTypeId [" + dataTemplateTypeId + "] is not yet supported");
    }
  }
}
