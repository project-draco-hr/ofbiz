{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String partyId=request.getParameter("partyId");
  String onclickFunction=request.getParameter("onclickFunction");
  String additionParam=request.getParameter("additionParam");
  String hrefString=request.getParameter("hrefString");
  String hrefString2=request.getParameter("hrefString2");
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put("delegator",delegator);
  paramMap.put("partyId",partyId);
  paramMap.put("onclickFunction",onclickFunction);
  paramMap.put("additionParam",additionParam);
  paramMap.put("hrefString",hrefString);
  paramMap.put("hrefString2",hrefString2);
  List<Map<String,Object>> categoryList=new ArrayList<Map<String,Object>>();
  try {
    categoryList.addAll(getCurrentEmployeeDetails(paramMap));
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
    return "error";
  }
  try {
    GenericValue partyGroup=EntityQuery.use(delegator).from("PartyGroup").where("partyId",partyId).queryOne();
    if (UtilValidate.isNotEmpty(partyGroup)) {
      paramMap.put("partyGroup",partyGroup);
      categoryList.addAll(getChildComps(paramMap));
      categoryList.addAll(getEmployeeInComp(paramMap));
    }
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
    return "error";
  }
  request.setAttribute("hrTree",categoryList);
  return "success";
}
