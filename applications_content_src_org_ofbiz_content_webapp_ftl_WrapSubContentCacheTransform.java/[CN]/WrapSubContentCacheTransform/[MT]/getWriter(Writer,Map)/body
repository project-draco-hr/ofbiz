{
  final StringBuilder buf=new StringBuilder();
  final Environment env=Environment.getCurrentEnvironment();
  Map envContext=FreeMarkerWorker.getWrappedObject("context",env);
  final Map templateCtx;
  if (envContext == null) {
    templateCtx=FreeMarkerWorker.createEnvironmentMap(env);
  }
 else {
    templateCtx=envContext;
  }
  final LocalDispatcher dispatcher=FreeMarkerWorker.getWrappedObject("dispatcher",env);
  final Delegator delegator=FreeMarkerWorker.getWrappedObject("delegator",env);
  final HttpServletRequest request=FreeMarkerWorker.getWrappedObject("request",env);
  FreeMarkerWorker.getSiteParameters(request,templateCtx);
  final Map savedValuesUp=FastMap.newInstance();
  FreeMarkerWorker.saveContextValues(templateCtx,upSaveKeyNames,savedValuesUp);
  FreeMarkerWorker.overrideWithArgs(templateCtx,args);
  final String wrapTemplateId=(String)templateCtx.get("wrapTemplateId");
  final GenericValue userLogin=FreeMarkerWorker.getWrappedObject("userLogin",env);
  List trail=(List)templateCtx.get("globalNodeTrail");
  String contentAssocPredicateId=(String)templateCtx.get("contentAssocPredicateId");
  String strNullThruDatesOnly=(String)templateCtx.get("nullThruDatesOnly");
  Boolean nullThruDatesOnly=(strNullThruDatesOnly != null && strNullThruDatesOnly.equalsIgnoreCase("true")) ? Boolean.TRUE : Boolean.FALSE;
  GenericValue val=null;
  try {
    val=ContentWorker.getCurrentContent(delegator,trail,userLogin,templateCtx,nullThruDatesOnly,contentAssocPredicateId);
  }
 catch (  GeneralException e) {
    throw new RuntimeException("Error getting current content. " + e.toString());
  }
  final GenericValue view=val;
  String dataResourceId=null;
  try {
    dataResourceId=(String)view.get("drDataResourceId");
  }
 catch (  Exception e) {
    dataResourceId=(String)view.get("dataResourceId");
  }
  String subContentIdSub=(String)view.get("contentId");
  String subDataResourceTypeId=(String)templateCtx.get("subDataResourceTypeId");
  if (UtilValidate.isEmpty(subDataResourceTypeId)) {
    try {
      subDataResourceTypeId=(String)view.get("drDataResourceTypeId");
    }
 catch (    Exception e) {
    }
  }
  final Map savedValues=FastMap.newInstance();
  FreeMarkerWorker.saveContextValues(templateCtx,saveKeyNames,savedValues);
  String mimeTypeId=ContentWorker.getMimeTypeId(delegator,view,templateCtx);
  templateCtx.put("drDataResourceId",dataResourceId);
  templateCtx.put("mimeTypeId",mimeTypeId);
  templateCtx.put("dataResourceId",dataResourceId);
  templateCtx.put("subContentIdSub",subContentIdSub);
  templateCtx.put("subDataResourceTypeId",subDataResourceTypeId);
  templateCtx.put("wrapTemplateId",null);
  return new Writer(out){
    @Override public void write(    char cbuf[],    int off,    int len){
      buf.append(cbuf,off,len);
    }
    @Override public void flush() throws IOException {
      out.flush();
    }
    @Override public void close() throws IOException {
      FreeMarkerWorker.reloadValues(templateCtx,savedValues,env);
      String wrappedContent=buf.toString();
      if (UtilValidate.isNotEmpty(wrapTemplateId)) {
        templateCtx.put("wrappedContent",wrappedContent);
        Map templateRoot=null;
        Map templateRootTemplate=(Map)templateCtx.get("templateRootTemplate");
        if (templateRootTemplate == null) {
          Map templateRootTmp=FreeMarkerWorker.createEnvironmentMap(env);
          templateRoot=UtilMisc.makeMapWritable(templateRootTmp);
          templateCtx.put("templateRootTemplate",templateRootTmp);
        }
 else {
          templateRoot=UtilMisc.makeMapWritable(templateRootTemplate);
        }
        templateRoot.put("context",templateCtx);
        String mimeTypeId=(String)templateCtx.get("mimeTypeId");
        Locale locale=null;
        try {
          ContentWorker.renderContentAsText(dispatcher,delegator,wrapTemplateId,out,templateRoot,locale,mimeTypeId,null,null,true);
        }
 catch (        IOException e) {
          Debug.logError(e,"Error rendering content" + e.getMessage(),module);
          throw new IOException("Error rendering content" + e.toString());
        }
catch (        GeneralException e2) {
          Debug.logError(e2,"Error rendering content" + e2.getMessage(),module);
          throw new IOException("Error rendering content" + e2.toString());
        }
        FreeMarkerWorker.reloadValues(templateCtx,savedValuesUp,env);
      }
    }
  }
;
}
