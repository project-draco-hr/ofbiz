{
  Object newValue=null;
  if (this.parsedGroovyScript != null) {
    newValue=InvokerHelper.createScript(this.parsedGroovyScript,GroovyUtil.getBinding(methodContext.getEnvMap())).run();
  }
 else   if (!this.fromField.isEmpty()) {
    newValue=this.fromField.get(methodContext);
    if (Debug.verboseOn())     Debug.logVerbose("In screen getting value for field from [" + this.fromField.toString() + "]: "+ newValue,module);
  }
 else   if (!this.valueExdr.isEmpty()) {
    newValue=methodContext.expandString(this.valueExdr);
  }
  if (ObjectType.isEmpty(newValue) && !this.defaultExdr.isEmpty()) {
    newValue=methodContext.expandString(this.defaultExdr);
  }
  if (!setIfNull && newValue == null) {
    if (Debug.verboseOn())     Debug.logVerbose("Field value not found (null) with name [" + fromField + "] and value ["+ valueExdr+ "], and there was not default value, not setting field",module);
    return true;
  }
  if (!setIfEmpty && ObjectType.isEmpty(newValue)) {
    if (Debug.verboseOn())     Debug.logVerbose("Field value not found (empty) with name [" + fromField + "] and value ["+ valueExdr+ "], and there was not default value, not setting field",module);
    return true;
  }
  if (UtilValidate.isNotEmpty(this.type)) {
    if ("NewMap".equals(this.type)) {
      newValue=FastMap.newInstance();
    }
 else     if ("NewList".equals(this.type)) {
      newValue=FastList.newInstance();
    }
 else {
      try {
        newValue=ObjectType.simpleTypeConvert(newValue,this.type,null,methodContext.getTimeZone(),methodContext.getLocale(),true);
      }
 catch (      GeneralException e) {
        String errMsg="Could not convert field value for the field: [" + this.field.toString() + "] to the ["+ this.type+ "] type for the value ["+ newValue+ "]: "+ e.toString();
        Debug.logError(e,errMsg,module);
        methodContext.setErrorReturn(errMsg,simpleMethod);
        return false;
      }
    }
  }
  if (Debug.verboseOn())   Debug.logVerbose("In screen setting field [" + this.field.toString() + "] to value: "+ newValue,module);
  this.field.put(methodContext,newValue);
  return true;
}
