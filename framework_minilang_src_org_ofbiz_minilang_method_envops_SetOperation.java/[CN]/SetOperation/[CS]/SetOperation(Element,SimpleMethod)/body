{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.attributeNames(simpleMethod,element,"field","from-field","from","value","default-value","default","type","set-if-null","set-if-empty");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"field");
    MiniLangValidate.requireAnyAttribute(simpleMethod,element,"from-field","from","value");
    MiniLangValidate.constantPlusExpressionAttributes(simpleMethod,element,"value");
    MiniLangValidate.constantAttributes(simpleMethod,element,"type","set-if-null","set-if-empty");
    MiniLangValidate.expressionAttributes(simpleMethod,element,"field");
    MiniLangValidate.noChildElements(simpleMethod,element);
  }
  boolean elementModified=autoCorrect(element);
  if (elementModified && MiniLangUtil.autoCorrectOn()) {
    MiniLangUtil.flagDocumentAsCorrected(element);
  }
  this.fieldFma=FlexibleMapAccessor.getInstance(element.getAttribute("field"));
  String fromAttribute=element.getAttribute("from");
  if (MiniLangUtil.containsScript(fromAttribute)) {
    this.scriptlet=new Scriptlet(StringUtil.convertOperatorSubstitutions(fromAttribute));
    this.fromFma=FlexibleMapAccessor.getInstance(null);
  }
 else {
    this.scriptlet=null;
    this.fromFma=FlexibleMapAccessor.getInstance(fromAttribute);
  }
  this.valueFse=FlexibleStringExpander.getInstance(element.getAttribute("value"));
  this.defaultFse=FlexibleStringExpander.getInstance(element.getAttribute("default"));
  this.type=element.getAttribute("type");
  this.setIfNull="true".equals(element.getAttribute("set-if-null"));
  this.setIfEmpty=!"false".equals(element.getAttribute("set-if-empty"));
  if (!this.fromFma.isEmpty() && !this.valueFse.isEmpty()) {
    throw new IllegalArgumentException("Cannot include both a from attribute and a value attribute in a <set> element.");
  }
}
