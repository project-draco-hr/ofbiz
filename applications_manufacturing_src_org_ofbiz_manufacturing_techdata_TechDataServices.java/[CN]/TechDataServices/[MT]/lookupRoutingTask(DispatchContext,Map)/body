{
  GenericDelegator delegator=ctx.getDelegator();
  Map result=new HashMap();
  String workEffortName=(String)context.get("workEffortName");
  String fixedAssetId=(String)context.get("fixedAssetId");
  List listRoutingTask=null;
  List constraints=new LinkedList();
  if (workEffortName != null && workEffortName.length() > 0)   constraints.add(new EntityExpr("workEffortName",EntityOperator.GREATER_THAN_EQUAL_TO,workEffortName));
  if (fixedAssetId != null && fixedAssetId.length() > 0 && !"ANY".equals(fixedAssetId))   constraints.add(new EntityExpr("fixedAssetId",EntityOperator.EQUALS,fixedAssetId));
  constraints.add(new EntityExpr("currentStatusId",EntityOperator.EQUALS,"ROU_ACTIVE"));
  constraints.add(new EntityExpr("workEffortTypeId",EntityOperator.EQUALS,"ROU_TASK"));
  EntityConditionList<EntityExpr> ecl=new EntityConditionList<EntityExpr>(constraints,EntityOperator.AND);
  try {
    listRoutingTask=delegator.findList("WorkEffort",ecl,null,UtilMisc.toList("workEffortName"),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return ServiceUtil.returnError("Error finding desired WorkEffort records: " + e.toString());
  }
  if (listRoutingTask == null)   listRoutingTask=new LinkedList();
  if (listRoutingTask.size() == 0)   listRoutingTask.add(UtilMisc.toMap("label","no Match","value","NO_MATCH"));
  result.put("lookupResult",listRoutingTask);
  return result;
}
