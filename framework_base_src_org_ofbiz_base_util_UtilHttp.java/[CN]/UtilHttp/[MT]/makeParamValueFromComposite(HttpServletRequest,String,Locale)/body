{
  String compositeType=request.getParameter(makeCompositeParam(prefix,"compositeType"));
  if (UtilValidate.isEmpty(compositeType))   return null;
  Map<String,String> data=FastMap.newInstance();
  for (Enumeration<String> names=UtilGenerics.cast(request.getParameterNames()); names.hasMoreElements(); ) {
    String name=names.nextElement();
    if (!name.startsWith(prefix + COMPOSITE_DELIMITER))     continue;
    String suffix=name.substring(name.indexOf(COMPOSITE_DELIMITER) + COMPOSITE_DELIMITER_LENGTH);
    String value=request.getParameter(name);
    data.put(suffix,value);
  }
  if (Debug.verboseOn()) {
    Debug.logVerbose("Creating composite type with parameter data: " + data.toString(),module);
  }
  if ("Timestamp".equals(compositeType)) {
    String date=data.get("date");
    String hour=data.get("hour");
    String minutes=data.get("minutes");
    String ampm=data.get("ampm");
    if (date == null || date.length() < 10)     return null;
    if (UtilValidate.isEmpty(hour))     return null;
    if (UtilValidate.isEmpty(minutes))     return null;
    boolean isTwelveHour=UtilValidate.isNotEmpty(ampm);
    try {
      int h=Integer.parseInt(hour);
      Timestamp timestamp=Timestamp.valueOf(date.substring(0,10) + " 00:00:00.000");
      Calendar cal=Calendar.getInstance(locale);
      cal.setTime(timestamp);
      if (isTwelveHour) {
        boolean isAM=("AM".equals(ampm) ? true : false);
        if (isAM && h == 12)         h=0;
        if (!isAM && h < 12)         h+=12;
      }
      cal.set(Calendar.HOUR_OF_DAY,h);
      cal.set(Calendar.MINUTE,Integer.parseInt(minutes));
      return new Timestamp(cal.getTimeInMillis());
    }
 catch (    IllegalArgumentException e) {
      Debug.logWarning("User input for composite timestamp was invalid: " + e.getMessage(),module);
      return null;
    }
  }
  return null;
}
