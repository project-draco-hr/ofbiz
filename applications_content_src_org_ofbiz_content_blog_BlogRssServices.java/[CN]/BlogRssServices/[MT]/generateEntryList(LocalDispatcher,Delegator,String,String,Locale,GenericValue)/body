{
  List<SyndEntry> entries=new LinkedList<SyndEntry>();
  List<GenericValue> contentRecs=null;
  try {
    contentRecs=EntityQuery.use(delegator).from("ContentAssocViewTo").where("contentIdStart",contentId,"caContentAssocTypeId","PUBLISH_LINK","statusId","CTNT_PUBLISHED").orderBy("-caFromDate").queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (contentRecs != null) {
    for (    GenericValue v : contentRecs) {
      String sub=null;
      try {
        Map<String,Object> dummy=new HashMap<String,Object>();
        sub=ContentWorker.renderSubContentAsText(dispatcher,delegator,v.getString("contentId"),mapKey,dummy,locale,mimeTypeId,true);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
      }
catch (      IOException e) {
        Debug.logError(e,module);
      }
      if (sub != null) {
        String thisLink=entryLink + "?articleContentId=" + v.getString("contentId")+ "&blogContentId="+ contentId;
        SyndContent desc=new SyndContentImpl();
        desc.setType("text/plain");
        desc.setValue(sub);
        SyndEntry entry=new SyndEntryImpl();
        entry.setTitle(v.getString("contentName"));
        entry.setPublishedDate(v.getTimestamp("createdDate"));
        entry.setDescription(desc);
        entry.setLink(thisLink);
        entry.setAuthor((v.getString("createdByUserLogin")));
        entries.add(entry);
      }
    }
  }
  return entries;
}
