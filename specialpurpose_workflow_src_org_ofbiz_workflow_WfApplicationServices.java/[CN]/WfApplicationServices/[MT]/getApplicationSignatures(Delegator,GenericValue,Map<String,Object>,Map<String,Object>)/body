{
  Map<String,Object> expresions=null;
  final GenericValue workEffort=delegator.findOne("WorkEffort",UtilMisc.toMap("workEffortId",application.get("workEffortId")),false);
  String packageId=(String)workEffort.get("workflowPackageId");
  String packageVersion=(String)workEffort.get("workflowPackageVersion");
  String processId=(String)workEffort.get("workflowProcessId");
  String processVersion=(String)workEffort.get("workflowProcessVersion");
  String activityId=(String)workEffort.get("workflowActivityId");
  expresions=new HashMap<String,Object>();
  expresions.putAll(UtilMisc.toMap("packageId",packageId));
  expresions.putAll(UtilMisc.toMap("packageVersion",packageVersion));
  expresions.putAll(UtilMisc.toMap("processId",processId));
  expresions.putAll(UtilMisc.toMap("processVersion",processVersion));
  expresions.putAll(UtilMisc.toMap("activityId",activityId));
  final List<GenericValue> wfActivityTools=delegator.findByAnd("WorkflowActivityTool",expresions);
  final GenericValue wfActivityTool=(GenericValue)wfActivityTools.toArray()[0];
  packageId=(String)wfActivityTool.get("packageId");
  packageVersion=(String)wfActivityTool.get("packageVersion");
  processId=(String)wfActivityTool.get("processId");
  processVersion=(String)wfActivityTool.get("processVersion");
  final String applicationId=(String)wfActivityTool.get("toolId");
  expresions=new HashMap<String,Object>();
  expresions.putAll(UtilMisc.toMap("packageId",packageId));
  expresions.putAll(UtilMisc.toMap("packageVersion",packageVersion));
  expresions.putAll(UtilMisc.toMap("processId",processId));
  expresions.putAll(UtilMisc.toMap("processVersion",processVersion));
  expresions.putAll(UtilMisc.toMap("applicationId",applicationId));
  final List<GenericValue> params=delegator.findByAnd("WorkflowFormalParam",expresions);
  for (  GenericValue param : params) {
    String name=param.getString("formalParamId");
    String mode=param.getString("modeEnumId");
    String type=param.getString("dataTypeEnumId");
    if (mode.equals("WPM_IN") || mode.equals("WPM_INOUT"))     contextSignature.put(name,WfUtil.getJavaType(type));
 else     if (mode.equals("WPM_OUT") || mode.equals("WPM_INOUT"))     resultSignature.put(name,WfUtil.getJavaType(type));
  }
}
