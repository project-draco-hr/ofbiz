{
  Writer writer=new StringWriter();
  try {
    ScreenStringRenderer screenStringRenderer=new MacroScreenRenderer(UtilProperties.getPropertyValue("widget",getName() + ".name"),UtilProperties.getPropertyValue("widget",getName() + ".screenrenderer"),writer);
    FormStringRenderer formStringRenderer=new MacroFormRenderer(UtilProperties.getPropertyValue("widget",getName() + ".formrenderer"),writer,request,response);
    ScreenRenderer screens=new ScreenRenderer(writer,null,screenStringRenderer);
    screens.populateContextForRequest(request,response,servletContext);
    screens.getContext().put("formStringRenderer",formStringRenderer);
    screens.getContext().put("simpleEncoder",StringUtil.getEncoder(UtilProperties.getPropertyValue("widget",getName() + ".encoder")));
    screens.render(page);
  }
 catch (  Exception e) {
    renderError("Problems with the response writer/output stream",e,request,response);
    return;
  }
  String screenOutString=writer.toString();
  if (!screenOutString.startsWith("<?xml")) {
    screenOutString="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + screenOutString;
  }
  if (Debug.verboseOn())   Debug.logVerbose("XSL:FO Screen Output: " + screenOutString,module);
  if (UtilValidate.isEmpty(contentType)) {
    contentType=UtilProperties.getPropertyValue("widget",getName() + ".default.contenttype");
  }
  Reader reader=new StringReader(screenOutString);
  StreamSource src=new StreamSource(reader);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    Fop fop=ApacheFopWorker.createFopInstance(out,contentType);
    ApacheFopWorker.transform(src,null,fop);
  }
 catch (  Exception e) {
    renderError("Unable to transform FO file",e,request,response);
    return;
  }
  response.setContentType(contentType);
  response.setContentLength(out.size());
  try {
    out.writeTo(response.getOutputStream());
    response.getOutputStream().flush();
  }
 catch (  IOException e) {
    renderError("Unable to write to OutputStream",e,request,response);
  }
}
