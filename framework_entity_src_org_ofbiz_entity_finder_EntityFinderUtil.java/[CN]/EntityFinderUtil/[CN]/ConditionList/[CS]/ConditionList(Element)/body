{
  String operatorAttribute=conditionListElement.getAttribute("combine");
  if (operatorAttribute.isEmpty()) {
    operatorAttribute="and";
  }
  this.operator=EntityOperator.lookup(operatorAttribute);
  if (this.operator == null) {
    throw new IllegalArgumentException("Could not find an entity operator for the name: " + operatorAttribute);
  }
  List<? extends Element> subElements=UtilXml.childElementList(conditionListElement);
  if (subElements.isEmpty()) {
    this.conditionList=null;
  }
 else {
    List<Condition> conditionList=new ArrayList<Condition>(subElements.size());
    for (    Element subElement : subElements) {
      if ("condition-expr".equals(subElement.getNodeName())) {
        conditionList.add(new ConditionExpr(subElement));
      }
 else       if ("condition-list".equals(subElement.getNodeName())) {
        conditionList.add(new ConditionList(subElement));
      }
 else       if ("condition-object".equals(subElement.getNodeName())) {
        conditionList.add(new ConditionObject(subElement));
      }
 else {
        throw new IllegalArgumentException("Invalid element with name [" + subElement.getNodeName() + "] found under a condition-list element.");
      }
    }
    this.conditionList=Collections.unmodifiableList(conditionList);
  }
}
