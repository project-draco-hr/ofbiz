{
  try {
    GenericDelegator delegator=(GenericDelegator)context.get("delegator");
    GenericValue content=null;
    String expandedDataResourceId=getDataResourceId(context);
    String expandedContentId=getContentId(context);
    if (!(context instanceof MapStack)) {
      context=MapStack.create(context);
    }
    ((MapStack)context).push();
    context.put("contentId",expandedContentId);
    if (UtilValidate.isEmpty(expandedDataResourceId)) {
      if (UtilValidate.isNotEmpty(expandedContentId)) {
        content=delegator.findByPrimaryKeyCache("Content",UtilMisc.toMap("contentId",expandedContentId));
      }
 else {
        String errMsg="contentId is empty.";
        Debug.logError(errMsg,module);
        return;
      }
      if (content != null) {
        expandedDataResourceId=content.getString("dataResourceId");
      }
 else {
        String errMsg="Could not find content with contentId [" + expandedContentId + "] ";
        Debug.logError(errMsg,module);
        throw new RuntimeException(errMsg);
      }
    }
    GenericValue dataResource=null;
    if (UtilValidate.isNotEmpty(expandedDataResourceId)) {
      dataResource=delegator.findByPrimaryKeyCache("DataResource",UtilMisc.toMap("dataResourceId",expandedDataResourceId));
      this.dataResourceId=FlexibleStringExpander.getInstance(expandedDataResourceId);
    }
    String mimeTypeId=null;
    if (dataResource != null) {
      mimeTypeId=dataResource.getString("mimeTypeId");
    }
    if (UtilValidate.isNotEmpty(content.get("mimeTypeId"))) {
      mimeTypeId=content.getString("mimeTypeId");
    }
    if (UtilValidate.isNotEmpty(mimeTypeId) && ((mimeTypeId.indexOf("application") >= 0) || (mimeTypeId.indexOf("image")) >= 0)) {
      if (mimeTypeId.equals("application/pdf")) {
        TransformerFactory tfactory=TransformerFactory.newInstance();
        try {
          SAXParserFactory pfactory=SAXParserFactory.newInstance();
          pfactory.setNamespaceAware(true);
          pfactory.setValidating(true);
          pfactory.setXIncludeAware(true);
          XMLReader reader=null;
          try {
            reader=pfactory.newSAXParser().getXMLReader();
          }
 catch (          Exception e) {
            throw new TransformerException("Error creating SAX parser/reader",e);
          }
          SAXSource source=new SAXSource(reader,new InputSource("/home/hans/ofbiz/svn/applications/commonext/documents/ApacheOfbiz.xml"));
          Transformer transformer1=tfactory.newTransformer(new StreamSource("/home/hans/ofbiz/svn/applications/content/template/docbook/fo/docbook.xsl"));
          StringWriter sw=new StringWriter();
          StreamResult sr=new StreamResult(sw);
          transformer1.transform(source,sr);
          java.io.FileWriter fw=new java.io.FileWriter(new java.io.File("/tmp/file1.fo"));
          fw.write(sw.toString());
          fw.close();
          Debug.log("================start fo processor=============================");
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          StreamSource src=new StreamSource("/tmp/file1.fo");
          FopFactory fopFactory=FopFactory.newInstance();
          FOUserAgent foUserAgent=fopFactory.newFOUserAgent();
          Fop fop=fopFactory.newFop(MimeConstants.MIME_PDF,foUserAgent,baos);
          TransformerFactory factory=TransformerFactory.newInstance();
          Transformer transformer=factory.newTransformer();
          transformer.transform(src,new SAXResult(fop.getDefaultHandler()));
          baos.flush();
          baos.close();
          writer.append(baos.toString());
          java.io.FileWriter fend=new java.io.FileWriter(new java.io.File("/tmp/file1.pdf"));
          fend.write(baos.toString());
          fend.close();
        }
 catch (        Exception e) {
          Debug.logError("================================Exception: " + e,module);
        }
      }
 else {
        screenStringRenderer.renderContentFrame(writer,context,this);
      }
    }
 else {
      screenStringRenderer.renderContentBegin(writer,context,this);
      screenStringRenderer.renderContentBody(writer,context,this);
      screenStringRenderer.renderContentEnd(writer,context,this);
    }
    ((MapStack)context).pop();
  }
 catch (  IOException e) {
    String errMsg="Error rendering content with contentId [" + getContentId(context) + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
catch (  GenericEntityException e) {
    String errMsg="Error obtaining content with contentId [" + getContentId(context) + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
}
