{
  try {
    Delegator delegator=(Delegator)context.get("delegator");
    GenericValue content=null;
    String expandedDataResourceId=getDataResourceId(context);
    String expandedContentId=getContentId(context);
    if (!(context instanceof MapStack<?>)) {
      context=MapStack.create(context);
    }
    UtilGenerics.<MapStack<String>>cast(context).push();
    context.put("contentId",expandedContentId);
    if (expandedDataResourceId.isEmpty()) {
      if (!expandedContentId.isEmpty()) {
        content=EntityQuery.use(delegator).from("Content").where("contentId",expandedContentId).cache().queryOne();
      }
 else {
        String errMsg="contentId is empty.";
        Debug.logError(errMsg,module);
        return;
      }
      if (content != null) {
        expandedDataResourceId=content.getString("dataResourceId");
      }
 else {
        String errMsg="Could not find content with contentId [" + expandedContentId + "] ";
        Debug.logError(errMsg,module);
        throw new RuntimeException(errMsg);
      }
    }
    GenericValue dataResource=null;
    if (!expandedDataResourceId.isEmpty()) {
      dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",expandedDataResourceId).cache().queryOne();
    }
    String mimeTypeId=null;
    if (dataResource != null) {
      mimeTypeId=dataResource.getString("mimeTypeId");
    }
    if (content != null) {
      mimeTypeId=content.getString("mimeTypeId");
    }
    if (!(mimeTypeId != null && ((mimeTypeId.indexOf("application") >= 0) || (mimeTypeId.indexOf("image")) >= 0))) {
      screenStringRenderer.renderContentBegin(writer,context,this);
      screenStringRenderer.renderContentBody(writer,context,this);
      screenStringRenderer.renderContentEnd(writer,context,this);
    }
    UtilGenerics.<MapStack<String>>cast(context).pop();
  }
 catch (  IOException e) {
    String errMsg="Error rendering content with contentId [" + getContentId(context) + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
catch (  GenericEntityException e) {
    String errMsg="Error obtaining content with contentId [" + getContentId(context) + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
}
