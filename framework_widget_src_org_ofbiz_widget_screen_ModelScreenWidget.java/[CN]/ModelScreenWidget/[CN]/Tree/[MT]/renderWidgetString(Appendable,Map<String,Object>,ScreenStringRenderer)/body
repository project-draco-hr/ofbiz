{
  boolean protectScope=!shareScope(context);
  if (protectScope) {
    if (!(context instanceof MapStack)) {
      context=MapStack.create(context);
    }
    ((MapStack)context).push();
  }
  String name=this.getName(context);
  String location=this.getLocation(context);
  ModelTree modelTree=null;
  try {
    modelTree=TreeFactory.getTreeFromLocation(this.getLocation(context),this.getName(context),this.modelScreen.getDelegator(context),this.modelScreen.getDispatcher(context));
  }
 catch (  IOException e) {
    String errMsg="Error rendering included tree named [" + name + "] at location ["+ location+ "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
catch (  SAXException e) {
    String errMsg="Error rendering included tree named [" + name + "] at location ["+ location+ "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
catch (  ParserConfigurationException e) {
    String errMsg="Error rendering included tree named [" + name + "] at location ["+ location+ "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
  TreeStringRenderer treeStringRenderer=(TreeStringRenderer)context.get("treeStringRenderer");
  if (treeStringRenderer == null) {
    treeStringRenderer=new HtmlTreeRenderer();
  }
  if (treeStringRenderer == null) {
    throw new IllegalArgumentException("Could not find a treeStringRenderer in the context, and could not find HTTP request/response objects need to create one.");
  }
  StringBuffer renderBuffer=new StringBuffer();
  modelTree.renderTreeString(renderBuffer,context,treeStringRenderer);
  try {
    writer.append(renderBuffer.toString());
  }
 catch (  IOException e) {
    String errMsg="Error rendering included tree named [" + name + "] at location ["+ location+ "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new RuntimeException(errMsg);
  }
  if (protectScope) {
    ((MapStack)context).pop();
  }
}
