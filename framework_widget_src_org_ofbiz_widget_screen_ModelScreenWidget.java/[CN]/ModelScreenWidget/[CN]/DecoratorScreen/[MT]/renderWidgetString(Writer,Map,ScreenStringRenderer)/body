{
  if (!(context instanceof MapStack)) {
    context=MapStack.create(context);
  }
  MapStack contextMs=(MapStack)context;
  MapStack standAloneStack=contextMs.standAloneChildStack();
  standAloneStack.put("screens",new ScreenRenderer(writer,standAloneStack,screenStringRenderer));
  SectionsRenderer sections=new SectionsRenderer(this.sectionMap,standAloneStack,writer,screenStringRenderer);
  contextMs.push();
  context.put("sections",sections);
  String name=this.getName(context);
  String location=this.getLocation(context);
  if (ScreenFactory.isCombinedName(name)) {
    String combinedName=name;
    location=ScreenFactory.getResourceNameFromCombined(combinedName);
    name=ScreenFactory.getScreenNameFromCombined(combinedName);
  }
  ModelScreen modelScreen=null;
  if (UtilValidate.isNotEmpty(location)) {
    try {
      modelScreen=ScreenFactory.getScreenFromLocation(location,name);
    }
 catch (    IOException e) {
      String errMsg="Error rendering included screen named [" + name + "] at location ["+ location+ "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    SAXException e) {
      String errMsg="Error rendering included screen named [" + name + "] at location ["+ location+ "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    ParserConfigurationException e) {
      String errMsg="Error rendering included screen named [" + name + "] at location ["+ location+ "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
  }
 else {
    modelScreen=(ModelScreen)this.modelScreen.modelScreenMap.get(name);
    if (modelScreen == null) {
      throw new IllegalArgumentException("Could not find screen with name [" + name + "] in the same file as the screen with name ["+ this.modelScreen.getName()+ "]");
    }
  }
  modelScreen.renderScreenString(writer,context,screenStringRenderer);
  contextMs.pop();
}
