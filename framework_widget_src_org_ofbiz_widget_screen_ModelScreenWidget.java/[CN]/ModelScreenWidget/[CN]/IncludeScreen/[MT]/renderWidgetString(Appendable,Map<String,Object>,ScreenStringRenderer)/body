{
  boolean protectScope=!shareScope(context);
  if (protectScope) {
    if (!(context instanceof MapStack)) {
      context=MapStack.create(context);
    }
    UtilGenerics.<MapStack<String>>cast(context).push();
    List<String> widgetTrail=UtilGenerics.toList(context.get("_WIDGETTRAIL_"));
    if (widgetTrail == null) {
      widgetTrail=FastList.newInstance();
    }
    String thisName=nameExdr.expandString(context);
    widgetTrail.add(thisName);
    context.put("_WIDGETTRAIL_",widgetTrail);
  }
  String name=this.getName(context);
  String location=this.getLocation(context);
  if (UtilValidate.isEmpty(name)) {
    if (Debug.verboseOn())     Debug.logVerbose("In the include-screen tag the screen name was empty, ignoring include; in screen [" + this.modelScreen.getName() + "]",module);
    return;
  }
  if (ScreenFactory.isCombinedName(name)) {
    String combinedName=name;
    location=ScreenFactory.getResourceNameFromCombined(combinedName);
    name=ScreenFactory.getScreenNameFromCombined(combinedName);
  }
  ModelScreen modelScreen=null;
  if (UtilValidate.isNotEmpty(location)) {
    try {
      modelScreen=ScreenFactory.getScreenFromLocation(location,name);
    }
 catch (    IOException e) {
      String errMsg="Error rendering included screen named [" + name + "] at location ["+ location+ "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    SAXException e) {
      String errMsg="Error rendering included screen named [" + name + "] at location ["+ location+ "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    ParserConfigurationException e) {
      String errMsg="Error rendering included screen named [" + name + "] at location ["+ location+ "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
  }
 else {
    modelScreen=this.modelScreen.modelScreenMap.get(name);
    if (modelScreen == null) {
      throw new IllegalArgumentException("Could not find screen with name [" + name + "] in the same file as the screen with name ["+ this.modelScreen.getName()+ "]");
    }
  }
  modelScreen.renderScreenString(writer,context,screenStringRenderer);
  if (protectScope) {
    UtilGenerics.<MapStack<String>>cast(context).pop();
  }
}
