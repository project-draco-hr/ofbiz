{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  boolean useMultitenant=EntityUtil.isMultiTenantEnabled();
  if (useMultitenant) {
    String serverName=request.getServerName();
    try {
      delegator=getDelegator(servletContext);
      Delegator baseDelegator=DelegatorFactory.getDelegator(delegator.getDelegatorBaseName());
      GenericValue tenantDomainName=baseDelegator.findOne("TenantDomainName",UtilMisc.toMap("domainName",serverName),false);
      if (UtilValidate.isNotEmpty(tenantDomainName)) {
        String tenantId=tenantDomainName.getString("tenantId");
        String tenantDelegatorName=delegator.getDelegatorBaseName() + "#" + tenantId;
        httpRequest.getSession().setAttribute("delegatorName",tenantDelegatorName);
        delegator=DelegatorFactory.getDelegator(tenantDelegatorName);
        servletContext.setAttribute("delegator",delegator);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"Unable to get Tenant",module);
    }
  }
  request.setAttribute("servletContext",httpRequest.getSession().getServletContext());
  request.setAttribute("delegator",delegator);
  if (UtilValidate.isEmpty(httpRequest.getSession().getAttribute("webSiteId"))) {
    httpRequest.getSession().setAttribute("webSiteId",httpRequest.getSession().getServletContext().getAttribute("webSiteId"));
  }
}
