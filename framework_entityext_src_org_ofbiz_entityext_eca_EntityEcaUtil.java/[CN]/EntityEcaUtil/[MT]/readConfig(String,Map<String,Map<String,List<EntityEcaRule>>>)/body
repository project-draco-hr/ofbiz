{
  EntityEcaReaderInfo entityEcaReaderInfo=EntityConfigUtil.getEntityEcaReaderInfo(entityEcaReaderName);
  if (entityEcaReaderInfo == null) {
    Debug.logError("BAD ERROR: Could not find entity-eca-reader config with name: " + entityEcaReaderName,module);
    return;
  }
  List<List<EntityEcaRule>> allRules=FastList.newInstance();
  for (  Element eecaResourceElement : entityEcaReaderInfo.resourceElements) {
    ResourceHandler handler=new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME,eecaResourceElement);
    allRules.add(getEcaDefinitions(handler));
  }
  for (  ComponentConfig.EntityResourceInfo componentResourceInfo : ComponentConfig.getAllEntityResourceInfos("eca")) {
    if (entityEcaReaderName.equals(componentResourceInfo.readerName)) {
      allRules.add(getEcaDefinitions(componentResourceInfo.createResourceHandler()));
    }
  }
  for (  List<EntityEcaRule> oneFileRules : allRules) {
    for (    EntityEcaRule rule : oneFileRules) {
      String entityName=rule.getEntityName();
      String eventName=rule.getEventName();
      Map<String,List<EntityEcaRule>> eventMap=ecaCache.get(entityName);
      List<EntityEcaRule> rules=null;
      if (eventMap == null) {
        eventMap=FastMap.newInstance();
        rules=FastList.newInstance();
        ecaCache.put(entityName,eventMap);
        eventMap.put(eventName,rules);
      }
 else {
        rules=eventMap.get(eventName);
        if (rules == null) {
          rules=FastList.newInstance();
          eventMap.put(eventName,rules);
        }
      }
      rules.add(rule);
    }
  }
}
