{
  super(element);
  String lineNumberText=EntityConfigUtil.createConfigFileLineNumberText(element);
  String jdbcDriver=element.getAttribute("jdbc-driver").intern();
  if (jdbcDriver.isEmpty()) {
    throw new GenericEntityConfException("<inline-jdbc> element jdbc-driver attribute is empty" + lineNumberText);
  }
  this.jdbcDriver=jdbcDriver;
  String jdbcUri=element.getAttribute("jdbc-uri").intern();
  if (jdbcUri.isEmpty()) {
    throw new GenericEntityConfException("<inline-jdbc> element jdbc-uri attribute is empty" + lineNumberText);
  }
  this.jdbcUri=jdbcUri;
  String jdbcUsername=element.getAttribute("jdbc-username").intern();
  if (jdbcUsername.isEmpty()) {
    throw new GenericEntityConfException("<inline-jdbc> element jdbc-username attribute is empty" + lineNumberText);
  }
  this.jdbcUsername=jdbcUsername;
  this.jdbcPassword=element.getAttribute("jdbc-password").intern();
  this.jdbcPasswordLookup=element.getAttribute("jdbc-password-lookup").intern();
  String poolMaxsize=element.getAttribute("pool-maxsize");
  if (poolMaxsize.isEmpty()) {
    this.poolMaxsize=50;
  }
 else {
    try {
      this.poolMaxsize=Integer.parseInt(poolMaxsize);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element pool-maxsize attribute is invalid" + lineNumberText);
    }
  }
  String poolMinsize=element.getAttribute("pool-minsize");
  if (poolMinsize.isEmpty()) {
    this.poolMinsize=2;
  }
 else {
    try {
      this.poolMinsize=Integer.parseInt(poolMinsize);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element pool-minsize attribute is invalid" + lineNumberText);
    }
  }
  String idleMaxsize=element.getAttribute("idle-maxsize");
  if (idleMaxsize.isEmpty()) {
    this.idleMaxsize=this.poolMaxsize / 2;
  }
 else {
    try {
      this.idleMaxsize=Integer.parseInt(idleMaxsize);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element idle-maxsize attribute is invalid" + lineNumberText);
    }
  }
  String timeBetweenEvictionRunsMillis=element.getAttribute("time-between-eviction-runs-millis");
  if (timeBetweenEvictionRunsMillis.isEmpty()) {
    this.timeBetweenEvictionRunsMillis=600000;
  }
 else {
    try {
      this.timeBetweenEvictionRunsMillis=Integer.parseInt(timeBetweenEvictionRunsMillis);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element time-between-eviction-runs-millis attribute is invalid" + lineNumberText);
    }
  }
  String poolSleeptime=element.getAttribute("pool-sleeptime");
  if (poolSleeptime.isEmpty()) {
    this.poolSleeptime=300000;
  }
 else {
    try {
      this.poolSleeptime=Integer.parseInt(poolSleeptime);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element pool-sleeptime attribute is invalid" + lineNumberText);
    }
  }
  String poolLifetime=element.getAttribute("pool-lifetime");
  if (poolLifetime.isEmpty()) {
    this.poolLifetime=600000;
  }
 else {
    try {
      this.poolLifetime=Integer.parseInt(poolLifetime);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element pool-lifetime attribute is invalid" + lineNumberText);
    }
  }
  String poolDeadlockMaxwait=element.getAttribute("pool-deadlock-maxwait");
  if (poolDeadlockMaxwait.isEmpty()) {
    this.poolDeadlockMaxwait=300000;
  }
 else {
    try {
      this.poolDeadlockMaxwait=Integer.parseInt(poolDeadlockMaxwait);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element pool-deadlock-maxwait attribute is invalid" + lineNumberText);
    }
  }
  String poolDeadlockRetrywait=element.getAttribute("pool-deadlock-retrywait");
  if (poolDeadlockRetrywait.isEmpty()) {
    this.poolDeadlockRetrywait=10000;
  }
 else {
    try {
      this.poolDeadlockRetrywait=Integer.parseInt(poolDeadlockRetrywait);
    }
 catch (    Exception e) {
      throw new GenericEntityConfException("<inline-jdbc> element pool-deadlock-retrywait attribute is invalid" + lineNumberText);
    }
  }
  this.poolJdbcTestStmt=element.getAttribute("pool-jdbc-test-stmt").intern();
  this.poolXaWrapperClass=element.getAttribute("pool-xa-wrapper-class").intern();
}
