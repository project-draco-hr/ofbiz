{
  this.delegatorData=delegatorData;
  if (!delegatorData.initialized) {
synchronized (delegatorData) {
      if (delegatorData.initialized) {
        return;
      }
      List<String> warningList=FastList.newInstance();
      Debug.logImportant("Doing entity definition check...",module);
      try {
        ModelEntityChecker.checkEntities(this,warningList);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Error while checking entities: ",module);
      }
      if (warningList.size() > 0) {
        Debug.logWarning("=-=-=-=-= Found " + warningList.size() + " warnings when checking the entity definitions:",module);
        for (        String warning : warningList) {
          Debug.logWarning(warning,module);
        }
      }
      Set<String> groupNames=getModelGroupReader().getGroupNames(this.delegatorData.delegatorName);
      Iterator<String> groups=UtilMisc.toIterator(groupNames);
      while (groups != null && groups.hasNext()) {
        String groupName=groups.next();
        String helperName=this.getGroupHelperName(groupName);
        if (Debug.infoOn())         Debug.logInfo("Delegator \"" + this.delegatorData.delegatorName + "\" initializing helper \""+ helperName+ "\" for entity group \""+ groupName+ "\".",module);
        TreeSet<String> helpersDone=new TreeSet<String>();
        if (helperName != null && helperName.length() > 0) {
          if (helpersDone.contains(helperName)) {
            if (Debug.infoOn())             Debug.logInfo("Helper \"" + helperName + "\" already initialized, not re-initializing.",module);
            continue;
          }
          helpersDone.add(helperName);
          ModelFieldTypeReader.getModelFieldTypeReader(helperName);
          GenericHelper helper=GenericHelperFactory.getHelper(helperName);
          DatasourceInfo datasourceInfo=EntityConfigUtil.getDatasourceInfo(helperName);
          if (datasourceInfo.checkOnStart) {
            if (Debug.infoOn())             Debug.logInfo("Doing database check as requested in entityengine.xml with addMissing=" + datasourceInfo.addMissingOnStart,module);
            try {
              helper.checkDataSource(this.getModelEntityMapByGroup(groupName),null,datasourceInfo.addMissingOnStart);
            }
 catch (            GenericEntityException e) {
              Debug.logWarning(e,e.getMessage(),module);
            }
          }
        }
      }
      this.delegatorData.initialized=true;
      this.delegatorData.crypto=new EntityCrypto(this);
      ClassLoader loader=Thread.currentThread().getContextClassLoader();
      if (this.delegatorData.delegatorInfo.useDistributedCacheClear) {
        String distributedCacheClearClassName=this.delegatorData.delegatorInfo.distributedCacheClearClassName;
        try {
          Class<?> dccClass=loader.loadClass(distributedCacheClearClassName);
          this.delegatorData.distributedCacheClear=(DistributedCacheClear)dccClass.newInstance();
          this.delegatorData.distributedCacheClear.setDelegator(this,this.delegatorData.delegatorInfo.distributedCacheClearUserLoginId);
        }
 catch (        ClassNotFoundException e) {
          Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " was not found, distributed cache clearing will be disabled",module);
        }
catch (        InstantiationException e) {
          Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " could not be instantiated, distributed cache clearing will be disabled",module);
        }
catch (        IllegalAccessException e) {
          Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " could not be accessed (illegal), distributed cache clearing will be disabled",module);
        }
catch (        ClassCastException e) {
          Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " does not implement the DistributedCacheClear interface, distributed cache clearing will be disabled",module);
        }
      }
 else {
        Debug.logInfo("Distributed Cache Clear System disabled for delegator [" + this.delegatorData.delegatorName + "]",module);
      }
      initEntityEcaHandler();
    }
  }
}
