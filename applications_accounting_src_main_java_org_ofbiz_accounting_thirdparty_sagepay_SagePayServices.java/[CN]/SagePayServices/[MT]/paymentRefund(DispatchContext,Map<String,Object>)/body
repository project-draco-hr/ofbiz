{
  Debug.logInfo("SagePay - Entered paymentRefund",module);
  Debug.logInfo("SagePay paymentRefund context : " + context,module);
  Delegator delegator=ctx.getDelegator();
  Map<String,Object> resultMap=new HashMap<String,Object>();
  Map<String,String> props=buildSagePayProperties(context,delegator);
  String vendorTxCode=(String)context.get("vendorTxCode");
  String amount=(String)context.get("amount");
  String currency=(String)context.get("currency");
  String description=(String)context.get("description");
  String relatedVPSTxId=(String)context.get("relatedVPSTxId");
  String relatedVendorTxCode=(String)context.get("relatedVendorTxCode");
  String relatedSecurityKey=(String)context.get("relatedSecurityKey");
  String relatedTxAuthNo=(String)context.get("relatedTxAuthNo");
  Locale locale=(Locale)context.get("locale");
  CloseableHttpClient httpClient=null;
  HttpHost host=SagePayUtil.getHost(props);
  Map<String,String> parameters=new HashMap<String,String>();
  String vpsProtocol=props.get("protocolVersion");
  String vendor=props.get("vendor");
  parameters.put("VPSProtocol",vpsProtocol);
  parameters.put("TxType","REFUND");
  parameters.put("Vendor",vendor);
  parameters.put("VendorTxCode",vendorTxCode);
  parameters.put("Amount",amount);
  parameters.put("Currency",currency);
  parameters.put("Description",description);
  parameters.put("RelatedVPSTxId",relatedVPSTxId);
  parameters.put("RelatedVendorTxCode",relatedVendorTxCode);
  parameters.put("RelatedSecurityKey",relatedSecurityKey);
  parameters.put("RelatedTxAuthNo",relatedTxAuthNo);
  try {
    String successMessage=null;
    httpClient=SagePayUtil.getHttpClient();
    HttpPost httpPost=SagePayUtil.getHttpPost(props.get("refundUrl"),parameters);
    HttpResponse response=httpClient.execute(host,httpPost);
    Map<String,String> responseData=SagePayUtil.getResponseData(response);
    Debug.logInfo("response data -> " + responseData,module);
    String status=responseData.get("Status");
    String statusDetail=responseData.get("StatusDetail");
    resultMap.put("status",status);
    resultMap.put("statusDetail",statusDetail);
    if ("OK".equals(status)) {
      resultMap.put("vpsTxId",responseData.get("VPSTxId"));
      resultMap.put("txAuthNo",responseData.get("TxAuthNo"));
      successMessage=UtilProperties.getMessage(resource,"AccountingSagePayPaymentRefunded",locale);
    }
    if ("NOTAUTHED".equals(status)) {
      successMessage=UtilProperties.getMessage(resource,"AccountingSagePayPaymentRefundNotAuthorized",locale);
    }
    if ("MALFORMED".equals(status)) {
      successMessage=UtilProperties.getMessage(resource,"AccountingSagePayPaymentRefundRequestMalformed",locale);
    }
    if ("INVALID".equals(status)) {
      successMessage=UtilProperties.getMessage(resource,"AccountingSagePayPaymentInvalidInformationPassed",locale);
    }
    if ("ERROR".equals(status)) {
      successMessage=UtilProperties.getMessage(resource,"AccountingSagePayPaymentError",locale);
    }
    resultMap.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    resultMap.put(ModelService.SUCCESS_MESSAGE,successMessage);
  }
 catch (  UnsupportedEncodingException uee) {
    Debug.logError(uee,"Error occurred in encoding parameters for HttpPost (" + uee.getMessage() + ")",module);
    resultMap=ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSagePayErrorEncodingParameters",UtilMisc.toMap("errorString",uee.getMessage()),locale));
  }
catch (  ClientProtocolException cpe) {
    Debug.logError(cpe,"Error occurred in HttpClient execute(" + cpe.getMessage() + ")",module);
    resultMap=ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSagePayErrorHttpClientExecute",UtilMisc.toMap("errorString",cpe.getMessage()),locale));
  }
catch (  IOException ioe) {
    Debug.logError(ioe,"Error occurred in HttpClient execute or getting response (" + ioe.getMessage() + ")",module);
    resultMap=ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSagePayErrorHttpClientExecuteOrGettingResponse",UtilMisc.toMap("errorString",ioe.getMessage()),locale));
  }
 finally {
    try {
      httpClient.close();
    }
 catch (    IOException ioe) {
      Debug.logError(ioe,"Error occurred in HttpClient execute or getting response (" + ioe.getMessage() + ")",module);
      resultMap=ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSagePayErrorHttpClientExecuteOrGettingResponse",UtilMisc.toMap("errorString",ioe.getMessage()),locale));
    }
  }
  return resultMap;
}
