{
  String configString=(String)context.get("paymentConfig");
  if (configString == null) {
    configString="payment.properties";
  }
  String clientId=UtilProperties.getPropertyValue(configString,"payment.rita.clientID");
  String userId=UtilProperties.getPropertyValue(configString,"payment.rita.userID");
  String userPw=UtilProperties.getPropertyValue(configString,"payment.rita.userPW");
  String host=UtilProperties.getPropertyValue(configString,"payment.rita.host");
  String port=UtilProperties.getPropertyValue(configString,"payment.rita.port");
  String ssl=UtilProperties.getPropertyValue(configString,"payment.rita.ssl","N");
  String autoBill=UtilProperties.getPropertyValue(configString,"payment.rita.autoBill","0");
  String forceTx=UtilProperties.getPropertyValue(configString,"payment.rita.forceTx","0");
  if (UtilValidate.isEmpty(clientId)) {
    Debug.logWarning("The clientID property in [" + configString + "] is not configured",module);
    return null;
  }
  if (UtilValidate.isEmpty(userId)) {
    Debug.logWarning("The userID property in [" + configString + "] is not configured",module);
    return null;
  }
  if (UtilValidate.isEmpty(userPw)) {
    Debug.logWarning("The userPW property in [" + configString + "] is not configured",module);
    return null;
  }
  Properties props=new Properties();
  props.put("clientID",clientId);
  props.put("userID",userId);
  props.put("userPW",userPw);
  props.put("host",host);
  props.put("port",port);
  props.put("ssl",ssl);
  props.put("autoBill",autoBill);
  props.put("forceTx",forceTx);
  Debug.logInfo("Returning properties - " + props,module);
  return props;
}
