{
  Cipher mwkCipher=this.getCipher(this.getMwkKey(),Cipher.ENCRYPT_MODE);
  byte[] pinBytes=pin.getBytes();
  byte[] random=this.getRandomBytes(7);
  byte[] checkSum=this.getPinCheckSum(pinBytes);
  byte[] eanBlock=new byte[16];
  int i;
  for (i=0; i < random.length; i++) {
    eanBlock[i]=random[i];
  }
  eanBlock[7]=checkSum[0];
  for (i=0; i < pinBytes.length; i++) {
    eanBlock[i + 8]=pinBytes[i];
  }
  String encryptedEanHex=null;
  try {
    byte[] encryptedEan=mwkCipher.doFinal(eanBlock);
    encryptedEanHex=StringUtil.toHexString(encryptedEan);
  }
 catch (  IllegalStateException e) {
    Debug.logError(e,module);
  }
catch (  IllegalBlockSizeException e) {
    Debug.logError(e,module);
  }
catch (  BadPaddingException e) {
    Debug.logError(e,module);
  }
  if (debug) {
    Debug.logInfo("encryptPin : " + pin + " / "+ encryptedEanHex,module);
  }
  return encryptedEanHex;
}
