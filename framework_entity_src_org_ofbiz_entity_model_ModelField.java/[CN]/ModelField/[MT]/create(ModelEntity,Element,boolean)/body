{
  String description=UtilXml.childElementValue(fieldElement,"description");
  if (description == null) {
    description="";
  }
  String name=fieldElement.getAttribute("name").intern();
  String type=fieldElement.getAttribute("type").intern();
  String colName=fieldElement.getAttribute("col-name").intern();
  if (colName.isEmpty()) {
    colName=ModelUtil.javaNameToDbName(name);
  }
  String colValue="";
  String fieldSet=fieldElement.getAttribute("field-set").intern();
  boolean isNotNull="true".equals(fieldElement.getAttribute("not-null"));
  if (isPk) {
    isNotNull=true;
  }
  boolean encrypt="true".equals(fieldElement.getAttribute("encrypt"));
  boolean enableAuditLog="true".equals(fieldElement.getAttribute("enable-audit-log"));
  List<String> validators=Collections.EMPTY_LIST;
  List<? extends Element> elementList=UtilXml.childElementList(fieldElement,"validate");
  if (!elementList.isEmpty()) {
    validators=new ArrayList<String>(elementList.size());
    for (    Element validateElement : elementList) {
      validators.add(validateElement.getAttribute("name").intern());
    }
    validators=Collections.unmodifiableList(validators);
  }
  return new ModelField(modelEntity,description,name,type,colName,colValue,fieldSet,isNotNull,isPk,encrypt,false,enableAuditLog,validators);
}
