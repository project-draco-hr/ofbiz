{
  EntityExpr joinExpr=null;
  String viewName=null;
  String contentFieldName=null;
  if (direction != null && direction.equalsIgnoreCase("From")) {
    contentFieldName="caContentIdTo";
    joinExpr=EntityCondition.makeCondition("caContentIdTo",EntityOperator.EQUALS,contentId);
  }
 else {
    contentFieldName="caContentId";
    joinExpr=EntityCondition.makeCondition("contentId",EntityOperator.EQUALS,contentId);
  }
  if (direction != null && direction.equalsIgnoreCase("From")) {
    viewName="ContentAssocDataResourceViewFrom";
  }
 else {
    viewName="ContentAssocDataResourceViewTo";
  }
  List<EntityCondition> conditionList=new ArrayList<EntityCondition>();
  conditionList.add(joinExpr);
  if (UtilValidate.isNotEmpty(mapKey)) {
    String mapKeyValue="is null".equalsIgnoreCase(mapKey) ? null : mapKey;
    conditionList.add(EntityCondition.makeCondition("caMapKey",mapKeyValue));
  }
  if (UtilValidate.isNotEmpty(contentAssocPredicateId)) {
    String contentAssocPredicateIdValue="is null".equalsIgnoreCase(contentAssocPredicateId) ? null : contentAssocPredicateId;
    conditionList.add(EntityCondition.makeCondition("caMapKey",contentAssocPredicateIdValue));
  }
  if (nullThruDatesOnly != null && nullThruDatesOnly) {
    conditionList.add(EntityCondition.makeCondition("caThruDate",null));
  }
  if (UtilValidate.isNotEmpty(assocTypes)) {
    conditionList.add(EntityCondition.makeCondition("caContentAssocTypeId",EntityOperator.IN,assocTypes));
  }
  if (fromDate == null && fromDateStr != null) {
    fromDate=UtilDateTime.toTimestamp(fromDateStr);
  }
  List<GenericValue> contentAssocsTypeFiltered=EntityQuery.use(delegator).from(viewName).where(conditionList).orderBy("caSequenceNum","-caFromDate").cache().queryList();
  String assocRelationName=null;
  if (direction != null && direction.equalsIgnoreCase("To")) {
    assocRelationName="ToContent";
  }
 else {
    assocRelationName="FromContent";
  }
  GenericValue contentAssocDataResourceView=null;
  GenericValue content=null;
  GenericValue dataResource=null;
  List<GenericValue> contentAssocDataResourceList=new LinkedList<GenericValue>();
  Locale locale=Locale.getDefault();
  try {
    for (    GenericValue contentAssocView : contentAssocsTypeFiltered) {
      GenericValue contentAssoc=EntityQuery.use(delegator).from("ContentAssoc").where(UtilMisc.toMap("contentId",contentAssocView.getString("contentId"),"contentIdTo",contentAssocView.getString(contentFieldName),"contentAssocTypeId",contentAssocView.getString("caContentAssocTypeId"),"fromDate",contentAssocView.getTimestamp("caFromDate"))).queryOne();
      content=contentAssoc.getRelatedOne(assocRelationName,true);
      if (UtilValidate.isNotEmpty(contentTypes)) {
        String contentTypeId=(String)content.get("contentTypeId");
        if (contentTypes.contains(contentTypeId)) {
          contentAssocDataResourceView=delegator.makeValue(viewName);
          contentAssocDataResourceView.setAllFields(content,true,null,null);
        }
      }
 else {
        contentAssocDataResourceView=delegator.makeValue(viewName);
        contentAssocDataResourceView.setAllFields(content,true,null,null);
      }
      SimpleMapProcessor.runSimpleMapProcessor("component://content/script/org/ofbiz/content/ContentManagementMapProcessors.xml","contentAssocOut",contentAssoc,contentAssocDataResourceView,new LinkedList<Object>(),locale);
      String dataResourceId=content.getString("dataResourceId");
      if (UtilValidate.isNotEmpty(dataResourceId))       dataResource=content.getRelatedOne("DataResource",true);
      if (dataResource != null) {
        SimpleMapProcessor.runSimpleMapProcessor("component://content/script/org/ofbiz/content/ContentManagementMapProcessors.xml","dataResourceOut",dataResource,contentAssocDataResourceView,new LinkedList<Object>(),locale);
      }
      contentAssocDataResourceList.add(contentAssocDataResourceView);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (UtilValidate.isNotEmpty(orderBy)) {
    List<String> orderByList=StringUtil.split(orderBy,"|");
    contentAssocDataResourceList=EntityUtil.orderBy(contentAssocDataResourceList,orderByList);
  }
  Map<String,Object> results=new HashMap<String,Object>();
  results.put("entityList",contentAssocDataResourceList);
  if (UtilValidate.isNotEmpty(contentAssocDataResourceList)) {
    results.put("view",contentAssocDataResourceList.get(0));
  }
  return results;
}
