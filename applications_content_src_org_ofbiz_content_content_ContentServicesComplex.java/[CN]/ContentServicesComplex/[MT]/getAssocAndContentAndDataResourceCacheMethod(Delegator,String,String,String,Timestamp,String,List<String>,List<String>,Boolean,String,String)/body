{
  String viewName=null;
  String contentFieldName=null;
  if (direction != null && direction.equalsIgnoreCase("From")) {
    contentFieldName="contentIdTo";
  }
 else {
    contentFieldName="contentId";
  }
  if (direction != null && direction.equalsIgnoreCase("From")) {
    viewName="ContentAssocDataResourceViewFrom";
  }
 else {
    viewName="ContentAssocDataResourceViewTo";
  }
  List<EntityCondition> conditionList=new ArrayList<EntityCondition>();
  if (UtilValidate.isNotEmpty(mapKey)) {
    String mapKeyValue="is null".equalsIgnoreCase(mapKey) ? null : mapKey;
    conditionList.add(EntityCondition.makeCondition("mapKey",mapKeyValue));
  }
  if (UtilValidate.isNotEmpty(contentAssocPredicateId)) {
    String contentAssocPredicateIdValue="is null".equalsIgnoreCase(contentAssocPredicateId) ? null : contentAssocPredicateId;
    conditionList.add(EntityCondition.makeCondition("mapKey",contentAssocPredicateIdValue));
  }
  if (nullThruDatesOnly != null && nullThruDatesOnly) {
    conditionList.add(EntityCondition.makeCondition("thruDate",null));
  }
  if (UtilValidate.isNotEmpty(assocTypes)) {
    conditionList.add(EntityCondition.makeCondition("contentAssocTypeId",EntityOperator.IN,assocTypes));
  }
  if (fromDate == null && fromDateStr != null) {
    fromDate=UtilDateTime.toTimestamp(fromDateStr);
  }
  List<GenericValue> contentAssocsTypeFiltered=EntityQuery.use(delegator).from("ContentAssoc").where(conditionList).orderBy("sequenceNum","-fromDate").filterByDate(fromDate).cache().queryList();
  String assocRelationName=null;
  if (direction != null && direction.equalsIgnoreCase("To")) {
    assocRelationName="ToContent";
  }
 else {
    assocRelationName="FromContent";
  }
  GenericValue contentAssocDataResourceView=null;
  GenericValue content=null;
  GenericValue dataResource=null;
  List<GenericValue> contentAssocDataResourceList=FastList.newInstance();
  Locale locale=Locale.getDefault();
  for (  GenericValue contentAssoc : contentAssocsTypeFiltered) {
    content=contentAssoc.getRelatedOne(assocRelationName,true);
    if (UtilValidate.isNotEmpty(contentTypes)) {
      String contentTypeId=(String)content.get("contentTypeId");
      if (contentTypes.contains(contentTypeId)) {
        contentAssocDataResourceView=delegator.makeValue(viewName);
        contentAssocDataResourceView.setAllFields(content,true,null,null);
      }
    }
 else {
      contentAssocDataResourceView=delegator.makeValue(viewName);
      contentAssocDataResourceView.setAllFields(content,true,null,null);
    }
    SimpleMapProcessor.runSimpleMapProcessor("component://content/script/org/ofbiz/content/ContentManagementMapProcessors.xml","contentAssocOut",contentAssoc,contentAssocDataResourceView,FastList.newInstance(),locale);
    String dataResourceId=content.getString("dataResourceId");
    if (UtilValidate.isNotEmpty(dataResourceId))     dataResource=content.getRelatedOne("DataResource",true);
    if (dataResource != null) {
      SimpleMapProcessor.runSimpleMapProcessor("component://content/script/org/ofbiz/content/ContentManagementMapProcessors.xml","dataResourceOut",dataResource,contentAssocDataResourceView,FastList.newInstance(),locale);
    }
    contentAssocDataResourceList.add(contentAssocDataResourceView);
  }
  List<String> orderByList=null;
  if (UtilValidate.isNotEmpty(orderBy)) {
    orderByList=StringUtil.split(orderBy,"|");
    contentAssocDataResourceList=EntityUtil.orderBy(contentAssocDataResourceList,orderByList);
  }
  Map<String,Object> results=FastMap.newInstance();
  results.put("entityList",contentAssocDataResourceList);
  if (UtilValidate.isNotEmpty(contentAssocDataResourceList)) {
    results.put("view",contentAssocDataResourceList.get(0));
  }
  return results;
}
