{
  GenericDelegator delegator=dctx.getDelegator();
  List assocTypes=(List)context.get("assocTypes");
  String assocTypesString=(String)context.get("assocTypesString");
  if (UtilValidate.isNotEmpty(assocTypesString)) {
    List lst=StringUtil.split(assocTypesString,"|");
    if (assocTypes == null) {
      assocTypes=new ArrayList();
    }
    assocTypes.addAll(lst);
  }
  List contentTypes=(List)context.get("contentTypes");
  String contentTypesString=(String)context.get("contentTypesString");
  if (UtilValidate.isNotEmpty(contentTypesString)) {
    List lst=StringUtil.split(contentTypesString,"|");
    if (contentTypes == null) {
      contentTypes=new ArrayList();
    }
    contentTypes.addAll(lst);
  }
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  String fromDateStr=(String)context.get("fromDateStr");
  String contentId=(String)context.get("contentId");
  String direction=(String)context.get("direction");
  String mapKey=(String)context.get("mapKey");
  String contentAssocPredicateId=(String)context.get("contentAssocPredicateId");
  Boolean nullThruDatesOnly=(Boolean)context.get("nullThruDatesOnly");
  Map results=null;
  try {
    results=getAssocAndContentAndDataResourceCacheMethod(delegator,contentId,mapKey,direction,fromDate,fromDateStr,assocTypes,contentTypes,nullThruDatesOnly,contentAssocPredicateId);
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  MiniLangException e2) {
    return ServiceUtil.returnError(e2.getMessage());
  }
  return results;
}
