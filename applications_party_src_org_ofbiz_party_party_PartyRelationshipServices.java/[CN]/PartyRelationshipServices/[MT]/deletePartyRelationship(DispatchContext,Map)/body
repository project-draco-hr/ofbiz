{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  if (!security.hasEntityPermission("PARTYMGR","_REL_DELETE",userLogin)) {
    String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_DELETE");
  }
  if (result.size() > 0)   return result;
  GenericValue partyRelationship=null;
  try {
    partyRelationship=delegator.findByPrimaryKey("PartyRelationship",UtilMisc.toMap("partyIdFrom",context.get("partyIdFrom"),"partyIdTo",context.get("partyIdTo"),"roleTypeIdFrom",context.get("roleTypeIdFrom"),"roleTypeIdTo",context.get("roleTypeIdTo"),"fromDate",context.get("fromDate")));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return ServiceUtil.returnError("Could not delete party relationship (read failure): " + e.getMessage());
  }
  if (partyRelationship == null) {
    return ServiceUtil.returnError("Could not delete party relationship (partyRelationship not found)");
  }
  try {
    partyRelationship.remove();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError("Could delete party role (write failure): " + e.getMessage());
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
