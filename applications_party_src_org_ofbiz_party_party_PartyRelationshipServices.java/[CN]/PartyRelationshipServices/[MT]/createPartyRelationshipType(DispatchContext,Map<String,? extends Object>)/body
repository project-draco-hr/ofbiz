{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_CREATE");
  if (result.size() > 0)   return result;
  GenericValue partyRelationshipType=delegator.makeValue("PartyRelationshipType",UtilMisc.toMap("partyRelationshipTypeId",context.get("partyRelationshipTypeId")));
  partyRelationshipType.set("parentTypeId",context.get("parentTypeId"),false);
  partyRelationshipType.set("hasTable",context.get("hasTable"),false);
  partyRelationshipType.set("roleTypeIdValidFrom",context.get("roleTypeIdValidFrom"),false);
  partyRelationshipType.set("roleTypeIdValidTo",context.get("roleTypeIdValidTo"),false);
  partyRelationshipType.set("description",context.get("description"),false);
  partyRelationshipType.set("partyRelationshipName",context.get("partyRelationshipName"),false);
  try {
    if (delegator.findOne(partyRelationshipType.getEntityName(),partyRelationshipType.getPrimaryKey(),false) != null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeAlreadyExists",locale));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeReadFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  try {
    partyRelationshipType.create();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeWriteFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
