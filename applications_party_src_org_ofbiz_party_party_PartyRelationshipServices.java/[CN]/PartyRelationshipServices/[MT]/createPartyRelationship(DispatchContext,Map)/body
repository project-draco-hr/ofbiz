{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  if (!security.hasEntityPermission("PARTYMGR","_REL_CREATE",userLogin)) {
    String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_CREATE");
  }
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  if (result.size() > 0)   return result;
  String partyIdFrom=(String)context.get("partyIdFrom");
  if (partyIdFrom == null) {
    partyIdFrom=(String)userLogin.getString("partyId");
  }
  String partyIdTo=(String)context.get("partyIdTo");
  if (partyIdTo == null) {
    errMsg=UtilProperties.getMessage(resource,"partyrelationshipservices.cannot_create_party_relationship_partyIdTo_null",locale);
    return ServiceUtil.returnError(errMsg);
  }
  String roleTypeIdFrom=(String)context.get("roleTypeIdFrom");
  if (roleTypeIdFrom == null) {
    roleTypeIdFrom="_NA_";
  }
  String roleTypeIdTo=(String)context.get("roleTypeIdTo");
  if (roleTypeIdTo == null) {
    roleTypeIdTo="_NA_";
  }
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  if (fromDate == null) {
    fromDate=UtilDateTime.nowTimestamp();
  }
  try {
    if (delegator.findByPrimaryKey("PartyRole",UtilMisc.toMap("partyId",partyIdFrom,"roleTypeId",roleTypeIdFrom)) == null) {
      errMsg=UtilProperties.getMessage(resource,"partyrelationshipservices.cannot_create_party_relationship_partyIdFrom_not_in_role",locale);
      return ServiceUtil.returnError(errMsg);
    }
    if (delegator.findByPrimaryKey("PartyRole",UtilMisc.toMap("partyId",partyIdTo,"roleTypeId",roleTypeIdTo)) == null) {
      errMsg=UtilProperties.getMessage(resource,"partyrelationshipservices.cannot_create_party_relationship_partyIdTo_not_in_role",locale);
      return ServiceUtil.returnError(errMsg);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"partyrelationshipservices.could_not_create_party_role_read",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  GenericValue partyRelationship=delegator.makeValue("PartyRelationship",UtilMisc.toMap("partyIdFrom",partyIdFrom,"partyIdTo",partyIdTo,"roleTypeIdFrom",roleTypeIdFrom,"roleTypeIdTo",roleTypeIdTo,"fromDate",fromDate));
  partyRelationship.setNonPKFields(context);
  try {
    if (delegator.findByPrimaryKey(partyRelationship.getPrimaryKey()) != null) {
      errMsg=UtilProperties.getMessage(resource,"partyrelationshipservices.could_not_create_party_role_exists",locale);
      return ServiceUtil.returnError(errMsg);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"partyrelationshipservices.could_not_create_party_role_read",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  try {
    partyRelationship.create();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"partyrelationshipservices.could_not_create_party_relationship_write",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
