{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.childElements(simpleMethod,element,"condition","then","else-if","else");
    MiniLangValidate.requiredChildElements(simpleMethod,element,"condition","then");
  }
  Element conditionElement=UtilXml.firstChildElement(element,"condition");
  Element conditionChildElement=UtilXml.firstChildElement(conditionElement);
  this.condition=ConditionalFactory.makeConditional(conditionChildElement,simpleMethod);
  Element thenElement=UtilXml.firstChildElement(element,"then");
  this.thenSubOps=Collections.unmodifiableList(SimpleMethod.readOperations(thenElement,simpleMethod));
  List<? extends Element> elseIfElements=UtilXml.childElementList(element,"else-if");
  if (elseIfElements.isEmpty()) {
    this.elseIfs=null;
  }
 else {
    List<ElseIf> elseIfs=new ArrayList<ElseIf>(elseIfElements.size());
    for (    Element elseIfElement : elseIfElements) {
      elseIfs.add(new ElseIf(elseIfElement,simpleMethod));
    }
    this.elseIfs=Collections.unmodifiableList(elseIfs);
  }
  Element elseElement=UtilXml.firstChildElement(element,"else");
  if (elseElement == null) {
    this.elseSubOps=null;
  }
 else {
    this.elseSubOps=Collections.unmodifiableList(SimpleMethod.readOperations(elseElement,simpleMethod));
  }
}
