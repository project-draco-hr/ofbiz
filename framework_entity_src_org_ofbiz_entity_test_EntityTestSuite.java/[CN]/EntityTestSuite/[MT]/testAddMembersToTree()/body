{
  delegator.removeByCondition("TestingType",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-TREE-%"));
  GenericValue testValue=delegator.findOne("TestingType",true,"testingTypeId","TEST-TREE-1");
  assertNull("No pre-existing type value",testValue);
  delegator.create("TestingType","testingTypeId","TEST-TREE-1","description","Testing Type #Tree-1");
  EntityCondition isLevel1=EntityCondition.makeCondition("primaryParentNodeId",EntityOperator.NOT_EQUAL,GenericEntity.NULL_FIELD);
  List<GenericValue> nodeLevel1=delegator.findList("TestingNode",isLevel1,null,null,null,false);
  List<GenericValue> newValues=new LinkedList<GenericValue>();
  Timestamp now=UtilDateTime.nowTimestamp();
  for (  GenericValue node : nodeLevel1) {
    GenericValue testing=delegator.makeValue("Testing","testingId",delegator.getNextSeqId("Testing"),"testingTypeId","TEST-TREE-1");
    testing.put("testingName","leaf-#" + node.getString("testingNodeId"));
    testing.put("description","level1 leaf");
    testing.put("comments","No-comments");
    testing.put("testingSize",Long.valueOf(10));
    testing.put("testingDate",now);
    newValues.add(testing);
    GenericValue member=delegator.makeValue("TestingNodeMember","testingNodeId",node.get("testingNodeId"),"testingId",testing.get("testingId"));
    member.put("fromDate",now);
    member.put("thruDate",UtilDateTime.getNextDayStart(now));
    newValues.add(member);
  }
  int n=delegator.storeAll(newValues);
  assertEquals("Created/Stored Nodes",newValues.size(),n);
}
