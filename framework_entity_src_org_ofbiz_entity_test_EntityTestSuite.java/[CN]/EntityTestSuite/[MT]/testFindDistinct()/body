{
  delegator.removeByCondition("Testing",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-DISTINCT-%"));
  List<GenericValue> testingDistinctList=delegator.findList("Testing",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-DISTINCT-%"),null,null,null,false);
  assertEquals("No existing Testing entities for distinct",0,testingDistinctList.size());
  delegator.removeByCondition("TestingType",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-DISTINCT-%"));
  GenericValue testValue=delegator.findOne("TestingType",true,"testingTypeId","TEST-DISTINCT-1");
  assertNull("No pre-existing type value",testValue);
  delegator.create("TestingType","testingTypeId","TEST-DISTINCT-1","description","Testing Type #Distinct-1");
  testValue=delegator.findOne("TestingType",true,"testingTypeId","TEST-DISTINCT-1");
  assertNotNull("Found newly created type value",testValue);
  delegator.create("Testing","testingId","TEST-DISTINCT-1","testingTypeId","TEST-DISTINCT-1","testingSize",Long.valueOf(10),"comments","No-comments");
  delegator.create("Testing","testingId","TEST-DISTINCT-2","testingTypeId","TEST-DISTINCT-1","testingSize",Long.valueOf(10),"comments","Some-comments");
  delegator.create("Testing","testingId","TEST-DISTINCT-3","testingTypeId","TEST-DISTINCT-1","testingSize",Long.valueOf(9),"comments","No-comments");
  delegator.create("Testing","testingId","TEST-DISTINCT-4","testingTypeId","TEST-DISTINCT-1","testingSize",Long.valueOf(11),"comments","Some-comments");
  List<EntityExpr> exprList=UtilMisc.toList(EntityCondition.makeCondition("testingSize",EntityOperator.EQUALS,Long.valueOf(10)),EntityCondition.makeCondition("comments",EntityOperator.EQUALS,"No-comments"));
  EntityConditionList<EntityExpr> condition=EntityCondition.makeCondition(exprList);
  EntityFindOptions findOptions=new EntityFindOptions();
  findOptions.setDistinct(true);
  List<GenericValue> testingSize10=delegator.findList("Testing",condition,UtilMisc.toSet("testingSize","comments"),null,findOptions,false);
  Debug.logInfo("testingSize10 is " + testingSize10.size(),module);
  assertEquals("There should only be 1 result found by findDistinct()",1,testingSize10.size());
}
