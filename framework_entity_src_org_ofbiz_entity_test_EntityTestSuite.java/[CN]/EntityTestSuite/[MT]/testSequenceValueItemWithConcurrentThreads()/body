{
  final SequenceUtil sequencer=new SequenceUtil((GenericDelegator)delegator,delegator.getGroupHelperInfo(delegator.getEntityGroupName("SequenceValueItem")),delegator.getModelEntity("SequenceValueItem"),"seqName","seqId");
  UUID id=UUID.randomUUID();
  final String sequenceName="BogusSequence" + id.toString();
  final ConcurrentMap<Long,Long> seqIds=new ConcurrentHashMap<Long,Long>();
  final AtomicBoolean duplicateFound=new AtomicBoolean(false);
  final AtomicBoolean nullSeqIdReturned=new AtomicBoolean(false);
  List<Future<Void>> futures=new ArrayList<Future<Void>>();
  Callable getSeqIdTask=new Callable(){
    public Callable<Void> call() throws Exception {
      Long seqId=sequencer.getNextSeqId(sequenceName,1,null);
      if (seqId == null) {
        nullSeqIdReturned.set(true);
        return null;
      }
      Long existingValue=seqIds.putIfAbsent(seqId,seqId);
      if (existingValue != null) {
        duplicateFound.set(true);
      }
      return null;
    }
  }
;
  Callable refreshTask=new Callable(){
    public Callable<Void> call() throws Exception {
      sequencer.forceBankRefresh(sequenceName,1);
      return null;
    }
  }
;
  double probabilityOfRefresh=0.1;
  for (int i=1; i <= 1000; i++) {
    Callable randomTask=Math.random() < probabilityOfRefresh ? refreshTask : getSeqIdTask;
    futures.add(ExecutionPool.GLOBAL_FORK_JOIN.submit(randomTask));
  }
  long startTime=System.currentTimeMillis();
  ExecutionPool.getAllFutures(futures);
  long endTime=System.currentTimeMillis();
  long totalTime=endTime - startTime;
  Debug.logInfo("testSequenceValueItemWithConcurrentThreads total time (ms): " + totalTime,module);
  assertFalse("Null sequence id returned",nullSeqIdReturned.get());
  assertFalse("Duplicate sequence id returned",duplicateFound.get());
}
