{
  delegator.removeByCondition("TestingType",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-CACHE-%"));
  delegator.removeByCondition("TestingSubtype",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-CACHE-%"));
  GenericValue testValue=delegator.findOne("TestingType",true,"testingTypeId","TEST-CACHE-1");
  assertNull("No pre-existing type value",testValue);
  delegator.create("TestingType","testingTypeId","TEST-CACHE-1","description","Testing Type #Cache-1");
  testValue=delegator.findOne("TestingType",true,"testingTypeId","TEST-CACHE-1");
  assertEquals("Retrieved from cache value has the correct description","Testing Type #Cache-1",testValue.getString("description"));
  try {
    testValue.put("description","New Testing Type #Cache-1");
    fail("Modified an immutable GenericValue");
  }
 catch (  IllegalStateException e) {
  }
  try {
    testValue.remove("description");
    fail("Modified an immutable GenericValue");
  }
 catch (  UnsupportedOperationException e) {
  }
  testValue=(GenericValue)testValue.clone();
  testValue.put("description","New Testing Type #Cache-1");
  testValue.store();
  testValue=delegator.findOne("TestingType",true,"testingTypeId","TEST-CACHE-1");
  assertEquals("Retrieved from cache value has the correct description","New Testing Type #Cache-1",testValue.getString("description"));
  testValue=(GenericValue)testValue.clone();
  testValue.remove();
  testValue=delegator.findOne("TestingType",true,"testingTypeId","TEST-CACHE-1");
  assertEquals("Retrieved from cache value is null",null,testValue);
  EntityCondition testCondition=EntityCondition.makeCondition("description",EntityOperator.EQUALS,"Testing Type #Cache-2");
  List<GenericValue> testList=delegator.findList("TestingType",testCondition,null,null,null,true);
  assertEquals("Delegator findList returned no values",0,testList.size());
  delegator.create("TestingType","testingTypeId","TEST-CACHE-2","description","Testing Type #Cache-2");
  testList=delegator.findList("TestingType",testCondition,null,null,null,true);
  assertEquals("Delegator findList returned one value",1,testList.size());
  testValue=testList.get(0);
  assertEquals("Retrieved from cache value has the correct description","Testing Type #Cache-2",testValue.getString("description"));
  try {
    testValue.put("description","New Testing Type #2");
    fail("Modified an immutable GenericValue");
  }
 catch (  IllegalStateException e) {
  }
  try {
    testValue.remove("description");
    fail("Modified an immutable GenericValue");
  }
 catch (  UnsupportedOperationException e) {
  }
  testValue=(GenericValue)testValue.clone();
  testValue.put("testingTypeId","TEST-CACHE-3");
  testValue.create();
  testList=delegator.findList("TestingType",testCondition,null,null,null,true);
  assertEquals("Delegator findList returned two values",2,testList.size());
  testValue.put("description","New Testing Type #Cache-3");
  testValue.store();
  testList=delegator.findList("TestingType",testCondition,null,null,null,true);
  assertEquals("Delegator findList returned one value",1,testList.size());
  testValue=testList.get(0);
  testValue=(GenericValue)testValue.clone();
  testValue.remove();
  testList=delegator.findList("TestingType",testCondition,null,null,null,true);
  assertEquals("Delegator findList returned empty list",0,testList.size());
  testValue=delegator.findOne("TestingSubtype",true,"testingTypeId","TEST-CACHE-3");
  assertNull("No pre-existing TestingSubtype",testValue);
  testValue=delegator.create("TestingSubtype","testingTypeId","TEST-CACHE-3","subtypeDescription","Testing Subtype #Cache-3");
  assertNotNull("TestingSubtype created",testValue);
  testValue=delegator.findOne("TestingViewPks",true,"testingTypeId","TEST-CACHE-3");
  assertEquals("View retrieved from cache has the correct member description","Testing Subtype #Cache-3",testValue.getString("subtypeDescription"));
  testValue=delegator.findOne("TestingSubtype",true,"testingTypeId","TEST-CACHE-3");
  testValue=(GenericValue)testValue.clone();
  testValue.put("subtypeDescription","New Testing Subtype #Cache-3");
  testValue.store();
  testValue=delegator.findOne("TestingViewPks",true,"testingTypeId","TEST-CACHE-3");
  assertEquals("View retrieved from cache has the correct member description","New Testing Subtype #Cache-3",testValue.getString("subtypeDescription"));
}
