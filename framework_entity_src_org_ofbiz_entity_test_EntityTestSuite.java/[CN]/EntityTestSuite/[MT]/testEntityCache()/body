{
  delegator.removeByCondition("TestingType",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-CACHE-%"));
  delegator.removeByCondition("TestingSubtype",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-CACHE-%"));
  GenericValue testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-CACHE-1").cache(true).queryOne();
  assertNull("No pre-existing type value",testValue);
  delegator.create("TestingType","testingTypeId","TEST-CACHE-1","description","Testing Type #Cache-1");
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-CACHE-1").cache(true).queryOne();
  assertEquals("Retrieved from cache value has the correct description","Testing Type #Cache-1",testValue.getString("description"));
  try {
    testValue.put("description","New Testing Type #Cache-1");
    fail("Modified an immutable GenericValue");
  }
 catch (  IllegalStateException e) {
  }
  try {
    testValue.remove("description");
    fail("Modified an immutable GenericValue");
  }
 catch (  UnsupportedOperationException e) {
  }
  int hashCode=testValue.hashCode();
  GenericValue originalValue=testValue;
  testValue=(GenericValue)testValue.clone();
  assertTrue("Cloned GenericValue equals original GenericValue",originalValue.equals(testValue));
  assertTrue("Cloned GenericValue has the same hash code",hashCode == testValue.hashCode());
  testValue.put("description","New Testing Type #Cache-1");
  assertFalse("Modified GenericValue does not equal original GenericValue",originalValue.equals(testValue));
  assertTrue("Modified GenericValue has a different hash code",hashCode != testValue.hashCode());
  testValue.store();
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-CACHE-1").cache(true).queryOne();
  assertEquals("Retrieved from cache value has the correct description","New Testing Type #Cache-1",testValue.getString("description"));
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-CACHE-1").cache(true).queryFirst();
  EntityCondition storeByCondition=EntityCondition.makeCondition(UtilMisc.toMap("testingTypeId","TEST-CACHE-1","lastUpdatedStamp",testValue.get("lastUpdatedStamp")));
  int qtyChanged=delegator.storeByCondition("TestingType",UtilMisc.toMap("description","New Testing Type #Cache-0"),storeByCondition);
  assertEquals("Delegator.storeByCondition updated one value",1,qtyChanged);
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-CACHE-1").cache(true).queryFirst();
  assertEquals("Retrieved from cache value has the correct description","New Testing Type #Cache-0",testValue.getString("description"));
  qtyChanged=delegator.removeByCondition("TestingType",storeByCondition);
  assertEquals("Delegator.removeByCondition removed one value",1,qtyChanged);
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-CACHE-1").cache(true).queryFirst();
  assertEquals("Retrieved from cache value is null",null,testValue);
  testValue=delegator.create("TestingType","testingTypeId","TEST-CACHE-1","description","Testing Type #Cache-1");
  testValue.remove();
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-CACHE-1").cache(true).queryOne();
  assertEquals("Retrieved from cache value is null",null,testValue);
  List<GenericValue> testList=EntityQuery.use(delegator).from("TestingType").where(EntityCondition.makeCondition("description",EntityOperator.EQUALS,"Testing Type #Cache-2")).cache(true).queryList();
  assertEquals("Delegator findList returned no values",0,testList.size());
  delegator.create("TestingType","testingTypeId","TEST-CACHE-2","description","Testing Type #Cache-2");
  testList=EntityQuery.use(delegator).from("TestingType").where(EntityCondition.makeCondition("description",EntityOperator.EQUALS,"Testing Type #Cache-2")).cache(true).queryList();
  assertEquals("Delegator findList returned one value",1,testList.size());
  testValue=testList.get(0);
  assertEquals("Retrieved from cache value has the correct description","Testing Type #Cache-2",testValue.getString("description"));
  try {
    testValue.put("description","New Testing Type #2");
    fail("Modified an immutable GenericValue");
  }
 catch (  IllegalStateException e) {
  }
  try {
    testValue.remove("description");
    fail("Modified an immutable GenericValue");
  }
 catch (  UnsupportedOperationException e) {
  }
  testValue=(GenericValue)testValue.clone();
  testValue.put("testingTypeId","TEST-CACHE-3");
  testValue.create();
  testList=EntityQuery.use(delegator).from("TestingType").where(EntityCondition.makeCondition("description",EntityOperator.EQUALS,"Testing Type #Cache-2")).cache(true).queryList();
  assertEquals("Delegator findList returned two values",2,testList.size());
  testValue.put("description","New Testing Type #Cache-3");
  testValue.store();
  testList=EntityQuery.use(delegator).from("TestingType").where(EntityCondition.makeCondition("description",EntityOperator.EQUALS,"Testing Type #Cache-2")).cache(true).queryList();
  assertEquals("Delegator findList returned one value",1,testList.size());
  testValue=testList.get(0);
  testValue=(GenericValue)testValue.clone();
  testValue.remove();
  testList=EntityQuery.use(delegator).from("TestingType").where(EntityCondition.makeCondition("description",EntityOperator.EQUALS,"Testing Type #Cache-2")).cache(true).queryList();
  assertEquals("Delegator findList returned empty list",0,testList.size());
  testValue=EntityQuery.use(delegator).from("TestingSubtype").where("testingTypeId","TEST-CACHE-3").cache(true).queryOne();
  assertNull("No pre-existing TestingSubtype",testValue);
  testValue=delegator.create("TestingSubtype","testingTypeId","TEST-CACHE-3","subtypeDescription","Testing Subtype #Cache-3");
  assertNotNull("TestingSubtype created",testValue);
  testValue=EntityQuery.use(delegator).from("TestingViewPks").where("testingTypeId","TEST-CACHE-3").cache(true).queryOne();
  assertEquals("View retrieved from cache has the correct member description","Testing Subtype #Cache-3",testValue.getString("subtypeDescription"));
  testValue=EntityQuery.use(delegator).from("TestingSubtype").where("testingTypeId","TEST-CACHE-3").cache(true).queryOne();
  testValue=(GenericValue)testValue.clone();
  testValue.put("subtypeDescription","New Testing Subtype #Cache-3");
  testValue.store();
  testValue=EntityQuery.use(delegator).from("TestingViewPks").where("testingTypeId","TEST-CACHE-3").cache(true).queryOne();
  assertEquals("View retrieved from cache has the correct member description","New Testing Subtype #Cache-3",testValue.getString("subtypeDescription"));
}
