{
  delegator.removeByCondition("Testing",EntityCondition.makeCondition("testingTypeId",EntityOperator.EQUALS,"TEST-COUNT-VIEW"));
  flushAndRecreateTree("count-views");
  createNodeMembers("TEST-COUNT-VIEW","Testing Type #Count","count-views");
  EntityCondition isNodeWithMember=EntityCondition.makeCondition(EntityCondition.makeCondition("testingId",EntityOperator.NOT_EQUAL,GenericEntity.NULL_FIELD),EntityOperator.AND,EntityCondition.makeCondition("description",EntityOperator.LIKE,"count-views:%"));
  List<GenericValue> nodeWithMembers=EntityQuery.use(delegator).from("TestingNodeAndMember").where(isNodeWithMember).queryList();
  for (  GenericValue v : nodeWithMembers) {
    Map<String,Object> fields=v.getAllFields();
    Debug.logInfo("--------------------------",module);
    for (    Map.Entry<String,Object> entry : fields.entrySet()) {
      String field=entry.getKey();
      Object value=entry.getValue();
      Debug.logInfo(field.toString() + " = " + ((value == null) ? "[null]" : value),module);
    }
  }
  long testingcount=EntityQuery.use(delegator).from("Testing").where("testingTypeId",EntityOperator.EQUALS,"TEST-COUNT-VIEW").queryCount();
  assertEquals("Number of views should equal number of created entities in the test.",testingcount,nodeWithMembers.size());
}
