{
  assertIsRunning();
  if (crashedJobsReloaded) {
    return;
  }
  List<GenericValue> crashed=null;
  List<EntityExpr> statusExprList=UtilMisc.toList(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"SERVICE_PENDING"),EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"SERVICE_QUEUED"),EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"SERVICE_RUNNING"));
  EntityCondition statusCondition=EntityCondition.makeCondition(statusExprList,EntityOperator.OR);
  EntityCondition mainCondition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("runByInstanceId",instanceId),statusCondition));
  try {
    crashed=EntityQuery.use(delegator).from("JobSandbox").where(mainCondition).orderBy("startDateTime").queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Unable to load crashed jobs",module);
  }
  if (UtilValidate.isNotEmpty(crashed)) {
    int rescheduled=0;
    Timestamp now=UtilDateTime.nowTimestamp();
    for (    GenericValue job : crashed) {
      try {
        Debug.logInfo("Scheduling Job : " + job,module);
        String pJobId=job.getString("parentJobId");
        if (pJobId == null) {
          pJobId=job.getString("jobId");
        }
        GenericValue newJob=GenericValue.create(job);
        newJob.set("statusId","SERVICE_PENDING");
        newJob.set("runTime",now);
        newJob.set("previousJobId",job.getString("jobId"));
        newJob.set("parentJobId",pJobId);
        newJob.set("startDateTime",null);
        newJob.set("runByInstanceId",null);
        delegator.createSetNextSeqId(newJob);
        job.set("statusId","SERVICE_CRASHED");
        job.set("cancelDateTime",now);
        delegator.store(job);
        rescheduled++;
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
    }
    if (Debug.infoOn())     Debug.logInfo("-- " + rescheduled + " jobs re-scheduled",module);
  }
 else {
    if (Debug.infoOn())     Debug.logInfo("No crashed jobs to re-schedule",module);
  }
  crashedJobsReloaded=true;
}
