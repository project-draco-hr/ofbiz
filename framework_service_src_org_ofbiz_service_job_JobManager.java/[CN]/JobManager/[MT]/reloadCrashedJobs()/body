{
  String instanceId=UtilProperties.getPropertyValue("general.properties","unique.instanceId","ofbiz0");
  List<GenericValue> crashed=null;
  List<GenericValue> pending=null;
  List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition("runByInstanceId",instanceId));
  exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"SERVICE_RUNNING"));
  EntityConditionList<EntityExpr> ecl=EntityCondition.makeCondition(exprs);
  try {
    crashed=delegator.findList("JobSandbox",ecl,null,UtilMisc.toList("startDateTime"),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to load crashed jobs",module);
  }
  exprs=UtilMisc.toList(EntityCondition.makeCondition("runByInstanceId",instanceId));
  exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"SERVICE_PENDING"));
  ecl=EntityCondition.makeCondition(exprs);
  try {
    pending=delegator.findList("JobSandbox",ecl,null,UtilMisc.toList("startDateTime"),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to load pending jobs",module);
  }
  if (UtilValidate.isNotEmpty(crashed)) {
    try {
      int rescheduled=0;
      for (      GenericValue job : crashed) {
        String serviceName=job.getString("serviceName");
        String recurrenceInfoId=job.getString("recurrenceInfoId");
        String tempExprId=job.getString("tempExprId");
        if (UtilValidate.isNotEmpty(pending)) {
          for (          GenericValue parentJob : pending) {
            String parentServiceName=parentJob.getString("serviceName");
            String parentRecurrenceInfoId=parentJob.getString("recurrenceInfoId");
            String parentTempExprId=parentJob.getString("tempExprId");
            if (serviceName.equals(parentServiceName) && recurrenceInfoId.equals(parentRecurrenceInfoId) || tempExprId.equals(parentTempExprId)) {
              continue;
            }
          }
        }
        if (0 == job.getLong("maxRetry").longValue())         continue;
        Timestamp now=UtilDateTime.nowTimestamp();
        Debug.log("Scheduling Job : " + job,module);
        String pJobId=job.getString("parentJobId");
        if (pJobId == null) {
          pJobId=job.getString("jobId");
        }
        GenericValue newJob=GenericValue.create(job);
        newJob.set("statusId","SERVICE_PENDING");
        newJob.set("runTime",now);
        newJob.set("previousJobId",job.getString("jobId"));
        newJob.set("parentJobId",pJobId);
        newJob.set("startDateTime",null);
        newJob.set("runByInstanceId",null);
        delegator.createSetNextSeqId(newJob);
        job.set("statusId","SERVICE_CRASHED");
        job.set("cancelDateTime",now);
        delegator.store(job);
        rescheduled++;
      }
      if (Debug.infoOn())       Debug.logInfo("-- " + rescheduled + " jobs re-scheduled",module);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
  }
 else {
    if (Debug.infoOn())     Debug.logInfo("No crashed jobs to re-schedule",module);
  }
}
