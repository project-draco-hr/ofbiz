{
  if (delegator == null) {
    Debug.logWarning("No delegator referenced; cannot schedule job.",module);
    return;
  }
  String infoId=null;
  if (frequency > -1 && count != 0) {
    try {
      RecurrenceInfo info=RecurrenceInfo.makeInfo(delegator,startTime,frequency,interval,count);
      infoId=info.primaryKey();
    }
 catch (    RecurrenceInfoException e) {
      throw new JobManagerException(e.getMessage(),e);
    }
  }
  if (UtilValidate.isEmpty(jobName)) {
    jobName=Long.toString((new Date().getTime()));
  }
  Map<String,Object> jFields=UtilMisc.<String,Object>toMap("jobName",jobName,"runTime",new java.sql.Timestamp(startTime),"serviceName",serviceName,"recurrenceInfoId",infoId,"runtimeDataId",dataId);
  if (poolName != null && poolName.length() > 0) {
    jFields.put("poolId",poolName);
  }
 else {
    jFields.put("poolId",ServiceConfigUtil.getSendPool());
  }
  jFields.put("loaderName",dispatcherName);
  jFields.put("maxRetry",new Long(maxRetry));
  GenericValue jobV=null;
  try {
    jobV=delegator.makeValue("JobSandbox",jFields);
    delegator.createSetNextSeqId(jobV);
  }
 catch (  GenericEntityException e) {
    throw new JobManagerException(e.getMessage(),e);
  }
}
