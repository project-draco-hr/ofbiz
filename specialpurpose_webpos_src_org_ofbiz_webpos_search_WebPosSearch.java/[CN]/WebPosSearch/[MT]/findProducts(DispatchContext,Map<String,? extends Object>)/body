{
  Delegator delegator=dctx.getDelegator();
  String searchByProductIdValue=(String)context.get("searchByProductIdValue");
  String searchByProductName=(String)context.get("searchByProductName");
  String searchByProductDescription=(String)context.get("searchByProductDescription");
  String goodIdentificationTypeId=(String)context.get("goodIdentificationTypeId");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  List<EntityCondition> andExprs=FastList.newInstance();
  EntityCondition mainCond=null;
  List<String> orderBy=FastList.newInstance();
  List<String> fieldsToSelect=FastList.newInstance();
  String entityName="Product";
  fieldsToSelect.add("productId");
  fieldsToSelect.add("productName");
  fieldsToSelect.add("description");
  orderBy.add("productName");
  orderBy.add("description");
  if (UtilValidate.isNotEmpty(searchByProductName)) {
    searchByProductName=searchByProductName.toUpperCase().trim();
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("productName"),EntityOperator.LIKE,EntityFunction.UPPER("%" + searchByProductName + "%")));
  }
  if (UtilValidate.isNotEmpty(searchByProductDescription)) {
    searchByProductDescription=searchByProductDescription.toUpperCase().trim();
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("description"),EntityOperator.LIKE,EntityFunction.UPPER("%" + searchByProductDescription + "%")));
  }
  if (UtilValidate.isNotEmpty(searchByProductIdValue)) {
    entityName="GoodIdentificationAndProduct";
    searchByProductIdValue=searchByProductIdValue.toUpperCase().trim();
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("idValue"),EntityOperator.EQUALS,searchByProductIdValue));
    if (UtilValidate.isNotEmpty(goodIdentificationTypeId)) {
      andExprs.add(EntityCondition.makeCondition("goodIdentificationTypeId",EntityOperator.EQUALS,goodIdentificationTypeId));
    }
  }
  mainCond=EntityCondition.makeCondition(andExprs,EntityOperator.AND);
  List<GenericValue> products=null;
  try {
    products=delegator.findList(entityName,mainCond,null,orderBy,null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  result.put("productsList",products);
  return result;
}
