{
  Map<String,Object> statusFields=UtilMisc.<String,Object>toMap("orderId",orderId,"statusId",orderStatus,"userLogin",userLogin);
  Map<String,Object> statusResult=dispatcher.runSync("changeOrderStatus",statusFields);
  if (statusResult.containsKey(ModelService.ERROR_MESSAGE)) {
    Debug.logError("Problems adjusting order header status for order #" + orderId,module);
  }
  Map<String,Object> itemStatusFields=UtilMisc.<String,Object>toMap("orderId",orderId,"statusId",toItemStatus,"userLogin",userLogin);
  if (fromItemStatus != null) {
    itemStatusFields.put("fromStatusId",fromItemStatus);
  }
  Map<String,Object> itemStatusResult=dispatcher.runSync("changeOrderItemStatus",itemStatusFields);
  if (itemStatusResult.containsKey(ModelService.ERROR_MESSAGE)) {
    Debug.logError("Problems adjusting order item status for order #" + orderId,module);
  }
  if (digitalItemStatus != null && !digitalItemStatus.equals(toItemStatus)) {
    Delegator delegator=dispatcher.getDelegator();
    GenericValue orderHeader=null;
    try {
      orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"ERROR: Unable to get OrderHeader for OrderID : " + orderId,module);
    }
    if (orderHeader != null) {
      List<GenericValue> orderItems=null;
      try {
        orderItems=orderHeader.getRelated("OrderItem",null,null,false);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"ERROR: Unable to get OrderItem records for OrderHeader : " + orderId,module);
      }
      if (UtilValidate.isNotEmpty(orderItems)) {
        for (        GenericValue orderItem : orderItems) {
          String orderItemSeqId=orderItem.getString("orderItemSeqId");
          GenericValue product=null;
          try {
            product=orderItem.getRelatedOne("Product",false);
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"ERROR: Unable to get Product record for OrderItem : " + orderId + "/"+ orderItemSeqId,module);
          }
          if (product != null) {
            GenericValue productType=null;
            try {
              productType=product.getRelatedOne("ProductType",false);
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,"ERROR: Unable to get ProductType from Product : " + product,module);
            }
            if (productType != null) {
              String isDigital=productType.getString("isDigital");
              if (isDigital != null && "Y".equalsIgnoreCase(isDigital)) {
                Map<String,Object> digitalStatusFields=UtilMisc.<String,Object>toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"statusId",digitalItemStatus,"userLogin",userLogin);
                Map<String,Object> digitalStatusChange=dispatcher.runSync("changeOrderItemStatus",digitalStatusFields);
                if (ModelService.RESPOND_ERROR.equals(digitalStatusChange.get(ModelService.RESPONSE_MESSAGE))) {
                  Debug.logError("Problems with digital product status change : " + product,module);
                }
              }
            }
          }
 else {
            String orderItemType=orderItem.getString("orderItemTypeId");
            if (!"PRODUCT_ORDER_ITEM".equals(orderItemType)) {
              Map<String,Object> digitalStatusFields=UtilMisc.<String,Object>toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"statusId",digitalItemStatus,"userLogin",userLogin);
              Map<String,Object> digitalStatusChange=dispatcher.runSync("changeOrderItemStatus",digitalStatusFields);
              if (ModelService.RESPOND_ERROR.equals(digitalStatusChange.get(ModelService.RESPONSE_MESSAGE))) {
                Debug.logError("Problems with digital product status change : " + product,module);
              }
            }
          }
        }
      }
    }
  }
}
