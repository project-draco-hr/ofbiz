{
  ModelService service=new ModelService();
  service.name=UtilXml.checkEmpty(serviceElement.getAttribute("name"));
  service.engineName=UtilXml.checkEmpty(serviceElement.getAttribute("engine"));
  service.location=UtilXml.checkEmpty(serviceElement.getAttribute("location"));
  service.invoke=UtilXml.checkEmpty(serviceElement.getAttribute("invoke"));
  service.defaultEntityName=UtilXml.checkEmpty(serviceElement.getAttribute("default-entity-name"));
  service.auth="true".equalsIgnoreCase(serviceElement.getAttribute("auth"));
  service.export="true".equalsIgnoreCase(serviceElement.getAttribute("export"));
  service.debug="true".equalsIgnoreCase(serviceElement.getAttribute("debug"));
  service.validate=!"false".equalsIgnoreCase(serviceElement.getAttribute("validate"));
  service.useTransaction=!"false".equalsIgnoreCase(serviceElement.getAttribute("use-transaction"));
  service.requireNewTransaction=!"false".equalsIgnoreCase(serviceElement.getAttribute("require-new-transaction"));
  String maxRetryStr=UtilXml.checkEmpty(serviceElement.getAttribute("max-retry"));
  int maxRetry=-1;
  if (!UtilValidate.isEmpty(maxRetryStr)) {
    try {
      maxRetry=Integer.parseInt(maxRetryStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting maxRetry to -1 (default)",module);
      maxRetry=-1;
    }
  }
  service.maxRetry=maxRetry;
  String timeoutStr=UtilXml.checkEmpty(serviceElement.getAttribute("transaction-timeout"),serviceElement.getAttribute("transaction-timout"));
  int timeout=0;
  if (!UtilValidate.isEmpty(timeoutStr)) {
    try {
      timeout=Integer.parseInt(timeoutStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting timeout to 0 (default)",module);
      timeout=0;
    }
  }
  service.transactionTimeout=timeout;
  service.description=getCDATADef(serviceElement,"description");
  service.nameSpace=getCDATADef(serviceElement,"namespace");
  List group=UtilXml.childElementList(serviceElement,"group");
  if (group != null && group.size() > 0) {
    Element groupElement=(Element)group.get(0);
    groupElement.setAttribute("name","_" + service.name + ".group");
    service.internalGroup=new GroupModel(groupElement);
    service.invoke=service.internalGroup.getGroupName();
  }
  service.contextInfo=FastMap.newInstance();
  this.createPermission(serviceElement,service);
  this.createPermGroups(serviceElement,service);
  this.createImplDefs(serviceElement,service);
  this.createAutoAttrDefs(serviceElement,service);
  this.createAttrDefs(serviceElement,service);
  this.createOverrideDefs(serviceElement,service);
  return service;
}
