{
  UtilTimer utilTimer=new UtilTimer();
  Document document;
  if (this.isFromURL) {
    document=getDocument(readerURL);
    if (document == null) {
      return null;
    }
  }
 else {
    try {
      document=handler.getDocument();
    }
 catch (    GenericConfigException e) {
      Debug.logError(e,"Error getting XML document from resource",module);
      return null;
    }
  }
  Map<String,ModelService> modelServices=FastMap.newInstance();
  if (this.isFromURL) {
  }
 else {
  }
  Element docElement=document.getDocumentElement();
  if (docElement == null) {
    return null;
  }
  docElement.normalize();
  String resourceLocation=handler.getLocation();
  try {
    resourceLocation=handler.getURL().toExternalForm();
  }
 catch (  GenericConfigException e) {
    Debug.logError(e,"Could not get resource URL",module);
  }
  int i=0;
  Node curChild=docElement.getFirstChild();
  if (curChild != null) {
    if (this.isFromURL) {
      utilTimer.timerString("Before start of service loop in file " + readerURL);
    }
 else {
      utilTimer.timerString("Before start of service loop in " + handler);
    }
    do {
      if (curChild.getNodeType() == Node.ELEMENT_NODE && "service".equals(curChild.getNodeName())) {
        i++;
        Element curServiceElement=(Element)curChild;
        String serviceName=UtilXml.checkEmpty(curServiceElement.getAttribute("name"));
        if (modelServices.containsKey(serviceName)) {
          Debug.logWarning("Service " + serviceName + " is defined more than once, "+ "most recent will over-write previous definition(s)",module);
        }
        ModelService service=createModelService(curServiceElement,resourceLocation);
        if (service != null) {
          modelServices.put(serviceName,service);
        }
 else {
          Debug.logWarning("-- -- SERVICE ERROR:getModelService: Could not create service for serviceName: " + serviceName,module);
        }
      }
    }
 while ((curChild=curChild.getNextSibling()) != null);
  }
 else {
    Debug.logWarning("No child nodes found.",module);
  }
  if (this.isFromURL) {
    utilTimer.timerString("Finished file " + readerURL + " - Total Services: "+ i+ " FINISHED");
    Debug.logInfo("Loaded [" + i + "] Services from "+ readerURL,module);
  }
 else {
    utilTimer.timerString("Finished document in " + handler + " - Total Services: "+ i+ " FINISHED");
    if (Debug.infoOn()) {
      Debug.logInfo("Loaded [" + i + "] Services from "+ resourceLocation,module);
    }
  }
  return modelServices;
}
