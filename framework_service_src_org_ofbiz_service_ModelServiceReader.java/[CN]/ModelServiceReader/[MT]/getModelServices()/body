{
  if (modelServices == null) {
synchronized (ModelServiceReader.class) {
      if (modelServices == null) {
        modelServices=FastMap.newInstance();
        UtilTimer utilTimer=new UtilTimer();
        Document document;
        if (this.isFromURL) {
          document=getDocument(readerURL);
          if (document == null) {
            modelServices=null;
            return null;
          }
        }
 else {
          try {
            document=handler.getDocument();
          }
 catch (          GenericConfigException e) {
            Debug.logError(e,"Error getting XML document from resource",module);
            return null;
          }
        }
        if (this.isFromURL) {
        }
 else {
        }
        Element docElement=document.getDocumentElement();
        if (docElement == null) {
          modelServices=null;
          return null;
        }
        docElement.normalize();
        int i=0;
        Node curChild=docElement.getFirstChild();
        if (curChild != null) {
          if (this.isFromURL) {
            utilTimer.timerString("Before start of service loop in file " + readerURL);
          }
 else {
            utilTimer.timerString("Before start of service loop in " + handler);
          }
          do {
            if (curChild.getNodeType() == Node.ELEMENT_NODE && "service".equals(curChild.getNodeName())) {
              i++;
              Element curService=(Element)curChild;
              String serviceName=UtilXml.checkEmpty(curService.getAttribute("name"));
              if (modelServices.containsKey(serviceName)) {
                Debug.logWarning("WARNING: Service " + serviceName + " is defined more than once, "+ "most recent will over-write previous definition(s)",module);
              }
              ModelService service=createModelService(curService);
              if (service != null) {
                modelServices.put(serviceName,service);
              }
 else {
                Debug.logWarning("-- -- SERVICE ERROR:getModelService: Could not create service for serviceName: " + serviceName,module);
              }
            }
          }
 while ((curChild=curChild.getNextSibling()) != null);
        }
 else {
          Debug.logWarning("No child nodes found.",module);
        }
        if (this.isFromURL) {
          utilTimer.timerString("Finished file " + readerURL + " - Total Services: "+ i+ " FINISHED");
          Debug.logImportant("Loaded " + i + " Service definitions from "+ readerURL,module);
        }
 else {
          utilTimer.timerString("Finished document in " + handler + " - Total Services: "+ i+ " FINISHED");
          if (Debug.importantOn()) {
            String resourceLocation=handler.getLocation();
            try {
              resourceLocation=handler.getURL().toExternalForm();
            }
 catch (            GenericConfigException e) {
              Debug.logError(e,"Could not get resource URL",module);
            }
            Debug.logImportant("Loaded " + i + " Service definitions from "+ resourceLocation,module);
          }
        }
      }
    }
  }
  return modelServices;
}
