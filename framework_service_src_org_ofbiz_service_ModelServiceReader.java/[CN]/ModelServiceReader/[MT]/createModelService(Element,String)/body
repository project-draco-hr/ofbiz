{
  ModelService service=new ModelService();
  service.name=UtilXml.checkEmpty(serviceElement.getAttribute("name")).intern();
  if (serviceDebugMode) {
    Wrap<GenericInvoker> wrap=new Wrap<GenericInvoker>().fileName(resourceLocation + '#' + service.name).wrappedClass(GenericInvokerImpl.class);
    for (    Method method : GenericInvokerImpl.class.getDeclaredMethods()) {
      if (method.getName().startsWith("run")) {
        wrap.wrap(method);
      }
 else       if (method.getName().startsWith("send")) {
        wrap.wrap(method);
      }
    }
    Object startLine=serviceElement.getUserData("startLine");
    if (startLine != null) {
      wrap.lineNumber(((Integer)startLine).intValue());
    }
    service.invoker=wrap.newInstance(new Class<?>[]{ModelService.class},new Object[]{service});
  }
  service.definitionLocation=resourceLocation;
  service.engineName=UtilXml.checkEmpty(serviceElement.getAttribute("engine")).intern();
  service.location=UtilXml.checkEmpty(serviceElement.getAttribute("location")).intern();
  service.invoke=UtilXml.checkEmpty(serviceElement.getAttribute("invoke")).intern();
  service.semaphore=UtilXml.checkEmpty(serviceElement.getAttribute("semaphore")).intern();
  service.defaultEntityName=UtilXml.checkEmpty(serviceElement.getAttribute("default-entity-name")).intern();
  service.fromLoader=isFromURL ? readerURL.toExternalForm() : handler.getLoaderName();
  service.auth="true".equalsIgnoreCase(serviceElement.getAttribute("auth"));
  service.export="true".equalsIgnoreCase(serviceElement.getAttribute("export"));
  service.debug="true".equalsIgnoreCase(serviceElement.getAttribute("debug"));
  service.validate=!"false".equalsIgnoreCase(serviceElement.getAttribute("validate"));
  service.useTransaction=!"false".equalsIgnoreCase(serviceElement.getAttribute("use-transaction"));
  service.requireNewTransaction=!"false".equalsIgnoreCase(serviceElement.getAttribute("require-new-transaction"));
  String semaphoreWaitStr=UtilXml.checkEmpty(serviceElement.getAttribute("semaphore-wait-seconds"));
  int semaphoreWait=300;
  if (!UtilValidate.isEmpty(semaphoreWaitStr)) {
    try {
      semaphoreWait=Integer.parseInt(semaphoreWaitStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting semaphore-wait to 5 minutes (default)",module);
      semaphoreWait=300;
    }
  }
  service.semaphoreWait=semaphoreWait;
  String semaphoreSleepStr=UtilXml.checkEmpty(serviceElement.getAttribute("semaphore-sleep"));
  int semaphoreSleep=500;
  if (!UtilValidate.isEmpty(semaphoreSleepStr)) {
    try {
      semaphoreSleep=Integer.parseInt(semaphoreSleepStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting semaphore-sleep to 1/2 second (default)",module);
      semaphoreSleep=500;
    }
  }
  service.semaphoreSleep=semaphoreSleep;
  String maxRetryStr=UtilXml.checkEmpty(serviceElement.getAttribute("max-retry"));
  int maxRetry=-1;
  if (!UtilValidate.isEmpty(maxRetryStr)) {
    try {
      maxRetry=Integer.parseInt(maxRetryStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting maxRetry to -1 (default)",module);
      maxRetry=-1;
    }
  }
  service.maxRetry=maxRetry;
  String timeoutStr=UtilXml.checkEmpty(serviceElement.getAttribute("transaction-timeout"),serviceElement.getAttribute("transaction-timout"));
  int timeout=0;
  if (!UtilValidate.isEmpty(timeoutStr)) {
    try {
      timeout=Integer.parseInt(timeoutStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting timeout to 0 (default)",module);
      timeout=0;
    }
  }
  service.transactionTimeout=timeout;
  service.description=getCDATADef(serviceElement,"description");
  service.nameSpace=getCDATADef(serviceElement,"namespace");
  service.contextInfo=FastMap.newInstance();
  this.createNotification(serviceElement,service);
  this.createPermission(serviceElement,service);
  this.createPermGroups(serviceElement,service);
  this.createGroupDefs(serviceElement,service);
  this.createImplDefs(serviceElement,service);
  this.createAutoAttrDefs(serviceElement,service);
  this.createAttrDefs(serviceElement,service);
  this.createOverrideDefs(serviceElement,service);
  return service;
}
