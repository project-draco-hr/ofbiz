{
  if (this.compare == null) {
    throw new MiniLangRuntimeException("Invalid operator " + this.operator,this);
  }
  String value=methodContext.expandString(this.value);
  String format=methodContext.expandString(this.format);
  Object fieldVal=null;
  if (!mapAcsr.isEmpty()) {
    Map<String,? extends Object> fromMap=mapAcsr.get(methodContext);
    if (fromMap == null) {
      if (Debug.infoOn())       Debug.logInfo("Map not found with name " + mapAcsr + ", using empty string for comparison",module);
    }
 else {
      fieldVal=fieldAcsr.get(fromMap,methodContext);
    }
  }
 else {
    fieldVal=fieldAcsr.get(methodContext);
  }
  Class<?> targetClass=this.targetClass;
  if (targetClass == null) {
    targetClass=MiniLangUtil.getObjectClassForConversion(fieldVal);
  }
  boolean result=false;
  try {
    result=this.compare.doCompare(fieldVal,value,targetClass,methodContext.getLocale(),methodContext.getTimeZone(),format);
  }
 catch (  Exception e) {
    if (methodContext.getMethodType() == MethodContext.EVENT) {
      methodContext.putEnv(simpleMethod.getEventErrorMessageName(),e.getMessage());
      methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
    }
 else {
      methodContext.putEnv(simpleMethod.getServiceErrorMessageListName(),e.getMessage());
      methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
    }
    return false;
  }
  if (result) {
    return SimpleMethod.runSubOps(subOps,methodContext);
  }
 else {
    if (elseSubOps != null) {
      return SimpleMethod.runSubOps(elseSubOps,methodContext);
    }
 else {
      return true;
    }
  }
}
