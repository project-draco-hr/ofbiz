{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String jobId=(String)context.get("jobId");
  try {
    GenericValue userLogin=delegator.findOne("UserLogin",false,"userLoginId","system");
    List<GenericValue> productStores=delegator.findByAnd("EbayProductStorePref",UtilMisc.toMap("autoPrefJobId",jobId));
    if (productStores.size() != 0) {
      String productStoreId=productStores.get(0).getString("productStoreId");
      String condition1=productStores.get(0).getString("condition1");
      String condition2=productStores.get(0).getString("condition2");
      String condition3=productStores.get(0).getString("condition3");
      int afterDays=0;
      if (UtilValidate.isInteger(condition1)) {
        afterDays=Integer.parseInt(condition1);
      }
      DisputeReasonCodeType disputeReason=null;
      if (UtilValidate.isNotEmpty(condition2)) {
        disputeReason=DisputeReasonCodeType.valueOf(condition2);
      }
      DisputeExplanationCodeType disputeExplanation=null;
      if (UtilValidate.isNotEmpty(condition3)) {
        disputeExplanation=DisputeExplanationCodeType.valueOf(condition3);
      }
      Map<String,Object> serviceMap=FastMap.newInstance();
      serviceMap.put("productStoreId",productStoreId);
      serviceMap.put("userLogin",userLogin);
      Map<String,Object> resultService=dispatcher.runSync("getEbaySoldItems",serviceMap);
      List<Map<String,Object>> soldItems=UtilGenerics.checkList(resultService.get("soldItems"));
      List<Map<String,Object>> itemsToDispute=FastList.newInstance();
      for (int itemCount=0; itemCount < soldItems.size(); itemCount++) {
        Map<String,Object> item=UtilGenerics.checkMap(soldItems.get(itemCount));
        String checkoutStatus=(String)item.get("checkoutStatus");
        Date creationTime=(Date)item.get("creationTime");
        Date paidTime=(Date)item.get("paidTime");
        String unpaidItemStatus=(String)item.get("unpaidItemStatus");
        int checkDays=UtilDateTime.getIntervalInDays(UtilDateTime.toTimestamp(creationTime),UtilDateTime.nowTimestamp());
        if (checkDays > afterDays && "CheckoutIncomplete".equals(checkoutStatus) && unpaidItemStatus == null && paidTime == null && checkoutStatus != "CheckoutComplete") {
          itemsToDispute.add(item);
        }
      }
      if (disputeReason != null && disputeExplanation != null && itemsToDispute.size() != 0) {
        ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
        DetailLevelCodeType[] detailLevels=new DetailLevelCodeType[]{DetailLevelCodeType.RETURN_ALL,DetailLevelCodeType.ITEM_RETURN_ATTRIBUTES,DetailLevelCodeType.ITEM_RETURN_DESCRIPTION};
        for (int count=0; count < itemsToDispute.size(); count++) {
          Map<String,Object> item=itemsToDispute.get(count);
          AddDisputeCall api=new AddDisputeCall(apiContext);
          api.setDetailLevel(detailLevels);
          api.setItemID((String)item.get("itemId"));
          api.setTransactionID((String)item.get("transactionId"));
          api.setDisputeExplanation(disputeExplanation);
          api.setDisputeReason(disputeReason);
        }
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
