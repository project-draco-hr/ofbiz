{
  Map<String,Object> itemObject=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  try {
    GenericValue userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
    EntityCondition expression1=EntityCondition.makeCondition("autoRelisting",EntityOperator.EQUALS,"Y");
    EntityCondition expression2=EntityCondition.makeCondition("endDateTime",EntityOperator.LESS_THAN,UtilDateTime.nowTimestamp());
    EntityCondition expression3=EntityCondition.makeCondition("itemId",EntityOperator.NOT_EQUAL,null);
    List<EntityCondition> expressions=FastList.newInstance();
    expressions.add(expression1);
    expressions.add(expression2);
    expressions.add(expression3);
    EntityCondition cond=EntityCondition.makeCondition(expressions,EntityOperator.AND);
    List<GenericValue> ebayProductListings=EntityQuery.use(delegator).from("EbayProductListing").where(expressions).queryList();
    for (int index=0; index < ebayProductListings.size(); index++) {
      Map<String,Object> inMap=FastMap.newInstance();
      AddItemCall addItemCall=new AddItemCall(EbayStoreHelper.getApiContext((String)context.get("productStoreId"),locale,delegator));
      GenericValue ebayProductListing=ebayProductListings.get(index);
      ItemType item=EbayStoreHelper.prepareAddItem(delegator,ebayProductListing);
      addItemCall.setItem(item);
      itemObject.put("addItemCall",addItemCall);
      itemObject.put("productListingId",ebayProductListing.getString("productListingId"));
      inMap.put("itemObject",itemObject);
      inMap.put("userLogin",userLogin);
      Map<String,Object> result=dispatcher.runSync("exportProductEachItem",inMap);
      String success=(String)result.get("responseMessage");
      if ("success".equals(success)) {
        String duration=item.getListingDuration();
        if (duration.length() > 4) {
          Timestamp startDateTime=UtilDateTime.nowTimestamp();
          int durationInt=Integer.parseInt(duration.replace("DAYS_",""));
          Timestamp endDateTime=UtilDateTime.addDaysToTimestamp(startDateTime,durationInt);
          ebayProductListing.set("startDateTime",startDateTime);
          ebayProductListing.set("endDateTime",endDateTime);
          ebayProductListing.store();
        }
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
