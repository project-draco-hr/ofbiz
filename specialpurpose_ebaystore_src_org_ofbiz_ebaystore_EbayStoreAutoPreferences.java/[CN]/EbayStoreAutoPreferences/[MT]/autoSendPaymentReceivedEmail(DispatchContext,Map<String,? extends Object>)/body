{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
  if (UtilValidate.isEmpty(context.get("productStoreId")) && UtilValidate.isEmpty(context.get("jobId"))) {
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"EbayStoreRequiredProductStoreId",locale));
  }
  String jobId=(String)context.get("jobId");
  String productStoreId=(String)context.get("productStoreId");
  String isAutoSendEmail="N";
  GenericValue ebayProductStorePref=null;
  try {
    ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
    ebayProductStorePref=EntityQuery.use(delegator).from("EbayProductStorePref").where("productStoreId",productStoreId,"autoPrefEnumId","EBAY_AUTO_FB_RMD").queryOne();
    if (UtilValidate.isNotEmpty(ebayProductStorePref) && UtilValidate.isNotEmpty(ebayProductStorePref.getString("autoPrefJobId"))) {
      isAutoSendEmail=ebayProductStorePref.getString("enabled");
      if ("Y".equals(isAutoSendEmail) && jobId.equals(ebayProductStorePref.getString("autoPrefJobId"))) {
        GetSellingManagerSoldListingsCall sellingManagerSoldListings=new GetSellingManagerSoldListingsCall(apiContext);
        List<SellingManagerSoldOrderType> items=FastList.newInstance();
        SellingManagerSoldOrderType[] sellingManagerSoldOrders=sellingManagerSoldListings.getSellingManagerSoldListings();
        if (UtilValidate.isNotEmpty(sellingManagerSoldOrders)) {
          for (          SellingManagerSoldOrderType solditem : sellingManagerSoldOrders) {
            SellingManagerOrderStatusType orderStatus=solditem.getOrderStatus();
            if (orderStatus != null) {
              SellingManagerPaidStatusCodeType paidStatus=orderStatus.getPaidStatus();
              if (SellingManagerPaidStatusCodeType.PAID.equals(paidStatus)) {
                items.add(solditem);
              }
            }
          }
          for (          SellingManagerSoldOrderType item : items) {
            Map<String,Object> sendMap=FastMap.newInstance();
            GenericValue productStoreEmail=EntityQuery.use(delegator).from("ProductStoreEmailSetting").where("productStoreId",productStoreId,"emailType","EBAY_PAY_RECIEVED").queryOne();
            String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
            sendMap.put("bodyScreenUri",bodyScreenLocation);
            String subjectString=productStoreEmail.getString("subject");
            sendMap.put("userLogin",userLogin);
            sendMap.put("subject",subjectString);
            sendMap.put("contentType",productStoreEmail.get("contentType"));
            sendMap.put("sendFrom",productStoreEmail.get("fromAddress"));
            sendMap.put("sendCc",productStoreEmail.get("ccAddress"));
            sendMap.put("sendBcc",productStoreEmail.get("bccAddress"));
            sendMap.put("sendTo",item.getBuyerEmail());
            Map<String,Object> bodyParameters=FastMap.newInstance();
            bodyParameters.put("buyerUserId",item.getBuyerID());
            sendMap.put("bodyParameters",bodyParameters);
            try {
              dispatcher.runAsync("sendMailFromScreen",sendMap);
            }
 catch (            Exception e) {
              Debug.logError(e,module);
              return ServiceUtil.returnError(e.getMessage());
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"EbayStoreProblemConnectingToEbaySite",locale) + e);
  }
  return ServiceUtil.returnSuccess();
}
