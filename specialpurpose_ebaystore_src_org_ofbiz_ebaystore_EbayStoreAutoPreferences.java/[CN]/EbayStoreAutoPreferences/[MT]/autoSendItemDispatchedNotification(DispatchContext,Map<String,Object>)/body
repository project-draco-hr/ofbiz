{
  Map<String,Object> result=new HashMap<String,Object>();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  String productStoreId=(String)context.get("productStoreId");
  try {
    GenericValue userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
    context.put("userLogin",userLogin);
    Map<String,Object> resultSold=dispatcher.runSync("getEbaySoldItems",context);
    List<Map<String,Object>> soldItems=UtilGenerics.checkList(resultSold.get("soldItems"));
    if (soldItems.size() != 0) {
      for (int i=0; i < soldItems.size(); i++) {
        Map<String,Object> item=soldItems.get(i);
        String shippedStatus=item.get("shippedStatus").toString();
        Timestamp lastestTime=UtilDateTime.getDayStart(UtilDateTime.nowTimestamp(),1);
        Date shippedTime=(Date)item.get("shippedTime");
        Timestamp shippedTimestamp=UtilDateTime.toTimestamp(shippedTime);
        if ("SHIPPED".equals(shippedStatus) && shippedTimestamp.equals(lastestTime)) {
          String buyerUserId=item.get("buyerUserId").toString();
          String buyerEmail=item.get("buyerEmail").toString();
          Map<String,Object> sendMap=new HashMap<String,Object>();
          GenericValue productStoreEmail=EntityQuery.use(delegator).from("ProductStoreEmailSetting").where("productStoreId",productStoreId,"emailType","EBAY_ITEM_DISPATCH").queryOne();
          String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
          sendMap.put("bodyScreenUri",bodyScreenLocation);
          String subjectString=productStoreEmail.getString("subject");
          sendMap.put("userLogin",userLogin);
          sendMap.put("subject",subjectString);
          sendMap.put("contentType",productStoreEmail.get("contentType"));
          sendMap.put("sendFrom",productStoreEmail.get("fromAddress"));
          sendMap.put("sendCc",productStoreEmail.get("ccAddress"));
          sendMap.put("sendBcc",productStoreEmail.get("bccAddress"));
          sendMap.put("sendTo",buyerEmail);
          Map<String,Object> bodyParameters=new HashMap<String,Object>();
          bodyParameters.put("buyerUserId",buyerUserId);
          sendMap.put("bodyParameters",bodyParameters);
          try {
            dispatcher.runAsync("sendMailFromScreen",sendMap);
          }
 catch (          Exception e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
        }
      }
    }
    result=ServiceUtil.returnSuccess();
  }
 catch (  GenericServiceException e) {
    result=ServiceUtil.returnError(e.getMessage());
  }
catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
