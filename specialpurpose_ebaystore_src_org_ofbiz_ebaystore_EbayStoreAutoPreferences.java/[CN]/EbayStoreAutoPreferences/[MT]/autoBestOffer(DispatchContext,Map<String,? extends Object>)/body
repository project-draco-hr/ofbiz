{
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  try {
    String productStoreId=(String)context.get("productStoreId");
    GenericValue ebayProductStorePref=EntityQuery.use(delegator).from("EbayProductStorePref").where("productStoreId",productStoreId,"autoPrefEnumId","EBAY_AUTO_BEST_OFFER").queryOne();
    String parentPrefCondId=ebayProductStorePref.getString("parentPrefCondId");
    List<GenericValue> ebayProductStorePrefCond=delegator.findByAnd("EbayProductStorePrefCond",UtilMisc.toMap("parentPrefCondId",parentPrefCondId),null,false);
    String priceType=ebayProductStorePrefCond.get(0).getString("acceptanceCondition");
    String acceptBestOfferValue=ebayProductStorePrefCond.get(1).getString("acceptanceCondition");
    String rejectOffer=ebayProductStorePrefCond.get(2).getString("acceptanceCondition");
    String ignoreOfferMessage=ebayProductStorePrefCond.get(3).getString("acceptanceCondition");
    String rejectGreaterEnable=ebayProductStorePrefCond.get(4).getString("acceptanceCondition");
    String greaterValue=ebayProductStorePrefCond.get(5).getString("acceptanceCondition");
    String lessValue=ebayProductStorePrefCond.get(6).getString("acceptanceCondition");
    String rejectGreaterMsg=ebayProductStorePrefCond.get(7).getString("acceptanceCondition");
    String rejectLessEnable=ebayProductStorePrefCond.get(8).getString("acceptanceCondition");
    String lessThanValue=ebayProductStorePrefCond.get(9).getString("acceptanceCondition");
    String rejectLessMsg=ebayProductStorePrefCond.get(10).getString("acceptanceCondition");
    BigDecimal acceptPercentValue=new BigDecimal(acceptBestOfferValue);
    BigDecimal greaterPercentValue=new BigDecimal(greaterValue);
    BigDecimal lessThanPercentValue=new BigDecimal(lessValue);
    BigDecimal rejectPercentValue=new BigDecimal(lessThanValue);
    ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
    GetMyeBaySellingCall getTotalPage=new GetMyeBaySellingCall(apiContext);
    ItemListCustomizationType itemListType=new ItemListCustomizationType();
    itemListType.setInclude(Boolean.TRUE);
    itemListType.setSort(ItemSortTypeCodeType.ITEM_ID_DESCENDING);
    itemListType.setListingType(ListingTypeCodeType.FIXED_PRICE_ITEM);
    DetailLevelCodeType[] detailLevels=new DetailLevelCodeType[]{DetailLevelCodeType.RETURN_ALL,DetailLevelCodeType.ITEM_RETURN_ATTRIBUTES,DetailLevelCodeType.ITEM_RETURN_DESCRIPTION};
    getTotalPage.setDetailLevel(detailLevels);
    getTotalPage.setActiveList(itemListType);
    getTotalPage.getMyeBaySelling();
    int totalPage=getTotalPage.getReturnedActiveList().getPaginationResult().getTotalNumberOfPages();
    for (int t=1; t <= totalPage; t++) {
      GetMyeBaySellingCall ebaySelling=new GetMyeBaySellingCall(apiContext);
      ItemListCustomizationType itemList=new ItemListCustomizationType();
      itemList.setInclude(Boolean.TRUE);
      itemListType.setSort(ItemSortTypeCodeType.ITEM_ID_DESCENDING);
      itemListType.setListingType(ListingTypeCodeType.FIXED_PRICE_ITEM);
      PaginationType page=new PaginationType();
      page.setPageNumber(t);
      itemList.setPagination(page);
      itemList.setListingType(ListingTypeCodeType.FIXED_PRICE_ITEM);
      DetailLevelCodeType[] detailLevel=new DetailLevelCodeType[]{DetailLevelCodeType.RETURN_ALL,DetailLevelCodeType.ITEM_RETURN_ATTRIBUTES,DetailLevelCodeType.ITEM_RETURN_DESCRIPTION,DetailLevelCodeType.RETURN_HEADERS,DetailLevelCodeType.RETURN_MESSAGES};
      ebaySelling.setDetailLevel(detailLevel);
      ebaySelling.setActiveList(itemList);
      ebaySelling.getMyeBaySelling();
      PaginatedItemArrayType itemListCustomizationType=ebaySelling.getReturnedActiveList();
      ItemArrayType itemArrayType=itemListCustomizationType.getItemArray();
      int itemArrayTypeSize=itemArrayType.getItemLength();
      for (int itemCount=0; itemCount < itemArrayTypeSize; itemCount++) {
        ItemType item=itemArrayType.getItem(itemCount);
        String itemID=item.getItemID();
        Double buyItNowPrice=item.getBuyItNowPrice().getValue();
        GetItemCall getItem=new GetItemCall(apiContext);
        getItem.setDetailLevel(detailLevel);
        getItem.getItem(itemID);
        String SKUItem=getItem.getSKU();
        ItemType itemBestOffer=getItem.getReturnedItem();
        BestOfferDetailsType bestOfferDetailsType=itemBestOffer.getBestOfferDetails();
        int inventoryQuantityItem=item.getQuantityAvailable();
        int bestOfferCount=itemBestOffer.getBestOfferDetails().getBestOfferCount();
        Boolean bestOfferIsEnabled=itemBestOffer.getBestOfferDetails().isBestOfferEnabled();
        if ((bestOfferDetailsType != null) && (bestOfferCount > 0) && bestOfferIsEnabled.equals(true)) {
          Double doBasePrice=null;
          if (priceType.equals("BUY_IT_NOW_PRICE")) {
            doBasePrice=buyItNowPrice;
          }
 else           if (priceType.equals("START_PRICE")) {
            doBasePrice=itemBestOffer.getStartPrice().getValue();
          }
 else           if (priceType.equals("RESERVE_PRICE")) {
            doBasePrice=itemBestOffer.getReservePrice().getValue();
          }
 else           if (priceType.equals("RETAIL_PRICE")) {
          }
 else           if (priceType.equals("SELLER_COST")) {
            List<GenericValue> supplierProduct=delegator.findByAnd("SupplierProduct",UtilMisc.toMap("productId",SKUItem),UtilMisc.toList("availableFromDate DESC"),false);
            String lastPrice=supplierProduct.get(0).getString("lastPrice");
            doBasePrice=Double.parseDouble(lastPrice);
          }
 else           if (priceType.equals("SECOND_CHANCE_PRICE")) {
            VerifyAddSecondChanceItemCall verifyAddSecondChanceItemCall=new VerifyAddSecondChanceItemCall(apiContext);
            doBasePrice=verifyAddSecondChanceItemCall.getBuyItNowPrice().getValue();
          }
 else           if (priceType.equals("STORE_PRICE")) {
          }
          BigDecimal basePrice=new BigDecimal(doBasePrice);
          BigDecimal percent=new BigDecimal(100);
          BigDecimal acceptPrice=(basePrice.multiply(acceptPercentValue)).divide(percent);
          BigDecimal greaterPrice=(basePrice.multiply(greaterPercentValue)).divide(percent);
          BigDecimal lessThanPrice=(basePrice.multiply(lessThanPercentValue)).divide(percent);
          BigDecimal rejectPrice=(basePrice.multiply(rejectPercentValue)).divide(percent);
          GetBestOffersCall getBestOfferCall=new GetBestOffersCall(apiContext);
          getBestOfferCall.setItemID(itemID);
          getBestOfferCall.setDetailLevel(detailLevel);
          getBestOfferCall.setBestOfferStatus(BestOfferStatusCodeType.ALL);
          getBestOfferCall.getBestOffers();
          BestOfferType[] bestOffers=getBestOfferCall.getReturnedBestOffers();
          List<String> acceptBestOfferIndexId=FastList.newInstance();
          SortedMap<String,Object> acceptBestOfferIDs=new TreeMap<String,Object>();
          RespondToBestOfferCall respondToBestOfferCall=new RespondToBestOfferCall(apiContext);
          respondToBestOfferCall.setItemID(itemID);
          for (int offerCount=0; offerCount < bestOffers.length; offerCount++) {
            BestOfferType bestOfferType=bestOffers[offerCount];
            BestOfferStatusCodeType bestOfferStatusCodeType=bestOfferType.getStatus();
            if (bestOfferStatusCodeType == BestOfferStatusCodeType.PENDING) {
              String bestOfferID=bestOfferType.getBestOfferID();
              UserType buyer=bestOfferType.getBuyer();
              String buyerUserID=buyer.getUserID();
              AmountType price=bestOfferType.getPrice();
              String offerPrice=new Double(price.getValue()).toString();
              Double doCerrentPrice=Double.parseDouble(offerPrice);
              int offerQuantity=bestOfferType.getQuantity();
              String[] bestOfferIDs={bestOfferID};
              respondToBestOfferCall.setBestOfferIDs(bestOfferIDs);
              if (rejectOffer.equals("Y")) {
                if (offerQuantity > inventoryQuantityItem) {
                  respondToBestOfferCall.setSellerResponse("Your order is more than inventory item's Buy-It-Now price.");
                  respondToBestOfferCall.setBestOfferAction(BestOfferActionCodeType.DECLINE);
                  respondToBestOfferCall.respondToBestOffer();
                  continue;
                }
              }
              String buyerMessage=bestOfferType.getBuyerMessage();
              if (ignoreOfferMessage.equals("Y") && UtilValidate.isNotEmpty(buyerMessage)) {
                GenericValue userOfferCheck=EntityQuery.use(delegator).from("EbayUserBestOffer").where("itemId",itemID,"userId",buyerUserID).queryOne();
                if (UtilValidate.isEmpty(userOfferCheck)) {
                  GenericValue ebayUserBestOffer=delegator.makeValue("EbayUserBestOffer");
                  ebayUserBestOffer.put("productStoreId",productStoreId);
                  ebayUserBestOffer.put("itemId",itemID);
                  ebayUserBestOffer.put("userId",buyerUserID);
                  ebayUserBestOffer.put("bestOfferId",bestOfferID);
                  ebayUserBestOffer.put("contactStatus","NOT_CONTACT");
                  ebayUserBestOffer.create();
                }
                continue;
              }
              BigDecimal cerrentPrice=new BigDecimal(doCerrentPrice);
              if (cerrentPrice.compareTo(acceptPrice) >= 0) {
                acceptBestOfferIndexId.add(bestOfferID);
                String Quantity=String.valueOf(offerQuantity);
                acceptBestOfferIDs.put(bestOfferID,Quantity);
              }
 else               if ((cerrentPrice.compareTo(greaterPrice) >= 0) && (cerrentPrice.compareTo(lessThanPrice) <= 0) && rejectGreaterEnable.equals("Y")) {
                respondToBestOfferCall.setBestOfferAction(BestOfferActionCodeType.DECLINE);
                respondToBestOfferCall.setSellerResponse(rejectGreaterMsg);
                respondToBestOfferCall.respondToBestOffer();
              }
 else               if ((cerrentPrice.compareTo(rejectPrice) <= 0 && rejectLessEnable.equals("Y"))) {
                respondToBestOfferCall.setBestOfferAction(BestOfferActionCodeType.DECLINE);
                respondToBestOfferCall.setSellerResponse(rejectLessMsg);
                respondToBestOfferCall.respondToBestOffer();
              }
 else {
                respondToBestOfferCall.setBestOfferAction(BestOfferActionCodeType.DECLINE);
                respondToBestOfferCall.respondToBestOffer();
              }
            }
          }
          if (acceptBestOfferIndexId.size() > 0) {
            int quantityAvailable=inventoryQuantityItem;
            Collections.sort(acceptBestOfferIndexId);
            RespondToBestOfferCall respondAcceptBestOfferCall=new RespondToBestOfferCall(apiContext);
            respondAcceptBestOfferCall.setItemID(itemID);
            for (            String bestOfferIdIndex : acceptBestOfferIndexId) {
              if (quantityAvailable <= 0)               break;
              Integer offerQuantity=Integer.parseInt(acceptBestOfferIDs.get(bestOfferIdIndex).toString());
              String[] bestOfferID={bestOfferIdIndex};
              respondAcceptBestOfferCall.setBestOfferIDs(bestOfferID);
              if (offerQuantity <= quantityAvailable) {
                respondAcceptBestOfferCall.setBestOfferAction(BestOfferActionCodeType.ACCEPT);
                quantityAvailable=quantityAvailable - offerQuantity;
              }
 else {
                respondAcceptBestOfferCall.setBestOfferAction(BestOfferActionCodeType.DECLINE);
              }
              respondAcceptBestOfferCall.respondToBestOffer();
            }
          }
        }
      }
    }
  }
 catch (  ApiException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
