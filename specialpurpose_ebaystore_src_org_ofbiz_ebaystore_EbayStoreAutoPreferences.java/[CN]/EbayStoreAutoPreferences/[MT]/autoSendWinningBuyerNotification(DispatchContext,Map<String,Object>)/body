{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productStoreId=(String)context.get("productStoreId");
  try {
    GenericValue userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
    Map<String,Object> resultSold=dispatcher.runSync("getEbaySoldItems",UtilMisc.toMap("productStoreId",productStoreId,"userLogin",userLogin));
    List<Map<String,Object>> soldItems=UtilGenerics.checkList(resultSold.get("soldItems"));
    if (soldItems.size() != 0) {
      for (int i=0; i < soldItems.size(); i++) {
        Map<String,Object> item=soldItems.get(i);
        Timestamp lastestTime=UtilDateTime.getDayStart(UtilDateTime.nowTimestamp(),1);
        Date creationDate=(Date)item.get("creationTime");
        Timestamp creationTime=UtilDateTime.toTimestamp(creationDate);
        if (creationTime.equals(lastestTime) && (item.get("listingType").toString().equals("Chinese"))) {
          Map<String,Object> serviceMap=FastMap.newInstance();
          serviceMap.put("userLogin",userLogin);
          serviceMap.put("locale",locale);
          serviceMap.put("productStoreId",productStoreId);
          serviceMap.put("itemId",item.get("itemId").toString());
          Map<String,Object> resultBid=dispatcher.runSync("getEbayAllBidders",serviceMap);
          List<Map<String,Object>> allBidders=UtilGenerics.checkList(resultBid.get("allBidders"));
          if (allBidders.size() != 0) {
            for (int j=0; j < allBidders.size(); j++) {
              Map<String,Object> bidder=allBidders.get(j);
              UserType user=(UserType)bidder.get("bidder");
              String buyerUserId=bidder.get("userId").toString();
              Map<String,Object> sendMap=FastMap.newInstance();
              GenericValue productStoreEmail=EntityQuery.use(delegator).from("ProductStoreEmailSetting").where("productStoreId",productStoreId,"emailType","EBAY_WIN_BUYER_NOTI").queryOne();
              String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
              sendMap.put("bodyScreenUri",bodyScreenLocation);
              String subjectString=productStoreEmail.getString("subject");
              sendMap.put("userLogin",userLogin);
              sendMap.put("subject",subjectString);
              sendMap.put("contentType",productStoreEmail.get("contentType"));
              sendMap.put("sendFrom",productStoreEmail.get("fromAddress"));
              sendMap.put("sendCc",productStoreEmail.get("ccAddress"));
              sendMap.put("sendBcc",productStoreEmail.get("bccAddress"));
              sendMap.put("sendTo",user.getEmail());
              Map<String,Object> bodyParameters=FastMap.newInstance();
              bodyParameters.put("buyerUserId",buyerUserId);
              sendMap.put("bodyParameters",bodyParameters);
              try {
                dispatcher.runAsync("sendMailFromScreen",sendMap);
              }
 catch (              Exception e) {
                Debug.logError(e,module);
                return ServiceUtil.returnError(e.getMessage());
              }
            }
          }
        }
      }
    }
    result=ServiceUtil.returnSuccess();
  }
 catch (  GenericServiceException e) {
    result=ServiceUtil.returnError(e.getMessage());
  }
catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
