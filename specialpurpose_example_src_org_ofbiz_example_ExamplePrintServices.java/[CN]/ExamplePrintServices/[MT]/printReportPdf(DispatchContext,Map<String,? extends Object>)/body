{
  String screenLocation="component://example/widget/example/ExampleReportScreens.xml";
  String reportScreenName="ExampleReport";
  Map<String,Object> workContext=new HashMap<String,Object>();
  workContext.putAll(context);
  Writer reportWriter=new StringWriter();
  ScreenRenderer reportScreenRenderer=new ScreenRenderer(reportWriter,null,htmlScreenRenderer);
  reportScreenRenderer.populateContextForService(dctx,workContext);
  try {
    reportScreenRenderer.render(screenLocation,reportScreenName);
  }
 catch (  GeneralException e) {
    String errMsg="General error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  IOException e) {
    String errMsg="IO error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  SAXException e) {
    String errMsg="SAX (XML parse) error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  ParserConfigurationException e) {
    String errMsg="Parser configuration error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  StreamSource src=new StreamSource(new StringReader(reportWriter.toString()));
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    Fop fop=ApacheFopWorker.createFopInstance(out,MimeConstants.MIME_PDF);
    ApacheFopWorker.transform(src,null,fop);
  }
 catch (  FOPException e) {
    e.printStackTrace();
  }
  DocFlavor docFlavor=DocFlavor.BYTE_ARRAY.PDF;
  Doc myDoc=new SimpleDoc(out.toByteArray(),docFlavor,null);
  PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
  aset.add(new Copies(1));
  aset.add(Sides.ONE_SIDED);
  PrintService[] services=PrintServiceLookup.lookupPrintServices(docFlavor,aset);
  if (services.length > 0) {
    DocPrintJob job=services[0].createPrintJob();
    try {
      job.print(myDoc,aset);
    }
 catch (    PrintException pe) {
      String errMsg="Unable to print PDF from XSL-FO: " + pe.toString();
      Debug.logError(pe,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  return ServiceUtil.returnSuccess();
}
