{
  this.modelMenu=modelMenu;
  this.name=fieldElement.getAttribute("name");
  this.entityName=fieldElement.getAttribute("entity-name");
  this.setTitle(fieldElement.getAttribute("title"));
  this.setTooltip(fieldElement.getAttribute("tooltip"));
  this.setParentPortalPageId(fieldElement.getAttribute("parent-portal-page-value"));
  this.titleStyle=fieldElement.getAttribute("title-style");
  this.disabledTitleStyle=fieldElement.getAttribute("disabled-title-style");
  this.widgetStyle=fieldElement.getAttribute("widget-style");
  this.tooltipStyle=fieldElement.getAttribute("tooltip-style");
  this.selectedStyle=fieldElement.getAttribute("selected-style");
  this.setHideIfSelected(fieldElement.getAttribute("hide-if-selected"));
  this.disableIfEmpty=fieldElement.getAttribute("disable-if-empty");
  this.align=fieldElement.getAttribute("align");
  this.alignStyle=fieldElement.getAttribute("align-style");
  String positionStr=fieldElement.getAttribute("position");
  try {
    if (positionStr != null && positionStr.length() > 0) {
      position=Integer.valueOf(positionStr);
    }
  }
 catch (  Exception e) {
    Debug.logError(e,"Could not convert position attribute of the field element to an integer: [" + positionStr + "], using the default of the menu renderer",module);
  }
  this.setAssociatedContentId(fieldElement.getAttribute("associated-content-id"));
  this.cellWidth=fieldElement.getAttribute("cell-width");
  dataMap.put("name",this.name);
  Element subMenuElement=UtilXml.firstChildElement(fieldElement,"sub-menu");
  if (subMenuElement != null) {
    String subMenuLocation=subMenuElement.getAttribute("location");
    String subMenuName=subMenuElement.getAttribute("name");
    try {
      this.subMenu=MenuFactory.getMenuFromLocation(subMenuLocation,subMenuName,modelMenu.getDelegator(),modelMenu.getDispacher());
    }
 catch (    IOException e) {
      String errMsg="Error getting subMenu in menu named [" + this.modelMenu.getName() + "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    SAXException e2) {
      String errMsg="Error getting subMenu in menu named [" + this.modelMenu.getName() + "]: "+ e2.toString();
      Debug.logError(e2,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    ParserConfigurationException e3) {
      String errMsg="Error getting subMenu in menu named [" + this.modelMenu.getName() + "]: "+ e3.toString();
      Debug.logError(e3,errMsg,module);
      throw new RuntimeException(errMsg);
    }
  }
  Element linkElement=UtilXml.firstChildElement(fieldElement,"link");
  if (linkElement != null) {
    link=new Link(linkElement,this);
  }
  List itemElements=UtilXml.childElementList(fieldElement,"menu-item");
  Iterator itemElementIter=itemElements.iterator();
  while (itemElementIter.hasNext()) {
    Element itemElement=(Element)itemElementIter.next();
    ModelMenuItem modelMenuItem=new ModelMenuItem(itemElement,this);
    modelMenuItem=this.addUpdateMenuItem(modelMenuItem);
  }
  Element conditionElement=UtilXml.firstChildElement(fieldElement,"condition");
  if (conditionElement != null) {
    this.condition=new ModelMenuCondition(this,conditionElement);
  }
  Element actionsElement=UtilXml.firstChildElement(conditionElement,"actions");
  if (actionsElement != null) {
    this.actions=ModelMenuAction.readSubActions(this,actionsElement);
  }
}
