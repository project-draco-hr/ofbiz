{
  List<GenericValue> portalPages=null;
  String parentPortalPageId=this.getParentPortalPageId(context);
  if (UtilValidate.isNotEmpty(parentPortalPageId)) {
    GenericDelegator delegator=modelMenu.getDelegator();
    try {
      EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("ownerUserLoginId",EntityOperator.EQUALS,"_NA_"),EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("portalPageId",EntityOperator.EQUALS,parentPortalPageId),EntityCondition.makeCondition("parentPortalPageId",EntityOperator.EQUALS,parentPortalPageId)),EntityOperator.OR)),EntityOperator.AND);
      portalPages=delegator.findList("PortalPage",cond,null,null,null,false);
      if (UtilValidate.isNotEmpty(context.get("userLogin"))) {
        String userLoginId=((GenericValue)context.get("userLogin")).getString("userLoginId");
        for (        GenericValue portalPage : portalPages) {
          cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("ownerUserLoginId",EntityOperator.EQUALS,userLoginId),EntityCondition.makeCondition("originalPortalPageId",EntityOperator.EQUALS,portalPage.getString("portalPageId"))),EntityOperator.AND);
          List<GenericValue> privatePortalPages=delegator.findList("PortalPage",cond,null,null,null,false);
          if (UtilValidate.isNotEmpty(privatePortalPages)) {
            portalPages.remove(portalPage);
            portalPages.add(privatePortalPages.get(0));
          }
        }
        cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("ownerUserLoginId",EntityOperator.EQUALS,userLoginId),EntityCondition.makeCondition("originalPortalPageId",EntityOperator.EQUALS,null),EntityCondition.makeCondition("parentPortalPageId",EntityOperator.EQUALS,parentPortalPageId)),EntityOperator.AND);
        portalPages.addAll(delegator.findList("PortalPage",cond,null,null,null,false));
      }
      portalPages=EntityUtil.orderBy(portalPages,UtilMisc.toList("sequenceNum"));
    }
 catch (    GenericEntityException e) {
      Debug.logError("Could not retrieve portalpages in the menu:" + e.getMessage(),module);
    }
  }
  return portalPages;
}
