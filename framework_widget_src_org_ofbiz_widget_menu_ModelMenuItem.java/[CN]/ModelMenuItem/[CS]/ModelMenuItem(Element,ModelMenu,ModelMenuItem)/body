{
  super(menuItemElement);
  this.modelMenu=modelMenu;
  this.parentMenuItem=parentMenuItem;
  this.entityName=menuItemElement.getAttribute("entity-name");
  this.title=FlexibleStringExpander.getInstance(menuItemElement.getAttribute("title"));
  this.tooltip=FlexibleStringExpander.getInstance(menuItemElement.getAttribute("tooltip"));
  this.parentPortalPageId=FlexibleStringExpander.getInstance(menuItemElement.getAttribute("parent-portal-page-value"));
  this.titleStyle=menuItemElement.getAttribute("title-style");
  this.disabledTitleStyle=menuItemElement.getAttribute("disabled-title-style");
  this.widgetStyle=menuItemElement.getAttribute("widget-style");
  this.tooltipStyle=menuItemElement.getAttribute("tooltip-style");
  this.selectedStyle=menuItemElement.getAttribute("selected-style");
  String hideIfSelected=menuItemElement.getAttribute("hide-if-selected");
  if (!hideIfSelected.isEmpty())   if (hideIfSelected.equalsIgnoreCase("true"))   this.hideIfSelected=Boolean.TRUE;
 else   this.hideIfSelected=Boolean.FALSE;
 else   this.hideIfSelected=null;
  this.disableIfEmpty=menuItemElement.getAttribute("disable-if-empty");
  this.align=menuItemElement.getAttribute("align");
  this.alignStyle=menuItemElement.getAttribute("align-style");
  Integer position=null;
  String positionStr=menuItemElement.getAttribute("position");
  if (!positionStr.isEmpty()) {
    try {
      position=Integer.valueOf(positionStr);
    }
 catch (    Exception e) {
      Debug.logError(e,"Could not convert position attribute of the field element to an integer: [" + positionStr + "], using the default of the menu renderer",module);
      position=null;
    }
  }
  this.position=position;
  this.associatedContentId=FlexibleStringExpander.getInstance(menuItemElement.getAttribute("associated-content-id"));
  this.cellWidth=menuItemElement.getAttribute("cell-width");
  Element subMenuElement=UtilXml.firstChildElement(menuItemElement,"sub-menu");
  if (subMenuElement != null) {
    String subMenuLocation=subMenuElement.getAttribute("location");
    String subMenuName=subMenuElement.getAttribute("name");
    try {
      this.subMenu=MenuFactory.getMenuFromLocation(subMenuLocation,subMenuName);
    }
 catch (    IOException e) {
      String errMsg="Error getting subMenu in menu named [" + this.modelMenu.getName() + "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    SAXException e2) {
      String errMsg="Error getting subMenu in menu named [" + this.modelMenu.getName() + "]: "+ e2.toString();
      Debug.logError(e2,errMsg,module);
      throw new RuntimeException(errMsg);
    }
catch (    ParserConfigurationException e3) {
      String errMsg="Error getting subMenu in menu named [" + this.modelMenu.getName() + "]: "+ e3.toString();
      Debug.logError(e3,errMsg,module);
      throw new RuntimeException(errMsg);
    }
  }
 else {
    this.subMenu=null;
  }
  Element linkElement=UtilXml.firstChildElement(menuItemElement,"link");
  if (linkElement != null) {
    this.link=new Link(linkElement,this);
  }
 else {
    this.link=null;
  }
  List<? extends Element> itemElements=UtilXml.childElementList(menuItemElement,"menu-item");
  if (!itemElements.isEmpty()) {
    ArrayList<ModelMenuItem> menuItemList=new ArrayList<ModelMenuItem>();
    Map<String,ModelMenuItem> menuItemMap=new HashMap<String,ModelMenuItem>();
    for (    Element itemElement : itemElements) {
      ModelMenuItem modelMenuItem=new ModelMenuItem(itemElement,modelMenu,this);
      addUpdateMenuItem(modelMenuItem,menuItemList,menuItemMap);
    }
    menuItemList.trimToSize();
    this.menuItemList=Collections.unmodifiableList(menuItemList);
  }
 else {
    this.menuItemList=Collections.emptyList();
  }
  Element conditionElement=UtilXml.firstChildElement(menuItemElement,"condition");
  if (conditionElement != null) {
    this.condition=new ModelMenuCondition(this,conditionElement);
  }
 else {
    this.condition=null;
  }
  Element actionsElement=UtilXml.firstChildElement(conditionElement,"actions");
  if (actionsElement != null) {
    this.actions=ModelWidgetAction.readSubActions(this,actionsElement);
  }
 else {
    this.actions=Collections.emptyList();
  }
  this.overrideName="";
}
