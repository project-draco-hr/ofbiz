{
  List<GenericValue> testingTypes=new LinkedList<GenericValue>();
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","cursorForwardOnly-1","description","cursorForwardOnly One"));
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","cursorForwardOnly-2","description","cursorForwardOnly Two"));
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","cursorForwardOnly-3","description","cursorForwardOnly Three"));
  delegator.storeAll(testingTypes);
  boolean transactionStarted=false;
  try {
    transactionStarted=TransactionUtil.begin();
    EntityListIterator eliByEntityEngine=null;
    EntityListIterator eliByEntityQuery=null;
    EntityFindOptions findOptions=new EntityFindOptions();
    findOptions.setResultSetType(EntityFindOptions.TYPE_FORWARD_ONLY);
    eliByEntityEngine=delegator.find("TestingType",null,null,null,null,findOptions);
    eliByEntityQuery=EntityQuery.use(delegator).from("TestingType").cursorForwardOnly().queryIterator();
    GenericValue nextRecordByEntityEngine=eliByEntityEngine.next();
    GenericValue nextRecordByEntityQuery=eliByEntityQuery.next();
    assertEquals("cursorForwardOnly(): Value of first record pointed by both iterators matched",nextRecordByEntityEngine,nextRecordByEntityQuery);
    eliByEntityEngine.close();
    eliByEntityQuery.close();
    TransactionUtil.commit(transactionStarted);
  }
 catch (  Exception e) {
    TransactionUtil.rollback(transactionStarted,"Transaction is Rolled Back",e);
  }
}
