{
  List<GenericValue> testingTypes=new LinkedList<GenericValue>();
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","scrollInSensitive-1","description","cursorScrollInSensitive One"));
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","scrollInSensitive-2","description","cursorScrollInSensitive Two"));
  testingTypes.add(delegator.makeValue("TestingType","testingTypeId","scrollInSensitive-3","description","cursorScrollInSensitive Three"));
  delegator.storeAll(testingTypes);
  boolean transactionStarted=false;
  try {
    transactionStarted=TransactionUtil.begin();
    EntityListIterator eliByEntityEngine=null;
    EntityListIterator eliByEntityQuery=null;
    EntityFindOptions findOptions=new EntityFindOptions();
    findOptions.setResultSetType(EntityFindOptions.TYPE_SCROLL_INSENSITIVE);
    eliByEntityEngine=delegator.find("TestingType",null,null,null,null,findOptions);
    eliByEntityQuery=EntityQuery.use(delegator).from("TestingType").cursorScrollInsensitive().queryIterator();
    GenericValue nextRecordByDelegator=eliByEntityEngine.next();
    GenericValue nextRecordByEntityQuery=eliByEntityQuery.next();
    assertEquals("cursorScrollInSensitive(): Records by delegator method and by EntityQuery method matched",nextRecordByDelegator,nextRecordByEntityQuery);
    eliByEntityEngine.close();
    eliByEntityQuery.close();
    TransactionUtil.commit(transactionStarted);
  }
 catch (  Exception e) {
    TransactionUtil.rollback(transactionStarted,"Transaction is Rolled Back",e);
  }
}
