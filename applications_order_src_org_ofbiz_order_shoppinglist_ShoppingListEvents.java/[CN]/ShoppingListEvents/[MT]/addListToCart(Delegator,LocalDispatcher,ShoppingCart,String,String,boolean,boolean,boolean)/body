{
  String errMsg=null;
  if (shoppingListId == null) {
    errMsg=UtilProperties.getMessage(resource_error,"shoppinglistevents.choose_shopping_list",cart.getLocale());
    throw new IllegalArgumentException(errMsg);
  }
  GenericValue shoppingList=null;
  List<GenericValue> shoppingListItems=null;
  try {
    shoppingList=delegator.findOne("ShoppingList",UtilMisc.toMap("shoppingListId",shoppingListId),false);
    if (shoppingList == null) {
      errMsg=UtilProperties.getMessage(resource_error,"shoppinglistevents.error_getting_shopping_list_and_items",cart.getLocale());
      throw new IllegalArgumentException(errMsg);
    }
    shoppingListItems=shoppingList.getRelated("ShoppingListItem",null,null,false);
    if (shoppingListItems == null) {
      shoppingListItems=FastList.newInstance();
    }
    if (includeChild) {
      List<GenericValue> childShoppingLists=shoppingList.getRelated("ChildShoppingList",null,null,false);
      for (      GenericValue v : childShoppingLists) {
        List<GenericValue> items=v.getRelated("ShoppingListItem",null,null,false);
        shoppingListItems.addAll(items);
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems getting ShoppingList and ShoppingListItem records",module);
    errMsg=UtilProperties.getMessage(resource_error,"shoppinglistevents.error_getting_shopping_list_and_items",cart.getLocale());
    throw new IllegalArgumentException(errMsg);
  }
  if (UtilValidate.isEmpty(shoppingListItems)) {
    errMsg=UtilProperties.getMessage(resource_error,"shoppinglistevents.no_items_added",cart.getLocale());
    return errMsg;
  }
  if (!append) {
    cart.clear();
    cart.setAutoSaveListId(shoppingListId);
  }
  Map<String,List<String>> shoppingListSurveyInfo=getItemSurveyInfos(shoppingListItems);
  StringBuilder eventMessage=new StringBuilder();
  for (  GenericValue shoppingListItem : shoppingListItems) {
    String productId=shoppingListItem.getString("productId");
    BigDecimal quantity=shoppingListItem.getBigDecimal("quantity");
    Timestamp reservStart=shoppingListItem.getTimestamp("reservStart");
    BigDecimal reservLength=shoppingListItem.getBigDecimal("reservLength");
    BigDecimal reservPersons=shoppingListItem.getBigDecimal("reservPersons");
    String configId=shoppingListItem.getString("configId");
    try {
      String listId=shoppingListItem.getString("shoppingListId");
      String itemId=shoppingListItem.getString("shoppingListItemSeqId");
      Map<String,Object> attributes=FastMap.newInstance();
      if (setAsListItem) {
        attributes.put("shoppingListId",listId);
        attributes.put("shoppingListItemSeqId",itemId);
      }
      if (shoppingListSurveyInfo.containsKey(listId + "." + itemId) && UtilValidate.isNotEmpty(shoppingListSurveyInfo.get(listId + "." + itemId))) {
        attributes.put("surveyResponses",shoppingListSurveyInfo.get(listId + "." + itemId));
      }
      ProductConfigWrapper configWrapper=null;
      if (UtilValidate.isNotEmpty(configId)) {
        configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,configId,productId,cart.getProductStoreId(),prodCatalogId,cart.getWebSiteId(),cart.getCurrency(),cart.getLocale(),cart.getAutoUserLogin());
      }
      if (reservStart == null) {
        cart.addOrIncreaseItem(productId,null,quantity,null,null,null,null,null,null,attributes,prodCatalogId,configWrapper,null,null,null,dispatcher);
      }
 else {
        cart.addOrIncreaseItem(productId,null,quantity,reservStart,reservLength,reservPersons,null,null,null,null,null,attributes,prodCatalogId,configWrapper,null,null,null,dispatcher);
      }
      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);
      errMsg=UtilProperties.getMessage(resource_error,"shoppinglistevents.added_product_to_cart",messageMap,cart.getLocale());
      eventMessage.append(errMsg).append("\n");
    }
 catch (    CartItemModifyException e) {
      Debug.logWarning(e,UtilProperties.getMessage(resource_error,"OrderProblemsAddingItemFromListToCart",cart.getLocale()));
      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);
      errMsg=UtilProperties.getMessage(resource_error,"shoppinglistevents.problem_adding_product_to_cart",messageMap,cart.getLocale());
      eventMessage.append(errMsg).append("\n");
    }
catch (    ItemNotFoundException e) {
      Debug.logWarning(e,UtilProperties.getMessage(resource_error,"OrderProductNotFound",cart.getLocale()));
      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);
      errMsg=UtilProperties.getMessage(resource_error,"shoppinglistevents.problem_adding_product_to_cart",messageMap,cart.getLocale());
      eventMessage.append(errMsg).append("\n");
    }
  }
  if (eventMessage.length() > 0) {
    return eventMessage.toString();
  }
  return "";
}
