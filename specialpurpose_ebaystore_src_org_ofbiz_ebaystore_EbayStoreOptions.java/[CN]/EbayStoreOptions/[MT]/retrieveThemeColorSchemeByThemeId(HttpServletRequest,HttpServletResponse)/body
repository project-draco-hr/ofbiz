{
  Locale locale=UtilHttp.getLocale(request);
  HttpSession session=request.getSession(true);
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GetStoreOptionsRequestType req=null;
  GetStoreOptionsResponseType resp=null;
  StoreThemeArrayType returnedBasicThemeArray=null;
  try {
    Map paramMap=UtilHttp.getCombinedMap(request);
    if (paramMap.get("productStoreId") != null) {
      String themeId=(String)paramMap.get("themeId");
      GetStoreOptionsCall call=new GetStoreOptionsCall(EbayStoreHelper.getApiContext((String)paramMap.get("productStoreId"),locale,delegator));
      req=new GetStoreOptionsRequestType();
      resp=(GetStoreOptionsResponseType)call.execute(req);
      if (resp != null && "SUCCESS".equals(resp.getAck().toString())) {
        returnedBasicThemeArray=resp.getBasicThemeArray();
        StoreThemeType[] storeBasicTheme=returnedBasicThemeArray.getTheme();
        int i=0;
        String colorSchemeId=themeId.substring(themeId.indexOf("-") + 1);
        themeId=themeId.substring(0,themeId.indexOf("-"));
        Map<String,Object> storeColorSchemeMap=FastMap.newInstance();
        while (i < storeBasicTheme.length) {
          StoreThemeType storeThemeType=storeBasicTheme[i];
          if (themeId.equals(storeThemeType.getThemeID().toString())) {
            StoreColorSchemeType colorSchemeType=storeThemeType.getColorScheme();
            if (colorSchemeType != null) {
              if (colorSchemeId.equals(colorSchemeType.getColorSchemeID().toString())) {
                StoreColorType storeColor=colorSchemeType.getColor();
                storeColorSchemeMap.put("storeColorAccent",storeColor.getAccent());
                storeColorSchemeMap.put("storeColorPrimary",storeColor.getPrimary());
                storeColorSchemeMap.put("storeColorSecondary",storeColor.getSecondary());
                StoreFontType storeFontType=colorSchemeType.getFont();
                storeColorSchemeMap.put("storeFontTypeNameFaceColor",storeFontType.getNameColor());
                storeColorSchemeMap.put("storeFontTypeFontFaceValue",storeFontType.getNameFace().value());
                storeColorSchemeMap.put("storeFontTypeSizeFaceValue",storeFontType.getNameSize().value());
                storeColorSchemeMap.put("storeFontTypeTitleColor",storeFontType.getTitleColor());
                storeColorSchemeMap.put("storeFontTypeFontTitleValue",storeFontType.getTitleFace().value());
                storeColorSchemeMap.put("storeFontSizeTitleValue",storeFontType.getTitleSize().value());
                storeColorSchemeMap.put("storeFontTypeDescColor",storeFontType.getDescColor());
                storeColorSchemeMap.put("storeFontTypeFontDescValue",storeFontType.getDescFace().value());
                storeColorSchemeMap.put("storeDescSizeValue",storeFontType.getDescSize().value());
                toJsonObject(storeColorSchemeMap,response);
                break;
              }
            }
          }
          i++;
        }
      }
 else {
        EbayStoreHelper.createErrorLogMessage(userLogin,dispatcher,paramMap.get("productStoreId").toString(),resp.getAck().toString(),"GetStoreOptionsCall : retrieveThemeColorSchemeByThemeId",resp.getErrors(0).getLongMessage());
      }
    }
  }
 catch (  ApiException e) {
    e.printStackTrace();
    return "error";
  }
catch (  SdkSoapException e) {
    e.printStackTrace();
    return "error";
  }
catch (  SdkException e) {
    e.printStackTrace();
    return "error";
  }
catch (  EventHandlerException e) {
    e.printStackTrace();
    return "error";
  }
  return "success";
}
