{
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  ServletContext servletContext=request.getSession().getServletContext();
  HttpSession session=request.getSession();
  String webSiteId=(String)session.getAttribute("webSiteId");
  if (webSiteId == null) {
    request.setAttribute("_ERROR_MESSAGE_","Not able to run CMS application; no webSiteId defined for WebApp!");
    return "error";
  }
  String targetRequest=(String)request.getAttribute("targetRequestUri");
  String actualRequest=(String)request.getAttribute("thisRequestUri");
  if (targetRequest != null) {
    targetRequest=targetRequest.replaceAll("\\W","");
  }
 else {
    targetRequest="";
  }
  if (actualRequest != null) {
    actualRequest=actualRequest.replaceAll("\\W","");
  }
 else {
    actualRequest="";
  }
  String contentId=null;
  String mapKey=null;
  String pathInfo=request.getPathInfo();
  if (targetRequest.equals(actualRequest)) {
    String[] pathParsed=pathInfo.split("/",3);
    if (pathParsed != null && pathParsed.length > 2) {
      pathInfo=pathParsed[2];
    }
 else {
      pathInfo=null;
    }
  }
  if (pathInfo == null) {
    List<GenericValue> defaultContents=null;
    try {
      defaultContents=delegator.findByAnd("WebSiteContent",UtilMisc.toMap("webSiteId",webSiteId,"webSiteContentTypeId","DEFAULT_PAGE"),UtilMisc.toList("-fromDate"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    defaultContents=EntityUtil.filterByDate(defaultContents);
    GenericValue defaultContent=EntityUtil.getFirst(defaultContents);
    if (defaultContent != null) {
      pathInfo=defaultContent.getString("contentId");
    }
  }
  if (pathInfo != null) {
    pathInfo=pathInfo.trim();
    if (pathInfo.startsWith("/")) {
      pathInfo=pathInfo.substring(1);
    }
    if (pathInfo.endsWith("/")) {
      pathInfo=pathInfo.substring(0,pathInfo.length() - 1);
    }
    Debug.log("Path INFO for Alias: " + pathInfo,module);
    GenericValue pathAlias=null;
    try {
      pathAlias=delegator.findByPrimaryKeyCache("WebSitePathAlias",UtilMisc.toMap("webSiteId",webSiteId,"pathAlias",pathInfo));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    if (pathAlias != null) {
      String alias=pathAlias.getString("aliasTo");
      contentId=pathAlias.getString("contentId");
      mapKey=pathAlias.getString("mapKey");
      if (contentId == null && UtilValidate.isNotEmpty(alias)) {
        if (!alias.startsWith("/")) {
          alias="/" + alias;
        }
        RequestDispatcher rd=request.getRequestDispatcher(request.getServletPath() + alias);
        try {
          rd.forward(request,response);
        }
 catch (        ServletException e) {
          Debug.logError(e,module);
          return "error";
        }
catch (        IOException e) {
          Debug.logError(e,module);
          return "error";
        }
        return null;
      }
    }
    Locale locale=UtilHttp.getLocale(request);
    if (contentId == null) {
      if (Debug.verboseOn())       Debug.logVerbose("Current PathInfo: " + pathInfo,module);
      if (pathInfo.indexOf("/") != -1) {
        String[] pathSplit=pathInfo.split("/");
        if (Debug.verboseOn())         Debug.logVerbose("Split pathinfo: " + pathSplit.length,module);
        if (pathSplit != null && pathSplit.length > 0) {
          contentId=pathSplit[0];
          if (pathSplit.length > 1) {
            mapKey=pathSplit[1];
          }
        }
      }
 else {
        contentId=pathInfo;
      }
    }
    boolean websiteOk;
    try {
      websiteOk=verifyContentToWebSite(delegator,webSiteId,contentId);
    }
 catch (    GeneralException e) {
      Debug.logError(e,module);
      throw new GeneralRuntimeException(e.getMessage(),e);
    }
    if (websiteOk) {
      MapStack<String> templateMap=MapStack.create();
      ScreenRenderer.populateContextForRequest(templateMap,null,request,response,servletContext);
      templateMap.put("formStringRenderer",new HtmlFormRenderer(request,response));
      ServletContext ctx=(ServletContext)request.getAttribute("servletContext");
      RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");
      templateMap.put("_REQUEST_HANDLER_",rh);
      Writer writer;
      try {
        boolean useOutputStreamNotWriter=false;
        if (servletContext != null) {
          useOutputStreamNotWriter=UtilJ2eeCompat.useOutputStreamNotWriter(servletContext);
        }
        if (useOutputStreamNotWriter) {
          ServletOutputStream ros=response.getOutputStream();
          writer=new OutputStreamWriter(ros,"UTF-8");
        }
 else {
          writer=response.getWriter();
        }
        if (UtilValidate.isEmpty(mapKey)) {
          ContentWorker.renderContentAsText(dispatcher,delegator,contentId,writer,templateMap,locale,"text/html",true);
        }
 else {
          ContentWorker.renderSubContentAsText(dispatcher,delegator,contentId,writer,mapKey,templateMap,locale,"text/html",true);
        }
      }
 catch (      IOException e) {
        throw new GeneralRuntimeException("Error in the response writer/output stream: " + e.toString(),e);
      }
catch (      GeneralException e) {
        throw new GeneralRuntimeException("Error rendering content: " + e.toString(),e);
      }
      return "success";
    }
 else {
      if (Debug.verboseOn())       Debug.logVerbose("No website [" + webSiteId + "] publish point found for contentId: "+ contentId,module);
      return "error";
    }
  }
  return "error";
}
