{
  ModelFormField modelFormField=dropDownField.getModelFormField();
  ModelForm modelForm=modelFormField.getModelForm();
  String currentValue=modelFormField.getEntry(context);
  List allOptionValues=dropDownField.getAllOptionValues(context,modelForm.getDelegator(context));
  ModelFormField.AutoComplete autoComplete=dropDownField.getAutoComplete();
  String event=modelFormField.getEvent();
  String action=modelFormField.getAction(context);
  String className="";
  String alert="false";
  String name=modelFormField.getParameterName(context);
  String id=modelFormField.getIdName();
  String multiple=dropDownField.isAllowMultiple() ? "multiple" : "";
  String otherFieldName="";
  String formName=modelForm.getName();
  String size=dropDownField.getSize();
  String dDFCurrent=dropDownField.getCurrent();
  String firstInList="";
  String explicitDescription="";
  String allowEmpty="";
  StringBuilder options=new StringBuilder();
  if (UtilValidate.isNotEmpty(modelFormField.getWidgetStyle())) {
    className=modelFormField.getWidgetStyle();
    if (modelFormField.shouldBeRed(context)) {
      alert="true";
    }
  }
  int otherFieldSize=dropDownField.getOtherFieldSize();
  if (otherFieldSize > 0) {
    otherFieldName=dropDownField.getParameterNameOther(context);
  }
  if (UtilValidate.isNotEmpty(currentValue) && "first-in-list".equals(dropDownField.getCurrent())) {
    firstInList="first-in-list";
    explicitDescription=dropDownField.getCurrentDescription(context);
    if (UtilValidate.isEmpty(explicitDescription)) {
      explicitDescription=(ModelFormField.FieldInfoWithOptions.getDescriptionForOptionKey(currentValue,allOptionValues));
    }
  }
  if (dropDownField.isAllowEmpty()) {
    allowEmpty="&nbsp;";
  }
  options.append("[");
  Iterator<ModelFormField.OptionValue> optionValueIter=allOptionValues.iterator();
  while (optionValueIter.hasNext()) {
    ModelFormField.OptionValue optionValue=(ModelFormField.OptionValue)optionValueIter.next();
    if (options.length() > 1) {
      options.append(",");
    }
    options.append("{'key':'");
    options.append(optionValue.getKey());
    options.append("'");
    options.append(",'description':'");
    options.append(optionValue.getDescription());
    options.append("'}");
  }
  options.append("]");
  String noCurrentSelectedKey=dropDownField.getNoCurrentSelectedKey(context);
  String otherValue="", fieldName="";
  if (otherFieldSize > 0) {
    fieldName=modelFormField.getParameterName(context);
    Map dataMap=modelFormField.getMap(context);
    if (dataMap == null) {
      dataMap=context;
    }
    Object otherValueObj=dataMap.get(otherFieldName);
    otherValue=(otherValueObj == null) ? "" : otherValueObj.toString();
  }
  StringWriter sr=new StringWriter();
  sr.append("<@renderDropDownField ");
  sr.append("name=\"");
  sr.append(name);
  sr.append("\" className=\"");
  sr.append(className);
  sr.append("\" alert=\"");
  sr.append(alert);
  sr.append("\" id=\"");
  sr.append(id);
  sr.append("\" multiple=\"");
  sr.append(multiple);
  sr.append("\" formName=\"");
  sr.append(formName);
  sr.append("\" otherFieldName=\"");
  sr.append(otherFieldName);
  sr.append("\" event=\"");
  sr.append(event);
  sr.append("\" action=\"");
  sr.append(action == null ? "" : action);
  sr.append("\" size=\"");
  sr.append(size);
  sr.append("\" firstInList=\"");
  sr.append(firstInList);
  sr.append("\" currentValue=\"");
  sr.append(currentValue);
  sr.append("\" explicitDescription=\"");
  sr.append(explicitDescription);
  sr.append("\" allowEmpty=\"");
  sr.append(allowEmpty);
  sr.append("\" options=");
  sr.append(options.toString());
  sr.append(" fieldName=\"");
  sr.append(fieldName);
  sr.append("\" otherFieldName=\"");
  sr.append(otherFieldName);
  sr.append("\" otherValue=\"");
  sr.append(otherValue);
  sr.append("\" otherFieldSize=");
  sr.append(Integer.toString(otherFieldSize));
  sr.append(" />");
  executeMacro(writer,sr.toString());
  ModelFormField.SubHyperlink subHyperlink=dropDownField.getSubHyperlink();
  if (subHyperlink != null && subHyperlink.shouldUse(context)) {
    makeHyperlinkString(writer,subHyperlink,context);
  }
  this.appendTooltip(writer,context,modelFormField);
}
