{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productId=(String)context.get("productId");
  String imageName=(String)context.get("imageName");
  String angle=(String)context.get("angle");
  if (UtilValidate.isNotEmpty(imageName)) {
    Map<String,Object> contentCtx=FastMap.newInstance();
    contentCtx.put("contentTypeId","DOCUMENT");
    contentCtx.put("userLogin",userLogin);
    Map<String,Object> contentResult=FastMap.newInstance();
    try {
      contentResult=dispatcher.runSync("createContent",contentCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    Map<String,Object> contentThumb=FastMap.newInstance();
    contentThumb.put("contentTypeId","DOCUMENT");
    contentThumb.put("userLogin",userLogin);
    Map<String,Object> contentThumbResult=FastMap.newInstance();
    try {
      contentThumbResult=dispatcher.runSync("createContent",contentThumb);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    String contentIdThumb=(String)contentThumbResult.get("contentId");
    String contentId=(String)contentResult.get("contentId");
    String filenameToUse=(String)contentResult.get("contentId") + ".jpg";
    String filenameTouseThumb=(String)contentThumbResult.get("contentId") + ".jpg";
    String imageServerPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.server.path"),context);
    BufferedImage bufImg=ImageIO.read(new File(imageServerPath + "/products/management/" + productId+ "/"+ imageName));
    int bufImgType;
    if (BufferedImage.TYPE_CUSTOM == bufImg.getType()) {
      bufImgType=BufferedImage.TYPE_INT_ARGB_PRE;
    }
 else {
      bufImgType=bufImg.getType();
    }
    int w=bufImg.getWidth(null);
    int h=bufImg.getHeight(null);
    BufferedImage bufNewImg=new BufferedImage(w,h,bufImgType);
    Graphics2D g=bufNewImg.createGraphics();
    g.rotate(Math.toRadians(Double.parseDouble(angle)),w / 2,h / 2);
    g.drawImage(bufImg,0,0,null);
    g.dispose();
    String mimeType=imageName.substring(imageName.lastIndexOf(".") + 1);
    ImageIO.write((RenderedImage)bufNewImg,mimeType,new File(imageServerPath + "/products/management/" + productId+ "/"+ filenameToUse));
    double imgHeight=bufNewImg.getHeight();
    double imgWidth=bufNewImg.getWidth();
    Map<String,Object> resultResize=ImageManagementServices.resizeImageThumbnail(bufNewImg,imgHeight,imgWidth);
    ImageIO.write((RenderedImage)resultResize.get("bufferedImage"),mimeType,new File(imageServerPath + "/products/management/" + productId+ "/"+ filenameTouseThumb));
    String imageUrlResource="/images/products/management/" + productId + "/"+ filenameToUse;
    String imageUrlThumb="/images/products/management/" + productId + "/"+ filenameTouseThumb;
    ImageManagementServices.createContentAndDataResource(dctx,userLogin,filenameToUse,imageUrlResource,contentId);
    ImageManagementServices.createContentAndDataResource(dctx,userLogin,filenameTouseThumb,imageUrlThumb,contentIdThumb);
    Map<String,Object> createContentAssocMap=FastMap.newInstance();
    createContentAssocMap.put("contentAssocTypeId","IMAGE_THUMBNAIL");
    createContentAssocMap.put("contentId",contentId);
    createContentAssocMap.put("contentIdTo",contentIdThumb);
    createContentAssocMap.put("userLogin",userLogin);
    try {
      dispatcher.runSync("createContentAssoc",createContentAssocMap);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    Map<String,Object> productContentCtx=FastMap.newInstance();
    productContentCtx.put("productId",productId);
    productContentCtx.put("productContentTypeId","IMAGE");
    productContentCtx.put("fromDate",UtilDateTime.nowTimestamp());
    productContentCtx.put("userLogin",userLogin);
    productContentCtx.put("contentId",contentId);
    productContentCtx.put("statusId","IM_PENDING");
    try {
      dispatcher.runSync("createProductContent",productContentCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    Map<String,Object> partyContentCtx=FastMap.newInstance();
    partyContentCtx.put("contentId",contentId);
    partyContentCtx.put("userLogin",userLogin);
    try {
      dispatcher.runSync("createImagePartyContent",partyContentCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
 else {
    String errMsg="Please select Image.";
    Debug.logFatal(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  String successMsg="Rotated image successfully.";
  Map<String,Object> result=ServiceUtil.returnSuccess(successMsg);
  return result;
}
