{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map<String,Object> subContext=UtilMisc.makeMapWritable(context);
  String orderId=(String)context.get("orderId");
  Locale locale=(Locale)context.get("locale");
  Debug.logInfo("In processExtendSubscriptionByOrder service with orderId: " + orderId,module);
  GenericValue orderHeader=null;
  try {
    List<GenericValue> orderRoleList=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"roleTypeId","END_USER_CUSTOMER").queryList();
    if (orderRoleList.size() > 0) {
      GenericValue orderRole=orderRoleList.get(0);
      String partyId=(String)orderRole.get("partyId");
      subContext.put("partyId",partyId);
    }
 else {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resourceOrderError,"OrderErrorCannotGetOrderRoleEntity",UtilMisc.toMap("itemMsgInfo",orderId),locale));
    }
    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
    if (orderHeader == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorNoValidOrderHeaderFoundForOrderId",UtilMisc.toMap("orderId",orderId),locale));
    }
    Timestamp orderCreatedDate=(Timestamp)orderHeader.get("orderDate");
    subContext.put("orderCreatedDate",orderCreatedDate);
    List<GenericValue> orderItemList=orderHeader.getRelated("OrderItem",null,null,false);
    for (    GenericValue orderItem : orderItemList) {
      BigDecimal qty=orderItem.getBigDecimal("quantity");
      String productId=orderItem.getString("productId");
      if (UtilValidate.isEmpty(productId)) {
        continue;
      }
      List<GenericValue> productSubscriptionResourceListFiltered=EntityQuery.use(delegator).from("ProductSubscriptionResource").where("productId",productId).cache(true).filterByDate().queryList();
      if (productSubscriptionResourceListFiltered.size() > 0) {
        subContext.put("subscriptionTypeId","PRODUCT_SUBSCR");
        subContext.put("productId",productId);
        subContext.put("orderId",orderId);
        subContext.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
        subContext.put("inventoryItemId",orderItem.get("fromInventoryItemId"));
        subContext.put("quantity",Integer.valueOf(qty.intValue()));
        Map<String,Object> ctx=dctx.getModelService("processExtendSubscriptionByProduct").makeValid(subContext,ModelService.IN_PARAM);
        Map<String,Object> thisResult=dispatcher.runSync("processExtendSubscriptionByProduct",ctx);
        if (ServiceUtil.isError(thisResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductSubscriptionByOrderError",UtilMisc.toMap("orderId",orderId),locale),null,null,thisResult);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e.toString(),module);
    return ServiceUtil.returnError(e.toString());
  }
  return ServiceUtil.returnSuccess();
}
