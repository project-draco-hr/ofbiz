{
  if (modelEntity instanceof ModelViewEntity) {
    StringBuilder sql=new StringBuilder("(SELECT ");
    Iterator<ModelField> fieldsIter=modelEntity.getFieldsIterator();
    if (fieldsIter.hasNext()) {
      ModelField curField=fieldsIter.next();
      String colname=curField.getColName();
      sql.append(colname);
      sql.append(" AS ");
      sql.append(filterColName(colname));
      while (fieldsIter.hasNext()) {
        curField=fieldsIter.next();
        colname=curField.getColName();
        sql.append(", ");
        sql.append(colname);
        sql.append(" AS ");
        sql.append(filterColName(colname));
      }
    }
    sql.append(makeFromClause(modelEntity,datasourceInfo));
    String viewWhereClause=makeViewWhereClause(modelEntity,datasourceInfo.joinStyle);
    if (UtilValidate.isNotEmpty(viewWhereClause)) {
      sql.append(" WHERE ");
      sql.append(viewWhereClause);
    }
    ModelViewEntity modelViewEntity=(ModelViewEntity)modelEntity;
    String groupByString=modelViewEntity.colNameString(modelViewEntity.getGroupBysCopy(),", ","",false);
    if (UtilValidate.isNotEmpty(groupByString)) {
      sql.append(" GROUP BY ");
      sql.append(groupByString);
    }
    sql.append(")");
    return sql.toString();
  }
 else {
    return modelEntity.getTableName(datasourceInfo);
  }
}
