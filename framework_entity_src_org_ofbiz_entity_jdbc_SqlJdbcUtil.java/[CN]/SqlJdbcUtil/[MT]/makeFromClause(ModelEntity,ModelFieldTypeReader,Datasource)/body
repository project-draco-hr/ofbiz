{
  StringBuilder sql=new StringBuilder(" FROM ");
  if (modelEntity instanceof ModelViewEntity) {
    ModelViewEntity modelViewEntity=(ModelViewEntity)modelEntity;
    if ("ansi".equals(datasourceInfo.getJoinStyle()) || "ansi-no-parenthesis".equals(datasourceInfo.getJoinStyle())) {
      boolean useParenthesis=true;
      if ("ansi-no-parenthesis".equals(datasourceInfo.getJoinStyle())) {
        useParenthesis=false;
      }
      Set<String> joinedAliasSet=new TreeSet<String>();
      StringBuilder openParens=null;
      if (useParenthesis)       openParens=new StringBuilder();
      StringBuilder restOfStatement=new StringBuilder();
      for (int i=0; i < modelViewEntity.getViewLinksSize(); i++) {
        if (i > 0 && useParenthesis)         openParens.append('(');
        ModelViewEntity.ModelViewLink viewLink=modelViewEntity.getViewLink(i);
        ModelEntity linkEntity=modelViewEntity.getMemberModelEntity(viewLink.getEntityAlias());
        ModelEntity relLinkEntity=modelViewEntity.getMemberModelEntity(viewLink.getRelEntityAlias());
        if (i == 0) {
          restOfStatement.append(makeViewTable(linkEntity,modelFieldTypeReader,datasourceInfo));
          restOfStatement.append(" ");
          restOfStatement.append(viewLink.getEntityAlias());
          joinedAliasSet.add(viewLink.getEntityAlias());
        }
 else {
          if (!joinedAliasSet.contains(viewLink.getEntityAlias())) {
            throw new GenericModelException("Tried to link the " + viewLink.getEntityAlias() + " alias to the "+ viewLink.getRelEntityAlias()+ " alias of the "+ modelViewEntity.getEntityName()+ " view-entity, but it is not the first view-link and has not been included in a previous view-link. In other words, the left/main alias isn't connected to the rest of the member-entities yet.");
          }
        }
        joinedAliasSet.add(viewLink.getRelEntityAlias());
        if (viewLink.isRelOptional()) {
          restOfStatement.append(" LEFT OUTER JOIN ");
        }
 else {
          restOfStatement.append(" INNER JOIN ");
        }
        restOfStatement.append(makeViewTable(relLinkEntity,modelFieldTypeReader,datasourceInfo));
        restOfStatement.append(" ");
        restOfStatement.append(viewLink.getRelEntityAlias());
        restOfStatement.append(" ON ");
        StringBuilder condBuffer=new StringBuilder();
        for (int j=0; j < viewLink.getKeyMapsSize(); j++) {
          ModelKeyMap keyMap=viewLink.getKeyMap(j);
          ModelField linkField=linkEntity.getField(keyMap.getFieldName());
          if (linkField == null) {
            throw new GenericModelException("Invalid field name in view-link key-map for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity; the field ["+ keyMap.getFieldName()+ "] does not exist on the ["+ linkEntity.getEntityName()+ "] entity.");
          }
          ModelField relLinkField=relLinkEntity.getField(keyMap.getRelFieldName());
          if (relLinkField == null) {
            throw new GenericModelException("Invalid related field name in view-link key-map for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity; the field ["+ keyMap.getRelFieldName()+ "] does not exist on the ["+ relLinkEntity.getEntityName()+ "] entity.");
          }
          if (condBuffer.length() > 0) {
            condBuffer.append(" AND ");
          }
          condBuffer.append(viewLink.getEntityAlias());
          condBuffer.append(".");
          condBuffer.append(linkField.getColName());
          condBuffer.append(" = ");
          condBuffer.append(viewLink.getRelEntityAlias());
          condBuffer.append(".");
          condBuffer.append(relLinkField.getColName());
        }
        if (condBuffer.length() == 0) {
          throw new GenericModelException("No view-link/join key-maps found for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity.");
        }
        ModelViewEntity.ViewEntityCondition viewEntityCondition=viewLink.getViewEntityCondition();
        if (viewEntityCondition != null) {
          EntityCondition whereCondition=viewEntityCondition.getWhereCondition(modelFieldTypeReader,null);
          if (whereCondition != null) {
            condBuffer.append(" AND ");
            condBuffer.append(whereCondition.makeWhereString(modelEntity,null,datasourceInfo));
          }
        }
        restOfStatement.append(condBuffer.toString());
        if (i < (modelViewEntity.getViewLinksSize() - 1) && useParenthesis)         restOfStatement.append(')');
      }
      if (useParenthesis)       sql.append(openParens.toString());
      sql.append(restOfStatement.toString());
      boolean fromEmpty=restOfStatement.length() == 0;
      for (      String aliasName : modelViewEntity.getMemberModelMemberEntities().keySet()) {
        ModelEntity fromEntity=modelViewEntity.getMemberModelEntity(aliasName);
        if (!joinedAliasSet.contains(aliasName)) {
          if (!fromEmpty)           sql.append(", ");
          fromEmpty=false;
          sql.append(makeViewTable(fromEntity,modelFieldTypeReader,datasourceInfo));
          sql.append(" ");
          sql.append(aliasName);
        }
      }
    }
 else     if ("theta-oracle".equals(datasourceInfo.getJoinStyle()) || "theta-mssql".equals(datasourceInfo.getJoinStyle())) {
      Iterator<String> meIter=modelViewEntity.getMemberModelMemberEntities().keySet().iterator();
      while (meIter.hasNext()) {
        String aliasName=meIter.next();
        ModelEntity fromEntity=modelViewEntity.getMemberModelEntity(aliasName);
        sql.append(makeViewTable(fromEntity,modelFieldTypeReader,datasourceInfo));
        sql.append(" ");
        sql.append(aliasName);
        if (meIter.hasNext())         sql.append(", ");
      }
    }
 else {
      throw new GenericModelException("The join-style " + datasourceInfo.getJoinStyle() + " is not yet supported");
    }
  }
 else {
    sql.append(modelEntity.getTableName(datasourceInfo));
  }
  return sql.toString();
}
