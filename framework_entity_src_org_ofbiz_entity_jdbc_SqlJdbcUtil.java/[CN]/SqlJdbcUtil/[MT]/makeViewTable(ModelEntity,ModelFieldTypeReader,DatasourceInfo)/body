{
  if (modelEntity instanceof ModelViewEntity) {
    StringBuilder sql=new StringBuilder("(SELECT ");
    Iterator<ModelField> fieldsIter=modelEntity.getFieldsIterator();
    if (fieldsIter.hasNext()) {
      ModelField curField=fieldsIter.next();
      sql.append(curField.getColValue());
      sql.append(" AS ");
      sql.append(curField.getColName());
      while (fieldsIter.hasNext()) {
        curField=fieldsIter.next();
        sql.append(", ");
        sql.append(curField.getColValue());
        sql.append(" AS ");
        sql.append(curField.getColName());
      }
    }
    sql.append(makeFromClause(modelEntity,modelFieldTypeReader,datasourceInfo));
    String viewWhereClause=makeViewWhereClause(modelEntity,datasourceInfo.joinStyle);
    ModelViewEntity modelViewEntity=(ModelViewEntity)modelEntity;
    List<EntityCondition> whereConditions=FastList.newInstance();
    List<EntityCondition> havingConditions=FastList.newInstance();
    List<String> orderByList=FastList.newInstance();
    modelViewEntity.populateViewEntityConditionInformation(modelFieldTypeReader,whereConditions,havingConditions,orderByList,null);
    String viewConditionClause;
    if (!whereConditions.isEmpty()) {
      viewConditionClause=EntityCondition.makeCondition(whereConditions,EntityOperator.AND).makeWhereString(modelViewEntity,null,datasourceInfo);
    }
 else {
      viewConditionClause=null;
    }
    if (UtilValidate.isNotEmpty(viewWhereClause) || UtilValidate.isNotEmpty(viewConditionClause)) {
      sql.append(" WHERE ");
      if (UtilValidate.isNotEmpty(viewWhereClause)) {
        sql.append("(").append(viewWhereClause).append(")");
        if (UtilValidate.isNotEmpty(viewConditionClause)) {
          sql.append(" AND ");
        }
      }
      if (UtilValidate.isNotEmpty(viewConditionClause)) {
        sql.append("(").append(viewConditionClause).append(")");
      }
    }
    modelViewEntity.colNameString(modelViewEntity.getGroupBysCopy(),sql," GROUP BY ",", ","",false);
    sql.append(")");
    return sql.toString();
  }
 else {
    return modelEntity.getTableName(datasourceInfo);
  }
}
