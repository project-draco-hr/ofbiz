{
  ModelFieldType mft=modelFieldTypeReader.getModelFieldType(modelField.getType());
  if (mft == null) {
    throw new GenericModelException("GenericDAO.getValue: definition fieldType " + modelField.getType() + " not found, cannot setValue for field "+ entityName+ "."+ modelField.getName()+ ".");
  }
  if (fieldValue == GenericEntity.NULL_FIELD) {
    fieldValue=null;
  }
  JdbcValueHandler<T> handler=UtilGenerics.cast(mft.getJdbcValueHandler());
  if (handler != null) {
    try {
      sqlP.setValue(handler,handler.getJavaClass().cast(fieldValue));
      return;
    }
 catch (    SQLException e) {
      throw new GenericDataSourceException("SQL Exception while setting value on field [" + modelField.getName() + "] of entity "+ entityName+ ": ",e);
    }
  }
 else {
    Debug.logWarning("JdbcValueHandler not found for java-type " + mft.getJavaType() + ", falling back on switch statement. Entity = "+ modelField.getModelEntity().getEntityName()+ ", field = "+ modelField.getName()+ ".",module);
  }
  String fieldType=mft.getJavaType();
  if (fieldValue != null) {
    if (!ObjectType.instanceOf(fieldValue,fieldType)) {
      String fieldClassName=fieldValue.getClass().getName();
      if (fieldValue instanceof byte[]) {
        fieldClassName="byte[]";
      }
      if (Debug.verboseOn())       Debug.logVerbose("type of field " + entityName + "."+ modelField.getName()+ " is "+ fieldClassName+ ", was expecting "+ mft.getJavaType()+ "; this may "+ "indicate an error in the configuration or in the class, and may result "+ "in an SQL-Java data conversion error. Will use the real field type: "+ fieldClassName+ ", not the definition.",module);
      fieldType=fieldClassName;
    }
  }
  try {
    int typeValue=getType(fieldType);
switch (typeValue) {
case 1:
      sqlP.setValue((String)fieldValue);
    break;
case 2:
  sqlP.setValue((java.sql.Timestamp)fieldValue);
break;
case 3:
sqlP.setValue((java.sql.Time)fieldValue);
break;
case 4:
sqlP.setValue((java.sql.Date)fieldValue);
break;
case 5:
sqlP.setValue((java.lang.Integer)fieldValue);
break;
case 6:
sqlP.setValue((java.lang.Long)fieldValue);
break;
case 7:
sqlP.setValue((java.lang.Float)fieldValue);
break;
case 8:
sqlP.setValue((java.lang.Double)fieldValue);
break;
case 9:
sqlP.setValue((java.math.BigDecimal)fieldValue);
break;
case 10:
sqlP.setValue((java.lang.Boolean)fieldValue);
break;
case 11:
sqlP.setBinaryStream(fieldValue);
break;
case 12:
if (fieldValue instanceof byte[]) {
sqlP.setBytes((byte[])fieldValue);
}
 else if (fieldValue instanceof ByteBuffer) {
sqlP.setBytes(((ByteBuffer)fieldValue).array());
}
 else {
sqlP.setValue((java.sql.Blob)fieldValue);
}
break;
case 13:
sqlP.setValue((java.sql.Clob)fieldValue);
break;
case 14:
if (fieldValue != null) {
sqlP.setValue(new java.sql.Date(((java.util.Date)fieldValue).getTime()));
}
 else {
sqlP.setValue((java.sql.Date)null);
}
break;
case 15:
sqlP.setValue(UtilGenerics.<Collection<?>>cast(fieldValue));
break;
}
}
 catch (GenericNotImplementedException e) {
throw new GenericNotImplementedException("Not Implemented Exception while setting value on field [" + modelField.getName() + "] of entity "+ entityName+ ": "+ e.toString(),e);
}
catch (SQLException sqle) {
throw new GenericDataSourceException("SQL Exception while setting value on field [" + modelField.getName() + "] of entity "+ entityName+ ": ",sqle);
}
}
