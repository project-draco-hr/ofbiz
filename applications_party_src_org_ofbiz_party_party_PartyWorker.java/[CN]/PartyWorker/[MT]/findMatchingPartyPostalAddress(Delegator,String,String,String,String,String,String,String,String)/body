{
  if (address1 == null || city == null || postalCode == null) {
    throw new IllegalArgumentException();
  }
  List<EntityCondition> addrExprs=FastList.newInstance();
  if (stateProvinceGeoId != null) {
    if ("**".equals(stateProvinceGeoId)) {
      Debug.logWarning("Illegal state code passed!",module);
    }
 else     if ("NA".equals(stateProvinceGeoId)) {
      addrExprs.add(EntityCondition.makeCondition("stateProvinceGeoId",EntityOperator.EQUALS,"_NA_"));
    }
 else {
      addrExprs.add(EntityCondition.makeCondition("stateProvinceGeoId",EntityOperator.EQUALS,stateProvinceGeoId.toUpperCase()));
    }
  }
  if (!postalCode.startsWith("*")) {
    if (postalCode.length() == 10 && postalCode.indexOf("-") != -1) {
      String[] zipSplit=postalCode.split("-",2);
      postalCode=zipSplit[0];
      postalCodeExt=zipSplit[1];
    }
    addrExprs.add(EntityCondition.makeCondition("postalCode",EntityOperator.EQUALS,postalCode));
  }
  if (postalCodeExt != null) {
    addrExprs.add(EntityCondition.makeCondition("postalCodeExt",EntityOperator.EQUALS,postalCodeExt));
  }
  addrExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("city"),EntityOperator.EQUALS,EntityFunction.UPPER(city)));
  if (countryGeoId != null) {
    addrExprs.add(EntityCondition.makeCondition("countryGeoId",EntityOperator.EQUALS,countryGeoId.toUpperCase()));
  }
  addrExprs.add(EntityCondition.makeCondition(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PARTY_DISABLED")));
  if (partyTypeId != null) {
    addrExprs.add(EntityCondition.makeCondition("partyTypeId",EntityOperator.EQUALS,partyTypeId));
  }
  List<String> sort=UtilMisc.toList("-fromDate");
  EntityCondition addrCond=EntityCondition.makeCondition(addrExprs,EntityOperator.AND);
  List<GenericValue> addresses=EntityUtil.filterByDate(delegator.findList("PartyAndPostalAddress",addrCond,null,sort,null,false));
  if (UtilValidate.isEmpty(addresses)) {
    return addresses;
  }
  List<GenericValue> validFound=FastList.newInstance();
  for (  GenericValue address : addresses) {
    String addr1Source=PartyWorker.makeMatchingString(delegator,address1);
    String addr1Target=PartyWorker.makeMatchingString(delegator,address.getString("address1"));
    if (addr1Target != null) {
      Debug.logInfo("Comparing address1 : " + addr1Source + " / "+ addr1Target,module);
      if (addr1Target.equals(addr1Source)) {
        if (address2 != null) {
          String addr2Source=PartyWorker.makeMatchingString(delegator,address2);
          String addr2Target=PartyWorker.makeMatchingString(delegator,address.getString("address2"));
          if (addr2Target != null) {
            Debug.logInfo("Comparing address2 : " + addr2Source + " / "+ addr2Target,module);
            if (addr2Source.equals(addr2Target)) {
              Debug.logInfo("Matching address2; adding valid address",module);
              validFound.add(address);
            }
          }
        }
 else {
          if (address.get("address2") == null) {
            Debug.logInfo("No address2; adding valid address",module);
            validFound.add(address);
          }
        }
      }
    }
  }
  return validFound;
}
