{
  List<GenericValue> returnList=FastList.newInstance();
  if (firstName == null || lastName == null || address1 == null || city == null || postalCode == null) {
    throw new IllegalArgumentException();
  }
  List<EntityCondition> addrExprs=FastList.newInstance();
  if (stateProvinceGeoId != null) {
    if ("**".equals(stateProvinceGeoId)) {
      Debug.logWarning("Illegal state code passed!",module);
    }
 else     if ("NA".equals(stateProvinceGeoId)) {
      addrExprs.add(EntityCondition.makeCondition("stateProvinceGeoId",EntityOperator.EQUALS,"_NA_"));
    }
 else {
      addrExprs.add(EntityCondition.makeCondition("stateProvinceGeoId",EntityOperator.EQUALS,stateProvinceGeoId.toUpperCase()));
    }
  }
  if (!postalCode.startsWith("*")) {
    if (postalCode.length() == 10 && postalCode.indexOf("-") != -1) {
      String[] zipSplit=postalCode.split("-",2);
      postalCode=zipSplit[0];
      postalCodeExt=zipSplit[1];
    }
    addrExprs.add(EntityCondition.makeCondition("postalCode",EntityOperator.EQUALS,postalCode));
  }
  if (postalCodeExt != null) {
    addrExprs.add(EntityCondition.makeCondition("postalCodeExt",EntityOperator.EQUALS,postalCodeExt));
  }
  city=city.replaceAll("'","\\\\'");
  addrExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("city"),EntityOperator.EQUALS,EntityFunction.UPPER(city)));
  if (countryGeoId != null) {
    addrExprs.add(EntityCondition.makeCondition("countryGeoId",EntityOperator.EQUALS,countryGeoId.toUpperCase()));
  }
  addrExprs.add(EntityCondition.makeCondition(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PARTY_DISABLED")));
  List<String> sort=UtilMisc.toList("-fromDate");
  EntityCondition addrCond=EntityCondition.makeCondition(addrExprs,EntityOperator.AND);
  List<GenericValue> addresses=EntityUtil.filterByDate(delegator.findList("PartyAndPostalAddress",addrCond,null,sort,null,false));
  List<GenericValue> validFound=FastList.newInstance();
  if (UtilValidate.isNotEmpty(addresses)) {
    for (    GenericValue address : addresses) {
      String addr1Source=PartyWorker.makeMatchingString(delegator,address1);
      String addr1Target=PartyWorker.makeMatchingString(delegator,address.getString("address1"));
      if (addr1Target != null) {
        Debug.log("Comparing address1 : " + addr1Source + " / "+ addr1Target,module);
        if (addr1Target.equals(addr1Source)) {
          if (address2 != null) {
            String addr2Source=PartyWorker.makeMatchingString(delegator,address2);
            String addr2Target=PartyWorker.makeMatchingString(delegator,address.getString("address2"));
            if (addr2Target != null) {
              Debug.log("Comparing address2 : " + addr2Source + " / "+ addr2Target,module);
              if (addr2Source.equals(addr2Target)) {
                Debug.log("Matching address2; adding valid address",module);
                validFound.add(address);
              }
            }
          }
 else {
            if (address.get("address2") == null) {
              Debug.log("No address2; adding valid address",module);
              validFound.add(address);
            }
          }
        }
      }
    }
    if (validFound != null && validFound.size() > 0) {
      for (      GenericValue partyAndAddr : validFound) {
        String partyId=partyAndAddr.getString("partyId");
        String cmId=partyAndAddr.getString("contactMechId");
        if (UtilValidate.isNotEmpty(partyId)) {
          GenericValue p=delegator.findByPrimaryKey("Person",UtilMisc.toMap("partyId",partyId));
          if (p != null) {
            String fName=p.getString("firstName");
            String lName=p.getString("lastName");
            String mName=p.getString("middleName");
            if (lName.toUpperCase().equals(lastName.toUpperCase())) {
              if (fName.toUpperCase().equals(firstName.toUpperCase())) {
                if (mName != null && middleName != null) {
                  if (mName.toUpperCase().equals(middleName.toUpperCase())) {
                    returnList.add(partyAndAddr);
                  }
                }
 else                 if (middleName == null) {
                  returnList.add(partyAndAddr);
                }
              }
            }
          }
        }
      }
    }
  }
  return returnList;
}
