{
  Delegator delegator=(Delegator)params.get("delegator");
  String onclickFunction=(String)params.get("onclickFunction");
  String additionParam=(String)params.get("additionParam");
  String hrefString=(String)params.get("hrefString");
  String hrefString2=(String)params.get("hrefString2");
  Map<String,Object> partyGroup=(Map<String,Object>)params.get("partyGroup");
  List<Map<String,Object>> resultList=new ArrayList<Map<String,Object>>();
  List<GenericValue> childOfComs=null;
  try {
    childOfComs=EntityQuery.use(delegator).from("PartyRelationship").where("partyIdFrom",partyGroup.get("partyId"),"partyRelationshipTypeId","GROUP_ROLLUP").filterByDate().queryList();
    if (UtilValidate.isNotEmpty(childOfComs)) {
      for (      GenericValue childOfCom : childOfComs) {
        Object catId=null;
        String catNameField=null;
        String title=null;
        Map<String,Object> josonMap=new HashMap<String,Object>();
        Map<String,Object> dataMap=new HashMap<String,Object>();
        Map<String,Object> dataAttrMap=new HashMap<String,Object>();
        Map<String,Object> attrMap=new HashMap<String,Object>();
        catId=childOfCom.get("partyIdTo");
        GenericValue childContext=EntityQuery.use(delegator).from("PartyGroup").where("partyId",catId).queryOne();
        if (UtilValidate.isNotEmpty(childContext)) {
          catNameField=(String)childContext.get("groupName");
          title=catNameField;
          josonMap.put("title",title);
        }
        List<GenericValue> childOfSubComs=EntityQuery.use(delegator).from("PartyRelationship").where("partyIdFrom",catId,"partyRelationshipTypeId","GROUP_ROLLUP").filterByDate().queryList();
        List<GenericValue> isPosition=EntityQuery.use(delegator).from("EmplPosition").where("partyId",catId).queryList();
        if (UtilValidate.isNotEmpty(childOfSubComs) || UtilValidate.isNotEmpty(isPosition)) {
          josonMap.put("state","closed");
        }
        GenericValue emContext=EntityQuery.use(delegator).from("Person").where("partyId",catId).queryOne();
        if (UtilValidate.isNotEmpty(emContext)) {
          String firstname=(String)emContext.get("firstName");
          String lastname=(String)emContext.get("lastName");
          if (UtilValidate.isEmpty(lastname)) {
            lastname="";
          }
          if (UtilValidate.isEmpty(firstname)) {
            firstname="";
          }
          title=firstname + " " + lastname;
        }
        dataAttrMap.put("onClick",onclickFunction + "('" + catId+ additionParam+ "')");
        String hrefStr=hrefString + catId;
        if (UtilValidate.isNotEmpty(hrefString2)) {
          hrefStr=hrefStr + hrefString2;
        }
        dataAttrMap.put("href",hrefStr);
        dataMap.put("attr",dataAttrMap);
        dataMap.put("title",title);
        attrMap.put("rel","Y");
        attrMap.put("id",catId);
        josonMap.put("attr",attrMap);
        josonMap.put("data",dataMap);
        resultList.add(josonMap);
      }
    }
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
    throw new GenericEntityException(e);
  }
  return resultList;
}
