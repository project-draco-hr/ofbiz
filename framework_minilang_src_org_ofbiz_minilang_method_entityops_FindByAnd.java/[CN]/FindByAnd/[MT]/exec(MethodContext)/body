{
  String entityName=methodContext.expandString(this.entityName);
  String delegatorName=methodContext.expandString(this.delegatorName);
  String useCacheStr=methodContext.expandString(this.useCacheStr);
  String useIteratorStr=methodContext.expandString(this.useIteratorStr);
  boolean useCache="true".equals(useCacheStr);
  boolean useIterator="true".equals(useIteratorStr);
  List<String> orderByNames=null;
  if (!orderByListAcsr.isEmpty()) {
    orderByNames=orderByListAcsr.get(methodContext);
  }
  GenericDelegator delegator=methodContext.getDelegator();
  if (delegatorName != null && delegatorName.length() > 0) {
    delegator=DelegatorFactory.getGenericDelegator(delegatorName);
  }
  try {
    if (useIterator) {
      EntityCondition whereCond=null;
      if (!mapAcsr.isEmpty()) {
        whereCond=EntityCondition.makeCondition(mapAcsr.get(methodContext));
      }
      listAcsr.put(methodContext,delegator.find(entityName,whereCond,null,null,orderByNames,null));
    }
 else {
      if (useCache) {
        listAcsr.put(methodContext,delegator.findByAndCache(entityName,mapAcsr.get(methodContext),orderByNames));
      }
 else {
        listAcsr.put(methodContext,delegator.findByAnd(entityName,mapAcsr.get(methodContext),orderByNames));
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [problem finding the "+ entityName+ " entity: "+ e.getMessage()+ "]";
    if (methodContext.getMethodType() == MethodContext.EVENT) {
      methodContext.putEnv(simpleMethod.getEventErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
    }
 else     if (methodContext.getMethodType() == MethodContext.SERVICE) {
      methodContext.putEnv(simpleMethod.getServiceErrorMessageName(),errMsg);
      methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
    }
    return false;
  }
  return true;
}
