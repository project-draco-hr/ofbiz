{
  Object obj=inMap.get(fieldName);
  String fieldValue=null;
  try {
    fieldValue=(String)ObjectType.simpleTypeConvert(obj,"String",null,locale);
  }
 catch (  GeneralException e) {
    messages.add("Could not convert field value for comparison: " + e.getMessage());
    return;
  }
  if (loader == null) {
    loader=Thread.currentThread().getContextClassLoader();
  }
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{fieldValue};
  Class<?> valClass;
  try {
    valClass=loader.loadClass(className);
  }
 catch (  ClassNotFoundException cnfe) {
    String msg="Could not find validation class: " + className;
    messages.add(msg);
    Debug.logError("[ValidateMethod.exec] " + msg,module);
    return;
  }
  Method valMethod;
  try {
    valMethod=valClass.getMethod(methodName,paramTypes);
  }
 catch (  NoSuchMethodException cnfe) {
    String msg="Could not find validation method: " + methodName + " of class "+ className;
    messages.add(msg);
    Debug.logError("[ValidateMethod.exec] " + msg,module);
    return;
  }
  Boolean resultBool=Boolean.FALSE;
  try {
    resultBool=(Boolean)valMethod.invoke(null,params);
  }
 catch (  Exception e) {
    String msg="Error in validation method " + methodName + " of class "+ className+ ": "+ e.getMessage();
    messages.add(msg);
    Debug.logError("[ValidateMethod.exec] " + msg,module);
    return;
  }
  if (!resultBool.booleanValue()) {
    addMessage(messages,loader,locale);
  }
}
