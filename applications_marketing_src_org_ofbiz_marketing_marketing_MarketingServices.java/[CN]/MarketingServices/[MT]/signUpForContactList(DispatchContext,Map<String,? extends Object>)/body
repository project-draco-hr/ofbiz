{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  Timestamp fromDate=UtilDateTime.nowTimestamp();
  String contactListId=(String)context.get("contactListId");
  String email=(String)context.get("email");
  String partyId=(String)context.get("partyId");
  if (!UtilValidate.isEmail(email)) {
    String error=UtilProperties.getMessage(resourceMarketing,"MarketingCampaignInvalidEmailInput",locale);
    return ServiceUtil.returnError(error);
  }
  try {
    Map<String,Object> input=UtilMisc.<String,Object>toMap("contactListId",contactListId);
    GenericValue contactList=delegator.findByPrimaryKey("ContactList",input);
    if (contactList == null) {
      String error=UtilProperties.getMessage(resourceMarketing,"MarketingContactListNotFound",input,locale);
      return ServiceUtil.returnError(error);
    }
    GenericValue userLogin=delegator.findByPrimaryKeyCache("UserLogin",UtilMisc.toMap("userLoginId","system"));
    if (partyId == null) {
      List conds=UtilMisc.toList(EntityCondition.makeCondition("infoString",EntityOperator.EQUALS,email));
      conds.add(EntityCondition.makeCondition("contactMechTypeId",EntityOperator.EQUALS,"EMAIL_ADDRESS"));
      conds.add(EntityCondition.makeCondition("contactMechPurposeTypeId",EntityOperator.EQUALS,"PRIMARY_EMAIL"));
      conds.add(EntityUtil.getFilterByDateExpr("purposeFromDate","purposeThruDate"));
      conds.add(EntityUtil.getFilterByDateExpr());
      List<GenericValue> contacts=delegator.findList("PartyContactDetailByPurpose",EntityCondition.makeCondition(conds),null,UtilMisc.toList("-fromDate"),null,false);
      if (UtilValidate.isNotEmpty(contacts)) {
        GenericValue contact=EntityUtil.getFirst(contacts);
        partyId=contact.getString("partyId");
      }
 else {
        partyId="_NA_";
      }
    }
    input=UtilMisc.toMap("userLogin",userLogin,"emailAddress",email,"partyId",partyId,"fromDate",fromDate,"contactMechPurposeTypeId","OTHER_EMAIL");
    Map<String,Object> serviceResults=dispatcher.runSync("createPartyEmailAddress",input);
    if (ServiceUtil.isError(serviceResults)) {
      throw new GenericServiceException(ServiceUtil.getErrorMessage(serviceResults));
    }
    String contactMechId=(String)serviceResults.get("contactMechId");
    input=UtilMisc.toMap("userLogin",userLogin,"contactListId",contactList.get("contactListId"),"partyId",partyId,"fromDate",fromDate,"statusId","CLPT_PENDING","preferredContactMechId",contactMechId);
    serviceResults=dispatcher.runSync("createContactListParty",input);
    if (ServiceUtil.isError(serviceResults)) {
      throw new GenericServiceException(ServiceUtil.getErrorMessage(serviceResults));
    }
  }
 catch (  GenericEntityException e) {
    String error=UtilProperties.getMessage(resourceOrder,"checkhelper.problems_reading_database",locale);
    Debug.log(e,error + e.getMessage(),module);
    return ServiceUtil.returnError(error);
  }
catch (  GenericServiceException e) {
    String error=UtilProperties.getMessage(resourceMarketing,"MarketingServiceError",locale);
    Debug.log(e,error + e.getMessage(),module);
    return ServiceUtil.returnError(error);
  }
  return ServiceUtil.returnSuccess();
}
