{
  super(treeElement);
  this.rootNodeName=treeElement.getAttribute("root-node-name");
  this.defaultRenderStyle=UtilFormatOut.checkEmpty(treeElement.getAttribute("default-render-style"),"simple");
  if (UtilValidate.isEmpty(this.defaultRenderStyle) || this.defaultRenderStyle.equals("simple")) {
    String rStyle=treeElement.getAttribute("render-style");
    if (UtilValidate.isNotEmpty(rStyle))     this.defaultRenderStyle=rStyle;
  }
  this.defaultWrapStyleExdr=FlexibleStringExpander.getInstance(treeElement.getAttribute("default-wrap-style"));
  this.expandCollapseRequestExdr=FlexibleStringExpander.getInstance(treeElement.getAttribute("expand-collapse-request"));
  this.trailNameExdr=FlexibleStringExpander.getInstance(UtilFormatOut.checkEmpty(treeElement.getAttribute("trail-name"),"trail"));
  this.delegator=delegator;
  this.dispatcher=dispatcher;
  this.forceChildCheck=!"false".equals(treeElement.getAttribute("force-child-check"));
  setDefaultEntityName(treeElement.getAttribute("entity-name"));
  try {
    openDepth=Integer.parseInt(treeElement.getAttribute("open-depth"));
  }
 catch (  NumberFormatException e) {
    openDepth=0;
  }
  try {
    postTrailOpenDepth=Integer.parseInt(treeElement.getAttribute("post-trail-open-depth"));
  }
 catch (  NumberFormatException e) {
    postTrailOpenDepth=999;
  }
  for (  Element nodeElementEntry : UtilXml.childElementList(treeElement,"node")) {
    ModelNode node=new ModelNode(nodeElementEntry,this);
    String nodeName=node.getName();
    nodeList.add(node);
    nodeMap.put(nodeName,node);
  }
  if (nodeList.size() == 0) {
    throw new IllegalArgumentException("No node elements found for the tree definition with name: " + this.name);
  }
}
