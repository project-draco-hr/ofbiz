{
  super(treeElement);
  this.location=location;
  this.rootNodeName=treeElement.getAttribute("root-node-name");
  String defaultRenderStyle=UtilXml.checkEmpty(treeElement.getAttribute("default-render-style"),"simple");
  if (defaultRenderStyle.isEmpty() || defaultRenderStyle.equals("simple")) {
    String rStyle=treeElement.getAttribute("render-style");
    if (!rStyle.isEmpty())     defaultRenderStyle=rStyle;
  }
  this.defaultRenderStyle=defaultRenderStyle;
  this.defaultWrapStyleExdr=FlexibleStringExpander.getInstance(treeElement.getAttribute("default-wrap-style"));
  this.expandCollapseRequestExdr=FlexibleStringExpander.getInstance(treeElement.getAttribute("expand-collapse-request"));
  this.trailNameExdr=FlexibleStringExpander.getInstance(UtilXml.checkEmpty(treeElement.getAttribute("trail-name"),"trail"));
  this.forceChildCheck=!"false".equals(treeElement.getAttribute("force-child-check"));
  this.defaultEntityName=treeElement.getAttribute("entity-name");
  int openDepth=0;
  if (treeElement.hasAttribute("open-depth")) {
    try {
      openDepth=Integer.parseInt(treeElement.getAttribute("open-depth"));
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Invalid open-depth attribute value for the tree definition with name: " + getName());
    }
  }
  this.openDepth=openDepth;
  int postTrailOpenDepth=999;
  if (treeElement.hasAttribute("post-trail-open-depth")) {
    try {
      postTrailOpenDepth=Integer.parseInt(treeElement.getAttribute("post-trail-open-depth"));
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Invalid post-trail-open-depth attribute value for the tree definition with name: " + getName());
    }
  }
  this.postTrailOpenDepth=postTrailOpenDepth;
  List<? extends Element> nodeElements=UtilXml.childElementList(treeElement,"node");
  if (nodeElements.size() == 0) {
    throw new IllegalArgumentException("No node elements found for the tree definition with name: " + getName());
  }
  Map<String,ModelNode> nodeMap=new HashMap<String,ModelNode>();
  for (  Element nodeElementEntry : UtilXml.childElementList(treeElement,"node")) {
    ModelNode node=new ModelNode(nodeElementEntry,this);
    String nodeName=node.getName();
    nodeMap.put(nodeName,node);
  }
  this.nodeMap=Collections.unmodifiableMap(nodeMap);
}
