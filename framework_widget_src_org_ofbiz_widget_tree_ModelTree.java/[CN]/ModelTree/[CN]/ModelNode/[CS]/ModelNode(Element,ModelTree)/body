{
  super(nodeElement);
  this.modelTree=modelTree;
  this.expandCollapseStyle=nodeElement.getAttribute("expand-collapse-style");
  this.wrapStyleExdr=FlexibleStringExpander.getInstance(nodeElement.getAttribute("wrap-style"));
  this.renderStyle=nodeElement.getAttribute("render-style");
  this.entryName=UtilFormatOut.checkEmpty(nodeElement.getAttribute("entry-name"),null);
  setEntityName(nodeElement.getAttribute("entity-name"));
  if (this.pkName == null || nodeElement.hasAttribute("join-field-name"))   this.pkName=nodeElement.getAttribute("join-field-name");
  ArrayList<ModelWidgetAction> actions=new ArrayList<ModelWidgetAction>();
  Element actionsElement=UtilXml.firstChildElement(nodeElement,"actions");
  if (actionsElement != null) {
    actions.addAll(ModelTreeAction.readNodeActions(this,actionsElement));
  }
  Element actionElement=UtilXml.firstChildElement(nodeElement,"entity-one");
  if (actionElement != null) {
    actions.add(new ModelWidgetAction.EntityOne(this,actionElement));
  }
  actionElement=UtilXml.firstChildElement(nodeElement,"service");
  if (actionElement != null) {
    actions.add(new ModelTreeAction.Service(this,actionElement));
  }
  actionElement=UtilXml.firstChildElement(nodeElement,"script");
  if (actionElement != null) {
    actions.add(new ModelTreeAction.Script(this,actionElement));
  }
  actions.trimToSize();
  this.actions=Collections.unmodifiableList(actions);
  Element screenElement=UtilXml.firstChildElement(nodeElement,"include-screen");
  if (screenElement != null) {
    this.screenNameExdr=FlexibleStringExpander.getInstance(screenElement.getAttribute("name"));
    this.screenLocationExdr=FlexibleStringExpander.getInstance(screenElement.getAttribute("location"));
    this.shareScope=screenElement.getAttribute("share-scope");
  }
  Element labelElement=UtilXml.firstChildElement(nodeElement,"label");
  if (labelElement != null) {
    this.label=new Label(labelElement);
  }
  Element linkElement=UtilXml.firstChildElement(nodeElement,"link");
  if (linkElement != null) {
    this.link=new Link(linkElement);
  }
  Element imageElement=UtilXml.firstChildElement(nodeElement,"image");
  if (imageElement != null) {
    this.image=new Image(imageElement);
  }
  Element conditionElement=UtilXml.firstChildElement(nodeElement,"condition");
  if (conditionElement != null) {
    this.condition=new ModelTreeCondition(modelTree,conditionElement);
  }
  for (  Element subNodeElementEntry : UtilXml.childElementList(nodeElement,"sub-node")) {
    ModelSubNode subNode=new ModelSubNode(subNodeElementEntry,this);
    subNodeList.add(subNode);
  }
}
