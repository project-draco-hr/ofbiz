{
  if (in == null) {
    throw new IllegalArgumentException("InputStream cannot be null");
  }
  Document doc=null;
  try {
    doc=UtilXml.readXmlDocument(in,false,"XML Properties file");
    in.close();
  }
 catch (  Exception e) {
    in.close();
    return null;
  }
  Element resourceElement=doc.getDocumentElement();
  List<? extends Element> propertyList=UtilXml.childElementList(resourceElement,"property");
  if (UtilValidate.isNotEmpty(propertyList)) {
    if (locale == null) {
      throw new IllegalArgumentException("locale cannot be null");
    }
    String localeString=locale.toString();
    for (    Element property : propertyList) {
      Element value=UtilXml.firstChildElement(property,"value","xml:lang",localeString);
      if (value != null) {
        if (properties == null) {
          properties=new Properties();
        }
        properties.put(property.getAttribute("key"),UtilXml.elementValue(value));
      }
    }
    return properties;
  }
  propertyList=UtilXml.childElementList(resourceElement,"entry");
  if (UtilValidate.isEmpty(propertyList)) {
    throw new InvalidPropertiesFormatException("XML properties file invalid or empty");
  }
  for (  Element property : propertyList) {
    String value=UtilXml.elementValue(property);
    if (value != null) {
      if (properties == null) {
        properties=new Properties();
      }
      properties.put(property.getAttribute("key"),value);
    }
  }
  return properties;
}
