{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Calendar calcCal=Calendar.getInstance();
  calcCal.setTimeInMillis(System.currentTimeMillis());
  calcCal.add(Calendar.WEEK_OF_YEAR,-1);
  Timestamp oneWeekAgo=new Timestamp(calcCal.getTimeInMillis());
  try (EntityListIterator eli=EntityQuery.use(delegator).from("OrderPaymentPreference").where(EntityCondition.makeCondition("needsNsfRetry",EntityOperator.EQUALS,"Y"),EntityCondition.makeCondition(ModelEntity.STAMP_FIELD,EntityOperator.LESS_THAN_EQUAL_TO,oneWeekAgo)).orderBy("orderId").queryIterator()){
    List<String> processList=new LinkedList<String>();
    if (eli != null) {
      Debug.logInfo("Processing failed order re-auth(s)",module);
      GenericValue value=null;
      while (((value=eli.next()) != null)) {
        String orderId=value.getString("orderId");
        if (!processList.contains(orderId)) {
          try {
            dispatcher.runAsync("retryFailedOrderAuth",UtilMisc.<String,Object>toMap("orderId",orderId,"userLogin",userLogin));
            processList.add(orderId);
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
          }
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  return ServiceUtil.returnSuccess();
}
