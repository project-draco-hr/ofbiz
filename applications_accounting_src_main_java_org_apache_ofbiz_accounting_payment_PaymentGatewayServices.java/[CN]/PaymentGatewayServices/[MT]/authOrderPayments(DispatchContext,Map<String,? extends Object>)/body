{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String orderId=(String)context.get("orderId");
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> result=new HashMap<String,Object>();
  boolean reAuth=false;
  if (context.get("reAuth") != null) {
    reAuth=((Boolean)context.get("reAuth")).booleanValue();
  }
  GenericValue orderHeader=null;
  List<GenericValue> paymentPrefs=null;
  try {
    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
    Map<String,String> lookupMap=UtilMisc.toMap("orderId",orderId,"statusId","PAYMENT_NOT_AUTH");
    List<String> orderList=UtilMisc.toList("maxAmount");
    paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where(lookupMap).orderBy(orderList).queryList();
    if (reAuth) {
      lookupMap.put("orderId",orderId);
      lookupMap.put("statusId","PAYMENT_AUTHORIZED");
      paymentPrefs.addAll(EntityQuery.use(delegator).from("OrderPaymentPreference").where(lookupMap).orderBy(orderList).queryList());
    }
  }
 catch (  GenericEntityException gee) {
    Debug.logError(gee,"Problems getting the order information",module);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not get order information (" + gee.toString() + ").");
    return result;
  }
  if (orderHeader == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  BigDecimal totalRemaining=orh.getOrderGrandTotal();
  int finished=0;
  int hadError=0;
  List<String> messages=new LinkedList<String>();
  for (  GenericValue paymentPref : paymentPrefs) {
    if (reAuth && "PAYMENT_AUTHORIZED".equals(paymentPref.getString("statusId"))) {
      String paymentConfig=null;
      GenericValue paymentSettings=getPaymentSettings(orh.getOrderHeader(),paymentPref,AUTH_SERVICE_TYPE,false);
      if (paymentSettings != null) {
        paymentConfig=paymentSettings.getString("paymentPropertiesPath");
        if (UtilValidate.isEmpty(paymentConfig)) {
          paymentConfig="payment.properties";
        }
      }
      if (PaymentGatewayServices.checkAuthValidity(paymentPref,paymentConfig)) {
        finished+=1;
        continue;
      }
    }
    Map<String,Object> authContext=new HashMap<String,Object>();
    authContext.put("orderPaymentPreferenceId",paymentPref.getString("orderPaymentPreferenceId"));
    authContext.put("userLogin",context.get("userLogin"));
    Map<String,Object> results=null;
    try {
      results=dispatcher.runSync("authOrderPaymentPreference",authContext);
    }
 catch (    GenericServiceException se) {
      Debug.logError(se,"Error in calling authOrderPaymentPreference from authOrderPayments",module);
      hadError+=1;
      messages.add("Could not authorize OrderPaymentPreference [" + paymentPref.getString("orderPaymentPreferenceId") + "] for order ["+ orderId+ "]: "+ se.toString());
      continue;
    }
    result.put("authCode",results.get("authCode"));
    if (ServiceUtil.isError(results)) {
      hadError+=1;
      messages.add("Could not authorize OrderPaymentPreference [" + paymentPref.getString("orderPaymentPreferenceId") + "] for order ["+ orderId+ "]: "+ results.get(ModelService.ERROR_MESSAGE));
      continue;
    }
    if (((Boolean)results.get("finished")).booleanValue()) {
      finished+=1;
    }
    if (((Boolean)results.get("errors")).booleanValue()) {
      hadError+=1;
    }
    if (results.get("messages") != null) {
      List<String> message=UtilGenerics.checkList(results.get("messages"));
      messages.addAll(message);
    }
    if (results.get("processAmount") != null) {
      totalRemaining=totalRemaining.subtract(((BigDecimal)results.get("processAmount")));
    }
  }
  Debug.logInfo("Finished with auth(s) checking results",module);
  result.put("authResultMsgs",messages);
  if (hadError > 0) {
    Debug.logError("Error(s) (" + hadError + ") during auth; returning ERROR",module);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put("processResult","ERROR");
    return result;
  }
 else   if (finished == paymentPrefs.size()) {
    Debug.logInfo("All auth(s) passed total remaining : " + totalRemaining,module);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put("processResult","APPROVED");
    return result;
  }
 else {
    Debug.logInfo("Only [" + finished + "/"+ paymentPrefs.size()+ "] OrderPaymentPreference authorizations passed; returning processResult=FAILED with no message so that message from ProductStore will be used",module);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put("processResult","FAILED");
    return result;
  }
}
