{
  Locale locale=(Locale)context.get("locale");
  if (!PreferenceWorker.isValidGetId(ctx,context)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"getPreference.permissionError",locale));
  }
  Delegator delegator=ctx.getDelegator();
  String userPrefGroupTypeId=(String)context.get("userPrefGroupTypeId");
  if (UtilValidate.isEmpty(userPrefGroupTypeId)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"getPreference.invalidArgument",locale));
  }
  String userLoginId=PreferenceWorker.getUserLoginId(context,false);
  Map<String,Object> userPrefMap=null;
  try {
    Map<String,String> fieldMap=UtilMisc.toMap("userLoginId","_NA_","userPrefGroupTypeId",userPrefGroupTypeId);
    userPrefMap=PreferenceWorker.createUserPrefMap(EntityQuery.use(delegator).from("UserPreference").where(fieldMap).cache(true).queryList());
    if (userLoginId != null) {
      fieldMap.put("userLoginId",userLoginId);
      userPrefMap.putAll(PreferenceWorker.createUserPrefMap(EntityQuery.use(delegator).from("UserPreference").where(fieldMap).cache(true).queryList()));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"getPreference.readFailure",new Object[]{e.getMessage()},locale));
  }
catch (  GeneralException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"getPreference.readFailure",new Object[]{e.getMessage()},locale));
  }
  Properties generalProperties=UtilProperties.getProperties("general");
  for (  Map.Entry<String,Object> pairs : userPrefMap.entrySet()) {
    if ("DEFAULT".equals(pairs.getValue())) {
      if (UtilValidate.isNotEmpty(generalProperties.get(pairs.getKey()))) {
        userPrefMap.put(pairs.getKey(),generalProperties.get(pairs.getKey()));
      }
    }
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("userPrefMap",userPrefMap);
  return result;
}
