{
  Delegator delegator=dctx.getDelegator();
  Security security=dctx.getSecurity();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  if (!security.hasPermission("ENTITY_MAINT",userLogin)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtServicePermissionNotGranted",locale));
  }
  String groupName=(String)context.get("groupName");
  Boolean fixSizes=(Boolean)context.get("fixColSizes");
  if (fixSizes == null)   fixSizes=Boolean.FALSE;
  List<String> messages=FastList.newInstance();
  GenericHelperInfo helperInfo=delegator.getGroupHelperInfo(groupName);
  DatabaseUtil dbUtil=new DatabaseUtil(helperInfo);
  Map<String,ModelEntity> modelEntities;
  try {
    modelEntities=delegator.getModelEntityMapByGroup(groupName);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting list of entities in group: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorGettingListOfEntityInGroup",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  Debug.logImportant("Removing all foreign key indices",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.deleteForeignKeyIndices(modelEntity,messages);
  }
  Debug.logImportant("Removing all foreign keys",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.deleteForeignKeys(modelEntity,modelEntities,messages);
  }
  Debug.logImportant("Removing all primary keys",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.deletePrimaryKey(modelEntity,messages);
  }
  Debug.logImportant("Removing all declared indices",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.deleteDeclaredIndices(modelEntity,messages);
  }
  if (fixSizes.booleanValue()) {
    Debug.logImportant("Updating column field size changes",module);
    List<String> fieldsWrongSize=FastList.newInstance();
    dbUtil.checkDb(modelEntities,fieldsWrongSize,messages,true,true,true,true);
    if (fieldsWrongSize.size() > 0) {
      dbUtil.repairColumnSizeChanges(modelEntities,fieldsWrongSize,messages);
    }
 else {
      String thisMsg="No field sizes to update";
      messages.add(thisMsg);
      Debug.logImportant(thisMsg,module);
    }
  }
  Debug.logImportant("Creating all primary keys",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.createPrimaryKey(modelEntity,messages);
  }
  Debug.logImportant("Creating all foreign key indices",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.createForeignKeyIndices(modelEntity,messages);
  }
  Debug.logImportant("Creating all foreign keys",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.createForeignKeys(modelEntity,modelEntities,messages);
  }
  Debug.logImportant("Creating all declared indices",module);
  for (  ModelEntity modelEntity : modelEntities.values()) {
    dbUtil.createDeclaredIndices(modelEntity,messages);
  }
  Debug.logImportant("Running DB check with add missing enabled",module);
  dbUtil.checkDb(modelEntities,messages,true);
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("messages",messages);
  return result;
}
