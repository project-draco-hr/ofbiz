{
  String entityName=this.entityNameExdr.expandString(context);
  ModelEntity modelEntity=delegator.getModelEntity(entityName);
  String useCacheString=this.useCacheExdr.expandString(context);
  boolean useCacheBool="true".equals(useCacheString);
  String autoFieldMapString=this.autoFieldMapExdr.expandString(context);
  boolean autoFieldMapBool=!"false".equals(autoFieldMapString);
  Map entityContext=new HashMap();
  if (autoFieldMapBool) {
    GenericValue tempVal=delegator.makeValue(entityName);
    Object parametersObj=context.get("parameters");
    if (parametersObj != null && parametersObj instanceof Map) {
      tempVal.setAllFields((Map)parametersObj,true,null,Boolean.TRUE);
    }
    tempVal.setAllFields(context,true,null,Boolean.TRUE);
    entityContext.putAll(tempVal);
  }
  EntityFinderUtil.expandFieldMapToContext(this.fieldMap,context,entityContext);
  modelEntity.convertFieldMapInPlace(entityContext,delegator);
  Set fieldsToSelect=EntityFinderUtil.makeFieldsToSelect(selectFieldExpanderList,context);
  if (fieldsToSelect != null && useCacheBool) {
    throw new IllegalArgumentException("Error in entity-one definition, cannot specify select-field elements when use-cache is set to true");
  }
  try {
    GenericValue valueOut=null;
    GenericPK entityPK=delegator.makePK(entityName,entityContext);
    if (entityPK.containsPrimaryKey(true)) {
      if (useCacheBool) {
        valueOut=delegator.findByPrimaryKeyCache(entityPK);
      }
 else {
        if (fieldsToSelect != null) {
          valueOut=delegator.findByPrimaryKeyPartial(entityPK,fieldsToSelect);
        }
 else {
          valueOut=delegator.findByPrimaryKey(entityPK);
        }
      }
    }
 else {
      if (Debug.infoOn())       Debug.logInfo("Returning null because found incomplete primary key in find: " + entityPK,module);
    }
    if (valueNameAcsr != null) {
      this.valueNameAcsr.put(context,valueOut);
    }
 else {
      if (valueOut != null) {
        context.putAll(valueOut);
      }
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Error finding entity value by primary key with entity-one: " + e.toString();
    Debug.logError(e,errMsg,module);
    throw new IllegalArgumentException(errMsg);
  }
}
