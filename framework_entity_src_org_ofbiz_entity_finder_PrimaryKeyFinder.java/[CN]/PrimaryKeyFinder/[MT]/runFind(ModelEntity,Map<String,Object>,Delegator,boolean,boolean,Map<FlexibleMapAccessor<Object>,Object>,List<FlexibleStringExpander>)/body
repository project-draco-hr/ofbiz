{
  Map<String,Object> entityContext=FastMap.newInstance();
  if (autoFieldMap) {
    Object parametersObj=context.get("parameters");
    if (parametersObj != null && parametersObj instanceof Map<?,?>) {
      Iterator<ModelField> iter=modelEntity.getPksIterator();
      while (iter != null && iter.hasNext()) {
        ModelField curField=iter.next();
        String fieldName=curField.getName();
        Object fieldValue=((Map<?,?>)parametersObj).get(fieldName);
        if (context.containsKey(fieldName)) {
          fieldValue=context.get(fieldName);
        }
        entityContext.put(fieldName,fieldValue);
      }
    }
  }
  EntityFinderUtil.expandFieldMapToContext(fieldMap,context,entityContext);
  entityContext.put("locale",context.get("locale"));
  entityContext.put("timeZone",context.get("timeZone"));
  modelEntity.convertFieldMapInPlace(entityContext,delegator);
  entityContext.remove("locale");
  entityContext.remove("timeZone");
  Set<String> fieldsToSelect=EntityFinderUtil.makeFieldsToSelect(selectFieldExpanderList,context);
  if (fieldsToSelect != null && useCache) {
    throw new IllegalArgumentException("Error in entity-one definition, cannot specify select-field elements when use-cache is set to true");
  }
  try {
    GenericValue valueOut=null;
    GenericPK entityPK=delegator.makePK(modelEntity.getEntityName(),entityContext);
    if (entityPK.containsPrimaryKey(true)) {
      if (useCache) {
        valueOut=delegator.findOne(entityPK.getEntityName(),entityPK,true);
      }
 else {
        if (fieldsToSelect != null) {
          valueOut=delegator.findByPrimaryKeyPartial(entityPK,fieldsToSelect);
        }
 else {
          valueOut=delegator.findOne(entityPK.getEntityName(),entityPK,false);
        }
      }
    }
 else {
      if (Debug.infoOn())       Debug.logInfo("Returning null because found incomplete primary key in find: " + entityPK,module);
    }
    return valueOut;
  }
 catch (  GenericEntityException e) {
    String errMsg="Error finding entity value by primary key with entity-one: " + e.toString();
    Debug.logError(e,errMsg,module);
    throw new GeneralException(errMsg,e);
  }
}
