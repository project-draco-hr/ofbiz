{
  if (packageElement == null)   return;
  if (!"Package".equals(packageElement.getTagName()))   throw new DefinitionParserException("Tried to make Package from element not named Package");
  GenericValue packageValue=delegator.makeValue("WorkflowPackage",null);
  values.add(packageValue);
  String packageId=packageElement.getAttribute("Id");
  packageValue.set("packageId",packageId);
  packageValue.set("packageName",packageElement.getAttribute("Name"));
  Element packageHeaderElement=UtilXml.firstChildElement(packageElement,"PackageHeader");
  if (packageHeaderElement != null) {
    packageValue.set("specificationId","XPDL");
    packageValue.set("specificationVersion",UtilXml.childElementValue(packageHeaderElement,"XPDLVersion"));
    packageValue.set("sourceVendorInfo",UtilXml.childElementValue(packageHeaderElement,"Vendor"));
    String createdStr=UtilXml.childElementValue(packageHeaderElement,"Created");
    if (createdStr != null) {
      try {
        packageValue.set("creationDateTime",java.sql.Timestamp.valueOf(createdStr));
      }
 catch (      IllegalArgumentException e) {
        throw new DefinitionParserException("Invalid Date-Time format in Package->Created: " + createdStr,e);
      }
    }
    packageValue.set("description",UtilXml.childElementValue(packageHeaderElement,"Description"));
    packageValue.set("documentationUrl",UtilXml.childElementValue(packageHeaderElement,"Documentation"));
    packageValue.set("priorityUomId",UtilXml.childElementValue(packageHeaderElement,"PriorityUnit"));
    packageValue.set("costUomId",UtilXml.childElementValue(packageHeaderElement,"CostUnit"));
  }
  Element redefinableHeaderElement=UtilXml.firstChildElement(packageElement,"RedefinableHeader");
  boolean packageOk=readRedefinableHeader(redefinableHeaderElement,packageValue,"package");
  String packageVersion=packageValue.getString("packageVersion");
  if (packageOk) {
    Element conformanceClassElement=UtilXml.firstChildElement(packageElement,"ConformanceClass");
    if (conformanceClassElement != null) {
      packageValue.set("graphConformanceEnumId","WGC_" + conformanceClassElement.getAttribute("GraphConformance"));
    }
    Element participantsElement=UtilXml.firstChildElement(packageElement,"Participants");
    List participants=UtilXml.childElementList(participantsElement,"Participant");
    readParticipants(participants,packageId,packageVersion,"_NA_","_NA_",packageValue);
    Element externalPackagesElement=UtilXml.firstChildElement(packageElement,"ExternalPackages");
    List externalPackages=UtilXml.childElementList(externalPackagesElement,"ExternalPackage");
    readExternalPackages(externalPackages,packageId,packageVersion);
    Element typeDeclarationsElement=UtilXml.firstChildElement(packageElement,"TypeDeclarations");
    List typeDeclarations=UtilXml.childElementList(typeDeclarationsElement,"TypeDeclaration");
    readTypeDeclarations(typeDeclarations,packageId,packageVersion);
    Element applicationsElement=UtilXml.firstChildElement(packageElement,"Applications");
    List applications=UtilXml.childElementList(applicationsElement,"Application");
    readApplications(applications,packageId,packageVersion,"_NA_","_NA_");
    Element dataFieldsElement=UtilXml.firstChildElement(packageElement,"DataFields");
    List dataFields=UtilXml.childElementList(dataFieldsElement,"DataField");
    readDataFields(dataFields,packageId,packageVersion,"_NA_","_NA_");
  }
 else {
    values=new LinkedList();
  }
  Element workflowProcessesElement=UtilXml.firstChildElement(packageElement,"WorkflowProcesses");
  List workflowProcesses=UtilXml.childElementList(workflowProcessesElement,"WorkflowProcess");
  readWorkflowProcesses(workflowProcesses,packageId,packageVersion);
}
