{
  int size=5;
  long ttl=2000;
  UtilCache<String,Serializable> cache=createUtilCache(size,size,ttl,false,false);
  Map<String,Serializable> map=new HashMap<String,Serializable>();
  for (int i=0; i < size; i++) {
    String s=Integer.toString(i);
    assertKey(s,cache,s,new String(s),new String(":" + s),i + 1,map);
  }
  cache.setMaxInMemory(2);
  assertEquals("cache.size",2,cache.size());
  map.keySet().retainAll(cache.getCacheLineKeys());
  assertEquals("map-keys",map.keySet(),cache.getCacheLineKeys());
  assertEquals("map-values",map.values(),cache.values());
  cache.setMaxInMemory(0);
  assertEquals("map-keys",map.keySet(),cache.getCacheLineKeys());
  assertEquals("map-values",map.values(),cache.values());
  for (int i=size * 2; i < size * 3; i++) {
    String s=Integer.toString(i);
    assertKey(s,cache,s,new String(s),new String(":" + s),i - size * 2 + 3,map);
  }
  cache.setMaxInMemory(0);
  assertEquals("map-keys",map.keySet(),cache.getCacheLineKeys());
  assertEquals("map-values",map.values(),cache.values());
  cache.setMaxInMemory(size);
  for (int i=0; i < size * 2; i++) {
    map.remove(Integer.toString(i));
  }
  assertEquals("map-keys",map.keySet().size(),cache.getCacheLineKeys().size());
  assertEquals("map-values",map.values().size(),cache.values().size());
}
