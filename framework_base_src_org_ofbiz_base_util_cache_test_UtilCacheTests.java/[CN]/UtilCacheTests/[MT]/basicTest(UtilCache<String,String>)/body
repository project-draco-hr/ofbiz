{
  Listener<String,String> gotListener=createListener(cache);
  Listener<String,String> wantedListener=new Listener<String,String>();
  for (int i=0; i < 2; i++) {
    assertTrue("UtilCacheTable.keySet",UtilCache.getUtilCacheTableKeySet().contains(cache.getName()));
    assertSame("UtilCache.findCache",cache,UtilCache.findCache(cache.getName()));
    assertSame("UtilCache.getOrCreateUtilCache",cache,UtilCache.getOrCreateUtilCache(cache.getName(),cache.getSizeLimit(),cache.getMaxInMemory(),cache.getExpireTime(),cache.getUseSoftReference(),cache.getUseFileSystemStore()));
    assertNoSingleKey(cache,"one");
    long origByteSize=cache.getSizeInBytes();
    wantedListener.noteKeyAddition(cache,null,"null");
    assertNull("put",cache.put(null,"null"));
    assertHasSingleKey(cache,null,"null");
    long nullByteSize=cache.getSizeInBytes();
    assertThat(nullByteSize,greaterThan(origByteSize));
    wantedListener.noteKeyRemoval(cache,null,"null");
    assertEquals("remove","null",cache.remove(null));
    assertNoSingleKey(cache,null);
    wantedListener.noteKeyAddition(cache,"one","uno");
    assertNull("put",cache.put("one","uno"));
    assertHasSingleKey(cache,"one","uno");
    long unoByteSize=cache.getSizeInBytes();
    assertThat(unoByteSize,greaterThan(origByteSize));
    wantedListener.noteKeyUpdate(cache,"one","single","uno");
    assertEquals("replace","uno",cache.put("one","single"));
    assertHasSingleKey(cache,"one","single");
    long singleByteSize=cache.getSizeInBytes();
    assertThat(singleByteSize,greaterThan(origByteSize));
    assertThat(singleByteSize,greaterThan(unoByteSize));
    wantedListener.noteKeyRemoval(cache,"one","single");
    assertEquals("remove","single",cache.remove("one"));
    assertNoSingleKey(cache,"one");
    assertEquals("byteSize",origByteSize,cache.getSizeInBytes());
    wantedListener.noteKeyAddition(cache,"one","uno");
    assertNull("put",cache.put("one","uno"));
    assertHasSingleKey(cache,"one","uno");
    wantedListener.noteKeyUpdate(cache,"one","only","uno");
    assertEquals("replace","uno",cache.put("one","only"));
    assertHasSingleKey(cache,"one","only");
    wantedListener.noteKeyRemoval(cache,"one","only");
    assertEquals("remove","only",cache.remove("one"));
    assertNoSingleKey(cache,"one");
    assertEquals("byteSize",origByteSize,cache.getSizeInBytes());
    cache.setExpireTime(100);
    wantedListener.noteKeyAddition(cache,"one","uno");
    assertNull("put",cache.put("one","uno"));
    assertHasSingleKey(cache,"one","uno");
    wantedListener.noteKeyRemoval(cache,"one","uno");
    Thread.sleep(200);
    assertNoSingleKey(cache,"one");
  }
  assertEquals("get-miss",10,cache.getMissCountNotFound());
  assertEquals("get-miss-total",10,cache.getMissCountTotal());
  assertEquals("get-hit",12,cache.getHitCount());
  assertEquals("remove-hit",6,cache.getRemoveHitCount());
  assertEquals("remove-miss",10,cache.getRemoveMissCount());
  cache.removeListener(gotListener);
  assertEquals("listener",wantedListener,gotListener);
  cache.clear();
}
