{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String partyId=null;
  if (security.hasEntityPermission("PARTYMGR","_ROLE_CREATE",userLogin)) {
    partyId=(String)context.get("partyId");
  }
 else {
    partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_CREATE");
  }
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  if (result.size() > 0)   return result;
  GenericValue partyRole=delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId",context.get("roleTypeId")));
  try {
    if (delegator.findByPrimaryKey(partyRole.getPrimaryKey()) != null) {
      errMsg=UtilProperties.getMessage(resource,"partyroleservices.could_not_create_party_role_exists",locale);
      return ServiceUtil.returnError(errMsg);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"partyroleservices.could_not_create_party_role_read",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  try {
    partyRole.create();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"partyroleservices.could_not_create_party_role_write",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
