{
  ManagedDataSource mds=(ManagedDataSource)dsCache.get(helperName);
  if (mds != null) {
    return TransactionFactory.getCursorConnection(helperName,mds.getConnection());
  }
synchronized (DBCPConnectionFactory.class) {
    mds=(ManagedDataSource)dsCache.get(helperName);
    if (mds != null) {
      return TransactionFactory.getCursorConnection(helperName,mds.getConnection());
    }
    TransactionManager txMgr=TransactionFactory.getTransactionManager();
    String driverName=jotmJdbcElement.getAttribute("jdbc-driver");
    String dbUri=jotmJdbcElement.getAttribute("jdbc-uri");
    String dbUser=jotmJdbcElement.getAttribute("jdbc-username");
    String dbPass=jotmJdbcElement.getAttribute("jdbc-password");
    int maxSize, minSize;
    try {
      maxSize=Integer.parseInt(jotmJdbcElement.getAttribute("pool-maxsize"));
    }
 catch (    NumberFormatException nfe) {
      Debug.logError("Problems with pool settings [pool-maxsize=" + jotmJdbcElement.getAttribute("pool-maxsize") + "]; the values MUST be numbers, using default of 20.",module);
      maxSize=20;
    }
catch (    Exception e) {
      Debug.logError(e,"Problems with pool settings",module);
      maxSize=20;
    }
    try {
      minSize=Integer.parseInt(jotmJdbcElement.getAttribute("pool-minsize"));
    }
 catch (    NumberFormatException nfe) {
      Debug.logError("Problems with pool settings [pool-minsize=" + jotmJdbcElement.getAttribute("pool-minsize") + "]; the values MUST be numbers, using default of 5.",module);
      minSize=2;
    }
catch (    Exception e) {
      Debug.logError(e,"Problems with pool settings",module);
      minSize=2;
    }
    int maxIdle=maxSize / 2;
    maxIdle=maxIdle > minSize ? maxIdle : minSize;
    System.setProperty("jdbc.drivers",driverName);
    Driver jdbcDriver=DriverManager.getDriver(dbUri);
    Properties cfProps=new Properties();
    cfProps.put("user",dbUser);
    cfProps.put("password",dbPass);
    ConnectionFactory cf=new DriverConnectionFactory(jdbcDriver,dbUri,cfProps);
    XAConnectionFactory xacf=new LocalXAConnectionFactory(txMgr,cf);
    GenericObjectPool pool=new GenericObjectPool();
    pool.setTimeBetweenEvictionRunsMillis(600000);
    pool.setMaxActive(maxSize);
    pool.setMaxIdle(maxIdle);
    pool.setMinIdle(minSize);
    pool.setMaxWait(120000);
    PoolableConnectionFactory factory=new PoolableConnectionFactory(xacf,pool,null,null,true,true);
    factory.setValidationQuery("select example_type_id from example_type limit 1");
    String transIso=jotmJdbcElement.getAttribute("isolation-level");
    if (transIso != null && transIso.length() > 0) {
      if ("Serializable".equals(transIso)) {
        factory.setDefaultTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
      }
 else       if ("RepeatableRead".equals(transIso)) {
        factory.setDefaultTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
      }
 else       if ("ReadUncommitted".equals(transIso)) {
        factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
      }
 else       if ("ReadCommitted".equals(transIso)) {
        factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
      }
 else       if ("None".equals(transIso)) {
        factory.setDefaultTransactionIsolation(Connection.TRANSACTION_NONE);
      }
    }
    pool.setFactory(factory);
    mds=new ManagedDataSource(pool,xacf.getTransactionRegistry());
    mds.setAccessToUnderlyingConnectionAllowed(true);
    dsCache.put(helperName,mds);
    return TransactionFactory.getCursorConnection(helperName,mds.getConnection());
  }
}
