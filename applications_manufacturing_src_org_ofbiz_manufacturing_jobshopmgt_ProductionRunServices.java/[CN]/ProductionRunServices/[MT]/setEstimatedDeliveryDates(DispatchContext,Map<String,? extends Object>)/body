{
  Delegator delegator=ctx.getDelegator();
  Timestamp now=UtilDateTime.nowTimestamp();
  Locale locale=(Locale)context.get("locale");
  Map<String,TreeMap<Timestamp,Object>> products=FastMap.newInstance();
  try {
    List<GenericValue> resultList=delegator.findByAnd("WorkEffortAndGoods",UtilMisc.toMap("workEffortGoodStdTypeId","PRUN_PROD_DELIV","statusId","WEGS_CREATED","workEffortTypeId","PROD_ORDER_HEADER"),null,false);
    for (    GenericValue genericResult : resultList) {
      if ("PRUN_CLOSED".equals(genericResult.getString("currentStatusId")) || "PRUN_CREATED".equals(genericResult.getString("currentStatusId"))) {
        continue;
      }
      BigDecimal qtyToProduce=genericResult.getBigDecimal("quantityToProduce");
      if (qtyToProduce == null) {
        qtyToProduce=BigDecimal.ZERO;
      }
      BigDecimal qtyProduced=genericResult.getBigDecimal("quantityProduced");
      if (qtyProduced == null) {
        qtyProduced=BigDecimal.ZERO;
      }
      if (qtyProduced.compareTo(qtyToProduce) >= 0) {
        continue;
      }
      BigDecimal qtyDiff=qtyToProduce.subtract(qtyProduced);
      String productId=genericResult.getString("productId");
      Timestamp estimatedShipDate=genericResult.getTimestamp("estimatedCompletionDate");
      if (estimatedShipDate == null) {
        estimatedShipDate=now;
      }
      if (!products.containsKey(productId)) {
        products.put(productId,new TreeMap<Timestamp,Object>());
      }
      TreeMap<Timestamp,Object> productMap=products.get(productId);
      if (!productMap.containsKey(estimatedShipDate)) {
        productMap.put(estimatedShipDate,UtilMisc.<String,Object>toMap("remainingQty",BigDecimal.ZERO,"reservations",FastList.newInstance()));
      }
      Map<String,Object> dateMap=UtilGenerics.checkMap(productMap.get(estimatedShipDate));
      BigDecimal remainingQty=(BigDecimal)dateMap.get("remainingQty");
      remainingQty=remainingQty.add(qtyDiff);
      dateMap.put("remainingQty",remainingQty);
    }
    resultList=delegator.findByAnd("OrderHeaderAndItems",UtilMisc.toMap("orderTypeId","PURCHASE_ORDER","itemStatusId","ITEM_APPROVED"),UtilMisc.toList("orderId"),false);
    String orderId=null;
    GenericValue orderDeliverySchedule=null;
    for (    GenericValue genericResult : resultList) {
      String newOrderId=genericResult.getString("orderId");
      if (!newOrderId.equals(orderId)) {
        orderDeliverySchedule=null;
        orderId=newOrderId;
        try {
          orderDeliverySchedule=delegator.findOne("OrderDeliverySchedule",UtilMisc.toMap("orderId",orderId,"orderItemSeqId","_NA_"),false);
        }
 catch (        GenericEntityException e) {
        }
      }
      String productId=genericResult.getString("productId");
      BigDecimal orderQuantity=genericResult.getBigDecimal("quantity");
      GenericValue orderItemDeliverySchedule=null;
      try {
        orderItemDeliverySchedule=delegator.findOne("OrderDeliverySchedule",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",genericResult.getString("orderItemSeqId")),false);
      }
 catch (      GenericEntityException e) {
      }
      Timestamp estimatedShipDate=null;
      if (orderItemDeliverySchedule != null && orderItemDeliverySchedule.get("estimatedReadyDate") != null) {
        estimatedShipDate=orderItemDeliverySchedule.getTimestamp("estimatedReadyDate");
      }
 else       if (orderDeliverySchedule != null && orderDeliverySchedule.get("estimatedReadyDate") != null) {
        estimatedShipDate=orderDeliverySchedule.getTimestamp("estimatedReadyDate");
      }
 else {
        estimatedShipDate=genericResult.getTimestamp("estimatedDeliveryDate");
      }
      if (estimatedShipDate == null) {
        estimatedShipDate=now;
      }
      if (!products.containsKey(productId)) {
        products.put(productId,new TreeMap<Timestamp,Object>());
      }
      TreeMap<Timestamp,Object> productMap=products.get(productId);
      if (!productMap.containsKey(estimatedShipDate)) {
        productMap.put(estimatedShipDate,UtilMisc.toMap("remainingQty",BigDecimal.ZERO,"reservations",FastList.newInstance()));
      }
      Map<String,Object> dateMap=UtilGenerics.checkMap(productMap.get(estimatedShipDate));
      BigDecimal remainingQty=(BigDecimal)dateMap.get("remainingQty");
      remainingQty=remainingQty.add(orderQuantity);
      dateMap.put("remainingQty",remainingQty);
    }
    List<EntityCondition> backordersCondList=FastList.newInstance();
    backordersCondList.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.NOT_EQUAL,null));
    backordersCondList.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.GREATER_THAN,BigDecimal.ZERO));
    List<GenericValue> backorders=delegator.findList("OrderItemAndShipGrpInvResAndItem",EntityCondition.makeCondition(backordersCondList,EntityOperator.AND),null,UtilMisc.toList("shipBeforeDate"),null,false);
    for (    GenericValue genericResult : backorders) {
      String productId=genericResult.getString("productId");
      GenericValue orderItemShipGroup=delegator.findOne("OrderItemShipGroup",UtilMisc.toMap("orderId",genericResult.get("orderId"),"shipGroupSeqId",genericResult.get("shipGroupSeqId")),false);
      Timestamp requiredByDate=orderItemShipGroup.getTimestamp("shipByDate");
      BigDecimal quantityNotAvailable=genericResult.getBigDecimal("quantityNotAvailable");
      BigDecimal quantityNotAvailableRem=quantityNotAvailable;
      if (requiredByDate == null) {
        requiredByDate=now;
      }
      if (!products.containsKey(productId)) {
        continue;
      }
      TreeMap<Timestamp,Object> productMap=products.get(productId);
      SortedMap<Timestamp,Object> subsetMap=productMap.headMap(requiredByDate);
      for (      Timestamp currentDate : subsetMap.keySet()) {
        Map<String,Object> currentDateMap=UtilGenerics.checkMap(subsetMap.get(currentDate));
        BigDecimal remainingQty=(BigDecimal)currentDateMap.get("remainingQty");
        if (remainingQty.compareTo(ZERO) == 0) {
          continue;
        }
        if (remainingQty.compareTo(quantityNotAvailableRem) >= 0) {
          remainingQty=remainingQty.subtract(quantityNotAvailableRem);
          currentDateMap.put("remainingQty",remainingQty);
          GenericValue orderItemShipGrpInvRes=delegator.findOne("OrderItemShipGrpInvRes",UtilMisc.toMap("orderId",genericResult.getString("orderId"),"shipGroupSeqId",genericResult.getString("shipGroupSeqId"),"orderItemSeqId",genericResult.getString("orderItemSeqId"),"inventoryItemId",genericResult.getString("inventoryItemId")),false);
          orderItemShipGrpInvRes.set("promisedDatetime",currentDate);
          orderItemShipGrpInvRes.store();
          break;
        }
 else {
          quantityNotAvailableRem=quantityNotAvailableRem.subtract(remainingQty);
          remainingQty=BigDecimal.ZERO;
          currentDateMap.put("remainingQty",remainingQty);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunErrorRunningSetEstimatedDeliveryDates",locale));
  }
  return ServiceUtil.returnSuccess();
}
