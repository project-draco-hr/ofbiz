{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String requirementId=(String)context.get("requirementId");
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  GenericValue requirement=null;
  try {
    requirement=delegator.findOne("Requirement",UtilMisc.toMap("requirementId",requirementId),false);
  }
 catch (  GenericEntityException gee) {
  }
  if (requirement == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRequirementNotExists",locale));
  }
  if (!"INTERNAL_REQUIREMENT".equals(requirement.getString("requirementTypeId"))) {
    return ServiceUtil.returnSuccess();
  }
  if (quantity == null) {
    quantity=requirement.getBigDecimal("quantity");
  }
  Map<String,Object> serviceContext=FastMap.newInstance();
  serviceContext.clear();
  serviceContext.put("productId",requirement.getString("productId"));
  serviceContext.put("quantity",quantity);
  serviceContext.put("startDate",requirement.getTimestamp("requirementStartDate"));
  serviceContext.put("facilityId",requirement.getString("facilityId"));
  String workEffortName=null;
  if (requirement.getString("description") != null) {
    workEffortName=requirement.getString("description");
    if (workEffortName.length() > 50) {
      workEffortName=workEffortName.substring(0,50);
    }
  }
 else {
    workEffortName="Created from requirement " + requirement.getString("requirementId");
  }
  serviceContext.put("workEffortName",workEffortName);
  serviceContext.put("userLogin",userLogin);
  Map<String,Object> resultService=null;
  try {
    resultService=dispatcher.runSync("createProductionRunsForProductBom",serviceContext);
  }
 catch (  GenericServiceException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotCreated",locale) + ": " + e.getMessage());
  }
  if (ServiceUtil.isError(resultService)) {
    return ServiceUtil.returnError(ServiceUtil.getErrorMessage(resultService));
  }
  String productionRunId=(String)resultService.get("productionRunId");
  result.put("productionRunId",productionRunId);
  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunCreated",UtilMisc.toMap("productionRunId",productionRunId),locale));
  return result;
}
