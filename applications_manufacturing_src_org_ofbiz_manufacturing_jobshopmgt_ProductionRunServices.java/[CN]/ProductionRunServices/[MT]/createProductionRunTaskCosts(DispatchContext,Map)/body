{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunTaskId=(String)context.get("productionRunTaskId");
  try {
    GenericValue workEffort=delegator.findByPrimaryKey("WorkEffort",UtilMisc.toMap("workEffortId",productionRunTaskId));
    if (UtilValidate.isEmpty(workEffort)) {
      return ServiceUtil.returnError("Cannot find the production run task with id [" + productionRunTaskId + "]");
    }
    double actualTotalMilliSeconds=0.0;
    Double actualSetupMillis=workEffort.getDouble("actualSetupMillis");
    Double actualMilliSeconds=workEffort.getDouble("actualMilliSeconds");
    if (actualSetupMillis != null) {
      actualTotalMilliSeconds+=actualSetupMillis.doubleValue();
    }
    if (actualMilliSeconds != null) {
      actualTotalMilliSeconds+=actualMilliSeconds.doubleValue();
    }
    List routingTasks=EntityUtil.filterByDate(delegator.findByAnd("WorkEffortAssoc",UtilMisc.toMap("workEffortIdTo",productionRunTaskId,"workEffortAssocTypeId","WORK_EFF_TEMPLATE")));
    GenericValue routingTask=EntityUtil.getFirst(routingTasks);
    List workEffortCostCalcs=null;
    if (UtilValidate.isEmpty(routingTask)) {
      workEffortCostCalcs=delegator.findByAnd("WorkEffortCostCalc",UtilMisc.toMap("workEffortId",productionRunTaskId));
    }
 else {
      workEffortCostCalcs=delegator.findByAnd("WorkEffortCostCalc",UtilMisc.toMap("workEffortId",routingTask.getString("workEffortIdFrom")));
    }
    workEffortCostCalcs=EntityUtil.filterByDate(workEffortCostCalcs);
    Iterator workEffortCostCalcsIt=workEffortCostCalcs.iterator();
    while (workEffortCostCalcsIt.hasNext()) {
      GenericValue workEffortCostCalc=(GenericValue)workEffortCostCalcsIt.next();
      GenericValue costComponentCalc=workEffortCostCalc.getRelatedOne("CostComponentCalc");
      GenericValue customMethod=costComponentCalc.getRelatedOne("CustomMethod");
      if (UtilValidate.isEmpty(customMethod) || UtilValidate.isEmpty(customMethod.getString("customMethodName"))) {
        double totalTime=actualTotalMilliSeconds;
        if (costComponentCalc.get("perMilliSecond") != null) {
          long perMilliSecond=costComponentCalc.getLong("perMilliSecond").longValue();
          if (perMilliSecond != 0) {
            totalTime=totalTime / perMilliSecond;
          }
        }
        BigDecimal fixedCost=costComponentCalc.getBigDecimal("fixedCost");
        BigDecimal variableCost=costComponentCalc.getBigDecimal("variableCost");
        if (fixedCost == null) {
          fixedCost=BigDecimal.ZERO;
        }
        if (variableCost == null) {
          variableCost=BigDecimal.ZERO;
        }
        BigDecimal totalCost=fixedCost.add(variableCost.multiply(BigDecimal.valueOf(totalTime))).setScale(decimals,rounding);
        Map inMap=UtilMisc.toMap("userLogin",userLogin,"workEffortId",productionRunTaskId);
        inMap.put("costComponentTypeId","ACTUAL_" + workEffortCostCalc.getString("costComponentTypeId"));
        inMap.put("costComponentCalcId",costComponentCalc.getString("costComponentCalcId"));
        inMap.put("costUomId",costComponentCalc.getString("currencyUomId"));
        inMap.put("cost",totalCost);
        dispatcher.runSync("createCostComponent",inMap);
      }
 else {
        Map inMap=UtilMisc.toMap("userLogin",userLogin,"workEffort",workEffort);
        inMap.put("workEffortCostCalc",workEffortCostCalc);
        inMap.put("costComponentCalc",costComponentCalc);
        dispatcher.runSync(customMethod.getString("customMethodName"),inMap);
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError("Unable to create routing costs for the production run task [" + productionRunTaskId + "]: "+ e.getMessage());
  }
  try {
    Iterator inventoryAssignIt=delegator.findByAnd("WorkEffortAndInventoryAssign",UtilMisc.toMap("workEffortId",productionRunTaskId)).iterator();
    Map materialsCostByCurrency=FastMap.newInstance();
    while (inventoryAssignIt.hasNext()) {
      GenericValue inventoryConsumed=(GenericValue)inventoryAssignIt.next();
      BigDecimal quantity=inventoryConsumed.getBigDecimal("quantity");
      BigDecimal unitCost=inventoryConsumed.getBigDecimal("unitCost");
      if (UtilValidate.isEmpty(unitCost) || UtilValidate.isEmpty(quantity)) {
        continue;
      }
      String currencyUomId=inventoryConsumed.getString("currencyUomId");
      if (!materialsCostByCurrency.containsKey(currencyUomId)) {
        materialsCostByCurrency.put(currencyUomId,BigDecimal.ZERO);
      }
      BigDecimal materialsCost=(BigDecimal)materialsCostByCurrency.get(currencyUomId);
      materialsCost=materialsCost.add(unitCost.multiply(quantity)).setScale(decimals,rounding);
      materialsCostByCurrency.put(currencyUomId,materialsCost);
    }
    Iterator currencyIt=materialsCostByCurrency.keySet().iterator();
    while (currencyIt.hasNext()) {
      String currencyUomId=(String)currencyIt.next();
      BigDecimal materialsCost=(BigDecimal)materialsCostByCurrency.get(currencyUomId);
      Map inMap=UtilMisc.toMap("userLogin",userLogin,"workEffortId",productionRunTaskId);
      inMap.put("costComponentTypeId","ACTUAL_MAT_COST");
      inMap.put("costUomId",currencyUomId);
      inMap.put("cost",materialsCost);
      dispatcher.runSync("createCostComponent",inMap);
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError("Unable to create materials costs for the production run task [" + productionRunTaskId + "]: "+ e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
