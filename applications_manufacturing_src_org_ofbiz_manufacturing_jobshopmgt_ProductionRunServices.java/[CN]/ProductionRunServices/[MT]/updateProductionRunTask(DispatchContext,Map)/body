{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunId=(String)context.get("productionRunId");
  String workEffortId=(String)context.get("productionRunTaskId");
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId)) {
    partyId=userLogin.getString("partyId");
  }
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  Timestamp toDate=(Timestamp)context.get("toDate");
  Double addQuantityProduced=(Double)context.get("addQuantityProduced");
  Double addQuantityRejected=(Double)context.get("addQuantityRejected");
  Double addSetupTime=(Double)context.get("addSetupTime");
  Double addTaskTime=(Double)context.get("addTaskTime");
  String comments=(String)context.get("comments");
  Boolean issueRequiredComponents=(Boolean)context.get("issueRequiredComponents");
  if (issueRequiredComponents == null) {
    issueRequiredComponents=Boolean.FALSE;
  }
  if (fromDate == null) {
    fromDate=UtilDateTime.nowTimestamp();
  }
  if (toDate == null) {
    toDate=UtilDateTime.nowTimestamp();
  }
  if (addQuantityProduced == null) {
    addQuantityProduced=new Double(0);
  }
  if (addQuantityRejected == null) {
    addQuantityRejected=new Double(0);
  }
  if (addSetupTime == null) {
    addSetupTime=new Double(0);
  }
  if (addTaskTime == null) {
    addTaskTime=new Double(0);
  }
  if (comments == null) {
    comments="";
  }
  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);
  if (!productionRun.exist()) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotExists",locale));
  }
  List tasks=productionRun.getProductionRunRoutingTasks();
  GenericValue theTask=null;
  GenericValue oneTask=null;
  for (int i=0; i < tasks.size(); i++) {
    oneTask=(GenericValue)tasks.get(i);
    if (oneTask.getString("workEffortId").equals(workEffortId)) {
      theTask=oneTask;
      break;
    }
  }
  if (theTask == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunTaskNotExists",locale));
  }
  String currentStatusId=theTask.getString("currentStatusId");
  if (!currentStatusId.equals("PRUN_RUNNING")) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunTaskNotRunning",locale));
  }
  Double actualMilliSeconds=theTask.getDouble("actualMilliSeconds");
  if (actualMilliSeconds == null) {
    actualMilliSeconds=new Double(0);
  }
  Double actualSetupMillis=theTask.getDouble("actualSetupMillis");
  if (actualSetupMillis == null) {
    actualSetupMillis=new Double(0);
  }
  Double quantityProduced=theTask.getDouble("quantityProduced");
  if (quantityProduced == null) {
    quantityProduced=new Double(0);
  }
  Double quantityRejected=theTask.getDouble("quantityRejected");
  if (quantityRejected == null) {
    quantityRejected=new Double(0);
  }
  double totalMillis=actualMilliSeconds.doubleValue() + addTaskTime.doubleValue();
  double totalSetupMillis=actualSetupMillis.doubleValue() + addSetupTime.doubleValue();
  double totalQuantityProduced=quantityProduced.doubleValue() + addQuantityProduced.doubleValue();
  double totalQuantityRejected=quantityRejected.doubleValue() + addQuantityRejected.doubleValue();
  if (issueRequiredComponents.booleanValue() && addQuantityProduced.doubleValue() > 0) {
    Double quantityToProduce=theTask.getDouble("quantityToProduce");
    if (quantityToProduce == null) {
      quantityToProduce=new Double(0);
    }
    if (quantityToProduce.doubleValue() > 0) {
      try {
        List<GenericValue> components=theTask.getRelated("WorkEffortGoodStandard");
        for (        GenericValue component : components) {
          double totalRequiredMaterialQuantity=component.getDouble("estimatedQuantity").doubleValue() * totalQuantityProduced / quantityToProduce.doubleValue();
          List<GenericValue> issuances=delegator.findByAnd("WorkEffortAndInventoryAssign",UtilMisc.toMap("workEffortId",workEffortId,"productId",component.getString("productId")));
          double totalIssued=0.0;
          for (          GenericValue issuance : issuances) {
            Double issued=issuance.getDouble("quantity");
            if (issued != null) {
              totalIssued+=issued.doubleValue();
            }
          }
          double requiredQuantity=totalRequiredMaterialQuantity - totalIssued;
          if (requiredQuantity > 0) {
            Map serviceContext=UtilMisc.toMap("workEffortId",workEffortId,"productId",component.getString("productId"),"fromDate",component.getTimestamp("fromDate"));
            serviceContext.put("quantity",new Double(requiredQuantity));
            serviceContext.put("userLogin",userLogin);
            Map resultService=dispatcher.runSync("issueProductionRunTaskComponent",serviceContext);
          }
        }
      }
 catch (      GenericEntityException gee) {
      }
catch (      GenericServiceException gee) {
      }
    }
  }
  try {
    String timeEntryId=delegator.getNextSeqId("TimeEntry");
    Map timeEntryFields=UtilMisc.toMap("timeEntryId",timeEntryId,"workEffortId",workEffortId);
    Double totalTime=new Double(addSetupTime.doubleValue() + addTaskTime.doubleValue());
    timeEntryFields.put("partyId",partyId);
    timeEntryFields.put("fromDate",fromDate);
    timeEntryFields.put("thruDate",toDate);
    timeEntryFields.put("hours",totalTime);
    timeEntryFields.put("comments",comments);
    GenericValue timeEntry=delegator.makeValue("TimeEntry",timeEntryFields);
    timeEntry.create();
    Map serviceContext=new HashMap();
    serviceContext.clear();
    serviceContext.put("workEffortId",workEffortId);
    serviceContext.put("actualMilliSeconds",new Double(totalMillis));
    serviceContext.put("actualSetupMillis",new Double(totalSetupMillis));
    serviceContext.put("quantityProduced",new Double(totalQuantityProduced));
    serviceContext.put("quantityRejected",new Double(totalQuantityRejected));
    serviceContext.put("userLogin",userLogin);
    Map resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
  }
 catch (  Exception exc) {
    return ServiceUtil.returnError(exc.getMessage());
  }
  return result;
}
