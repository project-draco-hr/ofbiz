{
  Map result=ServiceUtil.returnSuccess();
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Security security=ctx.getSecurity();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunId=(String)context.get("productionRunId");
  String taskId=(String)context.get("taskId");
  try {
    Map serviceContext=new HashMap();
    Map resultService=null;
    GenericValue task=delegator.findByPrimaryKey("WorkEffort",UtilMisc.toMap("workEffortId",taskId));
    String currentStatusId=task.getString("currentStatusId");
    String prevStatusId="";
    while (!"PRUN_COMPLETED".equals(currentStatusId)) {
      serviceContext.put("productionRunId",productionRunId);
      serviceContext.put("workEffortId",taskId);
      serviceContext.put("issueAllComponents",new Boolean(true));
      serviceContext.put("userLogin",userLogin);
      resultService=dispatcher.runSync("changeProductionRunTaskStatus",serviceContext);
      currentStatusId=(String)resultService.get("newStatusId");
      if (currentStatusId.equals(prevStatusId)) {
        return ServiceUtil.returnError("Unable to progress from status [" + prevStatusId + "] for task ["+ taskId+ "]");
      }
 else {
        prevStatusId=currentStatusId;
      }
      serviceContext.clear();
    }
  }
 catch (  Exception e) {
    Debug.logError(e,"Problem calling the changeProductionRunTaskStatus service",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
  }
  return result;
}
