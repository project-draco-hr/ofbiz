{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Security security=ctx.getSecurity();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunId=(String)context.get("productionRunId");
  String routingTaskId=(String)context.get("routingTaskId");
  if (!UtilValidate.isEmpty(productionRunId) && !UtilValidate.isEmpty(routingTaskId)) {
    ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);
    if (productionRun.exist()) {
      if (!productionRun.getGenericValue().getString("currentStatusId").equals("PRUN_CREATED")) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunPrinted",locale));
      }
      Timestamp estimatedStartDate=(Timestamp)context.get("estimatedStartDate");
      Timestamp pRestimatedStartDate=productionRun.getEstimatedStartDate();
      if (pRestimatedStartDate.after(estimatedStartDate)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingTaskStartDateBeforePRun",locale));
      }
      Long priority=(Long)context.get("priority");
      List pRRoutingTasks=productionRun.getProductionRunRoutingTasks();
      boolean first=true;
      for (Iterator iter=pRRoutingTasks.iterator(); iter.hasNext(); ) {
        GenericValue routingTask=(GenericValue)iter.next();
        if (priority.equals(routingTask.get("priority")) && !routingTaskId.equals(routingTask.get("workEffortId")))         return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingTaskSeqIdAlreadyExist",locale));
        if (routingTaskId.equals(routingTask.get("workEffortId"))) {
          routingTask.set("estimatedSetupMillis",context.get("estimatedSetupMillis"));
          routingTask.set("estimatedMilliSeconds",context.get("estimatedMilliSeconds"));
          if (first) {
            if (!estimatedStartDate.equals(pRestimatedStartDate)) {
              productionRun.setEstimatedStartDate(estimatedStartDate);
            }
          }
          if (!priority.equals(routingTask.get("priority"))) {
            routingTask.set("priority",priority);
            if (!productionRun.store()) {
              Debug.logError("productionRun.store(), in routingTask.priority update, fail for productionRunId =" + productionRunId,module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));
            }
            productionRun.clearRoutingTasksList();
          }
        }
        if (first)         first=false;
      }
      productionRun.setEstimatedCompletionDate(productionRun.recalculateEstimatedCompletionDate(priority,estimatedStartDate));
      if (productionRun.store()) {
        return ServiceUtil.returnSuccess();
      }
 else {
        Debug.logError("productionRun.store() fail for productionRunId =" + productionRunId,module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));
      }
    }
    Debug.logError("no productionRun for productionRunId =" + productionRunId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));
  }
  Debug.logError("service updateProductionRun call with productionRunId empty",module);
  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));
}
