{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Timestamp now=UtilDateTime.nowTimestamp();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String inventoryItemId=(String)context.get("inventoryItemId");
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  List<String> inventoryItemIds=FastList.newInstance();
  try {
    GenericValue inventoryItem=EntityQuery.use(delegator).from("InventoryItem").where("inventoryItemId",inventoryItemId).queryOne();
    if (inventoryItem == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunCannotDecomposingInventoryItem",UtilMisc.toMap("inventoryItemId",inventoryItemId),locale));
    }
    Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("workEffortTypeId","TASK","workEffortPurposeTypeId","WEPT_PRODUCTION_RUN","currentStatusId","CAL_COMPLETED");
    serviceContext.put("workEffortName","Decomposing product [" + inventoryItem.getString("productId") + "] inventory item ["+ inventoryItem.getString("inventoryItemId")+ "]");
    serviceContext.put("facilityId",inventoryItem.getString("facilityId"));
    serviceContext.put("estimatedStartDate",now);
    serviceContext.put("userLogin",userLogin);
    Map<String,Object> resultService=dispatcher.runSync("createWorkEffort",serviceContext);
    String workEffortId=(String)resultService.get("workEffortId");
    serviceContext.clear();
    serviceContext=UtilMisc.toMap("inventoryItem",inventoryItem,"workEffortId",workEffortId,"userLogin",userLogin);
    if (quantity != null) {
      serviceContext.put("quantity",quantity);
    }
    resultService=dispatcher.runSync("issueInventoryItemToWorkEffort",serviceContext);
    BigDecimal issuedQuantity=(BigDecimal)resultService.get("quantityIssued");
    if (issuedQuantity.compareTo(ZERO) == 0) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunCannotDecomposingInventoryItemNoMarketingPackagesFound",UtilMisc.toMap("inventoryItemId",inventoryItem.getString("inventoryItemId")),locale));
    }
    serviceContext.clear();
    serviceContext=UtilMisc.toMap("productId",inventoryItem.getString("productId"),"currencyUomId",inventoryItem.getString("currencyUomId"),"costComponentTypePrefix","EST_STD","userLogin",userLogin);
    resultService=dispatcher.runSync("getProductCost",serviceContext);
    BigDecimal packageCost=(BigDecimal)resultService.get("productCost");
    BigDecimal inventoryItemCost=inventoryItem.getBigDecimal("unitCost");
    BigDecimal costCoefficient=null;
    if (packageCost == null || packageCost.compareTo(ZERO) == 0 || inventoryItemCost == null) {
      costCoefficient=BigDecimal.ONE;
    }
 else {
      costCoefficient=inventoryItemCost.divide(packageCost,10,rounding);
    }
    serviceContext.clear();
    serviceContext=UtilMisc.toMap("productId",inventoryItem.getString("productId"),"quantity",issuedQuantity,"userLogin",userLogin);
    resultService=dispatcher.runSync("getManufacturingComponents",serviceContext);
    List<Map<String,Object>> components=UtilGenerics.checkList(resultService.get("componentsMap"));
    if (UtilValidate.isEmpty(components)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunCannotDecomposingInventoryItemNoComponentsFound",UtilMisc.toMap("productId",inventoryItem.getString("productId")),locale));
    }
    for (    Map<String,Object> component : components) {
      serviceContext.clear();
      serviceContext=UtilMisc.toMap("productId",((GenericValue)component.get("product")).getString("productId"),"currencyUomId",inventoryItem.getString("currencyUomId"),"costComponentTypePrefix","EST_STD","userLogin",userLogin);
      resultService=dispatcher.runSync("getProductCost",serviceContext);
      BigDecimal componentCost=(BigDecimal)resultService.get("productCost");
      BigDecimal componentInventoryItemCost=costCoefficient.multiply(componentCost);
      serviceContext.clear();
      serviceContext=UtilMisc.toMap("productId",((GenericValue)component.get("product")).getString("productId"),"quantity",component.get("quantity"),"facilityId",inventoryItem.getString("facilityId"),"unitCost",componentInventoryItemCost,"userLogin",userLogin);
      serviceContext.put("workEffortId",workEffortId);
      resultService=dispatcher.runSync("productionRunTaskProduce",serviceContext);
      List<String> newInventoryItemIds=UtilGenerics.checkList(resultService.get("inventoryItemIds"));
      inventoryItemIds.addAll(newInventoryItemIds);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem calling the createWorkEffort service",module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException e) {
    Debug.logError(e,"Problem calling the createWorkEffort service",module);
    return ServiceUtil.returnError(e.getMessage());
  }
  result.put("inventoryItemIds",inventoryItemIds);
  return result;
}
