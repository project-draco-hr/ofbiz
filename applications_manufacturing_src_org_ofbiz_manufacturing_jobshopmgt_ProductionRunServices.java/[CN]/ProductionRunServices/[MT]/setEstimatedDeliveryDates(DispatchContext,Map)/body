{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Timestamp now=UtilDateTime.nowTimestamp();
  Map products=FastMap.newInstance();
  try {
    List resultList=delegator.findByAnd("WorkEffortAndGoods",UtilMisc.toMap("workEffortGoodStdTypeId","PRUN_PROD_DELIV","statusId","WEGS_CREATED","workEffortTypeId","PROD_ORDER_HEADER"));
    Iterator iteratorResult=resultList.iterator();
    while (iteratorResult.hasNext()) {
      GenericValue genericResult=(GenericValue)iteratorResult.next();
      if ("PRUN_CLOSED".equals(genericResult.getString("currentStatusId")) || "PRUN_CREATED".equals(genericResult.getString("currentStatusId"))) {
        continue;
      }
      Double qtyToProduce=genericResult.getDouble("quantityToProduce");
      if (qtyToProduce == null) {
        qtyToProduce=new Double(0);
      }
      Double qtyProduced=genericResult.getDouble("quantityProduced");
      if (qtyProduced == null) {
        qtyProduced=new Double(0);
      }
      if (qtyProduced.compareTo(qtyToProduce) >= 0) {
        continue;
      }
      double qtyDiff=qtyToProduce.doubleValue() - qtyProduced.doubleValue();
      String productId=genericResult.getString("productId");
      Timestamp estimatedShipDate=genericResult.getTimestamp("estimatedCompletionDate");
      if (estimatedShipDate == null) {
        estimatedShipDate=now;
      }
      if (!products.containsKey(productId)) {
        products.put(productId,new TreeMap());
      }
      TreeMap productMap=(TreeMap)products.get(productId);
      if (!productMap.containsKey(estimatedShipDate)) {
        productMap.put(estimatedShipDate,UtilMisc.toMap("remainingQty",new Double(0.0),"reservations",FastList.newInstance()));
      }
      Map dateMap=(Map)productMap.get(estimatedShipDate);
      Double remainingQty=(Double)dateMap.get("remainingQty");
      remainingQty=new Double(remainingQty.doubleValue() + qtyDiff);
      dateMap.put("remainingQty",remainingQty);
    }
    resultList=delegator.findByAnd("OrderHeaderAndItems",UtilMisc.toMap("orderTypeId","PURCHASE_ORDER","itemStatusId","ITEM_APPROVED"),UtilMisc.toList("orderId"));
    iteratorResult=resultList.iterator();
    String orderId=null;
    GenericValue orderDeliverySchedule=null;
    while (iteratorResult.hasNext()) {
      GenericValue genericResult=(GenericValue)iteratorResult.next();
      String newOrderId=genericResult.getString("orderId");
      if (!newOrderId.equals(orderId)) {
        orderDeliverySchedule=null;
        orderId=newOrderId;
        try {
          orderDeliverySchedule=delegator.findByPrimaryKey("OrderDeliverySchedule",UtilMisc.toMap("orderId",orderId,"orderItemSeqId","_NA_"));
        }
 catch (        GenericEntityException e) {
        }
      }
      String productId=genericResult.getString("productId");
      double orderQuantity=genericResult.getDouble("quantity").doubleValue();
      GenericValue orderItemDeliverySchedule=null;
      try {
        orderItemDeliverySchedule=delegator.findByPrimaryKey("OrderDeliverySchedule",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",genericResult.getString("orderItemSeqId")));
      }
 catch (      GenericEntityException e) {
      }
      Timestamp estimatedShipDate=null;
      if (orderItemDeliverySchedule != null && orderItemDeliverySchedule.get("estimatedReadyDate") != null) {
        estimatedShipDate=orderItemDeliverySchedule.getTimestamp("estimatedReadyDate");
      }
 else       if (orderDeliverySchedule != null && orderDeliverySchedule.get("estimatedReadyDate") != null) {
        estimatedShipDate=orderDeliverySchedule.getTimestamp("estimatedReadyDate");
      }
 else {
        estimatedShipDate=genericResult.getTimestamp("estimatedDeliveryDate");
      }
      if (estimatedShipDate == null) {
        estimatedShipDate=now;
      }
      if (!products.containsKey(productId)) {
        products.put(productId,new TreeMap());
      }
      TreeMap productMap=(TreeMap)products.get(productId);
      if (!productMap.containsKey(estimatedShipDate)) {
        productMap.put(estimatedShipDate,UtilMisc.toMap("remainingQty",new Double(0.0),"reservations",FastList.newInstance()));
      }
      Map dateMap=(Map)productMap.get(estimatedShipDate);
      Double remainingQty=(Double)dateMap.get("remainingQty");
      remainingQty=new Double(remainingQty.doubleValue() + orderQuantity);
      dateMap.put("remainingQty",remainingQty);
    }
    List backordersCondList=FastList.newInstance();
    backordersCondList.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.NOT_EQUAL,null));
    backordersCondList.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.GREATER_THAN,new Double(0.0)));
    List backorders=delegator.findList("OrderItemAndShipGrpInvResAndItem",EntityCondition.makeCondition(backordersCondList,EntityOperator.AND),null,UtilMisc.toList("shipBeforeDate"),null,false);
    Iterator backordersIt=backorders.iterator();
    while (backordersIt.hasNext()) {
      GenericValue genericResult=(GenericValue)backordersIt.next();
      String productId=genericResult.getString("productId");
      GenericValue orderItemShipGroup=delegator.findByPrimaryKey("OrderItemShipGroup",UtilMisc.toMap("orderId",genericResult.get("orderId"),"shipGroupSeqId",genericResult.get("shipGroupSeqId")));
      Timestamp requiredByDate=orderItemShipGroup.getTimestamp("shipByDate");
      Double quantityNotAvailable=genericResult.getDouble("quantityNotAvailable");
      double quantityNotAvailableRem=quantityNotAvailable.doubleValue();
      if (requiredByDate == null) {
        requiredByDate=now;
      }
      if (!products.containsKey(productId)) {
        continue;
      }
      TreeMap productMap=(TreeMap)products.get(productId);
      SortedMap subsetMap=productMap.headMap(requiredByDate);
      Iterator subsetMapKeysIt=subsetMap.keySet().iterator();
      while (subsetMapKeysIt.hasNext()) {
        Timestamp currentDate=(Timestamp)subsetMapKeysIt.next();
        Map currentDateMap=(Map)subsetMap.get(currentDate);
        Double remainingQty=(Double)currentDateMap.get("remainingQty");
        if (remainingQty.doubleValue() == 0) {
          continue;
        }
        if (remainingQty.doubleValue() >= quantityNotAvailableRem) {
          remainingQty=new Double(remainingQty.doubleValue() - quantityNotAvailableRem);
          currentDateMap.put("remainingQty",remainingQty);
          GenericValue orderItemShipGrpInvRes=delegator.findByPrimaryKey("OrderItemShipGrpInvRes",UtilMisc.toMap("orderId",genericResult.getString("orderId"),"shipGroupSeqId",genericResult.getString("shipGroupSeqId"),"orderItemSeqId",genericResult.getString("orderItemSeqId"),"inventoryItemId",genericResult.getString("inventoryItemId")));
          orderItemShipGrpInvRes.set("promisedDatetime",currentDate);
          orderItemShipGrpInvRes.store();
          break;
        }
 else {
          quantityNotAvailableRem=quantityNotAvailableRem - remainingQty.doubleValue();
          remainingQty=new Double(0.0);
          currentDateMap.put("remainingQty",remainingQty);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error",module);
    return ServiceUtil.returnError("Problem running the setEstimatedDeliveryDates service");
  }
  return ServiceUtil.returnSuccess();
}
