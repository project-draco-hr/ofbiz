{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunId=(String)context.get("productionRunId");
  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);
  if (!productionRun.exist()) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotExists",locale));
  }
  String currentStatusId=productionRun.getGenericValue().getString("currentStatusId");
  if (currentStatusId.equals("PRUN_CREATED") || currentStatusId.equals("PRUN_DOC_PRINTED") || currentStatusId.equals("PRUN_SCHEDULED")) {
    try {
      List<ProductionRun> mandatoryWorkEfforts=FastList.newInstance();
      ProductionRunHelper.getLinkedProductionRuns(delegator,dispatcher,productionRunId,mandatoryWorkEfforts);
      for (int i=1; i < mandatoryWorkEfforts.size(); i++) {
        GenericValue mandatoryWorkEffort=(mandatoryWorkEfforts.get(i)).getGenericValue();
        if (!(mandatoryWorkEffort.getString("currentStatusId").equals("PRUN_CANCELLED"))) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChangedMandatoryProductionRunFound",locale));
        }
      }
      Map<String,Object> serviceContext=FastMap.newInstance();
      serviceContext.put("workEffortId",productionRunId);
      serviceContext.put("currentStatusId","PRUN_CANCELLED");
      serviceContext.put("userLogin",userLogin);
      dispatcher.runSync("updateWorkEffort",serviceContext);
      List<GenericValue> products=delegator.findByAnd("WorkEffortGoodStandard",UtilMisc.toMap("workEffortId",productionRunId,"workEffortGoodStdTypeId","PRUN_PROD_DELIV","statusId","WEGS_CREATED"));
      if (!UtilValidate.isEmpty(products)) {
        for (        GenericValue product : products) {
          product.set("statusId","WEGS_CANCELLED");
          product.store();
        }
      }
      List<GenericValue> tasks=productionRun.getProductionRunRoutingTasks();
      String taskId=null;
      for (      GenericValue oneTask : tasks) {
        taskId=oneTask.getString("workEffortId");
        serviceContext.clear();
        serviceContext.put("workEffortId",taskId);
        serviceContext.put("currentStatusId","PRUN_CANCELLED");
        serviceContext.put("userLogin",userLogin);
        dispatcher.runSync("updateWorkEffort",serviceContext);
        List<GenericValue> components=delegator.findByAnd("WorkEffortGoodStandard",UtilMisc.toMap("workEffortId",taskId,"workEffortGoodStdTypeId","PRUNT_PROD_NEEDED","statusId","WEGS_CREATED"));
        if (!UtilValidate.isEmpty(components)) {
          for (          GenericValue component : components) {
            component.set("statusId","WEGS_CANCELLED");
            component.store();
          }
        }
      }
    }
 catch (    Exception e) {
      Debug.logError(e,"Problem calling the updateWorkEffort service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
    }
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_DOC_PRINTED"),locale));
    return result;
  }
  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunCannotBeCancelled",locale));
}
