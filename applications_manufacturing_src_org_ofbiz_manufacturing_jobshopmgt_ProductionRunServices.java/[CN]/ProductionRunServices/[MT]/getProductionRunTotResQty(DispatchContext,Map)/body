{
  Map result=ServiceUtil.returnSuccess();
  GenericDelegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productId=(String)context.get("productId");
  Timestamp startDate=(Timestamp)context.get("startDate");
  if (startDate == null) {
    startDate=UtilDateTime.nowTimestamp();
  }
  double totQty=0.0;
  try {
    List findOutgoingProductionRunsConds=new LinkedList();
    findOutgoingProductionRunsConds.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));
    findOutgoingProductionRunsConds.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"WEGS_CREATED"));
    findOutgoingProductionRunsConds.add(EntityCondition.makeCondition("estimatedStartDate",EntityOperator.LESS_THAN_EQUAL_TO,startDate));
    List findOutgoingProductionRunsStatusConds=new LinkedList();
    findOutgoingProductionRunsStatusConds.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.EQUALS,"PRUN_CREATED"));
    findOutgoingProductionRunsStatusConds.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.EQUALS,"PRUN_SCHEDULED"));
    findOutgoingProductionRunsStatusConds.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.EQUALS,"PRUN_DOC_PRINTED"));
    findOutgoingProductionRunsStatusConds.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.EQUALS,"PRUN_RUNNING"));
    findOutgoingProductionRunsConds.add(EntityCondition.makeCondition(findOutgoingProductionRunsStatusConds,EntityOperator.OR));
    List outgoingProductionRuns=delegator.findList("WorkEffortAndGoods",EntityCondition.makeCondition(findOutgoingProductionRunsConds,EntityOperator.AND),null,UtilMisc.toList("-estimatedStartDate"),null,false);
    if (outgoingProductionRuns != null) {
      for (int i=0; i < outgoingProductionRuns.size(); i++) {
        GenericValue outgoingProductionRun=(GenericValue)outgoingProductionRuns.get(i);
        Double dblQty=outgoingProductionRun.getDouble("estimatedQuantity");
        double qty=(dblQty != null ? dblQty.doubleValue() : 0.0);
        totQty+=qty;
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem calling the getProductionRunTotResQty service",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionResQtyCalc",locale));
  }
  result.put("reservedQuantity",new Double(totQty));
  return result;
}
