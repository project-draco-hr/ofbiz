{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunTaskId=(String)context.get("workEffortId");
  String productId=(String)context.get("productId");
  Double quantity=(Double)context.get("quantity");
  String facilityId=(String)context.get("facilityId");
  String currencyUomId=(String)context.get("currencyUomId");
  Double unitCost=(Double)context.get("unitCost");
  String inventoryItemTypeId=(String)context.get("inventoryItemTypeId");
  if (UtilValidate.isEmpty(inventoryItemTypeId)) {
    inventoryItemTypeId="NON_SERIAL_INV_ITEM";
  }
  if (facilityId == null) {
    ProductionRun productionRun=new ProductionRun(productionRunTaskId,delegator,dispatcher);
    facilityId=productionRun.getGenericValue().getString("facilityId");
  }
  List inventoryItemIds=new ArrayList();
  if ("SERIALIZED_INV_ITEM".equals(inventoryItemTypeId)) {
    try {
      int numOfItems=quantity.intValue();
      for (int i=0; i < numOfItems; i++) {
        Map serviceContext=UtilMisc.toMap("productId",productId,"inventoryItemTypeId","SERIALIZED_INV_ITEM","statusId","INV_AVAILABLE");
        serviceContext.put("facilityId",facilityId);
        serviceContext.put("datetimeReceived",UtilDateTime.nowDate());
        serviceContext.put("comments","Created by production run task " + productionRunTaskId);
        if (unitCost != null) {
          serviceContext.put("unitCost",unitCost);
          serviceContext.put("currencyUomId",currencyUomId);
        }
        serviceContext.put("userLogin",userLogin);
        Map resultService=dispatcher.runSync("createInventoryItem",serviceContext);
        String inventoryItemId=(String)resultService.get("inventoryItemId");
        serviceContext.clear();
        serviceContext.put("inventoryItemId",inventoryItemId);
        serviceContext.put("workEffortId",productionRunTaskId);
        serviceContext.put("availableToPromiseDiff",new Double(1));
        serviceContext.put("quantityOnHandDiff",new Double(1));
        serviceContext.put("userLogin",userLogin);
        resultService=dispatcher.runSync("createInventoryItemDetail",serviceContext);
        serviceContext.clear();
        serviceContext.put("workEffortId",productionRunTaskId);
        serviceContext.put("inventoryItemId",inventoryItemId);
        resultService=dispatcher.runSync("createWorkEffortInventoryProduced",serviceContext);
        inventoryItemIds.add(inventoryItemId);
        serviceContext=new HashMap();
        serviceContext.put("inventoryItemId",inventoryItemId);
        serviceContext.put("userLogin",userLogin);
        resultService=dispatcher.runSync("balanceInventoryItems",serviceContext);
      }
    }
 catch (    Exception exc) {
      return ServiceUtil.returnError(exc.getMessage());
    }
  }
 else {
    try {
      Map serviceContext=UtilMisc.toMap("productId",productId,"inventoryItemTypeId","NON_SERIAL_INV_ITEM");
      serviceContext.put("facilityId",facilityId);
      serviceContext.put("datetimeReceived",UtilDateTime.nowTimestamp());
      serviceContext.put("comments","Created by production run task " + productionRunTaskId);
      if (unitCost != null) {
        serviceContext.put("unitCost",unitCost);
        serviceContext.put("currencyUomId",currencyUomId);
      }
      serviceContext.put("userLogin",userLogin);
      Map resultService=dispatcher.runSync("createInventoryItem",serviceContext);
      String inventoryItemId=(String)resultService.get("inventoryItemId");
      serviceContext.clear();
      serviceContext.put("inventoryItemId",inventoryItemId);
      serviceContext.put("workEffortId",productionRunTaskId);
      serviceContext.put("availableToPromiseDiff",quantity);
      serviceContext.put("quantityOnHandDiff",quantity);
      serviceContext.put("userLogin",userLogin);
      resultService=dispatcher.runSync("createInventoryItemDetail",serviceContext);
      serviceContext.clear();
      serviceContext.put("workEffortId",productionRunTaskId);
      serviceContext.put("inventoryItemId",inventoryItemId);
      resultService=dispatcher.runSync("createWorkEffortInventoryProduced",serviceContext);
      inventoryItemIds.add(inventoryItemId);
      serviceContext=new HashMap();
      serviceContext.put("inventoryItemId",inventoryItemId);
      serviceContext.put("userLogin",userLogin);
      resultService=dispatcher.runSync("balanceInventoryItems",serviceContext);
    }
 catch (    Exception exc) {
      return ServiceUtil.returnError(exc.getMessage());
    }
  }
  result.put("inventoryItemIds",inventoryItemIds);
  return result;
}
