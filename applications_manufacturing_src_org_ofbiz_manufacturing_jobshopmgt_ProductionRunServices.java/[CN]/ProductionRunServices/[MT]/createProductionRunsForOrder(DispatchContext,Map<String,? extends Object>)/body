{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  String shipGroupSeqId=(String)context.get("shipGroupSeqId");
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  String fromDateStr=(String)context.get("fromDate");
  Date fromDate=null;
  if (UtilValidate.isNotEmpty(fromDateStr)) {
    try {
      fromDate=Timestamp.valueOf(fromDateStr);
    }
 catch (    Exception e) {
    }
  }
  if (fromDate == null) {
    fromDate=new Date();
  }
  List<GenericValue> orderItems=null;
  if (orderItemSeqId != null) {
    try {
      GenericValue orderItem=null;
      if (UtilValidate.isNotEmpty(shipGroupSeqId)) {
        orderItem=delegator.findByPrimaryKey("OrderItemShipGroupAssoc",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId));
      }
 else {
        orderItem=delegator.findByPrimaryKey("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
      }
      if (orderItem == null) {
        return ServiceUtil.returnError("OrderItem [" + orderItemSeqId + "] not found.");
      }
      if (quantity != null) {
        orderItem.set("quantity",quantity);
      }
      orderItems=UtilMisc.toList(orderItem);
    }
 catch (    GenericEntityException gee) {
      return ServiceUtil.returnError("Error reading the OrderItem: " + gee.getMessage());
    }
  }
 else {
    try {
      orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId));
      if (orderItems == null) {
        return ServiceUtil.returnError("OrderItems for order [" + orderId + "] not found.");
      }
    }
 catch (    GenericEntityException gee) {
      return ServiceUtil.returnError("Error reading the OrderItems: " + gee.getMessage());
    }
  }
  List<String> productionRuns=FastList.newInstance();
  for (int i=0; i < orderItems.size(); i++) {
    GenericValue orderItemOrShipGroupAssoc=(GenericValue)orderItems.get(i);
    String productId=null;
    BigDecimal amount=null;
    GenericValue orderItem=null;
    if ("OrderItemShipGroupAssoc".equals(orderItemOrShipGroupAssoc.getEntityName())) {
      try {
        orderItem=orderItemOrShipGroupAssoc.getRelatedOne("OrderItem");
      }
 catch (      GenericEntityException gee) {
        Debug.logInfo("Unable to find order item for " + orderItemOrShipGroupAssoc,module);
      }
    }
 else {
      orderItem=orderItemOrShipGroupAssoc;
    }
    if (orderItem == null || orderItem.get("productId") == null) {
      continue;
    }
 else {
      productId=orderItem.getString("productId");
    }
    if (orderItem.get("selectedAmount") != null) {
      amount=orderItem.getBigDecimal("selectedAmount");
    }
    if (amount == null) {
      amount=BigDecimal.ZERO;
    }
    if (orderItemOrShipGroupAssoc.get("quantity") != null) {
      quantity=orderItemOrShipGroupAssoc.getBigDecimal("quantity");
    }
 else {
      continue;
    }
    try {
      List<GenericValue> existingProductionRuns=null;
      if (UtilValidate.isNotEmpty(shipGroupSeqId)) {
        existingProductionRuns=delegator.findByAndCache("WorkOrderItemFulfillment",UtilMisc.toMap("orderId",orderItemOrShipGroupAssoc.getString("orderId"),"orderItemSeqId",orderItemOrShipGroupAssoc.getString("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId));
      }
 else {
        existingProductionRuns=delegator.findByAndCache("WorkOrderItemFulfillment",UtilMisc.toMap("orderId",orderItemOrShipGroupAssoc.getString("orderId"),"orderItemSeqId",orderItemOrShipGroupAssoc.getString("orderItemSeqId")));
      }
      if (UtilValidate.isNotEmpty(existingProductionRuns)) {
        Debug.logWarning("Production Run for order item [" + orderItemOrShipGroupAssoc.getString("orderId") + "/"+ orderItemOrShipGroupAssoc.getString("orderItemSeqId")+ "] and ship group ["+ shipGroupSeqId+ "] already exists.",module);
        continue;
      }
    }
 catch (    GenericEntityException gee) {
      return ServiceUtil.returnError("Error reading the WorkOrderItemFulfillment: " + gee.getMessage());
    }
    try {
      List<BOMNode> components=FastList.newInstance();
      BOMTree tree=new BOMTree(productId,"MANUF_COMPONENT",fromDate,BOMTree.EXPLOSION_MANUFACTURING,delegator,dispatcher,userLogin);
      tree.setRootQuantity(quantity);
      tree.setRootAmount(amount);
      tree.print(components);
      productionRuns.add(tree.createManufacturingOrders(null,fromDate,null,null,null,orderId,orderItem.getString("orderItemSeqId"),shipGroupSeqId,shipmentId,userLogin));
    }
 catch (    GenericEntityException gee) {
      return ServiceUtil.returnError("Error creating bill of materials tree: " + gee.getMessage());
    }
  }
  result.put("productionRuns",productionRuns);
  return result;
}
