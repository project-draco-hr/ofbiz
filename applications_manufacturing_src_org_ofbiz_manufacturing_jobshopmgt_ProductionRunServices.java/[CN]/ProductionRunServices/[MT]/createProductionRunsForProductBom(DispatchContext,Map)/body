{
  Map result=new HashMap();
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productId=(String)context.get("productId");
  Timestamp startDate=(Timestamp)context.get("startDate");
  Double quantity=(Double)context.get("quantity");
  String facilityId=(String)context.get("facilityId");
  String workEffortName=(String)context.get("workEffortName");
  String description=(String)context.get("description");
  String routingId=(String)context.get("routingId");
  String workEffortId=null;
  if (quantity == null) {
    quantity=new Double(1.0);
  }
  try {
    ArrayList components=new ArrayList();
    BOMTree tree=new BOMTree(productId,"MANUF_COMPONENT",startDate,BOMTree.EXPLOSION_MANUFACTURING,delegator,dispatcher,userLogin);
    tree.setRootQuantity(quantity.doubleValue());
    tree.setRootAmount(0.0);
    tree.print(components);
    workEffortId=tree.createManufacturingOrders(facilityId,startDate,workEffortName,description,routingId,null,null,null,userLogin);
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError("Error creating bill of materials tree: " + gee.getMessage());
  }
  if (workEffortId == null) {
    return ServiceUtil.returnError("No production run is required for product with id [" + productId + "] in date ["+ startDate+ "]; please verify the validity dates of the bill of materials and routing.");
  }
  ArrayList productionRuns=new ArrayList();
  result.put("productionRuns",productionRuns);
  result.put("productionRunId",workEffortId);
  return result;
}
