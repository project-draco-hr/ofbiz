{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunId=(String)context.get("productionRunId");
  String statusId=(String)context.get("statusId");
  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);
  if (!productionRun.exist()) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotExists",locale));
  }
  String currentStatusId=productionRun.getGenericValue().getString("currentStatusId");
  if (statusId != null && currentStatusId.equals(statusId)) {
    result.put("newStatusId",currentStatusId);
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId",currentStatusId),locale));
    return result;
  }
  if (currentStatusId.equals("PRUN_CREATED") && statusId.equals("PRUN_SCHEDULED")) {
    Map serviceContext=new HashMap();
    serviceContext.clear();
    serviceContext.put("workEffortId",productionRunId);
    serviceContext.put("currentStatusId",statusId);
    serviceContext.put("userLogin",userLogin);
    Map resultService=null;
    try {
      resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem calling the updateWorkEffort service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
    }
    Iterator tasks=productionRun.getProductionRunRoutingTasks().iterator();
    while (tasks.hasNext()) {
      GenericValue task=(GenericValue)tasks.next();
      serviceContext.clear();
      serviceContext.put("workEffortId",task.getString("workEffortId"));
      serviceContext.put("currentStatusId",statusId);
      serviceContext.put("userLogin",userLogin);
      resultService=null;
      try {
        resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem calling the updateWorkEffort service",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
      }
    }
    result.put("newStatusId",statusId);
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_CLOSED"),locale));
    return result;
  }
  if ((currentStatusId.equals("PRUN_CREATED") || currentStatusId.equals("PRUN_SCHEDULED")) && (statusId == null || statusId.equals("PRUN_DOC_PRINTED"))) {
    Map serviceContext=new HashMap();
    serviceContext.clear();
    serviceContext.put("workEffortId",productionRunId);
    serviceContext.put("currentStatusId","PRUN_DOC_PRINTED");
    serviceContext.put("userLogin",userLogin);
    Map resultService=null;
    try {
      resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem calling the updateWorkEffort service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
    }
    result.put("newStatusId","PRUN_DOC_PRINTED");
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_DOC_PRINTED"),locale));
    return result;
  }
  if (currentStatusId.equals("PRUN_DOC_PRINTED") && (statusId == null || statusId.equals("PRUN_RUNNING"))) {
    try {
      List mandatoryWorkEfforts=EntityUtil.filterByDate(delegator.findByAnd("WorkEffortAssoc",UtilMisc.toMap("workEffortIdTo",productionRunId,"workEffortAssocTypeId","WORK_EFF_PRECEDENCY")));
      for (int i=0; i < mandatoryWorkEfforts.size(); i++) {
        GenericValue mandatoryWorkEffortAssoc=(GenericValue)mandatoryWorkEfforts.get(i);
        GenericValue mandatoryWorkEffort=mandatoryWorkEffortAssoc.getRelatedOne("FromWorkEffort");
        if (!(mandatoryWorkEffort.getString("currentStatusId").equals("PRUN_COMPLETED") || mandatoryWorkEffort.getString("currentStatusId").equals("PRUN_CLOSED"))) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChangedMandatoryProductionRunNotCompleted",locale));
        }
      }
    }
 catch (    GenericEntityException gee) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
    }
    Map serviceContext=new HashMap();
    serviceContext.clear();
    serviceContext.put("workEffortId",productionRunId);
    serviceContext.put("currentStatusId","PRUN_RUNNING");
    serviceContext.put("actualStartDate",UtilDateTime.nowTimestamp());
    serviceContext.put("userLogin",userLogin);
    Map resultService=null;
    try {
      resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem calling the updateWorkEffort service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
    }
    result.put("newStatusId","PRUN_RUNNING");
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_DOC_PRINTED"),locale));
    return result;
  }
  if (currentStatusId.equals("PRUN_RUNNING") && (statusId == null || statusId.equals("PRUN_COMPLETED"))) {
    Map serviceContext=new HashMap();
    serviceContext.clear();
    serviceContext.put("workEffortId",productionRunId);
    serviceContext.put("currentStatusId","PRUN_COMPLETED");
    serviceContext.put("actualCompletionDate",UtilDateTime.nowTimestamp());
    serviceContext.put("userLogin",userLogin);
    Map resultService=null;
    try {
      resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem calling the updateWorkEffort service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
    }
    result.put("newStatusId","PRUN_COMPLETED");
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_DOC_PRINTED"),locale));
    return result;
  }
  if (currentStatusId.equals("PRUN_COMPLETED") && (statusId == null || statusId.equals("PRUN_CLOSED"))) {
    Map serviceContext=new HashMap();
    serviceContext.clear();
    serviceContext.put("workEffortId",productionRunId);
    serviceContext.put("currentStatusId","PRUN_CLOSED");
    serviceContext.put("userLogin",userLogin);
    Map resultService=null;
    try {
      resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem calling the updateWorkEffort service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
    }
    Iterator tasks=productionRun.getProductionRunRoutingTasks().iterator();
    while (tasks.hasNext()) {
      GenericValue task=(GenericValue)tasks.next();
      serviceContext.clear();
      serviceContext.put("workEffortId",task.getString("workEffortId"));
      serviceContext.put("currentStatusId","PRUN_CLOSED");
      serviceContext.put("userLogin",userLogin);
      resultService=null;
      try {
        resultService=dispatcher.runSync("updateWorkEffort",serviceContext);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem calling the updateWorkEffort service",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));
      }
    }
    result.put("newStatusId","PRUN_CLOSED");
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_CLOSED"),locale));
    return result;
  }
  result.put("newStatusId",currentStatusId);
  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId",currentStatusId),locale));
  return result;
}
