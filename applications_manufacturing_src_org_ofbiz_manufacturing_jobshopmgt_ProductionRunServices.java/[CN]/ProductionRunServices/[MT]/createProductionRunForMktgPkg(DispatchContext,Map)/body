{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String facilityId=(String)context.get("facilityId");
  String orderId=(String)context.get("orderId");
  String orderItemSeqId=(String)context.get("orderItemSeqId");
  GenericValue orderItem=null;
  try {
    orderItem=delegator.findByPrimaryKey("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Error creating a production run for marketing package for order [" + orderId + " "+ orderItemSeqId+ "]: "+ e.getMessage());
  }
  if (orderItem == null) {
    return ServiceUtil.returnError("Error creating a production run for marketing package for order [" + orderId + " "+ orderItemSeqId+ "]: order item not found.");
  }
  if (orderItem.get("quantity") == null) {
    Debug.logWarning("No quantity found for orderItem [" + orderItem + "], skipping production run of this marketing package",module);
    return ServiceUtil.returnSuccess();
  }
  try {
    double existingAtp=0.0;
    Map tmpResults=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",orderItem.getString("productId"),"facilityId",facilityId,"userLogin",userLogin));
    if (tmpResults.get("availableToPromiseTotal") != null) {
      existingAtp=((Double)tmpResults.get("availableToPromiseTotal")).doubleValue();
    }
    if (Debug.verboseOn()) {
      Debug.logVerbose("Order item [" + orderItem + "] Existing ATP = ["+ existingAtp+ "]",module);
    }
    if (existingAtp < 0.0) {
      double qtyToProduce=Math.min((0 - existingAtp),orderItem.getDouble("quantity").doubleValue());
      if (Debug.verboseOn()) {
        Debug.logVerbose("Order quantity = [" + orderItem.getDouble("quantity").doubleValue() + "] quantity to produce = ["+ qtyToProduce+ "]",module);
      }
      Map serviceContext=new HashMap();
      serviceContext.put("productId",orderItem.getString("productId"));
      serviceContext.put("pRQuantity",new Double(qtyToProduce));
      serviceContext.put("startDate",UtilDateTime.nowTimestamp());
      serviceContext.put("facilityId",facilityId);
      serviceContext.put("userLogin",userLogin);
      Map resultService=dispatcher.runSync("createProductionRun",serviceContext);
      String productionRunId=(String)resultService.get("productionRunId");
      result.put("productionRunId",productionRunId);
      try {
        delegator.create("WorkOrderItemFulfillment",UtilMisc.toMap("workEffortId",productionRunId,"orderId",orderId,"orderItemSeqId",orderItemSeqId));
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError("Error creating a production run for marketing package for order [" + orderId + " "+ orderItemSeqId+ "]: "+ e.getMessage());
      }
      try {
        serviceContext.clear();
        serviceContext.put("productionRunId",productionRunId);
        serviceContext.put("statusId","PRUN_COMPLETED");
        serviceContext.put("userLogin",userLogin);
        resultService=dispatcher.runSync("quickChangeProductionRunStatus",serviceContext);
        serviceContext.clear();
        serviceContext.put("workEffortId",productionRunId);
        serviceContext.put("userLogin",userLogin);
        resultService=dispatcher.runSync("productionRunProduce",serviceContext);
      }
 catch (      GenericServiceException e) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotCreated",locale));
      }
      result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunCreated",UtilMisc.toMap("productionRunId",productionRunId),locale));
      return result;
    }
 else {
      if (Debug.verboseOn()) {
        Debug.logVerbose("Order item [" + orderItem + "] does not need to be produced - ATP is ["+ existingAtp+ "]",module);
      }
      return ServiceUtil.returnSuccess();
    }
  }
 catch (  GenericServiceException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotCreated",locale));
  }
}
