{
  GenericHelper helper=helperCache.get(helperInfo.getHelperFullName());
  if (helper == null) {
synchronized (GenericHelperFactory.class) {
      helper=helperCache.get(helperInfo.getHelperFullName());
      if (helper == null) {
        try {
          DatasourceInfo datasourceInfo=EntityConfigUtil.getDatasourceInfo(helperInfo.getHelperBaseName());
          if (datasourceInfo == null) {
            throw new IllegalStateException("Could not find datasource definition with name " + helperInfo.getHelperBaseName());
          }
          String helperClassName=datasourceInfo.helperClass;
          Class<?> helperClass=null;
          if (UtilValidate.isNotEmpty(helperClassName)) {
            try {
              ClassLoader loader=Thread.currentThread().getContextClassLoader();
              helperClass=loader.loadClass(helperClassName);
            }
 catch (            ClassNotFoundException e) {
              Debug.logWarning(e,module);
              throw new IllegalStateException("Error loading GenericHelper class \"" + helperClassName + "\": "+ e.getMessage());
            }
          }
          Class<?>[] paramTypes=new Class<?>[]{GenericHelperInfo.class};
          Object[] params=new Object[]{helperInfo};
          java.lang.reflect.Constructor<?> helperConstructor=null;
          if (helperClass != null) {
            try {
              helperConstructor=helperClass.getConstructor(paramTypes);
            }
 catch (            NoSuchMethodException e) {
              Debug.logWarning(e,module);
              throw new IllegalStateException("Error loading GenericHelper class \"" + helperClassName + "\": "+ e.getMessage());
            }
          }
          try {
            helper=(GenericHelper)helperConstructor.newInstance(params);
          }
 catch (          IllegalAccessException e) {
            Debug.logWarning(e,module);
            throw new IllegalStateException("Error loading GenericHelper class \"" + helperClassName + "\": "+ e.getMessage());
          }
catch (          InstantiationException e) {
            Debug.logWarning(e,module);
            throw new IllegalStateException("Error loading GenericHelper class \"" + helperClassName + "\": "+ e.getMessage());
          }
catch (          java.lang.reflect.InvocationTargetException e) {
            Debug.logWarning(e,module);
            throw new IllegalStateException("Error loading GenericHelper class \"" + helperClassName + "\": "+ e.getMessage());
          }
          if (helper != null)           helperCache.put(helperInfo.getHelperFullName(),helper);
        }
 catch (        SecurityException e) {
          Debug.logError(e,module);
          throw new IllegalStateException("Error loading GenericHelper class: " + e.toString());
        }
      }
    }
  }
  return helper;
}
