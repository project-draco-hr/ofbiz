{
  super(aif);
  this.controllerXmlUrl=controllerXmlUrl;
  this.viewUri=viewUri;
  this.viewInfoMap=aif.getControllerViewInfoMap(controllerXmlUrl,viewUri);
  if (this.viewInfoMap == null) {
    throw new GeneralException("Could not find Controller View [" + viewUri + "] at URL ["+ controllerXmlUrl.toExternalForm()+ "]");
  }
  if (this.viewInfoMap == null) {
    throw new GeneralException("Controller view with name [" + viewUri + "] is not defined in controller file ["+ controllerXmlUrl+ "].");
  }
  if ("screen".equals(this.viewInfoMap.get(ConfigXMLReader.VIEW_TYPE)) || "screenfop".equals(this.viewInfoMap.get(ConfigXMLReader.VIEW_TYPE)) || "screentext".equals(this.viewInfoMap.get(ConfigXMLReader.VIEW_TYPE))|| "screenxml".equals(this.viewInfoMap.get(ConfigXMLReader.VIEW_TYPE))) {
    String fullScreenName=this.viewInfoMap.get(ConfigXMLReader.VIEW_PAGE);
    if (UtilValidate.isNotEmpty(fullScreenName)) {
      int poundIndex=fullScreenName.indexOf('#');
      try {
        this.screenCalledByThisView=this.aif.getScreenWidgetArtifactInfo(fullScreenName.substring(poundIndex + 1),fullScreenName.substring(0,poundIndex));
        if (this.screenCalledByThisView != null) {
          UtilMisc.addToSetInMap(this,aif.allViewInfosReferringToScreen,this.screenCalledByThisView.getUniqueId());
        }
      }
 catch (      GeneralException e) {
        Debug.logWarning(e.toString(),module);
      }
    }
  }
}
