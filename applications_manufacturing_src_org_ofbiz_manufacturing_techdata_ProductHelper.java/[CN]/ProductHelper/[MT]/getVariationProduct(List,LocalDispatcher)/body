{
  Debug.logInfo("coucou de la methode",module);
  ArrayList inventoryProductList;
  Map inventoryProductMap=new TreeMap();
  Map cumulativeAtpByEventMap=new TreeMap();
  GenericValue inventoryTmp;
  boolean firstOfList=true;
  Iterator iter=inventoryList.iterator();
  while (iter.hasNext()) {
    inventoryTmp=(GenericValue)iter.next();
    inventoryProductList=(ArrayList)inventoryProductMap.get(inventoryTmp.getString("productId"));
    if (inventoryProductList == null) {
      inventoryProductList=new ArrayList();
      inventoryProductMap.put(inventoryTmp.getString("productId"),inventoryProductList);
    }
    inventoryProductList.add(inventoryTmp);
  }
  ArrayList keys=new ArrayList(inventoryProductMap.keySet());
  for (Iterator iterMap=keys.iterator(); iterMap.hasNext(); ) {
    String productId=(String)iterMap.next();
    inventoryProductList=(ArrayList)inventoryProductMap.get(productId);
    double productAtp=0;
    for (iter=inventoryProductList.iterator(); iter.hasNext(); ) {
      inventoryTmp=(GenericValue)iter.next();
      if (firstOfList) {
        try {
          GenericValue product=inventoryTmp.getRelatedOneCache("Product");
          productAtp=MrpServices.findProductMrpQoh(product,dispatcher);
        }
 catch (        Exception e) {
          Debug.logError("Error : getRelatedOneCache Produc with productId=" + inventoryTmp.getString("productId") + "--"+ e.getMessage(),module);
          return null;
        }
        firstOfList=false;
      }
      Double doubleTmp=(Double)inventoryTmp.getDouble("eventQuantity");
      productAtp+=doubleTmp.doubleValue();
      cumulativeAtpByEventMap.put(inventoryTmp,new Double(productAtp));
    }
    firstOfList=true;
  }
  List eventPlannedAndCumulativeAtp=new LinkedList();
  iter=inventoryList.iterator();
  while (iter.hasNext()) {
    inventoryTmp=(GenericValue)iter.next();
    Double productAtp=(Double)cumulativeAtpByEventMap.get(inventoryTmp);
    eventPlannedAndCumulativeAtp.add(productAtp);
  }
  return eventPlannedAndCumulativeAtp;
}
