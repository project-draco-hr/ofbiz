{
  final String certAlias=EntityUtilProperties.getPropertyValue("oagis","auth.client.certificate.alias",delegator);
  final String basicAuthUsername=EntityUtilProperties.getPropertyValue("oagis","auth.basic.username",delegator);
  final String basicAuthPassword=EntityUtilProperties.getPropertyValue("oagis","auth.basic.password",delegator);
  if (out != null) {
    Writer outWriter=new OutputStreamWriter(out);
    try {
      outWriter.write(outText);
      outWriter.close();
    }
 catch (    IOException e) {
      Debug.logError(e,"Error writing message to output stream: " + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisErrorWritingMessage",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
 else   if (UtilValidate.isNotEmpty(saveToFilename) && UtilValidate.isNotEmpty(saveToDirectory)) {
    try {
      File outdir=new File(saveToDirectory);
      if (!outdir.exists()) {
        outdir.mkdir();
      }
      Writer outWriter=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(outdir,saveToFilename)),"UTF-8")));
      outWriter.write(outText);
      outWriter.close();
    }
 catch (    Exception e) {
      Debug.logError(e,"Error saving message to file [" + saveToFilename + "]: "+ e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisErrorSavingMessage",UtilMisc.toMap("saveToFilename",saveToFilename,"errorString",e.toString()),locale));
    }
  }
 else   if (UtilValidate.isNotEmpty(sendToUrl)) {
    HttpClient http=new HttpClient(sendToUrl);
    http.setHostVerificationLevel(SSLUtil.getHostCertNoCheck());
    http.setAllowUntrusted(true);
    http.setDebug(true);
    if (UtilValidate.isNotEmpty(certAlias)) {
      http.setClientCertificateAlias(certAlias);
    }
    if (UtilValidate.isNotEmpty(basicAuthUsername)) {
      http.setBasicAuthInfo(basicAuthUsername,basicAuthPassword);
    }
    http.setContentType("text/xml");
    http.setKeepAlive(true);
    try {
      http.post(outText);
    }
 catch (    Exception e) {
      Debug.logError(e,"Error posting message to server with URL [" + sendToUrl + "]: "+ e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisErrorPostingMessage",UtilMisc.toMap("sendToUrl",sendToUrl,"errorString",e.toString()),locale));
    }
  }
 else {
    if (Debug.infoOn())     Debug.logInfo("No send to information, so here is the message: " + outText,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisErrorSendingInformations",locale));
  }
  return null;
}
