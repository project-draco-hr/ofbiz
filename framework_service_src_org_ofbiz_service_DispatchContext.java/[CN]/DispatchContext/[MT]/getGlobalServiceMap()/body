{
  Map<String,ModelService> serviceMap=modelServiceMapByModel.get(this.model);
  if (serviceMap == null) {
    serviceMap=FastMap.newInstance();
    List<Future<Map<String,ModelService>>> futures=FastList.newInstance();
    List<GlobalServices> globalServicesList=null;
    try {
      globalServicesList=ServiceConfigUtil.getServiceEngine().getGlobalServices();
    }
 catch (    GenericConfigException e) {
      Debug.logError(e,module);
      throw new RuntimeException(e.getMessage());
    }
    for (    GlobalServices globalServices : globalServicesList) {
      ResourceHandler handler=new MainResourceHandler(ServiceConfigUtil.SERVICE_ENGINE_XML_FILENAME,globalServices.getLoader(),globalServices.getLocation());
      futures.add(ExecutionPool.GLOBAL_FORK_JOIN.submit(createServiceReaderCallable(handler)));
    }
    for (    ComponentConfig.ServiceResourceInfo componentResourceInfo : ComponentConfig.getAllServiceResourceInfos("model")) {
      futures.add(ExecutionPool.GLOBAL_FORK_JOIN.submit(createServiceReaderCallable(componentResourceInfo.createResourceHandler())));
    }
    for (    Map<String,ModelService> servicesMap : ExecutionPool.getAllFutures(futures)) {
      if (servicesMap != null) {
        serviceMap.putAll(servicesMap);
      }
    }
    if (serviceMap != null) {
      Map<String,ModelService> cachedServiceMap=modelServiceMapByModel.putIfAbsentAndGet(this.model,serviceMap);
      if (cachedServiceMap == serviceMap) {
        ServiceEcaUtil.reloadConfig();
      }
    }
  }
  return serviceMap;
}
