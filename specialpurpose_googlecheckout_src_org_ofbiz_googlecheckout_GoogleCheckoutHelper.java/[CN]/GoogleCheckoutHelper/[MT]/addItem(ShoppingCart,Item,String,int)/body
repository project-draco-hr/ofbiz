{
  String productId=item.getMerchantItemId();
  BigDecimal qty=new BigDecimal(item.getQuantity());
  BigDecimal price=new BigDecimal(item.getUnitPriceAmount());
  price=price.setScale(ShoppingCart.scale,ShoppingCart.rounding);
  HashMap<Object,Object> attrs=new HashMap<Object,Object>();
  attrs.put("shipGroup",groupIdx);
  int idx=cart.addItemToEnd(productId,null,qty,null,null,attrs,prodCatalogId,null,dispatcher,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE);
  ShoppingCartItem cartItem=cart.findCartItem(idx);
  cartItem.setQuantity(qty,dispatcher,cart,true,false);
  BigDecimal cartPrice=cartItem.getBasePrice();
  cartPrice=cartPrice.setScale(ShoppingCart.scale,ShoppingCart.rounding);
  if (price.doubleValue() != cartPrice.doubleValue()) {
    cartItem.setIsModifiedPrice(true);
    cartItem.setBasePrice(price);
    cart.setHoldOrder(true);
    cart.addInternalOrderNote("Price received [" + price + "] (for item # "+ productId+ ") from Google Checkout does not match the price in the database ["+ cartPrice+ "]. Order is held for manual review.");
  }
  cart.setItemShipGroupQty(cartItem,qty,groupIdx);
}
