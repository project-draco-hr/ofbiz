{
  String externalId=info.getGoogleOrderNumber();
  List<GenericValue> existingOrder=delegator.findByAnd("OrderHeader",UtilMisc.toMap("externalId",externalId));
  if (existingOrder != null && existingOrder.size() > 0) {
    Debug.logWarning("Google order #" + externalId + " already exists.",module);
    return;
  }
  GenericValue googleCfg=GoogleRequestServices.getGoogleConfiguration(delegator,productStoreId);
  if (googleCfg == null) {
    throw new GeneralException("No google configuration found for product store : " + productStoreId);
  }
  String websiteId=googleCfg.getString("webSiteId");
  String currencyUom=googleCfg.getString("currencyUomId");
  String prodCatalogId=googleCfg.getString("prodCatalogId");
  boolean errorOnUnknownItem=googleCfg.get("errorOnBadItem") != null && "Y".equalsIgnoreCase(googleCfg.getString("errorOnBadItem")) ? true : false;
  ShoppingCart cart=new ShoppingCart(delegator,productStoreId,websiteId,locale,currencyUom);
  cart.setUserLogin(system,dispatcher);
  cart.setOrderType(ORDER_TYPE);
  cart.setChannelType(SALES_CHANNEL);
  cart.setExternalId(externalId);
  Debug.logInfo("Created shopping cart for Google order: ",module);
  Debug.logInfo("-- WebSite : " + websiteId,module);
  Debug.logInfo("-- Product Store : " + productStoreId,module);
  Debug.logInfo("-- Locale : " + locale.toString(),module);
  Debug.logInfo("-- Google Order # : " + externalId,module);
  Address shippingAddress=info.getBuyerShippingAddress();
  Address billingAddress=info.getBuyerBillingAddress();
  String[] partyInfo=getPartyInfo(shippingAddress,billingAddress);
  if (partyInfo == null || partyInfo.length != 3) {
    throw new GeneralException("Unable to parse/create party information, invalid number of parameters returned");
  }
  cart.setOrderPartyId(partyInfo[0]);
  cart.setPlacingCustomerPartyId(partyInfo[0]);
  cart.setShippingContactMechId(partyInfo[1]);
  String shippingEmail=shippingAddress.getEmail();
  if (UtilValidate.isNotEmpty(shippingEmail)) {
    setContactInfo(cart,"PRIMARY_EMAIL",shippingEmail);
  }
  String billingEmail=billingAddress.getEmail();
  if (UtilValidate.isNotEmpty(billingEmail)) {
    setContactInfo(cart,"BILLING_EMAIL",billingEmail);
  }
  String shippingPhone=shippingAddress.getPhone();
  if (UtilValidate.isNotEmpty(shippingPhone)) {
    setContactInfo(cart,"PHONE_SHIPPING",shippingPhone);
  }
  String billingPhone=billingAddress.getPhone();
  if (UtilValidate.isNotEmpty(billingPhone)) {
    setContactInfo(cart,"PHONE_BILLING",billingPhone);
  }
  Collection<Item> items=info.getShoppingCart().getItems();
  for (  Item item : items) {
    try {
      addItem(cart,item,prodCatalogId,0);
    }
 catch (    ItemNotFoundException e) {
      Debug.logWarning(e,"Item was not found : " + item.getMerchantItemId(),module);
      if (errorOnUnknownItem) {
        throw new GeneralException("Invalid item requested from Google Checkout - " + item.getMerchantItemId());
      }
    }
  }
  OrderAdjustment adjustment=info.getOrderAdjustment();
  if (adjustment != null) {
    addAdjustments(cart,adjustment);
    Shipping shipping=info.getOrderAdjustment().getShipping();
    addShipInfo(cart,shipping,partyInfo[1]);
  }
  cart.addPaymentAmount(PAYMENT_METHOD,cart.getGrandTotal());
  CheckOutHelper coh=new CheckOutHelper(dispatcher,delegator,cart);
  Map validateResp=coh.validatePaymentMethods();
  if (ServiceUtil.isError(validateResp)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(validateResp));
  }
  Map createResp=coh.createOrder(system);
  String orderId=cart.getOrderId();
  if (ServiceUtil.isError(createResp)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(createResp));
  }
  try {
    dispatcher.runAsync("sendGoogleOrderNumberRequest",UtilMisc.toMap("orderId",orderId),true);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
  }
}
