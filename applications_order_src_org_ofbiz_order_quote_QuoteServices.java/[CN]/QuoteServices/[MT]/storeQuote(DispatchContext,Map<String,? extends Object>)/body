{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String quoteTypeId=(String)context.get("quoteTypeId");
  String partyId=(String)context.get("partyId");
  Timestamp issueDate=(Timestamp)context.get("issueDate");
  String statusId=(String)context.get("statusId");
  String currencyUomId=(String)context.get("currencyUomId");
  String productStoreId=(String)context.get("productStoreId");
  String salesChannelEnumId=(String)context.get("salesChannelEnumId");
  Timestamp validFromDate=(Timestamp)context.get("validFromDate");
  Timestamp validThruDate=(Timestamp)context.get("validThruDate");
  String quoteName=(String)context.get("quoteName");
  String description=(String)context.get("description");
  List<GenericValue> quoteItems=UtilGenerics.checkList(context.get("quoteItems"));
  List<GenericValue> quoteAttributes=UtilGenerics.checkList(context.get("quoteAttributes"));
  List<GenericValue> quoteCoefficients=UtilGenerics.checkList(context.get("quoteCoefficients"));
  List<GenericValue> quoteRoles=UtilGenerics.checkList(context.get("quoteRoles"));
  List<GenericValue> quoteWorkEfforts=UtilGenerics.checkList(context.get("quoteWorkEfforts"));
  List<GenericValue> quoteAdjustments=UtilGenerics.checkList(context.get("quoteAdjustments"));
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> result=FastMap.newInstance();
  try {
    Map<String,Object> quoteIn=UtilMisc.toMap("quoteTypeId",quoteTypeId,"partyId",partyId,"issueDate",issueDate,"statusId",statusId,"currencyUomId",currencyUomId);
    quoteIn.put("productStoreId",productStoreId);
    quoteIn.put("salesChannelEnumId",salesChannelEnumId);
    quoteIn.put("productStoreId",productStoreId);
    quoteIn.put("validFromDate",validFromDate);
    quoteIn.put("validThruDate",validThruDate);
    quoteIn.put("quoteName",quoteName);
    quoteIn.put("description",description);
    if (userLogin != null) {
      quoteIn.put("userLogin",userLogin);
    }
    Map<String,Object> quoteOut=dispatcher.runSync("createQuote",quoteIn);
    if (UtilValidate.isNotEmpty(quoteOut) && UtilValidate.isNotEmpty(quoteOut.get("quoteId"))) {
      String quoteId=(String)quoteOut.get("quoteId");
      result.put("quoteId",quoteId);
      if (UtilValidate.isNotEmpty(quoteItems)) {
        Iterator<GenericValue> quoteIt=quoteItems.iterator();
        while (quoteIt.hasNext()) {
          GenericValue quoteItem=quoteIt.next();
          quoteItem.set("quoteId",quoteId);
          Map<String,Object> quoteItemIn=quoteItem.getAllFields();
          quoteItemIn.put("userLogin",userLogin);
          dispatcher.runSync("createQuoteItem",quoteItemIn);
        }
      }
      if (UtilValidate.isNotEmpty(quoteAttributes)) {
        Iterator<GenericValue> quoteAttrIt=quoteAttributes.iterator();
        while (quoteAttrIt.hasNext()) {
          GenericValue quoteAttr=quoteAttrIt.next();
          quoteAttr.set("quoteId",quoteId);
          Map<String,Object> quoteAttrIn=quoteAttr.getAllFields();
          quoteAttrIn.put("userLogin",userLogin);
          dispatcher.runSync("createQuoteAttribute",quoteAttrIn);
        }
      }
      if (UtilValidate.isNotEmpty(quoteCoefficients)) {
        Iterator<GenericValue> quoteCoefficientIt=quoteCoefficients.iterator();
        while (quoteCoefficientIt.hasNext()) {
          GenericValue quoteCoefficient=quoteCoefficientIt.next();
          quoteCoefficient.set("quoteId",quoteId);
          Map<String,Object> quoteCoefficientIn=quoteCoefficient.getAllFields();
          quoteCoefficientIn.put("userLogin",userLogin);
          dispatcher.runSync("createQuoteCoefficient",quoteCoefficientIn);
        }
      }
      if (UtilValidate.isNotEmpty(quoteRoles)) {
        Iterator<GenericValue> quoteRoleIt=quoteRoles.iterator();
        while (quoteRoleIt.hasNext()) {
          GenericValue quoteRole=quoteRoleIt.next();
          quoteRole.set("quoteId",quoteId);
          Map<String,Object> quoteRoleIn=quoteRole.getAllFields();
          quoteRoleIn.put("userLogin",userLogin);
          dispatcher.runSync("createQuoteRole",quoteRoleIn);
        }
      }
      if (UtilValidate.isNotEmpty(quoteWorkEfforts)) {
        Iterator<GenericValue> quoteWorkEffortIt=quoteWorkEfforts.iterator();
        while (quoteWorkEffortIt.hasNext()) {
          GenericValue quoteWorkEffort=quoteWorkEffortIt.next();
          quoteWorkEffort.set("quoteId",quoteId);
          Map<String,Object> quoteWorkEffortIn=quoteWorkEffort.getAllFields();
          quoteWorkEffortIn.put("userLogin",userLogin);
          dispatcher.runSync("createQuoteWorkEffort",quoteWorkEffortIn);
        }
      }
      if (UtilValidate.isNotEmpty(quoteAdjustments)) {
        Iterator<GenericValue> quoteAdjustmentIt=quoteAdjustments.iterator();
        while (quoteAdjustmentIt.hasNext()) {
          GenericValue quoteAdjustment=quoteAdjustmentIt.next();
          quoteAdjustment.set("quoteId",quoteId);
          Map<String,Object> quoteAdjustmentIn=quoteAdjustment.getAllFields();
          quoteAdjustmentIn.put("userLogin",userLogin);
          dispatcher.runSync("createQuoteAdjustment",quoteAdjustmentIn);
        }
      }
    }
 else {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"OrderOrderQuoteCannotBeStored",locale));
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Problem storing Quote",module);
  }
  return result;
}
