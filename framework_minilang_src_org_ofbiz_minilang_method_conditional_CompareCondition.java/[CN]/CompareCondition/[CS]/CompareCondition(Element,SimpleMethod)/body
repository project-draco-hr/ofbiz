{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.attributeNames(simpleMethod,element,"field","format","operator","type","value");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"field","operator","value");
    MiniLangValidate.constantAttributes(simpleMethod,element,"operator","type");
    MiniLangValidate.constantPlusExpressionAttributes(simpleMethod,element,"value","format");
    MiniLangValidate.expressionAttributes(simpleMethod,element,"field");
  }
  this.fieldFma=FlexibleMapAccessor.getInstance(element.getAttribute("field"));
  this.formatFse=FlexibleStringExpander.getInstance(element.getAttribute("format"));
  this.operator=element.getAttribute("operator");
  this.compare=Compare.getInstance(this.operator);
  if (this.compare == null) {
    MiniLangValidate.handleError("Invalid operator " + this.operator,simpleMethod,element);
  }
  this.type=element.getAttribute("type");
  Class<?> targetClass=null;
  if (!this.type.isEmpty()) {
    if ("contains".equals(this.operator)) {
      MiniLangValidate.handleError("Operator \"contains\" does not support type conversions (remove the type attribute).",simpleMethod,element);
      targetClass=Object.class;
    }
 else {
      try {
        targetClass=ObjectType.loadClass(this.type);
      }
 catch (      ClassNotFoundException e) {
        MiniLangValidate.handleError("Invalid type " + this.type,simpleMethod,element);
      }
    }
  }
  this.targetClass=targetClass;
  this.valueFse=FlexibleStringExpander.getInstance(element.getAttribute("value"));
  Element childElement=UtilXml.firstChildElement(element);
  if (childElement != null && !"else".equals(childElement.getTagName())) {
    this.subOps=Collections.unmodifiableList(SimpleMethod.readOperations(element,simpleMethod));
  }
 else {
    this.subOps=null;
  }
  Element elseElement=UtilXml.firstChildElement(element,"else");
  if (elseElement != null) {
    this.elseSubOps=Collections.unmodifiableList(SimpleMethod.readOperations(elseElement,simpleMethod));
  }
 else {
    this.elseSubOps=null;
  }
}
