{
  String entityName=methodContext.expandString(this.entityName);
  String delegatorName=methodContext.expandString(this.delegatorName);
  String useCacheStr=methodContext.expandString(this.useCacheStr);
  boolean useCache="true".equals(useCacheStr);
  Delegator delegator=methodContext.getDelegator();
  if (delegatorName != null && delegatorName.length() > 0) {
    delegator=GenericDelegator.getGenericDelegator(delegatorName);
  }
  Map<String,? extends Object> inMap=mapAcsr.get(methodContext);
  if (UtilValidate.isEmpty(entityName) && inMap instanceof GenericEntity) {
    GenericEntity inEntity=(GenericEntity)inMap;
    entityName=inEntity.getEntityName();
  }
  Collection<String> fieldsToSelectList=null;
  if (!fieldsToSelectListAcsr.isEmpty()) {
    fieldsToSelectList=fieldsToSelectListAcsr.get(methodContext);
  }
  try {
    if (fieldsToSelectList != null) {
      valueAcsr.put(methodContext,delegator.findByPrimaryKeyPartial(delegator.makePK(entityName,inMap),UtilMisc.makeSetWritable(fieldsToSelectList)));
    }
 else {
      valueAcsr.put(methodContext,delegator.findOne(entityName,inMap,useCache));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [problem finding the "+ entityName+ " entity: "+ e.getMessage()+ "]";
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  return true;
}
