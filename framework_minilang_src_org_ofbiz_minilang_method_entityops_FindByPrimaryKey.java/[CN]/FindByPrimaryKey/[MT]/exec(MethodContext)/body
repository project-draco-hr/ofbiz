{
  String entityName=entityNameFse.expandString(methodContext.getEnvMap());
  boolean useCache="true".equals(useCacheFse.expandString(methodContext.getEnvMap()));
  Delegator delegator=methodContext.getDelegator();
  String delegatorName=delegatorNameFse.expandString(methodContext.getEnvMap());
  if (!delegatorName.isEmpty()) {
    delegator=DelegatorFactory.getDelegator(delegatorName);
  }
  Map<String,? extends Object> inMap=mapFma.get(methodContext.getEnvMap());
  if (inMap == null) {
    throw new MiniLangRuntimeException("Primary key map \"" + mapFma + "\" not found",this);
  }
  if (entityName.isEmpty() && inMap instanceof GenericEntity) {
    GenericEntity inEntity=(GenericEntity)inMap;
    entityName=inEntity.getEntityName();
  }
  if (entityName.isEmpty()) {
    throw new MiniLangRuntimeException("Entity name not found",this);
  }
  Collection<String> fieldsToSelectList=fieldsToSelectListFma.get(methodContext.getEnvMap());
  try {
    if (fieldsToSelectList != null) {
      valueFma.put(methodContext.getEnvMap(),delegator.findByPrimaryKeyPartial(delegator.makePK(entityName,inMap),UtilMisc.makeSetWritable(fieldsToSelectList)));
    }
 else {
      valueFma.put(methodContext.getEnvMap(),delegator.findOne(entityName,inMap,useCache));
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Exception thrown while performing entity find: " + e.getMessage();
    Debug.logWarning(e,errMsg,module);
    simpleMethod.addErrorMessage(methodContext,errMsg);
    return false;
  }
  return true;
}
