{
  if (input == null) {
    return null;
  }
  String working=input;
  Codec codecFound=null;
  int mixedCount=1;
  int foundCount=0;
  boolean clean=false;
  while (!clean) {
    clean=true;
    Iterator<Codec> i=codecs.iterator();
    while (i.hasNext()) {
      Codec codec=i.next();
      String old=working;
      working=codec.decode(working);
      if (!old.equals(working)) {
        if (codecFound != null && codecFound != codec) {
          mixedCount++;
        }
        codecFound=codec;
        if (clean) {
          foundCount++;
        }
        clean=false;
      }
    }
  }
  if (foundCount >= 2 && mixedCount > 1) {
    if (restrictMultiple || restrictMixed) {
      throw new IntrusionException("Input validation failure");
    }
 else {
      Debug.logWarning("Multiple (" + foundCount + "x) and mixed encoding ("+ mixedCount+ "x) detected in "+ input,module);
    }
  }
 else   if (foundCount >= 2) {
    if (restrictMultiple) {
      throw new IntrusionException("Input validation failure");
    }
 else {
      Debug.logWarning("Multiple (" + foundCount + "x) encoding detected in "+ input,module);
    }
  }
 else   if (mixedCount > 1) {
    if (restrictMixed) {
      throw new IntrusionException("Input validation failure");
    }
 else {
      Debug.logWarning("Mixed encoding (" + mixedCount + "x) detected in "+ input,module);
    }
  }
  return working;
}
