{
  final StringBuilder buf=new StringBuilder();
  final boolean fullPath=checkArg(args,"fullPath",false);
  final boolean secure=checkArg(args,"secure",false);
  return new Writer(out){
    public void write(    char[] cbuf,    int off,    int len) throws IOException {
      buf.append(cbuf,off,len);
    }
    public void flush() throws IOException {
      out.flush();
    }
    public void close() throws IOException {
      try {
        Environment env=Environment.getCurrentEnvironment();
        BeanModel req=(BeanModel)env.getVariable("request");
        if (req != null) {
          String previousCategoryId=getStringArg(args,"previousCategoryId");
          String productCategoryId=getStringArg(args,"productCategoryId");
          String productId=getStringArg(args,"productId");
          HttpServletRequest request=(HttpServletRequest)req.getWrappedObject();
          String url="";
          StringBuilder newURL=new StringBuilder();
          if (UtilValidate.isNotEmpty(productId)) {
            url=CatalogUrlFilter.makeProductUrl(request,previousCategoryId,productCategoryId,productId);
          }
 else {
            String viewSize=getStringArg(args,"viewSize");
            String viewIndex=getStringArg(args,"viewIndex");
            String viewSort=getStringArg(args,"viewSort");
            String searchString=getStringArg(args,"searchString");
            url=CatalogUrlFilter.makeCategoryUrl(request,previousCategoryId,productCategoryId,productId,viewSize,viewIndex,viewSort,searchString);
          }
          if (fullPath) {
            String serverRootUrl=RequestHandler.getDefaultServerRootUrl(request,secure);
            newURL.append(serverRootUrl);
          }
          newURL.append(url);
          out.write(newURL.toString());
        }
      }
 catch (      TemplateModelException e) {
        throw new IOException(e.getMessage());
      }
    }
  }
;
}
