{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String responseId=(String)context.get("returnItemResponseId");
  String errorMsg="Failed to create payment applications for return item response [" + responseId + "]. ";
  try {
    GenericValue response=EntityQuery.use(delegator).from("ReturnItemResponse").where("returnItemResponseId",responseId).queryOne();
    if (response == null) {
      return ServiceUtil.returnError(errorMsg + "Return Item Response not found with ID [" + responseId+ "].");
    }
    BigDecimal responseAmount=response.getBigDecimal("responseAmount").setScale(decimals,rounding);
    String paymentId=response.getString("paymentId");
    Map<String,GenericValue> returnInvoices=new HashMap<String,GenericValue>();
    List<GenericValue> items=response.getRelated("ReturnItem",null,null,false);
    for (    GenericValue item : items) {
      List<GenericValue> billings=item.getRelated("ReturnItemBilling",null,null,false);
      for (      GenericValue billing : billings) {
        GenericValue invoice=billing.getRelatedOne("Invoice",false);
        if (returnInvoices.get(invoice.getString("invoiceId")) == null) {
          returnInvoices.put(invoice.getString("invoiceId"),invoice);
        }
      }
    }
    Map<String,BigDecimal> invoiceTotals=new HashMap<String,BigDecimal>();
    BigDecimal grandTotal=ZERO;
    for (    GenericValue invoice : returnInvoices.values()) {
      List<GenericValue> billings=invoice.getRelated("ReturnItemBilling",null,null,false);
      BigDecimal runningTotal=ZERO;
      for (      GenericValue billing : billings) {
        runningTotal=runningTotal.add(billing.getBigDecimal("amount").multiply(billing.getBigDecimal("quantity")).setScale(decimals,rounding));
      }
      invoiceTotals.put(invoice.getString("invoiceId"),runningTotal);
      grandTotal=grandTotal.add(runningTotal);
    }
    for (    GenericValue invoice : returnInvoices.values()) {
      String invoiceId=invoice.getString("invoiceId");
      BigDecimal invoiceTotal=invoiceTotals.get(invoiceId);
      BigDecimal amountApplied=responseAmount.multiply(invoiceTotal).divide(grandTotal,decimals,rounding).setScale(decimals,rounding);
      if (paymentId != null) {
        Map<String,Object> input=UtilMisc.<String,Object>toMap("paymentId",paymentId,"invoiceId",invoice.getString("invoiceId"));
        input.put("amountApplied",amountApplied);
        input.put("userLogin",userLogin);
        if (response.get("billingAccountId") != null) {
          GenericValue billingAccount=response.getRelatedOne("BillingAccount",false);
          if (billingAccount != null) {
            input.put("billingAccountId",response.get("billingAccountId"));
          }
        }
        Map<String,Object> serviceResults=dispatcher.runSync("createPaymentApplication",input);
        if (ServiceUtil.isError(serviceResults)) {
          return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
        }
        if (Debug.verboseOn()) {
          Debug.logInfo("Created PaymentApplication for response with amountApplied " + amountApplied.toString(),module);
        }
      }
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,errorMsg + e.getMessage(),module);
    return ServiceUtil.returnError(errorMsg + e.getMessage());
  }
catch (  GenericEntityException e) {
    Debug.logError(e,errorMsg + e.getMessage(),module);
    return ServiceUtil.returnError(errorMsg + e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
