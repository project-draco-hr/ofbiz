{
  try {
    Delegator delegator=paymentPreference.getDelegator();
    String responseId=delegator.getNextSeqId("PaymentGatewayResponse");
    GenericValue response=delegator.makeValue("PaymentGatewayResponse");
    response.set("paymentGatewayResponseId",responseId);
    response.set("paymentServiceTypeEnumId","PRDS_PAY_EXTERNAL");
    response.set("orderPaymentPreferenceId",paymentPreference.get("orderPaymentPreferenceId"));
    response.set("paymentMethodTypeId",paymentPreference.get("paymentMethodTypeId"));
    response.set("paymentMethodId",paymentPreference.get("paymentMethodId"));
    response.set("amount",paymentPreference.get("maxAmount"));
    response.set("referenceNum",externalId);
    response.set("transactionDate",orderDate);
    delegator.createOrStore(response);
    Map<String,Object> results=dispatcher.runSync("createPaymentFromPreference",UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreferenceId",paymentPreference.get("orderPaymentPreferenceId"),"paymentFromId",partyIdFrom,"paymentRefNum",externalId,"comments","Payment receive via eBay"));
    if ((results == null) || (results.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))) {
      Debug.logError((String)results.get(ModelService.ERROR_MESSAGE),module);
      return false;
    }
    return true;
  }
 catch (  Exception e) {
    Debug.logError(e,"Failed to create the payment for order " + orderId,module);
    return false;
  }
}
