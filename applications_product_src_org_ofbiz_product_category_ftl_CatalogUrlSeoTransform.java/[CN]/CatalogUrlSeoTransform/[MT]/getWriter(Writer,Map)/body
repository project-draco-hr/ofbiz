{
  final StringBuilder buf=new StringBuilder();
  return new Writer(out){
    @Override public void write(    char[] cbuf,    int off,    int len) throws IOException {
      buf.append(cbuf,off,len);
    }
    @Override public void flush() throws IOException {
      out.flush();
    }
    @Override public void close() throws IOException {
      try {
        Environment env=Environment.getCurrentEnvironment();
        BeanModel req=(BeanModel)env.getVariable("request");
        if (req != null) {
          String productId=getStringArg(args,"productId");
          String currentCategoryId=getStringArg(args,"currentCategoryId");
          String previousCategoryId=getStringArg(args,"previousCategoryId");
          HttpServletRequest request=(HttpServletRequest)req.getWrappedObject();
          if (!isCategoryMapInitialed()) {
            initCategoryMap(request);
          }
          String catalogUrl="";
          if (UrlRegexpConfigUtil.isCategoryUrlEnabled(request.getContextPath())) {
            if (UtilValidate.isEmpty(productId)) {
              catalogUrl=makeCategoryUrl(request,currentCategoryId,previousCategoryId,null,null,null,null);
            }
 else {
              catalogUrl=makeProductUrl(request,productId,currentCategoryId,previousCategoryId);
            }
          }
 else {
            catalogUrl=CatalogUrlServlet.makeCatalogUrl(request,productId,currentCategoryId,previousCategoryId);
          }
          out.write(catalogUrl);
        }
      }
 catch (      TemplateModelException e) {
        throw new IOException(e.getMessage());
      }
    }
  }
;
}
