{
  String state=(String)context.get("state");
  String city=(String)context.get("city");
  String zip5=(String)context.get("zip5");
  if ((UtilValidate.isEmpty(state) && UtilValidate.isEmpty(city) && UtilValidate.isEmpty(zip5)) || (UtilValidate.isEmpty(zip5) && (UtilValidate.isEmpty(state) || UtilValidate.isEmpty(city)))) {
    String errorMessage=UtilProperties.getMessage(errorResource,"ProductUspsAddressValidationStateAndCityOrZipRqd",(Locale)context.get("locale"));
    Debug.logError(errorMessage,module);
    return ServiceUtil.returnError(errorMessage);
  }
  Document requestDocument=createUspsRequestDocument("AddressValidateRequest");
  Element addressElement=UtilXml.addChildElement(requestDocument.getDocumentElement(),"Address",requestDocument);
  addressElement.setAttribute("ID","0");
  UtilXml.addChildElementValue(addressElement,"FirmName",(String)context.get("firmName"),requestDocument);
  UtilXml.addChildElementValue(addressElement,"Address1",(String)context.get("address2"),requestDocument);
  UtilXml.addChildElementValue(addressElement,"Address2",(String)context.get("address1"),requestDocument);
  UtilXml.addChildElementValue(addressElement,"City",(String)context.get("city"),requestDocument);
  UtilXml.addChildElementValue(addressElement,"State",(String)context.get("state"),requestDocument);
  UtilXml.addChildElementValue(addressElement,"Zip5",(String)context.get("zip5"),requestDocument);
  UtilXml.addChildElementValue(addressElement,"Zip4",(String)context.get("zip4"),requestDocument);
  Document responseDocument=null;
  try {
    responseDocument=sendUspsRequest("Verify",requestDocument);
  }
 catch (  UspsRequestException e) {
    Debug.log(e,module);
    return ServiceUtil.returnFailure("Error sending request for USPS Address Validation service: " + e.getMessage());
  }
  Element respAddressElement=UtilXml.firstChildElement(responseDocument.getDocumentElement(),"Address");
  if (respAddressElement == null) {
    return ServiceUtil.returnFailure("Incomplete response from USPS Address Validation service: no Address element found");
  }
  Element respErrorElement=UtilXml.firstChildElement(respAddressElement,"Error");
  if (respErrorElement != null) {
    return ServiceUtil.returnFailure("The following error was returned by the USPS Address Validation service: " + UtilXml.childElementValue(respErrorElement,"Description"));
  }
  Map result=ServiceUtil.returnSuccess();
  String firmName=UtilXml.childElementValue(respAddressElement,"FirmName");
  if (UtilValidate.isNotEmpty(firmName)) {
    result.put("firmName",firmName);
  }
  String address1=UtilXml.childElementValue(respAddressElement,"Address1");
  if (UtilValidate.isNotEmpty(address1)) {
    result.put("address2",address1);
  }
  result.put("address1",UtilXml.childElementValue(respAddressElement,"Address2"));
  result.put("city",UtilXml.childElementValue(respAddressElement,"City"));
  result.put("state",UtilXml.childElementValue(respAddressElement,"State"));
  result.put("zip5",UtilXml.childElementValue(respAddressElement,"Zip5"));
  result.put("zip4",UtilXml.childElementValue(respAddressElement,"Zip4"));
  return result;
}
