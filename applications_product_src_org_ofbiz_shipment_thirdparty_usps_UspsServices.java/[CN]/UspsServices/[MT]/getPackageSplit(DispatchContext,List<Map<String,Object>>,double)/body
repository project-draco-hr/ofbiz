{
  List<Map<String,Double>> packages=FastList.newInstance();
  if (shippableItemInfo != null) {
    Iterator<Map<String,Object>> sii=shippableItemInfo.iterator();
    while (sii.hasNext()) {
      Map<String,Object> itemInfo=sii.next();
      long pieces=((Long)itemInfo.get("piecesIncluded")).longValue();
      double totalQuantity=((Double)itemInfo.get("quantity")).doubleValue();
      double totalWeight=((Double)itemInfo.get("weight")).doubleValue();
      String productId=(String)itemInfo.get("productId");
      if (pieces < 1) {
        pieces=1;
      }
      double weight=totalWeight / pieces;
      for (int z=1; z <= totalQuantity; z++) {
        double partialQty=pieces > 1 ? 1.000 / pieces : 1;
        for (long x=0; x < pieces; x++) {
          if (weight >= maxWeight) {
            Map<String,Double> newPackage=FastMap.newInstance();
            newPackage.put(productId,Double.valueOf(partialQty));
            packages.add(newPackage);
          }
 else           if (totalWeight > 0) {
            if (packages.size() == 0) {
              packages.add(FastMap.<String,Double>newInstance());
            }
            int packageSize=packages.size();
            boolean addedToPackage=false;
            for (int pi=0; pi < packageSize; pi++) {
              if (!addedToPackage) {
                Map<String,Double> packageMap=packages.get(pi);
                double packageWeight=calcPackageWeight(dctx,packageMap,shippableItemInfo,weight);
                if (packageWeight <= maxWeight) {
                  Double qtyD=(Double)packageMap.get(productId);
                  double qty=qtyD == null ? 0 : qtyD.doubleValue();
                  packageMap.put(productId,Double.valueOf(qty + partialQty));
                  addedToPackage=true;
                }
              }
            }
            if (!addedToPackage) {
              Map<String,Double> packageMap=FastMap.newInstance();
              packageMap.put(productId,Double.valueOf(partialQty));
              packages.add(packageMap);
            }
          }
        }
      }
    }
  }
  return packages;
}
