{
  Delegator delegator=dctx.getDelegator();
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);
  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");
  String resource=(String)shipmentGatewayConfig.get("configProps");
  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsGatewayNotAvailable",locale));
  }
  try {
    GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
    if (shipment == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentNotFoundId",locale) + shipmentId);
    }
    GenericValue shipmentRouteSegment=delegator.findByPrimaryKey("ShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId));
    if (shipmentRouteSegment == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentRouteSegmentNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (!"USPS".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
    }
    GenericValue originAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress");
    if (originAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (!"USA".equals(originAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsRouteSegmentOriginCountryGeoNotInUsa",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destinationAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress");
    if (destinationAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (!"USA".equals(destinationAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsRouteSegmentOriginCountryGeoNotInUsa",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String shipmentMethodTypeId=shipmentRouteSegment.getString("shipmentMethodTypeId");
    String partyId=shipmentRouteSegment.getString("carrierPartyId");
    GenericValue carrierShipmentMethod=delegator.findByPrimaryKey("CarrierShipmentMethod",UtilMisc.toMap("partyId",partyId,"roleTypeId","CARRIER","shipmentMethodTypeId",shipmentMethodTypeId));
    if (carrierShipmentMethod == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsNoCarrierShipmentMethod",UtilMisc.toMap("carrierPartyId",partyId,"shipmentMethodTypeId",shipmentMethodTypeId),locale));
    }
    String serviceType=carrierShipmentMethod.getString("carrierServiceCode");
    if (UtilValidate.isEmpty(serviceType)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsUnableDetermineServiceCode",locale));
    }
    List<GenericValue> shipmentPackageRouteSegList=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"));
    if (UtilValidate.isEmpty(shipmentPackageRouteSegList)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegList) {
      Document requestDocument=createUspsRequestDocument("DeliveryConfirmationV2.0Request",true,delegator,shipmentGatewayConfigId,resource);
      Element requestElement=requestDocument.getDocumentElement();
      UtilXml.addChildElementValue(requestElement,"Option","3",requestDocument);
      UtilXml.addChildElement(requestElement,"ImageParameters",requestDocument);
      if (UtilValidate.isNotEmpty(originAddress.getString("attnName"))) {
        UtilXml.addChildElementValue(requestElement,"FromName",originAddress.getString("attnName"),requestDocument);
        UtilXml.addChildElementValue(requestElement,"FromFirm",originAddress.getString("toName"),requestDocument);
      }
 else {
        UtilXml.addChildElementValue(requestElement,"FromName",originAddress.getString("toName"),requestDocument);
      }
      UtilXml.addChildElementValue(requestElement,"FromAddress1",originAddress.getString("address2"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromAddress2",originAddress.getString("address1"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromCity",originAddress.getString("city"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromState",originAddress.getString("stateProvinceGeoId"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromZip5",originAddress.getString("postalCode"),requestDocument);
      UtilXml.addChildElement(requestElement,"FromZip4",requestDocument);
      if (UtilValidate.isNotEmpty(destinationAddress.getString("attnName"))) {
        UtilXml.addChildElementValue(requestElement,"ToName",destinationAddress.getString("attnName"),requestDocument);
        UtilXml.addChildElementValue(requestElement,"ToFirm",destinationAddress.getString("toName"),requestDocument);
      }
 else {
        UtilXml.addChildElementValue(requestElement,"ToName",destinationAddress.getString("toName"),requestDocument);
      }
      UtilXml.addChildElementValue(requestElement,"ToAddress1",destinationAddress.getString("address2"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToAddress2",destinationAddress.getString("address1"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToCity",destinationAddress.getString("city"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToState",destinationAddress.getString("stateProvinceGeoId"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToZip5",destinationAddress.getString("postalCode"),requestDocument);
      UtilXml.addChildElement(requestElement,"ToZip4",requestDocument);
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage");
      String weightStr=shipmentPackage.getString("weight");
      if (UtilValidate.isEmpty(weightStr)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsWeightNotFound",UtilMisc.toMap("shipmentId",shipmentPackage.getString("shipmentId"),"shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId")),locale));
      }
      BigDecimal weight=BigDecimal.ZERO;
      try {
        weight=new BigDecimal(weightStr);
      }
 catch (      NumberFormatException nfe) {
        nfe.printStackTrace();
      }
      String weightUomId=shipmentPackage.getString("weightUomId");
      if (UtilValidate.isEmpty(weightUomId)) {
        weightUomId="WT_lb";
      }
      if (!"WT_oz".equals(weightUomId)) {
        GenericValue uomConversion=delegator.findByPrimaryKey("UomConversion",UtilMisc.toMap("uomId",weightUomId,"uomIdTo","WT_oz"));
        if (uomConversion == null || UtilValidate.isEmpty(uomConversion.getString("conversionFactor"))) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsWeightUnsupported",UtilMisc.toMap("weightUomId",weightUomId,"shipmentId",shipmentPackage.getString("shipmentId"),"shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"weightUom","WT_oz"),locale));
        }
        weight=weight.multiply(uomConversion.getBigDecimal("conversionFactor"));
      }
      DecimalFormat df=new DecimalFormat("#");
      UtilXml.addChildElementValue(requestElement,"WeightInOunces",df.format(weight.setScale(0,BigDecimal.ROUND_CEILING)),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ServiceType",serviceType,requestDocument);
      UtilXml.addChildElementValue(requestElement,"ImageType","TIF",requestDocument);
      UtilXml.addChildElementValue(requestElement,"AddressServiceRequested","True",requestDocument);
      Document responseDocument=null;
      try {
        responseDocument=sendUspsRequest("DeliveryConfirmationV2",requestDocument,delegator,shipmentGatewayConfigId,resource,locale);
      }
 catch (      UspsRequestException e) {
        Debug.log(e,module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsDeliveryConfirmationSendingError",UtilMisc.toMap("errorString",e.getMessage()),locale));
      }
      Element responseElement=responseDocument.getDocumentElement();
      Element respErrorElement=UtilXml.firstChildElement(responseElement,"Error");
      if (respErrorElement != null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsDeliveryConfirmationResponseError",UtilMisc.toMap("shipmentId",shipmentPackage.getString("shipmentId"),"shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"errorString",UtilXml.childElementValue(respErrorElement,"Description")),locale));
      }
      String labelImageString=UtilXml.childElementValue(responseElement,"DeliveryConfirmationLabel");
      if (UtilValidate.isEmpty(labelImageString)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsDeliveryConfirmationResponseIncompleteElementDeliveryConfirmationLabel",locale));
      }
      shipmentPackageRouteSeg.setBytes("labelImage",Base64.base64Decode(labelImageString.getBytes()));
      String trackingCode=UtilXml.childElementValue(responseElement,"DeliveryConfirmationNumber");
      if (UtilValidate.isEmpty(trackingCode)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsDeliveryConfirmationResponsenIncompleteElementDeliveryConfirmationNumber",locale));
      }
      shipmentPackageRouteSeg.set("trackingCode",trackingCode);
      shipmentPackageRouteSeg.store();
    }
  }
 catch (  GenericEntityException gee) {
    Debug.log(gee,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsDeliveryConfirmationReadingError",UtilMisc.toMap("errorString",gee.getMessage()),locale));
  }
  return ServiceUtil.returnSuccess();
}
