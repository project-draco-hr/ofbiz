{
  GenericDelegator delegator=dctx.getDelegator();
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  String srsKeyString="[" + shipmentId + ","+ shipmentRouteSegmentId+ "]";
  try {
    GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
    if (shipment == null) {
      return ServiceUtil.returnError("Shipment not found with ID " + shipmentId);
    }
    GenericValue shipmentRouteSegment=delegator.findByPrimaryKey("ShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId));
    if (shipmentRouteSegment == null) {
      return ServiceUtil.returnError("ShipmentRouteSegment not found with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    if (!"USPS".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError("The Carrier for ShipmentRouteSegment " + srsKeyString + ", is not USPS");
    }
    GenericValue originAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress");
    if (originAddress == null) {
      return ServiceUtil.returnError("OriginPostalAddress not found for ShipmentRouteSegment [" + shipmentId + ":"+ shipmentRouteSegmentId+ "]");
    }
    if (!"USA".equals(originAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError("ShipmentRouteSeqment " + srsKeyString + " does not originate from a US address");
    }
    GenericValue destinationAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress");
    if (destinationAddress == null) {
      return ServiceUtil.returnError("DestPostalAddress not found for ShipmentRouteSegment " + srsKeyString);
    }
    if (!"USA".equals(destinationAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError("ShipmentRouteSeqment " + srsKeyString + " is not destined for a US address");
    }
    String shipmentMethodTypeId=shipmentRouteSegment.getString("shipmentMethodTypeId");
    String partyId=shipmentRouteSegment.getString("carrierPartyId");
    String csmKeystring="[" + shipmentMethodTypeId + ","+ partyId+ ",CARRIER]";
    GenericValue carrierShipmentMethod=delegator.findByPrimaryKey("CarrierShipmentMethod",UtilMisc.toMap("partyId",partyId,"roleTypeId","CARRIER","shipmentMethodTypeId",shipmentMethodTypeId));
    if (carrierShipmentMethod == null) {
      return ServiceUtil.returnError("CarrierShipmentMethod " + csmKeystring + " not found for ShipmentRouteSegment "+ srsKeyString);
    }
    String serviceType=carrierShipmentMethod.getString("carrierServiceCode");
    if (UtilValidate.isEmpty(serviceType)) {
      return ServiceUtil.returnError("carrierServiceCode not found for CarrierShipmentMethod" + csmKeystring);
    }
    List shipmentPackageRouteSegList=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"));
    if (UtilValidate.isEmpty(shipmentPackageRouteSegList)) {
      return ServiceUtil.returnError("No packages found for ShipmentRouteSegment " + srsKeyString);
    }
    for (Iterator i=shipmentPackageRouteSegList.iterator(); i.hasNext(); ) {
      Document requestDocument=createUspsRequestDocument("DeliveryConfirmationV2.0Request");
      Element requestElement=requestDocument.getDocumentElement();
      UtilXml.addChildElementValue(requestElement,"Option","3",requestDocument);
      UtilXml.addChildElement(requestElement,"ImageParameters",requestDocument);
      if (UtilValidate.isNotEmpty(originAddress.getString("attnName"))) {
        UtilXml.addChildElementValue(requestElement,"FromName",originAddress.getString("attnName"),requestDocument);
        UtilXml.addChildElementValue(requestElement,"FromFirm",originAddress.getString("toName"),requestDocument);
      }
 else {
        UtilXml.addChildElementValue(requestElement,"FromName",originAddress.getString("toName"),requestDocument);
      }
      UtilXml.addChildElementValue(requestElement,"FromAddress1",originAddress.getString("address2"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromAddress2",originAddress.getString("address1"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromCity",originAddress.getString("city"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromState",originAddress.getString("stateProvinceGeoId"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"FromZip5",originAddress.getString("postalCode"),requestDocument);
      UtilXml.addChildElement(requestElement,"FromZip4",requestDocument);
      if (UtilValidate.isNotEmpty(destinationAddress.getString("attnName"))) {
        UtilXml.addChildElementValue(requestElement,"ToName",destinationAddress.getString("attnName"),requestDocument);
        UtilXml.addChildElementValue(requestElement,"ToFirm",destinationAddress.getString("toName"),requestDocument);
      }
 else {
        UtilXml.addChildElementValue(requestElement,"ToName",destinationAddress.getString("toName"),requestDocument);
      }
      UtilXml.addChildElementValue(requestElement,"ToAddress1",destinationAddress.getString("address2"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToAddress2",destinationAddress.getString("address1"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToCity",destinationAddress.getString("city"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToState",destinationAddress.getString("stateProvinceGeoId"),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ToZip5",destinationAddress.getString("postalCode"),requestDocument);
      UtilXml.addChildElement(requestElement,"ToZip4",requestDocument);
      GenericValue shipmentPackageRouteSeg=(GenericValue)i.next();
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage");
      String spKeyString="[" + shipmentPackage.getString("shipmentId") + ","+ shipmentPackage.getString("shipmentPackageSeqId")+ "]";
      String weightStr=shipmentPackage.getString("weight");
      if (UtilValidate.isEmpty(weightStr)) {
        return ServiceUtil.returnError("weight not found for ShipmentPackage " + spKeyString);
      }
      double weight=0;
      try {
        weight=Double.parseDouble(weightStr);
      }
 catch (      NumberFormatException nfe) {
        nfe.printStackTrace();
      }
      String weightUomId=shipmentPackage.getString("weightUomId");
      if (UtilValidate.isEmpty(weightUomId)) {
        weightUomId="WT_lb";
      }
      if (!"WT_oz".equals(weightUomId)) {
        GenericValue uomConversion=delegator.findByPrimaryKey("UomConversion",UtilMisc.toMap("uomId",weightUomId,"uomIdTo","WT_oz"));
        if (uomConversion == null || UtilValidate.isEmpty(uomConversion.getString("conversionFactor"))) {
          return ServiceUtil.returnError("Unsupported weightUom [" + weightUomId + "] for ShipmentPackage "+ spKeyString+ ", could not find a conversion factor for WT_oz");
        }
        weight*=uomConversion.getDouble("conversionFactor").doubleValue();
      }
      DecimalFormat df=new DecimalFormat("#");
      UtilXml.addChildElementValue(requestElement,"WeightInOunces",df.format(Math.ceil(weight)),requestDocument);
      UtilXml.addChildElementValue(requestElement,"ServiceType",serviceType,requestDocument);
      UtilXml.addChildElementValue(requestElement,"ImageType","TIF",requestDocument);
      UtilXml.addChildElementValue(requestElement,"AddressServiceRequested","True",requestDocument);
      Document responseDocument=null;
      try {
        responseDocument=sendUspsRequest("DeliveryConfirmationV2",requestDocument);
      }
 catch (      UspsRequestException e) {
        Debug.log(e,module);
        return ServiceUtil.returnError("Error sending request for USPS Delivery Confirmation service: " + e.getMessage());
      }
      Element responseElement=responseDocument.getDocumentElement();
      Element respErrorElement=UtilXml.firstChildElement(responseElement,"Error");
      if (respErrorElement != null) {
        return ServiceUtil.returnError("The following error was returned by the USPS Delivery Confirmation " + "service for ShipmentPackage " + spKeyString + ": "+ UtilXml.childElementValue(respErrorElement,"Description"));
      }
      String labelImageString=UtilXml.childElementValue(responseElement,"DeliveryConfirmationLabel");
      if (UtilValidate.isEmpty(labelImageString)) {
        return ServiceUtil.returnError("Incomplete response from the USPS Delivery Confirmation service: " + "missing or empty DeliveryConfirmationLabel element");
      }
      shipmentPackageRouteSeg.setBytes("labelImage",Base64.base64Decode(labelImageString.getBytes()));
      String trackingCode=UtilXml.childElementValue(responseElement,"DeliveryConfirmationNumber");
      if (UtilValidate.isEmpty(trackingCode)) {
        return ServiceUtil.returnError("Incomplete response from the USPS Delivery Confirmation service: " + "missing or empty DeliveryConfirmationNumber element");
      }
      shipmentPackageRouteSeg.set("trackingCode",trackingCode);
      shipmentPackageRouteSeg.store();
    }
  }
 catch (  GenericEntityException gee) {
    Debug.log(gee,module);
    return ServiceUtil.returnError("Error reading or writing shipment data for the USPS " + "Delivery Confirmation service: " + gee.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
