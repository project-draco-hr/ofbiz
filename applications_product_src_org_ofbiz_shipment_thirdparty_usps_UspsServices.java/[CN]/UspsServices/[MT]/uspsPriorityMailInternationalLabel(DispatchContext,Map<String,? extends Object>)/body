{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String shipmentGatewayConfigId=(String)context.get("shipmentGatewayConfigId");
  String resource=(String)context.get("configProps");
  GenericValue shipmentRouteSegment=(GenericValue)context.get("shipmentRouteSegment");
  Locale locale=(Locale)context.get("locale");
  Document requestDocument;
  boolean certify=false;
  String test=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"test",resource,"shipment.usps.test");
  if (!"Y".equalsIgnoreCase(test)) {
    requestDocument=createUspsRequestDocument("PriorityMailIntlRequest",false,delegator,shipmentGatewayConfigId,resource);
  }
 else {
    requestDocument=createUspsRequestDocument("PriorityMailIntlCertifyRequest",false,delegator,shipmentGatewayConfigId,resource);
    certify=true;
  }
  Element rootElement=requestDocument.getDocumentElement();
  GenericValue originAddress=null;
  GenericValue originTelecomNumber=null;
  GenericValue destinationAddress=null;
  GenericValue destinationProvince=null;
  GenericValue destinationCountry=null;
  GenericValue destinationTelecomNumber=null;
  List<GenericValue> shipmentPackageRouteSegs=null;
  try {
    originAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress");
    originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber");
    destinationAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress");
    if (destinationAddress != null) {
      destinationProvince=destinationAddress.getRelatedOne("StateProvinceGeo");
      destinationCountry=destinationAddress.getRelatedOne("CountryGeo");
    }
    destinationTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber");
    shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (originAddress == null || originTelecomNumber == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsPriorityMailLabelOriginAddressMissing",locale));
  }
  String fromAttnName=originAddress.getString("attnName");
  String fromFirstName=StringUtils.defaultIfEmpty(StringUtils.substringBefore(fromAttnName," "),fromAttnName);
  String fromLastName=StringUtils.defaultIfEmpty(StringUtils.substringAfter(fromAttnName," "),fromAttnName);
  UtilXml.addChildElementValue(rootElement,"FromFirstName",fromFirstName,requestDocument);
  UtilXml.addChildElementValue(rootElement,"FromLastName",fromLastName,requestDocument);
  UtilXml.addChildElementValue(rootElement,"FromFirm",originAddress.getString("toName"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"FromAddress1",originAddress.getString("address2"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"FromAddress2",originAddress.getString("address1"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"FromCity",originAddress.getString("city"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"FromState",originAddress.getString("stateProvinceGeoId"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"FromZip5",originAddress.getString("postalCode"),requestDocument);
  String fromPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");
  fromPhoneNumber=StringUtil.removeNonNumeric(fromPhoneNumber);
  UtilXml.addChildElementValue(rootElement,"FromPhone",fromPhoneNumber,requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToName",destinationAddress.getString("attnName"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToFirm",destinationAddress.getString("toName"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToAddress1",destinationAddress.getString("address1"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToAddress2",destinationAddress.getString("address2"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToCity",destinationAddress.getString("city"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToProvince",destinationProvince.getString("geoName"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToCountry",destinationCountry.getString("geoName"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToPostalCode",destinationAddress.getString("postalCode"),requestDocument);
  UtilXml.addChildElementValue(rootElement,"ToPOBoxFlag","N",requestDocument);
  String toPhoneNumber=destinationTelecomNumber.getString("countryCode") + destinationTelecomNumber.getString("areaCode") + destinationTelecomNumber.getString("contactNumber");
  UtilXml.addChildElementValue(rootElement,"ToPhone",toPhoneNumber,requestDocument);
  UtilXml.addChildElementValue(rootElement,"NonDeliveryOption","RETURN",requestDocument);
  for (  GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {
    Document packageDocument=(Document)requestDocument.cloneNode(true);
    String fromCustomsReference=shipmentRouteSegment.getString("shipmentId") + ":" + shipmentRouteSegment.getString("shipmentRouteSegmentId");
    fromCustomsReference=StringUtils.join(UtilMisc.toList(shipmentRouteSegment.get("shipmentId"),shipmentPackageRouteSeg.get("shipmentPackageSeqId"),shipmentRouteSegment.get("shipmentRouteSegementId")),':');
    UtilXml.addChildElementValue(rootElement,"FromCustomsReference",fromCustomsReference,packageDocument);
    String container="VARIABLE";
    String packageTypeCode=null;
    GenericValue shipmentPackage=null;
    List<GenericValue> shipmentPackageContents=null;
    try {
      shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage");
      shipmentPackageContents=shipmentPackage.getRelated("ShipmentPackageContent");
      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType");
      if (shipmentBoxType != null) {
        GenericValue carrierShipmentBoxType=EntityUtil.getFirst(shipmentBoxType.getRelatedByAnd("CarrierShipmentBoxType",UtilMisc.toMap("partyId","USPS")));
        if (carrierShipmentBoxType != null) {
          packageTypeCode=carrierShipmentBoxType.getString("packageTypeCode");
          List<String> supportedPackageTypeCodes=UtilMisc.toList("LGFLATRATEBOX","SMFLATRATEBOX","FLATRATEBOX","MDFLATRATEBOX","FLATRATEENV");
          if (supportedPackageTypeCodes.contains(packageTypeCode)) {
            container=packageTypeCode;
          }
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    UtilXml.addChildElementValue(rootElement,"Container",container,packageDocument);
    UtilXml.addChildElementValue(rootElement,"Postage","",packageDocument);
    BigDecimal packageWeight=shipmentPackage.getBigDecimal("weight");
    String weightUomId=shipmentPackage.getString("weightUomId");
    BigDecimal packageWeightPounds=UomWorker.convertUom(packageWeight,weightUomId,"WT_lb",dispatcher);
    Integer[] packagePoundsOunces=convertPoundsToPoundsOunces(packageWeightPounds);
    UtilXml.addChildElementValue(rootElement,"GrossPounds",packagePoundsOunces[0].toString(),packageDocument);
    UtilXml.addChildElementValue(rootElement,"GrossOunces",packagePoundsOunces[1].toString(),packageDocument);
    UtilXml.addChildElementValue(rootElement,"ContentType","MERCHANDISE",packageDocument);
    UtilXml.addChildElementValue(rootElement,"Agreement","N",packageDocument);
    UtilXml.addChildElementValue(rootElement,"ImageType","PDF",packageDocument);
    UtilXml.addChildElementValue(rootElement,"ImageType","ALLINONEFILE",packageDocument);
    UtilXml.addChildElementValue(rootElement,"CustomerRefNo",fromCustomsReference,packageDocument);
    Element shippingContents=UtilXml.addChildElement(rootElement,"ShippingContents",packageDocument);
    for (    GenericValue shipmentPackageContent : shipmentPackageContents) {
      Element itemDetail=UtilXml.addChildElement(shippingContents,"ItemDetail",packageDocument);
      GenericValue product=null;
      GenericValue originGeo=null;
      try {
        GenericValue shipmentItem=shipmentPackageContent.getRelatedOne("ShipmentItem");
        product=shipmentItem.getRelatedOne("Product");
        originGeo=product.getRelatedOne("OriginGeo");
      }
 catch (      GenericEntityException e) {
        Debug.log(e,module);
      }
      UtilXml.addChildElementValue(itemDetail,"Description",product.getString("productName"),packageDocument);
      UtilXml.addChildElementValue(itemDetail,"Quantity",shipmentPackageContent.getBigDecimal("quantity").setScale(0,BigDecimal.ROUND_CEILING).toPlainString(),packageDocument);
      String packageContentValue=ShipmentWorker.getShipmentPackageContentValue(shipmentPackageContent).setScale(2,BigDecimal.ROUND_HALF_UP).toPlainString();
      UtilXml.addChildElementValue(itemDetail,"Value",packageContentValue,packageDocument);
      BigDecimal productWeight=ProductWorker.getProductWeight(product,"WT_lbs",delegator,dispatcher);
      Integer[] productPoundsOunces=convertPoundsToPoundsOunces(productWeight);
      UtilXml.addChildElementValue(itemDetail,"NetPounds",productPoundsOunces[0].toString(),packageDocument);
      UtilXml.addChildElementValue(itemDetail,"NetOunces",productPoundsOunces[1].toString(),packageDocument);
      UtilXml.addChildElementValue(itemDetail,"HSTariffNumber","",packageDocument);
      UtilXml.addChildElementValue(itemDetail,"CountryOfOrigin",originGeo.getString("geoName"),packageDocument);
    }
    Document responseDocument=null;
    String api=certify ? "PriorityMailIntlCertify" : "PriorityMailIntl";
    try {
      responseDocument=sendUspsRequest(api,requestDocument,delegator,shipmentGatewayConfigId,resource,locale);
    }
 catch (    UspsRequestException e) {
      Debug.log(e,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsPriorityMailLabelSendingError",UtilMisc.toMap("errorString",e.getMessage()),locale));
    }
    Element responseElement=responseDocument.getDocumentElement();
    String labelImageString=UtilXml.childElementValue(responseElement,"LabelImage");
    if (UtilValidate.isEmpty(labelImageString)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsPriorityMailLabelResponseIncompleteElementLabelImage",locale));
    }
    shipmentPackageRouteSeg.setBytes("labelImage",Base64.base64Decode(labelImageString.getBytes()));
    String trackingCode=UtilXml.childElementValue(responseElement,"BarcodeNumber");
    if (UtilValidate.isEmpty(trackingCode)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUspsPriorityMailLabelResponseIncompleteElementBarcodeNumber",locale));
    }
    shipmentPackageRouteSeg.set("trackingCode",trackingCode);
    try {
      shipmentPackageRouteSeg.store();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
  }
  return ServiceUtil.returnSuccess();
}
