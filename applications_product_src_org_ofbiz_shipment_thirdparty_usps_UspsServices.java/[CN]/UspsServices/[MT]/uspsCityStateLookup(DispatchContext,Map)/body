{
  Document requestDocument=createUspsRequestDocument("CityStateLookupRequest");
  Element zipCodeElement=UtilXml.addChildElement(requestDocument.getDocumentElement(),"ZipCode",requestDocument);
  zipCodeElement.setAttribute("ID","0");
  String zipCode=((String)context.get("zip5")).trim();
  UtilXml.addChildElementValue(zipCodeElement,"Zip5",zipCode,requestDocument);
  Document responseDocument=null;
  try {
    responseDocument=sendUspsRequest("CityStateLookup",requestDocument);
  }
 catch (  UspsRequestException e) {
    Debug.log(e,module);
    return ServiceUtil.returnError("Error sending request for USPS City/State Lookup service: " + e.getMessage());
  }
  Element respAddressElement=UtilXml.firstChildElement(responseDocument.getDocumentElement(),"ZipCode");
  if (respAddressElement == null) {
    return ServiceUtil.returnError("Incomplete response from USPS City/State Lookup service: no ZipCode element found");
  }
  Element respErrorElement=UtilXml.firstChildElement(respAddressElement,"Error");
  if (respErrorElement != null) {
    return ServiceUtil.returnError("The following error was returned by the USPS City/State Lookup service: " + UtilXml.childElementValue(respErrorElement,"Description"));
  }
  Map result=ServiceUtil.returnSuccess();
  String city=UtilXml.childElementValue(respAddressElement,"City");
  if (UtilValidate.isEmpty(city)) {
    return ServiceUtil.returnError("Incomplete response from USPS City/State Lookup service: no City element found");
  }
  result.put("city",city);
  String state=UtilXml.childElementValue(respAddressElement,"State");
  if (UtilValidate.isEmpty(state)) {
    return ServiceUtil.returnError("Incomplete response from USPS City/State Lookup service: no State element found");
  }
  result.put("state",state);
  return result;
}
