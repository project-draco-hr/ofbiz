{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String contentId=request.getParameter("contentId");
  EntityCondition condition=EntityCondition.makeCondition(EntityCondition.makeCondition(UtilMisc.toMap("contentId",contentId)),EntityUtil.getFilterByDateExpr());
  List<GenericValue> assocs=delegator.findList("ContentAssoc",condition,null,null,null,false);
  List<Map<String,Object>> nodes=new LinkedList<Map<String,Object>>();
  for (  GenericValue assoc : assocs) {
    nodes.add(getTreeNode(assoc));
  }
  Collections.sort(nodes,new Comparator<Map<String,Object>>(){
    @Override public int compare(    Map<String,Object> node1,    Map<String,Object> node2){
      Map<String,Object> data1=UtilGenerics.cast(node1.get("data"));
      Map<String,Object> data2=UtilGenerics.cast(node2.get("data"));
      if (data1 == null || data2 == null) {
        return 0;
      }
      String title1=(String)data1.get("title");
      String title2=(String)data2.get("title");
      if (title1 == null || title2 == null) {
        return 0;
      }
      return title1.toLowerCase().compareTo(title2.toLowerCase());
    }
  }
);
  IOUtils.write(JSON.from(nodes).toString(),response.getOutputStream());
  return "success";
}
