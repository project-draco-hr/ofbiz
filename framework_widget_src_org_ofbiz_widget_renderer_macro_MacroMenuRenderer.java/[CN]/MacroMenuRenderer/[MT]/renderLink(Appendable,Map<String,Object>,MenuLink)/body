{
  Map<String,Object> parameters=new HashMap<String,Object>();
  String target=link.getTarget(context);
  ModelMenuItem menuItem=link.getLinkMenuItem();
  if (isDisableIfEmpty(menuItem,context)) {
    target=null;
  }
  parameters.put("id",link.getId(context));
  parameters.put("style",link.getStyle(context));
  parameters.put("name",link.getName(context));
  parameters.put("text",link.getText(context));
  parameters.put("targetWindow",link.getTargetWindow(context));
  StringBuffer uniqueItemName=new StringBuffer(menuItem.getModelMenu().getName());
  uniqueItemName.append("_").append(menuItem.getName()).append("_LF_").append(UtilMisc.<String>addToBigDecimalInMap(context,"menuUniqueItemIndex",BigDecimal.ONE));
  if (menuItem.getModelMenu().getExtraIndex(context) != null) {
    uniqueItemName.append("_").append(menuItem.getModelMenu().getExtraIndex(context));
  }
  if (context.containsKey("itemIndex")) {
    if (context.containsKey("parentItemIndex")) {
      uniqueItemName.append(context.get("parentItemIndex")).append("_").append(context.get("itemIndex"));
    }
 else {
      uniqueItemName.append("_").append(context.get("itemIndex"));
    }
  }
  parameters.put("uniqueItemName",uniqueItemName.toString());
  String linkType="";
  if (UtilValidate.isNotEmpty(target)) {
    linkType=WidgetWorker.determineAutoLinkType(link.getLinkType(),target,link.getUrlMode(),request);
  }
  parameters.put("linkType",linkType);
  String linkUrl="";
  String actionUrl="";
  StringBuilder targetParameters=new StringBuilder();
  if ("hidden-form".equals(linkType) || "layered-modal".equals(linkType)) {
    StringBuilder sb=new StringBuilder();
    WidgetWorker.buildHyperlinkUrl(sb,target,link.getUrlMode(),null,link.getPrefix(context),link.getFullPath(),link.getSecure(),link.getEncode(),request,response,context);
    actionUrl=sb.toString();
    targetParameters.append("[");
    for (    Map.Entry<String,String> parameter : link.getParameterMap(context).entrySet()) {
      if (targetParameters.length() > 1) {
        targetParameters.append(",");
      }
      targetParameters.append("{'name':'");
      targetParameters.append(parameter.getKey());
      targetParameters.append("'");
      targetParameters.append(",'value':'");
      targetParameters.append(parameter.getValue());
      targetParameters.append("'}");
    }
    targetParameters.append("]");
  }
  if (targetParameters.length() == 0) {
    targetParameters.append("\"\"");
  }
  if (UtilValidate.isNotEmpty(target)) {
    if (!"hidden-form".equals(linkType)) {
      StringBuilder sb=new StringBuilder();
      WidgetWorker.buildHyperlinkUrl(sb,target,link.getUrlMode(),"layered-modal".equals(linkType) ? null : link.getParameterMap(context),link.getPrefix(context),link.getFullPath(),link.getSecure(),link.getEncode(),request,response,context);
      linkUrl=sb.toString();
    }
  }
  parameters.put("linkUrl",linkUrl);
  parameters.put("actionUrl",actionUrl);
  parameters.put("parameterList",targetParameters);
  String imgStr="";
  Image img=link.getImage();
  if (img != null) {
    StringWriter sw=new StringWriter();
    renderImage(sw,context,img);
    imgStr=sw.toString();
  }
  parameters.put("imgStr",imgStr);
  try {
    executeMacro(writer,"renderLink",parameters);
  }
 catch (  TemplateException e) {
    throw new IOException(e);
  }
}
