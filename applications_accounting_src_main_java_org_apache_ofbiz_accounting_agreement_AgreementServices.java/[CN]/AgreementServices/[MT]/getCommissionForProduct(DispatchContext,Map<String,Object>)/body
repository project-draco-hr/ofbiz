{
  Delegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  List<Map<String,Object>> commissions=new LinkedList<Map<String,Object>>();
  try {
    BigDecimal amount=((BigDecimal)context.get("amount"));
    BigDecimal quantity=(BigDecimal)context.get("quantity");
    quantity=quantity == null ? BigDecimal.ONE : quantity;
    boolean negative=amount.signum() < 0;
    amount=amount.abs();
    quantity=quantity.abs();
    String productId=(String)context.get("productId");
    String invoiceItemTypeId=(String)context.get("invoiceItemTypeId");
    String invoiceItemSeqId=(String)context.get("invoiceItemSeqId");
    String invoiceId=(String)context.get("invoiceId");
    List<GenericValue> agreementItems=EntityQuery.use(delegator).from("AgreementItemAndProductAppl").where("productId",productId,"agreementItemTypeId","AGREEMENT_COMMISSION").cache().filterByDate().queryList();
    if (agreementItems.size() == 0) {
      GenericValue productAssoc=EntityQuery.use(delegator).from("ProductAssoc").where("productIdTo",productId,"productAssocTypeId","PRODUCT_VARIANT").cache().filterByDate().queryFirst();
      if (productAssoc != null) {
        agreementItems=EntityQuery.use(delegator).from("AgreementItemAndProductAppl").where("productId",productAssoc.getString("productId"),"agreementItemTypeId","AGREEMENT_COMMISSION").cache().filterByDate().queryList();
      }
    }
    for (    GenericValue agreementItem : agreementItems) {
      List<GenericValue> terms=EntityQuery.use(delegator).from("AgreementTerm").where("agreementId",agreementItem.getString("agreementId"),"agreementItemSeqId",agreementItem.getString("agreementItemSeqId"),"invoiceItemTypeId",invoiceItemTypeId).cache().queryList();
      if (terms.size() > 0) {
        BigDecimal commission=ZERO;
        BigDecimal min=new BigDecimal("-1e12");
        BigDecimal max=new BigDecimal("1e12");
        long days=-1;
        for (        GenericValue term : terms) {
          String termTypeId=term.getString("termTypeId");
          BigDecimal termValue=term.getBigDecimal("termValue");
          if (termValue != null) {
            if (termTypeId.equals("FIN_COMM_FIXED")) {
              commission=commission.add(termValue);
            }
 else             if (termTypeId.equals("FIN_COMM_VARIABLE")) {
              commission=commission.add(termValue.multiply(amount).divide(new BigDecimal("100"),12,rounding));
            }
 else             if (termTypeId.equals("FIN_COMM_MIN")) {
              min=termValue;
            }
 else             if (termTypeId.equals("FIN_COMM_MAX")) {
              max=termValue;
            }
          }
          Long termDays=term.getLong("termDays");
          if (termDays != null) {
            if (days > 0) {
              days=Math.min(days,termDays.longValue());
            }
 else {
              days=termDays.longValue();
            }
          }
        }
        if (commission.compareTo(min) < 0)         commission=min;
        if (commission.compareTo(max) > 0)         commission=max;
        commission=negative ? commission.negate() : commission;
        commission=commission.setScale(decimals,rounding);
        Map<String,Object> partyCommissionResult=UtilMisc.toMap("partyIdFrom",agreementItem.getString("partyIdFrom"),"partyIdTo",agreementItem.getString("partyIdTo"),"invoiceItemSeqId",invoiceItemSeqId,"invoiceId",invoiceId,"commission",commission,"quantity",quantity,"currencyUomId",agreementItem.getString("currencyUomId"),"productId",productId);
        if (days >= 0) {
          partyCommissionResult.put("days",Long.valueOf(days));
        }
        if (!commissions.contains(partyCommissionResult)) {
          commissions.add(partyCommissionResult);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage("CommonUiLabels","CommonDatabaseProblem",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  return UtilMisc.toMap("commissions",commissions,ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
}
