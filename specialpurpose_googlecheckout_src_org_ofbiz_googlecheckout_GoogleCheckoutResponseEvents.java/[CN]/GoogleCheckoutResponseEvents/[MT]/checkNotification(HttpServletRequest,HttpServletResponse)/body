{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  GoogleCheckoutHelper helper=new GoogleCheckoutHelper(dispatcher,delegator);
  Document document=null;
  try {
    document=Utils.newDocumentFromInputStream(request.getInputStream());
  }
 catch (  CheckoutException e) {
    Debug.logError(e,module);
    sendResponse(response,null,e);
  }
catch (  IOException e) {
    Debug.logError(e,module);
    sendResponse(response,null,e);
  }
  if (document != null) {
    String nodeValue=document.getDocumentElement().getNodeName();
    if ("new-order-notification".equals(nodeValue)) {
      NewOrderNotification info=new NewOrderNotification(document);
      String serialNumber=info.getSerialNumber();
      try {
        helper.createOrder(info,ProductStoreWorker.getProductStoreId(request),ProductStoreWorker.getStoreLocale(request));
        sendResponse(response,serialNumber,null);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        sendResponse(response,serialNumber,e);
        return null;
      }
    }
 else     if ("order-state-change-notification".equals(nodeValue)) {
      OrderStateChangeNotification info=new OrderStateChangeNotification(document);
      String serialNumber=info.getSerialNumber();
      try {
        helper.processStateChange(info);
        sendResponse(response,serialNumber,null);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        sendResponse(response,serialNumber,e);
        return null;
      }
    }
 else     if ("risk-information-notification".equals(nodeValue)) {
      RiskInformationNotification info=new RiskInformationNotification(document);
      String serialNumber=info.getSerialNumber();
      try {
        helper.processRiskNotification(info);
        sendResponse(response,serialNumber,null);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        sendResponse(response,serialNumber,e);
        return null;
      }
    }
 else     if ("authorization-amount-notification".equals(nodeValue)) {
      AuthorizationAmountNotification info=new AuthorizationAmountNotification(document);
      String serialNumber=info.getSerialNumber();
      try {
        helper.processAuthNotification(info);
        sendResponse(response,serialNumber,null);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        sendResponse(response,serialNumber,e);
        return null;
      }
    }
 else     if ("charge-amount-notification".equals(nodeValue)) {
      ChargeAmountNotification info=new ChargeAmountNotification(document);
      String serialNumber=info.getSerialNumber();
      try {
        helper.processChargeNotification(info);
        sendResponse(response,serialNumber,null);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        sendResponse(response,serialNumber,e);
        return null;
      }
    }
 else     if ("chargeback-amount-notification".equals(nodeValue)) {
      ChargebackAmountNotification info=new ChargebackAmountNotification(document);
      String serialNumber=info.getSerialNumber();
      try {
        helper.processChargeBackNotification(info);
        sendResponse(response,serialNumber,null);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        sendResponse(response,serialNumber,e);
        return null;
      }
    }
 else     if ("refund-amount-notification".equals(nodeValue)) {
      RefundAmountNotification info=new RefundAmountNotification(document);
      String serialNumber=info.getSerialNumber();
      try {
        helper.processRefundNotification(info);
        sendResponse(response,serialNumber,null);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        sendResponse(response,serialNumber,e);
        return null;
      }
    }
 else {
      Debug.logWarning("Unsupported document type submitted by Google; [" + nodeValue + "] has not yet been implemented.",module);
    }
  }
  return null;
}
