{
  List<Object> messages=errorListAcsr.get(methodContext);
  if (messages == null) {
    messages=FastList.newInstance();
    errorListAcsr.put(methodContext,messages);
  }
  String serviceName=methodContext.expandString(this.serviceName);
  Map<String,? extends Object> fromMap=mapAcsr.get(methodContext);
  if (fromMap == null) {
    Debug.logWarning("The from map in set-service-field was not found with name: " + mapAcsr,module);
    return true;
  }
  Map<String,Object> toMap=toMapAcsr.get(methodContext);
  if (toMap == null) {
    toMap=FastMap.newInstance();
    toMapAcsr.put(methodContext,toMap);
  }
  LocalDispatcher dispatcher=methodContext.getDispatcher();
  ModelService modelService=null;
  try {
    modelService=dispatcher.getDispatchContext().getModelService(serviceName);
  }
 catch (  GenericServiceException e) {
    String errMsg="In set-service-fields could not get service definition for service name [" + serviceName + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  for (  ModelParam modelParam : modelService.getInModelParamList()) {
    if (fromMap.containsKey(modelParam.name)) {
      Object value=fromMap.get(modelParam.name);
      if (UtilValidate.isNotEmpty(modelParam.type)) {
        try {
          value=ObjectType.simpleTypeConvert(value,modelParam.type,null,methodContext.getTimeZone(),methodContext.getLocale(),true);
        }
 catch (        GeneralException e) {
          String errMsg="Could not convert field value for the parameter/attribute: [" + modelParam.name + "] on the ["+ serviceName+ "] service to the ["+ modelParam.type+ "] type for the value ["+ value+ "]: "+ e.toString();
          Debug.logError(e,errMsg,module);
          messages.add(errMsg);
          value=null;
        }
      }
      toMap.put(modelParam.name,value);
    }
  }
  return true;
}
