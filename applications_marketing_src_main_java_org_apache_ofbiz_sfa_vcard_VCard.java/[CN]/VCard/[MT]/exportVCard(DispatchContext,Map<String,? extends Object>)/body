{
  Delegator delegator=dctx.getDelegator();
  String partyId=(String)context.get("partyId");
  Locale locale=(Locale)context.get("locale");
  File file=null;
  try {
    ezvcard.VCard vcard=new ezvcard.VCard();
    StructuredName structuredName=new StructuredName();
    GenericValue person=EntityQuery.use(delegator).from("Person").where("partyId",partyId).queryOne();
    if (person != null) {
      if (UtilValidate.isNotEmpty(person.getString("firstName")))       structuredName.setGiven(person.getString("firstName"));
      if (UtilValidate.isNotEmpty(person.getString("lastName")))       structuredName.setFamily(person.getString("lastName"));
      vcard.setStructuredName(structuredName);
    }
    String fullName=PartyHelper.getPartyName(delegator,partyId,false);
    vcard.setFormattedName(fullName);
    GenericValue postalAddress=PartyWorker.findPartyLatestPostalAddress(partyId,delegator);
    if (postalAddress != null) {
      Address address=new Address();
      address.setStreetAddress(postalAddress.getString("address1"));
      address.setLocality(postalAddress.getString("city"));
      address.setPostalCode(postalAddress.getString("postalCode"));
      GenericValue state=postalAddress.getRelatedOne("StateProvinceGeo",false);
      if (UtilValidate.isNotEmpty(state)) {
        address.setRegion(state.getString("geoName"));
      }
      GenericValue countryGeo=postalAddress.getRelatedOne("CountryGeo",false);
      if (UtilValidate.isNotEmpty(countryGeo)) {
        String country=postalAddress.getRelatedOne("CountryGeo",false).getString("geoName");
        address.setCountry(country);
        address.getTypes().add(AddressType.WORK);
        ;
      }
      vcard.addAddress(address);
    }
    GenericValue telecomNumber=PartyWorker.findPartyLatestTelecomNumber(partyId,delegator);
    if (UtilValidate.isNotEmpty(telecomNumber)) {
      Telephone tel=new Telephone(telecomNumber.getString("areaCode") + telecomNumber.getString("contactNumber"));
      tel.getTypes().add(TelephoneType.WORK);
      vcard.addTelephoneNumber(tel);
    }
    GenericValue emailAddress=PartyWorker.findPartyLatestContactMech(partyId,"EMAIL_ADDRESS",delegator);
    if (emailAddress != null && UtilValidate.isNotEmpty(emailAddress.getString("infoString"))) {
      vcard.addEmail(new Email(emailAddress.getString("infoString")));
    }
    String saveToDirectory=EntityUtilProperties.getPropertyValue("sfa","save.outgoing.directory","",delegator);
    if (UtilValidate.isEmpty(saveToDirectory)) {
      saveToDirectory=System.getProperty("ofbiz.home");
    }
    String saveToFilename=fullName + ".vcf";
    file=FileUtil.getFile(saveToDirectory + "/" + saveToFilename);
    Ezvcard.write(vcard).go(file);
  }
 catch (  FileNotFoundException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"SfaExportVCardErrorOpeningFile",UtilMisc.toMap("errorString",file.getAbsolutePath()),locale));
  }
catch (  IOException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"SfaExportVCardErrorWritingFile",UtilMisc.toMap("errorString",file.getAbsolutePath()),locale));
  }
catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"SfaExportVCardError",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  return ServiceUtil.returnSuccess();
}
