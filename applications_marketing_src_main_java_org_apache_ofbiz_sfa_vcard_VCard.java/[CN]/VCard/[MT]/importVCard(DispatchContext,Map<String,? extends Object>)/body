{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  ByteBuffer byteBuffer=(ByteBuffer)context.get("infile");
  byte[] inputByteArray=byteBuffer.array();
  InputStream in=new ByteArrayInputStream(inputByteArray);
  Map<String,Object> serviceCtx=new HashMap<String,Object>();
  boolean isGroup=false;
  List<Map<String,String>> partiesCreated=new ArrayList<Map<String,String>>();
  List<Map<String,String>> partiesExist=new ArrayList<Map<String,String>>();
  String partyName="";
  try (VCardReader vCardReader=new VCardReader(in)){
    ezvcard.VCard vcard=null;
    while ((vcard=vCardReader.readNext()) != null) {
      FormattedName formattedName=vcard.getFormattedName();
      if (formattedName != null) {
        String refCardId=formattedName.getValue();
        GenericValue partyIdentification=EntityQuery.use(delegator).from("PartyIdentification").where("partyIdentificationTypeId","VCARD_FN_ORIGIN","idValue",refCardId).queryFirst();
        if (partyIdentification != null) {
          partiesExist.add(UtilMisc.toMap("partyId",(String)partyIdentification.get("partyId")));
          continue;
        }
      }
      isGroup=false;
      if (vcard.getKind() != null)       isGroup=vcard.getKind().isGroup();
      StructuredName structuredName=vcard.getStructuredName();
      if (UtilValidate.isEmpty(structuredName))       continue;
      if (!isGroup) {
        serviceCtx.put("firstName",structuredName.getGiven());
        serviceCtx.put("lastName",structuredName.getFamily());
        partyName=structuredName.getGiven() + " " + structuredName.getFamily();
      }
      for (      Address address : vcard.getAddresses()) {
        boolean workAddress=false;
        for (        AddressType addressType : address.getTypes()) {
          if (AddressType.PREF.equals(addressType) || AddressType.WORK.equals(addressType)) {
            workAddress=true;
            break;
          }
        }
        if (!workAddress)         continue;
        serviceCtx.put("address1",address.getStreetAddressFull());
        serviceCtx.put("city",address.getLocality());
        serviceCtx.put("postalCode",address.getPostalCode());
        GenericValue countryGeo=EntityQuery.use(delegator).from("Geo").where(EntityCondition.makeCondition("geoTypeId",EntityOperator.EQUALS,"COUNTRY"),EntityCondition.makeCondition("geoName",EntityOperator.LIKE,address.getCountry())).cache().queryFirst();
        if (countryGeo != null) {
          serviceCtx.put("countryGeoId",countryGeo.get("geoId"));
        }
        GenericValue stateGeo=EntityQuery.use(delegator).from("Geo").where(EntityCondition.makeCondition("geoTypeId",EntityOperator.EQUALS,"STATE"),EntityCondition.makeCondition("geoName",EntityOperator.LIKE,address.getRegion())).cache().queryFirst();
        if (stateGeo != null) {
          serviceCtx.put("stateProvinceGeoId",stateGeo.get("geoId"));
        }
      }
      int nbEmailAddr=(vcard.getEmails() != null) ? vcard.getEmails().size() : 0;
      for (      Email email : vcard.getEmails()) {
        if (nbEmailAddr > 1) {
          boolean workEmail=false;
          for (          EmailType emailType : email.getTypes()) {
            if (EmailType.PREF.equals(emailType) || EmailType.WORK.equals(emailType)) {
              workEmail=true;
              break;
            }
          }
          if (!workEmail)           continue;
        }
        String emailAddr=email.getValue();
        if (UtilValidate.isEmail(emailAddr)) {
          serviceCtx.put("emailAddress",emailAddr);
        }
 else {
          String emailFormatErrMsg=UtilProperties.getMessage(resourceError,"SfaImportVCardEmailFormatError",locale);
          vCardReader.close();
          return ServiceUtil.returnError(structuredName.getGiven() + " " + structuredName.getFamily()+ " has "+ emailFormatErrMsg);
        }
      }
      int nbPhone=(vcard.getTelephoneNumbers() != null) ? vcard.getTelephoneNumbers().size() : 0;
      for (      Telephone phone : vcard.getTelephoneNumbers()) {
        if (nbPhone > 1) {
          boolean workPhone=false;
          for (          TelephoneType phoneType : phone.getTypes()) {
            if (TelephoneType.PREF.equals(phoneType) || TelephoneType.WORK.equals(phoneType)) {
              workPhone=true;
              break;
            }
          }
          if (!workPhone)           continue;
        }
        String phoneAddr=phone.getText();
        boolean internationalPhone=phoneAddr.startsWith("+") || phoneAddr.startsWith("00");
        phoneAddr=StringUtil.removeNonNumeric(phoneAddr);
        int indexLocal=0;
        if (internationalPhone) {
          indexLocal=4;
          if (!phoneAddr.startsWith("00")) {
            phoneAddr=phoneAddr.concat("00");
          }
          serviceCtx.put("areaCode",phoneAddr.substring(0,indexLocal));
        }
        serviceCtx.put("contactNumber",phoneAddr.substring(indexLocal));
      }
      GenericValue userLogin=(GenericValue)context.get("userLogin");
      serviceCtx.put("userLogin",userLogin);
      String serviceName=(String)context.get("serviceName");
      Map<String,Object> serviceContext=UtilGenerics.cast(context.get("serviceContext"));
      if (UtilValidate.isNotEmpty(serviceContext)) {
        for (        Map.Entry<String,Object> entry : serviceContext.entrySet()) {
          serviceCtx.put(entry.getKey(),entry.getValue());
        }
      }
      Map<String,Object> resp=dispatcher.runSync(serviceName,serviceCtx);
      partiesCreated.add(UtilMisc.toMap("partyId",(String)resp.get("partyId")));
      if (formattedName != null) {
        Map<String,Object> createPartyIdentificationMap=dctx.makeValidContext("createPartyIdentification","IN",context);
        createPartyIdentificationMap.put("partyId",resp.get("partyId"));
        createPartyIdentificationMap.put("partyIdentificationTypeId","VCARD_FN_ORIGIN");
        createPartyIdentificationMap.put("idValue",formattedName.getValue());
        resp=dispatcher.runSync("createPartyIdentification",createPartyIdentificationMap);
      }
    }
  }
 catch (  IOException|GenericEntityException|GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"SfaImportVCardError",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  result.put("partiesCreated",partiesCreated);
  result.put("partiesExist",partiesExist);
  return result;
}
