{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String productId=(String)context.get("productId");
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  BigDecimal amount=(BigDecimal)context.get("amount");
  String fromDateStr=(String)context.get("fromDate");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  if (quantity == null) {
    quantity=BigDecimal.ONE;
  }
  if (amount == null) {
    amount=BigDecimal.ZERO;
  }
  Date fromDate=null;
  if (UtilValidate.isNotEmpty(fromDateStr)) {
    try {
      fromDate=Timestamp.valueOf(fromDateStr);
    }
 catch (    Exception e) {
    }
  }
  if (fromDate == null) {
    fromDate=new Date();
  }
  BOMTree tree=null;
  List<BOMNode> components=new LinkedList<BOMNode>();
  List<BOMNode> notAssembledComponents=new LinkedList<BOMNode>();
  try {
    tree=new BOMTree(productId,"MANUF_COMPONENT",fromDate,BOMTree.EXPLOSION_MANUFACTURING,delegator,dispatcher,userLogin);
    tree.setRootQuantity(quantity);
    tree.setRootAmount(amount);
    tree.print(components);
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorCreatingBillOfMaterialsTree",UtilMisc.toMap("errorString",gee.getMessage()),locale));
  }
  for (  BOMNode oneComponent : components) {
    if (!oneComponent.isManufactured()) {
      notAssembledComponents.add(oneComponent);
    }
  }
  result.put("notAssembledComponents",notAssembledComponents);
  return result;
}
