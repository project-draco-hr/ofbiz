{
  List orderContactMechValueMaps=new LinkedList();
  Iterator allOrderContactMechs=null;
  try {
    Collection tempCol=delegator.findByAnd("OrderContactMech",UtilMisc.toMap("orderId",orderId),UtilMisc.toList("contactMechPurposeTypeId"));
    allOrderContactMechs=UtilMisc.toIterator(tempCol);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  while (allOrderContactMechs != null && allOrderContactMechs.hasNext()) {
    GenericValue orderContactMech=(GenericValue)allOrderContactMechs.next();
    GenericValue contactMech=null;
    try {
      contactMech=orderContactMech.getRelatedOne("ContactMech");
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,module);
    }
    if (contactMech != null) {
      Map orderContactMechValueMap=new HashMap();
      orderContactMechValueMaps.add(orderContactMechValueMap);
      orderContactMechValueMap.put("contactMech",contactMech);
      orderContactMechValueMap.put("orderContactMech",orderContactMech);
      try {
        orderContactMechValueMap.put("contactMechType",contactMech.getRelatedOneCache("ContactMechType"));
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
      try {
        GenericValue contactMechPurposeType=orderContactMech.getRelatedOne("ContactMechPurposeType");
        orderContactMechValueMap.put("contactMechPurposeType",contactMechPurposeType);
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
      try {
        if ("POSTAL_ADDRESS".equals(contactMech.getString("contactMechTypeId"))) {
          orderContactMechValueMap.put("postalAddress",contactMech.getRelatedOne("PostalAddress"));
        }
 else         if ("TELECOM_NUMBER".equals(contactMech.getString("contactMechTypeId"))) {
          orderContactMechValueMap.put("telecomNumber",contactMech.getRelatedOne("TelecomNumber"));
        }
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
    }
  }
  return orderContactMechValueMaps;
}
