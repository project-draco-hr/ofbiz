{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  List<Map<String,Object>> postalAddressInfos=FastList.newInstance();
  List<GenericValue> allPartyContactMechs=null;
  try {
    allPartyContactMechs=EntityUtil.filterByDate(delegator.findByAnd("PartyContactMech",UtilMisc.toMap("partyId",partyId),null,false),true);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  if (allPartyContactMechs == null)   return postalAddressInfos;
  for (  GenericValue partyContactMech : allPartyContactMechs) {
    GenericValue contactMech=null;
    try {
      contactMech=partyContactMech.getRelatedOne("ContactMech",false);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,module);
    }
    if (contactMech != null && "POSTAL_ADDRESS".equals(contactMech.getString("contactMechTypeId")) && !contactMech.getString("contactMechId").equals(curContactMechId)) {
      Map<String,Object> postalAddressInfo=FastMap.newInstance();
      postalAddressInfos.add(postalAddressInfo);
      postalAddressInfo.put("contactMech",contactMech);
      postalAddressInfo.put("partyContactMech",partyContactMech);
      try {
        GenericValue postalAddress=contactMech.getRelatedOne("PostalAddress",false);
        postalAddressInfo.put("postalAddress",postalAddress);
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
      try {
        List<GenericValue> partyContactMechPurposes=EntityUtil.filterByDate(partyContactMech.getRelated("PartyContactMechPurpose"),true);
        postalAddressInfo.put("partyContactMechPurposes",partyContactMechPurposes);
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
    }
  }
  return postalAddressInfos;
}
