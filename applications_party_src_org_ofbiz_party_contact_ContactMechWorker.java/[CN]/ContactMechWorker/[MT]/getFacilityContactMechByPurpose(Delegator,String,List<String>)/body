{
  if (UtilValidate.isEmpty(facilityId))   return null;
  if (UtilValidate.isEmpty(purposeTypes))   return null;
  for (  String purposeType : purposeTypes) {
    List<GenericValue> facilityContactMechPurposes=null;
    List<EntityCondition> conditionList=FastList.newInstance();
    conditionList.add(EntityCondition.makeCondition("facilityId",facilityId));
    conditionList.add(EntityCondition.makeCondition("contactMechPurposeTypeId",purposeType));
    conditionList.add(EntityCondition.makeConditionDate("fromDate","thruDate"));
    EntityCondition entityCondition=EntityCondition.makeCondition(conditionList);
    try {
      facilityContactMechPurposes=delegator.findList("FacilityContactMechPurpose",entityCondition,null,UtilMisc.toList("-fromDate"),null,true);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,module);
    }
    for (    GenericValue facilityContactMechPurpose : facilityContactMechPurposes) {
      String contactMechId=facilityContactMechPurpose.getString("contactMechId");
      List<GenericValue> facilityContactMechs=null;
      conditionList=FastList.newInstance();
      conditionList.add(EntityCondition.makeCondition("facilityId",facilityId));
      conditionList.add(EntityCondition.makeCondition("contactMechId",contactMechId));
      conditionList.add(EntityCondition.makeConditionDate("fromDate","thruDate"));
      entityCondition=EntityCondition.makeCondition(conditionList);
      try {
        facilityContactMechs=delegator.findList("FacilityContactMech",entityCondition,null,UtilMisc.toList("-fromDate"),null,true);
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,module);
      }
      if (UtilValidate.isNotEmpty(facilityContactMechs)) {
        return EntityUtil.getFirst(facilityContactMechs);
      }
    }
  }
  return null;
}
