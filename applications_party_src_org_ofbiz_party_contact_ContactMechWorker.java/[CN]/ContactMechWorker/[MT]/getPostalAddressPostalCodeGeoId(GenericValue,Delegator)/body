{
  if (UtilValidate.isNotEmpty(postalAddress.getString("postalCodeGeoId"))) {
    return postalAddress.getString("postalCodeGeoId");
  }
  if (UtilValidate.isNotEmpty(postalAddress.getString("countryGeoId")) && UtilValidate.isNotEmpty(postalAddress.getString("postalCode"))) {
    GenericValue geo=EntityQuery.use(delegator).from("Geo").where("geoId",postalAddress.getString("countryGeoId") + "-" + postalAddress.getString("postalCode")).cache().queryOne();
    if (geo != null) {
      if (postalAddress.isMutable()) {
        postalAddress.set("postalCodeGeoId",geo.getString("geoId"));
        postalAddress.store();
      }
 else {
        GenericValue mutablePostalAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",postalAddress.getString("contactMechId")).queryOne();
        mutablePostalAddress.set("postalCodeGeoId",geo.getString("geoId"));
        mutablePostalAddress.store();
      }
      return geo.getString("geoId");
    }
    List<GenericValue> geoAssocAndGeoToList=delegator.findByAnd("GeoAssocAndGeoTo",UtilMisc.toMap("geoIdFrom",postalAddress.getString("countryGeoId"),"geoCode",postalAddress.getString("postalCode"),"geoAssocTypeId","REGIONS"),null,true);
    GenericValue geoAssocAndGeoTo=EntityUtil.getFirst(geoAssocAndGeoToList);
    if (geoAssocAndGeoTo != null) {
      if (postalAddress.isMutable()) {
        postalAddress.set("postalCodeGeoId",geoAssocAndGeoTo.getString("geoId"));
        postalAddress.store();
      }
 else {
        GenericValue mutablePostalAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",postalAddress.getString("contactMechId")).queryOne();
        mutablePostalAddress.set("postalCodeGeoId",geoAssocAndGeoTo.getString("geoId"));
        mutablePostalAddress.store();
      }
      return geoAssocAndGeoTo.getString("geoId");
    }
  }
  return null;
}
