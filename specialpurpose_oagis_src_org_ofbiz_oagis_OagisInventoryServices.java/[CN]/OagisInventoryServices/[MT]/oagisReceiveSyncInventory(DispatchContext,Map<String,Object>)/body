{
  Document doc=(Document)context.get("document");
  boolean isErrorRetry=Boolean.TRUE.equals(context.get("isErrorRetry"));
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  List<Map<String,String>> errorMapList=new LinkedList<Map<String,String>>();
  List<Map<String,Object>> inventoryMapList=new LinkedList<Map<String,Object>>();
  final String syncInventoryFacilityId=EntityUtilProperties.getPropertyValue("oagis","Oagis.Warehouse.SyncInventoryFacilityId",delegator);
  GenericValue userLogin=null;
  try {
    userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element syncInventoryRootElement=doc.getDocumentElement();
  syncInventoryRootElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(syncInventoryRootElement,"os:CNTROLAREA");
  Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:BSR");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:SENDER");
  String bsrVerb=UtilXml.childElementValue(docBsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(docBsrElement,"of:NOUN");
  String bsrRevision=UtilXml.childElementValue(docBsrElement,"of:REVISION");
  String logicalId=UtilXml.childElementValue(docSenderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"of:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"of:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"of:AUTHID");
  Map<String,Object> comiCtx=new HashMap<String,Object>();
  comiCtx.put("logicalId",logicalId);
  comiCtx.put("component",component);
  comiCtx.put("task",task);
  comiCtx.put("referenceId",referenceId);
  comiCtx.put("confirmation",confirmation);
  comiCtx.put("authId",authId);
  comiCtx.put("bsrVerb",bsrVerb);
  comiCtx.put("bsrNoun",bsrNoun);
  comiCtx.put("bsrRevision",bsrRevision);
  comiCtx.put("receivedDate",UtilDateTime.nowTimestamp());
  comiCtx.put("outgoingMessage","N");
  comiCtx.put("processingStatusId","OAGMP_RECEIVED");
  comiCtx.put("userLogin",userLogin);
  if (OagisServices.debugSaveXmlIn) {
    try {
      comiCtx.put("fullMessageXml",UtilXml.writeXmlDocument(doc));
    }
 catch (    IOException e) {
      String errMsg="Warning: error creating text from XML Document for saving to database: " + e.toString();
      Debug.logWarning(errMsg,module);
    }
  }
  try {
    if (isErrorRetry) {
      dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
    }
 else {
      dispatcher.runSync("createOagisMessageInfo",comiCtx,60,true);
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  List<? extends Element> dataAreaList=UtilXml.childElementList(syncInventoryRootElement,"ns:DATAAREA");
  if (UtilValidate.isNotEmpty(dataAreaList)) {
    try {
      for (      Element dataAreaElement : dataAreaList) {
        Element syncInventoryElement=UtilXml.firstChildElement(dataAreaElement,"ns:SYNC_INVENTORY");
        Element inventoryElement=UtilXml.firstChildElement(syncInventoryElement,"ns:INVENTORY");
        Element quantityElement=UtilXml.firstChildElement(inventoryElement,"os:QUANTITY");
        String itemQtyStr=UtilXml.childElementValue(quantityElement,"of:VALUE");
        double itemQty=Double.parseDouble(itemQtyStr);
        String productId=UtilXml.childElementValue(inventoryElement,"of:ITEM");
        String itemStatus=UtilXml.childElementValue(inventoryElement,"of:ITEMSTATUS");
        GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();
        if (product == null) {
          String errMsg="Product with ID [" + productId + "] not found (invalid Product ID).";
          errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","ProductIdNotValid","description",errMsg));
          Debug.logError(errMsg,module);
          continue;
        }
        boolean isAvailable=!"NOTAVAILABLE".equals(itemStatus);
        String statusId="INV_AVAILABLE";
        if (!isAvailable) {
          statusId="INV_ON_HOLD";
        }
        String snapshotDateStr=UtilXml.childElementValue(inventoryElement,"os:DATETIMEISO");
        Timestamp snapshotDate=OagisServices.parseIsoDateString(snapshotDateStr,errorMapList);
        double quantityOnHandTotal=0.0;
        if (isAvailable) {
          EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("effectiveDate",EntityOperator.LESS_THAN_EQUAL_TO,snapshotDate),EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("inventoryItemTypeId",EntityOperator.EQUALS,"NON_SERIAL_INV_ITEM"),EntityCondition.makeCondition("facilityId",EntityOperator.EQUALS,syncInventoryFacilityId)),EntityOperator.AND);
          List<GenericValue> invItemAndDetails=EntityQuery.use(delegator).select("quantityOnHandSum").from("InventoryItemDetailForSum").where(condition).queryList();
          for (          GenericValue inventoryItemDetailForSum : invItemAndDetails) {
            quantityOnHandTotal+=inventoryItemDetailForSum.getDouble("quantityOnHandSum").doubleValue();
          }
        }
        EntityCondition serInvCondition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("statusDatetime",EntityOperator.LESS_THAN_EQUAL_TO,snapshotDate),EntityCondition.makeCondition(EntityCondition.makeCondition("statusEndDatetime",EntityOperator.GREATER_THAN,snapshotDate),EntityOperator.OR,EntityCondition.makeCondition("statusEndDatetime",EntityOperator.EQUALS,null)),EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,statusId),EntityCondition.makeCondition("inventoryItemTypeId",EntityOperator.EQUALS,"SERIALIZED_INV_ITEM"),EntityCondition.makeCondition("facilityId",EntityOperator.EQUALS,syncInventoryFacilityId)),EntityOperator.AND);
        long invItemQuantCount=EntityQuery.use(delegator).from("InventoryItemStatusForCount").where(serInvCondition).queryCount();
        quantityOnHandTotal+=invItemQuantCount;
        if (itemQty != quantityOnHandTotal) {
          double quantityDiff=Math.abs((itemQty - quantityOnHandTotal));
          inventoryMapList.add(UtilMisc.toMap("productId",(Object)productId,"statusId",statusId,"quantityOnHandTotal",String.valueOf(quantityOnHandTotal),"quantityFromMessage",itemQtyStr,"quantityDiff",String.valueOf(quantityDiff),"timestamp",snapshotDate));
        }
      }
    }
 catch (    Throwable t) {
      String errMsg="Error processing Sync Inventory message: " + t.toString();
      errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","Exception"));
      Debug.logInfo(t,errMsg,module);
    }
  }
  if (errorMapList.size() == 0 && inventoryMapList.size() > 0) {
    try {
      Map<String,Object> sendMap=new HashMap<String,Object>();
      String sendToEmail=EntityUtilProperties.getPropertyValue("oagis","oagis.notification.email.sendTo",delegator);
      if (UtilValidate.isNotEmpty(sendToEmail)) {
        String productStoreId=EntityUtilProperties.getPropertyValue("oagis","Oagis.Warehouse.SyncInventoryProductStoreId",delegator);
        GenericValue productStoreEmail=EntityQuery.use(delegator).from("ProductStoreEmailSetting").where("productStoreId",productStoreId,"emailType","PRDS_OAGIS_CONFIRM").queryOne();
        if (productStoreEmail != null) {
          String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
          sendMap.put("bodyScreenUri",bodyScreenLocation);
        }
 else {
          sendMap.put("bodyScreenUri","component://oagis/widget/EmailOagisMessageScreens.xml#InventoryMismatchNotice");
        }
        if (locale == null) {
          locale=Locale.getDefault();
        }
        sendMap.put("sendTo",sendToEmail);
        sendMap.put("subject",productStoreEmail.getString("subject"));
        sendMap.put("sendFrom",productStoreEmail.getString("fromAddress"));
        sendMap.put("sendCc",productStoreEmail.getString("ccAddress"));
        sendMap.put("sendBcc",productStoreEmail.getString("bccAddress"));
        sendMap.put("contentType",productStoreEmail.getString("contentType"));
        Map<String,Object> bodyParameters=UtilMisc.toMap("inventoryMapList",inventoryMapList,"locale",locale);
        sendMap.put("bodyParameters",bodyParameters);
        sendMap.put("userLogin",userLogin);
        dispatcher.runAsync("sendMailFromScreen",sendMap,true);
      }
 else {
        Debug.logImportant("No sendTo email address found in process oagisReceiveSyncInventory service: inventoryMapList: " + inventoryMapList,module);
      }
    }
 catch (    Throwable t) {
      Debug.logInfo(t,"System Error processing Sync Inventory message: " + t.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisErrorProcessingSyncInventory",UtilMisc.toMap("errorString",t.toString()),locale));
    }
  }
  Map<String,Object> result=new HashMap<String,Object>();
  result.put("logicalId",logicalId);
  result.put("component",component);
  result.put("task",task);
  result.put("referenceId",referenceId);
  result.put("userLogin",userLogin);
  if (errorMapList.size() > 0) {
    try {
      comiCtx.put("processingStatusId","OAGMP_PROC_ERROR");
      dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    Map<String,Object> saveErrorMapListCtx=new HashMap<String,Object>();
    saveErrorMapListCtx.put("logicalId",logicalId);
    saveErrorMapListCtx.put("component",component);
    saveErrorMapListCtx.put("task",task);
    saveErrorMapListCtx.put("referenceId",referenceId);
    saveErrorMapListCtx.put("errorMapList",errorMapList);
    saveErrorMapListCtx.put("userLogin",userLogin);
    try {
      dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    try {
      Map<String,Object> sendConfirmBodCtx=new HashMap<String,Object>();
      sendConfirmBodCtx.putAll(saveErrorMapListCtx);
      dispatcher.runAsync("oagisSendConfirmBod",sendConfirmBodCtx,null,true,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error sending Confirm BOD: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    result.putAll(ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OagisErrorProcessingMessage",locale)));
    return result;
  }
 else {
    try {
      comiCtx.put("processingStatusId","OAGMP_PROC_SUCCESS");
      dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  result.putAll(ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OagisServiceCompletedSuccessfully",locale)));
  return result;
}
