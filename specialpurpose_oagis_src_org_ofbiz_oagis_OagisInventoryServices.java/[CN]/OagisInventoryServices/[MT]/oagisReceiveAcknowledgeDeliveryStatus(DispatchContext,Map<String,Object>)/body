{
  Document doc=(Document)context.get("document");
  boolean isErrorRetry=Boolean.TRUE.equals(context.get("isErrorRetry"));
  Locale locale=(Locale)context.get("locale");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Delegator delegator=ctx.getDelegator();
  List<Map<String,String>> errorMapList=new LinkedList<Map<String,String>>();
  GenericValue userLogin=null;
  try {
    userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element receiveStatusElement=doc.getDocumentElement();
  receiveStatusElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(receiveStatusElement,"os:CNTROLAREA");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:SENDER");
  Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:BSR");
  String bsrVerb=UtilXml.childElementValue(docBsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(docBsrElement,"of:NOUN");
  String bsrRevision=UtilXml.childElementValue(docBsrElement,"of:REVISION");
  String logicalId=UtilXml.childElementValue(docSenderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"of:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"of:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"of:AUTHID");
  String sentDate=UtilXml.childElementValue(docCtrlAreaElement,"os:DATETIMEISO");
  Timestamp sentTimestamp=OagisServices.parseIsoDateString(sentDate,errorMapList);
  Element dataAreaElement=UtilXml.firstChildElement(receiveStatusElement,"ns:DATAAREA");
  Element acknowledgeDeliveryElement=UtilXml.firstChildElement(dataAreaElement,"ns:ACKNOWLEDGE_DELIVERY");
  String facilityId=EntityUtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.PoReceiptFacilityId",delegator);
  String locationSeqId=EntityUtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.ReturnReceiptLocationSeqId",delegator);
  Timestamp timestamp=UtilDateTime.nowTimestamp();
  Map<String,Object> comiCtx=new HashMap<String,Object>();
  Map<String,Object> omiPkMap=UtilMisc.toMap("logicalId",(Object)logicalId,"component",component,"task",task,"referenceId",referenceId);
  Debug.logInfo("Processing oagisReceiveAcknowledgeDeliveryStatus for message ID [" + omiPkMap + "]",module);
  GenericValue previousOagisMessageInfo=null;
  try {
    previousOagisMessageInfo=delegator.findOne("OagisMessageInfo",omiPkMap,false);
  }
 catch (  GenericEntityException e) {
    String errMsg="Error getting OagisMessageInfo from database for message ID [" + omiPkMap + "]: "+ e.toString();
    Debug.logInfo(e,errMsg,module);
  }
  if (previousOagisMessageInfo != null && !isErrorRetry) {
    if ("OAGMP_SYS_ERROR".equals(previousOagisMessageInfo.getString("processingStatusId"))) {
      isErrorRetry=true;
    }
 else {
      Debug.logError("Message received for message ID [" + omiPkMap + "] was already partially processed but is not in a system error state, needs manual review; message ID: "+ omiPkMap,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisErrorMessageAlreadyProcessed",UtilMisc.toMap("shipmentId","","omiPkMap",omiPkMap),locale));
    }
  }
  comiCtx.putAll(omiPkMap);
  comiCtx.put("authId",authId);
  comiCtx.put("receivedDate",timestamp);
  comiCtx.put("sentDate",sentTimestamp);
  comiCtx.put("outgoingMessage","N");
  comiCtx.put("confirmation",confirmation);
  comiCtx.put("bsrVerb",bsrVerb);
  comiCtx.put("bsrNoun",bsrNoun);
  comiCtx.put("bsrRevision",bsrRevision);
  comiCtx.put("processingStatusId","OAGMP_RECEIVED");
  comiCtx.put("userLogin",userLogin);
  if (OagisServices.debugSaveXmlIn) {
    try {
      comiCtx.put("fullMessageXml",UtilXml.writeXmlDocument(doc));
    }
 catch (    IOException e) {
      String errMsg="Warning: error creating text from XML Document for saving to database: " + e.toString();
      Debug.logWarning(errMsg,module);
    }
  }
  try {
    if (isErrorRetry) {
      dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
    }
 else {
      dispatcher.runSync("createOagisMessageInfo",comiCtx,60,true);
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  List<String> invItemIds=new LinkedList<String>();
  List<? extends Element> receiptLineElementList=UtilXml.childElementList(acknowledgeDeliveryElement,"ns:RECEIPTLN");
  if (UtilValidate.isNotEmpty(receiptLineElementList)) {
    try {
      for (      Element receiptLnElement : receiptLineElementList) {
        Map<String,Object> uiiCtx=new HashMap<String,Object>();
        Element qtyElement=UtilXml.firstChildElement(receiptLnElement,"os:QUANTITY");
        String itemQtyStr=UtilXml.childElementValue(qtyElement,"of:VALUE");
        String sign=UtilXml.childElementValue(qtyElement,"of:SIGN");
        String productId=UtilXml.childElementValue(receiptLnElement,"of:ITEM");
        if (UtilValidate.isEmpty(productId)) {
          String errMsg="Product ID Missing";
          errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","ProductIdMissing","description",errMsg));
          Debug.logError(errMsg,module);
        }
        GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();
        if (product == null) {
          String errMsg="Product with ID [" + productId + "] not found (invalid Product ID).";
          errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","ProductIdNotValid","description",errMsg));
          Debug.logError(errMsg,module);
          continue;
        }
        String invItemStatusId=null;
        String reqFromItemStatusId=null;
        String disposition=UtilXml.childElementValue(receiptLnElement,"of:DISPOSITN");
        if ("NotAvailableTOAvailable".equals(disposition)) {
          invItemStatusId="INV_AVAILABLE";
          reqFromItemStatusId="INV_ON_HOLD";
        }
 else         if ("AvailableTONotAvailable".equals(disposition)) {
          invItemStatusId="INV_ON_HOLD";
          reqFromItemStatusId="INV_AVAILABLE";
        }
 else         if ("ReceivedTOAvailable".equals(disposition) || "ReceivedTONotAvailable".equals(disposition)) {
          String errMsg="Got DISPOSITN value [" + disposition + "] that is not valid for Status Change, only for RMA/return.";
          errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","DispositnNotValidForStatusChange","description",errMsg));
          continue;
        }
        uiiCtx.put("statusId",invItemStatusId);
        List<String> serialNumsList=new LinkedList<String>();
        List<? extends Element> invDetailList=UtilXml.childElementList(receiptLnElement,"ns:INVDETAIL");
        if (UtilValidate.isNotEmpty(invDetailList)) {
          for (          Element invDetailElement : invDetailList) {
            String serialNumber=UtilXml.childElementValue(invDetailElement,"of:SERIALNUM");
            if (UtilValidate.isNotEmpty(serialNumber)) {
              serialNumsList.add(serialNumber);
            }
          }
        }
        Integer messageQuantity=Integer.valueOf(itemQtyStr);
        if (UtilValidate.isNotEmpty(serialNumsList)) {
          if (messageQuantity.intValue() != serialNumsList.size()) {
            String errMsg="Not enough serial numbers [" + serialNumsList.size() + "] for the quantity ["+ messageQuantity.intValue()+ "].";
            errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SerialNumbersMissing"));
            Debug.logInfo(errMsg,module);
            continue;
          }
        }
        uiiCtx.put("facilityId",facilityId);
        uiiCtx.put("locationSeqId",locationSeqId);
        uiiCtx.put("userLogin",userLogin);
        if (!"+".equals(sign)) {
          String errMsg="Got a sign [" + sign + "] that was not plus (+), this is not valid for a Status Change operation.";
          errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SignNotPlusForStatusChange"));
          continue;
        }
        if (serialNumsList.size() > 0) {
          String inventoryItemTypeId="SERIALIZED_INV_ITEM";
          uiiCtx.put("inventoryItemTypeId",inventoryItemTypeId);
          for (          String serialNum : serialNumsList) {
            Set<String> productIdSet=ProductWorker.getRefurbishedProductIdSet(productId,delegator);
            productIdSet.add(productId);
            List<GenericValue> inventoryItemsBySerialNumber=EntityQuery.use(delegator).from("InventoryItem").where(EntityCondition.makeCondition(EntityCondition.makeCondition("serialNumber",EntityOperator.EQUALS,serialNum),EntityOperator.AND,EntityCondition.makeCondition("productId",EntityOperator.IN,productIdSet))).queryList();
            if (inventoryItemsBySerialNumber.size() == 0) {
              String errMsg="Referenced serial numbers must already exist, but serial number [" + serialNum + "] was not found.";
              errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SerialNumberRequiredButNotFound"));
              continue;
            }
            GenericValue inventoryItem=EntityUtil.getFirst(inventoryItemsBySerialNumber);
            if (UtilValidate.isNotEmpty(reqFromItemStatusId) && !reqFromItemStatusId.equals(inventoryItem.getString("statusId"))) {
              String errMsg="Referenced serial number [" + serialNum + "] has status ["+ inventoryItem.getString("statusId")+ "] but we were expecting ["+ reqFromItemStatusId+ "]; this may mean the Acknowledge Delivery RMA message has not yet come in for this item.";
              errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SerialNumberRequiredButNotFound"));
              continue;
            }
            Map<String,Object> updateInvItmMap=new HashMap<String,Object>();
            updateInvItmMap.put("inventoryItemId",inventoryItem.getString("inventoryItemId"));
            updateInvItmMap.put("userLogin",userLogin);
            updateInvItmMap.put("statusId",invItemStatusId);
            String inventoryItemProductId=inventoryItem.getString("productId");
            if (!inventoryItemProductId.equals(productId)) {
              updateInvItmMap.put("productId",productId);
            }
            dispatcher.runSync("updateInventoryItem",updateInvItmMap);
            invItemIds.add(inventoryItem.getString("inventoryItemId"));
          }
        }
 else {
          String inventoryItemTypeId="NON_SERIAL_INV_ITEM";
          uiiCtx.put("inventoryItemTypeId",inventoryItemTypeId);
          String errMsg="No serial numbers were included in the message and right now this is not supported";
          errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","NoSerialNumbersInMessage"));
        }
      }
    }
 catch (    Throwable t) {
      String errMsg="System Error processing Acknowledge Delivery Status message for message [" + omiPkMap + "]: "+ t.toString();
      errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SystemError"));
      try {
        comiCtx.put("processingStatusId","OAGMP_SYS_ERROR");
        dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
        Map<String,Object> saveErrorMapListCtx=new HashMap<String,Object>();
        saveErrorMapListCtx.putAll(omiPkMap);
        saveErrorMapListCtx.put("errorMapList",errorMapList);
        saveErrorMapListCtx.put("userLogin",userLogin);
        dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
      }
 catch (      GenericServiceException e) {
        String errMsg2="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
        Debug.logError(e,errMsg2,module);
      }
      Debug.logInfo(t,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  Map<String,Object> result=new HashMap<String,Object>();
  result.putAll(omiPkMap);
  result.put("userLogin",userLogin);
  if (errorMapList.size() > 0) {
    try {
      comiCtx.put("processingStatusId","OAGMP_PROC_ERROR");
      dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    Map<String,Object> saveErrorMapListCtx=new HashMap<String,Object>();
    saveErrorMapListCtx.putAll(omiPkMap);
    saveErrorMapListCtx.put("errorMapList",errorMapList);
    saveErrorMapListCtx.put("userLogin",userLogin);
    try {
      dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    try {
      Map<String,Object> sendConfirmBodCtx=new HashMap<String,Object>();
      sendConfirmBodCtx.putAll(saveErrorMapListCtx);
      dispatcher.runAsync("oagisSendConfirmBod",sendConfirmBodCtx,null,true,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error sending Confirm BOD: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    String errMsg="Found business level errors in message processing, not saving results; first error is: " + errorMapList.get(0);
    result.putAll(ServiceUtil.returnSuccess(errMsg));
    try {
      TransactionUtil.setRollbackOnly(errMsg,null);
    }
 catch (    GenericTransactionException e) {
      Debug.logError(e,"Error setting rollback only ",module);
    }
    return result;
  }
 else {
    comiCtx.put("processingStatusId","OAGMP_PROC_SUCCESS");
    try {
      dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  result.putAll(ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OagisServiceCompletedSuccessfully",locale)));
  result.put("inventoryItemIdList",invItemIds);
  return result;
}
