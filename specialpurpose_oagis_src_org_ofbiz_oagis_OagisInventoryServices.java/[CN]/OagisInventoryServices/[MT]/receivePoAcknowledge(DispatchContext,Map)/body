{
  Document doc=(Document)context.get("document");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  List errorMapList=FastList.newInstance();
  Map comiCtx=FastMap.newInstance();
  GenericValue userLogin=null;
  try {
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element receivePoElement=doc.getDocumentElement();
  receivePoElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(receivePoElement,"os:CNTROLAREA");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:SENDER");
  Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"os:BSR");
  String bsrVerb=UtilXml.childElementValue(docBsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(docBsrElement,"of:NOUN");
  String bsrRevision=UtilXml.childElementValue(docBsrElement,"of:REVISION");
  String logicalId=UtilXml.childElementValue(docSenderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"of:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"of:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"of:AUTHID");
  String sentDate=UtilXml.childElementValue(docCtrlAreaElement,"os:DATETIMEISO");
  Timestamp sentTimestamp=OagisServices.parseIsoDateString(sentDate,errorMapList);
  Timestamp timestamp=UtilDateTime.nowTimestamp();
  comiCtx.put("logicalId",logicalId);
  comiCtx.put("authId",authId);
  comiCtx.put("referenceId",referenceId);
  comiCtx.put("receivedDate",timestamp);
  comiCtx.put("sentDate",sentTimestamp);
  comiCtx.put("component",component);
  comiCtx.put("task",task);
  comiCtx.put("outgoingMessage","N");
  comiCtx.put("confirmation",confirmation);
  comiCtx.put("bsrVerb",bsrVerb);
  comiCtx.put("bsrNoun",bsrNoun);
  comiCtx.put("bsrRevision",bsrRevision);
  comiCtx.put("processingStatusId","OAGMP_RECEIVED");
  comiCtx.put("userLogin",userLogin);
  if (OagisServices.debugSaveXmlIn) {
    try {
      comiCtx.put("fullMessageXml",UtilXml.writeXmlDocument(doc));
    }
 catch (    IOException e) {
      String errMsg="Warning: error creating text from XML Document for saving to database: " + e.toString();
      Debug.logWarning(errMsg,module);
    }
  }
  try {
    dispatcher.runSync("createOagisMessageInfo",comiCtx,60,true);
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element dataAreaElement=UtilXml.firstChildElement(receivePoElement,"ns:DATAAREA");
  Element acknowledgeDeliveryElement=UtilXml.firstChildElement(dataAreaElement,"ns:ACKNOWLEDGE_DELIVERY");
  String facilityId=UtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.PoReceiptFacilityId");
  String productId=null;
  String orderId=null;
  List acknowledgeElementList=UtilXml.childElementList(acknowledgeDeliveryElement,"ns:RECEIPTLN");
  if (UtilValidate.isNotEmpty(acknowledgeElementList)) {
    Iterator acknowledgeElementIter=acknowledgeElementList.iterator();
    while (acknowledgeElementIter.hasNext()) {
      Map ripCtx=FastMap.newInstance();
      Element receiptLnElement=(Element)acknowledgeElementIter.next();
      Element qtyElement=UtilXml.firstChildElement(receiptLnElement,"os:QUANTITY");
      String itemQtyStr=UtilXml.childElementValue(qtyElement,"of:VALUE");
      double itemQty=Double.parseDouble(itemQtyStr);
      String sign=UtilXml.childElementValue(qtyElement,"of:SIGN");
      productId=UtilXml.childElementValue(receiptLnElement,"of:ITEM");
      Element documentRefElement=UtilXml.firstChildElement(receiptLnElement,"os:DOCUMNTREF");
      orderId=UtilXml.childElementValue(documentRefElement,"of:DOCUMENTID");
      String orderTypeId=UtilXml.childElementValue(documentRefElement,"of:DOCTYPE");
      if (orderTypeId.equals("PO")) {
        orderTypeId="PURCHASE_ORDER";
      }
      String datetimeReceived=UtilXml.childElementValue(receiptLnElement,"os:DATETIMEISO");
      Timestamp timestampItemReceived=OagisServices.parseIsoDateString(datetimeReceived,errorMapList);
      ripCtx.put("datetimeReceived",timestampItemReceived);
      GenericValue orderHeader=null;
      if (orderId != null) {
        try {
          List toStore=FastList.newInstance();
          orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
          if (orderHeader != null) {
            ripCtx.put("orderId",orderId);
            comiCtx.put("orderId",orderId);
            GenericValue orderItem=delegator.makeValue("OrderItem",UtilMisc.toMap("orderId",orderId,"productId",productId,"quantity",new Double(itemQtyStr)));
            delegator.setNextSubSeqId(orderItem,"orderItemSeqId",5,1);
            delegator.create(orderItem);
            ripCtx.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
          }
 else {
            orderHeader=delegator.makeValue("OrderHeader",UtilMisc.toMap("orderId",orderId,"orderTypeId",orderTypeId,"orderDate",timestampItemReceived,"statusId","ORDER_CREATED","entryDate",UtilDateTime.nowTimestamp(),"productStoreId",UtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.SyncInventoryProductStoreId","9001")));
            toStore.add(orderHeader);
            GenericValue orderItem=delegator.makeValue("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",UtilFormatOut.formatPaddedNumber(1L,5),"productId",productId,"quantity",new Double(itemQtyStr)));
            toStore.add(orderItem);
            delegator.storeAll(toStore);
          }
        }
 catch (        GenericEntityException e) {
          String errMsg="Error Getting OrderHeader: " + e.toString();
          errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
          Debug.logError(e,errMsg,module);
        }
      }
      String invItemStatus=UtilXml.childElementValue(receiptLnElement,"of:DISPOSITN");
      if (invItemStatus.equals("ReceivedTOAvailable") || invItemStatus.equals("NotAvailableTOAvailable")) {
        ripCtx.put("statusId","INV_AVAILABLE");
      }
 else       if (invItemStatus.equals("ReceivedTONotAvailable") || invItemStatus.equals("AvailableTONotAvailable")) {
        ripCtx.put("statusId","INV_ON_HOLD");
      }
      ripCtx.put("inventoryItemTypeId","NON_SERIAL_INV_ITEM");
      ripCtx.put("productId",productId);
      ripCtx.put("facilityId",facilityId);
      ripCtx.put("userLogin",userLogin);
      double quantityAccepted=0.0;
      double quantityRejected=0.0;
      if (sign.equals("+")) {
        quantityAccepted=itemQty;
        quantityRejected=0.0;
      }
 else {
        quantityRejected=itemQty;
        quantityAccepted=0.0;
      }
      ripCtx.put("quantityAccepted",new Double(quantityAccepted));
      ripCtx.put("quantityRejected",new Double(quantityRejected));
      try {
        Map ripResult=dispatcher.runSync("receiveInventoryProduct",ripCtx);
        if (ServiceUtil.isError(ripResult)) {
          String errMsg=ServiceUtil.getErrorMessage(ripResult);
          errorMapList.add(UtilMisc.toMap("reasonCode","ReceiveInventoryServiceError","description",errMsg));
        }
      }
 catch (      GenericServiceException e) {
        String errMsg="Error running service receiveInventoryProduct: " + e.toString();
        errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
        Debug.logError(e,errMsg,module);
      }
    }
  }
  Map result=FastMap.newInstance();
  result.put("logicalId",logicalId);
  result.put("component",component);
  result.put("task",task);
  result.put("referenceId",referenceId);
  result.put("userLogin",userLogin);
  if (errorMapList.size() > 0) {
    Map saveErrorMapListCtx=FastMap.newInstance();
    saveErrorMapListCtx.put("logicalId",logicalId);
    saveErrorMapListCtx.put("component",component);
    saveErrorMapListCtx.put("task",task);
    saveErrorMapListCtx.put("referenceId",referenceId);
    saveErrorMapListCtx.put("errorMapList",errorMapList);
    try {
      dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    try {
      Map sendConfirmBodCtx=FastMap.newInstance();
      sendConfirmBodCtx.putAll(saveErrorMapListCtx);
      sendConfirmBodCtx.put("origRefId",orderId);
      dispatcher.runAsync("oagisSendConfirmBod",sendConfirmBodCtx,null,true,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    result.putAll(ServiceUtil.returnError("Errors found processing message; information saved and return error sent back"));
    return result;
  }
 else {
    comiCtx.put("processingStatusId","OAGMP_PROC_SUCCESS");
    try {
      dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  result.putAll(ServiceUtil.returnSuccess("Service Completed Successfully"));
  return result;
}
