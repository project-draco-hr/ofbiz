{
  InputStream in=(InputStream)context.get("inputStream");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  List errorMapList=FastList.newInstance();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
    }
 catch (    GenericEntityException e) {
      String errMsg="Error Getting UserLogin: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  Document doc=null;
  try {
    doc=UtilXml.readXmlDocument(in,true,"ReceivePoAcknowledge");
  }
 catch (  SAXException e) {
    String errMsg="Error parsing the ReceivePoAcknowledge message: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","SAXException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
catch (  ParserConfigurationException e) {
    String errMsg="Error parsing the ReceivePoAcknowledge message: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","ParserConfigurationException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
catch (  IOException e) {
    String errMsg="Error parsing the ReceivePoAcknowledge message: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","IOException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  if (errorMapList.size() > 0) {
    return ServiceUtil.returnError("Unable to parse message: ReceivePoAcknowledge");
  }
  Element receivePoElement=doc.getDocumentElement();
  receivePoElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(receivePoElement,"N1:CNTROLAREA");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:SENDER");
  Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:BSR");
  String bsrVerb=UtilXml.childElementValue(docBsrElement,"N2:VERB");
  String bsrNoun=UtilXml.childElementValue(docBsrElement,"N2:NOUN");
  String bsrRevision=UtilXml.childElementValue(docBsrElement,"N2:REVISION");
  String logicalId=UtilXml.childElementValue(docSenderElement,"N2:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"N2:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"N2:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"N2:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"N2:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"N2:AUTHID");
  Element dataAreaElement=UtilXml.firstChildElement(receivePoElement,"n:DATAAREA");
  Element acknowledgeDeliveryElement=UtilXml.firstChildElement(dataAreaElement,"n:ACKNOWLEDGE_DELIVERY");
  String inventoryItemTypeId=null;
  String orderId=null;
  String facilityId=UtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.PoReceiptFacilityId");
  List acknowledgeElementList=UtilXml.childElementList(acknowledgeDeliveryElement,"n:RECEIPTLN");
  if (UtilValidate.isNotEmpty(acknowledgeElementList)) {
    Iterator acknowledgeElementIter=acknowledgeElementList.iterator();
    while (acknowledgeElementIter.hasNext()) {
      Map ripCtx=FastMap.newInstance();
      Element receiptLnElement=(Element)acknowledgeElementIter.next();
      Element qtyElement=UtilXml.firstChildElement(receiptLnElement,"N1:QUANTITY");
      String itemQtyStr=UtilXml.childElementValue(qtyElement,"N2:VALUE");
      double itemQty=Double.parseDouble(itemQtyStr);
      String sign=UtilXml.childElementValue(qtyElement,"N2:SIGN");
      String productId=UtilXml.childElementValue(receiptLnElement,"N2:ITEM");
      Element documentRefElement=UtilXml.firstChildElement(receiptLnElement,"N1:DOCUMNTREF");
      orderId=UtilXml.childElementValue(documentRefElement,"N2:DOCUMENTID");
      ripCtx.put("orderId",orderId);
      String orderItemSeqId=UtilXml.childElementValue(documentRefElement,"N2:LINENUM");
      ripCtx.put("orderItemSeqId",orderItemSeqId);
      String invItemStatus=UtilXml.childElementValue(receiptLnElement,"N2:DISPOSITN");
      if (invItemStatus.equals("ReceivedTOAvailable") || invItemStatus.equals("NotAvailableTOAvailable")) {
        ripCtx.put("statusId","INV_AVAILABLE");
      }
 else       if (invItemStatus.equals("ReceivedTONotAvailable") || invItemStatus.equals("AvailableTONotAvailable")) {
        ripCtx.put("statusId","INV_ON_HOLD");
      }
      List serialNumsList=FastList.newInstance();
      List invDetailList=UtilXml.childElementList(receiptLnElement,"n:INVDETAIL");
      if (UtilValidate.isNotEmpty(invDetailList)) {
        inventoryItemTypeId="SERIALIZED_INV_ITEM";
        ripCtx.put("inventoryItemTypeId",inventoryItemTypeId);
        for (Iterator j=invDetailList.iterator(); j.hasNext(); ) {
          Element invDetailElement=(Element)j.next();
          String serialNumber=UtilXml.childElementValue(invDetailElement,"N2:SERIALNUM");
          if (UtilValidate.isNotEmpty(serialNumber)) {
            serialNumsList.add(serialNumber);
          }
        }
      }
 else {
        inventoryItemTypeId="NON_SERIAL_INV_ITEM";
        ripCtx.put("inventoryItemTypeId",inventoryItemTypeId);
      }
      ripCtx.put("productId",productId);
      ripCtx.put("facilityId",facilityId);
      ripCtx.put("userLogin",userLogin);
      double quantityAccepted=0.0;
      double quantityRejected=0.0;
      if (sign.equals("+")) {
        quantityAccepted=itemQty;
        quantityRejected=0.0;
      }
 else {
        quantityRejected=itemQty;
        quantityAccepted=0.0;
      }
      if (quantityAccepted > 0) {
        if (serialNumsList.size() > 0) {
          if (serialNumsList.size() != quantityAccepted) {
            String errMsg="Error: the quantity [" + quantityAccepted + "] did not match the number of serial numbers passed ["+ serialNumsList.size()+ "].";
            errorMapList.add(UtilMisc.toMap("reasonCode","QuantitySerialMismatch","description",errMsg));
          }
          Iterator serialNumIter=serialNumsList.iterator();
          while (serialNumIter.hasNext()) {
            String serialNum=(String)serialNumIter.next();
            Map localRipCtx=FastMap.newInstance();
            localRipCtx.putAll(ripCtx);
            localRipCtx.put("quantityAccepted",new Double(1.0));
            localRipCtx.put("quantityRejected",new Double(0.0));
            localRipCtx.put("serialNumber",serialNum);
            try {
              Map ripResult=dispatcher.runSync("receiveInventoryProduct",localRipCtx);
              if (ServiceUtil.isError(ripResult)) {
                String errMsg=ServiceUtil.getErrorMessage(ripResult);
                errorMapList.add(UtilMisc.toMap("reasonCode","ReceiveInventoryServiceError","description",errMsg));
              }
            }
 catch (            GenericServiceException e) {
              String errMsg="Error running service receiveInventoryProduct: " + e.toString();
              errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
              Debug.logError(e,errMsg,module);
            }
          }
        }
 else {
          Map localRipCtx=FastMap.newInstance();
          localRipCtx.putAll(ripCtx);
          localRipCtx.put("quantityAccepted",new Double(quantityAccepted));
          localRipCtx.put("quantityRejected",new Double(0.0));
          try {
            Map ripResult=dispatcher.runSync("receiveInventoryProduct",localRipCtx);
            if (ServiceUtil.isError(ripResult)) {
              String errMsg=ServiceUtil.getErrorMessage(ripResult);
              errorMapList.add(UtilMisc.toMap("reasonCode","ReceiveInventoryServiceError","description",errMsg));
            }
          }
 catch (          GenericServiceException e) {
            String errMsg="Error running service receiveInventoryProduct: " + e.toString();
            errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
            Debug.logError(e,errMsg,module);
          }
        }
      }
 else {
      }
    }
  }
  Timestamp timestamp=null;
  timestamp=UtilDateTime.nowTimestamp();
  Map comiCtx=FastMap.newInstance();
  comiCtx.put("logicalId",logicalId);
  comiCtx.put("authId",authId);
  comiCtx.put("referenceId",referenceId);
  comiCtx.put("receivedDate",timestamp);
  comiCtx.put("component",component);
  comiCtx.put("task",task);
  comiCtx.put("outgoingMessage","N");
  comiCtx.put("confirmation",confirmation);
  comiCtx.put("bsrVerb",bsrVerb);
  comiCtx.put("bsrNoun",bsrNoun);
  comiCtx.put("bsrRevision",bsrRevision);
  comiCtx.put("orderId",orderId);
  comiCtx.put("userLogin",userLogin);
  try {
    Map comiResult=dispatcher.runSync("createOagisMessageInfo",comiCtx);
    if (ServiceUtil.isError(comiResult)) {
      String errMsg=ServiceUtil.getErrorMessage(comiResult);
      errorMapList.add(UtilMisc.toMap("reasonCode","CreateOagisMessageServiceError","description",errMsg));
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","CreateOagisMessageInfoError","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  Map result=FastMap.newInstance();
  result.put("contentType","text/plain");
  if (errorMapList.size() > 0) {
    result.putAll(comiCtx);
    result.put("errorMapList",errorMapList);
    String errMsg="Error Processing Received Messages";
    result.putAll(ServiceUtil.returnError(errMsg));
    return result;
  }
  result.putAll(ServiceUtil.returnSuccess("Action Performed Successfully"));
  return result;
}
