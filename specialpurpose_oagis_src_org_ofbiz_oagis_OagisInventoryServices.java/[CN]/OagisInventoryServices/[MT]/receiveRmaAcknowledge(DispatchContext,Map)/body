{
  InputStream in=(InputStream)context.get("inputStream");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  List errorList=FastList.newInstance();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting userLogin",module);
    }
  }
  Document doc=null;
  try {
    doc=UtilXml.readXmlDocument(in,true,"ReceiveRmaAcknowledge");
  }
 catch (  SAXException e) {
    String errMsg="Error parsing the ReceiveRmaAcknowledgeResponse";
    errorList.add(errMsg);
    Debug.logError(e,errMsg,module);
  }
catch (  ParserConfigurationException e) {
    String errMsg="Error parsing the ReceiveRmaAcknowledgeResponse";
    errorList.add(errMsg);
    Debug.logError(e,errMsg,module);
  }
catch (  IOException e) {
    String errMsg="Error parsing the ReceiveRmaAcknowledgeResponse";
    errorList.add(errMsg);
    Debug.logError(e,errMsg,module);
  }
  Element receiveRmaElement=doc.getDocumentElement();
  receiveRmaElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(receiveRmaElement,"N1:CNTROLAREA");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:SENDER");
  Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:BSR");
  String bsrVerb=UtilXml.childElementValue(docBsrElement,"N2:VERB");
  String bsrNoun=UtilXml.childElementValue(docBsrElement,"N2:NOUN");
  String bsrRevision=UtilXml.childElementValue(docBsrElement,"N2:REVISION");
  String logicalId=UtilXml.childElementValue(docSenderElement,"N2:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"N2:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"N2:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"N2:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"N2:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"N2:AUTHID");
  Element dataAreaElement=UtilXml.firstChildElement(receiveRmaElement,"n:DATAAREA");
  Element acknowledgeDeliveryElement=UtilXml.firstChildElement(dataAreaElement,"n:ACKNOWLEDGE_DELIVERY");
  Element receiptHdrElement=UtilXml.firstChildElement(acknowledgeDeliveryElement,"n:RECEIPTHDR");
  Element qtyElement=UtilXml.firstChildElement(receiptHdrElement,"N1:QUANTITY");
  String itemQty=UtilXml.childElementValue(qtyElement,"N2:VALUE");
  String sign=UtilXml.childElementValue(qtyElement,"N2:SIGN");
  String sku=UtilXml.childElementValue(receiptHdrElement,"N2:ITEM");
  Element invDetailElement=UtilXml.firstChildElement(receiptHdrElement,"n:INVDETAIL");
  String serialNumber=UtilXml.childElementValue(invDetailElement,"N2:SERIALNUM");
  String invItemStatus=UtilXml.childElementValue(receiptHdrElement,"N2:DISPOSITN");
  Element documentRefElement=UtilXml.firstChildElement(receiptHdrElement,"N1:DOCUMNTREF");
  String returnId=UtilXml.childElementValue(documentRefElement,"N2:DOCUMENTID");
  Map urhCtx=new HashMap();
  String orderId=null;
  if (returnId != null) {
    GenericValue returnHeader=null;
    try {
      returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
    }
 catch (    GenericEntityException e) {
      String errMsg="Error Getting ReturnHeader ";
      Debug.logError(e,errMsg,module);
    }
    if (returnHeader.getString("statusId").equals("RETURN_ACCEPTED")) {
      urhCtx.put("returnId",returnId);
      urhCtx.put("statusId","RETURN_COMPLETED");
      urhCtx.put("userLogin",userLogin);
      try {
        Map urhResult=dispatcher.runSync("updateReturnHeader",urhCtx);
        if (ServiceUtil.isError(urhResult)) {
          String errMsg="Error running service updateReturnHeader";
          errorList.add(errMsg);
          Debug.logError(errMsg,module);
        }
      }
 catch (      GenericServiceException gse) {
        String errMsg="Error running service updateReturnHeader";
        errorList.add(errMsg);
        Debug.logError(gse,errMsg,module);
      }
      try {
        GenericValue returnItem=EntityUtil.getFirst(delegator.findByAnd("ReturnItem",UtilMisc.toMap("returnId",returnId)));
        orderId=returnItem.getString("orderId");
      }
 catch (      GenericEntityException e) {
        String errMsg="Error Getting Entity ReturnItem";
        Debug.logError(e,errMsg,module);
      }
    }
  }
  String inventoryItemTypeId=null;
  Map cipCtx=new HashMap();
  if (serialNumber == null) {
    inventoryItemTypeId="NON_SERIAL_INV_ITEM";
  }
 else {
    inventoryItemTypeId="SERIALIZED_INV_ITEM";
    cipCtx.put("serialNumber",serialNumber);
  }
  double quantityAccepted=0.0;
  double quantityRejected=0.0;
  if (sign.equals("+")) {
    quantityAccepted=Double.parseDouble(itemQty);
    quantityRejected=0.0;
  }
 else {
    quantityRejected=Double.parseDouble(itemQty);
    quantityAccepted=0.0;
  }
  GenericValue inventoryItem=null;
  try {
    inventoryItem=EntityUtil.getFirst(delegator.findByAnd("InventoryItem",UtilMisc.toMap("serialNumber",serialNumber)));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting Entity InventoryItem";
    Debug.logError(e,errMsg,module);
  }
  String productId=inventoryItem.getString("productId");
  if (productId.compareTo(sku) != 0) {
    productId=sku;
  }
  if (serialNumber == null) {
    productId=sku;
  }
  if (invItemStatus.equals("ReceivedTOAvailable") || invItemStatus.equals("NotAvailableTOAvailable")) {
    cipCtx.put("statusId","INV_AVAILABLE");
  }
 else   if (invItemStatus.equals("ReceivedTONotAvailable") || invItemStatus.equals("AvailableTONotAvailable")) {
    cipCtx.put("statusId","INV_ON_HOLD");
  }
  String facilityId=UtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.facilityId");
  String locationSeqId=UtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.locationId");
  cipCtx.put("facilityId",facilityId);
  cipCtx.put("locationSeqId",locationSeqId);
  cipCtx.put("productId",productId);
  cipCtx.put("inventoryItemTypeId",inventoryItemTypeId);
  cipCtx.put("quantityAccepted",new Double(quantityAccepted));
  cipCtx.put("quantityRejected",new Double(quantityRejected));
  cipCtx.put("userLogin",userLogin);
  try {
    Map riResult=dispatcher.runSync("receiveInventoryProduct",cipCtx);
    if (ServiceUtil.isError(riResult)) {
      String errMsg="Error running service receiveInventoryProduct";
      errorList.add(errMsg);
      Debug.logError(errMsg,module);
    }
  }
 catch (  GenericServiceException gse) {
    errorList.add("Error running service receiveInventoryProduct");
    String errMsg=gse.getMessage();
    Debug.logError(gse,errMsg,module);
  }
  Timestamp timestamp=null;
  timestamp=UtilDateTime.nowTimestamp();
  Map comiCtx=new HashMap();
  comiCtx.put("logicalId",logicalId);
  comiCtx.put("authId",authId);
  comiCtx.put("referenceId",referenceId);
  comiCtx.put("receivedDate",timestamp);
  comiCtx.put("component",component);
  comiCtx.put("task",task);
  comiCtx.put("outgoingMessage","N");
  comiCtx.put("confirmation",confirmation);
  comiCtx.put("bsrVerb",bsrVerb);
  comiCtx.put("bsrNoun",bsrNoun);
  comiCtx.put("bsrRevision",bsrRevision);
  comiCtx.put("orderId",orderId);
  comiCtx.put("userLogin",userLogin);
  try {
    Map comiResult=dispatcher.runSync("createOagisMessageInfo",comiCtx);
    if (ServiceUtil.isError(comiResult)) {
      String errMsg="Error creating OagisMessageInfo for the Incoming Message";
      errorList.add(errMsg);
      Debug.logError(errMsg,module);
    }
  }
 catch (  GenericServiceException gse) {
    errorList.add("Error running method createOagisMessageInfo");
    String errMsg=gse.getMessage();
    Debug.logError(gse,errMsg,module);
  }
  Map result=new HashMap();
  result.put("contentType","text/plain");
  if (errorList.size() > 0) {
    result.putAll(comiCtx);
    String errMsg="Error Processing Received Messages";
    result.put("reasonCode","1000");
    result.put("description",errMsg);
    return result;
  }
  return result;
}
