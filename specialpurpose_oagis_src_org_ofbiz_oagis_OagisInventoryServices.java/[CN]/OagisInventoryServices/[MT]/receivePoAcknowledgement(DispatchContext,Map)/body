{
  InputStream in=(InputStream)context.get("inputStream");
  OutputStream out=(OutputStream)context.get("outputStream");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  List errorList=FastList.newInstance();
  Map sendConfirmBodCtx=FastMap.newInstance();
  try {
    GenericValue userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","admin"));
    Document doc=UtilXml.readXmlDocument(in,true,"ReceivePoAcknowledge");
    Element receivePoElement=doc.getDocumentElement();
    receivePoElement.normalize();
    Element docCtrlAreaElement=UtilXml.firstChildElement(receivePoElement,"N1:CNTROLAREA");
    Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:SENDER");
    Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:BSR");
    String bsrVerb=UtilXml.childElementValue(docBsrElement,"N2:VERB");
    String bsrNoun=UtilXml.childElementValue(docBsrElement,"N2:NOUN");
    String bsrRevision=UtilXml.childElementValue(docBsrElement,"N2:REVISION");
    String logicalId=UtilXml.childElementValue(docSenderElement,"N2:LOGICALID");
    String component=UtilXml.childElementValue(docSenderElement,"N2:COMPONENT");
    String task=UtilXml.childElementValue(docSenderElement,"N2:TASK");
    String referenceId=UtilXml.childElementValue(docSenderElement,"N2:REFERENCEID");
    String confirmation=UtilXml.childElementValue(docSenderElement,"N2:CONFIRMATION");
    String language=UtilXml.childElementValue(docSenderElement,"N2:LANGUAGE");
    String codePage=UtilXml.childElementValue(docSenderElement,"N2:CODEPAGE");
    String authId=UtilXml.childElementValue(docSenderElement,"N2:AUTHID");
    Element dataAreaElement=UtilXml.firstChildElement(receivePoElement,"n:DATAAREA");
    Element acknowledgeDeliveryElement=UtilXml.firstChildElement(dataAreaElement,"n:ACKNOWLEDGE_DELIVERY");
    Element receiptHdrElement=UtilXml.firstChildElement(acknowledgeDeliveryElement,"n:RECEIPTHDR");
    Element qtyElement=UtilXml.firstChildElement(receiptHdrElement,"N1:QUANTITY");
    String itemQty=UtilXml.childElementValue(qtyElement,"N2:VALUE");
    String sign=UtilXml.childElementValue(qtyElement,"N2:SIGN");
    String productId=UtilXml.childElementValue(receiptHdrElement,"N2:ITEM");
    String receivedDate=UtilXml.childElementValue(receiptHdrElement,"N1:DATETIME");
    Element invDetailElement=UtilXml.firstChildElement(receiptHdrElement,"n:INVDETAIL");
    String serialNumber=UtilXml.childElementValue(invDetailElement,"N2:SERIALNUM");
    Element documentRefElement=UtilXml.firstChildElement(receiptHdrElement,"N1:DOCUMNTREF");
    String orderTypeId=UtilXml.childElementValue(documentRefElement,"N2:DOCTYPE");
    String orderId=UtilXml.childElementValue(documentRefElement,"N2:DOCUMENTID");
    String lineNum=UtilXml.childElementValue(documentRefElement,"N2:LINENUM");
    Map cipCtx=new HashMap();
    String inventoryItemTypeId=null;
    if (serialNumber.length() == 0) {
      inventoryItemTypeId="NON_SERIAL_INV_ITEM";
    }
 else {
      inventoryItemTypeId="SERIALIZED_INV_ITEM";
      cipCtx.put("serialNumber",serialNumber);
    }
    double quantityAccepted=0.0;
    double quantityRejected=0.0;
    if (sign.equals("+")) {
      quantityAccepted=Double.parseDouble(itemQty);
      quantityRejected=0.0;
    }
 else {
      quantityRejected=Double.parseDouble(itemQty);
      quantityAccepted=0.0;
    }
    cipCtx.put("facilityId","WebStoreWarehouse");
    cipCtx.put("productId",productId);
    cipCtx.put("inventoryItemTypeId",inventoryItemTypeId);
    cipCtx.put("quantityAccepted",new Double(quantityAccepted));
    cipCtx.put("quantityRejected",new Double(quantityRejected));
    cipCtx.put("userLogin",userLogin);
    cipCtx.put("orderId",orderId);
    Map riResult=null;
    Map comiResult=null;
    try {
      Debug.logInfo("==========riResult======",module);
      riResult=dispatcher.runSync("receiveInventoryProduct",cipCtx);
      Debug.logInfo("==========riResult======" + riResult,module);
    }
 catch (    GenericServiceException gse) {
      if (ServiceUtil.isError(riResult)) {
        errorList.add("Error running method receiveInventoryProduct");
      }
      String errMessageForreceiveInventoryProduct=gse.getMessage();
      Debug.logError(gse,errMessageForreceiveInventoryProduct,module);
    }
    sendConfirmBodCtx.put("logicalId",logicalId);
    sendConfirmBodCtx.put("component",component);
    sendConfirmBodCtx.put("task",task);
    sendConfirmBodCtx.put("referenceId",referenceId);
    sendConfirmBodCtx.put("userLogin",userLogin);
    sendConfirmBodCtx.put("confirmation",confirmation);
    Map comiCtx=new HashMap();
    Date date=new Date();
    Timestamp timestamp;
    DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSS'Z'Z");
    try {
      date=dateFormat.parse(receivedDate);
    }
 catch (    ParseException e) {
      Debug.logError(e,"Error parsing Date",module);
    }
    timestamp=new Timestamp(date.getTime());
    comiCtx.put("logicalId",logicalId);
    comiCtx.put("authId",authId);
    comiCtx.put("referenceId",referenceId);
    comiCtx.put("receivedDate",timestamp);
    comiCtx.put("component",component);
    comiCtx.put("task",task);
    comiCtx.put("outgoingMessage","N");
    comiCtx.put("confirmation",confirmation);
    comiCtx.put("bsrVerb",bsrVerb);
    comiCtx.put("bsrNoun",bsrNoun);
    comiCtx.put("bsrRevision",bsrRevision);
    comiCtx.put("orderId",orderId);
    comiCtx.put("userLogin",userLogin);
    try {
      comiResult=dispatcher.runSync("createOagisMessageInfo",comiCtx);
      Debug.logInfo("==========comiResult======" + comiResult,module);
    }
 catch (    GenericServiceException gse) {
      if (ServiceUtil.isError(riResult)) {
        errorList.add("Error running method createOagisMessageInfo");
      }
      String errMessageForcreateOagisMessageInfo=gse.getMessage();
      Debug.logError(gse,errMessageForcreateOagisMessageInfo,module);
    }
  }
 catch (  Exception e) {
    String errMessageReceiveInventoryProduct=e.getMessage();
    Debug.logError(e,errMessageReceiveInventoryProduct,module);
    errorList.add("Error During Entity Interaction");
  }
  StringBuffer successString=new StringBuffer();
  if (errorList.size() > 0) {
    Iterator errorListIter=errorList.iterator();
    while (errorListIter.hasNext()) {
      String errorMsg=(String)errorListIter.next();
      successString.append(errorMsg);
      if (errorListIter.hasNext()) {
        successString.append(", ");
      }
    }
    try {
      if (successString.length() > 0) {
        Map scbCtx=FastMap.newInstance();
        scbCtx=dispatcher.runSync("sendConfirmBod",sendConfirmBodCtx);
        Debug.logInfo("==========scbCtx======" + scbCtx,module);
      }
    }
 catch (    GenericServiceException gse) {
      String errMessageForsendConfirmBod=gse.getMessage();
      Debug.logError(gse,errMessageForsendConfirmBod,module);
    }
  }
  return ServiceUtil.returnError("Error in Processing");
}
