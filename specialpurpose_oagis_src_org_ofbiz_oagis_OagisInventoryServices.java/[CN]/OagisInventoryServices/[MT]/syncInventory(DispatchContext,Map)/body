{
  InputStream in=(InputStream)context.get("inputStream");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  Map receiveInventoryCtx=FastMap.newInstance();
  List errorMapList=FastList.newInstance();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
    }
 catch (    GenericEntityException e) {
      String errMsg="Error Getting UserLogin: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  Document doc=null;
  try {
    doc=UtilXml.readXmlDocument(in,true,"SyncInventory");
  }
 catch (  SAXException e) {
    String errMsg="Error parsing the SyncInventoryResponse: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","SAXException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
catch (  ParserConfigurationException e) {
    String errMsg="Error parsing the SyncInventoryResponse: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","ParserConfigurationException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
catch (  IOException e) {
    String errMsg="Error parsing the SyncInventoryResponse: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","IOException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  if (errorMapList.size() > 0) {
    return ServiceUtil.returnError("Unable to parse message: SyncInventory");
  }
  Element receiveInventoryElement=doc.getDocumentElement();
  receiveInventoryElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(receiveInventoryElement,"N1:CNTROLAREA");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:SENDER");
  Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:BSR");
  String bsrVerb=UtilXml.childElementValue(docBsrElement,"N2:VERB");
  String bsrNoun=UtilXml.childElementValue(docBsrElement,"N2:NOUN");
  String bsrRevision=UtilXml.childElementValue(docBsrElement,"N2:REVISION");
  String logicalId=UtilXml.childElementValue(docSenderElement,"N2:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"N2:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"N2:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"N2:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"N2:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"N2:AUTHID");
  Element dataAreaElement=UtilXml.firstChildElement(receiveInventoryElement,"n:DATAAREA");
  Element dataAreaSyncInventoryElement=UtilXml.firstChildElement(dataAreaElement,"n:SYNC_INVENTORY");
  Element dataAreaInventoryElement=UtilXml.firstChildElement(dataAreaSyncInventoryElement,"n:INVENTORY");
  Element dataAreaQuantityElement=UtilXml.firstChildElement(dataAreaInventoryElement,"N1:QUANTITY");
  String itemQtyStr=UtilXml.childElementValue(dataAreaQuantityElement,"N2:VALUE");
  double itemQty=Double.parseDouble(itemQtyStr);
  String sign=UtilXml.childElementValue(dataAreaQuantityElement,"N2:SIGN");
  String uom=UtilXml.childElementValue(dataAreaQuantityElement,"N2:UOM");
  String productId=UtilXml.childElementValue(dataAreaQuantityElement,"N2:ITEM");
  String itemStatus=UtilXml.childElementValue(dataAreaQuantityElement,"N2:ITEMSTATUS");
  String datetimeReceived=UtilXml.childElementValue(dataAreaInventoryElement,"N1:DATETIMEANY");
  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSS'Z'Z");
  Timestamp timestamp=null;
  try {
    timestamp=new Timestamp(sdf.parse(datetimeReceived).getTime());
    receiveInventoryCtx.put("datetimeReceived",timestamp);
  }
 catch (  ParseException e) {
    String errMsg="Error parsing Date: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","ParseException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  String facilityId=UtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.SyncInventoryFacilityId");
  receiveInventoryCtx.put("facilityId",facilityId);
  receiveInventoryCtx.put("productId",productId);
  receiveInventoryCtx.put("statusId",itemStatus);
  receiveInventoryCtx.put("currencyUomId",uom);
  receiveInventoryCtx.put("userLogin",userLogin);
  try {
    GenericValue inventoryItem=EntityUtil.getFirst(delegator.findByAnd("InventoryItem",UtilMisc.toMap("productId",productId)));
    String inventoryItemTypeId=inventoryItem.getString("inventoryItemTypeId");
    if (inventoryItemTypeId.equals("SERIALIZED_INV_ITEM")) {
      receiveInventoryCtx.put("inventoryItemTypeId","SERIALIZED_INV_ITEM");
    }
 else {
      receiveInventoryCtx.put("inventoryItemTypeId","NON_SERIAL_INV_ITEM");
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting Inventory Item: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  double quantityOnHandTotal=0.0;
  List inventoryItems=null;
  List exprs=FastList.newInstance();
  try {
    exprs.add(new EntityExpr("datetimeReceived",EntityOperator.LESS_THAN_EQUAL_TO,timestamp));
    exprs.add(new EntityExpr("productId",EntityOperator.EQUALS,productId));
    inventoryItems=delegator.findByCondition("InventoryItem",new EntityConditionList(exprs,EntityOperator.OR),null,UtilMisc.toList("inventoryItemId"));
    Iterator invItemIter=inventoryItems.iterator();
    while (invItemIter.hasNext()) {
      GenericValue inventoryItem=(GenericValue)invItemIter.next();
      quantityOnHandTotal=quantityOnHandTotal + Double.parseDouble(inventoryItem.getString("quantityOnHandTotal"));
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting Inventory Item: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  double quantityAccepted;
  double quantityRejected;
  if (sign.equals("+")) {
    quantityAccepted=itemQty - quantityOnHandTotal;
    quantityRejected=0.0;
  }
 else {
    quantityRejected=itemQty;
    quantityAccepted=0.0;
  }
  receiveInventoryCtx.put("quantityAccepted",new Double(quantityAccepted));
  receiveInventoryCtx.put("quantityRejected",new Double(quantityRejected));
  try {
    if (itemQty != quantityOnHandTotal) {
      Map ripResult=dispatcher.runSync("receiveInventoryProduct",receiveInventoryCtx);
      if (ServiceUtil.isError(ripResult)) {
        String errMsg=ServiceUtil.getErrorMessage(ripResult);
        errorMapList.add(UtilMisc.toMap("reasonCode","ReceiveInventoryServiceError","description",errMsg));
      }
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error running service receiveInventoryProduct: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  Map comiCtx=FastMap.newInstance();
  comiCtx.put("logicalId",logicalId);
  comiCtx.put("component",component);
  comiCtx.put("task",task);
  comiCtx.put("referenceId",referenceId);
  comiCtx.put("confirmation",confirmation);
  comiCtx.put("authId",authId);
  comiCtx.put("bsrVerb",bsrVerb);
  comiCtx.put("bsrNoun",bsrNoun);
  comiCtx.put("bsrRevision",bsrRevision);
  comiCtx.put("receivedDate",UtilDateTime.nowTimestamp());
  comiCtx.put("outgoingMessage","N");
  comiCtx.put("userLogin",userLogin);
  try {
    Map comiResult=dispatcher.runSync("createOagisMessageInfo",comiCtx);
    if (ServiceUtil.isError(comiResult)) {
      String errMsg=ServiceUtil.getErrorMessage(comiResult);
      errorMapList.add(UtilMisc.toMap("reasonCode","CreateOagisMessageServiceError","description",errMsg));
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","CreateOagisMessageInfoError","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  Map sendMap=FastMap.newInstance();
  List facilityContactMechs=null;
  GenericValue contactMech=null;
  try {
    facilityContactMechs=delegator.findByAnd("FacilityContactMech",UtilMisc.toMap("facilityId",facilityId));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting FacilityContactMech: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  Iterator fcmIter=facilityContactMechs.iterator();
  while (fcmIter.hasNext()) {
    GenericValue facilityContactMech=(GenericValue)fcmIter.next();
    String contactMechId=facilityContactMech.getString("contactMechId");
    try {
      contactMech=delegator.findByPrimaryKey("ContactMech",UtilMisc.toMap("contactMechId",contactMechId));
    }
 catch (    GenericEntityException e) {
      String errMsg="Error Getting ContactMech: " + e.toString();
      errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
      Debug.logError(e,errMsg,module);
    }
    String contactMechTypeId=contactMech.getString("contactMechTypeId");
    if (contactMechTypeId.equals("EMAIL_ADDRESS")) {
      String emailString=contactMech.getString("infoString");
      sendMap.put("sendTo",emailString);
    }
  }
  GenericValue productStoreEmail=null;
  String productStoreId=UtilProperties.getPropertyValue("oagis.properties","Oagis.Warehouse.SyncInventoryProductStoreId");
  try {
    productStoreEmail=delegator.findByPrimaryKey("ProductStoreEmailSetting",UtilMisc.toMap("productStoreId",productStoreId,"emailType","PRDS_OAGIS_CONFIRM"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting Entity ProductStoreEmailSetting: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  if (productStoreEmail != null) {
    String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
    sendMap.put("bodyScreenUri",bodyScreenLocation);
  }
 else {
    sendMap.put("bodyScreenUri","component://oagis/widget/EmailOagisMessageScreens.xml#EmailOagisMessageNotification");
  }
  if (locale == null) {
    locale=Locale.getDefault();
  }
  sendMap.put("subject",productStoreEmail.getString("subject"));
  sendMap.put("sendFrom",productStoreEmail.getString("fromAddress"));
  sendMap.put("sendCc",productStoreEmail.getString("ccAddress"));
  sendMap.put("sendBcc",productStoreEmail.getString("bccAddress"));
  sendMap.put("contentType",productStoreEmail.getString("contentType"));
  Map bodyParameters=UtilMisc.toMap("quantityOnHandTotal",String.valueOf(quantityOnHandTotal),"itemQtyFrmMessage",String.valueOf(itemQty),"locale",locale);
  sendMap.put("bodyParameters",bodyParameters);
  sendMap.put("userLogin",userLogin);
  Map sendResp=null;
  try {
    sendResp=dispatcher.runSync("sendMailFromScreen",sendMap);
    if (ServiceUtil.isError(sendResp)) {
      String errMsg=ServiceUtil.getErrorMessage(sendResp);
      errorMapList.add(UtilMisc.toMap("reasonCode","SendMailServiceError","description",errMsg));
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error Running Service sendMailFromScreen: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  Map result=FastMap.newInstance();
  result.put("contentType","text/plain");
  if (errorMapList.size() > 0) {
    result.putAll(comiCtx);
    result.put("errorMapList",errorMapList);
    String errMsg="Error Processing Received Messages";
    result.putAll(ServiceUtil.returnError(errMsg));
    return result;
  }
  result.putAll(ServiceUtil.returnSuccess("Action Performed Successfully"));
  return result;
}
