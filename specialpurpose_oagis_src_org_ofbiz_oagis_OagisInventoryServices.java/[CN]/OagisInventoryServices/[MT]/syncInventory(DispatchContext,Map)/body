{
  InputStream in=(InputStream)context.get("inputStream");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  List errorMapList=FastList.newInstance();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","admin"));
    }
 catch (    GenericEntityException e) {
      String errMsg="Error Getting UserLogin: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  Document doc=null;
  try {
    doc=UtilXml.readXmlDocument(in,true,"SyncInventory");
  }
 catch (  SAXException e) {
    String errMsg="Error parsing the SyncInventoryResponse: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","SAXException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
catch (  ParserConfigurationException e) {
    String errMsg="Error parsing the SyncInventoryResponse: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","ParserConfigurationException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
catch (  IOException e) {
    String errMsg="Error parsing the SyncInventoryResponse: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","IOException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  if (errorMapList.size() > 0) {
    return ServiceUtil.returnError("Unable to parse message: SyncInventory");
  }
  Element receiveInventoryElement=doc.getDocumentElement();
  receiveInventoryElement.normalize();
  Element docCtrlAreaElement=UtilXml.firstChildElement(receiveInventoryElement,"N1:CNTROLAREA");
  Element docSenderElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:SENDER");
  Element docBsrElement=UtilXml.firstChildElement(docCtrlAreaElement,"N1:BSR");
  String bsrVerb=UtilXml.childElementValue(docBsrElement,"N2:VERB");
  String bsrNoun=UtilXml.childElementValue(docBsrElement,"N2:NOUN");
  String bsrRevision=UtilXml.childElementValue(docBsrElement,"N2:REVISION");
  String logicalId=UtilXml.childElementValue(docSenderElement,"N2:LOGICALID");
  String component=UtilXml.childElementValue(docSenderElement,"N2:COMPONENT");
  String task=UtilXml.childElementValue(docSenderElement,"N2:TASK");
  String referenceId=UtilXml.childElementValue(docSenderElement,"N2:REFERENCEID");
  String confirmation=UtilXml.childElementValue(docSenderElement,"N2:CONFIRMATION");
  String authId=UtilXml.childElementValue(docSenderElement,"N2:AUTHID");
  Element dataAreaElement=UtilXml.firstChildElement(receiveInventoryElement,"n:DATAAREA");
  Element dataAreaSyncInventoryElement=UtilXml.firstChildElement(dataAreaElement,"n:SYNC_INVENTORY");
  Element dataAreaInventoryElement=UtilXml.firstChildElement(dataAreaSyncInventoryElement,"n:INVENTORY");
  Element dataAreaQuantityElement=UtilXml.firstChildElement(dataAreaInventoryElement,"N1:QUANTITY");
  String value=UtilXml.childElementValue(dataAreaQuantityElement,"N2:VALUE");
  String sign=UtilXml.childElementValue(dataAreaQuantityElement,"N2:SIGN");
  String uom=UtilXml.childElementValue(dataAreaQuantityElement,"N2:UOM");
  String item=UtilXml.childElementValue(dataAreaQuantityElement,"N2:ITEM");
  String itemStatus=UtilXml.childElementValue(dataAreaQuantityElement,"N2:ITEMSTATUS");
  double quantityAccepted;
  double quantityRejected;
  if (sign.equals("+")) {
    quantityAccepted=Double.parseDouble(value);
    quantityRejected=0.0;
  }
 else {
    quantityRejected=Double.parseDouble(value);
    quantityAccepted=0.0;
  }
  Map receiveInventoryCtx=FastMap.newInstance();
  receiveInventoryCtx.put("userLogin",userLogin);
  receiveInventoryCtx.put("statusId",itemStatus);
  receiveInventoryCtx.put("productId",item);
  receiveInventoryCtx.put("inventoryItemTypeId","NON_SERIAL_INV_ITEM");
  receiveInventoryCtx.put("facilityId","WebStoreWarehouse");
  receiveInventoryCtx.put("quantityAccepted",new Double(quantityAccepted));
  receiveInventoryCtx.put("quantityRejected",new Double(quantityRejected));
  Timestamp timestamp=null;
  timestamp=UtilDateTime.nowTimestamp();
  Map oagisMessageInfoCtx=FastMap.newInstance();
  oagisMessageInfoCtx.put("logicalId",logicalId);
  oagisMessageInfoCtx.put("component",component);
  oagisMessageInfoCtx.put("task",task);
  oagisMessageInfoCtx.put("referenceId",referenceId);
  oagisMessageInfoCtx.put("confirmation",confirmation);
  oagisMessageInfoCtx.put("userLogin",userLogin);
  oagisMessageInfoCtx.put("authId",authId);
  oagisMessageInfoCtx.put("bsrVerb",bsrVerb);
  oagisMessageInfoCtx.put("bsrNoun",bsrNoun);
  oagisMessageInfoCtx.put("bsrRevision",bsrRevision);
  oagisMessageInfoCtx.put("receivedDate",timestamp);
  oagisMessageInfoCtx.put("outgoingMessage","N");
  try {
    Map comiResult=dispatcher.runSync("createOagisMessageInfo",oagisMessageInfoCtx);
    if (ServiceUtil.isError(comiResult)) {
      String errMsg=ServiceUtil.getErrorMessage(comiResult);
      errorMapList.add(UtilMisc.toMap("reasonCode","CreateOagisMessageServiceError","description",errMsg));
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","CreateOagisMessageInfoError","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  Map gpiaResult=FastMap.newInstance();
  try {
    gpiaResult=dispatcher.runSync("getProductInventoryAvailable",UtilMisc.toMap("productId",item));
    if (ServiceUtil.isError(gpiaResult)) {
      String errMsg=ServiceUtil.getErrorMessage(gpiaResult);
      errorMapList.add(UtilMisc.toMap("reasonCode","GetProductInventoryAvailableServiceError","description",errMsg));
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error running service getProductInventoryAvailable: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  String availableToPromiseTotal=gpiaResult.get("availableToPromiseTotal").toString();
  try {
    if (value.equals(availableToPromiseTotal)) {
      Debug.logInfo("==========Both Values are same  =====",module);
    }
 else {
      Map ripResult=dispatcher.runSync("receiveInventoryProduct",receiveInventoryCtx);
      if (ServiceUtil.isError(ripResult)) {
        String errMsg=ServiceUtil.getErrorMessage(ripResult);
        errorMapList.add(UtilMisc.toMap("reasonCode","ReceiveInventoryServiceError","description",errMsg));
      }
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error running service receiveInventoryProduct: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  String contactMechId=null;
  String emailString=null;
  String contactMechTypeId=null;
  GenericValue contactMech=null;
  GenericValue facilityContactMech=null;
  List facilityContactMechs=FastList.newInstance();
  try {
    facilityContactMechs=delegator.findByAnd("FacilityContactMech",UtilMisc.toMap("facilityId","WebStoreWarehouse"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting FacilityContactMech: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  Iterator fcmIter=facilityContactMechs.iterator();
  while (fcmIter.hasNext()) {
    facilityContactMech=(GenericValue)fcmIter.next();
    contactMechId=facilityContactMech.getString("contactMechId");
    try {
      contactMech=delegator.findByPrimaryKey("ContactMech",UtilMisc.toMap("contactMechId",contactMechId));
    }
 catch (    GenericEntityException e) {
      String errMsg="Error Getting ContactMech: " + e.toString();
      errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
      Debug.logError(e,errMsg,module);
    }
    contactMechTypeId=contactMech.getString("contactMechTypeId");
    if (contactMechTypeId.equals("EMAIL_ADDRESS")) {
      emailString=contactMech.getString("infoString");
    }
  }
  Map atptMap=FastMap.newInstance();
  atptMap.put("qoh",availableToPromiseTotal);
  GenericValue psesMap=null;
  try {
    psesMap=delegator.findByPrimaryKey("ProductStoreEmailSetting",UtilMisc.toMap("productStoreId","9001","emailType","PRDS_OAGIS_CONFIRM"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting Entity ProductStoreEmailSetting: " + e.toString();
    errorMapList.add(UtilMisc.toMap("reasonCode","GenericEntityException","description",errMsg));
    Debug.logError(e,errMsg,module);
  }
  if (psesMap.get("bodyScreenLocation") != null) {
    Map notifyCtx=FastMap.newInstance();
    String fromAddress=psesMap.getString("fromAddress");
    notifyCtx.put("sendFrom",fromAddress);
    String ccAddress=psesMap.getString("ccAddress");
    notifyCtx.put("sendCc",ccAddress);
    String bccAddress=psesMap.getString("bccAddress");
    notifyCtx.put("sendBcc",bccAddress);
    String contentType=psesMap.getString("contentType");
    notifyCtx.put("contentType",contentType);
    String subject=psesMap.getString("subject");
    notifyCtx.put("subject",subject);
    String bodyScreenUri=psesMap.getString("bodyScreenLocation");
    notifyCtx.put("bodyScreenUri",bodyScreenUri);
    Map bodyParameters=FastMap.newInstance();
    bodyParameters.put("atptMap",atptMap);
    notifyCtx.put("bodyParameters",bodyParameters);
    notifyCtx.put("sendTo",emailString);
    try {
      Map smfsResult=dispatcher.runSync("sendMailFromScreen",notifyCtx);
      if (ServiceUtil.isError(smfsResult)) {
        String errMsg=ServiceUtil.getErrorMessage(smfsResult);
        errorMapList.add(UtilMisc.toMap("reasonCode","SendMailServiceError","description",errMsg));
      }
    }
 catch (    GenericServiceException e) {
      String errMsg="Error Running Service sendMailFromScreen: " + e.toString();
      errorMapList.add(UtilMisc.toMap("reasonCode","GenericServiceException","description",errMsg));
      Debug.logError(e,errMsg,module);
    }
  }
  Map result=FastMap.newInstance();
  result.put("contentType","text/plain");
  if (errorMapList.size() > 0) {
    result.putAll(oagisMessageInfoCtx);
    result.put("errorMapList",errorMapList);
    String errMsg="Error Processing Received Messages";
    result.putAll(ServiceUtil.returnError(errMsg));
    return result;
  }
  result.putAll(ServiceUtil.returnSuccess("Action Performed Successfully"));
  return result;
}
