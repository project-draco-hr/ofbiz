{
  if (this.methodName != null && this.methodName.length() > 0) {
    String methodName=methodContext.expandString(this.methodName);
    String xmlResource=methodContext.expandString(this.xmlResource);
    SimpleMethod simpleMethodToCall=null;
    if (xmlResource == null || xmlResource.length() == 0) {
      simpleMethodToCall=this.simpleMethod.getSimpleMethodInSameFile(methodName);
    }
 else {
      Map simpleMethods=null;
      try {
        simpleMethods=SimpleMethod.getSimpleMethods(xmlResource,methodName,methodContext.getLoader());
      }
 catch (      MiniLangException e) {
        String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [error getting methods from resource: "+ e.getMessage()+ "]";
        Debug.logError(e,errMsg,module);
        methodContext.setErrorReturn(errMsg,simpleMethod);
        return false;
      }
      simpleMethodToCall=(SimpleMethod)simpleMethods.get(methodName);
    }
    if (simpleMethodToCall == null) {
      String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process, could not find SimpleMethod "+ methodName+ " in XML document in resource: "+ xmlResource;
      methodContext.setErrorReturn(errMsg,simpleMethod);
      return false;
    }
    String returnVal=simpleMethodToCall.exec(methodContext);
    if (Debug.verboseOn())     Debug.logVerbose("Called inline simple-method named [" + methodName + "] in resource ["+ xmlResource+ "], returnVal is ["+ returnVal+ "]",module);
    if (returnVal != null && returnVal.equals(simpleMethodToCall.getDefaultErrorCode())) {
      if (methodContext.getMethodType() == MethodContext.EVENT) {
        methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
      }
 else       if (methodContext.getMethodType() == MethodContext.SERVICE) {
        methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
      }
      return false;
    }
    if (methodContext.getMethodType() == MethodContext.EVENT) {
      String responseCode=(String)methodContext.getEnv(simpleMethod.getEventResponseCodeName());
      if (responseCode != null && responseCode.equals(simpleMethod.getDefaultErrorCode())) {
        Debug.logWarning("Got error [" + responseCode + "] calling inline simple-method named ["+ methodName+ "] in resource ["+ xmlResource+ "], message is "+ methodContext.getEnv(simpleMethod.getEventErrorMessageName()),module);
        return false;
      }
    }
 else     if (methodContext.getMethodType() == MethodContext.SERVICE) {
      String resonseMessage=(String)methodContext.getEnv(simpleMethod.getServiceResponseMessageName());
      if (resonseMessage != null && resonseMessage.equals(simpleMethod.getDefaultErrorCode())) {
        Debug.logWarning("Got error [" + resonseMessage + "] calling inline simple-method named ["+ methodName+ "] in resource ["+ xmlResource+ "], message is "+ methodContext.getEnv(simpleMethod.getServiceErrorMessageName())+ ", and the error message list is: "+ methodContext.getEnv(simpleMethod.getServiceErrorMessageListName()),module);
        return false;
      }
    }
  }
 else {
    String errMsg="ERROR in call-simple-method: methodName was missing; not running simpleMethod";
    Debug.logError(errMsg,module);
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  return true;
}
