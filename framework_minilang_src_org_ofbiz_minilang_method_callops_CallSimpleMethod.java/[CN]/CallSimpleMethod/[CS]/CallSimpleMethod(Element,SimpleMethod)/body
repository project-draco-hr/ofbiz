{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.attributeNames(simpleMethod,element,"method-name","xml-resource","memory-model");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"method-name");
    MiniLangValidate.constantAttributes(simpleMethod,element,"method-name","xml-resource","memory-model");
    MiniLangValidate.childElements(simpleMethod,element,"result-to-field");
  }
  this.methodName=element.getAttribute("method-name");
  this.xmlResource=element.getAttribute("xml-resource");
  this.memoryModel=element.getAttribute("memory-model");
  List<? extends Element> resultToFieldElements=UtilXml.childElementList(element,"result-to-field");
  if (UtilValidate.isNotEmpty(resultToFieldElements)) {
    if (!"function".equals(this.memoryModel)) {
      MiniLangValidate.handleError("Inline memory model cannot include <result-to-field> elements.",simpleMethod,element);
    }
    List<ResultToField> resultToFieldList=new ArrayList<ResultToField>(resultToFieldElements.size());
    for (    Element resultToFieldElement : resultToFieldElements) {
      resultToFieldList.add(new ResultToField(resultToFieldElement,simpleMethod));
    }
    this.resultToFieldList=resultToFieldList;
  }
 else {
    this.resultToFieldList=null;
  }
}
