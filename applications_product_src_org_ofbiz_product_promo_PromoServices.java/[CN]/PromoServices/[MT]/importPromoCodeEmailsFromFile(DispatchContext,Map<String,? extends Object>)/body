{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String productPromoCodeId=(String)context.get("productPromoCodeId");
  byte[] wrapper=(byte[])context.get("uploadedFile");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  if (wrapper == null) {
    return ServiceUtil.returnError("Uploaded file not valid or corrupted");
  }
  BufferedReader reader=new BufferedReader(new StringReader(new String(wrapper)));
  List<Object> errors=FastList.newInstance();
  int lines=0;
  String line;
  try {
    while ((line=reader.readLine()) != null) {
      if (line.length() > 0 && !line.startsWith("#")) {
        if (UtilValidate.isEmail(line)) {
          Map<String,Object> result=dispatcher.runSync("createProductPromoCodeEmail",UtilMisc.<String,Object>toMap("productPromoCodeId",productPromoCodeId,"emailAddress",line,"userLogin",userLogin));
          if (result != null && ServiceUtil.isError(result)) {
            errors.add(line + ": " + ServiceUtil.getErrorMessage(result));
          }
        }
 else {
          errors.add(line + ": is not a valid email address");
        }
        ++lines;
      }
    }
  }
 catch (  IOException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
 finally {
    try {
      reader.close();
    }
 catch (    IOException e) {
      Debug.logError(e,module);
    }
  }
  if (errors.size() > 0) {
    return ServiceUtil.returnError(errors);
  }
 else   if (lines == 0) {
    return ServiceUtil.returnError("Empty file; nothing to do");
  }
  return ServiceUtil.returnSuccess();
}
