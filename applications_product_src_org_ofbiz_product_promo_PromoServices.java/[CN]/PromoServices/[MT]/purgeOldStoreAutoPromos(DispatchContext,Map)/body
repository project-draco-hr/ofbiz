{
  GenericDelegator delegator=dctx.getDelegator();
  String productStoreId=(String)context.get("productStoreId");
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  List condList=new LinkedList();
  if (UtilValidate.isEmpty(productStoreId)) {
    condList.add(new EntityExpr("productStoreId",EntityOperator.EQUALS,productStoreId));
  }
  condList.add(new EntityExpr("userEntered",EntityOperator.EQUALS,"Y"));
  condList.add(new EntityExpr("thruDate",EntityOperator.NOT_EQUAL,null));
  condList.add(new EntityExpr("thruDate",EntityOperator.LESS_THAN,nowTimestamp));
  EntityCondition cond=new EntityConditionList(condList,EntityOperator.AND);
  try {
    EntityListIterator eli=delegator.findListIteratorByCondition("ProductStorePromoAndAppl",cond,null,null);
    GenericValue productStorePromoAndAppl=null;
    while ((productStorePromoAndAppl=(GenericValue)eli.next()) != null) {
      GenericValue productStorePromo=delegator.makeValue("ProductStorePromoAppl",null);
      productStorePromo.setAllFields(productStorePromoAndAppl,true,null,null);
      productStorePromo.remove();
    }
    eli.close();
  }
 catch (  GenericEntityException e) {
    String errMsg="Error removing expired ProductStorePromo records: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  return ServiceUtil.returnSuccess();
}
