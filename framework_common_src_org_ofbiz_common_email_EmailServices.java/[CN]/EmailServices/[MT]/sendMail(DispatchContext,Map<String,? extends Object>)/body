{
  String communicationEventId=(String)context.get("communicationEventId");
  if (communicationEventId != null) {
    Debug.logInfo("SendMail Running, for communicationEventId : " + communicationEventId,module);
  }
  Map<String,Object> results=ServiceUtil.returnSuccess();
  String subject=(String)context.get("subject");
  subject=FlexibleStringExpander.expandString(subject,context);
  String partyId=(String)context.get("partyId");
  String body=(String)context.get("body");
  List<Map<String,Object>> bodyParts=UtilGenerics.checkList(context.get("bodyParts"));
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  results.put("communicationEventId",communicationEventId);
  results.put("partyId",partyId);
  results.put("subject",subject);
  if (UtilValidate.isNotEmpty(body)) {
    body=FlexibleStringExpander.expandString(body,context);
    results.put("body",body);
  }
  if (UtilValidate.isNotEmpty(bodyParts)) {
    results.put("bodyParts",bodyParts);
  }
  results.put("userLogin",userLogin);
  String sendTo=(String)context.get("sendTo");
  String sendCc=(String)context.get("sendCc");
  String sendBcc=(String)context.get("sendBcc");
  String redirectAddress=UtilProperties.getPropertyValue("general.properties","mail.notifications.redirectTo");
  if (UtilValidate.isNotEmpty(redirectAddress)) {
    String originalRecipients=" [To: " + sendTo + ", Cc: "+ sendCc+ ", Bcc: "+ sendBcc+ "]";
    subject+=originalRecipients;
    sendTo=redirectAddress;
    sendCc=null;
    sendBcc=null;
  }
  String sendFrom=(String)context.get("sendFrom");
  String sendType=(String)context.get("sendType");
  String port=(String)context.get("port");
  String socketFactoryClass=(String)context.get("socketFactoryClass");
  String socketFactoryPort=(String)context.get("socketFactoryPort");
  String socketFactoryFallback=(String)context.get("socketFactoryFallback");
  String sendVia=(String)context.get("sendVia");
  String authUser=(String)context.get("authUser");
  String authPass=(String)context.get("authPass");
  String messageId=(String)context.get("messageId");
  String contentType=(String)context.get("contentType");
  boolean useSmtpAuth=false;
  if (sendType == null || sendType.equals("mail.smtp.host")) {
    sendType="mail.smtp.host";
    if (UtilValidate.isEmpty(sendVia)) {
      sendVia=UtilProperties.getPropertyValue("general.properties","mail.smtp.relay.host","localhost");
    }
    if (UtilValidate.isEmpty(authUser)) {
      authUser=UtilProperties.getPropertyValue("general.properties","mail.smtp.auth.user");
    }
    if (UtilValidate.isEmpty(authPass)) {
      authPass=UtilProperties.getPropertyValue("general.properties","mail.smtp.auth.password");
    }
    if (UtilValidate.isNotEmpty(authUser)) {
      useSmtpAuth=true;
    }
    if (UtilValidate.isEmpty(port)) {
      port=UtilProperties.getPropertyValue("general.properties","mail.smtp.port");
    }
    if (UtilValidate.isEmpty(socketFactoryPort)) {
      socketFactoryPort=UtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.port");
    }
    if (UtilValidate.isEmpty(socketFactoryClass)) {
      socketFactoryClass=UtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.class");
    }
    if (UtilValidate.isEmpty(socketFactoryFallback)) {
      socketFactoryFallback=UtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.fallback","false");
    }
  }
 else   if (sendVia == null) {
    return ServiceUtil.returnError("Parameter sendVia is required when sendType is not mail.smtp.host");
  }
  if (contentType == null) {
    contentType="text/html";
  }
  if (UtilValidate.isNotEmpty(bodyParts)) {
    contentType="multipart/mixed";
  }
  results.put("contentType",contentType);
  Session session;
  MimeMessage mail;
  try {
    Properties props=System.getProperties();
    props.put(sendType,sendVia);
    if (UtilValidate.isNotEmpty(port)) {
      props.put("mail.smtp.port",port);
    }
    if (UtilValidate.isNotEmpty(socketFactoryPort)) {
      props.put("mail.smtp.socketFactory.port",socketFactoryPort);
    }
    if (UtilValidate.isNotEmpty(socketFactoryClass)) {
      props.put("mail.smtp.socketFactory.class",socketFactoryClass);
      Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
    }
    if (UtilValidate.isNotEmpty(socketFactoryFallback)) {
      props.put("mail.smtp.socketFactory.fallback",socketFactoryFallback);
    }
    if (useSmtpAuth) {
      props.put("mail.smtp.auth","true");
    }
    session=Session.getInstance(props);
    boolean debug=UtilProperties.propertyValueEqualsIgnoreCase("general.properties","mail.debug.on","Y");
    session.setDebug(debug);
    mail=new MimeMessage(session);
    if (messageId != null) {
      mail.setHeader("In-Reply-To",messageId);
      mail.setHeader("References",messageId);
    }
    mail.setFrom(new InternetAddress(sendFrom));
    mail.setSubject(subject,"UTF-8");
    mail.setHeader("X-Mailer","Apache OFBiz, The Apache Open For Business Project");
    mail.setSentDate(new Date());
    mail.addRecipients(Message.RecipientType.TO,sendTo);
    if (UtilValidate.isNotEmpty(sendCc)) {
      mail.addRecipients(Message.RecipientType.CC,sendCc);
    }
    if (UtilValidate.isNotEmpty(sendBcc)) {
      mail.addRecipients(Message.RecipientType.BCC,sendBcc);
    }
    if (UtilValidate.isNotEmpty(bodyParts)) {
      MimeMultipart mp=new MimeMultipart();
      Debug.logInfo(bodyParts.size() + " multiparts found",module);
      for (      Map<String,Object> bodyPart : bodyParts) {
        Object bodyPartContent=bodyPart.get("content");
        MimeBodyPart mbp=new MimeBodyPart();
        if (bodyPartContent instanceof String) {
          Debug.logInfo("part of type: " + bodyPart.get("type") + " and size: "+ bodyPart.get("content").toString().length(),module);
          mbp.setText((String)bodyPartContent,"UTF-8",((String)bodyPart.get("type")).substring(5));
        }
 else         if (bodyPartContent instanceof byte[]) {
          ByteArrayDataSource bads=new ByteArrayDataSource((byte[])bodyPartContent,(String)bodyPart.get("type"));
          Debug.logInfo("part of type: " + bodyPart.get("type") + " and size: "+ ((byte[])bodyPartContent).length,module);
          mbp.setDataHandler(new DataHandler(bads));
        }
 else {
          mbp.setDataHandler(new DataHandler(bodyPartContent,(String)bodyPart.get("type")));
        }
        String fileName=(String)bodyPart.get("filename");
        if (fileName != null) {
          mbp.setFileName(fileName);
        }
        mp.addBodyPart(mbp);
      }
      mail.setContent(mp);
      mail.saveChanges();
    }
 else {
      if (contentType.startsWith("text")) {
        mail.setText(body,"UTF-8",contentType.substring(5));
      }
 else {
        mail.setContent(body,contentType);
      }
      mail.saveChanges();
    }
  }
 catch (  MessagingException e) {
    String errMsg="MessagingException when creating message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]";
    Debug.logError(e,errMsg,module);
    Debug.logError("Email message that could not be created to [" + sendTo + "] had context: "+ context,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  IOException e) {
    String errMsg="IOExcepton when creating message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]";
    Debug.logError(e,errMsg,module);
    Debug.logError("Email message that could not be created to [" + sendTo + "] had context: "+ context,module);
    return ServiceUtil.returnError(errMsg);
  }
  String mailEnabled=UtilProperties.getPropertyValue("general.properties","mail.notifications.enabled","N");
  if (!"Y".equalsIgnoreCase(mailEnabled)) {
    Debug.logImportant("Mail notifications disabled in general.properties; mail with subject [" + subject + "] not sent to addressee ["+ sendTo+ "]",module);
    Debug.logVerbose("What would have been sent, the addressee: " + sendTo + " subject: "+ subject+ " context: "+ context,module);
    results.put("messageWrapper",new MimeMessageWrapper(session,mail));
    return results;
  }
  try {
    Transport trans=session.getTransport("smtp");
    if (!useSmtpAuth) {
      trans.connect();
    }
 else {
      trans.connect(sendVia,authUser,authPass);
    }
    trans.sendMessage(mail,mail.getAllRecipients());
    results.put("messageWrapper",new MimeMessageWrapper(session,mail));
    results.put("messageId",mail.getMessageID());
    trans.close();
  }
 catch (  SendFailedException e) {
    String errMsg="[ADDRERR] Address error when sending message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]";
    Debug.logError(e,errMsg,module);
    Debug.logError("Email message that could not be sent to [" + sendTo + "] had context: "+ context,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  MessagingException e) {
    String errMsg="[CON] Connection error when sending message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]";
    Debug.logError(e,errMsg,module);
    Debug.logError("Email message that could not be sent to [" + sendTo + "] had context: "+ context,module);
    return ServiceUtil.returnError(errMsg);
  }
  return results;
}
