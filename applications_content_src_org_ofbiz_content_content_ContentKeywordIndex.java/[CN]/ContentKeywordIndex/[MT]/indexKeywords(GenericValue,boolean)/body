{
  if (content == null)   return;
  Delegator delegator=content.getDelegator();
  if (delegator == null)   return;
  String contentId=content.getString("contentId");
  String separators=KeywordSearchUtil.getSeparators();
  String stopWordBagOr=KeywordSearchUtil.getStopWordBagOr();
  String stopWordBagAnd=KeywordSearchUtil.getStopWordBagAnd();
  boolean removeStems=KeywordSearchUtil.getRemoveStems();
  Set<String> stemSet=KeywordSearchUtil.getStemSet();
  Map<String,Long> keywords=new TreeMap<String,Long>();
  List<String> strings=FastList.newInstance();
  int pidWeight=1;
  keywords.put(content.getString("contentId").toLowerCase(),Long.valueOf(pidWeight));
  addWeightedKeywordSourceString(content,"dataResourceId",strings);
  addWeightedKeywordSourceString(content,"contentName",strings);
  addWeightedKeywordSourceString(content,"description",strings);
  List<GenericValue> contentAttributes=EntityQuery.use(delegator).from("ContentAttribute").where("contentId",contentId).queryList();
  for (  GenericValue contentAttribute : contentAttributes) {
    addWeightedKeywordSourceString(contentAttribute,"attrName",strings);
    addWeightedKeywordSourceString(contentAttribute,"attrValue",strings);
  }
  List<GenericValue> contentMetaDatas=EntityQuery.use(delegator).from("ContentMetaData").where("contentId",contentId).queryList();
  for (  GenericValue contentMetaData : contentMetaDatas) {
    addWeightedKeywordSourceString(contentMetaData,"metaDataValue",strings);
  }
  List<GenericValue> contentRoles=EntityQuery.use(delegator).from("ContentRole").where("contentId",contentId).queryList();
  for (  GenericValue contentRole : contentRoles) {
    GenericValue party=EntityQuery.use(delegator).from("PartyNameView").where("partyId",contentRole.get("partyId")).queryOne();
    if (party != null) {
      addWeightedKeywordSourceString(party,"description",strings);
      addWeightedKeywordSourceString(party,"firstName",strings);
      addWeightedKeywordSourceString(party,"middleName",strings);
      addWeightedKeywordSourceString(party,"lastName",strings);
      addWeightedKeywordSourceString(party,"groupName",strings);
    }
  }
  List<GenericValue> dataResourceRoles=EntityQuery.use(delegator).from("DataResourceRole").where("dataResourceId",content.get("dataResourceId")).queryList();
  for (  GenericValue dataResourceRole : dataResourceRoles) {
    GenericValue party=EntityQuery.use(delegator).from("PartyNameView").where("partyId",dataResourceRole.get("partyId")).queryOne();
    if (party != null) {
      addWeightedKeywordSourceString(party,"description",strings);
      addWeightedKeywordSourceString(party,"firstName",strings);
      addWeightedKeywordSourceString(party,"middleName",strings);
      addWeightedKeywordSourceString(party,"lastName",strings);
      addWeightedKeywordSourceString(party,"groupName",strings);
    }
  }
  List<GenericValue> productContentList=EntityQuery.use(delegator).from("ProductContent").where("contentId",contentId).queryList();
  for (  GenericValue productContent : productContentList) {
    GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productContent.get("productId")).queryOne();
    if (product != null) {
      addWeightedKeywordSourceString(product,"productName",strings);
      addWeightedKeywordSourceString(product,"internalName",strings);
      addWeightedKeywordSourceString(product,"brandName",strings);
      addWeightedKeywordSourceString(product,"description",strings);
      addWeightedKeywordSourceString(product,"longDescription",strings);
    }
  }
  List<GenericValue> productCategoryContentList=EntityQuery.use(delegator).from("ProductCategoryContent").where("contentId",contentId).queryList();
  for (  GenericValue productCategoryContent : productCategoryContentList) {
    GenericValue productCategory=EntityQuery.use(delegator).from("ProductCategory").where("productCategoryId",productCategoryContent.getString("productCategoryId")).queryOne();
    if (productCategory != null) {
      addWeightedKeywordSourceString(productCategory,"categoryName",strings);
      addWeightedKeywordSourceString(productCategory,"description",strings);
      addWeightedKeywordSourceString(productCategory,"longDescription",strings);
    }
  }
  List<GenericValue> partyContents=EntityQuery.use(delegator).from("PartyContent").where("contentId",contentId).queryList();
  for (  GenericValue partyContent : partyContents) {
    GenericValue party=EntityQuery.use(delegator).from("PartyNameView").where("partyId",partyContent.get("partyId")).queryOne();
    if (party != null) {
      addWeightedKeywordSourceString(party,"description",strings);
      addWeightedKeywordSourceString(party,"firstName",strings);
      addWeightedKeywordSourceString(party,"middleName",strings);
      addWeightedKeywordSourceString(party,"lastName",strings);
      addWeightedKeywordSourceString(party,"groupName",strings);
    }
  }
  List<GenericValue> webSiteContents=EntityQuery.use(delegator).from("WebSiteContent").where("contentId",contentId).queryList();
  for (  GenericValue webSiteContent : webSiteContents) {
    GenericValue webSite=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteContent.get("webSiteId")).queryOne();
    if (webSite != null) {
      addWeightedKeywordSourceString(webSite,"siteName",strings);
      addWeightedKeywordSourceString(webSite,"httpHost",strings);
      addWeightedKeywordSourceString(webSite,"httpsHost",strings);
    }
  }
  List<GenericValue> workEffortContents=EntityQuery.use(delegator).from("WorkEffortContent").where("contentId",contentId).queryList();
  for (  GenericValue workEffortContent : workEffortContents) {
    GenericValue workEffort=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",workEffortContent.get("workEffortId")).queryOne();
    if (workEffort != null) {
      addWeightedKeywordSourceString(workEffort,"workEffortName",strings);
    }
  }
  GenericValue dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",content.get("dataResourceId")).queryOne();
  if (dataResource != null) {
    addWeightedKeywordSourceString(dataResource,"dataResourceName",strings);
    addWeightedKeywordSourceString(dataResource,"objectInfo",strings);
  }
  if (UtilValidate.isNotEmpty(strings)) {
    for (    String str : strings) {
      KeywordSearchUtil.processKeywordsForIndex(str,keywords,separators,stopWordBagAnd,stopWordBagOr,removeStems,stemSet);
    }
  }
  List<GenericValue> toBeStored=FastList.newInstance();
  int keywordMaxLength=Integer.parseInt(EntityUtilProperties.getPropertyValue("contentsearch","content.keyword.max.length",delegator));
  for (  Map.Entry<String,Long> entry : keywords.entrySet()) {
    if (entry.getKey().length() <= keywordMaxLength) {
      GenericValue contentKeyword=delegator.makeValue("ContentKeyword",UtilMisc.toMap("contentId",content.getString("contentId"),"keyword",entry.getKey(),"relevancyWeight",entry.getValue()));
      toBeStored.add(contentKeyword);
    }
  }
  if (toBeStored.size() > 0) {
    if (Debug.verboseOn())     Debug.logVerbose("[ContentKeywordIndex.indexKeywords] Storing " + toBeStored.size() + " keywords for contentId "+ content.getString("contentId"),module);
    if ("true".equals(EntityUtilProperties.getPropertyValue("contentsearch","index.delete.on_index","false",delegator))) {
      delegator.removeByAnd("ContentKeyword",UtilMisc.toMap("contentId",content.getString("contentId")));
    }
    delegator.storeAll(toBeStored);
  }
}
