{
  if (content == null)   return;
  Delegator delegator=content.getDelegator();
  if (delegator == null)   return;
  String contentId=content.getString("contentId");
  String separators=KeywordSearchUtil.getSeparators();
  String stopWordBagOr=KeywordSearchUtil.getStopWordBagOr();
  String stopWordBagAnd=KeywordSearchUtil.getStopWordBagAnd();
  boolean removeStems=KeywordSearchUtil.getRemoveStems();
  Set<String> stemSet=KeywordSearchUtil.getStemSet();
  Map<String,Long> keywords=new TreeMap<String,Long>();
  List<String> strings=FastList.newInstance();
  int pidWeight=1;
  keywords.put(content.getString("contentId").toLowerCase(),Long.valueOf(pidWeight));
  addWeightedKeywordSourceString(content,"dataResourceId",strings);
  addWeightedKeywordSourceString(content,"contentName",strings);
  addWeightedKeywordSourceString(content,"description",strings);
  List<GenericValue> contentAttributes=delegator.findByAnd("ContentAttribute",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue contentAttribute : contentAttributes) {
    addWeightedKeywordSourceString(contentAttribute,"attrName",strings);
    addWeightedKeywordSourceString(contentAttribute,"attrValue",strings);
  }
  List<GenericValue> contentMetaDatas=delegator.findByAnd("ContentMetaData",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue contentMetaData : contentMetaDatas) {
    addWeightedKeywordSourceString(contentMetaData,"metaDataValue",strings);
  }
  List<GenericValue> contentRoles=delegator.findByAnd("ContentRole",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue contentRole : contentRoles) {
    GenericValue party=delegator.findByPrimaryKey("PartyNameView",UtilMisc.toMap("partyId",contentRole.getString("partyId")));
    if (party != null) {
      addWeightedKeywordSourceString(party,"description",strings);
      addWeightedKeywordSourceString(party,"firstName",strings);
      addWeightedKeywordSourceString(party,"middleName",strings);
      addWeightedKeywordSourceString(party,"lastName",strings);
      addWeightedKeywordSourceString(party,"groupName",strings);
    }
  }
  List<GenericValue> dataResourceRoles=delegator.findByAnd("DataResourceRole",UtilMisc.toMap("dataResourceId",content.getString("dataResourceId")));
  for (  GenericValue dataResourceRole : dataResourceRoles) {
    GenericValue party=delegator.findByPrimaryKey("PartyNameView",UtilMisc.toMap("partyId",dataResourceRole.getString("partyId")));
    if (party != null) {
      addWeightedKeywordSourceString(party,"description",strings);
      addWeightedKeywordSourceString(party,"firstName",strings);
      addWeightedKeywordSourceString(party,"middleName",strings);
      addWeightedKeywordSourceString(party,"lastName",strings);
      addWeightedKeywordSourceString(party,"groupName",strings);
    }
  }
  List<GenericValue> productContentList=delegator.findByAnd("ProductContent",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue productContent : productContentList) {
    GenericValue product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productContent.getString("productId")));
    if (product != null) {
      addWeightedKeywordSourceString(product,"productName",strings);
      addWeightedKeywordSourceString(product,"internalName",strings);
      addWeightedKeywordSourceString(product,"brandName",strings);
      addWeightedKeywordSourceString(product,"description",strings);
      addWeightedKeywordSourceString(product,"longDescription",strings);
    }
  }
  List<GenericValue> productCategoryContentList=delegator.findByAnd("ProductCategoryContent",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue productCategoryContent : productCategoryContentList) {
    GenericValue productCategory=delegator.findByPrimaryKey("ProductCategory",UtilMisc.toMap("productCategoryId",productCategoryContent.getString("productCategoryId")));
    if (productCategory != null) {
      addWeightedKeywordSourceString(productCategory,"categoryName",strings);
      addWeightedKeywordSourceString(productCategory,"description",strings);
      addWeightedKeywordSourceString(productCategory,"longDescription",strings);
    }
  }
  List<GenericValue> partyContents=delegator.findByAnd("PartyContent",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue partyContent : partyContents) {
    GenericValue party=delegator.findByPrimaryKey("PartyNameView",UtilMisc.toMap("partyId",partyContent.getString("partyId")));
    if (party != null) {
      addWeightedKeywordSourceString(party,"description",strings);
      addWeightedKeywordSourceString(party,"firstName",strings);
      addWeightedKeywordSourceString(party,"middleName",strings);
      addWeightedKeywordSourceString(party,"lastName",strings);
      addWeightedKeywordSourceString(party,"groupName",strings);
    }
  }
  List<GenericValue> webSiteContents=delegator.findByAnd("WebSiteContent",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue webSiteContent : webSiteContents) {
    GenericValue webSite=delegator.findByPrimaryKey("WebSite",UtilMisc.toMap("webSiteId",webSiteContent.getString("webSiteId")));
    if (webSite != null) {
      addWeightedKeywordSourceString(webSite,"siteName",strings);
      addWeightedKeywordSourceString(webSite,"httpHost",strings);
      addWeightedKeywordSourceString(webSite,"httpsHost",strings);
    }
  }
  List<GenericValue> workEffortContents=delegator.findByAnd("WorkEffortContent",UtilMisc.toMap("contentId",contentId));
  for (  GenericValue workEffortContent : workEffortContents) {
    GenericValue workEffort=delegator.findByPrimaryKey("WorkEffort",UtilMisc.toMap("workEffortId",workEffortContent.getString("workEffortId")));
    if (workEffort != null) {
      addWeightedKeywordSourceString(workEffort,"workEffortName",strings);
    }
  }
  GenericValue dataResource=delegator.findByPrimaryKey("DataResource",UtilMisc.toMap("dataResourceId",content.getString("dataResourceId")));
  if (dataResource != null) {
    addWeightedKeywordSourceString(dataResource,"dataResourceName",strings);
    addWeightedKeywordSourceString(dataResource,"objectInfo",strings);
  }
  if (UtilValidate.isNotEmpty(strings)) {
    for (    String str : strings) {
      KeywordSearchUtil.processKeywordsForIndex(str,keywords,separators,stopWordBagAnd,stopWordBagOr,removeStems,stemSet);
    }
  }
  List<GenericValue> toBeStored=FastList.newInstance();
  int keywordMaxLength=Integer.parseInt(UtilProperties.getPropertyValue("contentsearch","content.keyword.max.length"));
  for (  Map.Entry<String,Long> entry : keywords.entrySet()) {
    if (entry.getKey().length() <= keywordMaxLength) {
      GenericValue contentKeyword=delegator.makeValue("ContentKeyword",UtilMisc.toMap("contentId",content.getString("contentId"),"keyword",entry.getKey(),"relevancyWeight",entry.getValue()));
      toBeStored.add(contentKeyword);
    }
  }
  if (toBeStored.size() > 0) {
    if (Debug.verboseOn())     Debug.logVerbose("[ContentKeywordIndex.indexKeywords] Storing " + toBeStored.size() + " keywords for contentId "+ content.getString("contentId"),module);
    if ("true".equals(UtilProperties.getPropertyValue("contentsearch","index.delete.on_index","false"))) {
      delegator.removeByAnd("ContentKeyword",UtilMisc.toMap("contentId",content.getString("contentId")));
    }
    delegator.storeAll(toBeStored);
  }
}
