{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  String workEffortId=(String)context.get("workEffortId");
  try {
    GenericValue testObject=delegator.findByPrimaryKey("WorkEffort",UtilMisc.toMap("workEffortId",workEffortId));
    if (testObject == null) {
      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
      result.put(ModelService.ERROR_MESSAGE,"Not a valid workflow runtime identifier");
      return result;
    }
 else     if (testObject.get("workEffortTypeId") != null && testObject.getString("workEffortTypeId").equals("WORK_FLOW")) {
    }
 else     if (testObject.get("workEffortTypeId") != null && testObject.getString("workEffortTypeId").equals("ACTIVITY")) {
      workEffortId=testObject.getString("workEffortParentId");
    }
 else {
      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
      result.put(ModelService.ERROR_MESSAGE,"Not a valid workflow runtime identifier");
      return result;
    }
  }
 catch (  GenericEntityException e) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"Problems looking up runtime object; invalid id");
    return result;
  }
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  if (!hasPermission(security,workEffortId,userLogin)) {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"You do not have permission to access this workflow");
    return result;
  }
  try {
    WfProcess process=WfFactory.getWfProcess(delegator,workEffortId);
    process.abort();
  }
 catch (  WfException we) {
    we.printStackTrace();
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,we.getMessage());
  }
  return result;
}
