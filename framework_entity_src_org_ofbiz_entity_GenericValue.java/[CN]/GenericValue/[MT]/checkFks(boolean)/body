{
  ModelEntity model=this.getModelEntity();
  Iterator<ModelRelation> relItr=model.getRelationsIterator();
  while (relItr.hasNext()) {
    ModelRelation relation=relItr.next();
    if ("one".equalsIgnoreCase(relation.getType())) {
      Map<String,Object> fields=new HashMap<String,Object>();
      for (int i=0; i < relation.getKeyMapsSize(); i++) {
        ModelKeyMap keyMap=relation.getKeyMap(i);
        fields.put(keyMap.getRelFieldName(),this.get(keyMap.getFieldName()));
      }
      EntityFieldMap ecl=EntityCondition.makeCondition(fields);
      long count=this.getDelegator().findCountByCondition(relation.getRelEntityName(),ecl,null,null);
      if (count == 0) {
        if (insertDummy) {
          GenericValue newValue=this.getDelegator().makeValue(relation.getRelEntityName());
          Iterator<ModelKeyMap> keyMapIter=relation.getKeyMapsIterator();
          boolean allFieldsSet=true;
          while (keyMapIter.hasNext()) {
            ModelKeyMap mkm=keyMapIter.next();
            if (this.get(mkm.getFieldName()) != null) {
              newValue.set(mkm.getRelFieldName(),this.get(mkm.getFieldName()));
              if (Debug.infoOn())               Debug.logInfo("Set [" + mkm.getRelFieldName() + "] to - "+ this.get(mkm.getFieldName()),module);
            }
 else {
              allFieldsSet=false;
            }
          }
          if (allFieldsSet) {
            if (Debug.infoOn())             Debug.logInfo("Creating place holder value : " + newValue,module);
            newValue.put(ModelEntity.CREATE_STAMP_FIELD,this.get(ModelEntity.CREATE_STAMP_FIELD));
            newValue.put(ModelEntity.CREATE_STAMP_TX_FIELD,this.get(ModelEntity.CREATE_STAMP_TX_FIELD));
            newValue.put(ModelEntity.STAMP_FIELD,this.get(ModelEntity.STAMP_FIELD));
            newValue.put(ModelEntity.STAMP_TX_FIELD,this.get(ModelEntity.STAMP_TX_FIELD));
            newValue.setIsFromEntitySync(true);
            newValue.checkFks(true);
            newValue.create();
          }
        }
 else {
          return false;
        }
      }
    }
  }
  return true;
}
