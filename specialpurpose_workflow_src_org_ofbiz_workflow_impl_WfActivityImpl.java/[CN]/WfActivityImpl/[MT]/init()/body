{
  GenericValue valueObject=getDefinitionObject();
  this.setProcessContext(container().contextKey());
  this.parseDescriptions(this.processContext());
  boolean inheritPriority=valueObject.getBoolean("inheritPriority").booleanValue() || false;
  if (inheritPriority) {
    GenericValue runTime=getRuntimeObject();
    Map context=processContext();
    if (context.containsKey("previousActivity")) {
      String previousActivity=(String)context.get("previousActivity");
      WfActivity pAct=WfFactory.getWfActivity(getDelegator(),previousActivity);
      if (pAct != null) {
        try {
          runTime.set("priority",new Long(pAct.priority()));
          runTime.store();
        }
 catch (        GenericEntityException e) {
          throw new WfException(e.getMessage(),e);
        }
      }
    }
  }
  GenericValue performer=null;
  if (valueObject.get("performerParticipantId") != null) {
    try {
      performer=valueObject.getRelatedOne("PerformerWorkflowParticipant");
      if (performer == null) {
        Map performerFields=UtilMisc.toMap("packageId",valueObject.getString("packageId"),"packageVersion",valueObject.getString("packageVersion"),"processId","_NA_","processVersion","_NA_","participantId",valueObject.getString("performerParticipantId"));
        performer=delegator.findByPrimaryKey("WorkflowParticipant",performerFields);
      }
    }
 catch (    GenericEntityException e) {
      throw new WfException(e.getMessage(),e);
    }
  }
  if (performer != null)   createAssignments(performer);
  boolean limitAfterStart=valueObject.getBoolean("limitAfterStart").booleanValue();
  if (Debug.verboseOn()) {
    Debug.logVerbose("[WfActivity.init]: limitAfterStart - " + limitAfterStart,module);
  }
  if (!limitAfterStart && valueObject.get("limitService") != null && !valueObject.getString("limitService").equals("")) {
    Debug.logVerbose("[WfActivity.init]: limit service is not after start, setting up now.",module);
    setLimitService();
  }
}
