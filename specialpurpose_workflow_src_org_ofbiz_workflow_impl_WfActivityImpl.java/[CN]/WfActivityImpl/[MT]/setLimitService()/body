{
  LocalDispatcher dispatcher=getDispatcher();
  DispatchContext dctx=dispatcher.getDispatchContext();
  String limitService=getDefinitionObject().getString("limitService");
  ModelService service=null;
  try {
    service=dctx.getModelService(limitService);
    Debug.logVerbose("[WfActivity.setLimitService] : Found service model.",module);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"[WfActivity.setLimitService] : Cannot get service model.",module);
  }
  if (service == null) {
    Debug.logWarning("[WfActivity.setLimitService] : Cannot determine limit service, ignoring.",module);
    return;
  }
  List inList=new ArrayList(service.getInParamNames());
  String inParams=StringUtil.join(inList,",");
  Map serviceContext=actualContext(inParams,null,null,true);
  Debug.logVerbose("Setting limit service with context: " + serviceContext,module);
  Double timeLimit=null;
  if (getDefinitionObject().get("timeLimit") != null)   timeLimit=getDefinitionObject().getDouble("timeLimit");
  if (timeLimit == null)   return;
  String durationUOM=null;
  if (container().getDefinitionObject().getString("durationUomId") != null)   durationUOM=container().getDefinitionObject().getString("durationUomId");
  if (durationUOM == null)   return;
  char durChar=durationUOM.charAt(0);
  Calendar cal=Calendar.getInstance();
  cal.setTime(new Date());
switch (durChar) {
case 'Y':
    cal.add(Calendar.YEAR,timeLimit.intValue());
  break;
case 'M':
cal.add(Calendar.MONTH,timeLimit.intValue());
break;
case 'D':
cal.add(Calendar.DATE,timeLimit.intValue());
break;
case 'h':
cal.add(Calendar.HOUR,timeLimit.intValue());
break;
case 'm':
cal.add(Calendar.MINUTE,timeLimit.intValue());
break;
case 's':
cal.add(Calendar.SECOND,timeLimit.intValue());
break;
default :
throw new WfException("Invalid duration unit");
}
long startTime=cal.getTime().getTime();
Map context=new HashMap();
context.put("serviceName",limitService);
context.put("serviceContext",serviceContext);
context.put("workEffortId",runtimeKey());
try {
dispatcher.schedule("wfLimitInvoker",context,startTime);
}
 catch (GenericServiceException e) {
throw new WfException(e.getMessage(),e);
}
if (Debug.verboseOn()) {
Debug.logVerbose("[WfActivity.setLimitService]: Set limit service (" + limitService + " ) to run at "+ startTime,module);
}
}
