{
  Map<String,Object> result=ServiceUtil.returnSuccess();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Integer maxNodes=(Integer)context.get("maxNodes");
  Long start=0l;
  Long diff=0l;
  Session session=JCRFactoryUtil.getSession();
  VersionManager vm=session.getWorkspace().getVersionManager();
  start=new Date().getTime();
  for (int i=0; i <= maxNodes; i++) {
    try {
      Node n=session.getRootNode().addNode("__Speedtest_Node-" + i);
      n.addMixin("mix:versionable");
      n.setProperty("anyProperty","Blah");
      session.save();
      vm.checkin(n.getPath());
      vm.checkout("/__Speedtest_Node-" + i);
      session.removeItem("/__Speedtest_Node-" + i);
      session.save();
    }
 catch (    Exception e) {
      Debug.logError(e,module);
    }
  }
  session.logout();
  diff=(new Date().getTime() - start);
  result.put("repositoryDirectAccessTime",diff.toString());
  RepositoryAccessJackrabbit access=new RepositoryAccessJackrabbit(userLogin);
  start=new Date().getTime();
  for (int i=0; i <= maxNodes; i++) {
    try {
      OfbizRepositoryMappingJackrabbitNews news=new OfbizRepositoryMappingJackrabbitNews("/__Speedtest_Node-" + i,"de","",null,"");
      access.storeContentObject(news);
      access.removeContentObject("/__Speedtest_Node-" + i);
    }
 catch (    Exception e) {
      Debug.logError(e,module);
    }
  }
  access.closeAccess();
  diff=(new Date().getTime() - start);
  result.put("repositoryOcmAccessTime",diff.toString());
  return result;
}
