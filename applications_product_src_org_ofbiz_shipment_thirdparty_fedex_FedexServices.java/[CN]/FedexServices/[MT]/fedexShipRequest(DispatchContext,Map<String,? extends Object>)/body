{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);
  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");
  String resource=(String)shipmentGatewayConfig.get("configProps");
  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexGatewayNotAvailable",locale));
  }
  String templateLocation=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"templateShipment",resource,"shipment.fedex.template.ship.location");
  if (UtilValidate.isEmpty(templateLocation)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateLocationNotFound",UtilMisc.toMap("templateLocation",templateLocation),locale));
  }
  String accountNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessAccountNbr",resource,"shipment.fedex.access.accountNbr");
  if (UtilValidate.isEmpty(accountNumber)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexAccountNumberNotFound",locale));
  }
  String meterNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessMeterNumber",resource,"shipment.fedex.access.meterNumber");
  if (UtilValidate.isEmpty(meterNumber)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexMeterNumberNotFound",UtilMisc.toMap("meterNumber",meterNumber),locale));
  }
  String weightUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.uom",delegator);
  if (UtilValidate.isEmpty(weightUomId)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultWeightUomIdNotFound",locale));
  }
 else   if (!("WT_lb".equals(weightUomId) || "WT_kg".equals(weightUomId))) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultWeightUomIdNotValid",locale));
  }
  String dimensionsUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.dimension.uom",delegator);
  if (UtilValidate.isEmpty(dimensionsUomId)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultDimensionUomIdNotFound",locale));
  }
 else   if (!("LEN_in".equals(dimensionsUomId) || "LEN_cm".equals(dimensionsUomId))) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultDimensionUomIdNotValid",locale));
  }
  String labelImageType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"labelImageType",resource,"shipment.fedex.labelImageType");
  if (UtilValidate.isEmpty(labelImageType)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexLabelImageTypeNotFound",locale));
  }
 else   if (!("PDF".equals(labelImageType) || "PNG".equals(labelImageType))) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexLabelImageTypeNotValid",locale));
  }
  String dropoffType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"defaultDropoffType",resource,"shipment.fedex.default.dropoffType");
  if (UtilValidate.isEmpty(dropoffType)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexDropoffTypeNotFound",locale));
  }
  try {
    Map<String,Object> shipRequestContext=new HashMap<String,Object>();
    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();
    if (UtilValidate.isEmpty(shipment)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentNotFoundId",locale) + shipmentId);
    }
    GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId).queryOne();
    if (UtilValidate.isEmpty(shipmentRouteSegment)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentRouteSegmentNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String carrierPartyId=shipmentRouteSegment.getString("carrierPartyId");
    if (!"FEDEX".equals(carrierPartyId)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
    }
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("carrierServiceStatusId")) && !"SHRSCS_NOT_STARTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRouteSegmentStatusNotStarted",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId,"shipmentRouteSegmentStatus",shipmentRouteSegment.getString("carrierServiceStatusId")),locale));
    }
    String shipmentMethodTypeId=shipmentRouteSegment.getString("shipmentMethodTypeId");
    GenericValue carrierShipmentMethod=EntityQuery.use(delegator).from("CarrierShipmentMethod").where("shipmentMethodTypeId",shipmentMethodTypeId,"partyId","FEDEX","roleTypeId","CARRIER").queryOne();
    if (UtilValidate.isEmpty(carrierShipmentMethod)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRouteSegmentCarrierShipmentMethodNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"carrierPartyId",carrierPartyId,"shipmentMethodTypeId",shipmentMethodTypeId),locale));
    }
    if (UtilValidate.isEmpty(carrierShipmentMethod.getString("carrierServiceCode"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexNoCarrieServiceCode",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId),locale));
    }
    String service=carrierShipmentMethod.getString("carrierServiceCode");
    boolean isGroundService=service.equals("FEDEXGROUND") || service.equals("GROUNDHOMEDELIVERY");
    String carrierCode=isGroundService ? "FDXG" : "FDXE";
    String currencyCode=null;
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
      currencyCode=shipmentRouteSegment.getString("currencyUomId");
    }
 else     if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
      currencyCode=shipment.getString("currencyUomId");
    }
 else {
      currencyCode=EntityUtilProperties.getPropertyValue("general","currency.uom.id.default","USD",delegator);
    }
    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress",false);
    if (UtilValidate.isEmpty(originPostalAddress)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
 else     if (UtilValidate.isEmpty(originPostalAddress.getString("address1")) || UtilValidate.isEmpty(originPostalAddress.getString("city")) || UtilValidate.isEmpty(originPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(originPostalAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotComplete",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo",false);
    if (UtilValidate.isEmpty(originCountryGeo)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String originAddressCountryCode=originCountryGeo.getString("geoCode");
    String originAddressStateOrProvinceCode=null;
    if (originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US")) {
      if (UtilValidate.isEmpty(originPostalAddress.getString("stateProvinceGeoId"))) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginStateProvinceGeoIdRequired",UtilMisc.toMap("contactMechId",originPostalAddress.getString("contactMechId"),"shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
      }
      GenericValue stateProvinceGeo=EntityQuery.use(delegator).from("Geo").where("geoId",originPostalAddress.getString("stateProvinceGeoId")).cache().queryOne();
      originAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");
    }
    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber",false);
    if (UtilValidate.isEmpty(originTelecomNumber)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String originContactPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !(originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US"))) {
      originContactPhoneNumber=originTelecomNumber.getString("countryCode") + originContactPhoneNumber;
    }
    originContactPhoneNumber=originContactPhoneNumber.replaceAll("[^+\\d]","");
    GenericValue partyFrom=null;
    GenericValue originFacility=shipment.getRelatedOne("OriginFacility",false);
    if (UtilValidate.isEmpty(originFacility)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexOriginFacilityRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
 else {
      partyFrom=originFacility.getRelatedOne("OwnerParty",false);
      if (UtilValidate.isEmpty(partyFrom)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexOwnerPartyRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"facilityId",originFacility.getString("facilityId")),locale));
      }
    }
    String originContactKey="PERSON".equals(partyFrom.getString("partyTypeId")) ? "OriginContactPersonName" : "OriginContactCompanyName";
    String originContactName=PartyHelper.getPartyName(partyFrom,false);
    if (UtilValidate.isEmpty(originContactName)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyFromHasNoName",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destinationPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress",false);
    if (UtilValidate.isEmpty(destinationPostalAddress)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
 else     if (UtilValidate.isEmpty(destinationPostalAddress.getString("address1")) || UtilValidate.isEmpty(destinationPostalAddress.getString("city")) || UtilValidate.isEmpty(destinationPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(destinationPostalAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressIncomplete",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destinationCountryGeo=destinationPostalAddress.getRelatedOne("CountryGeo",false);
    if (UtilValidate.isEmpty(destinationCountryGeo)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String destinationAddressCountryCode=destinationCountryGeo.getString("geoCode");
    String destinationAddressStateOrProvinceCode=null;
    if (destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US")) {
      if (UtilValidate.isEmpty(destinationPostalAddress.getString("stateProvinceGeoId"))) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestStateProvinceGeoIdNotFound",UtilMisc.toMap("contactMechId",destinationPostalAddress.getString("contactMechId"),"shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
      }
      GenericValue stateProvinceGeo=EntityQuery.use(delegator).from("Geo").where("geoId",destinationPostalAddress.getString("stateProvinceGeoId")).cache().queryOne();
      destinationAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");
    }
    GenericValue destinationTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber",false);
    if (UtilValidate.isEmpty(destinationTelecomNumber)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String destinationContactPhoneNumber=destinationTelecomNumber.getString("areaCode") + destinationTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(destinationTelecomNumber.getString("countryCode")) && !(destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US"))) {
      destinationContactPhoneNumber=destinationTelecomNumber.getString("countryCode") + destinationContactPhoneNumber;
    }
    destinationContactPhoneNumber=destinationContactPhoneNumber.replaceAll("[^+\\d]","");
    String destinationPartyId=shipment.getString("partyIdTo");
    if (UtilValidate.isEmpty(destinationPartyId)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyToRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue partyTo=EntityQuery.use(delegator).from("Party").where("partyId",destinationPartyId).queryOne();
    String destinationContactKey="PERSON".equals(partyTo.getString("partyTypeId")) ? "DestinationContactPersonName" : "DestinationContactCompanyName";
    String destinationContactName=PartyHelper.getPartyName(partyTo,false);
    if (UtilValidate.isEmpty(destinationContactName)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyToHasNoName",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String homeDeliveryType=null;
    Timestamp homeDeliveryDate=null;
    if ("GROUNDHOMEDELIVERY".equals(service)) {
      homeDeliveryType=shipmentRouteSegment.getString("homeDeliveryType");
      if (UtilValidate.isNotEmpty(homeDeliveryType)) {
        if (!(homeDeliveryType.equals("DATECERTAIN") || homeDeliveryType.equals("EVENING") || homeDeliveryType.equals("APPOINTMENT"))) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryTypeInvalid",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
        }
      }
      homeDeliveryDate=shipmentRouteSegment.getTimestamp("homeDeliveryDate");
      if (UtilValidate.isEmpty(homeDeliveryDate)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryDateRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
      }
 else       if (homeDeliveryDate.before(UtilDateTime.nowTimestamp())) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryDateBeforeCurrentDate",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
      }
    }
    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"),false);
    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (shipmentPackageRouteSegs.size() != 1) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexMultiplePackagesNotSupported",locale));
    }
    shipRequestContext.put("AccountNumber",accountNumber);
    shipRequestContext.put("MeterNumber",meterNumber);
    shipRequestContext.put("CarrierCode",carrierCode);
    shipRequestContext.put("ShipDate",UtilDateTime.nowTimestamp());
    shipRequestContext.put("ShipTime",UtilDateTime.nowTimestamp());
    shipRequestContext.put("DropoffType",dropoffType);
    shipRequestContext.put("Service",service);
    shipRequestContext.put("WeightUnits",weightUomId.equals("WT_kg") ? "KGS" : "LBS");
    shipRequestContext.put("CurrencyCode",currencyCode);
    shipRequestContext.put("PayorType","SENDER");
    shipRequestContext.put(originContactKey,originContactName);
    shipRequestContext.put("OriginContactPhoneNumber",originContactPhoneNumber);
    shipRequestContext.put("OriginAddressLine1",originPostalAddress.getString("address1"));
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      shipRequestContext.put("OriginAddressLine2",originPostalAddress.getString("address2"));
    }
    shipRequestContext.put("OriginAddressCity",originPostalAddress.getString("city"));
    if (UtilValidate.isNotEmpty(originAddressStateOrProvinceCode)) {
      shipRequestContext.put("OriginAddressStateOrProvinceCode",originAddressStateOrProvinceCode);
    }
    shipRequestContext.put("OriginAddressPostalCode",originPostalAddress.getString("postalCode"));
    shipRequestContext.put("OriginAddressCountryCode",originAddressCountryCode);
    shipRequestContext.put(destinationContactKey,destinationContactName);
    shipRequestContext.put("DestinationContactPhoneNumber",destinationContactPhoneNumber);
    shipRequestContext.put("DestinationAddressLine1",destinationPostalAddress.getString("address1"));
    if (UtilValidate.isNotEmpty(destinationPostalAddress.getString("address2"))) {
      shipRequestContext.put("DestinationAddressLine2",destinationPostalAddress.getString("address2"));
    }
    shipRequestContext.put("DestinationAddressCity",destinationPostalAddress.getString("city"));
    if (UtilValidate.isNotEmpty(destinationAddressStateOrProvinceCode)) {
      shipRequestContext.put("DestinationAddressStateOrProvinceCode",destinationAddressStateOrProvinceCode);
    }
    shipRequestContext.put("DestinationAddressPostalCode",destinationPostalAddress.getString("postalCode"));
    shipRequestContext.put("DestinationAddressCountryCode",destinationAddressCountryCode);
    shipRequestContext.put("LabelType","2DCOMMON");
    shipRequestContext.put("LabelImageType",labelImageType);
    if (UtilValidate.isNotEmpty(homeDeliveryType)) {
      shipRequestContext.put("HomeDeliveryType",homeDeliveryType);
    }
    if (homeDeliveryDate != null) {
      shipRequestContext.put("HomeDeliveryDate",homeDeliveryDate);
    }
    boolean hasBillingWeight=false;
    BigDecimal billingWeight=shipmentRouteSegment.getBigDecimal("billingWeight");
    String billingWeightUomId=shipmentRouteSegment.getString("billingWeightUomId");
    if ((billingWeight != null) && (billingWeight.compareTo(BigDecimal.ZERO) > 0)) {
      hasBillingWeight=true;
      if (billingWeightUomId == null) {
        Debug.logWarning("Shipment Route Segment missing billingWeightUomId in shipmentId " + shipmentId + ", assuming default shipment.fedex.weightUomId of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);
        billingWeightUomId=weightUomId;
      }
      if (!billingWeightUomId.equals(weightUomId)) {
        Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",billingWeightUomId,"uomIdTo",weightUomId,"originalValue",billingWeight));
        if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
          Debug.logWarning("Unable to convert billing weights for shipmentId " + shipmentId,module);
          hasBillingWeight=false;
        }
 else {
          billingWeight=(BigDecimal)results.get("convertedValue");
        }
      }
    }
    for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage",false);
      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType",false);
      String packaging=null;
      if (UtilValidate.isEmpty(shipmentBoxType)) {
        packaging=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"defaultPackagingType",resource,"shipment.fedex.default.packagingType");
        if (UtilValidate.isEmpty(packaging)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeNotConfigured",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));
        }
        Debug.logWarning("Package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipment "+ shipmentId+ " has no packaging type set - defaulting to "+ packaging,module);
      }
 else {
        packaging=shipmentBoxType.getString("shipmentBoxTypeId");
      }
      GenericValue carrierShipmentBoxType=EntityQuery.use(delegator).from("CarrierShipmentBoxType").where("partyId","FEDEX","shipmentBoxTypeId",packaging).queryOne();
      if (UtilValidate.isEmpty(carrierShipmentBoxType)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeInvalid",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));
      }
 else       if (UtilValidate.isEmpty(carrierShipmentBoxType.getString("packagingTypeCode"))) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeMissing",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));
      }
      packaging=carrierShipmentBoxType.getString("packagingTypeCode");
      BigDecimal dimensionsLength=null;
      BigDecimal dimensionsWidth=null;
      BigDecimal dimensionsHeight=null;
      if (shipmentBoxType != null) {
        dimensionsLength=shipmentBoxType.getBigDecimal("boxLength");
        dimensionsWidth=shipmentBoxType.getBigDecimal("boxWidth");
        dimensionsHeight=shipmentBoxType.getBigDecimal("boxHeight");
        String boxDimensionsUomId=null;
        GenericValue boxDimensionsUom=shipmentBoxType.getRelatedOne("DimensionUom",false);
        if (!UtilValidate.isEmpty(boxDimensionsUom)) {
          boxDimensionsUomId=boxDimensionsUom.getString("uomId");
        }
 else {
          Debug.logWarning("Packaging type for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId+ " is missing dimensionUomId, assuming default shipment.default.dimension.uom of "+ dimensionsUomId+ " from "+ shipmentPropertiesFile,module);
          boxDimensionsUomId=dimensionsUomId;
        }
        if (dimensionsLength != null && dimensionsLength.compareTo(BigDecimal.ZERO) > 0) {
          if (!boxDimensionsUomId.equals(dimensionsUomId)) {
            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsLength));
            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
              Debug.logWarning("Unable to convert length for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);
              dimensionsLength=null;
            }
 else {
              dimensionsLength=(BigDecimal)results.get("convertedValue");
            }
          }
        }
        if (dimensionsWidth != null && dimensionsWidth.compareTo(BigDecimal.ZERO) > 0) {
          if (!boxDimensionsUomId.equals(dimensionsUomId)) {
            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsWidth));
            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
              Debug.logWarning("Unable to convert width for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);
              dimensionsWidth=null;
            }
 else {
              dimensionsWidth=(BigDecimal)results.get("convertedValue");
            }
          }
        }
        if (dimensionsHeight != null && dimensionsHeight.compareTo(BigDecimal.ZERO) > 0) {
          if (!boxDimensionsUomId.equals(dimensionsUomId)) {
            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsHeight));
            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
              Debug.logWarning("Unable to convert height for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);
              dimensionsHeight=null;
            }
 else {
              dimensionsHeight=(BigDecimal)results.get("convertedValue");
            }
          }
        }
      }
      BigDecimal packageWeight=null;
      if (!hasBillingWeight) {
        if (UtilValidate.isNotEmpty(shipmentPackage.getString("weight"))) {
          packageWeight=shipmentPackage.getBigDecimal("weight");
        }
 else {
          try {
            packageWeight=new BigDecimal(EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.value",delegator));
          }
 catch (          NumberFormatException ne) {
            Debug.logWarning("Default shippable weight not configured (shipment.default.weight.value), assuming 1.0" + weightUomId,module);
            packageWeight=BigDecimal.ONE;
          }
        }
        String packageWeightUomId=shipmentPackage.getString("weightUomId");
        if (UtilValidate.isEmpty(packageWeightUomId)) {
          Debug.logWarning("Shipment Route Segment missing weightUomId in shipmentId " + shipmentId + ", assuming shipment.default.weight.uom of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);
          packageWeightUomId=weightUomId;
        }
        if (!packageWeightUomId.equals(weightUomId)) {
          Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",packageWeightUomId,"uomIdTo",weightUomId,"originalValue",packageWeight));
          if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexWeightOfPackageCannotBeConverted",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
          }
 else {
            packageWeight=(BigDecimal)results.get("convertedValue");
          }
        }
      }
      BigDecimal weight=hasBillingWeight ? billingWeight : packageWeight;
      if (weight == null || weight.compareTo(BigDecimal.ZERO) < 0) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexWeightOfPackageNotAvailable",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
      }
      shipRequestContext.put("CustomerReference",shipmentId + ":" + shipmentRouteSegmentId+ ":"+ shipmentPackage.getString("shipmentPackageSeqId"));
      shipRequestContext.put("DropoffType",dropoffType);
      shipRequestContext.put("Packaging",packaging);
      if (UtilValidate.isNotEmpty(dimensionsUomId) && dimensionsLength != null && dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsWidth != null && dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsHeight != null && dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0) {
        shipRequestContext.put("DimensionsUnits",dimensionsUomId.equals("LEN_in") ? "IN" : "CM");
        shipRequestContext.put("DimensionsLength",dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).toString());
        shipRequestContext.put("DimensionsWidth",dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).toString());
        shipRequestContext.put("DimensionsHeight",dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).toString());
      }
      shipRequestContext.put("Weight",weight.setScale(1,BigDecimal.ROUND_UP).toString());
    }
    StringWriter outWriter=new StringWriter();
    try {
      FreeMarkerWorker.renderTemplateAtLocation(templateLocation,shipRequestContext,outWriter);
    }
 catch (    Exception e) {
      String errorMessage="Cannot confirm Fedex shipment: Failed to render Fedex XML Ship Request Template [" + templateLocation + "].";
      Debug.logError(e,errorMessage,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateError",UtilMisc.toMap("templateLocation",templateLocation,"errorString",e.getMessage()),locale));
    }
    String fDXShipRequestString=outWriter.toString();
    String fDXShipReplyString=null;
    try {
      fDXShipReplyString=sendFedexRequest(fDXShipRequestString,delegator,shipmentGatewayConfigId,resource,locale);
      if (Debug.verboseOn()) {
        Debug.logVerbose(fDXShipReplyString,module);
      }
    }
 catch (    FedexConnectException e) {
      String errorMessage="Error sending Fedex request for FDXShipRequest: ";
      Debug.logError(e,errorMessage,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateSendingError",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    return handleFedexShipReply(fDXShipReplyString,shipmentRouteSegment,shipmentPackageRouteSegs,locale);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateServiceError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
catch (  GenericServiceException se) {
    Debug.logError(se,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateServiceError",UtilMisc.toMap("errorString",se.toString()),locale));
  }
}
