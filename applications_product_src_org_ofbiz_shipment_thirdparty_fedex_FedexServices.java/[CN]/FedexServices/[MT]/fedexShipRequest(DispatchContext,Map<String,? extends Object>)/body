{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  String templateLocation=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.template.fedex.ship.location");
  if (UtilValidate.isEmpty(templateLocation)) {
    return ServiceUtil.returnError("Can't find location for FDXShipRequest template - should be in " + shipmentPropertiesFile + ":shipment.template.fedex.ship.location");
  }
  String accountNumber=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.fedex.access.accountNbr");
  if (UtilValidate.isEmpty(accountNumber)) {
    return ServiceUtil.returnError("accountNbr not found for Fedex ship request.");
  }
  String meterNumber=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.fedex.access.meterNumber");
  if (UtilValidate.isEmpty(meterNumber)) {
    return ServiceUtil.returnError("Meter number not found for Fedex ship request - should be in " + shipmentPropertiesFile + ":shipment.fedex.access.meterNumber (run the fedexSubscriptionRequest service).");
  }
  String weightUomId=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.uom");
  if (UtilValidate.isEmpty(weightUomId)) {
    return ServiceUtil.returnError("Default weightUomId not found for Fedex ship request - should be in " + shipmentPropertiesFile + ":shipment.default.weight.uom.");
  }
 else   if (!("WT_lb".equals(weightUomId) || "WT_kg".equals(weightUomId))) {
    return ServiceUtil.returnError("WeightUomId in " + shipmentPropertiesFile + ":shipment.default.weight.uom must be either WT_lb or WT_kg.");
  }
  String dimensionsUomId=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.dimension.uom");
  if (UtilValidate.isEmpty(dimensionsUomId)) {
    return ServiceUtil.returnError("Default dimensionUomId not found for Fedex ship request - should be in " + shipmentPropertiesFile + ":shipment.default.dimension.uom.");
  }
 else   if (!("LEN_in".equals(dimensionsUomId) || "LEN_cm".equals(dimensionsUomId))) {
    return ServiceUtil.returnError("WeightUomId in " + shipmentPropertiesFile + ":shipment.default.dimension.uom must be either LEN_in or LEN_cm.");
  }
  String labelImageType=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.fedex.labelImageType");
  if (UtilValidate.isEmpty(labelImageType)) {
    return ServiceUtil.returnError("LabelImageType not found for Fedex ship request - should be in " + shipmentPropertiesFile + ":shipment.fedex.labelImageType.");
  }
 else   if (!("PDF".equals(labelImageType) || "PNG".equals(labelImageType))) {
    return ServiceUtil.returnError("LabelImageType in " + shipmentPropertiesFile + ":shipment.fedex.labelImageType must be either PDF or PNG.");
  }
  String dropoffType=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.fedex.default.dropoffType");
  if (UtilValidate.isEmpty(dropoffType)) {
    return ServiceUtil.returnError("Default dropoff type not found for Fedex ship request - should be in " + shipmentPropertiesFile + ":shipment.fedex.default.dropoffType.");
  }
  try {
    Map<String,Object> shipRequestContext=FastMap.newInstance();
    GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
    if (UtilValidate.isEmpty(shipment)) {
      return ServiceUtil.returnError("Shipment not found with ID " + shipmentId);
    }
    GenericValue shipmentRouteSegment=delegator.findByPrimaryKey("ShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId));
    if (UtilValidate.isEmpty(shipmentRouteSegment)) {
      return ServiceUtil.returnError("ShipmentRouteSegment not found with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    String carrierPartyId=shipmentRouteSegment.getString("carrierPartyId");
    if (!"FEDEX".equals(carrierPartyId)) {
      return ServiceUtil.returnError("ERROR: The Carrier for ShipmentRouteSegment " + shipmentRouteSegmentId + " of Shipment "+ shipmentId+ ", is not Fedex.");
    }
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("carrierServiceStatusId")) && !"SHRSCS_NOT_STARTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {
      return ServiceUtil.returnError("ERROR: The Carrier Service Status for ShipmentRouteSegment " + shipmentRouteSegmentId + " of Shipment "+ shipmentId+ ", is ["+ shipmentRouteSegment.getString("carrierServiceStatusId")+ "], but must be not-set or [SHRSCS_NOT_STARTED] to perform the Fedex Shipment Confirm operation.");
    }
    String shipmentMethodTypeId=shipmentRouteSegment.getString("shipmentMethodTypeId");
    GenericValue carrierShipmentMethod=delegator.findByPrimaryKey("CarrierShipmentMethod",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId,"partyId","FEDEX","roleTypeId","CARRIER"));
    if (UtilValidate.isEmpty(carrierShipmentMethod)) {
      return ServiceUtil.returnError("No CarrierShipmentMethod entry for carrier Fedex shipmentMethodTypeId " + shipmentMethodTypeId);
    }
    if (UtilValidate.isEmpty(carrierShipmentMethod.getString("carrierServiceCode"))) {
      return ServiceUtil.returnError("No Carrier service code for carrier Fedex shipmentMethodTypeId " + shipmentMethodTypeId);
    }
    String service=carrierShipmentMethod.getString("carrierServiceCode");
    boolean isGroundService=service.equals("FEDEXGROUND") || service.equals("GROUNDHOMEDELIVERY");
    String carrierCode=isGroundService ? "FDXG" : "FDXE";
    String currencyCode=null;
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
      currencyCode=shipmentRouteSegment.getString("currencyUomId");
    }
 else     if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
      currencyCode=shipment.getString("currencyUomId");
    }
 else {
      currencyCode=UtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD");
    }
    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress");
    if (UtilValidate.isEmpty(originPostalAddress)) {
      return ServiceUtil.returnError("OriginPostalAddress not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
 else     if (UtilValidate.isEmpty(originPostalAddress.getString("address1")) || UtilValidate.isEmpty(originPostalAddress.getString("city")) || UtilValidate.isEmpty(originPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(originPostalAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError("OriginPostalAddress not complete for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId+ " (missing address1, city, postalCode and/or countryGeoId).");
    }
    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo");
    if (UtilValidate.isEmpty(originCountryGeo)) {
      return ServiceUtil.returnError("OriginCountryGeo not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    String originAddressCountryCode=originCountryGeo.getString("geoCode");
    String originAddressStateOrProvinceCode=null;
    if (originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US")) {
      if (UtilValidate.isEmpty(originPostalAddress.getString("stateProvinceGeoId"))) {
        return ServiceUtil.returnError("OriginStateProvinceGeoId required in contactMechId " + originPostalAddress.getString("contactMechId") + " for ShipmentRouteSegment with shipmentId "+ shipmentId+ " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
      }
      GenericValue stateProvinceGeo=delegator.findByPrimaryKeyCache("Geo",UtilMisc.toMap("geoId",originPostalAddress.getString("stateProvinceGeoId")));
      originAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");
    }
    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber");
    if (UtilValidate.isEmpty(originTelecomNumber)) {
      return ServiceUtil.returnError("OriginTelecomNumber not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    String originContactPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !(originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US"))) {
      originContactPhoneNumber=originTelecomNumber.getString("countryCode") + originContactPhoneNumber;
    }
    originContactPhoneNumber=originContactPhoneNumber.replaceAll("[^+\\d]","");
    GenericValue partyFrom=null;
    GenericValue originFacility=shipment.getRelatedOne("OriginFacility");
    if (UtilValidate.isEmpty(originFacility)) {
      return ServiceUtil.returnError("Shipment.originFacilityId is required for Fedex shipments: shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
 else {
      partyFrom=originFacility.getRelatedOne("OwnerParty");
      if (UtilValidate.isEmpty(partyFrom)) {
        return ServiceUtil.returnError("Facility.ownerPartyId is required for Fedex shipments: shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId+ ", facilityId "+ originFacility.getString("facilityId"));
      }
    }
    String originContactKey="PERSON".equals(partyFrom.getString("partyTypeId")) ? "OriginContactPersonName" : "OriginContactCompanyName";
    String originContactName=PartyHelper.getPartyName(partyFrom,false);
    if (UtilValidate.isEmpty(originContactName)) {
      return ServiceUtil.returnError("partyIdFrom for shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId+ " has no name (required for Fedex shipments)");
    }
    GenericValue destinationPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress");
    if (UtilValidate.isEmpty(destinationPostalAddress)) {
      return ServiceUtil.returnError("destinationPostalAddress not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
 else     if (UtilValidate.isEmpty(destinationPostalAddress.getString("address1")) || UtilValidate.isEmpty(destinationPostalAddress.getString("city")) || UtilValidate.isEmpty(destinationPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(destinationPostalAddress.getString("countryGeoId"))) {
      return ServiceUtil.returnError("destinationPostalAddress not complete for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId+ " (missing address1, city, postalCode and/or countryGeoId).");
    }
    GenericValue destinationCountryGeo=destinationPostalAddress.getRelatedOne("CountryGeo");
    if (UtilValidate.isEmpty(destinationCountryGeo)) {
      return ServiceUtil.returnError("destinationCountryGeo not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    String destinationAddressCountryCode=destinationCountryGeo.getString("geoCode");
    String destinationAddressStateOrProvinceCode=null;
    if (destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US")) {
      if (UtilValidate.isEmpty(destinationPostalAddress.getString("stateProvinceGeoId"))) {
        return ServiceUtil.returnError("destinationStateProvinceGeoId required in contactMechId " + destinationPostalAddress.getString("contactMechId") + " for ShipmentRouteSegment with shipmentId "+ shipmentId+ " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
      }
      GenericValue stateProvinceGeo=delegator.findByPrimaryKeyCache("Geo",UtilMisc.toMap("geoId",destinationPostalAddress.getString("stateProvinceGeoId")));
      destinationAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");
    }
    GenericValue destinationTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber");
    if (UtilValidate.isEmpty(destinationTelecomNumber)) {
      return ServiceUtil.returnError("destinationTelecomNumber not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    String destinationContactPhoneNumber=destinationTelecomNumber.getString("areaCode") + destinationTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(destinationTelecomNumber.getString("countryCode")) && !(destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US"))) {
      destinationContactPhoneNumber=destinationTelecomNumber.getString("countryCode") + destinationContactPhoneNumber;
    }
    destinationContactPhoneNumber=destinationContactPhoneNumber.replaceAll("[^+\\d]","");
    String destinationPartyId=shipment.getString("partyIdTo");
    if (UtilValidate.isEmpty(destinationPartyId)) {
      return ServiceUtil.returnError("Shipment.partyIdTo is required for Fedex shipments: shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    GenericValue partyTo=delegator.findByPrimaryKey("Party",UtilMisc.toMap("partyId",destinationPartyId));
    String destinationContactKey="PERSON".equals(partyTo.getString("partyTypeId")) ? "DestinationContactPersonName" : "DestinationContactCompanyName";
    String destinationContactName=PartyHelper.getPartyName(partyTo,false);
    if (UtilValidate.isEmpty(destinationContactName)) {
      return ServiceUtil.returnError("partyTo for shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId+ " has no name (required for Fedex shipments)");
    }
    String homeDeliveryType=null;
    Timestamp homeDeliveryDate=null;
    if ("GROUNDHOMEDELIVERY".equals(service)) {
      homeDeliveryType=shipmentRouteSegment.getString("homeDeliveryType");
      if (UtilValidate.isNotEmpty(homeDeliveryType)) {
        if (!(homeDeliveryType.equals("DATECERTAIN") || homeDeliveryType.equals("EVENING") || homeDeliveryType.equals("APPOINTMENT"))) {
          return ServiceUtil.returnError("Invalid homeDeliveryType for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
        }
      }
      homeDeliveryDate=shipmentRouteSegment.getTimestamp("homeDeliveryDate");
      if (UtilValidate.isEmpty(homeDeliveryDate)) {
        return ServiceUtil.returnError("homeDeliveryDate required for home deliveryType shipments - ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
      }
 else       if (homeDeliveryDate.before(UtilDateTime.nowTimestamp())) {
        return ServiceUtil.returnError("homeDeliveryDate is before the current time for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
      }
    }
    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",UtilMisc.toList("+shipmentPackageSeqId"));
    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {
      return ServiceUtil.returnError("No ShipmentPackageRouteSegs (ie No Packages) found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    if (shipmentPackageRouteSegs.size() != 1) {
      return ServiceUtil.returnError("Cannot confirm shipment: fedexShipRequest service does not currently support more than one package per shipment.");
    }
    shipRequestContext.put("AccountNumber",accountNumber);
    shipRequestContext.put("MeterNumber",meterNumber);
    shipRequestContext.put("CarrierCode",carrierCode);
    shipRequestContext.put("ShipDate",UtilDateTime.nowTimestamp());
    shipRequestContext.put("ShipTime",UtilDateTime.nowTimestamp());
    shipRequestContext.put("DropoffType",dropoffType);
    shipRequestContext.put("Service",service);
    shipRequestContext.put("WeightUnits",weightUomId.equals("WT_kg") ? "KGS" : "LBS");
    shipRequestContext.put("CurrencyCode",currencyCode);
    shipRequestContext.put("PayorType","SENDER");
    shipRequestContext.put(originContactKey,originContactName);
    shipRequestContext.put("OriginContactPhoneNumber",originContactPhoneNumber);
    shipRequestContext.put("OriginAddressLine1",originPostalAddress.getString("address1"));
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      shipRequestContext.put("OriginAddressLine2",originPostalAddress.getString("address2"));
    }
    shipRequestContext.put("OriginAddressCity",originPostalAddress.getString("city"));
    if (UtilValidate.isNotEmpty(originAddressStateOrProvinceCode)) {
      shipRequestContext.put("OriginAddressStateOrProvinceCode",originAddressStateOrProvinceCode);
    }
    shipRequestContext.put("OriginAddressPostalCode",originPostalAddress.getString("postalCode"));
    shipRequestContext.put("OriginAddressCountryCode",originAddressCountryCode);
    shipRequestContext.put(destinationContactKey,destinationContactName);
    shipRequestContext.put("DestinationContactPhoneNumber",destinationContactPhoneNumber);
    shipRequestContext.put("DestinationAddressLine1",destinationPostalAddress.getString("address1"));
    if (UtilValidate.isNotEmpty(destinationPostalAddress.getString("address2"))) {
      shipRequestContext.put("DestinationAddressLine2",destinationPostalAddress.getString("address2"));
    }
    shipRequestContext.put("DestinationAddressCity",destinationPostalAddress.getString("city"));
    if (UtilValidate.isNotEmpty(destinationAddressStateOrProvinceCode)) {
      shipRequestContext.put("DestinationAddressStateOrProvinceCode",destinationAddressStateOrProvinceCode);
    }
    shipRequestContext.put("DestinationAddressPostalCode",destinationPostalAddress.getString("postalCode"));
    shipRequestContext.put("DestinationAddressCountryCode",destinationAddressCountryCode);
    shipRequestContext.put("LabelType","2DCOMMON");
    shipRequestContext.put("LabelImageType",labelImageType);
    if (UtilValidate.isNotEmpty(homeDeliveryType)) {
      shipRequestContext.put("HomeDeliveryType",homeDeliveryType);
    }
    if (homeDeliveryDate != null) {
      shipRequestContext.put("HomeDeliveryDate",homeDeliveryDate);
    }
    boolean hasBillingWeight=false;
    BigDecimal billingWeight=shipmentRouteSegment.getBigDecimal("billingWeight");
    String billingWeightUomId=shipmentRouteSegment.getString("billingWeightUomId");
    if ((billingWeight != null) && (billingWeight.compareTo(BigDecimal.ZERO) > 0)) {
      hasBillingWeight=true;
      if (billingWeightUomId == null) {
        Debug.logWarning("Shipment Route Segment missing billingWeightUomId in shipmentId " + shipmentId + ", assuming default shipment.fedex.weightUomId of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);
        billingWeightUomId=weightUomId;
      }
      if (!billingWeightUomId.equals(weightUomId)) {
        Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",billingWeightUomId,"uomIdTo",weightUomId,"originalValue",billingWeight));
        if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
          Debug.logWarning("Unable to convert billing weights for shipmentId " + shipmentId,module);
          hasBillingWeight=false;
        }
 else {
          billingWeight=(BigDecimal)results.get("convertedValue");
        }
      }
    }
    for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage");
      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType");
      String packaging=null;
      if (UtilValidate.isEmpty(shipmentBoxType)) {
        Debug.logWarning("Package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipment "+ shipmentId+ " has no packaging type set - defaulting to "+ shipmentPropertiesFile+ ":shipment.fedex.default.packagingType",module);
        packaging=UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.fedex.default.packagingType");
        if (UtilValidate.isEmpty(packaging)) {
          return ServiceUtil.returnError("Cannot confirm shipment: Package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipment "+ shipmentId+ " has no packaging type set, and "+ shipmentPropertiesFile+ ":shipment.fedex.default.packagingType is not configured");
        }
      }
 else {
        packaging=shipmentBoxType.getString("shipmentBoxTypeId");
      }
      GenericValue carrierShipmentBoxType=delegator.findByPrimaryKey("CarrierShipmentBoxType",UtilMisc.toMap("partyId","FEDEX","shipmentBoxTypeId",packaging));
      if (UtilValidate.isEmpty(carrierShipmentBoxType)) {
        return ServiceUtil.returnError("Cannot confirm shipment: Package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipment "+ shipmentId+ " has an invalid packaging type for FedEx.");
      }
 else       if (UtilValidate.isEmpty(carrierShipmentBoxType.getString("packagingTypeCode"))) {
        return ServiceUtil.returnError("Cannot confirm shipment: Package type for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipment "+ shipmentId+ " is missing packagingTypeCode.");
      }
      packaging=carrierShipmentBoxType.getString("packagingTypeCode");
      BigDecimal dimensionsLength=null;
      BigDecimal dimensionsWidth=null;
      BigDecimal dimensionsHeight=null;
      if (shipmentBoxType != null) {
        dimensionsLength=shipmentBoxType.getBigDecimal("boxLength");
        dimensionsWidth=shipmentBoxType.getBigDecimal("boxWidth");
        dimensionsHeight=shipmentBoxType.getBigDecimal("boxHeight");
        String boxDimensionsUomId=null;
        GenericValue boxDimensionsUom=shipmentBoxType.getRelatedOne("DimensionUom");
        if (!UtilValidate.isEmpty(boxDimensionsUom)) {
          boxDimensionsUomId=boxDimensionsUom.getString("uomId");
        }
 else {
          Debug.logWarning("Packaging type for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId+ " is missing dimensionUomId, assuming default shipment.default.dimension.uom of "+ dimensionsUomId+ " from "+ shipmentPropertiesFile,module);
          boxDimensionsUomId=dimensionsUomId;
        }
        if (dimensionsLength != null && dimensionsLength.compareTo(BigDecimal.ZERO) > 0) {
          if (!boxDimensionsUomId.equals(dimensionsUomId)) {
            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsLength));
            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
              Debug.logWarning("Unable to convert length for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);
              dimensionsLength=null;
            }
 else {
              dimensionsLength=(BigDecimal)results.get("convertedValue");
            }
          }
        }
        if (dimensionsWidth != null && dimensionsWidth.compareTo(BigDecimal.ZERO) > 0) {
          if (!boxDimensionsUomId.equals(dimensionsUomId)) {
            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsWidth));
            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
              Debug.logWarning("Unable to convert width for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);
              dimensionsWidth=null;
            }
 else {
              dimensionsWidth=(BigDecimal)results.get("convertedValue");
            }
          }
        }
        if (dimensionsHeight != null && dimensionsHeight.compareTo(BigDecimal.ZERO) > 0) {
          if (!boxDimensionsUomId.equals(dimensionsUomId)) {
            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsHeight));
            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
              Debug.logWarning("Unable to convert height for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);
              dimensionsHeight=null;
            }
 else {
              dimensionsHeight=(BigDecimal)results.get("convertedValue");
            }
          }
        }
      }
      BigDecimal packageWeight=null;
      if (!hasBillingWeight) {
        if (UtilValidate.isNotEmpty(shipmentPackage.getString("weight"))) {
          packageWeight=shipmentPackage.getBigDecimal("weight");
        }
 else {
          try {
            packageWeight=new BigDecimal(UtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.value"));
          }
 catch (          NumberFormatException ne) {
            Debug.logWarning("Default shippable weight not configured (shipment.default.weight.value), assuming 1.0" + weightUomId,module);
            packageWeight=BigDecimal.ONE;
          }
        }
        String packageWeightUomId=shipmentPackage.getString("weightUomId");
        if (UtilValidate.isEmpty(packageWeightUomId)) {
          Debug.logWarning("Shipment Route Segment missing weightUomId in shipmentId " + shipmentId + ", assuming shipment.default.weight.uom of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);
          packageWeightUomId=weightUomId;
        }
        if (!packageWeightUomId.equals(weightUomId)) {
          Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",packageWeightUomId,"uomIdTo",weightUomId,"originalValue",packageWeight));
          if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {
            return ServiceUtil.returnError("Unable to convert weight for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId);
          }
 else {
            packageWeight=(BigDecimal)results.get("convertedValue");
          }
        }
      }
      BigDecimal weight=hasBillingWeight ? billingWeight : packageWeight;
      if (weight == null || weight.compareTo(BigDecimal.ZERO) < 0) {
        return ServiceUtil.returnError("Unable to determine weight for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId);
      }
      shipRequestContext.put("CustomerReference",shipmentId + ":" + shipmentRouteSegmentId+ ":"+ shipmentPackage.getString("shipmentPackageSeqId"));
      shipRequestContext.put("DropoffType",dropoffType);
      shipRequestContext.put("Packaging",packaging);
      if (UtilValidate.isNotEmpty(dimensionsUomId) && dimensionsLength != null && dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsWidth != null && dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsHeight != null && dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0) {
        shipRequestContext.put("DimensionsUnits",dimensionsUomId.equals("LEN_in") ? "IN" : "CM");
        shipRequestContext.put("DimensionsLength",dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).toString());
        shipRequestContext.put("DimensionsWidth",dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).toString());
        shipRequestContext.put("DimensionsHeight",dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).toString());
      }
      shipRequestContext.put("Weight",weight.setScale(1,BigDecimal.ROUND_UP).toString());
    }
    StringWriter outWriter=new StringWriter();
    try {
      FreeMarkerWorker.renderTemplateAtLocation(templateLocation,shipRequestContext,outWriter);
    }
 catch (    Exception e) {
      String errorMessage="Cannot confirm Fedex shipment: Failed to render Fedex XML Ship Request Template [" + templateLocation + "].";
      Debug.logError(e,errorMessage,module);
      return ServiceUtil.returnError(errorMessage + ": " + e.getMessage());
    }
    String fDXShipRequestString=outWriter.toString();
    String fDXShipReplyString=null;
    try {
      fDXShipReplyString=sendFedexRequest(fDXShipRequestString);
      if (Debug.verboseOn()) {
        Debug.logVerbose(fDXShipReplyString,module);
      }
    }
 catch (    FedexConnectException e) {
      String errorMessage="Error sending Fedex request for FDXShipRequest: ";
      Debug.logError(e,errorMessage,module);
      return ServiceUtil.returnError(errorMessage + e.toString());
    }
    return handleFedexShipReply(fDXShipReplyString,shipmentRouteSegment,shipmentPackageRouteSegs);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Error in fedexShipRequest service: " + e.toString());
  }
catch (  GenericServiceException se) {
    Debug.logError(se,module);
    return ServiceUtil.returnError("Error in fedexShipRequest service: " + se.toString());
  }
}
