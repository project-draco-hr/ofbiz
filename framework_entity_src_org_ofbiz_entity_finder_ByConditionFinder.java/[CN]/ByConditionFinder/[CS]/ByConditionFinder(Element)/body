{
  this.entityNameExdr=new FlexibleStringExpander(element.getAttribute("entity-name"));
  this.useCacheStrExdr=new FlexibleStringExpander(element.getAttribute("use-cache"));
  this.filterByDateStrExdr=new FlexibleStringExpander(element.getAttribute("filter-by-date"));
  this.distinctStrExdr=new FlexibleStringExpander(element.getAttribute("distinct"));
  this.delegatorNameExdr=new FlexibleStringExpander(element.getAttribute("delegator-name"));
  this.listAcsr=new FlexibleMapAccessor(element.getAttribute("list-name"));
  this.resultSetTypeExdr=new FlexibleStringExpander(element.getAttribute("result-set-type"));
  Element conditionExprElement=UtilXml.firstChildElement(element,"condition-expr");
  Element conditionListElement=UtilXml.firstChildElement(element,"condition-list");
  Element conditionObjectElement=UtilXml.firstChildElement(element,"condition-object");
  if (conditionExprElement != null) {
    this.whereCondition=new ConditionExpr(conditionExprElement);
  }
 else   if (conditionListElement != null) {
    this.whereCondition=new ConditionList(conditionListElement);
  }
 else   if (conditionObjectElement != null) {
    this.whereCondition=new ConditionObject(conditionObjectElement);
  }
  Element havingConditionListElement=UtilXml.firstChildElement(element,"having-condition-list");
  if (havingConditionListElement != null) {
    this.havingCondition=new ConditionList(havingConditionListElement);
  }
  selectFieldExpanderList=EntityFinderUtil.makeSelectFieldExpanderList(element);
  List orderByElementList=UtilXml.childElementList(element,"order-by");
  if (orderByElementList.size() > 0) {
    orderByExpanderList=new LinkedList();
    Iterator orderByElementIter=orderByElementList.iterator();
    while (orderByElementIter.hasNext()) {
      Element orderByElement=(Element)orderByElementIter.next();
      orderByExpanderList.add(new FlexibleStringExpander(orderByElement.getAttribute("field-name")));
    }
  }
  Element limitRangeElement=UtilXml.firstChildElement(element,"limit-range");
  Element limitViewElement=UtilXml.firstChildElement(element,"limit-view");
  Element useIteratorElement=UtilXml.firstChildElement(element,"use-iterator");
  if ((limitRangeElement != null && limitViewElement != null) || (limitRangeElement != null && useIteratorElement != null) || (limitViewElement != null && useIteratorElement != null)) {
    throw new IllegalArgumentException("In entity find by condition element, cannot have more than one of the following: limit-range, limit-view, and use-iterator");
  }
  if (limitRangeElement != null) {
    outputHandler=new LimitRange(limitRangeElement);
  }
 else   if (limitViewElement != null) {
    outputHandler=new LimitView(limitViewElement);
  }
 else   if (useIteratorElement != null) {
    outputHandler=new UseIterator(useIteratorElement);
  }
 else {
    outputHandler=new GetAll();
  }
}
