{
  StringBuilder sb=new StringBuilder();
  sb.append(years != 0 ? years : "");
  sb.append(':').append(months != 0 ? months : "");
  sb.append(':').append(days != 0 ? days : "");
  sb.append(':').append(hours != 0 ? hours : "");
  sb.append(':').append(minutes != 0 ? minutes : "");
  sb.append(':').append(seconds != 0 ? seconds : "");
  sb.append(':').append(milliseconds != 0 ? milliseconds : "");
  String durationString=years + ":" + months+ ":"+ days+ ":"+ hours+ ":"+ minutes+ ":"+ seconds+ ":"+ milliseconds;
  TimeDuration stringDuration=TimeDuration.parseDuration(sb.toString());
  right.setTimeInMillis(0);
  if (years != 0) {
    right.set(Calendar.YEAR,1970 + Math.abs(years));
  }
  if (months != 0) {
    right.set(Calendar.MONTH,Math.abs(months));
  }
  right.set(Calendar.DAY_OF_MONTH,Math.abs(days) + 1);
  if (hours != 0) {
    right.set(Calendar.HOUR,Math.abs(hours));
  }
  if (minutes != 0) {
    right.set(Calendar.MINUTE,Math.abs(minutes));
  }
  if (seconds != 0) {
    right.set(Calendar.SECOND,Math.abs(seconds));
  }
  if (milliseconds != 0) {
    right.set(Calendar.MILLISECOND,Math.abs(milliseconds));
  }
  TimeDuration calDuration=isNegative ? new TimeDuration(right,zero) : new TimeDuration(zero,right);
  assertDurationFields(label + "(parseString[0])",years,months,days,hours,minutes,seconds,milliseconds,durationString,TimeDuration.parseDuration(durationString),isNegative,false);
  assertDurationFields(label + "(parseString)",years,months,days,hours,minutes,seconds,milliseconds,durationString,stringDuration,isNegative,false);
  assertDurationFields(label + "(cal)",years,months,days,hours,minutes,seconds,milliseconds,durationString,calDuration,isNegative,false);
  if (!isNegative) {
    Calendar added=calDuration.addToCalendar((Calendar)zero.clone());
    TimeDuration addDuration=new TimeDuration(zero,added);
    assertDurationFields(label + "(cal[add])",years,months,days,hours,minutes,seconds,milliseconds,durationString,addDuration,isNegative,false);
  }
  assertEquals(label + ".compareTo(string, cal)",0,doCompare(stringDuration,calDuration));
  assertEquals(label + ".compareTo(string, string)",0,doCompare(stringDuration,stringDuration));
  assertEquals(label + ".compareTo(cal, cal)",0,doCompare(calDuration,calDuration));
  assertEquals(label + ".compareTo(cal, string)",0,doCompare(calDuration,stringDuration));
  assertEquals(label + ".equals(cal, cal)",calDuration,calDuration);
  assertEquals(label + ".equals(cal, string)",calDuration,stringDuration);
  assertEquals(label + ".equals(string, cal)",stringDuration,calDuration);
  assertEquals(label + ".equals(string, string)",stringDuration,stringDuration);
  assertFalse(label + ".not-equals(string, this)",stringDuration.equals(TimeDurationTests.class));
  if (lastString != null) {
    assertFalse(label + ".not-equals(string, lastString)",stringDuration.equals(lastString));
  }
  return stringDuration;
}
