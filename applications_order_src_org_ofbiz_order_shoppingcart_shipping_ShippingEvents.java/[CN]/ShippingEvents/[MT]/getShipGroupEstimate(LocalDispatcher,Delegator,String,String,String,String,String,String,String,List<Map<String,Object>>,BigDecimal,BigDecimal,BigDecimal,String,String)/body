{
  String standardMessage="A problem occurred calculating shipping. Fees will be calculated offline.";
  List<String> errorMessageList=new LinkedList<String>();
  if ("NO_SHIPPING".equals(shipmentMethodTypeId)) {
    return ServiceUtil.returnSuccess();
  }
  if (shipmentMethodTypeId == null || carrierPartyId == null) {
    if ("SALES_ORDER".equals(orderTypeId)) {
      errorMessageList.add("Please Select Your Shipping Method.");
      return ServiceUtil.returnError(errorMessageList);
    }
 else {
      return ServiceUtil.returnSuccess();
    }
  }
  if (carrierRoleTypeId == null) {
    carrierRoleTypeId="CARRIER";
  }
  String shippingOriginContactMechId=null;
  if (supplierPartyId != null) {
    try {
      GenericValue originAddress=getShippingOriginContactMech(delegator,supplierPartyId);
      if (originAddress == null) {
        return ServiceUtil.returnError("Cannot find the origin shipping address (SHIP_ORIG_LOCATION) for the supplier with ID [" + supplierPartyId + "].  Will not be able to calculate drop shipment estimate.");
      }
      shippingOriginContactMechId=originAddress.getString("contactMechId");
    }
 catch (    GeneralException e) {
      return ServiceUtil.returnError(standardMessage);
    }
  }
  if (shippableQuantity.compareTo(BigDecimal.ZERO) == 0) {
    Map<String,Object> result=ServiceUtil.returnSuccess();
    result.put("shippingTotal",BigDecimal.ZERO);
    return result;
  }
  GenericValue storeShipMethod=ProductStoreWorker.getProductStoreShipmentMethod(delegator,productStoreId,shipmentMethodTypeId,carrierPartyId,carrierRoleTypeId);
  if (storeShipMethod == null) {
    errorMessageList.add("No applicable shipment method found.");
    return ServiceUtil.returnError(errorMessageList);
  }
  BigDecimal shippingTotal=BigDecimal.ZERO;
  Map<String,Object> serviceFields=new HashMap<String,Object>();
  serviceFields.put("initialEstimateAmt",shippingTotal);
  serviceFields.put("shippableTotal",shippableTotal);
  serviceFields.put("shippableQuantity",shippableQuantity);
  serviceFields.put("shippableWeight",shippableWeight);
  serviceFields.put("shippableItemInfo",itemInfo);
  serviceFields.put("productStoreId",productStoreId);
  serviceFields.put("carrierRoleTypeId","CARRIER");
  serviceFields.put("carrierPartyId",carrierPartyId);
  serviceFields.put("shipmentMethodTypeId",shipmentMethodTypeId);
  serviceFields.put("shippingContactMechId",shippingContactMechId);
  serviceFields.put("shippingOriginContactMechId",shippingOriginContactMechId);
  serviceFields.put("partyId",partyId);
  serviceFields.put("productStoreShipMethId",productStoreShipMethId);
  try {
    BigDecimal externalAmt=null;
    if (UtilValidate.isNotEmpty(shippingContactMechId)) {
      externalAmt=getExternalShipEstimate(dispatcher,storeShipMethod,serviceFields);
    }
    if (externalAmt != null) {
      shippingTotal=shippingTotal.add(externalAmt);
    }
  }
 catch (  GeneralException e) {
    return ServiceUtil.returnError(standardMessage);
  }
  serviceFields.put("initialEstimateAmt",shippingTotal);
  try {
    BigDecimal genericAmt=getGenericShipEstimate(dispatcher,storeShipMethod,serviceFields);
    if (genericAmt != null) {
      shippingTotal=shippingTotal.add(genericAmt);
    }
  }
 catch (  GeneralException e) {
    return ServiceUtil.returnError(standardMessage);
  }
  Map<String,Object> responseResult=ServiceUtil.returnSuccess();
  responseResult.put("shippingTotal",shippingTotal);
  return responseResult;
}
