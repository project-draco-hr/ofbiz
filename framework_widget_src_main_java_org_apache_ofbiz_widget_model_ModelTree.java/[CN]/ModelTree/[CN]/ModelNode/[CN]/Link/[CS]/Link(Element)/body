{
  this.encode="true".equals(linkElement.getAttribute("encode"));
  this.fullPath="true".equals(linkElement.getAttribute("full-path"));
  this.idExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("id"));
  Element imageElement=UtilXml.firstChildElement(linkElement,"image");
  if (imageElement != null) {
    this.image=new Image(imageElement);
  }
 else {
    this.image=null;
  }
  this.linkType=linkElement.getAttribute("link-type");
  this.nameExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("name"));
  List<? extends Element> parameterElementList=UtilXml.childElementList(linkElement,"parameter");
  if (!parameterElementList.isEmpty()) {
    List<Parameter> parameterList=new ArrayList<Parameter>(parameterElementList.size());
    for (    Element parameterElement : parameterElementList) {
      parameterList.add(new Parameter(parameterElement));
    }
    this.parameterList=Collections.unmodifiableList(parameterList);
  }
 else {
    this.parameterList=Collections.emptyList();
  }
  this.prefixExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("prefix"));
  this.secure="true".equals(linkElement.getAttribute("secure"));
  this.styleExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("style"));
  this.targetExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("target"));
  this.targetWindowExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("target-window"));
  this.textExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("text"));
  this.titleExdr=FlexibleStringExpander.getInstance(linkElement.getAttribute("title"));
  this.urlMode=UtilXml.checkEmpty(linkElement.getAttribute("link-type"),"intra-app");
}
