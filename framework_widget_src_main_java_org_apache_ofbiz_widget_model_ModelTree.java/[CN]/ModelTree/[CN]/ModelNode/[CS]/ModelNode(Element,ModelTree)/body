{
  super(nodeElement);
  this.modelTree=modelTree;
  this.expandCollapseStyle=nodeElement.getAttribute("expand-collapse-style");
  this.wrapStyleExdr=FlexibleStringExpander.getInstance(nodeElement.getAttribute("wrap-style"));
  this.renderStyle=nodeElement.getAttribute("render-style");
  this.entryName=nodeElement.getAttribute("entry-name");
  this.entityName=nodeElement.getAttribute("entity-name");
  this.pkName=nodeElement.getAttribute("join-field-name");
  ArrayList<ModelAction> actions=new ArrayList<ModelAction>();
  Element actionsElement=UtilXml.firstChildElement(nodeElement,"actions");
  if (actionsElement != null) {
    actions.addAll(ModelTreeAction.readNodeActions(this,actionsElement));
  }
  Element actionElement=UtilXml.firstChildElement(nodeElement,"entity-one");
  if (actionElement != null) {
    actions.add(new AbstractModelAction.EntityOne(this,actionElement));
  }
  actionElement=UtilXml.firstChildElement(nodeElement,"service");
  if (actionElement != null) {
    actions.add(new ModelTreeAction.Service(this,actionElement));
  }
  actionElement=UtilXml.firstChildElement(nodeElement,"script");
  if (actionElement != null) {
    actions.add(new ModelTreeAction.Script(this,actionElement));
  }
  actions.trimToSize();
  this.actions=Collections.unmodifiableList(actions);
  Element screenElement=UtilXml.firstChildElement(nodeElement,"include-screen");
  if (screenElement != null) {
    this.screenNameExdr=FlexibleStringExpander.getInstance(screenElement.getAttribute("name"));
    this.screenLocationExdr=FlexibleStringExpander.getInstance(screenElement.getAttribute("location"));
    this.shareScope=screenElement.getAttribute("share-scope");
  }
 else {
    this.screenNameExdr=FlexibleStringExpander.getInstance("");
    this.screenLocationExdr=FlexibleStringExpander.getInstance("");
    this.shareScope="";
  }
  Element labelElement=UtilXml.firstChildElement(nodeElement,"label");
  if (labelElement != null) {
    this.label=new Label(labelElement);
  }
 else {
    this.label=null;
  }
  Element linkElement=UtilXml.firstChildElement(nodeElement,"link");
  if (linkElement != null) {
    this.link=new Link(linkElement);
  }
 else {
    this.link=null;
  }
  Element conditionElement=UtilXml.firstChildElement(nodeElement,"condition");
  if (conditionElement != null) {
    this.condition=new ModelTreeCondition(modelTree,conditionElement);
  }
 else {
    this.condition=null;
  }
  List<? extends Element> nodeElements=UtilXml.childElementList(nodeElement,"sub-node");
  if (!nodeElements.isEmpty()) {
    List<ModelSubNode> subNodeList=new ArrayList<ModelSubNode>();
    for (    Element subNodeElementEntry : nodeElements) {
      ModelSubNode subNode=new ModelSubNode(subNodeElementEntry,this);
      subNodeList.add(subNode);
    }
    this.subNodeList=Collections.unmodifiableList(subNodeList);
  }
 else {
    this.subNodeList=Collections.emptyList();
  }
}
