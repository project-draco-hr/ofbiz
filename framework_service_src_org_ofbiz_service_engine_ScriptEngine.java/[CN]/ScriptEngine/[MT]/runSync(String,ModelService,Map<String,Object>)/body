{
  Assert.notNull("localName",localName,"modelService.location",modelService.location,"context",context);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(context);
  context.put(ScriptUtil.PARAMETERS_KEY,params);
  DispatchContext dctx=dispatcher.getLocalContext(localName);
  context.put("dctx",dctx);
  context.put("dispatcher",dctx.getDispatcher());
  context.put("delegator",dispatcher.getDelegator());
  try {
    ScriptContext scriptContext=ScriptUtil.createScriptContext(context,protectedKeys);
    Object resultObj=ScriptUtil.executeScript(getLocation(modelService),modelService.invoke,scriptContext,null);
    if (resultObj == null) {
      resultObj=scriptContext.getAttribute(ScriptUtil.RESULT_KEY);
    }
    if (resultObj != null && resultObj instanceof Map<?,?>) {
      return cast(resultObj);
    }
    Map<String,Object> result=ServiceUtil.returnSuccess();
    result.putAll(modelService.makeValid(scriptContext.getBindings(ScriptContext.ENGINE_SCOPE),"OUT"));
    return result;
  }
 catch (  ScriptException se) {
    return ServiceUtil.returnError(se.getMessage());
  }
catch (  Exception e) {
    Debug.logWarning(e,"Error invoking service " + modelService.name + ": ",module);
    throw new GenericServiceException(e);
  }
}
