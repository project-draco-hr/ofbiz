{
  final GenericDelegator delegator=ctx.getDelegator();
  final String applicationId=(String)context.get("applicationId");
  final Map result=new HashMap();
  GenericValue application=getApplicationSandbox(delegator,applicationId);
  GenericValue runTimeData=getRuntimeData(delegator,applicationId);
  Map runTimeContext=getRunTimeContext(delegator,runTimeData);
  Map contextSignature=new HashMap();
  Map resultSignature=new HashMap();
  Map resultContext=new HashMap();
  Map runContext=new HashMap(context);
  try {
    getApplicationSignatures(delegator,application,contextSignature,resultSignature);
    for (Iterator names=resultSignature.keySet().iterator(); names.hasNext(); ) {
      String name=(String)names.next();
      Object value=null;
      if (runTimeContext.containsKey(name) && contextSignature.containsKey(name) && resultSignature.containsKey(name))       value=runTimeContext.get(name);
      if (((Map)context.get("result")).containsKey(name))       value=((Map)context.get("result")).get(name);
      if (value != null)       resultContext.put(name,ObjectType.simpleTypeConvert(value,(String)resultSignature.get(name),null,null));
    }
    runTimeContext.putAll(resultContext);
    if (Debug.verboseOn()) {
      Debug.logVerbose("Completing Application: " + applicationId,module);
      Debug.logVerbose("  Result Signature: " + resultSignature.toString(),module);
      Debug.logVerbose("  Result Values: " + resultContext.toString(),module);
    }
    setRunTimeContext(runTimeData,runTimeContext);
    runContext.remove("applicationId");
    final String workEffortId=(String)runTimeContext.get("workEffortId");
    final Timestamp fromDate=(Timestamp)application.get("fromDate");
    final String partyId=(String)application.get("partyId");
    final String roleTypeId=(String)application.get("roleTypeId");
    runContext.put("workEffortId",workEffortId);
    runContext.put("fromDate",fromDate);
    runContext.put("partyId",partyId);
    runContext.put("roleTypeId",roleTypeId);
    runContext.put("result",resultContext);
    result.putAll(ctx.getDispatcher().runSync("wfCompleteAssignment",runContext));
  }
 catch (  GenericEntityException we) {
    we.printStackTrace();
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,we.getMessage());
  }
catch (  GenericServiceException we) {
    we.printStackTrace();
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,we.getMessage());
  }
catch (  GeneralException ge) {
    ge.printStackTrace();
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,ge.getMessage());
  }
  return result;
}
