{
  configFile="paymentTest.properties";
  creditAmount=new BigDecimal("234.51");
  emailAddr=delegator.makeValue("ContactMech",UtilMisc.toMap("infoString","test@hansbakker.com"));
  orderId="Demo1002";
  creditCard=delegator.makeValue("CreditCard",UtilMisc.toMap("cardType","CCT_VISA","expireDate","10/2011","cardNumber","4444333322221111"));
  billingAddress=delegator.makeValue("PostalAddress",UtilMisc.toMap("toName","The customer Name","address1","The customer billingAddress1","address2","The customer billingAddress2","city","The customer city","stateProvinceGeoId","NLD"));
  shippingAddress=delegator.makeValue("PostalAddress",UtilMisc.toMap("toName","The customer Name","address1","The customer shippingStreet1","address2","The customer shippingStreet2","city","The customer city","stateProvinceGeoId","NLD","postalCode","12345"));
  orderItemMap=UtilMisc.<String,Object>toMap("orderId","Demo1002","orderItemSeqId","00001","orderItemTypeId","PRODUCT_ORDER_ITEM","productId","GZ-1000","prodCatalogId","DemoCatalog","quantity",new BigDecimal("2.000000"),"unitPrice",new BigDecimal("59.00"),"statusId","ITEM_COMPLETED");
  orderItems=UtilMisc.<Object>toList(orderItemMap);
  billToParty=delegator.makeValue("Party",UtilMisc.toMap("partyId","DemoCustomer"));
  paymentGatewayConfigId="SECUREPAY_CONFIG";
  refundAmount=new BigDecimal("100.08");
  orderPaymentPreference=delegator.makeValue("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId","testOrder1000_01","orderId","Demo1002","paymentMethodTypeId","CREDIT_CARD","maxAmount",new BigDecimal("200.00"),"statusId","PAYMENT_AUTHORIZED"));
  GenericValue checkOrderPaymentPreference=delegator.findOne("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId","testOrder1000_01"),false);
  if (UtilValidate.isEmpty(checkOrderPaymentPreference)) {
    orderPaymentPreference.create();
  }
}
