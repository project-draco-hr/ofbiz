{
  this(reader,entityElement,def);
  if (utilTimer != null)   utilTimer.timerString("  createModelEntity: before general/basic info");
  this.populateBasicInfo(entityElement);
  if (utilTimer != null)   utilTimer.timerString("  createModelEntity: before fields");
  List fieldElementList=UtilXml.childElementList(entityElement,"field");
  Iterator fieldElementIter=fieldElementList.iterator();
  while (fieldElementIter.hasNext()) {
    Element fieldElement=(Element)fieldElementIter.next();
    ModelField field=reader.createModelField(fieldElement);
    if (field != null) {
      field.setModelEntity(this);
      this.fields.add(field);
    }
  }
  if ((this.doLock || !this.noAutoStamp) && !this.isField(STAMP_FIELD)) {
    ModelField newField=reader.createModelField(STAMP_FIELD,"date-time",null,false);
    newField.setIsAutoCreatedInternal(true);
    newField.setModelEntity(this);
    this.fields.add(newField);
  }
  if (!this.noAutoStamp && !this.isField(STAMP_TX_FIELD)) {
    ModelField newField=reader.createModelField(STAMP_TX_FIELD,"date-time",null,false);
    newField.setIsAutoCreatedInternal(true);
    newField.setModelEntity(this);
    this.fields.add(newField);
    String indexName=ModelUtil.shortenDbName(this.tableName + "_TXSTMP",18);
    ModelIndex txIndex=new ModelIndex(this,indexName,false);
    txIndex.addIndexField(ModelEntity.STAMP_TX_FIELD);
    txIndex.setModelEntity(this);
    indexes.add(txIndex);
  }
  if ((this.doLock || !this.noAutoStamp) && !this.isField(CREATE_STAMP_FIELD)) {
    ModelField newField=reader.createModelField(CREATE_STAMP_FIELD,"date-time",null,false);
    newField.setIsAutoCreatedInternal(true);
    newField.setModelEntity(this);
    this.fields.add(newField);
  }
  if (!this.noAutoStamp && !this.isField(CREATE_STAMP_TX_FIELD)) {
    ModelField newField=reader.createModelField(CREATE_STAMP_TX_FIELD,"date-time",null,false);
    newField.setIsAutoCreatedInternal(true);
    newField.setModelEntity(this);
    this.fields.add(newField);
    String indexName=ModelUtil.shortenDbName(this.tableName + "_TXCRTS",18);
    ModelIndex txIndex=new ModelIndex(this,indexName,false);
    txIndex.addIndexField(ModelEntity.CREATE_STAMP_TX_FIELD);
    txIndex.setModelEntity(this);
    indexes.add(txIndex);
  }
  if (utilTimer != null)   utilTimer.timerString("  createModelEntity: before prim-keys");
  List pkElementList=UtilXml.childElementList(entityElement,"prim-key");
  Iterator pkElementIter=pkElementList.iterator();
  while (pkElementIter.hasNext()) {
    Element pkElement=(Element)pkElementIter.next();
    ModelField field=reader.findModelField(this,pkElement.getAttribute("field").intern());
    if (field != null) {
      this.pks.add(field);
      field.isPk=true;
    }
 else {
      Debug.logError("[ModelReader.createModelEntity] ERROR: Could not find field \"" + pkElement.getAttribute("field") + "\" specified in a prim-key",module);
    }
  }
  this.nopks=FastList.newInstance();
  for (int ind=0; ind < this.fields.size(); ind++) {
    ModelField field=(ModelField)this.fields.get(ind);
    if (!field.isPk)     this.nopks.add(field);
  }
  if (utilTimer != null)   utilTimer.timerString("  createModelEntity: before relations");
  this.populateRelated(reader,entityElement);
  this.populateIndexes(entityElement);
}
