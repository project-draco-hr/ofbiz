{
  if (extendEntityElement.hasAttribute("enable-lock")) {
    this.doLock=UtilXml.checkBoolean(extendEntityElement.getAttribute("enable-lock"),false);
  }
  if (extendEntityElement.hasAttribute("no-auto-stamp")) {
    this.noAutoStamp=UtilXml.checkBoolean(extendEntityElement.getAttribute("no-auto-stamp"),false);
  }
  if (extendEntityElement.hasAttribute("auto-clear-cache")) {
    this.autoClearCache=UtilXml.checkBoolean(extendEntityElement.getAttribute("auto-clear-cache"),false);
  }
  if (extendEntityElement.hasAttribute("never-cache")) {
    this.neverCache=UtilXml.checkBoolean(extendEntityElement.getAttribute("never-cache"),false);
  }
  if (extendEntityElement.hasAttribute("sequence-bank-size")) {
    String sequenceBankSizeStr=UtilXml.checkEmpty(extendEntityElement.getAttribute("sequence-bank-size"));
    if (UtilValidate.isNotEmpty(sequenceBankSizeStr)) {
      try {
        this.sequenceBankSize=Integer.valueOf(sequenceBankSizeStr);
      }
 catch (      NumberFormatException e) {
        Debug.logError("Error parsing sequence-bank-size value [" + sequenceBankSizeStr + "] for entity ["+ this.entityName+ "]",module);
      }
    }
  }
  for (  Element fieldElement : UtilXml.childElementList(extendEntityElement,"field")) {
    ModelField newField=ModelField.create(this,fieldElement,false);
    ModelField existingField=this.getField(newField.getName());
    if (existingField != null) {
      String type=existingField.getType();
      if (!newField.getType().isEmpty()) {
        type=newField.getType();
      }
      String colName=existingField.getColName();
      if (!newField.getColName().isEmpty()) {
        colName=newField.getColName();
      }
      String description=existingField.getDescription();
      if (!newField.getDescription().isEmpty()) {
        description=newField.getDescription();
      }
      boolean enableAuditLog=existingField.getEnableAuditLog();
      if (UtilValidate.isNotEmpty(fieldElement.getAttribute("enable-audit-log"))) {
        enableAuditLog="true".equals(fieldElement.getAttribute("enable-audit-log"));
      }
      newField=ModelField.create(this,description,existingField.getName(),type,colName,existingField.getColValue(),existingField.getFieldSet(),existingField.getIsNotNull(),existingField.getIsPk(),existingField.getEncrypt(),existingField.getIsAutoCreatedInternal(),enableAuditLog,existingField.getValidators());
    }
synchronized (fieldsLock) {
      if (existingField != null) {
        this.fieldsList.remove(existingField);
      }
      this.fieldsList.add(newField);
      this.fieldsMap.put(newField.getName(),newField);
      if (!newField.getIsPk()) {
        if (existingField != null) {
          this.nopks.remove(existingField);
        }
        this.nopks.add(newField);
      }
 else {
        if (existingField != null) {
          this.pks.remove(existingField);
        }
        this.pks.add(newField);
      }
    }
  }
  this.modelInfo=ModelInfo.createFromAttributes(this.modelInfo,extendEntityElement);
  this.populateRelated(reader,extendEntityElement);
  this.populateIndexes(extendEntityElement);
  this.dependentOn=UtilXml.checkEmpty(extendEntityElement.getAttribute("dependent-on")).intern();
}
