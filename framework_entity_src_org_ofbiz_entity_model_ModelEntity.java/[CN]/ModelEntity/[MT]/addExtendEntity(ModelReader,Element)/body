{
  if (extendEntityElement.hasAttribute("enable-lock")) {
    this.doLock=UtilXml.checkBoolean(extendEntityElement.getAttribute("enable-lock"),false);
  }
  if (extendEntityElement.hasAttribute("no-auto-stamp")) {
    this.noAutoStamp=UtilXml.checkBoolean(extendEntityElement.getAttribute("no-auto-stamp"),false);
  }
  if (extendEntityElement.hasAttribute("auto-clear-cache")) {
    this.autoClearCache=UtilXml.checkBoolean(extendEntityElement.getAttribute("auto-clear-cache"),false);
  }
  if (extendEntityElement.hasAttribute("never-cache")) {
    this.neverCache=UtilXml.checkBoolean(extendEntityElement.getAttribute("never-cache"),false);
  }
  if (extendEntityElement.hasAttribute("sequence-bank-size")) {
    String sequenceBankSizeStr=UtilXml.checkEmpty(extendEntityElement.getAttribute("sequence-bank-size"));
    if (UtilValidate.isNotEmpty(sequenceBankSizeStr)) {
      try {
        this.sequenceBankSize=Integer.valueOf(sequenceBankSizeStr);
      }
 catch (      NumberFormatException e) {
        Debug.logError("Error parsing sequence-bank-size value [" + sequenceBankSizeStr + "] for entity ["+ this.entityName+ "]",module);
      }
    }
  }
  for (  Element fieldElement : UtilXml.childElementList(extendEntityElement,"field")) {
    ModelField field=reader.createModelField(fieldElement);
    if (field != null) {
      ModelField existingField=this.getField(field.getName());
      if (existingField != null) {
        if (UtilValidate.isNotEmpty(field.getType())) {
          existingField.setType(field.getType());
        }
        if (UtilValidate.isNotEmpty(field.getColName())) {
          existingField.setColName(field.getColName());
        }
        if (UtilValidate.isNotEmpty(field.getDescription())) {
          existingField.setDescription(field.getDescription());
        }
        if (UtilValidate.isNotEmpty(field.getEnableAuditLog())) {
          existingField.setEnableAuditLog(field.getEnableAuditLog());
        }
      }
 else {
        field.setModelEntity(this);
        this.fields.add(field);
        if (!field.isPk)         this.nopks.add(field);
      }
    }
  }
  String defResourceName=StringUtil.internString(extendEntityElement.getAttribute("default-resource-name"));
  if (UtilValidate.isNotEmpty(defResourceName)) {
    this.setDefaultResourceName(defResourceName);
  }
  this.populateRelated(reader,extendEntityElement);
  this.populateIndexes(extendEntityElement);
  this.dependentOn=UtilXml.checkEmpty(extendEntityElement.getAttribute("dependent-on")).intern();
}
