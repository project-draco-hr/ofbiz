{
  if (UtilValidate.isNotEmpty(this.getPackageName()) && !packageName.equals(this.getPackageName())) {
    Debug.logWarning("Export EntityModel XML Element [" + this.getEntityName() + "] with a NEW package - "+ packageName,module);
  }
  Element root=document.createElement("entity");
  root.setAttribute("entity-name",this.getEntityName());
  if (!this.getEntityName().equals(ModelUtil.dbNameToClassName(this.getPlainTableName())) || !ModelUtil.javaNameToDbName(this.getEntityName()).equals(this.getPlainTableName())) {
    root.setAttribute("table-name",this.getPlainTableName());
  }
  root.setAttribute("package-name",packageName);
  if (UtilValidate.isNotEmpty(this.getDefaultResourceName())) {
    root.setAttribute("default-resource-name",this.getDefaultResourceName());
  }
  if (UtilValidate.isNotEmpty(this.getDependentOn())) {
    root.setAttribute("dependent-on",this.getDependentOn());
  }
  if (this.getDoLock()) {
    root.setAttribute("enable-lock","true");
  }
  if (this.getNoAutoStamp()) {
    root.setAttribute("no-auto-stamp","true");
  }
  if (this.getNeverCache()) {
    root.setAttribute("never-cache","true");
  }
  if (this.getNeverCheck()) {
    root.setAttribute("never-check","true");
  }
  if (!this.getAutoClearCache()) {
    root.setAttribute("auto-clear-cache","false");
  }
  if (this.getSequenceBankSize() != null) {
    root.setAttribute("sequence-bank-size",this.getSequenceBankSize().toString());
  }
  if (UtilValidate.isNotEmpty(this.getTitle())) {
    root.setAttribute("title",this.getTitle());
  }
  if (UtilValidate.isNotEmpty(this.getCopyright())) {
    root.setAttribute("copyright",this.getCopyright());
  }
  if (UtilValidate.isNotEmpty(this.getAuthor())) {
    root.setAttribute("author",this.getAuthor());
  }
  if (UtilValidate.isNotEmpty(this.getVersion())) {
    root.setAttribute("version",this.getVersion());
  }
  if (UtilValidate.isNotEmpty(this.getDescription())) {
    UtilXml.addChildElementValue(root,"description",this.getDescription(),document);
  }
  Iterator<ModelField> fieldIter=this.getFieldsIterator();
  while (fieldIter != null && fieldIter.hasNext()) {
    ModelField field=fieldIter.next();
    if (!field.getIsAutoCreatedInternal()) {
      root.appendChild(field.toXmlElement(document));
    }
  }
  Iterator<ModelField> pkIter=this.getPksIterator();
  while (pkIter != null && pkIter.hasNext()) {
    ModelField pk=pkIter.next();
    Element pkey=document.createElement("prim-key");
    pkey.setAttribute("field",pk.getName());
    root.appendChild(pkey);
  }
  Iterator<ModelRelation> relIter=this.getRelationsIterator();
  while (relIter != null && relIter.hasNext()) {
    ModelRelation rel=relIter.next();
    root.appendChild(rel.toXmlElement(document));
  }
  Iterator<ModelIndex> idxIter=this.getIndexesIterator();
  while (idxIter != null && idxIter.hasNext()) {
    ModelIndex idx=idxIter.next();
    root.appendChild(idx.toXmlElement(document));
  }
  return root;
}
