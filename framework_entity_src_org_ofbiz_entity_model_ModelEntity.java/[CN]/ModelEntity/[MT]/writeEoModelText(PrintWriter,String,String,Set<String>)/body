{
  int indent=4;
  StringBuffer indentStrBuf=new StringBuffer();
  for (int i=0; i < indent; i++)   indentStrBuf.append(' ');
  String indentString=indentStrBuf.toString();
  if (entityPrefix == null)   entityPrefix="";
  if (helperName == null)   helperName="localderby";
  ModelFieldTypeReader modelFieldTypeReader=ModelFieldTypeReader.getModelFieldTypeReader(helperName);
  writer.println('{');
  writer.print(indentString);
  writer.print("externalName = ");
  writer.print(this.getTableName(helperName));
  writer.println(";");
  writer.print(indentString);
  writer.print("name = ");
  writer.print(this.getEntityName());
  writer.println(";");
  writer.print(indentString);
  writer.println("className = EOGenericRecord;");
  writer.print(indentString);
  writer.print("classProperties = (");
  Iterator<ModelField> cpFieldIter=this.getFieldsIterator();
  while (cpFieldIter.hasNext()) {
    ModelField field=cpFieldIter.next();
    writer.print(field.getName());
    if (cpFieldIter.hasNext())     writer.print(", ");
  }
  Iterator<ModelRelation> cpRelationshipIter=this.getRelationsIterator();
  if (cpRelationshipIter.hasNext()) {
    writer.println(",");
    writer.print(indentString);
    writer.print(indentString);
  }
  while (cpRelationshipIter.hasNext()) {
    ModelRelation relationship=cpRelationshipIter.next();
    writer.print(relationship.getCombinedName());
    if (cpRelationshipIter.hasNext())     writer.print(", ");
  }
  writer.println(");");
  writer.print(indentString);
  writer.println("attributes = (");
  Iterator<ModelField> attrFieldIter=this.getFieldsIterator();
  while (attrFieldIter.hasNext()) {
    ModelField field=attrFieldIter.next();
    ModelFieldType fieldType=modelFieldTypeReader.getModelFieldType(field.getType());
    writer.print(indentString);
    writer.println("{");
    writer.print(indentString);
    writer.print(indentString);
    writer.print("name = ");
    writer.print(field.getName());
    writer.println(";");
    writer.print(indentString);
    writer.print(indentString);
    writer.print("columnName = ");
    writer.print(field.getColName());
    writer.println(";");
    writer.print(indentString);
    writer.print(indentString);
    writer.print("externalType = ");
    String sqlType=fieldType.getSqlType();
    if (sqlType.indexOf("(") >= 0) {
      writer.print(sqlType.substring(0,sqlType.indexOf("(")));
      writer.println(";");
      writer.print(indentString);
      writer.print(indentString);
      writer.print("width = ");
      String widthStr=sqlType.substring(sqlType.indexOf("(") + 1,sqlType.indexOf(")"));
      if (widthStr.indexOf(",") >= 0) {
        widthStr=widthStr.substring(0,widthStr.indexOf(","));
      }
      writer.print(widthStr);
    }
 else {
      writer.print(sqlType);
    }
    writer.println(";");
    writer.print(indentString);
    writer.print(indentString);
    writer.print("valueClassName = ");
    writer.print(fieldType.getJavaType());
    writer.println(";");
    writer.print(indentString);
    if (attrFieldIter.hasNext()) {
      writer.println("},");
    }
 else {
      writer.println("}");
    }
  }
  writer.print(indentString);
  writer.println(");");
  writer.print(indentString);
  writer.print("primaryKeyAttributes = (");
  Iterator<ModelField> pkFieldIter=this.getPksIterator();
  while (pkFieldIter.hasNext()) {
    ModelField field=pkFieldIter.next();
    writer.print(field.getName());
    if (pkFieldIter.hasNext())     writer.print(", ");
  }
  writer.println(");");
  List<ModelRelation> relRelationshipList=FastList.newInstance();
  Iterator<ModelRelation> buildRelationshipIter=this.getRelationsIterator();
  while (buildRelationshipIter.hasNext()) {
    ModelRelation relationship=buildRelationshipIter.next();
    if (entityNameIncludeSet.contains(relationship.getRelEntityName())) {
      relRelationshipList.add(relationship);
    }
  }
  if (relRelationshipList.size() > 0) {
    writer.print(indentString);
    writer.println("relationships = (");
    Iterator<ModelRelation> relRelationshipIter=relRelationshipList.iterator();
    while (relRelationshipIter.hasNext()) {
      ModelRelation relationship=relRelationshipIter.next();
      if (!entityNameIncludeSet.contains(relationship.getRelEntityName())) {
        continue;
      }
      writer.print(indentString);
      writer.println("{");
      writer.print(indentString);
      writer.print(indentString);
      writer.print("name = ");
      writer.print(relationship.getCombinedName());
      writer.println(";");
      writer.print(indentString);
      writer.print(indentString);
      writer.print("destination = ");
      writer.print(relationship.getRelEntityName());
      writer.println(";");
      writer.print(indentString);
      writer.print(indentString);
      if ("many".equals(relationship.getType())) {
        writer.println("isToMany = Y;");
      }
 else {
        writer.println("isToMany = N;");
      }
      writer.print(indentString);
      writer.print(indentString);
      writer.println("joinSemantic = EOInnerJoin;");
      writer.print(indentString);
      writer.print(indentString);
      writer.println("joins = (");
      Iterator<ModelKeyMap> keyMapIter=relationship.getKeyMapsIterator();
      while (keyMapIter.hasNext()) {
        ModelKeyMap keyMap=keyMapIter.next();
        writer.print(indentString);
        writer.print(indentString);
        writer.println("{");
        writer.print(indentString);
        writer.print(indentString);
        writer.print(indentString);
        writer.print("sourceAttribute = ");
        writer.print(keyMap.getFieldName());
        writer.println(";");
        writer.print(indentString);
        writer.print(indentString);
        writer.print(indentString);
        writer.print("destinationAttribute = ");
        writer.print(keyMap.getRelFieldName());
        writer.println(";");
        writer.print(indentString);
        writer.print(indentString);
        if (keyMapIter.hasNext()) {
          writer.println("},");
        }
 else {
          writer.println("}");
        }
      }
      writer.print(indentString);
      writer.print(indentString);
      writer.println(");");
      writer.print(indentString);
      if (relRelationshipIter.hasNext()) {
        writer.println("},");
      }
 else {
        writer.println("}");
      }
    }
    writer.print(indentString);
    writer.println(");");
  }
  writer.println("}");
}
