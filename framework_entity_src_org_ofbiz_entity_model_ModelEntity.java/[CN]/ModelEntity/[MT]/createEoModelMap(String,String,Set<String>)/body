{
  final boolean useRelationshipNames=false;
  ModelFieldTypeReader modelFieldTypeReader=ModelFieldTypeReader.getModelFieldTypeReader(helperName);
  Map<String,Object> topLevelMap=FastMap.newInstance();
  topLevelMap.put("name",this.getEntityName());
  topLevelMap.put("externalName",this.getTableName(helperName));
  topLevelMap.put("className","EOGenericRecord");
  List<String> classPropertiesList=FastList.newInstance();
  topLevelMap.put("classProperties",classPropertiesList);
  for (  ModelField field : this.fields) {
    if (field.getIsAutoCreatedInternal())     continue;
    classPropertiesList.add(field.getName());
  }
  for (  ModelRelation relationship : this.relations) {
    if (!entityNameIncludeSet.contains(relationship.getRelEntityName()))     continue;
    if (useRelationshipNames || relationship.isAutoRelation()) {
      classPropertiesList.add(relationship.getCombinedName());
    }
  }
  List<Map<String,Object>> attributesList=FastList.newInstance();
  topLevelMap.put("attributes",attributesList);
  for (  ModelField field : this.fields) {
    if (field.getIsAutoCreatedInternal())     continue;
    ModelFieldType fieldType=modelFieldTypeReader.getModelFieldType(field.getType());
    Map<String,Object> attributeMap=FastMap.newInstance();
    attributesList.add(attributeMap);
    attributeMap.put("name",field.getName());
    attributeMap.put("columnName",field.getColName());
    attributeMap.put("valueClassName",fieldType.getJavaType());
    String sqlType=fieldType.getSqlType();
    if (sqlType.indexOf("(") >= 0) {
      attributeMap.put("externalType",sqlType.substring(0,sqlType.indexOf("(")));
      String widthStr=sqlType.substring(sqlType.indexOf("(") + 1,sqlType.indexOf(")"));
      if (widthStr.indexOf(",") >= 0) {
        attributeMap.put("width",widthStr.substring(0,widthStr.indexOf(",")));
        attributeMap.put("precision",widthStr.substring(widthStr.indexOf(",") + 1));
      }
 else {
        attributeMap.put("width",widthStr);
      }
    }
 else {
      attributeMap.put("externalType",sqlType);
    }
  }
  List<String> primaryKeyAttributesList=FastList.newInstance();
  topLevelMap.put("primaryKeyAttributes",primaryKeyAttributesList);
  for (  ModelField pkField : this.pks) {
    primaryKeyAttributesList.add(pkField.getName());
  }
  List<Map<String,Object>> relationshipsMapList=FastList.newInstance();
  for (  ModelRelation relationship : this.relations) {
    if (entityNameIncludeSet.contains(relationship.getRelEntityName())) {
      Map<String,Object> relationshipMap=FastMap.newInstance();
      relationshipsMapList.add(relationshipMap);
      if (useRelationshipNames || relationship.isAutoRelation()) {
        relationshipMap.put("name",relationship.getCombinedName());
      }
 else {
        relationshipMap.put("name",relationship.getKeyMapsIterator().next().getFieldName());
      }
      relationshipMap.put("destination",relationship.getRelEntityName());
      if ("many".equals(relationship.getType())) {
        relationshipMap.put("isToMany","Y");
        relationshipMap.put("isMandatory","N");
      }
 else {
        relationshipMap.put("isToMany","N");
        relationshipMap.put("isMandatory","Y");
      }
      relationshipMap.put("joinSemantic","EOInnerJoin");
      List<Map<String,Object>> joinsMapList=FastList.newInstance();
      relationshipMap.put("joins",joinsMapList);
      for (      ModelKeyMap keyMap : relationship.getKeyMapsClone()) {
        Map<String,Object> joinsMap=FastMap.newInstance();
        joinsMapList.add(joinsMap);
        joinsMap.put("sourceAttribute",keyMap.getFieldName());
        joinsMap.put("destinationAttribute",keyMap.getRelFieldName());
      }
    }
  }
  if (relationshipsMapList.size() > 0) {
    topLevelMap.put("relationships",relationshipsMapList);
  }
  return topLevelMap;
}
