{
  this.entityName=UtilXml.checkEmpty(entityElement.getAttribute("entity-name")).intern();
  this.tableName=UtilXml.checkEmpty(entityElement.getAttribute("table-name"),ModelUtil.javaNameToDbName(this.entityName)).intern();
  this.packageName=UtilXml.checkEmpty(entityElement.getAttribute("package-name")).intern();
  this.defaultResourceName=UtilXml.checkEmpty(entityElement.getAttribute("default-resource-name")).intern();
  this.dependentOn=UtilXml.checkEmpty(entityElement.getAttribute("dependent-on")).intern();
  this.doLock=UtilXml.checkBoolean(entityElement.getAttribute("enable-lock"),false);
  this.noAutoStamp=UtilXml.checkBoolean(entityElement.getAttribute("no-auto-stamp"),false);
  this.neverCache=UtilXml.checkBoolean(entityElement.getAttribute("never-cache"),false);
  this.autoClearCache=UtilXml.checkBoolean(entityElement.getAttribute("auto-clear-cache"),true);
  String sequenceBankSizeStr=UtilXml.checkEmpty(entityElement.getAttribute("sequence-bank-size"));
  if (UtilValidate.isNotEmpty(sequenceBankSizeStr)) {
    try {
      this.sequenceBankSize=Integer.valueOf(sequenceBankSizeStr);
    }
 catch (    NumberFormatException e) {
      Debug.logError("Error parsing sequence-bank-size value [" + sequenceBankSizeStr + "] for entity ["+ this.entityName+ "]",module);
    }
  }
}
