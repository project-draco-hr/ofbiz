{
  String paymentConfig=(String)context.get("paymentConfig");
  if (UtilValidate.isEmpty(paymentConfig)) {
    paymentConfig="payment.properties";
  }
  Document requestDocument=createRequestDocument(paymentConfig);
  Element engineDocElement=UtilXml.firstChildElement(requestDocument.getDocumentElement(),"EngineDoc");
  Element orderFormDocElement=UtilXml.firstChildElement(engineDocElement,"OrderFormDoc");
  UtilXml.addChildElementValue(orderFormDocElement,"Comments",refNum,requestDocument);
  Element consumerElement=UtilXml.addChildElement(orderFormDocElement,"Consumer",requestDocument);
  GenericValue billToEmail=(GenericValue)context.get("billToEmail");
  if (billToEmail != null) {
    UtilXml.addChildElementValue(consumerElement,"Email",billToEmail.getString("infoString"),requestDocument);
  }
  GenericValue creditCard=(GenericValue)context.get("creditCard");
  Delegator delegator=creditCard.getDelegator();
  boolean enableCVM=EntityUtilProperties.propertyValueEqualsIgnoreCase(paymentConfig,"payment.clearcommerce.enableCVM","Y",delegator);
  String cardSecurityCode=enableCVM ? (String)context.get("cardSecurityCode") : null;
  String localCode=EntityUtilProperties.getPropertyValue(paymentConfig,"payment.clearcommerce.localeCode","840",delegator);
  appendPaymentMechNode(consumerElement,creditCard,cardSecurityCode,localCode);
  GenericValue billingAddress=(GenericValue)context.get("billingAddress");
  if (billingAddress != null) {
    Element billToElement=UtilXml.addChildElement(consumerElement,"BillTo",requestDocument);
    Element billToLocationElement=UtilXml.addChildElement(billToElement,"Location",requestDocument);
    appendAddressNode(billToLocationElement,billingAddress);
  }
  GenericValue shippingAddress=(GenericValue)context.get("shippingAddress");
  if (shippingAddress != null) {
    Element shipToElement=UtilXml.addChildElement(consumerElement,"ShipTo",requestDocument);
    Element shipToLocationElement=UtilXml.addChildElement(shipToElement,"Location",requestDocument);
    appendAddressNode(shipToLocationElement,shippingAddress);
  }
  String currencyCode=EntityUtilProperties.getPropertyValue(paymentConfig,"payment.clearcommerce.currencyCode","840",delegator);
  appendTransactionNode(orderFormDocElement,type,amount,currencyCode);
  Map<String,Object> pbOrder=UtilGenerics.checkMap(context.get("pbOrder"));
  if (pbOrder != null) {
    if (Debug.verboseOn())     Debug.logVerbose("pbOrder Map not empty:" + pbOrder.toString(),module);
    Element pbOrderElement=UtilXml.addChildElement(orderFormDocElement,"PbOrder",requestDocument);
    UtilXml.addChildElementValue(pbOrderElement,"OrderFrequencyCycle",(String)pbOrder.get("OrderFrequencyCycle"),requestDocument);
    Element interval=UtilXml.addChildElementValue(pbOrderElement,"OrderFrequencyInterval",(String)pbOrder.get("OrderFrequencyInterval"),requestDocument);
    interval.setAttribute("DataType","S32");
    Element total=UtilXml.addChildElementValue(pbOrderElement,"TotalNumberPayments",(String)pbOrder.get("TotalNumberPayments"),requestDocument);
    total.setAttribute("DataType","S32");
  }
 else   if (context.get("OrderFrequencyCycle") != null && context.get("OrderFrequencyInterval") != null && context.get("TotalNumberPayments") != null) {
    Element pbOrderElement=UtilXml.addChildElement(orderFormDocElement,"PbOrder",requestDocument);
    UtilXml.addChildElementValue(pbOrderElement,"OrderFrequencyCycle",(String)context.get("OrderFrequencyCycle"),requestDocument);
    Element interval=UtilXml.addChildElementValue(pbOrderElement,"OrderFrequencyInterval",(String)context.get("OrderFrequencyInterval"),requestDocument);
    interval.setAttribute("DataType","S32");
    Element total=UtilXml.addChildElementValue(pbOrderElement,"TotalNumberPayments",(String)context.get("TotalNumberPayments"),requestDocument);
    total.setAttribute("DataType","S32");
  }
  return requestDocument;
}
