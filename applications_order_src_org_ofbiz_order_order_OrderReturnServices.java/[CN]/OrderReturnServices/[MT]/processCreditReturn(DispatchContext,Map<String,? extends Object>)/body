{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  GenericValue returnHeader=null;
  List<GenericValue> returnItems=null;
  try {
    returnHeader=delegator.findOne("ReturnHeader",UtilMisc.toMap("returnId",returnId),false);
    if (returnHeader != null) {
      returnItems=returnHeader.getRelated("ReturnItem",UtilMisc.toMap("returnTypeId","RTN_CREDIT"),null,false);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up return information",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorGettingReturnHeaderItemInformation",locale));
  }
  BigDecimal adjustments=getReturnAdjustmentTotal(delegator,UtilMisc.toMap("returnId",returnId,"returnTypeId","RTN_CREDIT"));
  if (returnHeader != null && (UtilValidate.isNotEmpty(returnItems) || adjustments.compareTo(ZERO) > 0)) {
    String finAccountId=returnHeader.getString("finAccountId");
    String billingAccountId=returnHeader.getString("billingAccountId");
    String fromPartyId=returnHeader.getString("fromPartyId");
    String toPartyId=returnHeader.getString("toPartyId");
    Map<String,Object> serviceResult=null;
    try {
      serviceResult=dispatcher.runSync("checkPaymentAmountForRefund",UtilMisc.toMap("returnId",returnId));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem running the checkPaymentAmountForRefund service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsWithCheckPaymentAmountForRefund",locale));
    }
    if (ServiceUtil.isError(serviceResult)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(serviceResult));
    }
    GenericValue productStore=null;
    GenericValue orderHeader=null;
    GenericValue returnItem=null;
    if (UtilValidate.isNotEmpty(returnItems)) {
      returnItem=EntityUtil.getFirst(returnItems);
    }
    if (UtilValidate.isNotEmpty(returnItem)) {
      try {
        orderHeader=returnItem.getRelatedOne("OrderHeader",false);
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
    }
    if (orderHeader != null) {
      OrderReadHelper orderReadHelper=new OrderReadHelper(orderHeader);
      productStore=orderReadHelper.getProductStore();
    }
    if (finAccountId != null && billingAccountId != null) {
      Debug.logWarning("FinAccount and BillingAccount both are supplied for storing credit, priority will be given to ProductStore preference. Default is FinAccount.",module);
      if (productStore != null && productStore.getString("storeCreditAccountEnumId") != null && "BILLING_ACCOUNT".equals(productStore.getString("storeCreditAccountEnumId"))) {
        finAccountId=null;
      }
 else {
        billingAccountId=null;
      }
    }
    if (finAccountId == null && billingAccountId == null) {
      List<GenericValue> billingAccounts=FastList.newInstance();
      try {
        billingAccounts=delegator.findByAnd("BillingAccountRoleAndAddress",UtilMisc.toMap("partyId",fromPartyId,"roleTypeId","BILL_TO_CUSTOMER"),null,false);
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
      billingAccounts=EntityUtil.filterByDate(billingAccounts);
      billingAccounts=EntityUtil.orderBy(billingAccounts,UtilMisc.toList("-fromDate"));
      if (UtilValidate.isNotEmpty(billingAccounts)) {
        ListIterator<GenericValue> billingAccountItr=billingAccounts.listIterator();
        while (billingAccountItr.hasNext() && billingAccountId == null) {
          String thisBillingAccountId=billingAccountItr.next().getString("billingAccountId");
          BigDecimal billingAccountBalance=ZERO;
          try {
            billingAccountBalance=getBillingAccountBalance(thisBillingAccountId,dctx);
          }
 catch (          GenericEntityException e) {
            return ServiceUtil.returnError(e.getMessage());
          }
          if (billingAccountBalance.signum() == -1) {
            billingAccountId=thisBillingAccountId;
          }
        }
      }
      if (billingAccountId == null) {
        if (productStore != null && productStore.getString("storeCreditAccountEnumId") != null && "BILLING_ACCOUNT".equals(productStore.getString("storeCreditAccountEnumId"))) {
          if (UtilValidate.isNotEmpty(billingAccounts)) {
            billingAccountId=EntityUtil.getFirst(billingAccounts).getString("billingAccountId");
          }
 else {
            Map<String,Object> results=createBillingAccountFromReturn(returnHeader,returnItems,dctx,context);
            if (ServiceUtil.isError(results)) {
              Debug.logError("Error creating BillingAccount: " + results.get(ModelService.ERROR_MESSAGE),module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorWithCreateBillingAccount",locale) + results.get(ModelService.ERROR_MESSAGE));
            }
            billingAccountId=(String)results.get("billingAccountId");
            if (billingAccountId == null) {
              Debug.logError("No available billing account, none was created",module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderNoAvailableBillingAccount",locale));
            }
          }
        }
 else {
          List<GenericValue> finAccounts=null;
          try {
            finAccounts=delegator.findByAnd("FinAccountAndRole",UtilMisc.toMap("partyId",fromPartyId,"finAccountTypeId","STORE_CREDIT_ACCT","roleTypeId","OWNER","statusId","FNACT_ACTIVE"),null,false);
          }
 catch (          GenericEntityException e) {
            return ServiceUtil.returnError(e.getMessage());
          }
          finAccounts=EntityUtil.filterByDate(finAccounts);
          finAccounts=EntityUtil.orderBy(finAccounts,UtilMisc.toList("-fromDate"));
          if (UtilValidate.isNotEmpty(finAccounts)) {
            finAccountId=EntityUtil.getFirst(finAccounts).getString("finAccountId");
          }
          if (finAccountId == null) {
            Map<String,Object> createAccountCtx=FastMap.newInstance();
            createAccountCtx.put("ownerPartyId",fromPartyId);
            createAccountCtx.put("finAccountTypeId","STORE_CREDIT_ACCT");
            createAccountCtx.put("productStoreId",productStore.getString("productStoreId"));
            createAccountCtx.put("currencyUomId",returnHeader.getString("currencyUomId"));
            createAccountCtx.put("finAccountName","Store Credit Account for party [" + fromPartyId + "]");
            createAccountCtx.put("userLogin",userLogin);
            Map<String,Object> createAccountResult=null;
            try {
              createAccountResult=dispatcher.runSync("createFinAccountForStore",createAccountCtx);
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,"Problems running the createFinAccountForStore service",module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingFinAccountForStore",locale));
            }
            if (ServiceUtil.isError(createAccountResult)) {
              return ServiceUtil.returnError(ServiceUtil.getErrorMessage(createAccountResult));
            }
            finAccountId=(String)createAccountResult.get("finAccountId");
            if (finAccountId == null) {
              Debug.logError("No available fin account, none was created",module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderNoAvailableFinAccount",locale));
            }
            Map<String,Object> finAccountRoleResult=null;
            try {
              finAccountRoleResult=dispatcher.runSync("createFinAccountRole",UtilMisc.toMap("finAccountId",finAccountId,"partyId",fromPartyId,"roleTypeId","OWNER","userLogin",userLogin));
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,"Problem running the createFinAccountRole service",module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingFinAccountRoleRecord",locale));
            }
            if (ServiceUtil.isError(finAccountRoleResult)) {
              return ServiceUtil.returnError(ServiceUtil.getErrorMessage(finAccountRoleResult));
            }
          }
        }
      }
    }
    Timestamp now=UtilDateTime.nowTimestamp();
    BigDecimal creditTotal=ZERO;
    for (    GenericValue item : returnItems) {
      BigDecimal quantity=item.getBigDecimal("returnQuantity");
      BigDecimal price=item.getBigDecimal("returnPrice");
      if (quantity == null)       quantity=ZERO;
      if (price == null)       price=ZERO;
      creditTotal=creditTotal.add(price.multiply(quantity).setScale(decimals,rounding));
    }
    creditTotal=creditTotal.add(adjustments.setScale(decimals,rounding));
    String finAccountTransId=null;
    if (finAccountId != null) {
      Map<String,Object> finAccountTransResult=null;
      try {
        finAccountTransResult=dispatcher.runSync("createFinAccountTrans",UtilMisc.toMap("finAccountId",finAccountId,"finAccountTransTypeId","DEPOSIT","partyId",toPartyId,"amount",creditTotal,"reasonEnumId","FATR_REFUND","userLogin",userLogin));
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem creating FinAccountTrans record",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingFinAccountTransRecord",locale));
      }
      if (ServiceUtil.isError(finAccountTransResult)) {
        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(finAccountTransResult));
      }
      finAccountTransId=(String)finAccountTransResult.get("finAccountTransId");
    }
    String paymentId=delegator.getNextSeqId("Payment");
    GenericValue payment=delegator.makeValue("Payment",UtilMisc.toMap("paymentId",paymentId));
    payment.set("paymentTypeId","CUSTOMER_REFUND");
    payment.set("partyIdFrom",toPartyId);
    payment.set("partyIdTo",fromPartyId);
    payment.set("effectiveDate",now);
    payment.set("amount",creditTotal);
    payment.set("comments","Return Credit");
    payment.set("statusId","PMNT_CONFIRMED");
    if (billingAccountId != null) {
      payment.set("paymentMethodTypeId","EXT_BILLACT");
    }
 else {
      payment.set("paymentMethodTypeId","FIN_ACCOUNT");
    }
    try {
      delegator.create(payment);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problem creating Payment record",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentRecord",locale));
    }
    Map<String,Object> itemResponse=UtilMisc.<String,Object>toMap("paymentId",paymentId);
    itemResponse.put("responseAmount",creditTotal);
    itemResponse.put("responseDate",now);
    itemResponse.put("userLogin",userLogin);
    if (billingAccountId != null) {
      itemResponse.put("billingAccountId",billingAccountId);
    }
 else {
      itemResponse.put("finAccountTransId",finAccountTransId);
    }
    Map<String,Object> serviceResults=null;
    try {
      serviceResults=dispatcher.runSync("createReturnItemResponse",itemResponse);
      if (ServiceUtil.isError(serviceResults)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingReturnItemResponseRecord",locale),null,null,serviceResults);
      }
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem creating ReturnItemResponse record",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingReturnItemResponseRecord",locale));
    }
    String itemResponseId=(String)serviceResults.get("returnItemResponseId");
    for (    GenericValue item : returnItems) {
      Map<String,Object> returnItemMap=UtilMisc.<String,Object>toMap("returnItemResponseId",itemResponseId,"returnId",item.get("returnId"),"returnItemSeqId",item.get("returnItemSeqId"),"statusId","RETURN_COMPLETED","userLogin",userLogin);
      try {
        serviceResults=dispatcher.runSync("updateReturnItem",returnItemMap);
        if (ServiceUtil.isError(serviceResults)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemStoringReturnItemUpdates",locale),null,null,serviceResults);
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem storing ReturnItem updates",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemStoringReturnItemUpdates",locale));
      }
    }
    if (billingAccountId != null) {
      String paId=delegator.getNextSeqId("PaymentApplication");
      GenericValue pa=delegator.makeValue("PaymentApplication",UtilMisc.toMap("paymentApplicationId",paId));
      pa.set("paymentId",paymentId);
      pa.set("billingAccountId",billingAccountId);
      pa.set("amountApplied",creditTotal);
      try {
        delegator.create(pa);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problem creating PaymentApplication record for billing account",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentApplicationRecord",locale));
      }
      try {
        serviceResults=dispatcher.runSync("createPaymentApplicationsFromReturnItemResponse",UtilMisc.<String,Object>toMap("returnItemResponseId",itemResponseId,"userLogin",userLogin));
        if (ServiceUtil.isError(serviceResults)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentApplicationRecord",locale),null,null,serviceResults);
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem creating PaymentApplication records for return invoice",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentApplicationRecord",locale));
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
