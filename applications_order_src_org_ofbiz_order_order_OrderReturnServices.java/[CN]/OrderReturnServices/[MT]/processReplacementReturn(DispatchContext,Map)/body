{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  String returnTypeId=(String)context.get("returnTypeId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  GenericValue returnHeader=null;
  List returnItems=null;
  try {
    returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
    if (returnHeader != null) {
      returnItems=returnHeader.getRelatedByAnd("ReturnItem",UtilMisc.toMap("returnTypeId",returnTypeId));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up return information",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorGettingReturnHeaderItemInformation",locale));
  }
  String returnHeaderTypeId=returnHeader.getString("returnHeaderTypeId");
  List createdOrderIds=new ArrayList();
  if (returnHeader != null && UtilValidate.isNotEmpty(returnItems)) {
    Map returnItemsByOrderId=new HashMap();
    Map totalByOrder=new HashMap();
    groupReturnItemsByOrder(returnItems,returnItemsByOrderId,totalByOrder,delegator,returnId,returnTypeId);
    Set returnItemsByOrderIdEntrySet=returnItemsByOrderId.entrySet();
    Iterator returnItemsByOrderIdEntryIter=returnItemsByOrderIdEntrySet.iterator();
    while (returnItemsByOrderIdEntryIter.hasNext()) {
      Map.Entry entry=(Map.Entry)returnItemsByOrderIdEntryIter.next();
      String orderId=(String)entry.getKey();
      List returnItemList=(List)entry.getValue();
      GenericValue orderHeader=null;
      try {
        orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot get Order details for #" + orderId,module);
        continue;
      }
      OrderReadHelper orh=new OrderReadHelper(orderHeader);
      Map orderMap=UtilMisc.toMap("userLogin",userLogin);
      String placingPartyId=null;
      GenericValue placingParty=null;
      if ("CUSTOMER_RETURN".equals(returnHeaderTypeId)) {
        placingParty=orh.getPlacingParty();
        if (placingParty != null) {
          placingPartyId=placingParty.getString("partyId");
        }
        orderMap.put("orderTypeId","SALES_ORDER");
      }
 else {
        placingParty=orh.getSupplierAgent();
        if (placingParty != null) {
          placingPartyId=placingParty.getString("partyId");
        }
        orderMap.put("orderTypeId","PURCHASE_ORDER");
      }
      orderMap.put("partyId",placingPartyId);
      orderMap.put("productStoreId",orderHeader.get("productStoreId"));
      orderMap.put("webSiteId",orderHeader.get("webSiteId"));
      orderMap.put("visitId",orderHeader.get("visitId"));
      orderMap.put("currencyUom",orderHeader.get("currencyUom"));
      orderMap.put("grandTotal",BigDecimal.ZERO);
      List contactMechs=new ArrayList();
      List orderCm=null;
      try {
        orderCm=orderHeader.getRelated("OrderContactMech");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      if (orderCm != null) {
        Iterator orderCmi=orderCm.iterator();
        while (orderCmi.hasNext()) {
          GenericValue v=(GenericValue)orderCmi.next();
          contactMechs.add(GenericValue.create(v));
        }
        orderMap.put("orderContactMechs",contactMechs);
      }
      BigDecimal orderPriceTotal=BigDecimal.ZERO;
      BigDecimal additionalItemTotal=BigDecimal.ZERO;
      List orderItems=new ArrayList();
      List orderItemShipGroupInfo=new ArrayList();
      List orderItemShipGroupIds=new ArrayList();
      List orderItemAssocs=new ArrayList();
      if (returnItemList != null) {
        Iterator returnItemIter=returnItemList.iterator();
        int itemCount=1;
        while (returnItemIter.hasNext()) {
          GenericValue returnItem=(GenericValue)returnItemIter.next();
          GenericValue orderItem=null;
          GenericValue product=null;
          try {
            orderItem=returnItem.getRelatedOne("OrderItem");
            product=orderItem.getRelatedOne("Product");
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            continue;
          }
          if (orderItem != null) {
            BigDecimal quantity=returnItem.getBigDecimal("returnQuantity");
            BigDecimal unitPrice=returnItem.getBigDecimal("returnPrice");
            if (quantity != null && unitPrice != null) {
              orderPriceTotal=orderPriceTotal.add(quantity.multiply(unitPrice));
              GenericValue refurbItem=null;
              if ("CUSTOMER_RETURN".equals(returnHeaderTypeId)) {
                try {
                  if (UtilValidate.isNotEmpty(product)) {
                    GenericValue refurbItemAssoc=EntityUtil.getFirst(EntityUtil.filterByDate(product.getRelated("MainProductAssoc",UtilMisc.toMap("productAssocTypeId","PRODUCT_REFURB"),UtilMisc.toList("sequenceNum"))));
                    if (UtilValidate.isNotEmpty(refurbItemAssoc)) {
                      refurbItem=refurbItemAssoc.getRelatedOne("AssocProduct");
                    }
                  }
                }
 catch (                GenericEntityException e) {
                  Debug.logError(e,module);
                }
                if (UtilValidate.isNotEmpty(refurbItem)) {
                  boolean inventoryAvailable=false;
                  try {
                    Map invReqResult=dispatcher.runSync("isStoreInventoryAvailable",UtilMisc.toMap("productStoreId",orderHeader.get("productStoreId"),"productId",refurbItem.getString("productId"),"product",refurbItem,"quantity",quantity));
                    if (ServiceUtil.isError(invReqResult)) {
                      Debug.logError("Error calling isStoreInventoryAvailable service, result is: " + invReqResult,module);
                    }
 else {
                      inventoryAvailable="Y".equals((String)invReqResult.get("available"));
                    }
                  }
 catch (                  GenericServiceException e) {
                    Debug.logError(e,"Fatal error calling inventory checking services: " + e.toString(),module);
                  }
                  if (!inventoryAvailable) {
                    refurbItem=null;
                  }
                }
              }
              GenericValue newItem=delegator.makeValue("OrderItem",UtilMisc.toMap("orderItemSeqId",UtilFormatOut.formatPaddedNumber(itemCount++,5)));
              if (UtilValidate.isEmpty(refurbItem)) {
                newItem.set("productId",orderItem.get("productId"));
                newItem.set("itemDescription",orderItem.get("itemDescription"));
              }
 else {
                newItem.set("productId",refurbItem.get("productId"));
                newItem.set("itemDescription",ProductContentWrapper.getProductContentAsText(refurbItem,"PRODUCT_NAME",locale,null));
              }
              newItem.set("orderItemTypeId",orderItem.get("orderItemTypeId"));
              newItem.set("productFeatureId",orderItem.get("productFeatureId"));
              newItem.set("prodCatalogId",orderItem.get("prodCatalogId"));
              newItem.set("productCategoryId",orderItem.get("productCategoryId"));
              newItem.set("quantity",quantity);
              newItem.set("unitPrice",unitPrice);
              newItem.set("unitListPrice",orderItem.get("unitListPrice"));
              newItem.set("comments",orderItem.get("comments"));
              newItem.set("correspondingPoId",orderItem.get("correspondingPoId"));
              newItem.set("statusId","ITEM_CREATED");
              orderItems.add(newItem);
              GenericValue orderItemShipGroupAssoc=null;
              try {
                orderItemShipGroupAssoc=EntityUtil.getFirst(orderItem.getRelated("OrderItemShipGroupAssoc"));
                if (orderItemShipGroupAssoc != null) {
                  if (!orderItemShipGroupIds.contains(orderItemShipGroupAssoc.getString("shipGroupSeqId"))) {
                    GenericValue orderItemShipGroup=orderItemShipGroupAssoc.getRelatedOne("OrderItemShipGroup");
                    GenericValue newOrderItemShipGroup=(GenericValue)orderItemShipGroup.clone();
                    newOrderItemShipGroup.set("orderId",null);
                    orderItemShipGroupInfo.add(newOrderItemShipGroup);
                    orderItemShipGroupIds.add(orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                  }
                  GenericValue newOrderItemShipGroupAssoc=delegator.makeValue("OrderItemShipGroupAssoc",UtilMisc.toMap("orderItemSeqId",newItem.getString("orderItemSeqId"),"shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"),"quantity",quantity));
                  orderItemShipGroupInfo.add(newOrderItemShipGroupAssoc);
                }
              }
 catch (              GenericEntityException gee) {
                Debug.logError(gee,module);
              }
              GenericValue newOrderItemAssoc=delegator.makeValue("OrderItemAssoc",UtilMisc.toMap("orderId",orderHeader.getString("orderId"),"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId","_NA_","toOrderItemSeqId",newItem.getString("orderItemSeqId"),"toShipGroupSeqId","_NA_","orderItemAssocTypeId","REPLACEMENT"));
              orderItemAssocs.add(newOrderItemAssoc);
              if ("RTN_REPAIR_REPLACE".equals(returnTypeId)) {
                List repairItems=null;
                try {
                  if (UtilValidate.isNotEmpty(product)) {
                    repairItems=EntityUtil.filterByDate(product.getRelated("MainProductAssoc",UtilMisc.toMap("productAssocTypeId","PRODUCT_REPAIR_SRV"),UtilMisc.toList("sequenceNum")));
                  }
                }
 catch (                GenericEntityException e) {
                  Debug.logError(e,module);
                  continue;
                }
                if (UtilValidate.isNotEmpty(repairItems)) {
                  Iterator repairItemIt=repairItems.iterator();
                  while (repairItemIt.hasNext()) {
                    GenericValue repairItem=(GenericValue)repairItemIt.next();
                    GenericValue repairItemProduct=null;
                    try {
                      repairItemProduct=repairItem.getRelatedOne("AssocProduct");
                    }
 catch (                    GenericEntityException e) {
                      Debug.logError(e,module);
                      continue;
                    }
                    if (UtilValidate.isNotEmpty(repairItemProduct)) {
                      BigDecimal repairUnitQuantity=repairItem.getBigDecimal("quantity");
                      if (UtilValidate.isEmpty(repairUnitQuantity)) {
                        repairUnitQuantity=BigDecimal.ONE;
                      }
                      BigDecimal repairQuantity=quantity.multiply(repairUnitQuantity);
                      newItem=delegator.makeValue("OrderItem",UtilMisc.toMap("orderItemSeqId",UtilFormatOut.formatPaddedNumber(itemCount++,5)));
                      Map priceContext=FastMap.newInstance();
                      priceContext.put("currencyUomId",orderHeader.get("currencyUom"));
                      if (placingPartyId != null) {
                        priceContext.put("partyId",placingPartyId);
                      }
                      priceContext.put("quantity",repairUnitQuantity);
                      priceContext.put("product",repairItemProduct);
                      priceContext.put("webSiteId",orderHeader.get("webSiteId"));
                      priceContext.put("productStoreId",orderHeader.get("productStoreId"));
                      priceContext.put("productPricePurposeId","PURCHASE");
                      priceContext.put("checkIncludeVat","Y");
                      Map priceResult=null;
                      try {
                        priceResult=dispatcher.runSync("calculateProductPrice",priceContext);
                      }
 catch (                      GenericServiceException gse) {
                        Debug.logError(gse,module);
                        continue;
                      }
                      if (ServiceUtil.isError(priceResult)) {
                        Debug.logError(ServiceUtil.getErrorMessage(priceResult),module);
                        continue;
                      }
                      Boolean validPriceFound=(Boolean)priceResult.get("validPriceFound");
                      if (Boolean.FALSE.equals(validPriceFound)) {
                        Debug.logError("Could not find a valid price for the product with ID [" + repairItemProduct.get("productId") + "].",module);
                        continue;
                      }
                      if (priceResult.get("listPrice") != null) {
                        newItem.set("unitListPrice",(BigDecimal)priceResult.get("listPrice"));
                      }
                      BigDecimal repairUnitPrice=null;
                      if (priceResult.get("basePrice") != null) {
                        repairUnitPrice=(BigDecimal)priceResult.get("basePrice");
                      }
 else {
                        repairUnitPrice=BigDecimal.ZERO;
                      }
                      newItem.set("unitPrice",repairUnitPrice);
                      newItem.set("productId",repairItemProduct.get("productId"));
                      newItem.set("quantity",repairQuantity);
                      newItem.set("itemDescription",ProductContentWrapper.getProductContentAsText(repairItemProduct,"PRODUCT_NAME",locale,null));
                      newItem.set("statusId","ITEM_CREATED");
                      orderItems.add(newItem);
                      additionalItemTotal=additionalItemTotal.add(repairQuantity.multiply(repairUnitPrice));
                      if (UtilValidate.isNotEmpty(orderItemShipGroupAssoc)) {
                        GenericValue newOrderItemShipGroupAssoc=delegator.makeValue("OrderItemShipGroupAssoc",UtilMisc.toMap("orderItemSeqId",newItem.getString("orderItemSeqId"),"shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"),"quantity",repairQuantity));
                        orderItemShipGroupInfo.add(newOrderItemShipGroupAssoc);
                      }
                      newOrderItemAssoc=delegator.makeValue("OrderItemAssoc",UtilMisc.toMap("orderId",orderHeader.getString("orderId"),"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId","_NA_","toOrderItemSeqId",newItem.getString("orderItemSeqId"),"toShipGroupSeqId","_NA_","orderItemAssocTypeId","REPLACEMENT"));
                      orderItemAssocs.add(newOrderItemAssoc);
                    }
                  }
                }
              }
            }
          }
        }
        orderMap.put("orderItems",orderItems);
        if (orderItemShipGroupInfo.size() > 0) {
          orderMap.put("orderItemShipGroupInfo",orderItemShipGroupInfo);
        }
        if (orderItemAssocs.size() > 0) {
          orderMap.put("orderItemAssociations",orderItemAssocs);
        }
      }
 else {
        Debug.logError("No return items found??",module);
        continue;
      }
      GenericValue adj=delegator.makeValue("OrderAdjustment");
      adj.set("orderAdjustmentTypeId","REPLACE_ADJUSTMENT");
      adj.set("amount",orderPriceTotal.negate());
      adj.set("comments","Replacement Item Return #" + returnId);
      adj.set("createdDate",nowTimestamp);
      adj.set("createdByUserLogin",userLogin.getString("userLoginId"));
      orderMap.put("orderAdjustments",UtilMisc.toList(adj));
      if (additionalItemTotal.compareTo(BigDecimal.ZERO) > 0) {
        GenericValue paymentMethod=null;
        try {
          paymentMethod=returnHeader.getRelatedOne("PaymentMethod");
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
        if (UtilValidate.isNotEmpty(paymentMethod)) {
          String paymentMethodId=paymentMethod.getString("paymentMethodId");
          String paymentMethodTypeId=paymentMethod.getString("paymentMethodTypeId");
          GenericValue opp=delegator.makeValue("OrderPaymentPreference",new HashMap());
          opp.set("paymentMethodTypeId",paymentMethodTypeId);
          opp.set("paymentMethodId",paymentMethodId);
          if (paymentMethodId != null || "FIN_ACCOUNT".equals(paymentMethodTypeId)) {
            opp.set("statusId","PAYMENT_NOT_AUTH");
          }
 else           if (paymentMethodTypeId != null) {
            if (paymentMethodTypeId.startsWith("EXT_")) {
              opp.set("statusId","PAYMENT_NOT_RECEIVED");
            }
 else {
              opp.set("statusId","PAYMENT_RECEIVED");
            }
          }
          orderMap.put("orderPaymentInfo",UtilMisc.toList(opp));
        }
      }
      try {
        orderMap.put("orderTerms",orderHeader.getRelated("OrderTerm"));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot create replacement order because order terms for original order are not available",module);
      }
      try {
        List orderRoles=orderHeader.getRelated("OrderRole");
        Map orderRolesMap=FastMap.newInstance();
        if (orderRoles != null) {
          Iterator orderRolesIt=orderRoles.iterator();
          while (orderRolesIt.hasNext()) {
            GenericValue orderRole=(GenericValue)orderRolesIt.next();
            List parties=(List)orderRolesMap.get(orderRole.getString("roleTypeId"));
            if (parties == null) {
              parties=FastList.newInstance();
              orderRolesMap.put(orderRole.getString("roleTypeId"),parties);
            }
            parties.add(orderRole.getString("partyId"));
          }
        }
        if (orderRolesMap.size() > 0) {
          orderMap.put("orderAdditionalPartyRoleMap",orderRolesMap);
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot create replacement order because order roles for original order are not available",module);
      }
      String createdOrderId=null;
      Map orderResult=null;
      try {
        orderResult=dispatcher.runSync("storeOrder",orderMap);
      }
 catch (      GenericServiceException e) {
        Debug.logInfo(e,"Problem creating the order!",module);
      }
      if (orderResult != null) {
        createdOrderId=(String)orderResult.get("orderId");
        createdOrderIds.add(createdOrderId);
      }
      if (createdOrderId != null) {
        OrderChangeHelper.approveOrder(dispatcher,userLogin,createdOrderId);
        Map itemResponse=FastMap.newInstance();
        itemResponse.put("replacementOrderId",createdOrderId);
        itemResponse.put("responseAmount",orderPriceTotal);
        itemResponse.put("responseDate",nowTimestamp);
        itemResponse.put("userLogin",userLogin);
        String returnItemResponseId=null;
        try {
          Map createReturnItemResponseResult=dispatcher.runSync("createReturnItemResponse",itemResponse);
          if (ServiceUtil.isError(createReturnItemResponseResult)) {
            return ServiceUtil.returnError("Could not create ReturnItemResponse record",null,null,createReturnItemResponseResult);
          }
          returnItemResponseId=(String)createReturnItemResponseResult.get("returnItemResponseId");
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Problem creating ReturnItemResponse record",module);
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingReturnItemResponseRecord",locale));
        }
        Iterator updateReturnItemIter=returnItemList.iterator();
        while (updateReturnItemIter.hasNext()) {
          GenericValue returnItem=(GenericValue)updateReturnItemIter.next();
          Map updateReturnItemCtx=FastMap.newInstance();
          updateReturnItemCtx.put("returnId",returnId);
          updateReturnItemCtx.put("returnItemSeqId",returnItem.get("returnItemSeqId"));
          updateReturnItemCtx.put("returnItemResponseId",returnItemResponseId);
          updateReturnItemCtx.put("userLogin",userLogin);
          try {
            Map updateReturnItemResult=dispatcher.runSync("updateReturnItem",updateReturnItemCtx);
            if (ServiceUtil.isError(updateReturnItemResult)) {
              return ServiceUtil.returnError("Could not update ReturnItem record",null,null,updateReturnItemResult);
            }
          }
 catch (          GenericServiceException e) {
            String errMsg="Could not update ReturnItem record";
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
        }
      }
    }
  }
  StringBuffer successMessage=new StringBuffer();
  if (createdOrderIds.size() > 0) {
    successMessage.append("The following new orders have been created : ");
    Iterator i=createdOrderIds.iterator();
    while (i.hasNext()) {
      successMessage.append(i.next());
      if (i.hasNext()) {
        successMessage.append(", ");
      }
    }
  }
 else {
    successMessage.append("No orders were created.");
  }
  return ServiceUtil.returnSuccess(successMessage.toString());
}
