{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  GenericValue returnHeader=null;
  List returnItems=null;
  try {
    returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
    if (returnHeader != null) {
      returnItems=returnHeader.getRelatedByAnd("ReturnItem",UtilMisc.toMap("returnTypeId","RTN_REPLACE"));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up return information",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorGettingReturnHeaderItemInformation",locale));
  }
  List createdOrderIds=new ArrayList();
  if (returnHeader != null && returnItems != null && returnItems.size() > 0) {
    Map itemsByOrder=new HashMap();
    Map totalByOrder=new HashMap();
    groupReturnItemsByOrder(returnItems,itemsByOrder,totalByOrder,delegator,returnId);
    Set itemSet=itemsByOrder.entrySet();
    Iterator itemByOrderIt=itemSet.iterator();
    while (itemByOrderIt.hasNext()) {
      Map.Entry entry=(Map.Entry)itemByOrderIt.next();
      String orderId=(String)entry.getKey();
      List items=(List)entry.getValue();
      GenericValue orderHeader=null;
      try {
        orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot get Order details for #" + orderId,module);
        continue;
      }
      OrderReadHelper orh=new OrderReadHelper(orderHeader);
      Map orderMap=UtilMisc.toMap("userLogin",userLogin);
      GenericValue placingParty=orh.getPlacingParty();
      String placingPartyId=null;
      if (placingParty != null) {
        placingPartyId=placingParty.getString("partyId");
      }
      orderMap.put("orderTypeId","SALES_ORDER");
      orderMap.put("partyId",placingPartyId);
      orderMap.put("productStoreId",orderHeader.get("productStoreId"));
      orderMap.put("webSiteId",orderHeader.get("webSiteId"));
      orderMap.put("visitId",orderHeader.get("visitId"));
      orderMap.put("currencyUom",orderHeader.get("currencyUom"));
      orderMap.put("grandTotal",new Double(0.00));
      List contactMechs=new ArrayList();
      List orderCm=null;
      try {
        orderCm=orderHeader.getRelated("OrderContactMech");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      if (orderCm != null) {
        Iterator orderCmi=orderCm.iterator();
        while (orderCmi.hasNext()) {
          GenericValue v=(GenericValue)orderCmi.next();
          contactMechs.add(GenericValue.create(v));
        }
        orderMap.put("orderContactMechs",contactMechs);
      }
      List shipmentPrefs=new ArrayList();
      List orderSp=null;
      try {
        orderSp=orderHeader.getRelated("OrderShipmentPreference");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      if (orderSp != null) {
        Iterator orderSpi=orderSp.iterator();
        while (orderSpi.hasNext()) {
          GenericValue v=(GenericValue)orderSpi.next();
          shipmentPrefs.add(GenericValue.create(v));
        }
        orderMap.put("orderShipmentPreferences",shipmentPrefs);
      }
      double itemTotal=0.00;
      List orderItems=new ArrayList();
      List orderItemShipGroupInfo=new ArrayList();
      List orderItemShipGroupIds=new ArrayList();
      if (items != null) {
        Iterator ri=items.iterator();
        int itemCount=1;
        while (ri.hasNext()) {
          GenericValue returnItem=(GenericValue)ri.next();
          GenericValue orderItem=null;
          try {
            orderItem=returnItem.getRelatedOne("OrderItem");
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            continue;
          }
          if (orderItem != null) {
            Double quantity=returnItem.getDouble("returnQuantity");
            Double unitPrice=returnItem.getDouble("returnPrice");
            if (quantity != null && unitPrice != null) {
              itemTotal=(quantity.doubleValue() * unitPrice.doubleValue());
              GenericValue newItem=delegator.makeValue("OrderItem",UtilMisc.toMap("orderItemSeqId",UtilFormatOut.formatPaddedNumber(itemCount,5)));
              newItem.set("orderItemTypeId",orderItem.get("orderItemTypeId"));
              newItem.set("productId",orderItem.get("productId"));
              newItem.set("productFeatureId",orderItem.get("productFeatureId"));
              newItem.set("prodCatalogId",orderItem.get("prodCatalogId"));
              newItem.set("productCategoryId",orderItem.get("productCategoryId"));
              newItem.set("quantity",quantity);
              newItem.set("unitPrice",unitPrice);
              newItem.set("unitListPrice",orderItem.get("unitListPrice"));
              newItem.set("itemDescription",orderItem.get("itemDescription"));
              newItem.set("comments",orderItem.get("comments"));
              newItem.set("correspondingPoId",orderItem.get("correspondingPoId"));
              newItem.set("statusId","ITEM_CREATED");
              orderItems.add(newItem);
              try {
                GenericValue orderItemShipGroupAssoc=EntityUtil.getFirst(orderItem.getRelated("OrderItemShipGroupAssoc"));
                if (orderItemShipGroupAssoc != null) {
                  if (!orderItemShipGroupIds.contains(orderItemShipGroupAssoc.getString("shipGroupSeqId"))) {
                    GenericValue orderItemShipGroup=orderItemShipGroupAssoc.getRelatedOne("OrderItemShipGroup");
                    GenericValue newOrderItemShipGroup=(GenericValue)orderItemShipGroup.clone();
                    newOrderItemShipGroup.set("orderId",null);
                    orderItemShipGroupInfo.add(newOrderItemShipGroup);
                    orderItemShipGroupIds.add(orderItemShipGroupAssoc.getString("shipGroupSeqId"));
                  }
                  GenericValue newOrderItemShipGroupAssoc=delegator.makeValue("OrderItemShipGroupAssoc",UtilMisc.toMap("orderItemSeqId",newItem.getString("orderItemSeqId"),"shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"),"quantity",quantity));
                  orderItemShipGroupInfo.add(newOrderItemShipGroupAssoc);
                }
              }
 catch (              GenericEntityException gee) {
                Debug.logError(gee,module);
              }
            }
          }
        }
        orderMap.put("orderItems",orderItems);
        if (orderItemShipGroupInfo.size() > 0) {
          orderMap.put("orderItemShipGroupInfo",orderItemShipGroupInfo);
        }
      }
 else {
        Debug.logError("No return items found??",module);
        continue;
      }
      GenericValue adj=delegator.makeValue("OrderAdjustment",new HashMap());
      adj.set("orderAdjustmentTypeId","REPLACE_ADJUSTMENT");
      adj.set("amount",new Double(itemTotal * -1));
      adj.set("comments","Replacement Item Return #" + returnId);
      adj.set("createdDate",UtilDateTime.nowTimestamp());
      adj.set("createdByUserLogin",userLogin.getString("userLoginId"));
      orderMap.put("orderAdjustments",UtilMisc.toList(adj));
      try {
        orderMap.put("orderTerms",orderHeader.getRelated("OrderTerm"));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot create replacement order because order terms for original order are not available",module);
      }
      try {
        List orderRoles=orderHeader.getRelated("OrderRole");
        Map orderRolesMap=FastMap.newInstance();
        if (orderRoles != null) {
          Iterator orderRolesIt=orderRoles.iterator();
          while (orderRolesIt.hasNext()) {
            GenericValue orderRole=(GenericValue)orderRolesIt.next();
            List parties=(List)orderRolesMap.get(orderRole.getString("roleTypeId"));
            if (parties == null) {
              parties=FastList.newInstance();
              orderRolesMap.put(orderRole.getString("roleTypeId"),parties);
            }
            parties.add(orderRole.getString("partyId"));
          }
        }
        if (orderRolesMap.size() > 0) {
          orderMap.put("orderAdditionalPartyRoleMap",orderRolesMap);
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot create replacement order because order roles for original order are not available",module);
      }
      String createdOrderId=null;
      Map orderResult=null;
      try {
        orderResult=dispatcher.runSync("storeOrder",orderMap);
      }
 catch (      GenericServiceException e) {
        Debug.logInfo(e,"Problem creating the order!",module);
      }
      if (orderResult != null) {
        createdOrderId=(String)orderResult.get("orderId");
        createdOrderIds.add(createdOrderId);
      }
      if (createdOrderId != null) {
        OrderChangeHelper.approveOrder(dispatcher,userLogin,createdOrderId);
      }
    }
  }
  StringBuffer successMessage=new StringBuffer();
  if (createdOrderIds.size() > 0) {
    successMessage.append("The following new orders have been created : ");
    Iterator i=createdOrderIds.iterator();
    while (i.hasNext()) {
      successMessage.append(i.next());
      if (i.hasNext()) {
        successMessage.append(", ");
      }
    }
  }
 else {
    successMessage.append("No orders were created.");
  }
  return ServiceUtil.returnSuccess(successMessage.toString());
}
