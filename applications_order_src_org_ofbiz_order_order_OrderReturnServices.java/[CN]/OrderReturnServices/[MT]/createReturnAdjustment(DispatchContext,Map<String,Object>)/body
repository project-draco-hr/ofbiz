{
  Delegator delegator=dctx.getDelegator();
  String orderAdjustmentId=(String)context.get("orderAdjustmentId");
  String returnAdjustmentTypeId=(String)context.get("returnAdjustmentTypeId");
  String returnId=(String)context.get("returnId");
  String returnItemSeqId=(String)context.get("returnItemSeqId");
  String description=(String)context.get("description");
  BigDecimal amount=(BigDecimal)context.get("amount");
  Locale locale=(Locale)context.get("locale");
  GenericValue returnItemTypeMap=null;
  GenericValue orderAdjustment=null;
  GenericValue returnAdjustmentType=null;
  GenericValue orderItem=null;
  GenericValue returnItem=null;
  GenericValue returnHeader=null;
  if (orderAdjustmentId != null) {
    try {
      orderAdjustment=EntityQuery.use(delegator).from("OrderAdjustment").where("orderAdjustmentId",orderAdjustmentId).queryOne();
      if (orderAdjustment == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderCreateReturnAdjustmentNotFoundOrderAdjustment",UtilMisc.toMap("orderAdjustmentId",orderAdjustmentId),locale));
      }
      returnHeader=EntityQuery.use(delegator).from("ReturnHeader").where("returnId",returnId).queryOne();
      String returnHeaderTypeId=((returnHeader != null) && (returnHeader.getString("returnHeaderTypeId") != null)) ? returnHeader.getString("returnHeaderTypeId") : "CUSTOMER_RETURN";
      returnItemTypeMap=EntityQuery.use(delegator).from("ReturnItemTypeMap").where("returnHeaderTypeId",returnHeaderTypeId,"returnItemMapKey",orderAdjustment.get("orderAdjustmentTypeId")).queryOne();
      returnAdjustmentType=returnItemTypeMap.getRelatedOne("ReturnAdjustmentType",false);
      if (returnAdjustmentType != null && UtilValidate.isEmpty(description)) {
        description=returnAdjustmentType.getString("description");
      }
      if ((returnItemSeqId != null) && !("_NA_".equals(returnItemSeqId))) {
        returnItem=EntityQuery.use(delegator).from("ReturnItem").where("returnId",returnId,"returnItemSeqId",returnItemSeqId).queryOne();
        Debug.logInfo("returnId:" + returnId + ",returnItemSeqId:"+ returnItemSeqId,module);
        orderItem=returnItem.getRelatedOne("OrderItem",false);
      }
 else {
        if (UtilValidate.isNotEmpty(orderAdjustment.getString("orderItemSeqId")) && !"_NA_".equals(orderAdjustment.getString("orderItemSeqId"))) {
          returnItem=EntityQuery.use(delegator).from("ReturnItem").where("returnId",returnId,"orderId",orderAdjustment.getString("orderId"),"orderItemSeqId",orderAdjustment.getString("orderItemSeqId")).queryFirst();
          if (UtilValidate.isNotEmpty(returnItem)) {
            orderItem=returnItem.getRelatedOne("OrderItem",false);
          }
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      throw new GeneralRuntimeException(e.getMessage());
    }
    context.putAll(orderAdjustment.getAllFields());
    if (UtilValidate.isNotEmpty(amount)) {
      context.put("amount",amount);
    }
  }
  if (returnAdjustmentTypeId == null) {
    String mappingTypeId=returnItemTypeMap != null ? returnItemTypeMap.get("returnItemTypeId").toString() : null;
    returnAdjustmentTypeId=mappingTypeId != null ? mappingTypeId : "RET_MAN_ADJ";
  }
  if (returnItem != null) {
    if (needRecalculate(returnAdjustmentTypeId)) {
      Debug.logInfo("returnPrice:" + returnItem.getBigDecimal("returnPrice") + ",returnQuantity:"+ returnItem.getBigDecimal("returnQuantity")+ ",sourcePercentage:"+ orderAdjustment.getBigDecimal("sourcePercentage"),module);
      BigDecimal returnTotal=returnItem.getBigDecimal("returnPrice").multiply(returnItem.getBigDecimal("returnQuantity"));
      BigDecimal orderTotal=orderItem.getBigDecimal("quantity").multiply(orderItem.getBigDecimal("unitPrice"));
      amount=getAdjustmentAmount("RET_SALES_TAX_ADJ".equals(returnAdjustmentTypeId),returnTotal,orderTotal,orderAdjustment.getBigDecimal("amount"));
    }
 else {
      amount=(BigDecimal)context.get("amount");
    }
  }
 else {
    amount=(BigDecimal)context.get("amount");
  }
  String seqId=delegator.getNextSeqId("ReturnAdjustment");
  GenericValue newReturnAdjustment=delegator.makeValue("ReturnAdjustment",UtilMisc.toMap("returnAdjustmentId",seqId));
  try {
    newReturnAdjustment.setNonPKFields(context);
    if (orderAdjustment != null && orderAdjustment.get("taxAuthorityRateSeqId") != null) {
      newReturnAdjustment.set("taxAuthorityRateSeqId",orderAdjustment.getString("taxAuthorityRateSeqId"));
    }
    newReturnAdjustment.set("amount",amount == null ? BigDecimal.ZERO : amount);
    newReturnAdjustment.set("returnAdjustmentTypeId",returnAdjustmentTypeId);
    newReturnAdjustment.set("description",description);
    newReturnAdjustment.set("returnItemSeqId",UtilValidate.isEmpty(returnItemSeqId) ? "_NA_" : returnItemSeqId);
    delegator.create(newReturnAdjustment);
    Map<String,Object> result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OrderCreateReturnAdjustment",UtilMisc.toMap("seqId",seqId),locale));
    result.put("returnAdjustmentId",seqId);
    return result;
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Failed to store returnAdjustment",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderCreateReturnAdjustmentFailed",locale));
  }
}
