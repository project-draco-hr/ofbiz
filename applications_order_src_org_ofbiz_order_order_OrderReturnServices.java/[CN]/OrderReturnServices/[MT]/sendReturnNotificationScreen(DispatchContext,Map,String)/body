{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String returnId=(String)context.get("returnId");
  Locale locale=(Locale)context.get("locale");
  GenericValue returnHeader=null;
  try {
    returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetReturnHeaderForID",UtilMisc.toMap("returnId",returnId),locale));
  }
  List returnItems=null;
  try {
    returnItems=returnHeader.getRelated("ReturnItem");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetReturnItemRecordsFromReturnHeader",locale));
  }
  String productStoreId=null;
  String emailAddress=null;
  if (returnItems != null && returnItems.size() > 0) {
    GenericValue firstItem=EntityUtil.getFirst(returnItems);
    GenericValue orderHeader=null;
    try {
      orderHeader=firstItem.getRelatedOne("OrderHeader");
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetOrderHeaderFromReturnItem",locale));
    }
    if (orderHeader != null && UtilValidate.isNotEmpty(orderHeader.getString("productStoreId"))) {
      OrderReadHelper orh=new OrderReadHelper(orderHeader);
      productStoreId=orh.getProductStoreId();
      emailAddress=orh.getOrderEmailString();
    }
  }
  if (productStoreId != null && productStoreId.length() > 0) {
    Map sendMap=FastMap.newInstance();
    GenericValue productStoreEmail=null;
    try {
      productStoreEmail=delegator.findByPrimaryKey("ProductStoreEmailSetting",UtilMisc.toMap("productStoreId",productStoreId,"emailType",emailType));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    if (productStoreEmail != null && emailAddress != null) {
      String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
      if (UtilValidate.isEmpty(bodyScreenLocation)) {
        bodyScreenLocation=ProductStoreWorker.getDefaultProductStoreEmailScreenLocation(emailType);
      }
      sendMap.put("bodyScreenUri",bodyScreenLocation);
      ResourceBundleMapWrapper uiLabelMap=(ResourceBundleMapWrapper)UtilProperties.getResourceBundleMap("EcommerceUiLabels",locale);
      uiLabelMap.addBottomResourceBundle("OrderUiLabels");
      uiLabelMap.addBottomResourceBundle("CommonUiLabels");
      Map bodyParameters=UtilMisc.toMap("returnHeader",returnHeader,"returnItems",returnItems,"uiLabelMap",uiLabelMap,"locale",locale);
      sendMap.put("bodyParameters",bodyParameters);
      sendMap.put("subject",productStoreEmail.getString("subject"));
      sendMap.put("contentType",productStoreEmail.get("contentType"));
      sendMap.put("sendFrom",productStoreEmail.get("fromAddress"));
      sendMap.put("sendCc",productStoreEmail.get("ccAddress"));
      sendMap.put("sendBcc",productStoreEmail.get("bccAddress"));
      sendMap.put("sendTo",emailAddress);
      sendMap.put("userLogin",userLogin);
      Map sendResp=null;
      try {
        sendResp=dispatcher.runSync("sendMailFromScreen",sendMap);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem sending mail",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemSendingEmail",locale));
      }
      if (sendResp != null && ServiceUtil.isError(sendResp)) {
        sendResp.put("emailType",emailType);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemSendingEmail",locale),null,null,sendResp);
      }
      return ServiceUtil.returnSuccess();
    }
  }
  return ServiceUtil.returnFailure("No valid email setting for store");
}
