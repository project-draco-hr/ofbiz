{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  GenericValue returnHeader=null;
  List returnItems=null;
  try {
    returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
    if (returnHeader != null) {
      returnItems=returnHeader.getRelatedByAnd("ReturnItem",UtilMisc.toMap("returnTypeId","RTN_CREDIT"));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up return information",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorGettingReturnHeaderItemInformation",locale));
  }
  BigDecimal adjustments=getReturnAdjustmentTotal(delegator,UtilMisc.toMap("returnId",returnId,"returnTypeId","RTN_CREDIT"));
  if (returnHeader != null && ((returnItems != null && returnItems.size() > 0) || adjustments.compareTo(ZERO) > 0)) {
    String billingAccountId=returnHeader.getString("billingAccountId");
    String fromPartyId=returnHeader.getString("fromPartyId");
    String toPartyId=returnHeader.getString("toPartyId");
    Map serviceResult=null;
    try {
      serviceResult=dispatcher.runSync("checkPaymentAmountForRefund",UtilMisc.toMap("returnId",returnId));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem running the checkPaymentAmountForRefund service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsWithCheckPaymentAmountForRefund",locale));
    }
    if (ServiceUtil.isError(serviceResult)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(serviceResult));
    }
    if (billingAccountId == null) {
      Map results=createBillingAccountFromReturn(returnHeader,returnItems,dctx,context);
      if (ServiceUtil.isError(results)) {
        Debug.logError("Error creating BillingAccount: " + results.get(ModelService.ERROR_MESSAGE),module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorWithCreateBillingAccount",locale) + results.get(ModelService.ERROR_MESSAGE));
      }
      billingAccountId=(String)results.get("billingAccountId");
    }
    if (billingAccountId == null) {
      Debug.logError("No available billing account, none was created",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderNoAvailableBillingAccount",locale));
    }
    Timestamp now=UtilDateTime.nowTimestamp();
    BigDecimal creditTotal=ZERO;
    for (Iterator itemsIter=returnItems.iterator(); itemsIter.hasNext(); ) {
      GenericValue item=(GenericValue)itemsIter.next();
      BigDecimal quantity=item.getBigDecimal("returnQuantity");
      BigDecimal price=item.getBigDecimal("returnPrice");
      if (quantity == null)       quantity=ZERO;
      if (price == null)       price=ZERO;
      creditTotal=creditTotal.add(price.multiply(quantity).setScale(decimals,rounding));
    }
    creditTotal=creditTotal.add(adjustments.setScale(decimals,rounding));
    String paymentId=delegator.getNextSeqId("Payment");
    GenericValue payment=delegator.makeValue("Payment",UtilMisc.toMap("paymentId",paymentId));
    payment.set("paymentTypeId","CUSTOMER_REFUND");
    payment.set("paymentMethodTypeId","EXT_BILLACT");
    payment.set("partyIdFrom",toPartyId);
    payment.set("partyIdTo",fromPartyId);
    payment.set("effectiveDate",now);
    payment.set("amount",creditTotal);
    payment.set("comments","Return Credit");
    payment.set("statusId","PMNT_CONFIRMED");
    try {
      delegator.create(payment);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problem creating Payment record",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentRecord",locale));
    }
    Map itemResponse=UtilMisc.toMap("paymentId",paymentId);
    itemResponse.put("billingAccountId",billingAccountId);
    itemResponse.put("responseAmount",creditTotal);
    itemResponse.put("responseDate",now);
    itemResponse.put("userLogin",userLogin);
    Map serviceResults=null;
    try {
      serviceResults=dispatcher.runSync("createReturnItemResponse",itemResponse);
      if (ServiceUtil.isError(serviceResults)) {
        return ServiceUtil.returnError("Could not create ReturnItemResponse record",null,null,serviceResults);
      }
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem creating ReturnItemResponse record",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingReturnItemResponseRecord",locale));
    }
    String itemResponseId=(String)serviceResults.get("returnItemResponseId");
    for (Iterator itemsIter=returnItems.iterator(); itemsIter.hasNext(); ) {
      GenericValue item=(GenericValue)itemsIter.next();
      Map returnItemMap=UtilMisc.toMap("returnItemResponseId",itemResponseId,"returnId",item.get("returnId"),"returnItemSeqId",item.get("returnItemSeqId"),"statusId","RETURN_COMPLETED","userLogin",userLogin);
      try {
        serviceResults=dispatcher.runSync("updateReturnItem",returnItemMap);
        if (ServiceUtil.isError(serviceResults)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemStoringReturnItemUpdates",locale),null,null,serviceResults);
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem storing ReturnItem updates",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemStoringReturnItemUpdates",locale));
      }
    }
    String paId=delegator.getNextSeqId("PaymentApplication");
    GenericValue pa=delegator.makeValue("PaymentApplication",UtilMisc.toMap("paymentApplicationId",paId));
    pa.set("paymentId",paymentId);
    pa.set("billingAccountId",billingAccountId);
    pa.set("amountApplied",creditTotal);
    try {
      delegator.create(pa);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problem creating PaymentApplication record for billing account",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentApplicationRecord",locale));
    }
    try {
      serviceResults=dispatcher.runSync("createPaymentApplicationsFromReturnItemResponse",UtilMisc.<String,Object>toMap("returnItemResponseId",itemResponseId,"userLogin",userLogin));
      if (ServiceUtil.isError(serviceResults)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentApplicationRecord",locale),null,null,serviceResults);
      }
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem creating PaymentApplication records for return invoice",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingPaymentApplicationRecord",locale));
    }
  }
  return ServiceUtil.returnSuccess();
}
