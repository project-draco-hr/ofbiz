{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String returnId=(String)context.get("returnId");
  String returnTypeId=(String)context.get("returnTypeId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  GenericValue returnHeader=null;
  List returnItems=null;
  try {
    returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
    if (returnHeader != null) {
      returnItems=returnHeader.getRelatedByAnd("ReturnItem",UtilMisc.toMap("returnTypeId",returnTypeId));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up return information",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorGettingReturnHeaderItemInformation",locale));
  }
  BigDecimal adjustments=getReturnAdjustmentTotal(delegator,UtilMisc.toMap("returnId",returnId,"returnTypeId",returnTypeId));
  if (returnHeader != null && ((returnItems != null && returnItems.size() > 0) || adjustments.compareTo(ZERO) > 0)) {
    Map itemsByOrder=new HashMap();
    Map totalByOrder=new HashMap();
    Map serviceResult=null;
    try {
      serviceResult=dispatcher.runSync("checkPaymentAmountForRefund",UtilMisc.toMap("returnId",returnId));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem running the checkPaymentAmountForRefund service",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsWithCheckPaymentAmountForRefund",locale));
    }
    if (ServiceUtil.isError(serviceResult)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(serviceResult));
    }
    groupReturnItemsByOrder(returnItems,itemsByOrder,totalByOrder,delegator,returnId,returnTypeId);
    Set itemSet=itemsByOrder.entrySet();
    Iterator itemByOrderIt=itemSet.iterator();
    while (itemByOrderIt.hasNext()) {
      Map.Entry entry=(Map.Entry)itemByOrderIt.next();
      String orderId=(String)entry.getKey();
      List items=(List)entry.getValue();
      BigDecimal orderTotal=(BigDecimal)totalByOrder.get(orderId);
      GenericValue orderHeader=null;
      List orderPayPrefs=null;
      try {
        orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
        orderPayPrefs=orderHeader.getRelated("OrderPaymentPreference",UtilMisc.toList("-maxAmount"));
        List exprs=UtilMisc.toList(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_SETTLED"),EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_RECEIVED"));
        orderPayPrefs=EntityUtil.filterByOr(orderPayPrefs,exprs);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot get Order details for #" + orderId,module);
        continue;
      }
      OrderReadHelper orderReadHelper=new OrderReadHelper(delegator,orderId);
      GenericValue refundPaymentMethod=null;
      GenericValue productStore=orderReadHelper.getProductStore();
      if (UtilValidate.isEmpty(productStore) || UtilValidate.isEmpty(productStore.get("payToPartyId"))) {
        Debug.logError("No payToPartyId found for orderId " + orderId,module);
      }
 else {
        GenericValue orgAcctgPref=null;
        Map acctgPreferencesResult=null;
        try {
          acctgPreferencesResult=dispatcher.runSync("getPartyAccountingPreferences",UtilMisc.toMap("organizationPartyId",productStore.get("payToPartyId"),"userLogin",userLogin));
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Error retrieving PartyAcctgPreference for partyId " + productStore.get("payToPartyId"),module);
          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsWithGetPartyAcctgPreferences",locale));
        }
        orgAcctgPref=(GenericValue)acctgPreferencesResult.get("partyAccountingPreference");
        if (UtilValidate.isNotEmpty(orgAcctgPref)) {
          try {
            refundPaymentMethod=orgAcctgPref.getRelatedOne("PaymentMethod");
          }
 catch (          GenericEntityException e) {
            Debug.logError("Error retrieving related refundPaymentMethod from PartyAcctgPreference for partyId " + productStore.get("payToPartyId"),module);
          }
        }
      }
      Timestamp now=UtilDateTime.nowTimestamp();
      Map receivedPaymentTotalsByPaymentMethod=orderReadHelper.getReceivedPaymentTotalsByPaymentMethod();
      Map refundedTotalsByPaymentMethod=orderReadHelper.getReturnedTotalsByPaymentMethod();
      BigDecimal receivedPaymentTotalsByBillingAccount=orderReadHelper.getOrderPaymentPreferenceTotalByType("EXT_BILLACT");
      Map prefSplitMap=new HashMap();
      Iterator oppit=orderPayPrefs.iterator();
      while (oppit.hasNext()) {
        GenericValue orderPayPref=(GenericValue)oppit.next();
        String paymentMethodTypeId=orderPayPref.getString("paymentMethodTypeId");
        String orderPayPrefKey=orderPayPref.getString("paymentMethodId") != null ? orderPayPref.getString("paymentMethodId") : orderPayPref.getString("paymentMethodTypeId");
        BigDecimal orderPayPrefReceivedTotal=ZERO;
        if (receivedPaymentTotalsByPaymentMethod.containsKey(orderPayPrefKey)) {
          orderPayPrefReceivedTotal=orderPayPrefReceivedTotal.add((BigDecimal)receivedPaymentTotalsByPaymentMethod.get(orderPayPrefKey)).setScale(decimals,rounding);
        }
        if (receivedPaymentTotalsByBillingAccount != null) {
          orderPayPrefReceivedTotal=orderPayPrefReceivedTotal.add(receivedPaymentTotalsByBillingAccount);
        }
        BigDecimal orderPayPrefRefundedTotal=ZERO;
        if (refundedTotalsByPaymentMethod.containsKey(orderPayPrefKey)) {
          orderPayPrefRefundedTotal=orderPayPrefRefundedTotal.add((BigDecimal)refundedTotalsByPaymentMethod.get(orderPayPrefKey)).setScale(decimals,rounding);
        }
        BigDecimal orderPayPrefAvailableTotal=orderPayPrefReceivedTotal.subtract(orderPayPrefRefundedTotal);
        if (orderPayPrefAvailableTotal.compareTo(ZERO) == 1) {
          Map orderPayPrefDetails=new HashMap();
          orderPayPrefDetails.put("orderPaymentPreference",orderPayPref);
          orderPayPrefDetails.put("availableTotal",orderPayPrefAvailableTotal);
          if (prefSplitMap.containsKey(paymentMethodTypeId)) {
            ((List)prefSplitMap.get(paymentMethodTypeId)).add(orderPayPrefDetails);
          }
 else {
            prefSplitMap.put(paymentMethodTypeId,UtilMisc.toList(orderPayPrefDetails));
          }
        }
      }
      BigDecimal amountLeftToRefund=orderTotal.setScale(decimals,rounding);
      List electronicTypes=UtilMisc.toList("CREDIT_CARD","EFT_ACCOUNT","FIN_ACCOUNT","GIFT_CARD");
      List orderedRefundPaymentMethodTypes=new ArrayList();
      orderedRefundPaymentMethodTypes.add("EXT_BILLACT");
      orderedRefundPaymentMethodTypes.add("FIN_ACCOUNT");
      orderedRefundPaymentMethodTypes.add("GIFT_CARD");
      orderedRefundPaymentMethodTypes.add("CREDIT_CARD");
      orderedRefundPaymentMethodTypes.add("EFT_ACCOUNT");
      EntityConditionList pmtConditionList=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.NOT_IN,orderedRefundPaymentMethodTypes)),EntityOperator.AND);
      List otherPaymentMethodTypes=new ArrayList();
      try {
        otherPaymentMethodTypes=delegator.findList("PaymentMethodType",pmtConditionList,null,null,null,true);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Cannot get PaymentMethodTypes",module);
        return ServiceUtil.returnError("Problems getting PaymentMethodTypes: " + e.toString());
      }
      orderedRefundPaymentMethodTypes.addAll(EntityUtil.getFieldListFromEntityList(otherPaymentMethodTypes,"paymentMethodTypeId",true));
      Iterator orpmtit=orderedRefundPaymentMethodTypes.iterator();
      while (orpmtit.hasNext() && amountLeftToRefund.compareTo(ZERO) == 1) {
        String paymentMethodTypeId=(String)orpmtit.next();
        if (prefSplitMap.containsKey(paymentMethodTypeId)) {
          List paymentMethodDetails=(List)prefSplitMap.get(paymentMethodTypeId);
          Iterator pmtppit=paymentMethodDetails.iterator();
          while (pmtppit.hasNext() && amountLeftToRefund.compareTo(ZERO) == 1) {
            Map orderPaymentPrefDetails=(Map)pmtppit.next();
            GenericValue orderPaymentPreference=(GenericValue)orderPaymentPrefDetails.get("orderPaymentPreference");
            BigDecimal orderPaymentPreferenceAvailable=(BigDecimal)orderPaymentPrefDetails.get("availableTotal");
            BigDecimal amountToRefund=orderPaymentPreferenceAvailable.min(amountLeftToRefund);
            String paymentId=null;
            String returnItemStatusId="RETURN_COMPLETED";
            if (electronicTypes.contains(paymentMethodTypeId)) {
              try {
                serviceResult=dispatcher.runSync("refundPayment",UtilMisc.<String,Object>toMap("orderPaymentPreference",orderPaymentPreference,"refundAmount",amountToRefund.setScale(decimals,rounding),"userLogin",userLogin));
                if (ServiceUtil.isError(serviceResult) || ServiceUtil.isFailure(serviceResult)) {
                  Debug.logError("Error in refund payment: " + ServiceUtil.getErrorMessage(serviceResult),module);
                  continue;
                }
                paymentId=(String)serviceResult.get("paymentId");
              }
 catch (              GenericServiceException e) {
                Debug.logError(e,"Problem running the refundPayment service",module);
                return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsWithTheRefundSeeLogs",locale));
              }
            }
 else             if (paymentMethodTypeId.equals("EXT_BILLACT")) {
              try {
                serviceResult=dispatcher.runSync("refundBillingAccountPayment",UtilMisc.<String,Object>toMap("orderPaymentPreference",orderPaymentPreference,"refundAmount",amountToRefund.setScale(decimals,rounding),"userLogin",userLogin));
                if (ServiceUtil.isError(serviceResult) || ServiceUtil.isFailure(serviceResult)) {
                  Debug.logError("Error in refund payment: " + ServiceUtil.getErrorMessage(serviceResult),module);
                  continue;
                }
                paymentId=(String)serviceResult.get("paymentId");
              }
 catch (              GenericServiceException e) {
                Debug.logError(e,"Problem running the refundPayment service",module);
                return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsWithTheRefundSeeLogs",locale));
              }
            }
 else {
              try {
                Map input=UtilMisc.toMap("userLogin",userLogin,"amount",amountLeftToRefund,"statusId","PMNT_NOT_PAID");
                input.put("partyIdTo",returnHeader.get("fromPartyId"));
                input.put("partyIdFrom",returnHeader.get("toPartyId"));
                input.put("paymentTypeId","CUSTOMER_REFUND");
                input.put("paymentMethodId",orderPaymentPreference.get("paymentMethodId"));
                input.put("paymentMethodTypeId",orderPaymentPreference.get("paymentMethodTypeId"));
                input.put("paymentPreferenceId",orderPaymentPreference.get("orderPaymentPreferenceId"));
                serviceResult=dispatcher.runSync("createPayment",input);
                if (ServiceUtil.isError(serviceResult) || ServiceUtil.isFailure(serviceResult)) {
                  Debug.logError("Error in refund payment: " + ServiceUtil.getErrorMessage(serviceResult),module);
                  continue;
                }
                paymentId=(String)serviceResult.get("paymentId");
                returnItemStatusId="RETURN_MAN_REFUND";
              }
 catch (              GenericServiceException e) {
                return ServiceUtil.returnError(e.getMessage());
              }
            }
            Map response=FastMap.newInstance();
            response.put("orderPaymentPreferenceId",orderPaymentPreference.getString("orderPaymentPreferenceId"));
            response.put("responseAmount",amountToRefund.setScale(decimals,rounding));
            response.put("responseDate",now);
            response.put("userLogin",userLogin);
            response.put("paymentId",paymentId);
            if (paymentMethodTypeId.equals("EXT_BILLACT")) {
              response.put("billingAccountId",orderReadHelper.getBillingAccount().getString("billingAccountId"));
            }
            Map serviceResults=null;
            try {
              serviceResults=dispatcher.runSync("createReturnItemResponse",response);
              if (ServiceUtil.isError(serviceResults)) {
                return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingReturnItemResponseEntity",locale),null,null,serviceResults);
              }
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,"Problems creating new ReturnItemResponse entity",module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingReturnItemResponseEntity",locale));
            }
            String responseId=(String)serviceResults.get("returnItemResponseId");
            Iterator itemsIter=items.iterator();
            while (itemsIter.hasNext()) {
              GenericValue item=(GenericValue)itemsIter.next();
              Map returnItemMap=UtilMisc.toMap("returnItemResponseId",responseId,"returnId",item.get("returnId"),"returnItemSeqId",item.get("returnItemSeqId"),"statusId",returnItemStatusId,"userLogin",userLogin);
              try {
                serviceResults=dispatcher.runSync("updateReturnItem",returnItemMap);
                if (ServiceUtil.isError(serviceResults)) {
                  return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemUpdatingReturnItemReturnItemResponseId",locale),null,null,serviceResults);
                }
              }
 catch (              GenericServiceException e) {
                Debug.logError("Problem updating the ReturnItem entity",module);
                return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemUpdatingReturnItemReturnItemResponseId",locale));
              }
            }
            try {
              serviceResults=dispatcher.runSync("createPaymentApplicationsFromReturnItemResponse",UtilMisc.<String,Object>toMap("returnItemResponseId",responseId,"userLogin",userLogin));
              if (ServiceUtil.isError(serviceResults)) {
                return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemUpdatingReturnItemReturnItemResponseId",locale),null,null,serviceResults);
              }
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,"Problem creating PaymentApplication records for return invoice",module);
              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemUpdatingReturnItemReturnItemResponseId",locale));
            }
            amountLeftToRefund=amountLeftToRefund.subtract(amountToRefund);
          }
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
