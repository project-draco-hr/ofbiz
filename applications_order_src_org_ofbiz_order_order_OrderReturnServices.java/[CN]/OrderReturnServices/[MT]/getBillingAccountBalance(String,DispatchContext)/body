{
  Delegator delegator=dctx.getDelegator();
  GenericValue billingAccount=delegator.findByPrimaryKey("BillingAccount",UtilMisc.toMap("billingAccountId",billingAccountId));
  BigDecimal balance=ZERO;
  BigDecimal accountLimit=ZERO;
  if (billingAccount.getBigDecimal("accountLimit") != null) {
    accountLimit=billingAccount.getBigDecimal("accountLimit");
  }
  balance=balance.add(accountLimit);
  EntityConditionList whereConditions=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("billingAccountId",EntityOperator.EQUALS,billingAccountId),EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"EXT_BILLACT"),EntityCondition.makeCondition("statusId",EntityOperator.NOT_IN,UtilMisc.toList("ORDER_CANCELLED","ORDER_REJECTED")),EntityCondition.makeCondition("preferenceStatusId",EntityOperator.NOT_IN,UtilMisc.toList("PAYMENT_SETTLED","PAYMENT_RECEIVED","PAYMENT_DECLINED","PAYMENT_CANCELLED"))),EntityOperator.AND);
  List orderPaymentPreferenceSums=delegator.findList("OrderPurchasePaymentSummary",whereConditions,UtilMisc.toSet("maxAmount"),null,null,false);
  for (Iterator oppsi=orderPaymentPreferenceSums.iterator(); oppsi.hasNext(); ) {
    GenericValue orderPaymentPreferenceSum=(GenericValue)oppsi.next();
    BigDecimal maxAmount=orderPaymentPreferenceSum.getBigDecimal("maxAmount");
    balance=maxAmount != null ? balance.subtract(maxAmount) : balance;
  }
  List paymentAppls=delegator.findByAnd("PaymentApplication",UtilMisc.toMap("billingAccountId",billingAccountId));
  for (Iterator pAi=paymentAppls.iterator(); pAi.hasNext(); ) {
    GenericValue paymentAppl=(GenericValue)pAi.next();
    if (paymentAppl.getString("invoiceId") == null) {
      BigDecimal amountApplied=paymentAppl.getBigDecimal("amountApplied");
      balance=balance.add(amountApplied);
    }
  }
  balance=balance.setScale(decimals,rounding);
  return balance;
}
