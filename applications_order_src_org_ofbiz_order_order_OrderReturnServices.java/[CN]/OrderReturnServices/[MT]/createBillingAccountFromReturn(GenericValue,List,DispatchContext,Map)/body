{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  try {
    List orders=EntityUtil.getRelated("OrderHeader",returnItems);
    List productStores=EntityUtil.getRelated("ProductStore",orders);
    Long storeCreditValidDays=null;
    for (Iterator iter=productStores.iterator(); iter.hasNext(); ) {
      GenericValue productStore=(GenericValue)iter.next();
      Long thisStoreValidDays=productStore.getLong("storeCreditValidDays");
      if (thisStoreValidDays == null)       continue;
      if (storeCreditValidDays == null) {
        storeCreditValidDays=thisStoreValidDays;
      }
 else       if (thisStoreValidDays.compareTo(storeCreditValidDays) < 0) {
        storeCreditValidDays=thisStoreValidDays;
      }
    }
    Timestamp thruDate=null;
    if (storeCreditValidDays != null)     thruDate=UtilDateTime.getDayEnd(UtilDateTime.nowTimestamp(),storeCreditValidDays.intValue());
    Map input=UtilMisc.toMap("accountLimit",new Double(0.00),"description","Credit Account for Return #" + returnHeader.get("returnId"),"userLogin",userLogin);
    input.put("accountCurrencyUomId",returnHeader.get("currencyUomId"));
    input.put("thruDate",thruDate);
    Map results=dispatcher.runSync("createBillingAccount",input);
    if (ServiceUtil.isError(results))     return results;
    String billingAccountId=(String)results.get("billingAccountId");
    input=UtilMisc.toMap("billingAccountId",billingAccountId,"partyId",returnHeader.get("fromPartyId"),"roleTypeId","BILL_TO_CUSTOMER","userLogin",userLogin);
    Map roleResults=dispatcher.runSync("createBillingAccountRole",input);
    if (ServiceUtil.isError(roleResults)) {
      Debug.logError("Error with createBillingAccountRole: " + roleResults.get(ModelService.ERROR_MESSAGE),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorWithCreateBillingAccountRole",locale) + roleResults.get(ModelService.ERROR_MESSAGE));
    }
    return results;
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Entity error when creating BillingAccount: " + e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingBillingAccount",locale));
  }
catch (  GenericServiceException e) {
    Debug.logError(e,"Service error when creating BillingAccount: " + e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingBillingAccount",locale));
  }
}
