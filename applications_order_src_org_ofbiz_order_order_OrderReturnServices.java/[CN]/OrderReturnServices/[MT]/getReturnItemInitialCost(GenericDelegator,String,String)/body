{
  if (delegator == null || returnId == null || returnItemSeqId == null) {
    throw new IllegalArgumentException("Method parameters cannot contain nulls");
  }
  Debug.log("Finding the initial item cost for return item : " + returnId + " / "+ returnItemSeqId,module);
  Double itemCost=new Double(0.00);
  GenericValue returnItem=null;
  try {
    returnItem=delegator.findByPrimaryKey("ReturnItem",UtilMisc.toMap("returnId",returnId,"returnItemSeqId",returnItemSeqId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    throw new GeneralRuntimeException(e.getMessage());
  }
  Debug.log("Return item value object - " + returnItem,module);
  if (returnItem != null) {
    String orderId=returnItem.getString("orderId");
    String orderItemSeqId=returnItem.getString("orderItemSeqId");
    if (orderItemSeqId != null && orderId != null) {
      Debug.log("Found order item reference",module);
      List itemIssue=null;
      try {
        itemIssue=delegator.findByAnd("ItemIssuance",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        throw new GeneralRuntimeException(e.getMessage());
      }
      if (UtilValidate.isNotEmpty(itemIssue)) {
        Debug.log("Found item issuance reference",module);
        GenericValue issue=EntityUtil.getFirst(itemIssue);
        GenericValue inventoryItem=null;
        try {
          inventoryItem=issue.getRelatedOne("InventoryItem");
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          throw new GeneralRuntimeException(e.getMessage());
        }
        if (inventoryItem != null) {
          Debug.log("Located inventory item - " + inventoryItem.getString("inventoryItemId"),module);
          if (inventoryItem.get("unitCost") != null) {
            itemCost=inventoryItem.getDouble("unitCost");
          }
 else {
            Debug.logInfo("Found item cost; but cost was null. Returning default amount (0.00)",module);
          }
        }
      }
    }
  }
  Debug.log("Initial item cost - " + itemCost,module);
  return itemCost;
}
