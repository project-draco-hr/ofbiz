{
  GenericDelegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  Locale locale=(Locale)context.get("locale");
  List returnItems=null;
  Map returnAmountByOrder=new HashMap();
  try {
    returnItems=delegator.findByAnd("ReturnItem",UtilMisc.toMap("returnId",returnId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up return information",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorGettingReturnHeaderItemInformation",locale));
  }
  if ((returnItems != null) && (returnItems.size() > 0)) {
    Iterator returnItemIterator=returnItems.iterator();
    GenericValue returnItem=null;
    GenericValue returnItemResponse=null;
    GenericValue payment=null;
    String orderId;
    List paymentList=new ArrayList();
    while (returnItemIterator.hasNext()) {
      returnItem=(GenericValue)returnItemIterator.next();
      orderId=returnItem.getString("orderId");
      try {
        returnItemResponse=returnItem.getRelatedOne("ReturnItemResponse");
        if ((returnItemResponse != null) && (orderId != null)) {
          payment=returnItemResponse.getRelatedOne("Payment");
          if ((payment != null) && (payment.getDouble("amount") != null) && !paymentList.contains(payment.get("paymentId"))) {
            UtilMisc.addToDoubleInMap(returnAmountByOrder,orderId,payment.getDouble("amount"));
            paymentList.add(payment.get("paymentId"));
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problems looking up return item related information",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorGettingReturnHeaderItemInformation",locale));
      }
    }
  }
  return UtilMisc.toMap("orderReturnAmountMap",returnAmountByOrder);
}
