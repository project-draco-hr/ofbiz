{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  List<GenericValue> returnHeaders=null;
  try {
    returnHeaders=EntityQuery.use(delegator).from("ReturnHeader").where("statusId","RETURN_ACCEPTED","returnHeaderTypeId","CUSTOMER_RETURN").orderBy("entryDate").queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting Return headers",module);
  }
  for (  GenericValue returnHeader : returnHeaders) {
    String returnId=returnHeader.getString("returnId");
    Timestamp entryDate=returnHeader.getTimestamp("entryDate");
    String daysTillCancelStr=EntityUtilProperties.getPropertyValue("order","daysTillCancelReplacementOrder","30",delegator);
    int daysTillCancel=0;
    try {
      daysTillCancel=Integer.parseInt(daysTillCancelStr);
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"Unable to get daysTillCancel",module);
    }
    if (daysTillCancel > 0) {
      Calendar cal=Calendar.getInstance();
      cal.setTimeInMillis(entryDate.getTime());
      cal.add(Calendar.DAY_OF_YEAR,daysTillCancel);
      Date cancelDate=cal.getTime();
      Date nowDate=new Date();
      if (cancelDate.equals(nowDate) || nowDate.after(cancelDate)) {
        try {
          List<GenericValue> returnItems=EntityQuery.use(delegator).from("ReturnItem").where("returnId",returnId,"returnTypeId","RTN_WAIT_REPLACE_RES").orderBy("createdStamp").queryList();
          for (          GenericValue returnItem : returnItems) {
            GenericValue returnItemResponse=returnItem.getRelatedOne("ReturnItemResponse",false);
            if (returnItemResponse != null) {
              String replacementOrderId=returnItemResponse.getString("replacementOrderId");
              Map<String,Object> svcCtx=UtilMisc.<String,Object>toMap("orderId",replacementOrderId,"userLogin",userLogin);
              GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",replacementOrderId).queryOne();
              if ("ORDER_HOLD".equals(orderHeader.getString("statusId"))) {
                try {
                  dispatcher.runSync("cancelOrderItem",svcCtx);
                }
 catch (                GenericServiceException e) {
                  Debug.logError(e,"Problem calling service cancelOrderItem: " + svcCtx,module);
                }
              }
            }
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
