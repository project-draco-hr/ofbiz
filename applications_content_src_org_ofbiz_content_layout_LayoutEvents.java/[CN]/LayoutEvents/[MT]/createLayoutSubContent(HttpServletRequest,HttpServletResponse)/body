{
  try {
    LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
    HttpSession session=request.getSession();
    Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
    String contentIdTo=(String)paramMap.get("contentIdTo");
    String mapKey=(String)paramMap.get("mapKey");
    if (Debug.verboseOn()) {
      Debug.logVerbose("in createSubContent, contentIdTo:" + contentIdTo,module);
      Debug.logVerbose("in createSubContent, mapKey:" + mapKey,module);
    }
    Map<String,Object> context=new HashMap<String,Object>();
    List<Object> errorMessages=null;
    Locale loc=(Locale)request.getSession().getServletContext().getAttribute("locale");
    if (loc == null) {
      loc=Locale.getDefault();
    }
    GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
    context.put("userLogin",userLogin);
    String rootDir=request.getSession().getServletContext().getRealPath("/");
    context.put("rootDir",rootDir);
    try {
      SimpleMapProcessor.runSimpleMapProcessor("component://content/minilang/ContentManagementMapProcessors.xml","contentIn",paramMap,context,errorMessages,loc);
      SimpleMapProcessor.runSimpleMapProcessor("component://content/minilang/ContentManagementMapProcessors.xml","dataResourceIn",paramMap,context,errorMessages,loc);
      SimpleMapProcessor.runSimpleMapProcessor("component://content/minilang/ContentManagementMapProcessors.xml","contentAssocIn",paramMap,context,errorMessages,loc);
    }
 catch (    MiniLangException e) {
      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
      return "error";
    }
    context.put("dataResourceName",context.get("contentName"));
    String contentPurposeTypeId=(String)paramMap.get("contentPurposeTypeId");
    if (UtilValidate.isNotEmpty(contentPurposeTypeId)) {
      context.put("contentPurposeList",UtilMisc.toList(contentPurposeTypeId));
    }
    context.put("contentIdTo",paramMap.get("contentIdTo"));
    context.put("mapKey",paramMap.get("mapKey"));
    context.put("textData",paramMap.get("textData"));
    context.put("contentAssocTypeId","SUB_CONTENT");
    if (Debug.verboseOn()) {
      Debug.logVerbose("in createSubContent, context:" + context,module);
    }
    Map<String,Object> result=dispatcher.runSync("persistContentAndAssoc",context);
    boolean isError=ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
    if (isError) {
      request.setAttribute("_ERROR_MESSAGE_",result.get(ModelService.ERROR_MESSAGE));
      return "error";
    }
    if (Debug.verboseOn()) {
      Debug.logVerbose("in createLayoutFile, result:" + result,module);
    }
    String contentId=(String)result.get("contentId");
    String dataResourceId=(String)result.get("dataResourceId");
    request.setAttribute("contentId",contentId);
    request.setAttribute("drDataResourceId",dataResourceId);
    request.setAttribute("currentEntityName","SubContentDataResourceId");
    Map<String,Object> context2=new HashMap<String,Object>();
    context2.put("activeContentId",contentId);
    context2.put("contentAssocTypeId","SUB_CONTENT");
    context2.put("fromDate",result.get("fromDate"));
    context2.put("contentIdTo",contentIdTo);
    context2.put("mapKey",mapKey);
    context2.put("userLogin",userLogin);
    dispatcher.runSync("deactivateAssocs",context2);
  }
 catch (  GenericServiceException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  return "success";
}
