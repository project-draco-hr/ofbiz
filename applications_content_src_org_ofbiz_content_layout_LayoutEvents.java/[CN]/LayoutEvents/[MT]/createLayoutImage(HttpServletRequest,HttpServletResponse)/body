{
  Locale locale=UtilHttp.getLocale(request);
  try {
    Delegator delegator=(Delegator)request.getAttribute("delegator");
    LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
    HttpSession session=request.getSession();
    Map<String,Object> uploadResults=LayoutWorker.uploadImageAndParameters(request,"imageData");
    Map<String,Object> formInput=UtilGenerics.checkMap(uploadResults.get("formInput"));
    Map<String,Object> context=FastMap.newInstance();
    ByteBuffer byteWrap=(ByteBuffer)uploadResults.get("imageData");
    if (byteWrap == null) {
      String errMsg=UtilProperties.getMessage(LayoutEvents.err_resource,"layoutEvents.image_data_null",locale);
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    String imageFileName=(String)uploadResults.get("imageFileName");
    String imageFileNameExt=null;
    if (UtilValidate.isNotEmpty(imageFileName)) {
      int pos=imageFileName.lastIndexOf(".");
      if (pos >= 0) {
        imageFileNameExt=imageFileName.substring(pos + 1);
      }
    }
    String mimeTypeId="image/" + imageFileNameExt;
    List<Object> errorMessages=FastList.newInstance();
    if (locale == null) {
      locale=Locale.getDefault();
    }
    context.put("locale",locale);
    try {
      SimpleMapProcessor.runSimpleMapProcessor("component://content/script/org/ofbiz/content/ContentManagementMapProcessors.xml","contentIn",formInput,context,errorMessages,locale);
      SimpleMapProcessor.runSimpleMapProcessor("component://content/script/org/ofbiz/content/ContentManagementMapProcessors.xml","dataResourceIn",formInput,context,errorMessages,locale);
      SimpleMapProcessor.runSimpleMapProcessor("component://content/script/org/ofbiz/content/ContentManagementMapProcessors.xml","contentAssocIn",formInput,context,errorMessages,locale);
    }
 catch (    MiniLangException e) {
      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
      return "error";
    }
    context.put("dataResourceName",context.get("contentName"));
    context.put("userLogin",session.getAttribute("userLogin"));
    context.put("dataResourceTypeId","IMAGE_OBJECT");
    context.put("contentAssocTypeId","SUB_CONTENT");
    context.put("contentTypeId","DOCUMENT");
    context.put("contentIdTo",formInput.get("contentIdTo"));
    context.put("textData",formInput.get("textData"));
    String contentPurposeTypeId=(String)formInput.get("contentPurposeTypeId");
    if (UtilValidate.isNotEmpty(contentPurposeTypeId)) {
      context.put("contentPurposeList",UtilMisc.toList(contentPurposeTypeId));
    }
    Map<String,Object> result=dispatcher.runSync("persistContentAndAssoc",context);
    String dataResourceId=(String)result.get("dataResourceId");
    String activeContentId=(String)result.get("contentId");
    if (UtilValidate.isNotEmpty(activeContentId)) {
      Map<String,Object> context2=FastMap.newInstance();
      context2.put("activeContentId",activeContentId);
      context2.put("contentAssocTypeId",result.get("contentAssocTypeId"));
      context2.put("fromDate",result.get("fromDate"));
      request.setAttribute("contentId",result.get("contentId"));
      request.setAttribute("drDataResourceId",dataResourceId);
      request.setAttribute("currentEntityName","SubContentDataResourceId");
      context2.put("contentIdTo",formInput.get("contentIdTo"));
      context2.put("mapKey",formInput.get("mapKey"));
      dispatcher.runSync("deactivateAssocs",context2);
    }
    GenericValue dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).queryOne();
    if (dataResource != null) {
      dataResource.set("objectInfo",imageFileName);
      dataResource.set("mimeTypeId",mimeTypeId);
      dataResource.store();
    }
    GenericValue imageDataResource=EntityQuery.use(delegator).from("ImageDataResource").where("dataResourceId",dataResourceId).queryOne();
    if (imageDataResource == null) {
      imageDataResource=delegator.makeValue("ImageDataResource",UtilMisc.toMap("dataResourceId",dataResourceId));
      imageDataResource.set("imageData",byteWrap.array());
      imageDataResource.create();
    }
 else {
      imageDataResource.set("imageData",byteWrap.array());
      imageDataResource.store();
    }
  }
 catch (  GenericEntityException e3) {
    request.setAttribute("_ERROR_MESSAGE_",e3.getMessage());
    return "error";
  }
catch (  GenericServiceException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  return "success";
}
