def adjustColumnWidths(ctx, nodeset):
    try:
        pctxt = libxslt.xpathParserContext(_obj=ctx)
        ctxt = pctxt.context()
        tctxt = ctxt.transformContext()
    except:
        pass
    varString = lookupVariable(tctxt, 'nominal.table.width', None)
    if (varString == None):
        nominalWidth = (6 * pixelsPerInch)
    else:
        nominalWidth = convertLength(varString)
    tableWidth = lookupVariable(tctxt, 'table.width', '100%')
    foStylesheet = (tctxt.variableLookup('stylesheet.result.type', None) == 'fo')
    relTotal = 0
    relParts = []
    absTotal = 0
    absParts = []
    colgroup = libxml2.xmlNode(_obj=nodeset[0])
    if foStylesheet:
        colChildren = colgroup
    else:
        colChildren = colgroup.children
    col = colChildren
    while (col != None):
        if foStylesheet:
            width = col.prop('column-width')
        else:
            width = col.prop('width')
        if (width == None):
            width = '1*'
        relPart = 0.0
        absPart = 0.0
        starPos = string.find(width, '*')
        if (starPos >= 0):
            (relPart, absPart) = string.split(width, '*', 2)
            relPart = float(relPart)
            relTotal = (relTotal + float(relPart))
        else:
            absPart = width
        pixels = convertLength(absPart)
        absTotal = (absTotal + pixels)
        relParts.append(relPart)
        absParts.append(pixels)
        col = col.next
    widths = []
    if (relTotal == 0):
        for absPart in absParts:
            if foStylesheet:
                inches = (absPart / pixelsPerInch)
                widths.append(('%4.2fin' % inches))
            else:
                widths.append(('%d' % absPart))
    elif (absTotal == 0):
        for relPart in relParts:
            rel = ((relPart / relTotal) * 100)
            widths.append(rel)
        widths = correctRoundingError(widths)
    else:
        pixelWidth = nominalWidth
        if (string.find(tableWidth, '%') < 0):
            pixelWidth = convertLength(tableWidth)
        if (pixelWidth <= absTotal):
            print 'Table is wider than table width'
        else:
            pixelWidth = (pixelWidth - absTotal)
        absTotal = 0
        for count in range(len(relParts)):
            rel = ((relParts[count] / relTotal) * pixelWidth)
            relParts[count] = (rel + absParts[count])
            absTotal = ((absTotal + rel) + absParts[count])
        if (string.find(tableWidth, '%') < 0):
            for count in range(len(relParts)):
                if foStylesheet:
                    pixels = relParts[count]
                    inches = (pixels / pixelsPerInch)
                    widths.append(('%4.2fin' % inches))
                else:
                    widths.append(relParts[count])
        else:
            for count in range(len(relParts)):
                rel = ((relParts[count] / absTotal) * 100)
                widths.append(rel)
            widths = correctRoundingError(widths)
    count = 0
    col = colChildren
    while (col != None):
        if foStylesheet:
            col.setProp('column-width', widths[count])
        else:
            col.setProp('width', widths[count])
        count = (count + 1)
        col = col.next
    return nodeset
