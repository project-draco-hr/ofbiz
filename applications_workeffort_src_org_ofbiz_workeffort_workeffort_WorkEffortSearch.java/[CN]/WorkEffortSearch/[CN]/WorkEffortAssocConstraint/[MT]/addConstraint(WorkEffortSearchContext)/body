{
  Set workEffortIdSet=FastSet.newInstance();
  if (includeSubWorkEfforts) {
    WorkEffortSearch.getAllSubWorkEffortIds(workEffortId,workEffortIdSet,workEffortSearchContext.getDelegator(),workEffortSearchContext.nowTimestamp);
  }
 else {
    workEffortIdSet.add(workEffortId);
  }
  String entityAlias;
  String prefix;
  entityAlias="WFA" + workEffortSearchContext.index;
  prefix="wfa" + workEffortSearchContext.index;
  workEffortSearchContext.index++;
  workEffortSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"WorkEffortAssoc");
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "WorkEffortIdFrom","workEffortIdFrom",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "WorkEffortIdTo","workEffortIdTo",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "WorkEffortAssocTypeId","workEffortAssocTypeId",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addViewLink("WEFF",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("workEffortIdFrom"));
  workEffortSearchContext.entityConditionList.add(new EntityExpr(prefix + "WorkEffortIdTo",EntityOperator.IN,workEffortIdSet));
  if (UtilValidate.isNotEmpty(workEffortAssocTypeId)) {
    workEffortSearchContext.entityConditionList.add(new EntityExpr(prefix + "WorkEffortAssocTypeId",EntityOperator.EQUALS,workEffortAssocTypeId));
  }
  workEffortSearchContext.entityConditionList.add(new EntityExpr(new EntityExpr(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(prefix + "ThruDate",EntityOperator.GREATER_THAN,workEffortSearchContext.nowTimestamp)));
  workEffortSearchContext.entityConditionList.add(new EntityExpr(prefix + "FromDate",EntityOperator.LESS_THAN,workEffortSearchContext.nowTimestamp));
  entityAlias="WFA" + workEffortSearchContext.index;
  prefix="wfa" + workEffortSearchContext.index;
  workEffortSearchContext.index++;
  workEffortSearchContext.dynamicViewEntity.addMemberEntity(entityAlias,"WorkEffortAssoc");
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "WorkEffortIdFrom","workEffortIdFrom",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "WorkEffortIdTo","workEffortIdTo",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "WorkEffortAssocTypeId","workEffortAssocTypeId",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "FromDate","fromDate",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addAlias(entityAlias,prefix + "ThruDate","thruDate",null,null,null,null);
  workEffortSearchContext.dynamicViewEntity.addViewLink("WEFF",entityAlias,Boolean.FALSE,ModelKeyMap.makeKeyMapList("workEffortIdTo"));
  workEffortSearchContext.entityConditionList.add(new EntityExpr(prefix + "WorkEffortIdFrom",EntityOperator.IN,workEffortIdSet));
  if (UtilValidate.isNotEmpty(workEffortAssocTypeId)) {
    workEffortSearchContext.entityConditionList.add(new EntityExpr(prefix + "WorkEffortAssocTypeId",EntityOperator.EQUALS,workEffortAssocTypeId));
  }
  workEffortSearchContext.entityConditionList.add(new EntityExpr(new EntityExpr(prefix + "ThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr(prefix + "ThruDate",EntityOperator.GREATER_THAN,workEffortSearchContext.nowTimestamp)));
  workEffortSearchContext.entityConditionList.add(new EntityExpr(prefix + "FromDate",EntityOperator.LESS_THAN,workEffortSearchContext.nowTimestamp));
  workEffortSearchContext.workEffortSearchConstraintList.add(workEffortSearchContext.getDelegator().makeValue("WorkEffortSearchConstraint",UtilMisc.toMap("constraintName",constraintName,"infoString",this.workEffortId + "," + this.workEffortAssocTypeId,"includeSubWorkEfforts",this.includeSubWorkEfforts ? "Y" : "N")));
}
