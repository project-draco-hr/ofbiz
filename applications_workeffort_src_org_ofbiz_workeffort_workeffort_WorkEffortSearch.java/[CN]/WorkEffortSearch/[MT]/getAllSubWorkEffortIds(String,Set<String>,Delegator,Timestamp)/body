{
  if (nowTimestamp == null) {
    nowTimestamp=UtilDateTime.nowTimestamp();
  }
  workEffortIdSet.add(workEffortId);
  try {
    List<GenericValue> workEffortAssocList=delegator.findByAnd("WorkEffortAssoc",UtilMisc.toMap("workEffortIdFrom",workEffortId,"workEffortAssocTypeId","WORK_EFF_BREAKDOWN"),null,true);
    for (    GenericValue workEffortAssoc : workEffortAssocList) {
      String subWorkEffortId=workEffortAssoc.getString("workEffortIdTo");
      if (workEffortIdSet.contains(subWorkEffortId)) {
        continue;
      }
      if (EntityUtil.isValueActive(workEffortAssoc,nowTimestamp)) {
        getAllSubWorkEffortIds(subWorkEffortId,workEffortIdSet,delegator,nowTimestamp);
      }
    }
    List<GenericValue> childWorkEffortList=delegator.findList("WorkEffort",EntityCondition.makeCondition("workEffortParentId",EntityComparisonOperator.EQUALS,workEffortId),UtilMisc.toSet("workEffortId","workEffortParentId"),null,null,true);
    for (    GenericValue childWorkEffort : childWorkEffortList) {
      String subWorkEffortId=childWorkEffort.getString("workEffortId");
      if (workEffortIdSet.contains(subWorkEffortId)) {
        continue;
      }
      getAllSubWorkEffortIds(subWorkEffortId,workEffortIdSet,delegator,nowTimestamp);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error finding sub-categories for workEffort search",module);
  }
}
