{
  File test=new File(CAPTCHA_FILE_PATH);
  if (!test.exists()) {
    test.mkdir();
  }
  StringBuilder finalString=new StringBuilder();
  String elegibleChars="ABCDEFGHJKLMPQRSTUVWXYabcdefhjkmnpqrstuvwxy23456789";
  int charsToPrint=6;
  char[] chars=elegibleChars.toCharArray();
  for (int i=0; i < charsToPrint; i++) {
    double randomValue=Math.random();
    int randomIndex=(int)Math.round(randomValue * (chars.length - 1));
    char characterToShow=chars[randomIndex];
    finalString.append(characterToShow);
  }
  String idKey=finalString.toString();
  try {
    Color backgroundColor=Color.gray;
    Color borderColor=Color.DARK_GRAY;
    Color textColor=Color.ORANGE;
    Color circleColor=new Color(160,160,160);
    Font textFont=new Font("Arial",Font.PLAIN,paramInt(request,"fontSize",22));
    int width=paramInt(request,"width",149);
    int height=paramInt(request,"height",40);
    int circlesToDraw=6;
    float horizMargin=20.0f;
    double rotationRange=0.7;
    BufferedImage bufferedImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
    Graphics2D g=(Graphics2D)bufferedImage.getGraphics();
    g.setColor(backgroundColor);
    g.fillRect(0,0,width,height);
    g.setColor(circleColor);
    for (int i=0; i < circlesToDraw; i++) {
      int circleRadius=(int)(Math.random() * height / 2.0);
      int circleX=(int)(Math.random() * width - circleRadius);
      int circleY=(int)(Math.random() * height - circleRadius);
      g.drawOval(circleX,circleY,circleRadius * 2,circleRadius * 2);
    }
    g.setColor(textColor);
    g.setFont(textFont);
    FontMetrics fontMetrics=g.getFontMetrics();
    int maxAdvance=fontMetrics.getMaxAdvance();
    int fontHeight=fontMetrics.getHeight();
    String characterToShow=idKey;
    float spaceForLetters=-horizMargin * 2 + width;
    float spacePerChar=spaceForLetters / (charsToPrint - 1.0f);
    for (int i=0; i < characterToShow.length(); i++) {
      int charWidth=fontMetrics.charWidth(characterToShow.charAt(i));
      int charDim=Math.max(maxAdvance,fontHeight);
      int halfCharDim=(charDim / 2);
      BufferedImage charImage=new BufferedImage(charDim,charDim,BufferedImage.TYPE_INT_ARGB);
      Graphics2D charGraphics=charImage.createGraphics();
      charGraphics.translate(halfCharDim,halfCharDim);
      double angle=(Math.random() - 0.5) * rotationRange;
      charGraphics.transform(AffineTransform.getRotateInstance(angle));
      charGraphics.translate(-halfCharDim,-halfCharDim);
      charGraphics.setColor(textColor);
      charGraphics.setFont(textFont);
      int charX=(int)(0.5 * charDim - 0.5 * charWidth);
      charGraphics.drawString("" + characterToShow.charAt(i),charX,((charDim - fontMetrics.getAscent()) / 2 + fontMetrics.getAscent()));
      float x=horizMargin + spacePerChar * (i) - charDim / 2.0f;
      int y=((height - charDim) / 2);
      g.drawImage(charImage,(int)x,y,charDim,charDim,null,null);
      charGraphics.dispose();
    }
    g.setColor(borderColor);
    g.drawRect(0,0,width - 1,height - 1);
    g.dispose();
    String captchaFileName=UtilDateTime.nowAsString().concat(".jpg");
    request.setAttribute("captchaFileName","/tempfiles/captcha/" + captchaFileName);
    request.setAttribute("ID_KEY",idKey);
    ImageIO.write(bufferedImage,"jpg",new File(CAPTCHA_FILE_PATH + captchaFileName));
  }
 catch (  Exception ioe) {
    return "error";
  }
  return "success";
}
