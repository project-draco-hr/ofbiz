{
  Delegator delegator=dctx.getDelegator();
  if ("Y".equals(EntityUtilProperties.getPropertyValue("catalog","reactivate.product.from.receipt","N",delegator))) {
    LocalDispatcher dispatcher=dctx.getDispatcher();
    GenericValue userLogin=(GenericValue)context.get("userLogin");
    String inventoryItemId=(String)context.get("inventoryItemId");
    GenericValue inventoryItem=null;
    try {
      inventoryItem=EntityQuery.use(delegator).from("InventoryItem").where("inventoryItemId",inventoryItemId).cache().queryOne();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (inventoryItem != null) {
      String productId=inventoryItem.getString("productId");
      GenericValue product=null;
      try {
        product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      if (product != null) {
        Timestamp salesDiscontinuationDate=product.getTimestamp("salesDiscontinuationDate");
        if (salesDiscontinuationDate != null && salesDiscontinuationDate.before(UtilDateTime.nowTimestamp())) {
          Map<String,Object> invRes=null;
          try {
            invRes=dispatcher.runSync("getProductInventoryAvailable",UtilMisc.<String,Object>toMap("productId",productId,"userLogin",userLogin));
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
          BigDecimal availableToPromiseTotal=(BigDecimal)invRes.get("availableToPromiseTotal");
          if (availableToPromiseTotal != null && availableToPromiseTotal.compareTo(BigDecimal.ZERO) > 0) {
            GenericValue productToUpdate=null;
            try {
              productToUpdate=EntityQuery.use(delegator).from("Product").where(product.getPrimaryKey()).queryOne();
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              return ServiceUtil.returnError(e.getMessage());
            }
            productToUpdate.set("salesDiscontinuationDate",null);
            try {
              delegator.store(productToUpdate);
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              return ServiceUtil.returnError(e.getMessage());
            }
          }
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
