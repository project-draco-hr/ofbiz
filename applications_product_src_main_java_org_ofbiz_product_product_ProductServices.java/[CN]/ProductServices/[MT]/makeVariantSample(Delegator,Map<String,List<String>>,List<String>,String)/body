{
  Map<String,GenericValue> tempSample=new HashMap<String,GenericValue>();
  Map<String,GenericValue> sample=new LinkedHashMap<String,GenericValue>();
  for (  String productId : items) {
    List<GenericValue> features=null;
    try {
      features=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureTypeId",feature,"productFeatureApplTypeId","STANDARD_FEATURE").orderBy("sequenceNum","description").cache(true).filterByDate().queryList();
    }
 catch (    GenericEntityException e) {
      throw new IllegalStateException("Problem reading relation: " + e.getMessage());
    }
    for (    GenericValue featureAppl : features) {
      try {
        GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache(true).queryOne();
        tempSample.put(featureAppl.getString("description"),product);
      }
 catch (      GenericEntityException e) {
        throw new RuntimeException("Cannot get product entity: " + e.getMessage());
      }
    }
  }
  List<String> features=featureList.get(feature);
  for (  String f : features) {
    if (tempSample.containsKey(f))     sample.put(f,tempSample.get(f));
  }
  return sample;
}
