{
  Delegator delegator=dctx.getDelegator();
  Map<String,Object> result=new HashMap<String,Object>();
  String productId=(String)context.get("productId");
  String distinct=(String)context.get("distinct");
  String type=(String)context.get("type");
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  List<GenericValue> features=null;
  try {
    Map<String,String> fields=UtilMisc.toMap("productId",productId);
    if (distinct != null)     fields.put("productFeatureTypeId",distinct);
    if (type != null)     fields.put("productFeatureApplTypeId",type);
    features=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where(fields).orderBy("sequenceNum","productFeatureTypeId").cache(true).queryList();
    result.put("productFeatures",features);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  }
 catch (  GenericEntityException e) {
    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());
    errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_feature_entity",messageMap,locale);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,errMsg);
  }
  return result;
}
