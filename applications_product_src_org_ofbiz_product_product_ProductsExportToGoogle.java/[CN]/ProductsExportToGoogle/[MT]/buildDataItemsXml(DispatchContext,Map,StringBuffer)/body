{
  Locale locale=(Locale)context.get("locale");
  List newProductsInGoogle=FastList.newInstance();
  List productsRemovedFromGoogle=FastList.newInstance();
  try {
    GenericDelegator delegator=dctx.getDelegator();
    LocalDispatcher dispatcher=dctx.getDispatcher();
    List selectResult=(List)context.get("selectResult");
    String webSiteUrl=(String)context.get("webSiteUrl");
    String imageUrl=(String)context.get("imageUrl");
    String actionType=(String)context.get("actionType");
    String statusId=(String)context.get("statusId");
    String trackingCodeId=(String)context.get("trackingCodeId");
    if (!webSiteUrl.startsWith("http://") && !webSiteUrl.startsWith("https://")) {
      webSiteUrl="http://" + webSiteUrl;
    }
    if (webSiteUrl.endsWith("/")) {
      webSiteUrl=webSiteUrl.substring(0,webSiteUrl.length() - 1);
    }
    List productsList=delegator.findByCondition("Product",new EntityExpr("productId",EntityOperator.IN,selectResult),null,null);
    if (UtilValidate.isEmpty(trackingCodeId) || "_NA_".equals(trackingCodeId)) {
      trackingCodeId="";
    }
 else {
      trackingCodeId="?atc=" + trackingCodeId;
    }
    try {
      Document feedDocument=UtilXml.makeEmptyXmlDocument("feed");
      Element feedElem=feedDocument.getDocumentElement();
      feedElem.setAttribute("xmlns","http://www.w3.org/2005/Atom");
      feedElem.setAttribute("xmlns:openSearch","http://a9.com/-/spec/opensearchrss/1.0/");
      feedElem.setAttribute("xmlns:g","http://base.google.com/ns/1.0");
      feedElem.setAttribute("xmlns:batch","http://schemas.google.com/gdata/batch");
      feedElem.setAttribute("xmlns:app","http://purl.org/atom/app#");
      Iterator productsListItr=productsList.iterator();
      int index=0;
      String itemActionType=null;
      while (productsListItr.hasNext()) {
        itemActionType=actionType;
        GenericValue prod=(GenericValue)productsListItr.next();
        String price=getProductPrice(dispatcher,prod);
        if (price == null) {
          Debug.logInfo("Price not found for product [" + prod.getString("productId") + "]; product will not be exported.",module);
          continue;
        }
        String link=webSiteUrl + "/ecommerce/control/product/~product_id=" + prod.getString("productId")+ trackingCodeId;
        String title=UtilFormatOut.encodeXmlValue(prod.getString("productName"));
        String description=UtilFormatOut.encodeXmlValue(prod.getString("description"));
        String imageLink="";
        if (UtilValidate.isNotEmpty(prod.getString("largeImageUrl"))) {
          imageLink=webSiteUrl + prod.getString("largeImageUrl");
        }
 else         if (UtilValidate.isNotEmpty(prod.getString("mediumImageUrl"))) {
          imageLink=webSiteUrl + prod.getString("mediumImageUrl");
        }
 else         if (UtilValidate.isNotEmpty(prod.getString("smallImageUrl"))) {
          imageLink=webSiteUrl + prod.getString("smallImageUrl");
        }
        String googleProductId=null;
        if (!"insert".equals(actionType)) {
          try {
            GenericValue googleProduct=delegator.findByPrimaryKey("GoodIdentification",UtilMisc.toMap("productId",prod.getString("productId"),"goodIdentificationTypeId","GOOGLE_ID"));
            if (UtilValidate.isNotEmpty(googleProduct)) {
              googleProductId=googleProduct.getString("idValue");
            }
          }
 catch (          GenericEntityException gee) {
            Debug.logError("Unable to get the Google id for product [" + prod.getString("productId") + "]: "+ gee.getMessage(),module);
          }
        }
        if ("update".equals(actionType) && UtilValidate.isEmpty(googleProductId)) {
          itemActionType="insert";
        }
        Element entryElem=UtilXml.addChildElement(feedElem,"entry",feedDocument);
        Element batchElem=UtilXml.addChildElement(entryElem,"batch:operation",feedDocument);
        batchElem.setAttribute("type",itemActionType);
        if (statusId != null && ("draft".equals(statusId) || "deactivate".equals(statusId))) {
          Element appControlElem=UtilXml.addChildElement(entryElem,"app:control",feedDocument);
          UtilXml.addChildElementValue(appControlElem,"app:draft","yes",feedDocument);
          if ("deactivate".equals(statusId)) {
            UtilXml.addChildElement(appControlElem,"gm:disapproved",feedDocument);
          }
        }
        UtilXml.addChildElementValue(entryElem,"title",title,feedDocument);
        Element contentElem=UtilXml.addChildElementValue(entryElem,"content",description,feedDocument);
        contentElem.setAttribute("type","xhtml");
        if (UtilValidate.isNotEmpty(googleProductId)) {
          UtilXml.addChildElementValue(entryElem,"id",googleProductId,feedDocument);
        }
 else {
          UtilXml.addChildElementValue(entryElem,"id",link,feedDocument);
        }
        Element linkElem=UtilXml.addChildElement(entryElem,"link",feedDocument);
        linkElem.setAttribute("rel","alternate");
        linkElem.setAttribute("type","text/html");
        linkElem.setAttribute("href",link);
        UtilXml.addChildElementValue(entryElem,"g:item_type","products",feedDocument);
        UtilXml.addChildElementValue(entryElem,"g:price",price,feedDocument);
        if (UtilValidate.isNotEmpty(imageLink)) {
          UtilXml.addChildElementValue(entryElem,"g:image_link",imageLink,feedDocument);
        }
        if ("insert".equals(itemActionType)) {
          newProductsInGoogle.add(prod.getString("productId"));
          productsRemovedFromGoogle.add(null);
        }
 else         if ("delete".equals(itemActionType)) {
          newProductsInGoogle.add(null);
          productsRemovedFromGoogle.add(prod.getString("productId"));
        }
 else {
          newProductsInGoogle.add(null);
          productsRemovedFromGoogle.add(null);
        }
        index++;
      }
      dataItemsXml.append(UtilXml.writeXmlDocument(feedDocument));
    }
 catch (    Exception e) {
      Debug.logError("Exception during building data items to Google",module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToGoogle.exceptionDuringBuildingDataItemsToGoogle",locale));
    }
  }
 catch (  Exception e) {
    Debug.logError("Exception during building data items to Google",module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToGoogle.exceptionDuringBuildingDataItemsToGoogle",locale));
  }
  Map result=ServiceUtil.returnSuccess();
  result.put("newProductsInGoogle",newProductsInGoogle);
  result.put("productsRemovedFromGoogle",productsRemovedFromGoogle);
  return result;
}
