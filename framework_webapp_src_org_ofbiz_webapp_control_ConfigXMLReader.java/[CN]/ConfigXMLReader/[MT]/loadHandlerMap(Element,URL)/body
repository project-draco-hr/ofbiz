{
  long startTime=System.currentTimeMillis();
  FastMap map=FastMap.newInstance();
  if (root == null) {
    root=loadDocument(xml);
  }
  if (root == null) {
    return map;
  }
  List includeElementList=UtilXml.childElementList(root,INCLUDE);
  Iterator includeElementIter=includeElementList.iterator();
  while (includeElementIter.hasNext()) {
    Element includeElement=(Element)includeElementIter.next();
    String includeLocation=includeElement.getAttribute(INCLUDE_LOCATION);
    if ((includeLocation != null) && (includeLocation.length() > 0)) {
      try {
        Map subMap=loadHandlerMap(null,FlexibleLocation.resolveLocation(includeLocation));
        Map newViewHandlerMap=(Map)subMap.get("view");
        Map viewHandlerMap=(Map)map.get("view");
        if (viewHandlerMap == null) {
          map.put("view",newViewHandlerMap);
        }
 else {
          if (newViewHandlerMap != null) {
            viewHandlerMap.putAll(newViewHandlerMap);
          }
        }
        Map newEventHandlerMap=(Map)subMap.get("event");
        Map eventHandlerMap=(Map)map.get("event");
        if (eventHandlerMap == null) {
          map.put("event",newEventHandlerMap);
        }
 else {
          if (newEventHandlerMap != null) {
            eventHandlerMap.putAll(newEventHandlerMap);
          }
        }
      }
 catch (      MalformedURLException mue) {
        Debug.logError(mue,"Error processing include at [" + includeLocation + "]:"+ mue.toString(),module);
      }
    }
  }
  Map eventMap=FastMap.newInstance();
  Map viewMap=FastMap.newInstance();
  List handlerElementList=UtilXml.childElementList(root,HANDLER);
  Iterator handlerElementIter=handlerElementList.iterator();
  while (handlerElementIter.hasNext()) {
    Element handlerElement=(Element)handlerElementIter.next();
    String hName=checkEmpty(handlerElement.getAttribute(HANDLER_NAME));
    String hClass=checkEmpty(handlerElement.getAttribute(HANDLER_CLASS));
    String hType=checkEmpty(handlerElement.getAttribute(HANDLER_TYPE));
    if (hType.equals("view")) {
      viewMap.put(hName,hClass);
    }
 else {
      eventMap.put(hName,hClass);
    }
  }
  Map viewHandlerMap=(Map)map.get("view");
  if (viewHandlerMap == null) {
    map.put("view",viewMap);
  }
 else {
    if (viewMap != null) {
      viewHandlerMap.putAll(viewMap);
    }
  }
  Map eventHandlerMap=(Map)map.get("event");
  if (eventHandlerMap == null) {
    map.put("event",eventMap);
  }
 else {
    if (eventMap != null) {
      eventHandlerMap.putAll(eventMap);
    }
  }
  if (Debug.verboseOn()) {
    Debug.logVerbose("-------- Handler Mappings --------",module);
    Map debugMap=(Map)map.get("event");
    if (debugMap != null && debugMap.size() > 0) {
      Debug.logVerbose("-------------- EVENT -------------",module);
      Set debugSet=debugMap.keySet();
      Iterator i=debugSet.iterator();
      while (i.hasNext()) {
        Object o=i.next();
        String handlerName=(String)o;
        String className=(String)debugMap.get(o);
        Debug.logVerbose("[EH] : " + handlerName + " => "+ className,module);
      }
    }
    debugMap=(Map)map.get("view");
    if (debugMap != null && debugMap.size() > 0) {
      Debug.logVerbose("-------------- VIEW --------------",module);
      Set debugSet=debugMap.keySet();
      Iterator i=debugSet.iterator();
      while (i.hasNext()) {
        Object o=i.next();
        String handlerName=(String)o;
        String className=(String)debugMap.get(o);
        Debug.logVerbose("[VH] : " + handlerName + " => "+ className,module);
      }
    }
    Debug.logVerbose("------ End Handler Mappings ------",module);
  }
  double totalSeconds=(System.currentTimeMillis() - startTime) / 1000.0;
  if (Debug.infoOn())   Debug.logInfo("HandlerMap Created: (" + ((Map)map.get("view")).size() + ") view handlers and ("+ ((Map)map.get("event")).size()+ ") request/event handlers in "+ totalSeconds+ "s",module);
  return map;
}
