{
  long startTime=System.currentTimeMillis();
  FastMap map=FastMap.newInstance();
  if (root == null) {
    root=loadDocument(xml);
  }
  if (root == null)   return map;
  List includeElementList=UtilXml.childElementList(root,INCLUDE);
  Iterator includeElementIter=includeElementList.iterator();
  while (includeElementIter.hasNext()) {
    Element includeElement=(Element)includeElementIter.next();
    String includeLocation=includeElement.getAttribute(INCLUDE_LOCATION);
    if ((includeLocation != null) && (includeLocation.length() > 0)) {
      try {
        Map subMap=loadRequestMap(null,FlexibleLocation.resolveLocation(includeLocation));
        map.putAll(subMap);
      }
 catch (      MalformedURLException mue) {
        Debug.logError(mue,"Error processing include at [" + includeLocation + "]:"+ mue.toString(),module);
      }
    }
  }
  List requestMapElementList=UtilXml.childElementList(root,REQUEST_MAPPING);
  Iterator requestMapElementIter=requestMapElementList.iterator();
  while (requestMapElementIter.hasNext()) {
    Element requestMapElement=(Element)requestMapElementIter.next();
    FastMap uriMap=FastMap.newInstance();
    String uri=requestMapElement.getAttribute(REQUEST_URI);
    String edit=requestMapElement.getAttribute(REQUEST_EDIT);
    String stats=requestMapElement.getAttribute(REQUEST_TRACK_STATS);
    String visit=requestMapElement.getAttribute(REQUEST_TRACK_VISIT);
    if (edit == null || edit.equals(""))     edit="true";
    if (uri != null) {
      uriMap.put(REQUEST_URI,uri);
      uriMap.put(REQUEST_EDIT,edit);
      uriMap.put(REQUEST_TRACK_STATS,stats);
      uriMap.put(REQUEST_TRACK_VISIT,visit);
    }
    Element securityElement=UtilXml.firstChildElement(requestMapElement,SECURITY);
    if (securityElement != null) {
      String securityHttps=securityElement.getAttribute(SECURITY_HTTPS);
      String securityAuth=securityElement.getAttribute(SECURITY_AUTH);
      String securityCert=securityElement.getAttribute(SECURITY_CERT);
      String securityExtView=securityElement.getAttribute(SECURITY_EXTVIEW);
      String securityDirectRequest=securityElement.getAttribute(SECURITY_DIRECT);
      if ("true".equalsIgnoreCase(securityCert)) {
        securityHttps="true";
      }
      uriMap.put(SECURITY_HTTPS,securityHttps);
      uriMap.put(SECURITY_AUTH,securityAuth);
      uriMap.put(SECURITY_CERT,securityCert);
      uriMap.put(SECURITY_EXTVIEW,securityExtView);
      uriMap.put(SECURITY_DIRECT,securityDirectRequest);
    }
    Element eventElement=UtilXml.firstChildElement(requestMapElement,EVENT);
    if (eventElement != null) {
      String type=eventElement.getAttribute(EVENT_TYPE);
      String path=eventElement.getAttribute(EVENT_PATH);
      String invoke=eventElement.getAttribute(EVENT_METHOD);
      uriMap.put(EVENT_TYPE,type);
      uriMap.put(EVENT_PATH,path);
      uriMap.put(EVENT_METHOD,invoke);
      uriMap.put(EVENT_GLOBAL_TRANSACTION,eventElement.hasAttribute(EVENT_GLOBAL_TRANSACTION) ? eventElement.getAttribute(EVENT_GLOBAL_TRANSACTION) : "true");
    }
    String description=UtilXml.childElementValue(requestMapElement,REQUEST_DESCRIPTION);
    uriMap.put(REQUEST_DESCRIPTION,UtilValidate.isNotEmpty(description) ? description : "");
    List responseElementList=UtilXml.childElementList(requestMapElement,RESPONSE);
    Iterator responseElementIter=responseElementList.iterator();
    while (responseElementIter.hasNext()) {
      Element responseElement=(Element)responseElementIter.next();
      String name=responseElement.getAttribute(RESPONSE_NAME);
      String type=responseElement.getAttribute(RESPONSE_TYPE);
      String value=responseElement.getAttribute(RESPONSE_VALUE);
      uriMap.put(name,type + ":" + value);
    }
    if (uri != null) {
      map.put(uri,uriMap);
    }
  }
  if (Debug.verboseOn()) {
    Debug.logVerbose("-------- Request Mappings --------",module);
    Set debugSet=map.keySet();
    Iterator i=debugSet.iterator();
    while (i.hasNext()) {
      Object o=i.next();
      String request=(String)o;
      Map thisURI=(Map)map.get(o);
      StringBuilder verboseMessageBuffer=new StringBuilder();
      Iterator debugIter=thisURI.keySet().iterator();
      while (debugIter.hasNext()) {
        Object lo=debugIter.next();
        String name=(String)lo;
        String value=(String)thisURI.get(lo);
        verboseMessageBuffer.append("[").append(name).append("=>").append(value).append("]");
      }
      Debug.logVerbose(request + " :: " + verboseMessageBuffer.toString(),module);
    }
    Debug.logVerbose("------ End Request Mappings ------",module);
  }
  double totalSeconds=(System.currentTimeMillis() - startTime) / 1000.0;
  if (Debug.infoOn())   Debug.logInfo("RequestMap Created: (" + map.size() + ") records in "+ totalSeconds+ "s",module);
  return map;
}
