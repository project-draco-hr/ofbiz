{
  String serviceNameExpanded=this.serviceNameExdr.expandString(context);
  if (UtilValidate.isEmpty(serviceNameExpanded)) {
    throw new IllegalArgumentException("Service name was empty, expanded from: " + this.serviceNameExdr.getOriginal());
  }
  String autoFieldMapString=this.autoFieldMapExdr.expandString(context);
  boolean autoFieldMapBool=!"false".equals(autoFieldMapString);
  try {
    Map<String,Object> serviceContext=null;
    if (autoFieldMapBool) {
      serviceContext=WidgetWorker.getDispatcher(context).getDispatchContext().makeValidContext(serviceNameExpanded,ModelService.IN_PARAM,context);
    }
 else {
      serviceContext=new HashMap<String,Object>();
    }
    if (this.fieldMap != null) {
      EntityFinderUtil.expandFieldMapToContext(this.fieldMap,context,serviceContext);
    }
    Map<String,Object> result=WidgetWorker.getDispatcher(context).runSync(serviceNameExpanded,serviceContext);
    if (!this.resultMapNameAcsr.isEmpty()) {
      this.resultMapNameAcsr.put(context,result);
      String queryString=(String)result.get("queryString");
      context.put("queryString",queryString);
      context.put("queryStringMap",result.get("queryStringMap"));
      if (UtilValidate.isNotEmpty(queryString)) {
        try {
          String queryStringEncoded=queryString.replaceAll("&","%26");
          context.put("queryStringEncoded",queryStringEncoded);
        }
 catch (        PatternSyntaxException e) {
        }
      }
    }
 else {
      context.putAll(result);
    }
    String resultMapListName=resultMapListNameExdr.expandString(context);
    String resultMapValueName=resultMapValueNameExdr.expandString(context);
    String valueName=valueNameExdr.expandString(context);
    if (this.modelSubNode != null) {
      if (UtilValidate.isNotEmpty(resultMapListName)) {
        List<? extends Map<String,? extends Object>> lst=UtilGenerics.checkList(result.get(resultMapListName));
        if (lst != null) {
          if (lst instanceof ListIterator<?>) {
            ListIterator<? extends Map<String,? extends Object>> listIt=UtilGenerics.cast(lst);
            this.modelSubNode.setListIterator(listIt);
          }
 else {
            this.modelSubNode.setListIterator(lst.listIterator());
          }
        }
      }
    }
 else {
      if (UtilValidate.isNotEmpty(resultMapValueName)) {
        if (UtilValidate.isNotEmpty(valueName)) {
          context.put(valueName,result.get(resultMapValueName));
        }
 else {
          Map<String,Object> resultMap=UtilGenerics.checkMap(result.get(resultMapValueName));
          context.putAll(resultMap);
        }
      }
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error calling service with name " + serviceNameExpanded + ": "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new IllegalArgumentException(errMsg);
  }
}
