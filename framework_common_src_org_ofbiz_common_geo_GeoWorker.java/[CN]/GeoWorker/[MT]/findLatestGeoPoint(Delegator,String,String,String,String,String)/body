{
  List<GenericValue> gptList=null;
  if (UtilValidate.isNotEmpty(secondId) && UtilValidate.isNotEmpty(secondValueId)) {
    try {
      gptList=delegator.findByAnd(Entity,UtilMisc.toMap(mainId,mainValueId,secondId,secondValueId),UtilMisc.toList("-fromDate"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error while finding latest GeoPoint for " + mainId + " with Id ["+ mainValueId+ "] and "+ secondId+ " Id ["+ secondValueId+ "] "+ e.toString(),module);
    }
  }
 else {
    try {
      gptList=delegator.findByAnd(Entity,UtilMisc.toMap(mainId,mainValueId),UtilMisc.toList("-fromDate"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error while finding latest GeoPoint for " + mainId + " with Id ["+ mainValueId+ "] "+ e.toString(),module);
    }
  }
  if (UtilValidate.isNotEmpty(gptList)) {
    gptList=EntityUtil.filterByDate(gptList);
    return EntityUtil.getFirst(gptList);
  }
  return null;
}
