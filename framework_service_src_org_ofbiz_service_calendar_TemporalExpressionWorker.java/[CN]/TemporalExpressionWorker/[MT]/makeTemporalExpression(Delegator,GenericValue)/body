{
  String tempExprId=exprValue.getString("tempExprId");
  String tempExprTypeId=exprValue.getString("tempExprTypeId");
  if (DateRange.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.DateRange(exprValue.getTimestamp("date1"),exprValue.getTimestamp("date2")));
  }
 else   if (DayInMonth.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.DayInMonth(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));
  }
 else   if (DayOfMonthRange.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.DayOfMonthRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));
  }
 else   if (DayOfWeekRange.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.DayOfWeekRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));
  }
 else   if (Difference.equals(tempExprTypeId)) {
    List<GenericValue> childExpressions=delegator.findList("TemporalExpressionAssoc",EntityCondition.makeCondition("fromTempExprId",tempExprId),null,null,null,true);
    GenericValue inclAssoc=null;
    GenericValue exclAssoc=null;
    for (    GenericValue childExpression : childExpressions) {
      if ("INCLUDE".equals(childExpression.get("exprAssocType"))) {
        inclAssoc=childExpression;
      }
 else       if ("EXCLUDE".equals(childExpression.get("exprAssocType"))) {
        exclAssoc=childExpression;
      }
    }
    if (inclAssoc != null && exclAssoc != null) {
      return setExpressionId(exprValue,new TemporalExpressions.Difference(getTemporalExpression(delegator,inclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,exclAssoc.getString("toTempExprId"))));
    }
  }
 else   if (Frequency.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.Frequency(exprValue.getTimestamp("date1"),exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));
  }
 else   if (HourRange.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.HourRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));
  }
 else   if (Intersection.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.Intersection(getChildExpressions(delegator,tempExprId)));
  }
 else   if (MinuteRange.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.MinuteRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));
  }
 else   if (MonthRange.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.MonthRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));
  }
 else   if (Substitution.equals(tempExprTypeId)) {
    List<GenericValue> childExpressions=delegator.findList("TemporalExpressionAssoc",EntityCondition.makeCondition("fromTempExprId",tempExprId),null,null,null,true);
    GenericValue inclAssoc=null;
    GenericValue exclAssoc=null;
    GenericValue substAssoc=null;
    for (    GenericValue childExpression : childExpressions) {
      if ("INCLUDE".equals(childExpression.get("exprAssocType"))) {
        inclAssoc=childExpression;
      }
 else       if ("EXCLUDE".equals(childExpression.get("exprAssocType"))) {
        exclAssoc=childExpression;
      }
 else       if ("SUBSTITUTION".equals(childExpression.get("exprAssocType"))) {
        substAssoc=childExpression;
      }
    }
    if (inclAssoc != null && exclAssoc != null && substAssoc != null) {
      return setExpressionId(exprValue,new TemporalExpressions.Substitution(getTemporalExpression(delegator,inclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,exclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,substAssoc.getString("toTempExprId"))));
    }
  }
 else   if (Union.equals(tempExprTypeId)) {
    return setExpressionId(exprValue,new TemporalExpressions.Union(getChildExpressions(delegator,tempExprId)));
  }
  return TemporalExpressions.NullExpression;
}
