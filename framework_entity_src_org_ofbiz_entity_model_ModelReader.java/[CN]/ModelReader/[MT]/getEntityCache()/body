{
  if (entityCache == null) {
synchronized (ModelReader.class) {
      if (entityCache == null) {
        numEntities=0;
        numViewEntities=0;
        numFields=0;
        numRelations=0;
        numAutoRelations=0;
        entityCache=new HashMap<String,ModelEntity>();
        List<ModelViewEntity> tempViewEntityList=new LinkedList<ModelViewEntity>();
        List<Element> tempExtendEntityElementList=new LinkedList<Element>();
        UtilTimer utilTimer=new UtilTimer();
        for (        ResourceHandler entityResourceHandler : entityResourceHandlers) {
          Document document=null;
          try {
            document=entityResourceHandler.getDocument();
          }
 catch (          GenericConfigException e) {
            throw new GenericEntityConfException("Error getting document from resource handler",e);
          }
          if (document == null) {
            throw new GenericEntityConfException("Could not get document for " + entityResourceHandler.toString());
          }
          Element docElement=document.getDocumentElement();
          if (docElement == null) {
            return null;
          }
          docElement.normalize();
          Node curChild=docElement.getFirstChild();
          ModelInfo def=new ModelInfo();
          def.populateFromElements(docElement);
          int i=0;
          if (curChild != null) {
            utilTimer.timerString("Before start of entity loop in " + entityResourceHandler.toString());
            do {
              boolean isEntity="entity".equals(curChild.getNodeName());
              boolean isViewEntity="view-entity".equals(curChild.getNodeName());
              boolean isExtendEntity="extend-entity".equals(curChild.getNodeName());
              if ((isEntity || isViewEntity) && curChild.getNodeType() == Node.ELEMENT_NODE) {
                i++;
                ModelEntity modelEntity=buildEntity(entityResourceHandler,(Element)curChild,i,def);
                if (isViewEntity) {
                  tempViewEntityList.add((ModelViewEntity)modelEntity);
                }
 else {
                  entityCache.put(modelEntity.getEntityName(),modelEntity);
                }
              }
 else               if (isExtendEntity && curChild.getNodeType() == Node.ELEMENT_NODE) {
                tempExtendEntityElementList.add((Element)curChild);
              }
            }
 while ((curChild=curChild.getNextSibling()) != null);
          }
 else {
            Debug.logWarning("No child nodes found.",module);
          }
          utilTimer.timerString("Finished " + entityResourceHandler.toString() + " - Total Entities: "+ i+ " FINISHED");
        }
        for (        Element extendEntityElement : tempExtendEntityElementList) {
          String entityName=UtilXml.checkEmpty(extendEntityElement.getAttribute("entity-name"));
          ModelEntity modelEntity=entityCache.get(entityName);
          if (modelEntity == null)           throw new GenericEntityConfException("Entity to extend does not exist: " + entityName);
          modelEntity.addExtendEntity(this,extendEntityElement);
        }
        while (!tempViewEntityList.isEmpty()) {
          int startSize=tempViewEntityList.size();
          Iterator<ModelViewEntity> mveIt=tempViewEntityList.iterator();
          TEMP_VIEW_LOOP:           while (mveIt.hasNext()) {
            ModelViewEntity curViewEntity=mveIt.next();
            for (            ModelViewEntity.ModelMemberEntity mve : curViewEntity.getAllModelMemberEntities()) {
              if (!entityCache.containsKey(mve.getEntityName())) {
                continue TEMP_VIEW_LOOP;
              }
            }
            mveIt.remove();
            curViewEntity.populateFields(this);
            for (            ModelViewEntity.ModelMemberEntity mve : curViewEntity.getAllModelMemberEntities()) {
              ModelEntity me=entityCache.get(mve.getEntityName());
              me.addViewEntity(curViewEntity);
            }
            entityCache.put(curViewEntity.getEntityName(),curViewEntity);
          }
          if (tempViewEntityList.size() == startSize) {
            break;
          }
        }
        if (!tempViewEntityList.isEmpty()) {
          StringBuilder sb=new StringBuilder("View entities reference non-existant members:\n");
          Set<String> allViews=new HashSet<String>();
          for (          ModelViewEntity curViewEntity : tempViewEntityList) {
            allViews.add(curViewEntity.getEntityName());
          }
          for (          ModelViewEntity curViewEntity : tempViewEntityList) {
            Set<String> perViewMissingEntities=new HashSet<String>();
            Iterator<ModelViewEntity.ModelMemberEntity> mmeIt=curViewEntity.getAllModelMemberEntities().iterator();
            while (mmeIt.hasNext()) {
              ModelViewEntity.ModelMemberEntity mme=mmeIt.next();
              String memberEntityName=mme.getEntityName();
              if (!entityCache.containsKey(memberEntityName)) {
                if (!allViews.contains(memberEntityName)) {
                  perViewMissingEntities.add(memberEntityName);
                }
              }
            }
            for (            String perViewMissingEntity : perViewMissingEntities) {
              sb.append("\t[").append(curViewEntity.getEntityName()).append("] missing member entity [").append(perViewMissingEntity).append("]\n");
            }
          }
          throw new GenericEntityConfException(sb.toString());
        }
        TreeSet<String> orderedMessages=new TreeSet<String>();
        for (        String curEntityName : new TreeSet<String>(this.getEntityNames())) {
          ModelEntity curModelEntity=this.getModelEntity(curEntityName);
          if (curModelEntity instanceof ModelViewEntity) {
          }
 else {
            List<ModelRelation> newSameEntityRelations=new LinkedList<ModelRelation>();
            Iterator<ModelRelation> relationsIter=curModelEntity.getRelationsIterator();
            while (relationsIter.hasNext()) {
              ModelRelation modelRelation=relationsIter.next();
              if (("one".equals(modelRelation.getType()) || "one-nofk".equals(modelRelation.getType())) && !modelRelation.isAutoRelation()) {
                ModelEntity relatedEnt=null;
                try {
                  relatedEnt=this.getModelEntity(modelRelation.getRelEntityName());
                }
 catch (                GenericModelException e) {
                  throw new GenericModelException("Error getting related entity [" + modelRelation.getRelEntityName() + "] definition from entity ["+ curEntityName+ "]",e);
                }
                if (relatedEnt != null) {
                  String title=modelRelation.getTitle();
                  if (curModelEntity.getEntityName().equals(relatedEnt.getEntityName()) && "Parent".equals(title)) {
                    title="Child";
                  }
                  String description="";
                  String type="";
                  String relEntityName=curModelEntity.getEntityName();
                  String fkName="";
                  ArrayList<ModelKeyMap> keyMaps=new ArrayList<ModelKeyMap>();
                  boolean isAutoRelation=true;
                  Set<String> curEntityKeyFields=new HashSet<String>();
                  for (                  ModelKeyMap curkm : modelRelation.getKeyMaps()) {
                    keyMaps.add(new ModelKeyMap(curkm.getRelFieldName(),curkm.getFieldName()));
                    curEntityKeyFields.add(curkm.getFieldName());
                  }
                  keyMaps.trimToSize();
                  if (curModelEntity.containsAllPkFieldNames(curEntityKeyFields)) {
                    type="one-nofk";
                    List<String> curPkFieldNames=curModelEntity.getPkFieldNames();
                    Iterator<ModelKeyMap> nrkmIter=keyMaps.iterator();
                    while (nrkmIter.hasNext()) {
                      ModelKeyMap nrkm=nrkmIter.next();
                      String checkField=nrkm.getRelFieldName();
                      if (!curPkFieldNames.contains(checkField)) {
                        nrkmIter.remove();
                      }
                    }
                  }
 else {
                    type="many";
                  }
                  ModelRelation newRel=ModelRelation.create(relatedEnt,description,type,title,relEntityName,fkName,keyMaps,isAutoRelation);
                  ModelRelation existingRelation=relatedEnt.getRelation(title + curModelEntity.getEntityName());
                  if (existingRelation == null) {
                    numAutoRelations++;
                    if (curModelEntity.getEntityName().equals(relatedEnt.getEntityName())) {
                      newSameEntityRelations.add(newRel);
                    }
 else {
                      relatedEnt.addRelation(newRel);
                    }
                  }
 else {
                    if (newRel.equals(existingRelation)) {
                      if (Debug.infoOn() && !(title + curModelEntity.getEntityName()).equals(modelRelation.getTitle() + modelRelation.getRelEntityName())) {
                        String message="Entity [" + relatedEnt.getPackageName() + ":"+ relatedEnt.getEntityName()+ "] already has identical relationship to entity ["+ curModelEntity.getEntityName()+ "] title ["+ title+ "]; would auto-create: type ["+ newRel.getType()+ "] and fields ["+ newRel.keyMapString(",","")+ "]";
                        orderedMessages.add(message);
                      }
                    }
 else {
                      String message="Existing relationship with the same name, but different specs found from what would be auto-created for Entity [" + relatedEnt.getEntityName() + "] and relationship to entity ["+ curModelEntity.getEntityName()+ "] title ["+ title+ "]; would auto-create: type ["+ newRel.getType()+ "] and fields ["+ newRel.keyMapString(",","")+ "]";
                      Debug.logVerbose(message,module);
                    }
                  }
                }
 else {
                  String errorMsg="Could not find related entity [" + modelRelation.getRelEntityName() + "], no reverse relation added.";
                  Debug.logWarning(errorMsg,module);
                }
              }
            }
            if (newSameEntityRelations.size() > 0) {
              for (              ModelRelation newRel : newSameEntityRelations) {
                curModelEntity.addRelation(newRel);
              }
            }
          }
        }
        if (Debug.infoOn()) {
          for (          String message : orderedMessages) {
            Debug.logInfo(message,module);
          }
          Debug.logInfo("FINISHED LOADING ENTITIES - ALL FILES; #Entities=" + numEntities + " #ViewEntities="+ numViewEntities+ " #Fields="+ numFields+ " #Relationships="+ numRelations+ " #AutoRelationships="+ numAutoRelations,module);
        }
      }
    }
  }
  return entityCache;
}
