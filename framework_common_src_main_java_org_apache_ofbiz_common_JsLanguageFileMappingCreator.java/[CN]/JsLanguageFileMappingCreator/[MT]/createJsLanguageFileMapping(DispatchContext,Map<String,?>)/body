{
  Map<String,Object> result=ServiceUtil.returnSuccess();
  String encoding=(String)context.get("encoding");
  List<Locale> localeList=UtilMisc.availableLocales();
  Map<String,Object> jQueryLocaleFile=new LinkedHashMap<String,Object>();
  Map<String,String> dateJsLocaleFile=new LinkedHashMap<String,String>();
  Map<String,String> validationLocaleFile=new LinkedHashMap<String,String>();
  Map<String,String> dateTimePickerLocaleFile=new LinkedHashMap<String,String>();
  String componentRoot="component://images/webapp";
  String jqueryUiLocaleRelPath="/images/jquery/ui/i18n/";
  String dateJsLocaleRelPath="/images/jquery/plugins/datejs/";
  String validateRelPath="/images/jquery/plugins/validate/localization/";
  String dateTimePickerJsLocaleRelPath="/images/jquery/plugins/datetimepicker/localization/";
  String jsFilePostFix=".js";
  String dateJsLocalePrefix="date-";
  String validateLocalePrefix="messages_";
  String jqueryUiLocalePrefix="jquery.ui.datepicker-";
  String dateTimePickerPrefix="jquery-ui-timepicker-";
  String defaultLocaleDateJs="en-US";
  String defaultLocaleJquery="en";
  for (  Locale locale : localeList) {
    String displayCountry=locale.toString();
    String modifiedDisplayCountry=null;
    String modifiedDisplayCountryForValidation=null;
    if (displayCountry.contains("_")) {
      modifiedDisplayCountry=displayCountry.replace("_","-");
      modifiedDisplayCountryForValidation=displayCountry;
    }
 else {
      modifiedDisplayCountry=displayCountry;
    }
    String strippedLocale=locale.getLanguage();
    File file=null;
    String fileUrl=null;
    String fileName=componentRoot + dateJsLocaleRelPath + dateJsLocalePrefix+ modifiedDisplayCountry+ jsFilePostFix;
    file=FileUtil.getFile(fileName);
    if (file.exists()) {
      fileUrl=dateJsLocaleRelPath + dateJsLocalePrefix + modifiedDisplayCountry+ jsFilePostFix;
    }
 else {
      String tmpLocale=strippedLocale + "-" + strippedLocale.toUpperCase();
      fileName=componentRoot + dateJsLocaleRelPath + dateJsLocalePrefix+ tmpLocale+ jsFilePostFix;
      file=FileUtil.getFile(fileName);
      if (file.exists()) {
        fileUrl=dateJsLocaleRelPath + dateJsLocalePrefix + tmpLocale+ jsFilePostFix;
      }
 else {
        fileUrl=dateJsLocaleRelPath + dateJsLocalePrefix + defaultLocaleDateJs+ jsFilePostFix;
      }
    }
    dateJsLocaleFile.put(displayCountry,fileUrl);
    if (modifiedDisplayCountryForValidation != null) {
      fileName=componentRoot + validateRelPath + validateLocalePrefix+ modifiedDisplayCountryForValidation+ jsFilePostFix;
      file=FileUtil.getFile(fileName);
      if (file.exists()) {
        fileUrl=validateRelPath + validateLocalePrefix + modifiedDisplayCountryForValidation+ jsFilePostFix;
      }
 else {
        fileName=componentRoot + validateRelPath + validateLocalePrefix+ strippedLocale+ jsFilePostFix;
        file=FileUtil.getFile(fileName);
        if (file.exists()) {
          fileUrl=validateRelPath + validateLocalePrefix + strippedLocale+ jsFilePostFix;
        }
 else {
          fileUrl=validateRelPath + validateLocalePrefix + defaultLocaleJquery+ jsFilePostFix;
        }
      }
    }
 else {
      fileName=componentRoot + validateRelPath + validateLocalePrefix+ strippedLocale+ jsFilePostFix;
      file=FileUtil.getFile(fileName);
      if (file.exists()) {
        fileUrl=validateRelPath + validateLocalePrefix + strippedLocale+ jsFilePostFix;
      }
 else {
        fileUrl=validateRelPath + validateLocalePrefix + defaultLocaleJquery+ jsFilePostFix;
      }
    }
    validationLocaleFile.put(displayCountry,fileUrl);
    fileName=componentRoot + jqueryUiLocaleRelPath + jqueryUiLocalePrefix+ strippedLocale+ jsFilePostFix;
    file=FileUtil.getFile(fileName);
    if (file.exists()) {
      fileUrl=jqueryUiLocaleRelPath + jqueryUiLocalePrefix + strippedLocale+ jsFilePostFix;
    }
 else {
      fileName=componentRoot + jqueryUiLocaleRelPath + jqueryUiLocalePrefix+ modifiedDisplayCountry+ jsFilePostFix;
      file=FileUtil.getFile(fileName);
      if (file.exists()) {
        fileUrl=jqueryUiLocaleRelPath + jqueryUiLocalePrefix + modifiedDisplayCountry+ jsFilePostFix;
      }
 else {
        fileUrl=jqueryUiLocaleRelPath + jqueryUiLocalePrefix + defaultLocaleJquery+ jsFilePostFix;
      }
    }
    jQueryLocaleFile.put(displayCountry,fileUrl);
    fileName=componentRoot + dateTimePickerJsLocaleRelPath + dateTimePickerPrefix+ strippedLocale+ jsFilePostFix;
    file=FileUtil.getFile(fileName);
    if (file.exists()) {
      fileUrl=dateTimePickerJsLocaleRelPath + dateTimePickerPrefix + strippedLocale+ jsFilePostFix;
    }
 else {
      fileName=componentRoot + dateTimePickerJsLocaleRelPath + dateTimePickerPrefix+ modifiedDisplayCountry+ jsFilePostFix;
      file=FileUtil.getFile(fileName);
      if (file.exists()) {
        fileUrl=dateTimePickerJsLocaleRelPath + dateTimePickerPrefix + modifiedDisplayCountry+ jsFilePostFix;
      }
 else {
        fileUrl=dateTimePickerJsLocaleRelPath + dateTimePickerPrefix + defaultLocaleJquery+ jsFilePostFix;
      }
    }
    dateTimePickerLocaleFile.put(displayCountry,fileUrl);
  }
  String template="framework/common/template/JsLanguageFilesMapping.ftl";
  String output="framework/common/src/org/apache/ofbiz/common/JsLanguageFilesMapping.java";
  Map<String,Object> mapWrapper=new HashMap<String,Object>();
  mapWrapper.put("datejs",dateJsLocaleFile);
  mapWrapper.put("jquery",jQueryLocaleFile);
  mapWrapper.put("validation",validationLocaleFile);
  mapWrapper.put("dateTime",dateTimePickerLocaleFile);
  Writer writer=new StringWriter();
  try {
    FreeMarkerWorker.renderTemplate(template,mapWrapper,writer);
    File file=new File(output);
    FileUtils.writeStringToFile(file,writer.toString(),encoding);
  }
 catch (  Exception e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage("CommonUiLabels","CommonOutputFileCouldNotBeCreated",UtilMisc.toMap("errorString",e.getMessage()),(Locale)context.get("locale")));
  }
  return result;
}
