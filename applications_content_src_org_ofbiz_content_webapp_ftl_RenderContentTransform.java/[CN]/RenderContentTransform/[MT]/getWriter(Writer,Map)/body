{
  final Environment env=Environment.getCurrentEnvironment();
  final Delegator delegator=FreeMarkerWorker.getWrappedObject("delegator",env);
  final LocalDispatcher dispatcher=FreeMarkerWorker.getWrappedObject("dispatcher",env);
  final HttpServletRequest request=FreeMarkerWorker.getWrappedObject("request",env);
  final HttpServletResponse response=FreeMarkerWorker.getWrappedObject("response",env);
  final Map templateRoot=MapStack.create(FreeMarkerWorker.createEnvironmentMap(env));
  ((MapStack)templateRoot).push(args);
  final String xmlEscape=(String)templateRoot.get("xmlEscape");
  final String thisContentId=(String)templateRoot.get("contentId");
  return new Writer(out){
    @Override public void write(    char cbuf[],    int off,    int len){
    }
    @Override public void flush() throws IOException {
      out.flush();
    }
    @Override public void close() throws IOException {
      renderSubContent();
    }
    public void renderSubContent() throws IOException {
      String mimeTypeId=(String)templateRoot.get("mimeTypeId");
      Object localeObject=templateRoot.get("locale");
      Locale locale=null;
      if (localeObject == null) {
        locale=UtilHttp.getLocale(request);
      }
 else {
        locale=UtilMisc.ensureLocale(localeObject);
      }
      String editRequestName=(String)templateRoot.get("editRequestName");
      if (UtilValidate.isNotEmpty(editRequestName)) {
        String editStyle=getEditStyle();
        openEditWrap(out,editStyle);
      }
      try {
        String txt=null;
        String mapKey=(String)templateRoot.get("mapKey");
        if (UtilValidate.isEmpty(mapKey)) {
          txt=ContentWorker.renderContentAsText(dispatcher,delegator,thisContentId,templateRoot,locale,mimeTypeId,true);
        }
 else {
          txt=ContentWorker.renderSubContentAsText(dispatcher,delegator,thisContentId,mapKey,templateRoot,locale,mimeTypeId,true);
        }
        if ("true".equals(xmlEscape)) {
          txt=UtilFormatOut.encodeXmlValue(txt);
        }
        out.write(txt);
      }
 catch (      GeneralException e) {
        String errMsg="Error rendering thisContentId:" + thisContentId + " msg:"+ e.toString();
        Debug.logError(e,errMsg,module);
      }
      if (UtilValidate.isNotEmpty(editRequestName)) {
        closeEditWrap(out,editRequestName);
      }
    }
    public void openEditWrap(    Writer out,    String editStyle) throws IOException {
      String divStr="<div class=\"" + editStyle + "\">";
      out.write(divStr);
    }
    public void closeEditWrap(    Writer out,    String editRequestName) throws IOException {
      StringBuilder sb=new StringBuilder();
      String fullRequest=editRequestName;
      String delim="?";
      if (UtilValidate.isNotEmpty(thisContentId)) {
        fullRequest+=delim + "contentId=" + thisContentId;
        delim="&";
      }
      out.write("<a href=\"");
      ServletContext servletContext=(ServletContext)request.getSession().getServletContext();
      RequestHandler rh=(RequestHandler)servletContext.getAttribute("_REQUEST_HANDLER_");
      out.append(rh.makeLink(request,response,"/" + fullRequest,false,false,true));
      out.write("\">Edit</a>");
      out.write("</div>");
    }
    public String getEditStyle(){
      String editStyle=(String)templateRoot.get("editStyle");
      if (UtilValidate.isEmpty(editStyle)) {
        editStyle=UtilProperties.getPropertyValue("content","defaultEditStyle");
      }
      if (UtilValidate.isEmpty(editStyle)) {
        editStyle="buttontext";
      }
      return editStyle;
    }
  }
;
}
