{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  String taskId=(String)context.get("taskId");
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  String productId=(String)context.get("productId");
  String routingId=(String)context.get("routingId");
  if (quantity == null) {
    quantity=BigDecimal.ONE;
  }
  GenericValue task=null;
  try {
    task=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",taskId).queryOne();
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingErrorFindingTask",UtilMisc.toMap("taskId",taskId),locale));
  }
  long estimatedTaskTime=ProductionRun.getEstimatedTaskTime(task,quantity,productId,routingId,dispatcher);
  result.put("estimatedTaskTime",Long.valueOf(estimatedTaskTime));
  if (task != null && task.get("estimatedSetupMillis") != null) {
    result.put("setupTime",task.getBigDecimal("estimatedSetupMillis"));
  }
  if (task != null && task.get("estimatedMilliSeconds") != null) {
    result.put("taskUnitTime",task.getBigDecimal("estimatedMilliSeconds"));
  }
  return result;
}
