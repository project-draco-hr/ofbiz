{
  GenericDelegator delegator=ctx.getDelegator();
  String idToFind=(String)context.get("idToFind");
  String partyIdentificationTypeId=(String)context.get("partyIdentificationTypeId");
  String searchPartyFirstContext=(String)context.get("searchPartyFirst");
  String searchAllIdContext=(String)context.get("searchAllId");
  boolean searchPartyFirst=UtilValidate.isNotEmpty(searchPartyFirstContext) && "N".equals(searchPartyFirstContext) ? false : true;
  boolean searchAllId=UtilValidate.isNotEmpty(searchAllIdContext) && "Y".equals(searchAllIdContext) ? true : false;
  GenericValue party=null;
  List<GenericValue> partiesFound=null;
  try {
    partiesFound=PartyWorker.findPartiesById(delegator,idToFind,partyIdentificationTypeId,searchPartyFirst,searchAllId);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    ServiceUtil.returnError(e.getMessage());
  }
  if (UtilValidate.isNotEmpty(partiesFound)) {
    party=EntityUtil.getFirst(partiesFound);
    partiesFound.remove(0);
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("party",party);
  result.put("partiesFound",partiesFound);
  return result;
}
