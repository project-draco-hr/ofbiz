{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator _delegator=dctx.getDelegator();
  GenericDelegator delegator=_delegator.cloneDelegator();
  delegator.setEntityEcaHandler(null);
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String partyIdTo=(String)context.get("partyIdTo");
  String partyId=(String)context.get("partyId");
  Timestamp now=UtilDateTime.nowTimestamp();
  try {
    delegator.storeByCondition("PartyContactMech",UtilMisc.toMap("partyId",partyIdTo,"thruDate",now),new EntityExpr("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyIdTo,"thruDate",now),new EntityExpr("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("PartyNote",UtilMisc.toMap("partyId",partyIdTo),new EntityExpr("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  List rolesToMove;
  try {
    rolesToMove=delegator.findByAnd("PartyRole",UtilMisc.toMap("partyId",partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Iterator rtmi=rolesToMove.iterator();
  while (rtmi.hasNext()) {
    GenericValue attr=(GenericValue)rtmi.next();
    attr.set("partyId",partyIdTo);
    try {
      if (delegator.findByPrimaryKey("PartyRole",attr.getPrimaryKey()) == null) {
        attr.create();
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  try {
    delegator.removeByAnd("PartyRole",UtilMisc.toMap("partyId",partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("PartyRole",UtilMisc.toMap("partyId",partyIdTo),new EntityExpr("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("OrderRole",UtilMisc.toMap("partyId",partyIdTo),new EntityExpr("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  List attrsToMove;
  try {
    attrsToMove=delegator.findByAnd("PartyAttribute",UtilMisc.toMap("partyId",partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Iterator atmi=attrsToMove.iterator();
  while (atmi.hasNext()) {
    GenericValue attr=(GenericValue)atmi.next();
    attr.set("partyId",partyIdTo);
    try {
      if (delegator.findByPrimaryKey("PartyAttribute",attr.getPrimaryKey()) == null) {
        attr.create();
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  try {
    delegator.removeByAnd("PartyAttribute",UtilMisc.toMap("partyId",partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Map disableResp=null;
  try {
    disableResp=dispatcher.runSync("setPartyStatus",UtilMisc.toMap("partyId",partyId,"statusId","PARTY_DISABLED","userLogin",userLogin));
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (disableResp != null && ServiceUtil.isError(disableResp)) {
    return ServiceUtil.returnError(ServiceUtil.getErrorMessage(disableResp));
  }
  Map resp=ServiceUtil.returnSuccess();
  resp.put("partyId",partyIdTo);
  return resp;
}
