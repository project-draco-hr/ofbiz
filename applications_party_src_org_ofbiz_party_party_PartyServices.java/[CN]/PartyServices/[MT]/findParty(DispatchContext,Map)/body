{
  Map result=ServiceUtil.returnSuccess();
  GenericDelegator delegator=dctx.getDelegator();
  String extInfo=(String)context.get("extInfo");
  try {
    List roleTypes=delegator.findAll("RoleType",UtilMisc.toList("description"));
    result.put("roleTypes",roleTypes);
  }
 catch (  GenericEntityException e) {
    String errMsg="Error looking up RoleTypes: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  String roleTypeId;
  try {
    roleTypeId=(String)context.get("roleTypeId");
    if (roleTypeId != null && roleTypeId.length() > 0) {
      GenericValue currentRole=delegator.findByPrimaryKeyCache("RoleType",UtilMisc.toMap("roleTypeId",roleTypeId));
      result.put("currentRole",currentRole);
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Error looking up current RoleType: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  String stateProvinceGeoId;
  try {
    stateProvinceGeoId=(String)context.get("stateProvinceGeoId");
    if (stateProvinceGeoId != null && stateProvinceGeoId.length() > 0) {
      GenericValue currentStateGeo=delegator.findByPrimaryKeyCache("Geo",UtilMisc.toMap("geoId",stateProvinceGeoId));
      result.put("currentStateGeo",currentStateGeo);
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="Error looking up current stateProvinceGeo: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  int viewIndex=0;
  try {
    viewIndex=Integer.parseInt((String)context.get("VIEW_INDEX"));
  }
 catch (  Exception e) {
    viewIndex=0;
  }
  result.put("viewIndex",new Integer(viewIndex));
  int viewSize=20;
  try {
    viewSize=Integer.parseInt((String)context.get("VIEW_SIZE"));
  }
 catch (  Exception e) {
    viewSize=20;
  }
  result.put("viewSize",new Integer(viewSize));
  String lookupFlag=(String)context.get("lookupFlag");
  String paramList="";
  List partyList=null;
  int partyListSize=0;
  int lowIndex=0;
  int highIndex=0;
  if ("Y".equals(lookupFlag)) {
    String showAll=(context.get("showAll") != null ? (String)context.get("showAll") : "N");
    paramList=paramList + "&lookupFlag=" + lookupFlag+ "&showAll="+ showAll+ "&extInfo="+ extInfo;
    DynamicViewEntity dynamicView=new DynamicViewEntity();
    dynamicView.addMemberEntity("PT","Party");
    dynamicView.addAlias("PT","partyId");
    dynamicView.addAlias("PT","statusId");
    dynamicView.addAlias("PT","partyTypeId");
    dynamicView.addRelation("one-nofk","","PartyType",ModelKeyMap.makeKeyMapList("partyTypeId"));
    dynamicView.addRelation("many","","UserLogin",ModelKeyMap.makeKeyMapList("partyId"));
    List andExprs=FastList.newInstance();
    EntityCondition mainCond=null;
    List orderBy=FastList.newInstance();
    List fieldsToSelect=FastList.newInstance();
    fieldsToSelect.add("partyId");
    fieldsToSelect.add("statusId");
    fieldsToSelect.add("partyTypeId");
    String partyId=(String)context.get("partyId");
    String statusId=(String)context.get("statusId");
    String userLoginId=(String)context.get("userLoginId");
    String firstName=(String)context.get("firstName");
    String lastName=(String)context.get("lastName");
    String groupName=(String)context.get("groupName");
    if (!"Y".equals(showAll)) {
      if (partyId != null && partyId.length() > 0) {
        paramList=paramList + "&partyId=" + partyId;
        andExprs.add(new EntityExpr("partyId",true,EntityOperator.LIKE,"%" + partyId + "%",true));
      }
      if (statusId != null) {
        paramList=paramList + "&statusId=" + statusId;
        if (!"ANY".equalsIgnoreCase(statusId)) {
          andExprs.add(new EntityExpr("statusId",EntityOperator.EQUALS,statusId));
        }
      }
 else {
        andExprs.add(new EntityExpr(new EntityExpr("statusId",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"PARTY_DISABLED")));
      }
      if (userLoginId != null && userLoginId.length() > 0) {
        paramList=paramList + "&userLoginId=" + userLoginId;
        dynamicView.addMemberEntity("UL","UserLogin");
        dynamicView.addAlias("UL","userLoginId");
        dynamicView.addViewLink("PT","UL",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
        andExprs.add(new EntityExpr("userLoginId",true,EntityOperator.LIKE,"%" + userLoginId + "%",true));
        fieldsToSelect.add("userLoginId");
      }
      if (groupName != null && groupName.length() > 0) {
        paramList=paramList + "&groupName=" + groupName;
        dynamicView.addMemberEntity("PG","PartyGroup");
        dynamicView.addAlias("PG","groupName");
        dynamicView.addViewLink("PT","PG",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
        andExprs.add(new EntityExpr("groupName",true,EntityOperator.LIKE,"%" + groupName + "%",true));
        fieldsToSelect.add("groupName");
      }
      if ((firstName != null && firstName.length() > 0) || (lastName != null && lastName.length() > 0)) {
        dynamicView.addMemberEntity("PE","Person");
        dynamicView.addAlias("PE","firstName");
        dynamicView.addAlias("PE","lastName");
        dynamicView.addViewLink("PT","PE",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
        fieldsToSelect.add("firstName");
        fieldsToSelect.add("lastName");
        orderBy.add("lastName");
        orderBy.add("firstName");
      }
      if (firstName != null && firstName.length() > 0) {
        paramList=paramList + "&firstName=" + firstName;
        andExprs.add(new EntityExpr("firstName",true,EntityOperator.LIKE,"%" + firstName + "%",true));
      }
      if (lastName != null && lastName.length() > 0) {
        paramList=paramList + "&lastName=" + lastName;
        andExprs.add(new EntityExpr("lastName",true,EntityOperator.LIKE,"%" + lastName + "%",true));
      }
      if (roleTypeId != null && !"ANY".equals(roleTypeId)) {
        paramList=paramList + "&roleTypeId=" + roleTypeId;
        dynamicView.addMemberEntity("PR","PartyRole");
        dynamicView.addAlias("PR","roleTypeId");
        dynamicView.addViewLink("PT","PR",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
        andExprs.add(new EntityExpr("roleTypeId",EntityOperator.EQUALS,roleTypeId));
        fieldsToSelect.add("roleTypeId");
      }
      if ("P".equals(extInfo)) {
        dynamicView.addMemberEntity("PC","PartyContactMech");
        dynamicView.addMemberEntity("PA","PostalAddress");
        dynamicView.addAlias("PC","contactMechId");
        dynamicView.addAlias("PA","address1");
        dynamicView.addAlias("PA","address2");
        dynamicView.addAlias("PA","city");
        dynamicView.addAlias("PA","stateProvinceGeoId");
        dynamicView.addAlias("PA","countryGeoId");
        dynamicView.addAlias("PA","postalCode");
        dynamicView.addViewLink("PT","PC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
        dynamicView.addViewLink("PC","PA",Boolean.FALSE,ModelKeyMap.makeKeyMapList("contactMechId"));
        String address1=(String)context.get("address1");
        if (address1 != null && address1.length() > 0) {
          paramList=paramList + "&address1=" + address1;
          andExprs.add(new EntityExpr("address1",true,EntityOperator.LIKE,"%" + address1 + "%",true));
        }
        String address2=(String)context.get("address2");
        if (address2 != null && address2.length() > 0) {
          paramList=paramList + "&address2=" + address2;
          andExprs.add(new EntityExpr("address2",true,EntityOperator.LIKE,"%" + address2 + "%",true));
        }
        String city=(String)context.get("city");
        if (city != null && city.length() > 0) {
          paramList=paramList + "&city=" + city;
          andExprs.add(new EntityExpr("city",true,EntityOperator.EQUALS,city,true));
        }
        if (stateProvinceGeoId != null && !"ANY".equals(stateProvinceGeoId)) {
          paramList=paramList + "&stateProvinceGeoId=" + stateProvinceGeoId;
          andExprs.add(new EntityExpr("stateProvinceGeoId",EntityOperator.EQUALS,stateProvinceGeoId));
        }
        String postalCode=(String)context.get("postalCode");
        if (postalCode != null && postalCode.length() > 0) {
          paramList=paramList + "&postalCode=" + postalCode;
          andExprs.add(new EntityExpr("postalCode",true,EntityOperator.LIKE,"%" + postalCode + "%",true));
        }
        fieldsToSelect.add("postalCode");
      }
      if ("O".equals(extInfo)) {
        dynamicView.addMemberEntity("PC","PartyContactMech");
        dynamicView.addMemberEntity("CM","ContactMech");
        dynamicView.addAlias("PC","contactMechId");
        dynamicView.addAlias("CM","infoString");
        dynamicView.addViewLink("PT","PC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
        dynamicView.addViewLink("PC","CM",Boolean.FALSE,ModelKeyMap.makeKeyMapList("contactMechId"));
        String infoString=(String)context.get("infoString");
        if (infoString != null && infoString.length() > 0) {
          paramList=paramList + "&infoString=" + infoString;
          andExprs.add(new EntityExpr("infoString",true,EntityOperator.LIKE,"%" + infoString + "%",true));
        }
        fieldsToSelect.add("infoString");
      }
      if ("T".equals(extInfo)) {
        dynamicView.addMemberEntity("PC","PartyContactMech");
        dynamicView.addMemberEntity("TM","TelecomNumber");
        dynamicView.addAlias("PC","contactMechId");
        dynamicView.addAlias("TM","countryCode");
        dynamicView.addAlias("TM","areaCode");
        dynamicView.addAlias("TM","contactNumber");
        dynamicView.addViewLink("PT","PC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
        dynamicView.addViewLink("PC","TM",Boolean.FALSE,ModelKeyMap.makeKeyMapList("contactMechId"));
        String countryCode=(String)context.get("countryCode");
        if (countryCode != null && countryCode.length() > 0) {
          paramList=paramList + "&countryCode=" + countryCode;
          andExprs.add(new EntityExpr("countryCode",true,EntityOperator.EQUALS,countryCode,true));
        }
        String areaCode=(String)context.get("areaCode");
        if (areaCode != null && areaCode.length() > 0) {
          paramList=paramList + "&areaCode=" + areaCode;
          andExprs.add(new EntityExpr("areaCode",true,EntityOperator.EQUALS,areaCode,true));
        }
        String contactNumber=(String)context.get("contactNumber");
        if (contactNumber != null && contactNumber.length() > 0) {
          paramList=paramList + "&contactNumber=" + contactNumber;
          andExprs.add(new EntityExpr("contactNumber",true,EntityOperator.EQUALS,contactNumber,true));
        }
        fieldsToSelect.add("contactNumber");
        fieldsToSelect.add("areaCode");
      }
      if (andExprs.size() > 0)       mainCond=new EntityConditionList(andExprs,EntityOperator.AND);
    }
    Debug.logInfo("In findParty mainCond=" + mainCond,module);
    if (mainCond != null || "Y".equals(showAll)) {
      try {
        EntityFindOptions findOpts=new EntityFindOptions(true,EntityFindOptions.TYPE_SCROLL_INSENSITIVE,EntityFindOptions.CONCUR_READ_ONLY,true);
        EntityListIterator pli=delegator.findListIteratorByCondition(dynamicView,mainCond,null,fieldsToSelect,orderBy,findOpts);
        lowIndex=viewIndex * viewSize + 1;
        highIndex=(viewIndex + 1) * viewSize;
        partyList=pli.getPartialList(lowIndex,viewSize);
        pli.last();
        partyListSize=pli.currentIndex();
        if (highIndex > partyListSize) {
          highIndex=partyListSize;
        }
        pli.close();
      }
 catch (      GenericEntityException e) {
        String errMsg="Failure in party find operation, rolling back transaction: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
    }
 else {
      partyListSize=0;
    }
  }
  if (partyList == null)   partyList=FastList.newInstance();
  result.put("partyList",partyList);
  result.put("partyListSize",new Integer(partyListSize));
  result.put("paramList",paramList);
  result.put("highIndex",new Integer(highIndex));
  result.put("lowIndex",new Integer(lowIndex));
  return result;
}
