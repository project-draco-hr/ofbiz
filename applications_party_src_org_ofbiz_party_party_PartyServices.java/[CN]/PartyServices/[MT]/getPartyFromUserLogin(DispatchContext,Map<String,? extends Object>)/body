{
  Debug.logWarning("Running the getPartyFromUserLogin Service...",module);
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  Collection<Map<String,GenericValue>> parties=FastList.newInstance();
  String userLoginId=(String)context.get("userLoginId");
  Locale locale=(Locale)context.get("locale");
  if (userLoginId.length() == 0)   return ServiceUtil.returnError("Required parameter 'userLoginId' cannot be empty.");
  try {
    EntityExpr ee=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("userLoginId"),EntityOperator.LIKE,EntityFunction.UPPER("%" + userLoginId.toUpperCase() + "%"));
    Collection<GenericValue> ulc=delegator.findList("PartyAndUserLogin",ee,null,UtilMisc.toList("userloginId"),null,false);
    if (Debug.verboseOn())     Debug.logVerbose("Collection: " + ulc,module);
    if (Debug.infoOn())     Debug.logInfo("PartyFromUserLogin number found: " + ulc.size(),module);
    if (ulc != null) {
      for (      GenericValue ul : ulc) {
        GenericValue party=delegator.makeValue("Party",UtilMisc.toMap("partyId",ul.get("partyId"),"partyTypeId",ul.get("partyTypeId")));
        parties.add(UtilMisc.<String,GenericValue>toMap("party",party));
      }
    }
  }
 catch (  GenericEntityException e) {
    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    String errMsg=UtilProperties.getMessage(resource,"partyservices.cannot_get_party_entities_read",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  if (parties.size() > 0) {
    result.put("parties",parties);
  }
  return result;
}
