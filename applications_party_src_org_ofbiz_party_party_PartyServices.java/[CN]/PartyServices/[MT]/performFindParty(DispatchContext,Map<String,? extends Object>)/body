{
  Map<String,Object> result=ServiceUtil.returnSuccess();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String extInfo=(String)context.get("extInfo");
  EntityCondition extCond=(EntityCondition)context.get("extCond");
  EntityListIterator listIt=null;
  String noConditionFind=(String)context.get("noConditionFind");
  DynamicViewEntity dynamicView=new DynamicViewEntity();
  dynamicView.addMemberEntity("PT","Party");
  dynamicView.addAlias("PT","partyId");
  dynamicView.addAlias("PT","statusId");
  dynamicView.addAlias("PT","partyTypeId");
  dynamicView.addAlias("PT","createdDate");
  dynamicView.addAlias("PT","lastModifiedDate");
  dynamicView.addRelation("one-nofk","","PartyType",ModelKeyMap.makeKeyMapList("partyTypeId"));
  dynamicView.addRelation("many","","UserLogin",ModelKeyMap.makeKeyMapList("partyId"));
  List<EntityCondition> andExprs=new ArrayList<EntityCondition>();
  EntityCondition mainCond=null;
  List<String> orderBy=new ArrayList<String>();
  String sortField=(String)context.get("sortField");
  if (UtilValidate.isNotEmpty(sortField)) {
    orderBy.add(sortField);
  }
  List<String> fieldsToSelect=new ArrayList<String>();
  fieldsToSelect.add("partyId");
  fieldsToSelect.add("statusId");
  fieldsToSelect.add("partyTypeId");
  fieldsToSelect.add("createdDate");
  fieldsToSelect.add("lastModifiedDate");
  String partyRelationshipTypeId=(String)context.get("partyRelationshipTypeId");
  if (UtilValidate.isNotEmpty(partyRelationshipTypeId)) {
    dynamicView.addMemberEntity("PRSHP","PartyRelationship");
    dynamicView.addAlias("PRSHP","partyIdTo");
    dynamicView.addAlias("PRSHP","partyRelationshipTypeId");
    dynamicView.addViewLink("PT","PRSHP",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId","partyIdTo"));
    List<String> ownerPartyIds=UtilGenerics.cast(context.get("ownerPartyIds"));
    EntityCondition relationshipCond=null;
    if (UtilValidate.isEmpty(ownerPartyIds)) {
      String partyIdFrom=userLogin.getString("partyId");
      relationshipCond=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("partyIdFrom"),EntityOperator.EQUALS,EntityFunction.UPPER(partyIdFrom));
    }
 else {
      relationshipCond=EntityCondition.makeCondition("partyIdFrom",EntityOperator.IN,ownerPartyIds);
    }
    dynamicView.addAlias("PRSHP","partyIdFrom");
    andExprs.add(EntityCondition.makeCondition(relationshipCond,EntityOperator.AND,EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("partyRelationshipTypeId"),EntityOperator.EQUALS,EntityFunction.UPPER(partyRelationshipTypeId))));
    fieldsToSelect.add("partyIdTo");
  }
  String partyId=(String)context.get("partyId");
  String partyTypeId=(String)context.get("partyTypeId");
  String roleTypeId=(String)context.get("roleTypeId");
  String statusId=(String)context.get("statusId");
  String userLoginId=(String)context.get("userLoginId");
  String firstName=(String)context.get("firstName");
  String lastName=(String)context.get("lastName");
  String groupName=(String)context.get("groupName");
  if (UtilValidate.isNotEmpty(partyId)) {
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("partyId"),EntityOperator.LIKE,EntityFunction.UPPER("%" + partyId + "%")));
  }
  if (UtilValidate.isNotEmpty(statusId)) {
    andExprs.add(EntityCondition.makeCondition("statusId",statusId));
  }
 else {
    andExprs.add(EntityCondition.makeCondition(EntityCondition.makeCondition("statusId",GenericEntity.NULL_FIELD),EntityOperator.OR,EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PARTY_DISABLED")));
  }
  if (UtilValidate.isNotEmpty(partyTypeId)) {
    andExprs.add(EntityCondition.makeCondition("partyTypeId",partyTypeId));
  }
  if (UtilValidate.isNotEmpty(userLoginId)) {
    dynamicView.addMemberEntity("UL","UserLogin");
    dynamicView.addAlias("UL","userLoginId");
    dynamicView.addViewLink("PT","UL",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("userLoginId"),EntityOperator.LIKE,EntityFunction.UPPER("%" + userLoginId + "%")));
    fieldsToSelect.add("userLoginId");
  }
  if (UtilValidate.isNotEmpty(groupName)) {
    dynamicView.addMemberEntity("PG","PartyGroup");
    dynamicView.addAlias("PG","groupName");
    dynamicView.addViewLink("PT","PG",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("groupName"),EntityOperator.LIKE,EntityFunction.UPPER("%" + groupName + "%")));
    fieldsToSelect.add("groupName");
  }
  if (UtilValidate.isNotEmpty(firstName) || UtilValidate.isNotEmpty(lastName)) {
    dynamicView.addMemberEntity("PE","Person");
    dynamicView.addAlias("PE","firstName");
    dynamicView.addAlias("PE","lastName");
    dynamicView.addViewLink("PT","PE",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    fieldsToSelect.add("firstName");
    fieldsToSelect.add("lastName");
    orderBy.add("lastName");
    orderBy.add("firstName");
  }
  if (UtilValidate.isNotEmpty(firstName)) {
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("firstName"),EntityOperator.LIKE,EntityFunction.UPPER("%" + firstName + "%")));
  }
  if (UtilValidate.isNotEmpty(lastName)) {
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("lastName"),EntityOperator.LIKE,EntityFunction.UPPER("%" + lastName + "%")));
  }
  if (UtilValidate.isNotEmpty(roleTypeId)) {
    dynamicView.addMemberEntity("PR","PartyRole");
    dynamicView.addAlias("PR","roleTypeId");
    dynamicView.addViewLink("PT","PR",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    andExprs.add(EntityCondition.makeCondition("roleTypeId",roleTypeId));
    fieldsToSelect.add("roleTypeId");
  }
  String idValue=(String)context.get("idValue");
  String partyIdentificationTypeId=(String)context.get("partyIdentificationTypeId");
  if ("I".equals(extInfo) || UtilValidate.isNotEmpty(idValue) || UtilValidate.isNotEmpty(partyIdentificationTypeId)) {
    dynamicView.addMemberEntity("PAI","PartyIdentification");
    dynamicView.addAlias("PAI","idValue");
    dynamicView.addAlias("PAI","partyIdentificationTypeId");
    dynamicView.addViewLink("PT","PAI",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    fieldsToSelect.add("idValue");
    fieldsToSelect.add("partyIdentificationTypeId");
    if (UtilValidate.isNotEmpty(idValue)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("idValue"),EntityOperator.LIKE,EntityFunction.UPPER("%".concat(idValue).concat("%"))));
    }
    if (UtilValidate.isNotEmpty(partyIdentificationTypeId)) {
      andExprs.add(EntityCondition.makeCondition("partyIdentificationTypeId",partyIdentificationTypeId));
    }
  }
  String inventoryItemId=(String)context.get("inventoryItemId");
  String serialNumber=(String)context.get("serialNumber");
  String softIdentifier=(String)context.get("softIdentifier");
  if (UtilValidate.isNotEmpty(inventoryItemId) || UtilValidate.isNotEmpty(serialNumber) || UtilValidate.isNotEmpty(softIdentifier)) {
    dynamicView.addMemberEntity("II","InventoryItem");
    dynamicView.addAlias("II","ownerPartyId");
    dynamicView.addViewLink("PT","II",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId","ownerPartyId"));
  }
  if (UtilValidate.isNotEmpty(inventoryItemId)) {
    dynamicView.addAlias("II","inventoryItemId");
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("inventoryItemId"),EntityOperator.LIKE,EntityFunction.UPPER("%" + inventoryItemId + "%")));
    fieldsToSelect.add("inventoryItemId");
  }
  if (UtilValidate.isNotEmpty(serialNumber)) {
    dynamicView.addAlias("II","serialNumber");
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("serialNumber"),EntityOperator.LIKE,EntityFunction.UPPER("%" + serialNumber + "%")));
    fieldsToSelect.add("serialNumber");
  }
  if (UtilValidate.isNotEmpty(softIdentifier)) {
    dynamicView.addAlias("II","softIdentifier");
    andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("softIdentifier"),EntityOperator.LIKE,EntityFunction.UPPER("%" + softIdentifier + "%")));
    fieldsToSelect.add("softIdentifier");
  }
  String stateProvinceGeoId=(String)context.get("stateProvinceGeoId");
  if ("P".equals(extInfo) || UtilValidate.isNotEmpty(context.get("address1")) || UtilValidate.isNotEmpty(context.get("address2"))|| UtilValidate.isNotEmpty(context.get("city"))|| UtilValidate.isNotEmpty(context.get("postalCode"))|| UtilValidate.isNotEmpty(context.get("countryGeoId"))|| (UtilValidate.isNotEmpty(stateProvinceGeoId))) {
    dynamicView.addMemberEntity("PC","PartyContactMech");
    dynamicView.addMemberEntity("PA","PostalAddress");
    dynamicView.addAlias("PC","contactMechId");
    dynamicView.addAlias("PA","address1");
    dynamicView.addAlias("PA","address2");
    dynamicView.addAlias("PA","city");
    dynamicView.addAlias("PA","stateProvinceGeoId");
    dynamicView.addAlias("PA","countryGeoId");
    dynamicView.addAlias("PA","postalCode");
    dynamicView.addViewLink("PT","PC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    dynamicView.addViewLink("PC","PA",Boolean.FALSE,ModelKeyMap.makeKeyMapList("contactMechId"));
    String address1=(String)context.get("address1");
    if (UtilValidate.isNotEmpty(address1)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("address1"),EntityOperator.LIKE,EntityFunction.UPPER("%" + address1 + "%")));
    }
    String address2=(String)context.get("address2");
    if (UtilValidate.isNotEmpty(address2)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("address2"),EntityOperator.LIKE,EntityFunction.UPPER("%" + address2 + "%")));
    }
    String city=(String)context.get("city");
    if (UtilValidate.isNotEmpty(city)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("city"),EntityOperator.LIKE,EntityFunction.UPPER("%" + city + "%")));
    }
    if (UtilValidate.isNotEmpty(stateProvinceGeoId)) {
      andExprs.add(EntityCondition.makeCondition("stateProvinceGeoId",stateProvinceGeoId));
    }
    String postalCode=(String)context.get("postalCode");
    if (UtilValidate.isNotEmpty(postalCode)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("postalCode"),EntityOperator.LIKE,EntityFunction.UPPER("%" + postalCode + "%")));
    }
    fieldsToSelect.add("postalCode");
    fieldsToSelect.add("city");
    fieldsToSelect.add("stateProvinceGeoId");
  }
  if ("O".equals(extInfo) || UtilValidate.isNotEmpty(context.get("infoString"))) {
    dynamicView.addMemberEntity("PC","PartyContactMech");
    dynamicView.addMemberEntity("CM","ContactMech");
    dynamicView.addAlias("PC","contactMechId");
    dynamicView.addAlias("CM","infoString");
    dynamicView.addViewLink("PT","PC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    dynamicView.addViewLink("PC","CM",Boolean.FALSE,ModelKeyMap.makeKeyMapList("contactMechId"));
    String infoString=(String)context.get("infoString");
    if (UtilValidate.isNotEmpty(infoString)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("infoString"),EntityOperator.LIKE,EntityFunction.UPPER("%" + infoString + "%")));
      fieldsToSelect.add("infoString");
    }
  }
  if ("T".equals(extInfo) || UtilValidate.isNotEmpty(context.get("countryCode")) || UtilValidate.isNotEmpty(context.get("areaCode"))|| UtilValidate.isNotEmpty(context.get("contactNumber"))) {
    dynamicView.addMemberEntity("PC","PartyContactMech");
    dynamicView.addMemberEntity("TM","TelecomNumber");
    dynamicView.addAlias("PC","contactMechId");
    dynamicView.addAlias("TM","countryCode");
    dynamicView.addAlias("TM","areaCode");
    dynamicView.addAlias("TM","contactNumber");
    dynamicView.addViewLink("PT","PC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("partyId"));
    dynamicView.addViewLink("PC","TM",Boolean.FALSE,ModelKeyMap.makeKeyMapList("contactMechId"));
    String countryCode=(String)context.get("countryCode");
    if (UtilValidate.isNotEmpty(countryCode)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("countryCode"),EntityOperator.EQUALS,EntityFunction.UPPER(countryCode)));
    }
    String areaCode=(String)context.get("areaCode");
    if (UtilValidate.isNotEmpty(areaCode)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("areaCode"),EntityOperator.EQUALS,EntityFunction.UPPER(areaCode)));
    }
    String contactNumber=(String)context.get("contactNumber");
    if (UtilValidate.isNotEmpty(contactNumber)) {
      andExprs.add(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("contactNumber"),EntityOperator.EQUALS,EntityFunction.UPPER(contactNumber)));
    }
    fieldsToSelect.add("contactNumber");
    fieldsToSelect.add("areaCode");
  }
  if (UtilValidate.isNotEmpty(extCond))   andExprs.add(extCond);
  if (UtilValidate.isNotEmpty(andExprs))   mainCond=EntityCondition.makeCondition(andExprs,EntityOperator.AND);
  if (Debug.infoOn())   Debug.logInfo("In findParty mainCond=" + mainCond,module);
  if (UtilValidate.isNotEmpty(noConditionFind) && ("Y".equals(noConditionFind) || andExprs.size() > 1)) {
    try {
      listIt=EntityQuery.use(delegator).select(UtilMisc.toSet(fieldsToSelect)).from(dynamicView).where(mainCond).orderBy(orderBy).cursorScrollInsensitive().distinct().queryIterator();
    }
 catch (    GenericEntityException e) {
      String errMsg="Failure in party find operation, rolling back transaction: " + e.toString();
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyLookupPartyError",UtilMisc.toMap("errMessage",e.toString()),locale));
    }
  }
  result.put("listIt",listIt);
  return result;
}
