{
  Delegator _delegator=dctx.getDelegator();
  Delegator delegator=_delegator.cloneDelegator();
  Locale locale=(Locale)context.get("locale");
  delegator.setEntityEcaHandler(null);
  String partyIdTo=(String)context.get("partyIdTo");
  String partyId=(String)context.get("partyId");
  Timestamp now=UtilDateTime.nowTimestamp();
  if (partyIdTo.equals(partyId)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotLinkPartyToItSelf",locale));
  }
  GenericValue partyTo;
  try {
    partyTo=delegator.findOne("Party",UtilMisc.toMap("partyId",partyIdTo),false);
  }
 catch (  GenericEntityException e) {
    Debug.logInfo(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (partyTo == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyToDoesNotExists",locale));
  }
  if ("PARTY_DISABLED".equals(partyTo.get("statusId"))) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotMergeDisabledParty",locale));
  }
  GenericValue party;
  try {
    party=delegator.findOne("Party",UtilMisc.toMap("partyId",partyId),false);
  }
 catch (  GenericEntityException e) {
    Debug.logInfo(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (party == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyFromDoesNotExists",locale));
  }
  try {
    delegator.storeByCondition("PartyContactMech",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("PartyContactMechPurpose",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("PartyNote",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("InventoryItem",UtilMisc.toMap("ownerPartyId",partyIdTo),EntityCondition.makeCondition("ownerPartyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("Subscription",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("UserLogin",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  List<GenericValue> rolesToMove;
  try {
    rolesToMove=delegator.findByAnd("PartyRole",UtilMisc.toMap("partyId",partyId),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  for (  GenericValue attr : rolesToMove) {
    attr.set("partyId",partyIdTo);
    try {
      if (delegator.findOne("PartyRole",attr.getPrimaryKey(),false) == null) {
        attr.create();
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  try {
    delegator.storeByCondition("OrderRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("InvoiceRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("DataResourceRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("ContentRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("FinAccountRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("ProductStoreRole",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.storeByCondition("CommunicationEventRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  try {
    delegator.removeByAnd("PartyRole",UtilMisc.toMap("partyId",partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  List<GenericValue> attrsToMove;
  try {
    attrsToMove=delegator.findByAnd("PartyAttribute",UtilMisc.toMap("partyId",partyId),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  for (  GenericValue attr : attrsToMove) {
    attr.set("partyId",partyIdTo);
    try {
      if (delegator.findOne("PartyAttribute",attr.getPrimaryKey(),false) == null) {
        attr.create();
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  try {
    delegator.removeByAnd("PartyAttribute",UtilMisc.toMap("partyId",partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  GenericValue linkAttr=delegator.makeValue("PartyAttribute");
  linkAttr.set("partyId",partyId);
  linkAttr.set("attrName","LINKED_TO");
  linkAttr.set("attrValue",partyIdTo);
  try {
    delegator.create(linkAttr);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  String currentStatus=party.getString("statusId");
  if (currentStatus == null || !"PARTY_DISABLED".equals(currentStatus)) {
    party.set("statusId","PARTY_DISABLED");
    try {
      party.store();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error setting disable mode on partyId: " + partyId,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  Map<String,Object> resp=ServiceUtil.returnSuccess();
  resp.put("partyId",partyIdTo);
  return resp;
}
