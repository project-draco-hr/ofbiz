{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=dctx.getDelegator();
  Collection<Map<String,GenericValue>> parties=new LinkedList<Map<String,GenericValue>>();
  String email=(String)context.get("email");
  Locale locale=(Locale)context.get("locale");
  if (email.length() == 0) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.required_parameter_email_cannot_be_empty",locale));
  }
  try {
    List<GenericValue> c=EntityQuery.use(delegator).from("PartyAndContactMech").where(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("infoString"),EntityOperator.EQUALS,EntityFunction.UPPER(email.toUpperCase()))).orderBy("infoString").filterByDate().queryList();
    if (Debug.verboseOn())     Debug.logVerbose("List: " + c,module);
    if (Debug.infoOn())     Debug.logInfo("PartyFromEmail number found: " + c.size(),module);
    if (c != null) {
      for (      GenericValue pacm : c) {
        GenericValue party=delegator.makeValue("Party",UtilMisc.toMap("partyId",pacm.get("partyId"),"partyTypeId",pacm.get("partyTypeId")));
        parties.add(UtilMisc.<String,GenericValue>toMap("party",party));
      }
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_get_party_entities_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));
  }
  if (parties.size() > 0)   result.put("parties",parties);
  return result;
}
