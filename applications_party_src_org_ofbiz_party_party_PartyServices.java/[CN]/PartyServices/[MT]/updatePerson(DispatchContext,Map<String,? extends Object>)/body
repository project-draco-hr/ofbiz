{
  Map<String,Object> result=FastMap.newInstance();
  GenericDelegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String partyId=getPartyId(context);
  if (UtilValidate.isEmpty(partyId)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.party_id_missing",locale));
  }
  GenericValue person=null;
  GenericValue party=null;
  try {
    person=delegator.findByPrimaryKey("Person",UtilMisc.toMap("partyId",partyId));
    party=delegator.findByPrimaryKey("Party",UtilMisc.toMap("partyId",partyId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"person.update.read_failure",new Object[]{e.getMessage()},locale));
  }
  if (person == null || party == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"person.update.not_found",locale));
  }
  person.setNonPKFields(context);
  party.setNonPKFields(context);
  try {
    person.store();
    party.store();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"person.update.write_failure",new Object[]{e.getMessage()},locale));
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"person.update.success",locale));
  return result;
}
