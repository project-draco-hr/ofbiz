{
  Delegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String partyId=(String)context.get("partyId");
  String dataSourceId=(String)context.get("dataSourceId");
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  if (fromDate == null)   fromDate=UtilDateTime.nowTimestamp();
  try {
    GenericValue party=delegator.findOne("Party",UtilMisc.toMap("partyId",partyId),false);
    GenericValue dataSource=delegator.findOne("DataSource",UtilMisc.toMap("dataSourceId",dataSourceId),false);
    if (party == null || dataSource == null) {
      List<String> errorList=UtilMisc.toList(UtilProperties.getMessage(resource,"PartyCannotCreatePartyDataSource",locale));
      if (party == null) {
        errorList.add(UtilProperties.getMessage(resource,"PartyNoPartyFoundWithPartyId",locale) + partyId);
      }
      if (dataSource == null) {
        errorList.add(UtilProperties.getMessage(resource,"PartyNoPartyWithDataSourceId",UtilMisc.toMap("dataSourceId",dataSourceId),locale));
      }
      return ServiceUtil.returnError(errorList);
    }
    GenericValue partyDataSource=delegator.makeValue("PartyDataSource",UtilMisc.toMap("partyId",partyId,"dataSourceId",dataSourceId,"fromDate",fromDate));
    partyDataSource.create();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,e.getMessage(),module);
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
