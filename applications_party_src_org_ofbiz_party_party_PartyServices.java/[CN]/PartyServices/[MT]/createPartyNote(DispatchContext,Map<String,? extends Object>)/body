{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String noteString=(String)context.get("note");
  String partyId=(String)context.get("partyId");
  String noteId=(String)context.get("noteId");
  String noteName=(String)context.get("noteName");
  Locale locale=(Locale)context.get("locale");
  if (noteId != null) {
    try {
      GenericValue value=delegator.findByPrimaryKey("NoteData",UtilMisc.toMap("noteId",noteId));
      if (value == null) {
        Debug.logError("ERROR: Note id does not exist for : " + noteId + ", autogenerating.",module);
        noteId=null;
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"ERROR: Note id does not exist for : " + noteId + ", autogenerating.",module);
      noteId=null;
    }
  }
  if (noteId == null) {
    Map<String,Object> noteRes=null;
    try {
      noteRes=dispatcher.runSync("createNote",UtilMisc.toMap("partyId",userLogin.getString("partyId"),"note",noteString,"userLogin",userLogin,"locale",locale,"noteName",noteName));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,e.getMessage(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyNoteCreationError",UtilMisc.toMap("errorString",e.getMessage()),locale));
    }
    if (noteRes.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))     return noteRes;
    noteId=(String)noteRes.get("noteId");
    if (UtilValidate.isEmpty(noteId)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.problem_creating_note_no_noteId_returned",locale));
    }
  }
  result.put("noteId",noteId);
  try {
    Map<String,String> fields=UtilMisc.toMap("partyId",partyId,"noteId",noteId);
    GenericValue v=delegator.makeValue("PartyNote",fields);
    delegator.create(v);
  }
 catch (  GenericEntityException ee) {
    Debug.logError(ee,module);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resourceError,"partyservices.problem_associating_note_with_party",UtilMisc.toMap("errMessage",ee.getMessage()),locale));
  }
  return result;
}
