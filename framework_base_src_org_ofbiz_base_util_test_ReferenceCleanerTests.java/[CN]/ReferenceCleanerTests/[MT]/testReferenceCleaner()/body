{
  assertStaticHelperClass(ReferenceCleaner.class);
  final SynchronousQueue<String> queue=new SynchronousQueue<String>();
  Object obj=new Object();
  final CountDownLatch softLatch=new CountDownLatch(1);
  ReferenceCleaner.Soft<Object> soft=new ReferenceCleaner.Soft<Object>(obj){
    public void remove() throws Exception {
      queue.put("soft");
      Thread.currentThread().interrupt();
    }
  }
;
  final CountDownLatch weakLatch=new CountDownLatch(1);
  ReferenceCleaner.Weak<Object> weak=new ReferenceCleaner.Weak<Object>(obj){
    public void remove() throws Exception {
      queue.put("weak");
      throw new RuntimeException();
    }
  }
;
  final CountDownLatch phantomLatch=new CountDownLatch(1);
  ReferenceCleaner.Phantom<Object> phantom=new ReferenceCleaner.Phantom<Object>(obj){
    public void remove() throws Exception {
      queue.put("phantom");
    }
  }
;
  HashSet<String> foundEvents=new HashSet<String>();
  useAllMemory();
  assertSame("still-soft",obj,soft.get());
  assertSame("still-weak",obj,weak.get());
  assertNull("no event",queue.poll(100,TimeUnit.MILLISECONDS));
  obj=null;
  useAllMemory();
  foundEvents.add(queue.poll(100,TimeUnit.MILLISECONDS));
  foundEvents.add(queue.poll(100,TimeUnit.MILLISECONDS));
  foundEvents.add(queue.poll(100,TimeUnit.MILLISECONDS));
  useAllMemory();
  foundEvents.add(queue.poll(100,TimeUnit.MILLISECONDS));
  foundEvents.remove(null);
  assertFalse("no null",foundEvents.contains(null));
  assertNull("no-soft",soft.get());
  assertNull("no-weak",weak.get());
  assertTrue("soft event",foundEvents.contains("soft"));
  assertTrue("weak event",foundEvents.contains("weak"));
  assertTrue("phantom event",foundEvents.contains("phantom"));
}
