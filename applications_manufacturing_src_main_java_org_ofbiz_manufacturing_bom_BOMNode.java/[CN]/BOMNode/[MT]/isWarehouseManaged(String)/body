{
  boolean isWarehouseManaged=false;
  try {
    if ("WIP".equals(getProduct().getString("productTypeId"))) {
      return false;
    }
    List<GenericValue> pfs=null;
    if (UtilValidate.isEmpty(facilityId)) {
      pfs=getProduct().getRelated("ProductFacility",null,null,true);
    }
 else {
      pfs=getProduct().getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true);
    }
    if (UtilValidate.isEmpty(pfs)) {
      if (getSubstitutedNode() != null && getSubstitutedNode().getProduct() != null) {
        if (UtilValidate.isEmpty(facilityId)) {
          pfs=getSubstitutedNode().getProduct().getRelated("ProductFacility",null,null,true);
        }
 else {
          pfs=getSubstitutedNode().getProduct().getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true);
        }
      }
    }
    if (UtilValidate.isNotEmpty(pfs)) {
      for (int i=0; i < pfs.size(); i++) {
        GenericValue pf=pfs.get(i);
        if (UtilValidate.isNotEmpty(pf.get("minimumStock")) && UtilValidate.isNotEmpty(pf.get("reorderQuantity"))) {
          isWarehouseManaged=true;
          break;
        }
      }
    }
  }
 catch (  GenericEntityException gee) {
    Debug.logError("Problem in BOMNode.isWarehouseManaged()",module);
  }
  return isWarehouseManaged;
}
