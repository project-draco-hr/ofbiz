{
  List<Map<String,Object>> orders=null;
  try {
    Document docResponse=UtilXml.readXmlDocument(msg,true);
    Element elemResponse=docResponse.getDocumentElement();
    String ack=UtilXml.childElementValue(elemResponse,"Ack","Failure");
    List<? extends Element> paginationList=UtilXml.childElementList(elemResponse,"PaginationResult");
    int totalOrders=0;
    Iterator<? extends Element> paginationElemIter=paginationList.iterator();
    while (paginationElemIter.hasNext()) {
      Element paginationElement=paginationElemIter.next();
      String totalNumberOfEntries=UtilXml.childElementValue(paginationElement,"TotalNumberOfEntries","0");
      totalOrders=Integer.valueOf(totalNumberOfEntries);
    }
    if (ack != null && "Success".equals(ack)) {
      orders=new LinkedList<Map<String,Object>>();
      if (totalOrders > 0) {
        List<? extends Element> transactions=UtilXml.childElementList(elemResponse,"TransactionArray");
        Iterator<? extends Element> transactionsElemIter=transactions.iterator();
        while (transactionsElemIter.hasNext()) {
          Element transactionsElement=transactionsElemIter.next();
          List<? extends Element> transaction=UtilXml.childElementList(transactionsElement,"Transaction");
          Iterator<? extends Element> transactionElemIter=transaction.iterator();
          while (transactionElemIter.hasNext()) {
            Map<String,Object> order=new HashMap<String,Object>();
            String itemId="";
            Element transactionElement=transactionElemIter.next();
            List<? extends Element> containingOrders=UtilXml.childElementList(transactionElement,"ContainingOrder");
            if (UtilValidate.isNotEmpty(containingOrders)) {
              continue;
            }
            order.put("amountPaid",UtilXml.childElementValue(transactionElement,"AmountPaid","0"));
            List<? extends Element> buyer=UtilXml.childElementList(transactionElement,"Buyer");
            Iterator<? extends Element> buyerElemIter=buyer.iterator();
            while (buyerElemIter.hasNext()) {
              Element buyerElement=buyerElemIter.next();
              order.put("emailBuyer",UtilXml.childElementValue(buyerElement,"Email",""));
              order.put("eiasTokenBuyer",UtilXml.childElementValue(buyerElement,"EIASToken",""));
              order.put("ebayUserIdBuyer",UtilXml.childElementValue(buyerElement,"UserID",""));
              List<? extends Element> buyerInfo=UtilXml.childElementList(buyerElement,"BuyerInfo");
              Iterator<? extends Element> buyerInfoElemIter=buyerInfo.iterator();
              while (buyerInfoElemIter.hasNext()) {
                Element buyerInfoElement=buyerInfoElemIter.next();
                List<? extends Element> shippingAddressInfo=UtilXml.childElementList(buyerInfoElement,"ShippingAddress");
                Iterator<? extends Element> shippingAddressElemIter=shippingAddressInfo.iterator();
                while (shippingAddressElemIter.hasNext()) {
                  Element shippingAddressElement=shippingAddressElemIter.next();
                  order.put("buyerName",UtilXml.childElementValue(shippingAddressElement,"Name",""));
                  order.put("shippingAddressStreet",UtilXml.childElementValue(shippingAddressElement,"Street",""));
                  order.put("shippingAddressStreet1",UtilXml.childElementValue(shippingAddressElement,"Street1",""));
                  order.put("shippingAddressStreet2",UtilXml.childElementValue(shippingAddressElement,"Street2",""));
                  order.put("shippingAddressCityName",UtilXml.childElementValue(shippingAddressElement,"CityName",""));
                  order.put("shippingAddressStateOrProvince",UtilXml.childElementValue(shippingAddressElement,"StateOrProvince",""));
                  order.put("shippingAddressCountry",UtilXml.childElementValue(shippingAddressElement,"Country",""));
                  order.put("shippingAddressCountryName",UtilXml.childElementValue(shippingAddressElement,"CountryName",""));
                  order.put("shippingAddressPhone",UtilXml.childElementValue(shippingAddressElement,"Phone",""));
                  order.put("shippingAddressPostalCode",UtilXml.childElementValue(shippingAddressElement,"PostalCode",""));
                }
              }
            }
            List<? extends Element> shippingDetails=UtilXml.childElementList(transactionElement,"ShippingDetails");
            Iterator<? extends Element> shippingDetailsElemIter=shippingDetails.iterator();
            while (shippingDetailsElemIter.hasNext()) {
              Element shippingDetailsElement=shippingDetailsElemIter.next();
              order.put("insuranceFee",UtilXml.childElementValue(shippingDetailsElement,"InsuranceFee","0"));
              order.put("insuranceOption",UtilXml.childElementValue(shippingDetailsElement,"InsuranceOption",""));
              order.put("insuranceWanted",UtilXml.childElementValue(shippingDetailsElement,"InsuranceWanted","false"));
              List<? extends Element> salesTax=UtilXml.childElementList(shippingDetailsElement,"SalesTax");
              Iterator<? extends Element> salesTaxElemIter=salesTax.iterator();
              while (salesTaxElemIter.hasNext()) {
                Element salesTaxElement=salesTaxElemIter.next();
                order.put("salesTaxAmount",UtilXml.childElementValue(salesTaxElement,"SalesTaxAmount","0"));
                order.put("salesTaxPercent",UtilXml.childElementValue(salesTaxElement,"SalesTaxPercent","0"));
                order.put("salesTaxState",UtilXml.childElementValue(salesTaxElement,"SalesTaxState","0"));
                order.put("shippingIncludedInTax",UtilXml.childElementValue(salesTaxElement,"ShippingIncludedInTax","false"));
              }
              List<? extends Element> taxTable=UtilXml.childElementList(shippingDetailsElement,"TaxTable");
              Iterator<? extends Element> taxTableElemIter=taxTable.iterator();
              while (taxTableElemIter.hasNext()) {
                Element taxTableElement=taxTableElemIter.next();
                List<? extends Element> taxJurisdiction=UtilXml.childElementList(taxTableElement,"TaxJurisdiction");
                Iterator<? extends Element> taxJurisdictionElemIter=taxJurisdiction.iterator();
                while (taxJurisdictionElemIter.hasNext()) {
                  Element taxJurisdictionElement=taxJurisdictionElemIter.next();
                  order.put("jurisdictionID",UtilXml.childElementValue(taxJurisdictionElement,"JurisdictionID",""));
                  order.put("jurisdictionSalesTaxPercent",UtilXml.childElementValue(taxJurisdictionElement,"SalesTaxPercent","0"));
                  order.put("jurisdictionShippingIncludedInTax",UtilXml.childElementValue(taxJurisdictionElement,"ShippingIncludedInTax","0"));
                }
              }
            }
            order.put("createdDate",UtilXml.childElementValue(transactionElement,"CreatedDate",""));
            List<? extends Element> item=UtilXml.childElementList(transactionElement,"Item");
            Iterator<? extends Element> itemElemIter=item.iterator();
            while (itemElemIter.hasNext()) {
              Element itemElement=itemElemIter.next();
              itemId=UtilXml.childElementValue(itemElement,"ItemID","");
              order.put("paymentMethods",UtilXml.childElementValue(itemElement,"PaymentMethods",""));
              order.put("quantity",UtilXml.childElementValue(itemElement,"Quantity","0"));
              order.put("startPrice",UtilXml.childElementValue(itemElement,"StartPrice","0"));
              order.put("title",UtilXml.childElementValue(itemElement,"Title",""));
              String productId=UtilXml.childElementValue(itemElement,"SKU","");
              if (UtilValidate.isEmpty(productId)) {
                productId=UtilXml.childElementValue(itemElement,"ApplicationData","");
                if (UtilValidate.isEmpty(productId)) {
                  productId=EbayHelper.retrieveProductIdFromTitle(delegator,(String)order.get("title"));
                }
              }
              order.put("productId",productId);
              List<? extends Element> sellingStatus=UtilXml.childElementList(itemElement,"SellingStatus");
              Iterator<? extends Element> sellingStatusitemElemIter=sellingStatus.iterator();
              while (sellingStatusitemElemIter.hasNext()) {
                Element sellingStatusElement=sellingStatusitemElemIter.next();
                order.put("amount",UtilXml.childElementValue(sellingStatusElement,"CurrentPrice","0"));
                order.put("quantitySold",UtilXml.childElementValue(sellingStatusElement,"QuantitySold","0"));
                order.put("listingStatus",UtilXml.childElementValue(sellingStatusElement,"ListingStatus",""));
              }
            }
            order.put("quantityPurchased",UtilXml.childElementValue(transactionElement,"QuantityPurchased","0"));
            List<? extends Element> status=UtilXml.childElementList(transactionElement,"Status");
            Iterator<? extends Element> statusElemIter=status.iterator();
            while (statusElemIter.hasNext()) {
              Element statusElement=statusElemIter.next();
              order.put("eBayPaymentStatus",UtilXml.childElementValue(statusElement,"eBayPaymentStatus",""));
              order.put("checkoutStatus",UtilXml.childElementValue(statusElement,"CheckoutStatus",""));
              order.put("paymentMethodUsed",UtilXml.childElementValue(statusElement,"PaymentMethodUsed",""));
              order.put("completeStatus",UtilXml.childElementValue(statusElement,"CompleteStatus",""));
              order.put("buyerSelectedShipping",UtilXml.childElementValue(statusElement,"BuyerSelectedShipping",""));
            }
            String transactionId=UtilXml.childElementValue(transactionElement,"TransactionID","");
            if ("0".equals(transactionId)) {
              order.put("externalId","EBI_" + itemId);
            }
 else {
              order.put("externalId","EBT_" + transactionId);
            }
            order.put("transactionId","EBI_" + itemId);
            GenericValue orderExist=externalOrderExists(delegator,(String)order.get("externalId"));
            if (orderExist != null) {
              order.put("orderId",orderExist.get("orderId"));
            }
 else {
              order.put("orderId","");
            }
            order.put("transactionPrice",UtilXml.childElementValue(transactionElement,"TransactionPrice","0"));
            List<? extends Element> externalTransaction=UtilXml.childElementList(transactionElement,"ExternalTransaction");
            Iterator<? extends Element> externalTransactionElemIter=externalTransaction.iterator();
            while (externalTransactionElemIter.hasNext()) {
              Element externalTransactionElement=externalTransactionElemIter.next();
              order.put("externalTransactionID",UtilXml.childElementValue(externalTransactionElement,"ExternalTransactionID",""));
              order.put("externalTransactionTime",UtilXml.childElementValue(externalTransactionElement,"ExternalTransactionTime",""));
              order.put("feeOrCreditAmount",UtilXml.childElementValue(externalTransactionElement,"FeeOrCreditAmount","0"));
              order.put("paymentOrRefundAmount",UtilXml.childElementValue(externalTransactionElement,"PaymentOrRefundAmount","0"));
            }
            List<? extends Element> shippingServiceSelected=UtilXml.childElementList(transactionElement,"ShippingServiceSelected");
            Iterator<? extends Element> shippingServiceSelectedElemIter=shippingServiceSelected.iterator();
            while (shippingServiceSelectedElemIter.hasNext()) {
              Element shippingServiceSelectedElement=shippingServiceSelectedElemIter.next();
              order.put("shippingService",UtilXml.childElementValue(shippingServiceSelectedElement,"ShippingService",""));
              order.put("shippingServiceCost",UtilXml.childElementValue(shippingServiceSelectedElement,"ShippingServiceCost","0"));
              String incuranceCost=UtilXml.childElementValue(shippingServiceSelectedElement,"ShippingInsuranceCost","0");
              String additionalCost=UtilXml.childElementValue(shippingServiceSelectedElement,"ShippingServiceAdditionalCost","0");
              String surchargeCost=UtilXml.childElementValue(shippingServiceSelectedElement,"ShippingSurcharge","0");
              double shippingInsuranceCost=0;
              double shippingServiceAdditionalCost=0;
              double shippingSurcharge=0;
              if (UtilValidate.isNotEmpty(incuranceCost)) {
                shippingInsuranceCost=new Double(incuranceCost).doubleValue();
              }
              if (UtilValidate.isNotEmpty(additionalCost)) {
                shippingServiceAdditionalCost=new Double(additionalCost).doubleValue();
              }
              if (UtilValidate.isNotEmpty(surchargeCost)) {
                shippingSurcharge=new Double(surchargeCost).doubleValue();
              }
              double shippingTotalAdditionalCost=shippingInsuranceCost + shippingServiceAdditionalCost + shippingSurcharge;
              String totalAdditionalCost=new Double(shippingTotalAdditionalCost).toString();
              order.put("shippingTotalAdditionalCost",totalAdditionalCost);
            }
            order.put("paidTime",UtilXml.childElementValue(transactionElement,"PaidTime",""));
            order.put("shippedTime",UtilXml.childElementValue(transactionElement,"ShippedTime",""));
            order.put("productStoreId",productStoreId);
            orders.add(order);
          }
        }
      }
    }
 else {
      List<? extends Element> errorList=UtilXml.childElementList(elemResponse,"Errors");
      Iterator<? extends Element> errorElemIter=errorList.iterator();
      while (errorElemIter.hasNext()) {
        Element errorElement=errorElemIter.next();
        errorMessage.append(UtilXml.childElementValue(errorElement,"ShortMessage",""));
      }
    }
  }
 catch (  Exception e) {
    Debug.logError("Exception during read response from Ebay",module);
  }
  return orders;
}
