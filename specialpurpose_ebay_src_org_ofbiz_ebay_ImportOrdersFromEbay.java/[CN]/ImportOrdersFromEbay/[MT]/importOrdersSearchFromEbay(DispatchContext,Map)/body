{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  Map result=FastMap.newInstance();
  try {
    String configString="ebayExport.properties";
    String devID=UtilProperties.getPropertyValue(configString,"eBayExport.devID");
    String appID=UtilProperties.getPropertyValue(configString,"eBayExport.appID");
    String certID=UtilProperties.getPropertyValue(configString,"eBayExport.certID");
    String token=UtilProperties.getPropertyValue(configString,"eBayExport.token");
    String compatibilityLevel=UtilProperties.getPropertyValue(configString,"eBayExport.compatibilityLevel");
    String siteID=UtilProperties.getPropertyValue(configString,"eBayExport.siteID");
    String xmlGatewayUri=UtilProperties.getPropertyValue(configString,"eBayExport.xmlGatewayUri");
    StringBuffer sellerTransactionsItemsXml=new StringBuffer();
    if (!ServiceUtil.isFailure(buildGetSellerTransactionsRequest(context,sellerTransactionsItemsXml,token))) {
      result=postItem(xmlGatewayUri,sellerTransactionsItemsXml,devID,appID,certID,"GetSellerTransactions",compatibilityLevel,siteID);
      String success=(String)result.get(ModelService.SUCCESS_MESSAGE);
      if (success != null) {
        result=checkOrders(delegator,dispatcher,locale,context,success);
      }
    }
  }
 catch (  Exception e) {
    Debug.logError("Exception in importOrdersSearchFromEbay " + e,module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.exceptionInImportOrdersSearchFromEbay",locale));
  }
  return result;
}
