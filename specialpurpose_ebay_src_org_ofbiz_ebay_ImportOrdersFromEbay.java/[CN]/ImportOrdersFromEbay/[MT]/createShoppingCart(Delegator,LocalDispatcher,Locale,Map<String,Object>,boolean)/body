{
  try {
    String productStoreId=(String)parameters.get("productStoreId");
    GenericValue userLogin=(GenericValue)parameters.get("userLogin");
    String defaultCurrencyUomId="";
    String payToPartyId="";
    String facilityId="";
    if (productStoreId == null) {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.productStoreIdIsMandatory",locale));
    }
 else {
      GenericValue productStore=delegator.findOne("ProductStore",UtilMisc.toMap("productStoreId",productStoreId),false);
      if (productStore != null) {
        defaultCurrencyUomId=productStore.getString("defaultCurrencyUomId");
        payToPartyId=productStore.getString("payToPartyId");
        facilityId=productStore.getString("inventoryFacilityId");
      }
 else {
        return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.productStoreIdIsMandatory",locale));
      }
    }
    ShoppingCart cart=new ShoppingCart(delegator,productStoreId,locale,defaultCurrencyUomId);
    String externalId=(String)parameters.get("externalId");
    if (UtilValidate.isNotEmpty(externalId)) {
      if (externalOrderExists(delegator,externalId) != null && create) {
        return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.externalIdAlreadyExist",locale));
      }
      cart.setExternalId(externalId);
    }
 else {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.externalIdNotAvailable",locale));
    }
    cart.setOrderType("SALES_ORDER");
    cart.setChannelType("EBAY_SALES_CHANNEL");
    cart.setUserLogin(userLogin,dispatcher);
    cart.setProductStoreId(productStoreId);
    if (UtilValidate.isNotEmpty(facilityId)) {
      cart.setFacilityId(facilityId);
    }
    String amountStr=(String)parameters.get("amountPaid");
    BigDecimal amountPaid=BigDecimal.ZERO;
    if (UtilValidate.isNotEmpty(amountStr)) {
      amountPaid=new BigDecimal(amountStr);
    }
    cart.addPaymentAmount("EXT_EBAY",amountPaid,externalId,null,true,false,false);
    Timestamp orderDate=UtilDateTime.nowTimestamp();
    if (UtilValidate.isNotEmpty(parameters.get("createdDate"))) {
      SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
      Date createdDate=sdf.parse((String)parameters.get("createdDate"));
      orderDate=new Timestamp(createdDate.getTime());
    }
    cart.setOrderDate(orderDate);
    String productId=(String)parameters.get("productId");
    if (UtilValidate.isEmpty(productId)) {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.productIdNotAvailable",locale));
    }
 else {
      GenericValue product=delegator.findOne("Product",UtilMisc.toMap("productId",productId),false);
      if (UtilValidate.isEmpty(product)) {
        return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.productIdDoesNotExist",locale));
      }
    }
    String paidTime=(String)parameters.get("paidTime");
    if (UtilValidate.isEmpty(paidTime)) {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.paymentIsStillNotReceived",locale));
    }
    BigDecimal unitPrice=new BigDecimal((String)parameters.get("transactionPrice"));
    BigDecimal quantity=new BigDecimal((String)parameters.get("quantityPurchased"));
    cart.addItemToEnd(productId,null,quantity,unitPrice,null,null,null,"PRODUCT_ORDER_ITEM",dispatcher,Boolean.FALSE,Boolean.FALSE);
    if (UtilValidate.isNotEmpty(payToPartyId)) {
      cart.setBillFromVendorPartyId(payToPartyId);
    }
    String shippingCost=(String)parameters.get("shippingServiceCost");
    if (UtilValidate.isNotEmpty(shippingCost)) {
      double shippingAmount=new Double(shippingCost).doubleValue();
      if (shippingAmount > 0) {
        GenericValue shippingAdjustment=EbayHelper.makeOrderAdjustment(delegator,"SHIPPING_CHARGES",cart.getOrderId(),null,null,shippingAmount,0.0);
        if (shippingAdjustment != null) {
          cart.addAdjustment(shippingAdjustment);
        }
      }
    }
    String shippingTotalAdditionalCost=(String)parameters.get("shippingTotalAdditionalCost");
    if (UtilValidate.isNotEmpty(shippingTotalAdditionalCost)) {
      double shippingAdditionalCost=new Double(shippingTotalAdditionalCost).doubleValue();
      if (shippingAdditionalCost > 0) {
        GenericValue shippingAdjustment=EbayHelper.makeOrderAdjustment(delegator,"MISCELLANEOUS_CHARGE",cart.getOrderId(),null,null,shippingAdditionalCost,0.0);
        if (shippingAdjustment != null) {
          cart.addAdjustment(shippingAdjustment);
        }
      }
    }
    String salesTaxAmount=(String)parameters.get("salesTaxAmount");
    String salesTaxPercent=(String)parameters.get("salesTaxPercent");
    if (UtilValidate.isNotEmpty(salesTaxAmount)) {
      double salesTaxAmountTotal=new Double(salesTaxAmount).doubleValue();
      if (salesTaxAmountTotal > 0) {
        double salesPercent=0.0;
        if (UtilValidate.isNotEmpty(salesTaxPercent)) {
          salesPercent=new Double(salesTaxPercent).doubleValue();
        }
        GenericValue salesTaxAdjustment=EbayHelper.makeOrderAdjustment(delegator,"SALES_TAX",cart.getOrderId(),null,null,salesTaxAmountTotal,salesPercent);
        if (salesTaxAdjustment != null) {
          cart.addAdjustment(salesTaxAdjustment);
        }
      }
    }
    if (create) {
      Debug.logInfo("Importing new order from eBay",module);
      String partyId=null;
      String contactMechId="";
      GenericValue partyAttribute=null;
      if (UtilValidate.isNotEmpty(parameters.get("eiasTokenBuyer"))) {
        partyAttribute=EntityUtil.getFirst(delegator.findByAnd("PartyAttribute",UtilMisc.toMap("attrValue",(String)parameters.get("eiasTokenBuyer")),null,false));
      }
      if (UtilValidate.isNotEmpty(partyAttribute)) {
        partyId=(String)partyAttribute.get("partyId");
        Debug.logInfo("Found existing party associated to the eBay buyer: " + partyId,module);
        GenericValue party=delegator.findOne("Party",UtilMisc.toMap("partyId",partyId),false);
        contactMechId=EbayHelper.setShippingAddressContactMech(dispatcher,delegator,party,userLogin,parameters);
        String emailBuyer=(String)parameters.get("emailBuyer");
        if (!(emailBuyer.equals("") || emailBuyer.equalsIgnoreCase("Invalid Request"))) {
          EbayHelper.setEmailContactMech(dispatcher,delegator,party,userLogin,parameters);
        }
        EbayHelper.setPhoneContactMech(dispatcher,delegator,party,userLogin,parameters);
      }
      if (UtilValidate.isEmpty(partyId)) {
        Debug.logInfo("Creating new party for the eBay buyer.",module);
        partyId=EbayHelper.createCustomerParty(dispatcher,(String)parameters.get("buyerName"),userLogin);
        if (UtilValidate.isEmpty(partyId)) {
          Debug.logWarning("Using admin party for the eBay buyer.",module);
          partyId="admin";
        }
      }
      if (UtilValidate.isEmpty(contactMechId)) {
        Debug.logInfo("Creating new postal address for party: " + partyId,module);
        contactMechId=EbayHelper.createAddress(dispatcher,partyId,userLogin,"SHIPPING_LOCATION",parameters);
        if (UtilValidate.isEmpty(contactMechId)) {
          return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"EbayUnableToCreatePostalAddress",locale) + parameters);
        }
        Debug.logInfo("Created postal address: " + contactMechId,module);
        Debug.logInfo("Creating new phone number for party: " + partyId,module);
        EbayHelper.createPartyPhone(dispatcher,partyId,(String)parameters.get("shippingAddressPhone"),userLogin);
        Debug.logInfo("Creating association to eBay buyer for party: " + partyId,module);
        EbayHelper.createEbayCustomer(dispatcher,partyId,(String)parameters.get("ebayUserIdBuyer"),(String)parameters.get("eiasTokenBuyer"),userLogin);
        String emailBuyer=(String)parameters.get("emailBuyer");
        if (UtilValidate.isNotEmpty(emailBuyer) && !emailBuyer.equalsIgnoreCase("Invalid Request")) {
          Debug.logInfo("Creating new email for party: " + partyId,module);
          EbayHelper.createPartyEmail(dispatcher,partyId,emailBuyer,userLogin);
        }
      }
      Debug.logInfo("Setting cart roles for party: " + partyId,module);
      cart.setBillToCustomerPartyId(partyId);
      cart.setPlacingCustomerPartyId(partyId);
      cart.setShipToCustomerPartyId(partyId);
      cart.setEndUserCustomerPartyId(partyId);
      Debug.logInfo("Setting contact mech in cart: " + contactMechId,module);
      cart.setAllShippingContactMechId(contactMechId);
      cart.setAllMaySplit(Boolean.FALSE);
      Debug.logInfo("Setting shipment method: " + (String)parameters.get("shippingService"),module);
      EbayHelper.setShipmentMethodType(cart,(String)parameters.get("shippingService"),productStoreId,delegator);
      cart.makeAllShipGroupInfos();
      Debug.logInfo("Creating CheckOutHelper.",module);
      CheckOutHelper checkout=new CheckOutHelper(dispatcher,delegator,cart);
      Debug.logInfo("Creating order.",module);
      Map<String,Object> orderCreate=checkout.createOrder(userLogin);
      String orderId=(String)orderCreate.get("orderId");
      Debug.logInfo("Created order with id: " + orderId,module);
      if (UtilValidate.isNotEmpty(orderId)) {
        Debug.logInfo("Approving order with id: " + orderId,module);
        boolean approved=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);
        Debug.logInfo("Order approved with result: " + approved,module);
        if (approved) {
          Debug.logInfo("Creating payment for approved order.",module);
          EbayHelper.createPaymentFromPaymentPreferences(delegator,dispatcher,userLogin,orderId,externalId,cart.getOrderDate(),amountPaid,partyId);
          Debug.logInfo("Payment created.",module);
        }
      }
    }
  }
 catch (  Exception e) {
    Debug.logError("Exception in createShoppingCart: " + e.getMessage(),module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.exceptionInCreateShoppingCart",locale) + ": " + e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
