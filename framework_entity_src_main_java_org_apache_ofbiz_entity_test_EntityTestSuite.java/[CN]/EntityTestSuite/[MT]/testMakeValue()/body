{
  GenericValue createdValue=delegator.create("TestingType","testingTypeId","TEST-MAKE-1","description","Testing Type #Make-1");
  assertTrue("Created value is mutable",createdValue.isMutable());
  assertFalse("Observable has not changed",createdValue.hasChanged());
  List<GenericValue> newValues=new LinkedList<GenericValue>();
  newValues.add(delegator.makeValue("TestingType","testingTypeId","TEST-MAKE-2","description","Testing Type #Make-2"));
  newValues.add(delegator.makeValue("TestingType","testingTypeId","TEST-MAKE-3","description","Testing Type #Make-3"));
  newValues.add(delegator.makeValue("TestingType","testingTypeId","TEST-MAKE-4","description","Testing Type #Make-4"));
  delegator.storeAll(newValues);
  List<GenericValue> newlyCreatedValues=EntityQuery.use(delegator).from("TestingType").where(EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-MAKE-%")).orderBy("testingTypeId").queryList();
  assertEquals("4 TestingTypes(for make) found",4,newlyCreatedValues.size());
}
