{
  delegator.removeByCondition("TestingType",EntityCondition.makeCondition("testingTypeId",EntityOperator.LIKE,"TEST-UPDATE-%"));
  GenericValue testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-UPDATE-1").queryOne();
  assertNull("No pre-existing type value",testValue);
  delegator.create("TestingType","testingTypeId","TEST-UPDATE-1","description","Testing Type #Update-1");
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-UPDATE-1").queryOne();
  assertEquals("Retrieved value has the correct description","Testing Type #Update-1",testValue.getString("description"));
  assertFalse("Observable has not changed",testValue.hasChanged());
  TestObserver observer=new TestObserver();
  testValue.addObserver(observer);
  testValue.put("description","New Testing Type #Update-1");
  assertEquals("Observer called with original GenericValue field name","description",observer.arg);
  observer.observable=null;
  observer.arg=null;
  GenericValue clonedValue=(GenericValue)testValue.clone();
  clonedValue.put("description","New Testing Type #Update-1");
  assertTrue("Cloned Observable has changed",clonedValue.hasChanged());
  assertEquals("Observer called with cloned GenericValue field name","description",observer.arg);
  testValue.store();
  assertFalse("Observable has not changed",testValue.hasChanged());
  testValue=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","TEST-UPDATE-1").queryOne();
  assertEquals("Retrieved value has the correct description","New Testing Type #Update-1",testValue.getString("description"));
}
