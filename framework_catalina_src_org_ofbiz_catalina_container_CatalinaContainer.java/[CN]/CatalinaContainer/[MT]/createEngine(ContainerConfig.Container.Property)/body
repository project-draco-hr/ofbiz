{
  if (tomcat == null) {
    throw new ContainerException("Cannot create Engine without Tomcat instance!");
  }
  ContainerConfig.Container.Property defaultHostProp=engineConfig.getProperty("default-host");
  if (defaultHostProp == null) {
    throw new ContainerException("default-host element of server property is required for catalina!");
  }
  String engineName=engineConfig.name;
  String hostName=defaultHostProp.value;
  StandardEngine engine=new StandardEngine();
  engine.setName(engineName);
  engine.setDefaultHost(hostName);
  String jvmRoute=ContainerConfig.getPropertyValue(engineConfig,"jvm-route",null);
  if (jvmRoute != null) {
    engine.setJvmRoute(jvmRoute);
  }
  String dbConfigPath=new File(System.getProperty("catalina.home"),"catalina-users.xml").getAbsolutePath();
  MemoryRealm realm=new MemoryRealm();
  realm.setPathname(dbConfigPath);
  engine.setRealm(realm);
  engines.put(engine.getName(),engine);
  Host host=createHost(engine,hostName);
  hosts.put(engineName + "._DEFAULT",host);
  engine.addChild(host);
  List<ContainerConfig.Container.Property> clusterProps=engineConfig.getPropertiesWithValue("cluster");
  if (clusterProps != null && clusterProps.size() > 1) {
    throw new ContainerException("Only one cluster configuration allowed per engine");
  }
  if (UtilValidate.isNotEmpty(clusterProps)) {
    ContainerConfig.Container.Property clusterProp=clusterProps.get(0);
    createCluster(clusterProp,host);
    clusterConfig.put(engineName,clusterProp);
  }
  boolean enableSessionValve=ContainerConfig.getPropertyValue(engineConfig,"enable-cross-subdomain-sessions",false);
  if (enableSessionValve) {
    CrossSubdomainSessionValve sessionValve=new CrossSubdomainSessionValve();
    engine.addValve(sessionValve);
  }
  String logDir=ContainerConfig.getPropertyValue(engineConfig,"access-log-dir",null);
  AccessLogValve al=null;
  if (logDir != null) {
    al=new AccessLogValve();
    if (!logDir.startsWith("/")) {
      logDir=System.getProperty("ofbiz.home") + "/" + logDir;
    }
    File logFile=new File(logDir);
    if (!logFile.isDirectory()) {
      throw new ContainerException("Log directory [" + logDir + "] is not available; make sure the directory is created");
    }
    al.setDirectory(logFile.getAbsolutePath());
  }
  String sslAcceleratorPortStr=ContainerConfig.getPropertyValue(engineConfig,"ssl-accelerator-port",null);
  if (UtilValidate.isNotEmpty(sslAcceleratorPortStr)) {
    Integer sslAcceleratorPort=Integer.valueOf(sslAcceleratorPortStr);
    SslAcceleratorValve sslAcceleratorValve=new SslAcceleratorValve();
    sslAcceleratorValve.setSslAcceleratorPort(sslAcceleratorPort);
    engine.addValve(sslAcceleratorValve);
  }
  String alp2=ContainerConfig.getPropertyValue(engineConfig,"access-log-pattern",null);
  if (al != null && !UtilValidate.isEmpty(alp2)) {
    al.setPattern(alp2);
  }
  String alp3=ContainerConfig.getPropertyValue(engineConfig,"access-log-prefix",null);
  if (al != null && !UtilValidate.isEmpty(alp3)) {
    al.setPrefix(alp3);
  }
  boolean alp5=ContainerConfig.getPropertyValue(engineConfig,"access-log-rotate",false);
  if (al != null) {
    al.setRotatable(alp5);
  }
  if (al != null) {
    engine.addValve(al);
  }
  tomcat.getService().setContainer(engine);
  return engine;
}
