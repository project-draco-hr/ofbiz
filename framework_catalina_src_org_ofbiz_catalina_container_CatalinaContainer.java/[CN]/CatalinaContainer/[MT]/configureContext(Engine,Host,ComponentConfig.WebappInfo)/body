{
  Map<String,String> initParameters=appInfo.getInitParameters();
  String location=appInfo.componentConfig.getRootLocation() + appInfo.location;
  location=location.replace('\\','/');
  if (location.endsWith("/")) {
    location=location.substring(0,location.length() - 1);
  }
  String mount=appInfo.mountPoint;
  if (mount.endsWith("/*")) {
    mount=mount.substring(0,mount.length() - 2);
  }
  final String webXmlFilePath=new StringBuilder().append("file:///").append(location).append("/WEB-INF/web.xml").toString();
  boolean appIsDistributable=distribute;
  URL webXmlUrl=null;
  try {
    webXmlUrl=FlexibleLocation.resolveLocation(webXmlFilePath);
  }
 catch (  MalformedURLException e) {
    throw new ContainerException(e);
  }
  File webXmlFile=new File(webXmlUrl.getFile());
  if (webXmlFile.exists()) {
    Document webXmlDoc=null;
    try {
      webXmlDoc=UtilXml.readXmlDocument(webXmlUrl);
    }
 catch (    Exception e) {
      throw new ContainerException(e);
    }
    appIsDistributable=webXmlDoc.getElementsByTagName("distributable").getLength() > 0;
  }
 else {
    Debug.logInfo(webXmlFilePath + " not found.",module);
  }
  final boolean contextIsDistributable=distribute && appIsDistributable;
  StandardContext context=new StandardContext();
  context.setParent(host);
  context.setDocBase(location);
  context.setPath(mount);
  context.addLifecycleListener(new ContextConfig());
  Tomcat.initWebappDefaults(context);
  Property clusterProp=clusterConfig.get(engine.getName());
  if (clusterProp != null && contextIsDistributable) {
    Manager sessionMgr=null;
    String mgrClassName=ContainerConfig.getPropertyValue(clusterProp,"manager-class","org.apache.catalina.ha.session.DeltaManager");
    try {
      sessionMgr=(Manager)Class.forName(mgrClassName).newInstance();
    }
 catch (    Exception exc) {
      throw new ContainerException("Cluster configuration requires a valid manager-class property: " + exc.getMessage());
    }
    context.setManager(sessionMgr);
  }
  JarScanner jarScanner=context.getJarScanner();
  if (jarScanner instanceof StandardJarScanner) {
    StandardJarScanner standardJarScanner=(StandardJarScanner)jarScanner;
    standardJarScanner.setScanClassPath(false);
  }
  context.setJ2EEApplication(J2EE_APP);
  context.setJ2EEServer(J2EE_SERVER);
  context.setLoader(new WebappLoader(Thread.currentThread().getContextClassLoader()));
  context.setDisplayName(appInfo.name);
  context.setDocBase(location);
  context.setAllowLinking(true);
  context.setReloadable(contextReloadable);
  context.setDistributable(contextIsDistributable);
  context.setCrossContext(crossContext);
  context.setPrivileged(appInfo.privileged);
  context.getServletContext().setAttribute("_serverId",appInfo.server);
  context.getServletContext().setAttribute("componentName",appInfo.componentConfig.getComponentName());
  String enableRequestDump=initParameters.get("enableRequestDump");
  if ("true".equals(enableRequestDump)) {
    FilterDef requestDumperFilterDef=new FilterDef();
    requestDumperFilterDef.setFilterClass(RequestDumperFilter.class.getName());
    requestDumperFilterDef.setFilterName("RequestDumper");
    FilterMap requestDumperFilterMap=new FilterMap();
    requestDumperFilterMap.setFilterName("RequestDumper");
    requestDumperFilterMap.addURLPattern("*");
    context.addFilterMap(requestDumperFilterMap);
  }
  for (  Map.Entry<String,String> entry : initParameters.entrySet()) {
    context.addParameter(entry.getKey(),entry.getValue());
  }
  return context;
}
