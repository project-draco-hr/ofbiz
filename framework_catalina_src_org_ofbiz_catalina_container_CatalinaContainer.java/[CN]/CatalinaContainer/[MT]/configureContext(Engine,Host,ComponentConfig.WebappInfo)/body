{
  Map<String,String> initParameters=appInfo.getInitParameters();
  String location=appInfo.componentConfig.getRootLocation() + appInfo.location;
  location=location.replace('\\','/');
  if (location.endsWith("/")) {
    location=location.substring(0,location.length() - 1);
  }
  String mount=appInfo.mountPoint;
  if (mount.endsWith("/*")) {
    mount=mount.substring(0,mount.length() - 2);
  }
  final String webXmlFilePath=new StringBuilder().append(location).append(File.separatorChar).append("WEB-INF").append(File.separatorChar).append("web.xml").toString();
  boolean appIsDistributable=false;
  try {
    appIsDistributable=FileUtil.containsString(webXmlFilePath,"<distributable/>");
  }
 catch (  IOException e) {
    Debug.logWarning(String.format("Failed to read web.xml [%s].",webXmlFilePath),module);
    appIsDistributable=false;
  }
  final boolean contextIsDistributable=distribute && appIsDistributable;
  Property clusterProp=clusterConfig.get(engine.getName());
  Manager sessionMgr=null;
  if (clusterProp != null && contextIsDistributable) {
    String mgrClassName=ContainerConfig.getPropertyValue(clusterProp,"manager-class","org.apache.catalina.ha.session.DeltaManager");
    try {
      sessionMgr=(Manager)Class.forName(mgrClassName).newInstance();
    }
 catch (    Exception exc) {
      throw new ContainerException("Cluster configuration requires a valid manager-class property: " + exc.getMessage());
    }
  }
 else {
    sessionMgr=new StandardManager();
  }
  StandardContext context=new StandardContext();
  context.setParent(host);
  context.setDocBase(location);
  context.setPath(mount);
  context.addLifecycleListener(new ContextConfig());
  JarScanner jarScanner=context.getJarScanner();
  if (jarScanner instanceof StandardJarScanner) {
    StandardJarScanner standardJarScanner=(StandardJarScanner)jarScanner;
    standardJarScanner.setScanClassPath(false);
  }
  Engine egn=(Engine)context.getParent().getParent();
  egn.setService(tomcat.getService());
  Debug.logInfo("host[" + host + "].addChild("+ context+ ")",module);
  context.setJ2EEApplication(J2EE_APP);
  context.setJ2EEServer(J2EE_SERVER);
  context.setLoader(new WebappLoader(ClassLoaderContainer.getClassLoader()));
  context.setCookies(appInfo.isSessionCookieAccepted());
  context.addParameter("cookies",appInfo.isSessionCookieAccepted() ? "true" : "false");
  context.setDisplayName(appInfo.name);
  context.setDocBase(location);
  context.setAllowLinking(true);
  context.setReloadable(contextReloadable);
  context.setDistributable(contextIsDistributable);
  context.setCrossContext(crossContext);
  context.setPrivileged(appInfo.privileged);
  context.setManager(sessionMgr);
  context.getServletContext().setAttribute("_serverId",appInfo.server);
  context.getServletContext().setAttribute("componentName",appInfo.componentConfig.getComponentName());
  String enableRequestDump=initParameters.get("enableRequestDump");
  if ("true".equals(enableRequestDump)) {
    FilterDef requestDumperFilterDef=new FilterDef();
    requestDumperFilterDef.setFilterClass(RequestDumperFilter.class.getName());
    requestDumperFilterDef.setFilterName("RequestDumper");
    FilterMap requestDumperFilterMap=new FilterMap();
    requestDumperFilterMap.setFilterName("RequestDumper");
    requestDumperFilterMap.addURLPattern("*");
    context.addFilterMap(requestDumperFilterMap);
  }
  StandardWrapper defaultServlet=new StandardWrapper();
  defaultServlet.setParent(context);
  defaultServlet.setServletClass("org.apache.catalina.servlets.DefaultServlet");
  defaultServlet.setServletName("default");
  defaultServlet.setLoadOnStartup(1);
  defaultServlet.addInitParameter("debug","0");
  defaultServlet.addInitParameter("listing","true");
  defaultServlet.addMapping("/");
  context.addChild(defaultServlet);
  context.addServletMapping("/","default");
  StandardWrapper jspServlet=new StandardWrapper();
  jspServlet.setParent(context);
  jspServlet.setServletClass("org.apache.jasper.servlet.JspServlet");
  jspServlet.setServletName("jsp");
  jspServlet.setLoadOnStartup(1);
  jspServlet.addInitParameter("fork","false");
  jspServlet.addInitParameter("xpoweredBy","true");
  jspServlet.addMapping("*.jsp");
  jspServlet.addMapping("*.jspx");
  context.addChild(jspServlet);
  context.addServletMapping("*.jsp","jsp");
  configureMimeTypes(context);
  for (  Map.Entry<String,String> entry : initParameters.entrySet()) {
    context.addParameter(entry.getKey(),entry.getValue());
  }
  context.setRealm(host.getRealm());
  host.addChild(context);
  context.getMapper().setDefaultHostName(host.getName());
  return context;
}
