{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String communicationEventId=(String)context.get("communicationEventId");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  List<Object> errorMessages=new LinkedList<Object>();
  try {
    GenericValue communicationEvent=EntityQuery.use(delegator).from("CommunicationEvent").where("communicationEventId",communicationEventId).queryOne();
    if (communicationEvent == null) {
      String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_not_found_failure",locale);
      return ServiceUtil.returnError(errMsg + " " + communicationEventId);
    }
    String communicationEventType=communicationEvent.getString("communicationEventTypeId");
    if (communicationEventType == null || !("EMAIL_COMMUNICATION".equals(communicationEventType) || "AUTO_EMAIL_COMM".equals(communicationEventType))) {
      String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_must_be_email_for_email",locale);
      return ServiceUtil.returnError(errMsg + " " + communicationEventId);
    }
    if ((communicationEvent.getRelatedOne("FromContactMech",false) == null) || (!(communicationEvent.getRelatedOne("FromContactMech",false).getString("contactMechTypeId").equals("EMAIL_ADDRESS")) || (communicationEvent.getRelatedOne("FromContactMech",false).getString("infoString") == null))) {
      String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_from_contact_mech_must_be_email",locale);
      return ServiceUtil.returnError(errMsg + " " + communicationEventId);
    }
    if (UtilValidate.isEmpty(communicationEvent.getString("subject"))) {
      communicationEvent.put("subject"," ");
    }
    if (UtilValidate.isEmpty(communicationEvent.getString("content"))) {
      communicationEvent.put("content"," ");
    }
    Map<String,Object> sendMailParams=new HashMap<String,Object>();
    sendMailParams.put("sendFrom",communicationEvent.getRelatedOne("FromContactMech",false).getString("infoString"));
    sendMailParams.put("subject",communicationEvent.getString("subject"));
    sendMailParams.put("contentType",communicationEvent.getString("contentMimeTypeId"));
    sendMailParams.put("userLogin",userLogin);
    Debug.logInfo("Sending communicationEvent: " + communicationEventId,module);
    boolean isMultiPart=false;
    List<GenericValue> comEventContents=EntityQuery.use(delegator).from("CommEventContentAssoc").where("communicationEventId",communicationEventId).filterByDate().queryList();
    if (UtilValidate.isNotEmpty(comEventContents)) {
      isMultiPart=true;
      List<Map<String,? extends Object>> bodyParts=new LinkedList<Map<String,? extends Object>>();
      if (UtilValidate.isNotEmpty(communicationEvent.getString("content"))) {
        bodyParts.add(UtilMisc.<String,Object>toMap("content",communicationEvent.getString("content"),"type",communicationEvent.getString("contentMimeTypeId")));
      }
      for (      GenericValue comEventContent : comEventContents) {
        GenericValue content=comEventContent.getRelatedOne("FromContent",false);
        GenericValue dataResource=content.getRelatedOne("DataResource",false);
        ByteBuffer dataContent=DataResourceWorker.getContentAsByteBuffer(delegator,dataResource.getString("dataResourceId"),null,null,locale,null);
        bodyParts.add(UtilMisc.<String,Object>toMap("content",dataContent.array(),"type",dataResource.getString("mimeTypeId"),"filename",dataResource.getString("dataResourceName")));
      }
      sendMailParams.put("bodyParts",bodyParts);
    }
 else {
      sendMailParams.put("body",communicationEvent.getString("content"));
    }
    if ((UtilValidate.isEmpty(communicationEvent.getString("contactListId")))) {
      String sendTo=communicationEvent.getString("toString");
      if (UtilValidate.isEmpty(sendTo)) {
        GenericValue toContactMech=communicationEvent.getRelatedOne("ToContactMech",false);
        if (toContactMech != null && "EMAIL_ADDRESS".equals(toContactMech.getString("contactMechTypeId"))) {
          sendTo=toContactMech.getString("infoString");
        }
      }
      if (UtilValidate.isEmpty(sendTo)) {
        String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_to_contact_mech_must_be_email",locale);
        return ServiceUtil.returnError(errMsg + " " + communicationEventId);
      }
      String sendCc=null;
      String sendBcc=null;
      List<GenericValue> commRoles=communicationEvent.getRelated("CommunicationEventRole",null,null,false);
      if (UtilValidate.isNotEmpty(commRoles)) {
        for (        GenericValue commRole : commRoles) {
          if (commRole.getString("partyId").equals(communicationEvent.getString("partyIdFrom")) || commRole.getString("partyId").equals(communicationEvent.getString("partyIdTo"))) {
            continue;
          }
          GenericValue contactMech=commRole.getRelatedOne("ContactMech",false);
          if (UtilValidate.isNotEmpty(contactMech) && UtilValidate.isNotEmpty(contactMech.getString("infoString"))) {
            if ("ADDRESSEE".equals(commRole.getString("roleTypeId"))) {
              sendTo+="," + contactMech.getString("infoString");
            }
 else             if ("CC".equals(commRole.getString("roleTypeId"))) {
              if (sendCc != null) {
                sendCc+="," + contactMech.getString("infoString");
              }
 else {
                sendCc=contactMech.getString("infoString");
              }
            }
 else             if ("BCC".equals(commRole.getString("roleTypeId"))) {
              if (sendBcc != null) {
                sendBcc+="," + contactMech.getString("infoString");
              }
 else {
                sendBcc=contactMech.getString("infoString");
              }
            }
          }
        }
      }
      sendMailParams.put("communicationEventId",communicationEventId);
      sendMailParams.put("sendTo",sendTo);
      if (sendCc != null) {
        sendMailParams.put("sendCc",sendCc);
      }
      if (sendBcc != null) {
        sendMailParams.put("sendBcc",sendBcc);
      }
      sendMailParams.put("partyId",communicationEvent.getString("partyIdTo"));
      Map<String,Object> tmpResult=null;
      if (isMultiPart) {
        tmpResult=dispatcher.runSync("sendMailMultiPart",sendMailParams,360,true);
      }
 else {
        tmpResult=dispatcher.runSync("sendMail",sendMailParams,360,true);
      }
      if (ServiceUtil.isError(tmpResult)) {
        if (ServiceUtil.getErrorMessage(tmpResult).startsWith("[ADDRERR]")) {
          communicationEvent.set("statusId","COM_BOUNCED");
          try {
            communicationEvent.store();
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
        }
 else {
          errorMessages.add(ServiceUtil.getErrorMessage(tmpResult));
        }
      }
 else {
        String messageId=(String)tmpResult.get("messageId");
        communicationEvent.set("messageId",messageId);
        try {
          communicationEvent.store();
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
        Map<String,Object> completeResult=dispatcher.runSync("setCommEventComplete",UtilMisc.<String,Object>toMap("communicationEventId",communicationEventId,"partyIdFrom",communicationEvent.getString("partyIdFrom"),"userLogin",userLogin));
        if (ServiceUtil.isError(completeResult)) {
          errorMessages.add(ServiceUtil.getErrorMessage(completeResult));
        }
      }
    }
 else {
      Map<String,Object> sendEmailToContactListContext=new HashMap<String,Object>();
      sendEmailToContactListContext.put("contactListId",communicationEvent.getString("contactListId"));
      sendEmailToContactListContext.put("communicationEventId",communicationEventId);
      sendEmailToContactListContext.put("userLogin",userLogin);
      try {
        dispatcher.runAsync("sendEmailToContactList",sendEmailToContactListContext);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(resource,"commeventservices.errorCallingSendEmailToContactListService",locale);
        Debug.logError(e,errMsg,module);
        errorMessages.add(errMsg);
        errorMessages.addAll(e.getMessageList());
      }
    }
  }
 catch (  GeneralException eez) {
    return ServiceUtil.returnError(eez.getMessage());
  }
catch (  IOException eey) {
    return ServiceUtil.returnError(eey.getMessage());
  }
  if (errorMessages.size() > 0) {
    result=ServiceUtil.returnError(errorMessages);
  }
  return result;
}
