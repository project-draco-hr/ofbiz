{
  Address[] addressesFrom=wrapper.getFrom();
  Address[] addressesTo=wrapper.getTo();
  Address[] addressesCC=wrapper.getCc();
  Address[] addressesBCC=wrapper.getBcc();
  Set<String> emailAddressesFrom=new TreeSet<String>();
  Set<String> emailAddressesTo=new TreeSet<String>();
  Set<String> emailAddressesCC=new TreeSet<String>();
  Set<String> emailAddressesBCC=new TreeSet<String>();
  for (int x=0; x < addressesFrom.length; x++) {
    emailAddressesFrom.add(((InternetAddress)addressesFrom[x]).getAddress());
  }
  for (int x=0; x < addressesTo.length; x++) {
    emailAddressesTo.add(((InternetAddress)addressesTo[x]).getAddress());
  }
  if (addressesCC != null) {
    for (int x=0; x < addressesCC.length; x++) {
      emailAddressesCC.add(((InternetAddress)addressesCC[x]).getAddress());
    }
  }
  if (addressesBCC != null) {
    for (int x=0; x < addressesBCC.length; x++) {
      emailAddressesBCC.add(((InternetAddress)addressesBCC[x]).getAddress());
    }
  }
  String fromString=StringUtil.join(UtilMisc.toList(emailAddressesFrom),",");
  String toString=StringUtil.join(UtilMisc.toList(emailAddressesTo),",");
  String ccString=StringUtil.join(UtilMisc.toList(emailAddressesCC),",");
  String bccString=StringUtil.join(UtilMisc.toList(emailAddressesBCC),",");
  if (UtilValidate.isNotEmpty(fromString))   commEventMap.put("fromString",fromString);
  if (UtilValidate.isNotEmpty(toString))   commEventMap.put("toString",toString);
  if (UtilValidate.isNotEmpty(ccString))   commEventMap.put("ccString",ccString);
  if (UtilValidate.isNotEmpty(bccString))   commEventMap.put("bccString",bccString);
}
