{
  ContainerConfig.Container cfg=ContainerConfig.getContainer("javamail-container",configFile);
  String dispatcherName=ContainerConfig.getPropertyValue(cfg,"dispatcher-name","JavaMailDispatcher");
  String delegatorName=ContainerConfig.getPropertyValue(cfg,"delegator-name","default");
  this.deleteMail="true".equals(ContainerConfig.getPropertyValue(cfg,"delete-mail","false"));
  this.delegator=DelegatorFactory.getDelegator(delegatorName);
  this.dispatcher=GenericDispatcher.getLocalDispatcher(dispatcherName,delegator);
  this.timerDelay=ContainerConfig.getPropertyValue(cfg,"poll-delay",300000);
  this.maxSize=ContainerConfig.getPropertyValue(cfg,"maxSize",1000000);
  String runAsUser=ContainerConfig.getPropertyValue(cfg,"run-as-user","system");
  try {
    this.userLogin=delegator.findOne("UserLogin",false,"userLoginId",runAsUser);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to load run-as-user UserLogin; cannot start container",module);
    return false;
  }
  ServiceMcaUtil.readConfig();
  List<ContainerConfig.Container.Property> configs=cfg.getPropertiesWithValue("store-listener");
  for (  ContainerConfig.Container.Property prop : configs) {
    Session session=this.makeSession(prop);
    Store store=this.getStore(session);
    if (store != null) {
      stores.put(store,session);
      store.addStoreListener(new LoggingStoreListener());
    }
  }
  if (UtilValidate.isNotEmpty(stores)) {
    pollTimer.schedule(new PollerTask(dispatcher,userLogin),timerDelay,timerDelay);
  }
 else {
    Debug.logWarning("No JavaMail Store(s) configured; poller disabled.",module);
  }
  return true;
}
