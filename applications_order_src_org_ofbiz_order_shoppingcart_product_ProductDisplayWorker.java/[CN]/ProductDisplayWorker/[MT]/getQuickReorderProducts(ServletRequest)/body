{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  GenericValue userLogin=(GenericValue)httpRequest.getSession().getAttribute("userLogin");
  Map<String,Object> results=FastMap.newInstance();
  if (userLogin == null)   userLogin=(GenericValue)httpRequest.getSession().getAttribute("autoUserLogin");
  if (userLogin == null)   return results;
  try {
    Map<String,GenericValue> products=UtilGenerics.checkMap(httpRequest.getSession().getAttribute("_QUICK_REORDER_PRODUCTS_"));
    Map<String,BigDecimal> productQuantities=UtilGenerics.checkMap(httpRequest.getSession().getAttribute("_QUICK_REORDER_PRODUCT_QUANTITIES_"));
    Map<String,Integer> productOccurances=UtilGenerics.checkMap(httpRequest.getSession().getAttribute("_QUICK_REORDER_PRODUCT_OCCURANCES_"));
    if (products == null || productQuantities == null || productOccurances == null) {
      products=new HashMap<String,GenericValue>();
      productQuantities=new HashMap<String,BigDecimal>();
      productOccurances=new HashMap<String,Integer>();
      final String[] USER_ORDER_ROLE_TYPES={"PLACING_CUSTOMER"};
      for (int i=0; i < USER_ORDER_ROLE_TYPES.length; i++) {
        List<GenericValue> orderRoles=delegator.findByAnd("OrderRole",UtilMisc.toMap("partyId",userLogin.get("partyId"),"roleTypeId",USER_ORDER_ROLE_TYPES[i]),null);
        Iterator<GenericValue> ordersIter=UtilMisc.toIterator(orderRoles);
        while (ordersIter != null && ordersIter.hasNext()) {
          GenericValue orderRole=ordersIter.next();
          List<GenericValue> orderItems=orderRole.getRelated("OrderItem");
          Iterator<GenericValue> orderItemsIter=UtilMisc.toIterator(orderItems);
          while (orderItemsIter != null && orderItemsIter.hasNext()) {
            GenericValue orderItem=orderItemsIter.next();
            String productId=orderItem.getString("productId");
            if (UtilValidate.isNotEmpty(productId)) {
              GenericValue product=orderItem.getRelatedOneCache("Product");
              products.put(product.getString("productId"),product);
              BigDecimal curQuant=productQuantities.get(product.get("productId"));
              if (curQuant == null)               curQuant=BigDecimal.ZERO;
              BigDecimal orderQuant=orderItem.getBigDecimal("quantity");
              if (orderQuant == null)               orderQuant=BigDecimal.ZERO;
              productQuantities.put(product.getString("productId"),curQuant.add(orderQuant));
              Integer curOcc=productOccurances.get(product.get("productId"));
              if (curOcc == null)               curOcc=Integer.valueOf(0);
              productOccurances.put(product.getString("productId"),Integer.valueOf(curOcc.intValue() + 1));
            }
          }
        }
      }
      for (      Map.Entry<String,BigDecimal> entry : productQuantities.entrySet()) {
        String prodId=entry.getKey();
        BigDecimal quantity=entry.getValue();
        Integer occs=productOccurances.get(prodId);
        BigDecimal nqint=quantity.divide(new BigDecimal(occs),new MathContext(10));
        if (nqint.compareTo(BigDecimal.ONE) < 0)         nqint=BigDecimal.ONE;
        productQuantities.put(prodId,nqint);
      }
      httpRequest.getSession().setAttribute("_QUICK_REORDER_PRODUCTS_",new HashMap<String,GenericValue>(products));
      httpRequest.getSession().setAttribute("_QUICK_REORDER_PRODUCT_QUANTITIES_",new HashMap<String,BigDecimal>(productQuantities));
      httpRequest.getSession().setAttribute("_QUICK_REORDER_PRODUCT_OCCURANCES_",new HashMap<String,Integer>(productOccurances));
    }
 else {
      products=new HashMap<String,GenericValue>(products);
      productQuantities=new HashMap<String,BigDecimal>(productQuantities);
      productOccurances=new HashMap<String,Integer>(productOccurances);
    }
    ShoppingCart cart=(ShoppingCart)httpRequest.getSession().getAttribute("shoppingCart");
    if (UtilValidate.isNotEmpty(cart)) {
      Iterator<ShoppingCartItem> cartiter=cart.iterator();
      while (cartiter.hasNext()) {
        ShoppingCartItem item=cartiter.next();
        String productId=item.getProductId();
        products.remove(productId);
        productQuantities.remove(productId);
        productOccurances.remove(productId);
      }
    }
    String currentCatalogId=CatalogWorker.getCurrentCatalogId(request);
    String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,currentCatalogId);
    if (viewProductCategoryId != null) {
      for (      Map.Entry<String,GenericValue> entry : products.entrySet()) {
        String productId=entry.getKey();
        if (!CategoryWorker.isProductInCategory(delegator,productId,viewProductCategoryId)) {
          products.remove(productId);
          productQuantities.remove(productId);
          productOccurances.remove(productId);
        }
      }
    }
    List<GenericValue> reorderProds=FastList.newInstance();
    reorderProds.addAll(products.values());
    BigDecimal occurancesModifier=BigDecimal.ONE;
    BigDecimal quantityModifier=BigDecimal.ONE;
    Map<String,Object> newMetric=FastMap.newInstance();
    for (    Map.Entry<String,Integer> entry : productOccurances.entrySet()) {
      String prodId=entry.getKey();
      Integer quantity=entry.getValue();
      BigDecimal occs=productQuantities.get(prodId);
      if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,(String)prodId,cart.getProductStoreId())) {
        occs=occs.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));
      }
 else {
        occs=occs.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));
      }
      productQuantities.put(prodId,occs);
      BigDecimal nqdbl=quantityModifier.multiply(new BigDecimal(quantity)).add(occs.multiply(occurancesModifier));
      newMetric.put(prodId,nqdbl);
    }
    reorderProds=productOrderByMap(reorderProds,newMetric,true);
    while (reorderProds.size() > 5) {
      reorderProds.remove(reorderProds.size() - 1);
    }
    results.put("products",reorderProds);
    results.put("quantities",productQuantities);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  return results;
}
