{
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  GenericValue userLogin=(GenericValue)httpRequest.getSession().getAttribute("userLogin");
  Map results=new HashMap();
  if (userLogin == null)   userLogin=(GenericValue)httpRequest.getSession().getAttribute("autoUserLogin");
  if (userLogin == null)   return results;
  try {
    Map products=(Map)httpRequest.getSession().getAttribute("_QUICK_REORDER_PRODUCTS_");
    Map productQuantities=(Map)httpRequest.getSession().getAttribute("_QUICK_REORDER_PRODUCT_QUANTITIES_");
    Map productOccurances=(Map)httpRequest.getSession().getAttribute("_QUICK_REORDER_PRODUCT_OCCURANCES_");
    if (products == null || productQuantities == null || productOccurances == null) {
      products=new HashMap();
      productQuantities=new HashMap();
      productOccurances=new HashMap();
      final String[] USER_ORDER_ROLE_TYPES={"PLACING_CUSTOMER"};
      for (int i=0; i < USER_ORDER_ROLE_TYPES.length; i++) {
        Collection orderRoles=delegator.findByAnd("OrderRole",UtilMisc.toMap("partyId",userLogin.get("partyId"),"roleTypeId",USER_ORDER_ROLE_TYPES[i]),null);
        Iterator ordersIter=UtilMisc.toIterator(orderRoles);
        while (ordersIter != null && ordersIter.hasNext()) {
          GenericValue orderRole=(GenericValue)ordersIter.next();
          Collection orderItems=orderRole.getRelated("OrderItem");
          Iterator orderItemsIter=UtilMisc.toIterator(orderItems);
          while (orderItemsIter != null && orderItemsIter.hasNext()) {
            GenericValue orderItem=(GenericValue)orderItemsIter.next();
            String productId=orderItem.getString("productId");
            if (UtilValidate.isNotEmpty(productId)) {
              GenericValue product=orderItem.getRelatedOneCache("Product");
              products.put(product.get("productId"),product);
              Integer curQuant=(Integer)productQuantities.get(product.get("productId"));
              if (curQuant == null)               curQuant=new Integer(0);
              Double orderQuant=orderItem.getDouble("quantity");
              if (orderQuant == null)               orderQuant=new Double(0.0);
              productQuantities.put(product.get("productId"),new Integer(curQuant.intValue() + orderQuant.intValue()));
              Integer curOcc=(Integer)productOccurances.get(product.get("productId"));
              if (curOcc == null)               curOcc=new Integer(0);
              productOccurances.put(product.get("productId"),new Integer(curOcc.intValue() + 1));
            }
          }
        }
      }
      Iterator quantEntries=productQuantities.entrySet().iterator();
      while (quantEntries.hasNext()) {
        Map.Entry entry=(Map.Entry)quantEntries.next();
        Object prodId=entry.getKey();
        Integer quantity=(Integer)entry.getValue();
        Integer occs=(Integer)productOccurances.get(prodId);
        int nqint=quantity.intValue() / occs.intValue();
        if (nqint < 1)         nqint=1;
        productQuantities.put(prodId,new Integer(nqint));
      }
      httpRequest.getSession().setAttribute("_QUICK_REORDER_PRODUCTS_",new HashMap(products));
      httpRequest.getSession().setAttribute("_QUICK_REORDER_PRODUCT_QUANTITIES_",new HashMap(productQuantities));
      httpRequest.getSession().setAttribute("_QUICK_REORDER_PRODUCT_OCCURANCES_",new HashMap(productOccurances));
    }
 else {
      products=new HashMap(products);
      productQuantities=new HashMap(productQuantities);
      productOccurances=new HashMap(productOccurances);
    }
    ShoppingCart cart=(ShoppingCart)httpRequest.getSession().getAttribute("shoppingCart");
    if (UtilValidate.isNotEmpty(cart)) {
      Iterator cartiter=cart.iterator();
      while (cartiter.hasNext()) {
        ShoppingCartItem item=(ShoppingCartItem)cartiter.next();
        String productId=item.getProductId();
        products.remove(productId);
        productQuantities.remove(productId);
        productOccurances.remove(productId);
      }
    }
    List prodKeyList=new ArrayList(products.keySet());
    String currentCatalogId=CatalogWorker.getCurrentCatalogId(request);
    String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,currentCatalogId);
    if (viewProductCategoryId != null) {
      Iterator valIter=prodKeyList.iterator();
      while (valIter.hasNext()) {
        String productId=(String)valIter.next();
        if (!CategoryWorker.isProductInCategory(delegator,productId,viewProductCategoryId)) {
          products.remove(productId);
          productQuantities.remove(productId);
          productOccurances.remove(productId);
        }
      }
    }
    List reorderProds=new ArrayList(products.values());
    double occurancesModifier=1.0;
    double quantityModifier=1.0;
    Map newMetric=new HashMap();
    Iterator occurEntries=productOccurances.entrySet().iterator();
    while (occurEntries.hasNext()) {
      Map.Entry entry=(Map.Entry)occurEntries.next();
      Object prodId=entry.getKey();
      Integer quantity=(Integer)entry.getValue();
      Integer occs=(Integer)productQuantities.get(prodId);
      double nqdbl=quantity.doubleValue() * quantityModifier + occs.doubleValue() * occurancesModifier;
      newMetric.put(prodId,new Double(nqdbl));
    }
    reorderProds=productOrderByMap(reorderProds,newMetric,true);
    while (reorderProds.size() > 5) {
      reorderProds.remove(reorderProds.size() - 1);
    }
    results.put("products",reorderProds);
    results.put("quantities",productQuantities);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  return results;
}
