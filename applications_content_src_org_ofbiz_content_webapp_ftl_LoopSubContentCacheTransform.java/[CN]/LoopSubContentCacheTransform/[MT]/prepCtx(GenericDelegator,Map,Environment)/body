{
  List lst=(List)ctx.get("entityList");
  int entityIndex=((Integer)ctx.get("entityIndex")).intValue();
  if (entityIndex >= lst.size()) {
    return false;
  }
  GenericValue view=(GenericValue)lst.get(entityIndex);
  String dataResourceId=(String)view.get("drDataResourceId");
  String subContentIdSub=(String)view.get("contentId");
  String subDataResourceTypeId=(String)ctx.get("subDataResourceTypeId");
  if (UtilValidate.isEmpty(subDataResourceTypeId)) {
    subDataResourceTypeId=(String)view.get("drDataResourceTypeId");
  }
  String mimeTypeId=ContentWorker.getMimeTypeId(delegator,view,ctx);
  Map trailNode=ContentWorker.makeNode(view);
  Map whenMap=(Map)ctx.get("whenMap");
  Locale locale=(Locale)ctx.get("locale");
  if (locale == null)   locale=Locale.getDefault();
  GenericValue assocContent=null;
  ContentWorker.checkConditions(delegator,trailNode,assocContent,whenMap);
  Boolean isReturnBeforeObj=(Boolean)trailNode.get("isReturnBefore");
  Boolean isReturnAfterObj=(Boolean)trailNode.get("isReturnAfter");
  Boolean isPickObj=(Boolean)trailNode.get("isPick");
  Boolean isFollowObj=(Boolean)trailNode.get("isFollow");
  if ((isReturnBeforeObj == null || !isReturnBeforeObj.booleanValue()) && ((isPickObj != null && isPickObj.booleanValue()) || (isFollowObj != null && isFollowObj.booleanValue()))) {
    List globalNodeTrail=(List)ctx.get("globalNodeTrail");
    globalNodeTrail.add(trailNode);
    ctx.put("globalNodeTrail",globalNodeTrail);
    String csvTrail=ContentWorker.nodeTrailToCsv(globalNodeTrail);
    ctx.put("nodeTrailCsv",csvTrail);
    int indentSz=globalNodeTrail.size();
    ctx.put("indent",new Integer(indentSz));
    ctx.put("subDataResourceTypeId",subDataResourceTypeId);
    ctx.put("mimeTypeId",mimeTypeId);
    ctx.put("subContentId",subContentIdSub);
    ctx.put("content",view);
    env.setVariable("subDataResourceTypeId",FreeMarkerWorker.autoWrap(subDataResourceTypeId,env));
    env.setVariable("indent",FreeMarkerWorker.autoWrap(new Integer(indentSz),env));
    env.setVariable("nodeTrailCsv",FreeMarkerWorker.autoWrap(csvTrail,env));
    env.setVariable("globalNodeTrail",FreeMarkerWorker.autoWrap(globalNodeTrail,env));
    env.setVariable("content",FreeMarkerWorker.autoWrap(view,env));
    env.setVariable("mimeTypeId",FreeMarkerWorker.autoWrap(mimeTypeId,env));
    env.setVariable("subContentId",FreeMarkerWorker.autoWrap(subContentIdSub,env));
    return true;
  }
 else {
    return false;
  }
}
