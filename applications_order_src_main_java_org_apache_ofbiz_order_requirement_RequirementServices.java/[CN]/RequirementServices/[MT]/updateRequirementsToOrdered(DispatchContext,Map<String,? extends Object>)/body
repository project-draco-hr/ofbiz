{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
  try {
    for (    GenericValue orderItem : orh.getOrderItems()) {
      GenericValue orderRequirementCommitment=EntityQuery.use(delegator).from("OrderRequirementCommitment").where(UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"))).queryFirst();
      if (UtilValidate.isNotEmpty(orderRequirementCommitment)) {
        String requirementId=orderRequirementCommitment.getString("requirementId");
        Map<String,Object> inputMap=UtilMisc.<String,Object>toMap("userLogin",userLogin,"requirementId",requirementId,"statusId","REQ_ORDERED","quantity",orderItem.getBigDecimal("quantity"));
        dispatcher.runSync("updateRequirement",inputMap);
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
  }
  return ServiceUtil.returnSuccess();
}
