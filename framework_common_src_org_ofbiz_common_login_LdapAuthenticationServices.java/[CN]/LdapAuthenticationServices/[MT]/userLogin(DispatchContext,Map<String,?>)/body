{
  Debug.logVerbose("Starting LDAP authentication",module);
  Properties env=UtilProperties.getProperties("jndiLdap");
  String username=(String)context.get("login.username");
  if (username == null) {
    username=(String)context.get("username");
  }
  String password=(String)context.get("login.password");
  if (password == null) {
    password=(String)context.get("password");
  }
  String dn=null;
  Delegator delegator=ctx.getDelegator();
  boolean isServiceAuth=context.get("isServiceAuth") != null && ((Boolean)context.get("isServiceAuth")).booleanValue();
  GenericValue userLogin=null;
  try {
    userLogin=delegator.findOne("UserLogin",isServiceAuth,"userLoginId",username);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
  }
  if (userLogin != null) {
    dn=userLogin.getString("userLdapDn");
  }
  if (UtilValidate.isEmpty(dn)) {
    String dnTemplate=(String)env.get("ldap.dn.template");
    if (dnTemplate != null) {
      dn=dnTemplate.replace("%u",username);
    }
    Debug.logVerbose("Using DN template: " + dn,module);
  }
 else {
    Debug.logVerbose("Using UserLogin.userLdapDn: " + dn,module);
  }
  env.put(Context.SECURITY_PRINCIPAL,dn);
  env.put(Context.SECURITY_CREDENTIALS,password);
  try {
    DirContext ldapCtx=new InitialDirContext(env);
    ldapCtx.close();
  }
 catch (  NamingException e) {
    Debug.logVerbose("LDAP authentication failed: " + e.getMessage(),module);
    return false;
  }
  Debug.logVerbose("LDAP authentication succeeded",module);
  if (!"true".equals(env.get("ldap.synchronize.passwords"))) {
    return true;
  }
  if (userLogin != null) {
    boolean useEncryption="true".equals(UtilProperties.getPropertyValue("security.properties","password.encrypt"));
    String currentPassword=userLogin.getString("currentPassword");
    boolean samePassword;
    if (useEncryption) {
      samePassword=HashCrypt.comparePassword(currentPassword,LoginServices.getHashType(),password);
    }
 else {
      samePassword=currentPassword.equals(password);
    }
    if (!samePassword) {
      Debug.logVerbose("Starting password synchronization",module);
      userLogin.set("currentPassword",useEncryption ? HashCrypt.cryptPassword(LoginServices.getHashType(),password) : password,false);
      Transaction parentTx=null;
      boolean beganTransaction=false;
      try {
        try {
          parentTx=TransactionUtil.suspend();
        }
 catch (        GenericTransactionException e) {
          Debug.logError(e,"Could not suspend transaction: " + e.getMessage(),module);
        }
        try {
          beganTransaction=TransactionUtil.begin();
          userLogin.store();
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,"Error saving UserLogin",module);
          try {
            TransactionUtil.rollback(beganTransaction,"Error saving UserLogin",e);
          }
 catch (          GenericTransactionException e2) {
            Debug.logError(e2,"Could not rollback nested transaction: " + e2.getMessage(),module);
          }
        }
 finally {
          try {
            TransactionUtil.commit(beganTransaction);
            Debug.logVerbose("Password synchronized",module);
          }
 catch (          GenericTransactionException e) {
            Debug.logError(e,"Could not commit nested transaction: " + e.getMessage(),module);
          }
        }
      }
  finally {
        if (parentTx != null) {
          try {
            TransactionUtil.resume(parentTx);
            Debug.logVerbose("Resumed the parent transaction.",module);
          }
 catch (          GenericTransactionException e) {
            Debug.logError(e,"Could not resume parent nested transaction: " + e.getMessage(),module);
          }
        }
      }
    }
  }
  return true;
}
