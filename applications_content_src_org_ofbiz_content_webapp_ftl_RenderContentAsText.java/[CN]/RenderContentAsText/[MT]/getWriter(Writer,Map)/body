{
  final Environment env=Environment.getCurrentEnvironment();
  final GenericDelegator delegator=(GenericDelegator)FreeMarkerWorker.getWrappedObject("delegator",env);
  final HttpServletRequest request=(HttpServletRequest)FreeMarkerWorker.getWrappedObject("request",env);
  final HttpServletResponse response=(HttpServletResponse)FreeMarkerWorker.getWrappedObject("response",env);
  final Map templateRoot=FreeMarkerWorker.createEnvironmentMap(env);
  if (Debug.infoOn())   Debug.logInfo("in RenderSubContent, contentId(0):" + templateRoot.get("contentId"),module);
  FreeMarkerWorker.getSiteParameters(request,templateRoot);
  final Map savedValuesUp=new HashMap();
  FreeMarkerWorker.saveContextValues(templateRoot,upSaveKeyNames,savedValuesUp);
  FreeMarkerWorker.overrideWithArgs(templateRoot,args);
  if (Debug.infoOn())   Debug.logInfo("in RenderSubContent, contentId(2):" + templateRoot.get("contentId"),module);
  final String thisContentId=(String)templateRoot.get("contentId");
  final String xmlEscape=(String)templateRoot.get("xmlEscape");
  final boolean directAssocMode=UtilValidate.isNotEmpty(thisContentId) ? true : false;
  if (Debug.infoOn())   Debug.logInfo("in Render(0), directAssocMode ." + directAssocMode,module);
  final Map savedValues=new HashMap();
  return new Writer(out){
    public void write(    char cbuf[],    int off,    int len){
    }
    public void flush() throws IOException {
      out.flush();
    }
    public void close() throws IOException {
      List globalNodeTrail=(List)templateRoot.get("globalNodeTrail");
      if (Debug.infoOn())       Debug.logInfo("Render close, globalNodeTrail(2a):" + ContentWorker.nodeTrailToCsv(globalNodeTrail),"");
      renderSubContent();
    }
    public void renderSubContent() throws IOException {
      String mimeTypeId=(String)templateRoot.get("mimeTypeId");
      Object localeObject=templateRoot.get("locale");
      Locale locale=null;
      if (localeObject == null) {
        locale=UtilHttp.getLocale(request);
      }
 else {
        locale=UtilMisc.ensureLocale(localeObject);
      }
      String editRequestName=(String)templateRoot.get("editRequestName");
      if (Debug.infoOn())       Debug.logInfo("in Render(3), editRequestName ." + editRequestName,module);
      if (UtilValidate.isNotEmpty(editRequestName)) {
        String editStyle=getEditStyle();
        openEditWrap(out,editStyle);
      }
      if (Debug.infoOn())       Debug.logInfo("in RenderSubContent, contentId(2):" + templateRoot.get("contentId"),module);
      if (Debug.infoOn())       Debug.logInfo("in RenderSubContent, subContentId(2):" + templateRoot.get("subContentId"),module);
      FreeMarkerWorker.saveContextValues(templateRoot,saveKeyNames,savedValues);
      try {
        String txt=ContentWorker.renderContentAsText(delegator,thisContentId,templateRoot,locale,mimeTypeId,true);
        if ("true".equals(xmlEscape)) {
          txt=UtilFormatOut.encodeXmlValue(txt);
        }
        out.write(txt);
      }
 catch (      GeneralException e) {
        String errMsg="Error rendering thisContentId:" + thisContentId + " msg:"+ e.toString();
        Debug.logError(e,errMsg,module);
      }
      FreeMarkerWorker.reloadValues(templateRoot,savedValuesUp,env);
      FreeMarkerWorker.reloadValues(templateRoot,savedValues,env);
      if (UtilValidate.isNotEmpty(editRequestName)) {
        closeEditWrap(out,editRequestName);
      }
    }
    public void openEditWrap(    Writer out,    String editStyle) throws IOException {
      String divStr="<div class=\"" + editStyle + "\">";
      out.write(divStr);
    }
    public void closeEditWrap(    Writer out,    String editRequestName) throws IOException {
      if (Debug.infoOn())       Debug.logInfo("in RenderSubContent, contentId(3):" + templateRoot.get("contentId"),module);
      if (Debug.infoOn())       Debug.logInfo("in RenderSubContent, subContentId(3):" + templateRoot.get("subContentId"),module);
      StringBuffer sb=new StringBuffer();
      String fullRequest=editRequestName;
      String contentId=null;
      contentId=(String)templateRoot.get("subContentId");
      String delim="?";
      if (UtilValidate.isNotEmpty(contentId)) {
        fullRequest+=delim + "contentId=" + contentId;
        delim="&";
      }
      WidgetWorker.appendOfbizUrl(sb,fullRequest,request,response);
      String url=sb.toString();
      String link="<a href=\"" + url + "\">Edit</a>";
      out.write(link);
      String divStr="</div>";
      out.write(divStr);
    }
    public String getEditStyle(){
      String editStyle=(String)templateRoot.get("editStyle");
      if (UtilValidate.isEmpty(editStyle)) {
        editStyle=UtilProperties.getPropertyValue("content","defaultEditStyle");
      }
      if (UtilValidate.isEmpty(editStyle)) {
        editStyle="buttontext";
      }
      return editStyle;
    }
  }
;
}
