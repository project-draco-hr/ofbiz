{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  ShoppingCart cart=ShoppingCartEvents.getCartObject(request);
  String token=(String)cart.getAttribute("payPalCheckoutToken");
  String paymentGatewayConfigId=null;
  GenericValue payPalGatewayConfig=null;
  String productStoreId=null;
  if (UtilValidate.isEmpty(token)) {
    Debug.logError("No ExpressCheckout token found in cart, you must do a successful setExpressCheckout before redirecting.",module);
    return "error";
  }
  if (cart != null) {
    productStoreId=cart.getProductStoreId();
  }
  if (productStoreId != null) {
    GenericValue payPalPaymentSetting=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStoreId,"EXT_PAYPAL",null,true);
    if (payPalPaymentSetting != null) {
      paymentGatewayConfigId=payPalPaymentSetting.getString("paymentGatewayConfigId");
    }
  }
  if (paymentGatewayConfigId != null) {
    try {
      payPalGatewayConfig=EntityQuery.use(delegator).from("PaymentGatewayPayPal").where("paymentGatewayConfigId",paymentGatewayConfigId).cache().queryOne();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
  }
  if (payPalGatewayConfig == null) {
    request.setAttribute("_EVENT_MESSAGE_","Couldn't retrieve a PaymentGatewayConfigPayPal record for Express Checkout, cannot continue.");
    return "error";
  }
  StringBuilder redirectUrl=new StringBuilder(payPalGatewayConfig.getString("redirectUrl"));
  redirectUrl.append("?cmd=_express-checkout&token=");
  redirectUrl.append(token);
  try {
    response.sendRedirect(redirectUrl.toString());
  }
 catch (  IOException e) {
    Debug.logError(e,module);
    return "error";
  }
  return "success";
}
