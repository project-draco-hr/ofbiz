{
  UserTransaction ut=TransactionFactory.getInstance().getUserTransaction();
  if (ut != null) {
    try {
      int status=ut.getStatus();
      Debug.logVerbose("[TransactionUtil.commit] current status : " + getTransactionStateString(status),module);
      if (status != STATUS_NO_TRANSACTION && status != STATUS_COMMITTING && status != STATUS_COMMITTED && status != STATUS_ROLLING_BACK && status != STATUS_ROLLEDBACK) {
        ut.commit();
        clearTransactionStamps();
        clearTransactionBeginStack();
        clearSetRollbackOnlyCause();
        Debug.logVerbose("[TransactionUtil.commit] transaction committed",module);
      }
 else {
        Debug.logWarning("[TransactionUtil.commit] Not committing transaction, status is " + getStatusString(),module);
      }
    }
 catch (    RollbackException e) {
      RollbackOnlyCause rollbackOnlyCause=getSetRollbackOnlyCause();
      if (rollbackOnlyCause != null) {
        clearTransactionStamps();
        clearTransactionBeginStack();
        clearSetRollbackOnlyCause();
        Debug.logError(e,"Rollback Only was set when trying to commit transaction here; throwing rollbackOnly cause exception",module);
        throw new GenericTransactionException("Roll back error, could not commit transaction, was rolled back instead because of: " + rollbackOnlyCause.getCauseMessage(),rollbackOnlyCause.getCauseThrowable());
      }
 else {
        Throwable t=e.getCause() == null ? e : e.getCause();
        throw new GenericTransactionException("Roll back error (with no rollbackOnly cause found), could not commit transaction, was rolled back instead: " + t.toString(),t);
      }
    }
catch (    IllegalStateException e) {
      Throwable t=e.getCause() == null ? e : e.getCause();
      throw new GenericTransactionException("Could not commit transaction, IllegalStateException exception: " + t.toString(),t);
    }
catch (    HeuristicMixedException e) {
      Throwable t=e.getCause() == null ? e : e.getCause();
      throw new GenericTransactionException("Could not commit transaction, HeuristicMixed exception: " + t.toString(),t);
    }
catch (    HeuristicRollbackException e) {
      Throwable t=e.getCause() == null ? e : e.getCause();
      throw new GenericTransactionException("Could not commit transaction, HeuristicRollback exception: " + t.toString(),t);
    }
catch (    SystemException e) {
      Throwable t=e.getCause() == null ? e : e.getCause();
      throw new GenericTransactionException("System error, could not commit transaction: " + t.toString(),t);
    }
  }
 else {
    Debug.logInfo("[TransactionUtil.commit] UserTransaction is null, not commiting",module);
  }
}
