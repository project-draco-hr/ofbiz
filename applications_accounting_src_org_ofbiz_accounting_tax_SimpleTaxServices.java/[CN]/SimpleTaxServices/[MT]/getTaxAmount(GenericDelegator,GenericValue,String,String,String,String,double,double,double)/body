{
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  List adjustments=new ArrayList();
  EntityCondition storeCond=EntityCondition.makeCondition("productStoreId",EntityOperator.EQUALS,productStoreId);
  List countryExprs=UtilMisc.toList(EntityCondition.makeCondition("countryGeoId",EntityOperator.EQUALS,countryCode),EntityCondition.makeCondition("countryGeoId",EntityOperator.EQUALS,"_NA_"));
  EntityCondition countryCond=EntityCondition.makeCondition(countryExprs,EntityOperator.OR);
  List stateExprs=UtilMisc.toList(EntityCondition.makeCondition("stateProvinceGeoId",EntityOperator.EQUALS,stateCode),EntityCondition.makeCondition("stateProvinceGeoId",EntityOperator.EQUALS,"_NA_"));
  EntityCondition stateCond=EntityCondition.makeCondition(stateExprs,EntityOperator.OR);
  List taxCatExprs=UtilMisc.toList(EntityCondition.makeCondition("taxCategory",EntityOperator.EQUALS,"_NA_"));
  if (item != null && item.get("taxCategory") != null) {
    taxCatExprs.add(EntityCondition.makeCondition("taxCategory",EntityOperator.EQUALS,item.getString("taxCategory")));
  }
  EntityCondition taxCatCond=EntityCondition.makeCondition(taxCatExprs,EntityOperator.OR);
  List mainExprs=UtilMisc.toList(storeCond,countryCond,stateCond);
  if (taxCatExprs.size() > 1) {
    mainExprs.add(taxCatCond);
  }
 else {
    mainExprs.add(taxCatExprs.get(0));
  }
  EntityCondition mainCondition=EntityCondition.makeCondition(mainExprs,EntityOperator.AND);
  List orderList=UtilMisc.toList("minItemPrice","minPurchase","fromDate");
  try {
    List lookupList=delegator.findList("SimpleSalesTaxLookup",mainCondition,null,orderList,null,false);
    List filteredList=EntityUtil.filterByDate(lookupList);
    if (filteredList.size() == 0) {
      Debug.logWarning("SimpleTaxCalc: No State/TaxCategory pair found (with or without taxCat).",module);
      return adjustments;
    }
    Iterator flIt=filteredList.iterator();
    while (flIt.hasNext()) {
      GenericValue taxLookup=(GenericValue)flIt.next();
      double minPrice=taxLookup.get("minItemPrice") != null ? taxLookup.getDouble("minItemPrice").doubleValue() : 0.00;
      double minAmount=taxLookup.get("minPurchase") != null ? taxLookup.getDouble("minPurchase").doubleValue() : 0.00;
      if (itemPrice >= minPrice && itemAmount >= minAmount) {
        double taxRate=taxLookup.get("salesTaxPercentage") != null ? taxLookup.getDouble("salesTaxPercentage").doubleValue() : 0;
        double taxable=0.00;
        if (item != null && (item.get("taxable") == null || (item.get("taxable") != null && item.getBoolean("taxable").booleanValue()))) {
          taxable+=itemAmount;
        }
        if (taxLookup != null && (taxLookup.get("taxShipping") == null || (taxLookup.get("taxShipping") != null && taxLookup.getBoolean("taxShipping").booleanValue()))) {
          taxable+=shippingAmount;
        }
        String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
        DecimalFormat formatter=new DecimalFormat(currencyFormat);
        double taxTotal=taxable * taxRate;
        String amountStr=formatter.format(taxTotal);
        Double taxAmount=null;
        try {
          taxAmount=new Double(formatter.parse(amountStr).doubleValue());
        }
 catch (        ParseException e) {
          throw new GeneralException("Problem getting parsed amount from string",e);
        }
        String primaryGeoId=taxLookup.getString("stateProvinceGeoId");
        String secondaryGeoId=taxLookup.getString("countryGeoId");
        String taxAuthPartyId=taxLookup.getString("taxAuthPartyId");
        String taxAuthGlAccountId=taxLookup.getString("taxAuthGlAccountId");
        if (primaryGeoId == null || "_NA_".equals(primaryGeoId)) {
          primaryGeoId=secondaryGeoId;
          secondaryGeoId=null;
        }
        Map adjMap=new HashMap();
        adjMap.put("amount",taxAmount);
        adjMap.put("sourcePercentage",new Double(taxRate));
        adjMap.put("orderAdjustmentTypeId","SALES_TAX");
        adjMap.put("primaryGeoId",primaryGeoId);
        if (secondaryGeoId != null)         adjMap.put("secondaryGeoId",secondaryGeoId);
        adjMap.put("comments",taxLookup.getString("description"));
        if (taxAuthPartyId != null)         adjMap.put("taxAuthPartyId",taxAuthPartyId);
        if (taxAuthGlAccountId != null)         adjMap.put("overrideGlAccountId",taxAuthGlAccountId);
        if (primaryGeoId != null)         adjMap.put("taxAuthGeoId",primaryGeoId);
        if (UtilValidate.isNotEmpty(billToPartyId) && primaryGeoId != null) {
          Set billToPartyIdSet=FastSet.newInstance();
          billToPartyIdSet.add(billToPartyId);
          List partyRelationshipList=EntityUtil.filterByDate(delegator.findByAndCache("PartyRelationship",UtilMisc.toMap("partyIdTo",billToPartyId,"partyRelationshipTypeId","GROUP_ROLLUP")),true);
          Iterator partyRelationshipIter=partyRelationshipList.iterator();
          while (partyRelationshipIter.hasNext()) {
            GenericValue partyRelationship=(GenericValue)partyRelationshipIter.next();
            billToPartyIdSet.add(partyRelationship.get("partyIdFrom"));
          }
          List ptiConditionList=UtilMisc.toList(EntityCondition.makeCondition("partyId",EntityOperator.IN,billToPartyIdSet),EntityCondition.makeCondition("taxAuthGeoId",EntityOperator.EQUALS,primaryGeoId));
          ptiConditionList.add(EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp));
          ptiConditionList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN,nowTimestamp)));
          EntityCondition ptiCondition=EntityCondition.makeCondition(ptiConditionList,EntityOperator.AND);
          List partyTaxAuthInfos=delegator.findList("PartyTaxAuthInfo",ptiCondition,null,UtilMisc.toList("-fromDate"),null,false);
          if (partyTaxAuthInfos.size() > 0) {
            GenericValue partyTaxAuthInfo=(GenericValue)partyTaxAuthInfos.get(0);
            adjMap.put("customerReferenceId",partyTaxAuthInfo.get("partyTaxId"));
            if ("Y".equals(partyTaxAuthInfo.getString("isExempt"))) {
              adjMap.put("amount",new Double(0));
              adjMap.put("exemptAmount",taxAmount);
            }
          }
        }
 else {
          Debug.logInfo("NOTE: A tax calculation was done without a billToPartyId or primaryGeoId, so no tax exemptions or tax IDs considered; billToPartyId=[" + billToPartyId + "] primaryGeoId=["+ primaryGeoId+ "]",module);
        }
        adjustments.add(delegator.makeValue("OrderAdjustment",adjMap));
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up tax rates",module);
    return new ArrayList();
  }
catch (  GeneralException e) {
    Debug.logError(e,"Problems looking up tax rates",module);
    return new ArrayList();
  }
  return adjustments;
}
