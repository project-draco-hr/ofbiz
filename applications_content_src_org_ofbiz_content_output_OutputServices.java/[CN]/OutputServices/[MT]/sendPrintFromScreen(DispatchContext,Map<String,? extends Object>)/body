{
  Locale locale=(Locale)serviceContext.get("locale");
  String screenLocation=(String)serviceContext.remove("screenLocation");
  Map screenContext=(Map)serviceContext.remove("screenContext");
  String contentType=(String)serviceContext.remove("contentType");
  String printerContentType=(String)serviceContext.remove("printerContentType");
  if (UtilValidate.isEmpty(screenContext)) {
    screenContext=FastMap.newInstance();
  }
  screenContext.put("locale",locale);
  if (UtilValidate.isEmpty(contentType)) {
    contentType="application/postscript";
  }
  if (UtilValidate.isEmpty(printerContentType)) {
    printerContentType=contentType;
  }
  try {
    MapStack screenContextTmp=MapStack.create();
    screenContextTmp.put("locale",locale);
    Writer writer=new StringWriter();
    ScreenRenderer screensAtt=new ScreenRenderer(writer,screenContextTmp,foScreenRenderer);
    screensAtt.populateContextForService(dctx,screenContext);
    screenContextTmp.putAll(screenContext);
    screensAtt.getContext().put("formStringRenderer",foFormRenderer);
    screensAtt.render(screenLocation);
    StreamSource src=new StreamSource(new StringReader(writer.toString()));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Fop fop=ApacheFopWorker.createFopInstance(baos,MimeConstants.MIME_PDF);
    ApacheFopWorker.transform(src,null,fop);
    baos.flush();
    baos.close();
    DocFlavor psInFormat=new DocFlavor.INPUT_STREAM(printerContentType);
    InputStream bais=new ByteArrayInputStream(baos.toByteArray());
    DocAttributeSet docAttributeSet=new HashDocAttributeSet();
    List docAttributes=(List)serviceContext.remove("docAttributes");
    if (UtilValidate.isNotEmpty(docAttributes)) {
      for (      Object da : docAttributes) {
        Debug.logInfo("Adding DocAttribute: " + da,module);
        docAttributeSet.add((DocAttribute)da);
      }
    }
    Doc myDoc=new SimpleDoc(bais,psInFormat,docAttributeSet);
    PrintService printer=null;
    String printerName=(String)serviceContext.remove("printerName");
    if (UtilValidate.isNotEmpty(printerName)) {
      PrintServiceAttributeSet printServiceAttributes=new HashPrintServiceAttributeSet();
      printServiceAttributes.add(new PrinterName(printerName,locale));
      PrintService[] printServices=PrintServiceLookup.lookupPrintServices(null,printServiceAttributes);
      if (printServices.length > 0) {
        printer=printServices[0];
        Debug.logInfo("Using printer: " + printer.getName(),module);
        if (!printer.isDocFlavorSupported(psInFormat)) {
          return ServiceUtil.returnError("DocFlavor [" + psInFormat + "] not supported by printer: "+ printer.getName());
        }
      }
      if (printer == null) {
        return ServiceUtil.returnError("No printer found with name: " + printerName);
      }
    }
 else {
      printer=PrintServiceLookup.lookupDefaultPrintService();
      if (printer != null) {
        Debug.logInfo("No printer name supplied, using default printer: " + printer.getName(),module);
      }
    }
    if (printer == null) {
      return ServiceUtil.returnError("No printer available");
    }
    PrintRequestAttributeSet praset=new HashPrintRequestAttributeSet();
    List printRequestAttributes=(List)serviceContext.remove("printRequestAttributes");
    if (UtilValidate.isNotEmpty(printRequestAttributes)) {
      for (      Object pra : printRequestAttributes) {
        Debug.logInfo("Adding PrintRequestAttribute: " + pra,module);
        praset.add((PrintRequestAttribute)pra);
      }
    }
    DocPrintJob job=printer.createPrintJob();
    job.print(myDoc,praset);
  }
 catch (  Exception e) {
    String errMsg="Error rendering [" + contentType + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  return ServiceUtil.returnSuccess();
}
