{
  Locale locale=(Locale)serviceContext.get("locale");
  String screenLocation=(String)serviceContext.remove("screenLocation");
  Map screenContext=(Map)serviceContext.remove("screenContext");
  String contentType=(String)serviceContext.remove("contentType");
  String filePath=(String)serviceContext.remove("filePath");
  String fileName=(String)serviceContext.remove("fileName");
  if (UtilValidate.isEmpty(screenContext)) {
    screenContext=FastMap.newInstance();
  }
  screenContext.put("locale",locale);
  if (UtilValidate.isEmpty(contentType)) {
    contentType="application/pdf";
  }
  try {
    MapStack screenContextTmp=MapStack.create();
    screenContextTmp.put("locale",locale);
    Writer writer=new StringWriter();
    ScreenRenderer screensAtt=new ScreenRenderer(writer,screenContextTmp,foScreenRenderer);
    screensAtt.populateContextForService(dctx,screenContext);
    screenContextTmp.putAll(screenContext);
    screensAtt.getContext().put("formStringRenderer",foFormRenderer);
    screensAtt.render(screenLocation);
    StreamSource src=new StreamSource(new StringReader(writer.toString()));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Fop fop=ApacheFopWorker.createFopInstance(baos,MimeConstants.MIME_PDF);
    ApacheFopWorker.transform(src,null,fop);
    baos.flush();
    baos.close();
    fileName+=UtilDateTime.nowAsString();
    if ("application/pdf".equals(contentType)) {
      fileName+=".pdf";
    }
 else     if ("application/postscript".equals(contentType)) {
      fileName+=".ps";
    }
 else     if ("text/plain".equals(contentType)) {
      fileName+=".txt";
    }
    if (UtilValidate.isEmpty(filePath)) {
      filePath=UtilProperties.getPropertyValue("content.properties","content.output.path","/output");
    }
    File file=new File(filePath,fileName);
    FileOutputStream fos=new FileOutputStream(file);
    fos.write(baos.toByteArray());
    fos.close();
  }
 catch (  GeneralException ge) {
    String errMsg="Error rendering [" + contentType + "]: "+ ge.toString();
    Debug.logError(ge,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  IOException ie) {
    String errMsg="Error rendering [" + contentType + "]: "+ ie.toString();
    Debug.logError(ie,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  FOPException fe) {
    String errMsg="Error rendering [" + contentType + "]: "+ fe.toString();
    Debug.logError(fe,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  SAXException se) {
    String errMsg="Error rendering [" + contentType + "]: "+ se.toString();
    Debug.logError(se,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  ParserConfigurationException pe) {
    String errMsg="Error rendering [" + contentType + "]: "+ pe.toString();
    Debug.logError(pe,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  return ServiceUtil.returnSuccess();
}
