{
  String errMsg="";
  List<Object> errMsgList=FastList.newInstance();
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  Security security=(Security)request.getAttribute("security");
  String updateMode=request.getParameter("UPDATE_MODE");
  if (updateMode == null || updateMode.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource,"productevents.updatemode_not_specified",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    Debug.logWarning("[ProductEvents.updateProductAssoc] Update Mode was not specified, but is required",module);
    return "error";
  }
  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {
    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);
    errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  String productId=request.getParameter("PRODUCT_ID");
  String productIdTo=request.getParameter("PRODUCT_ID_TO");
  String productAssocTypeId=request.getParameter("PRODUCT_ASSOC_TYPE_ID");
  String fromDateStr=request.getParameter("FROM_DATE");
  Timestamp fromDate=null;
  try {
    if (EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne() == null) {
      Map<String,String> messageMap=UtilMisc.toMap("productId",productId);
      errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_with_id_not_found",messageMap,UtilHttp.getLocale(request)));
    }
    if (EntityQuery.use(delegator).from("Product").where("productId",productIdTo).queryOne() == null) {
      Map<String,String> messageMap=UtilMisc.toMap("productIdTo",productIdTo);
      errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_To_with_id_not_found",messageMap,UtilHttp.getLocale(request)));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  if (UtilValidate.isNotEmpty(fromDateStr)) {
    try {
      fromDate=(Timestamp)ObjectType.simpleTypeConvert(fromDateStr,"Timestamp",null,UtilHttp.getTimeZone(request),UtilHttp.getLocale(request),false);
    }
 catch (    Exception e) {
      errMsgList.add("From Date not formatted correctly.");
    }
  }
  if (!UtilValidate.isNotEmpty(productId))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_ID_missing",UtilHttp.getLocale(request)));
  if (!UtilValidate.isNotEmpty(productIdTo))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_ID_To_missing",UtilHttp.getLocale(request)));
  if (!UtilValidate.isNotEmpty(productAssocTypeId))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.association_type_ID_missing",UtilHttp.getLocale(request)));
  if (!updateMode.equals("CREATE") && !UtilValidate.isNotEmpty(fromDateStr))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.from_date_missing",UtilHttp.getLocale(request)));
  if (errMsgList.size() > 0) {
    request.setAttribute("_ERROR_MESSAGE_LIST_",errMsgList);
    return "error";
  }
  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId));
  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId,"productAssocTypeId",productAssocTypeId));
  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productIdTo",productIdTo));
  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId));
  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productAssocTypeId",productAssocTypeId));
  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId,"fromDate",fromDate));
  GenericValue tempProductAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId,"fromDate",fromDate));
  if (updateMode.equals("DELETE")) {
    GenericValue productAssoc=null;
    try {
      productAssoc=delegator.findOne(tempProductAssoc.getEntityName(),tempProductAssoc.getPrimaryKey(),false);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      productAssoc=null;
    }
    if (productAssoc == null) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_product_association_exist",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    try {
      productAssoc.remove();
    }
 catch (    GenericEntityException e) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_product_association_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not remove product association (write error); message: " + e.getMessage(),module);
      return "error";
    }
    return "success";
  }
  String thruDateStr=request.getParameter("THRU_DATE");
  String reason=request.getParameter("REASON");
  String instruction=request.getParameter("INSTRUCTION");
  String quantityStr=request.getParameter("QUANTITY");
  String sequenceNumStr=request.getParameter("SEQUENCE_NUM");
  Timestamp thruDate=null;
  BigDecimal quantity=null;
  Long sequenceNum=null;
  if (UtilValidate.isNotEmpty(thruDateStr)) {
    try {
      thruDate=(Timestamp)ObjectType.simpleTypeConvert(thruDateStr,"Timestamp",null,UtilHttp.getTimeZone(request),UtilHttp.getLocale(request),false);
    }
 catch (    Exception e) {
      errMsgList.add(UtilProperties.getMessage(resource,"productevents.thru_date_not_formatted_correctly",UtilHttp.getLocale(request)));
    }
  }
  if (UtilValidate.isNotEmpty(quantityStr)) {
    try {
      quantity=new BigDecimal(quantityStr);
    }
 catch (    NumberFormatException e) {
      errMsgList.add(UtilProperties.getMessage(resource,"productevents.quantity_not_formatted_correctly",UtilHttp.getLocale(request)));
    }
  }
  if (UtilValidate.isNotEmpty(sequenceNumStr)) {
    try {
      sequenceNum=Long.valueOf(sequenceNumStr);
    }
 catch (    Exception e) {
      errMsgList.add(UtilProperties.getMessage(resource,"productevents.sequenceNum_not_formatted_correctly",UtilHttp.getLocale(request)));
    }
  }
  if (errMsgList.size() > 0) {
    request.setAttribute("_ERROR_MESSAGE_LIST_",errMsgList);
    return "error";
  }
  tempProductAssoc.set("thruDate",thruDate);
  tempProductAssoc.set("reason",reason);
  tempProductAssoc.set("instruction",instruction);
  tempProductAssoc.set("quantity",quantity);
  tempProductAssoc.set("sequenceNum",sequenceNum);
  if (updateMode.equals("CREATE")) {
    if (fromDate == null) {
      fromDate=new Timestamp(new java.util.Date().getTime());
      tempProductAssoc.set("fromDate",fromDate);
      request.setAttribute("ProductAssocCreateFromDate",fromDate);
    }
    GenericValue productAssoc=null;
    try {
      productAssoc=delegator.findOne(tempProductAssoc.getEntityName(),tempProductAssoc.getPrimaryKey(),false);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      productAssoc=null;
    }
    if (productAssoc != null) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_product_association_exists",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    try {
      productAssoc=tempProductAssoc.create();
    }
 catch (    GenericEntityException e) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_product_association_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not create product association (write error); message: " + e.getMessage(),module);
      return "error";
    }
  }
 else   if (updateMode.equals("UPDATE")) {
    try {
      tempProductAssoc.store();
    }
 catch (    GenericEntityException e) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_update_product_association_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not update product association (write error); message: " + e.getMessage(),module);
      return "error";
    }
  }
 else {
    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);
    errMsg=UtilProperties.getMessage(resource,"productevents.specified_update_mode_not_supported",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}
