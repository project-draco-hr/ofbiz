{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  String productId=request.getParameter("productId");
  String productTags=request.getParameter("productTags");
  if (UtilValidate.isNotEmpty(productId) && UtilValidate.isNotEmpty(productTags)) {
    List<String> matchList=FastList.newInstance();
    Pattern regex=Pattern.compile("[^\\s\"']+|\"([^\"]*)\"|'([^']*)'");
    Matcher regexMatcher=regex.matcher(productTags);
    while (regexMatcher.find()) {
      matchList.add(regexMatcher.group().replace("'",""));
    }
    GenericValue userLogin=null;
    try {
      userLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId","system"),true);
    }
 catch (    GenericEntityException e) {
      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
      return "error";
    }
    if (UtilValidate.isNotEmpty(matchList)) {
      for (      String keywordStr : matchList) {
        try {
          dispatcher.runSync("createProductKeyword",UtilMisc.toMap("productId",productId,"keyword",keywordStr.trim(),"keywordTypeId","KWT_TAG","statusId","KW_PENDING","userLogin",userLogin));
        }
 catch (        GenericServiceException e) {
          request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
          return "error";
        }
      }
    }
  }
  return "success";
}
