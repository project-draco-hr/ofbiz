{
  String errMsg="";
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  Security security=(Security)request.getAttribute("security");
  String updateMode=request.getParameter("UPDATE_MODE");
  if (updateMode == null || updateMode.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource,"productevents.updatemode_not_specified",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    Debug.logWarning("[CategoryEvents.updateCategory] Update Mode was not specified, but is required",module);
    return "error";
  }
  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {
    Map messageMap=UtilMisc.toMap("updateMode",updateMode);
    errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  String productId=request.getParameter("PRODUCT_ID");
  String attrName=request.getParameter("ATTRIBUTE_NAME");
  String attrValue=request.getParameter("ATTRIBUTE_VALUE");
  String attrType=request.getParameter("ATTRIBUTE_TYPE");
  if (!UtilValidate.isNotEmpty(productId))   errMsg+=("<li>" + UtilProperties.getMessage(resource,"productevents.product_ID_missing",UtilHttp.getLocale(request)));
  if (!UtilValidate.isNotEmpty(productId))   errMsg+=("<li>" + UtilProperties.getMessage(resource,"productevents.attribute_name_missing",UtilHttp.getLocale(request)));
  if (errMsg.length() > 0) {
    errMsg+=("<b>" + UtilProperties.getMessage(resource,"productevents.following_errors_occurred",UtilHttp.getLocale(request)));
    errMsg+=("</b><br/><ul>" + errMsg + "</ul>");
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  List toBeStored=new LinkedList();
  GenericValue attribute=delegator.makeValue("ProductAttribute",null);
  toBeStored.add(attribute);
  attribute.set("productId",productId);
  attribute.set("attrName",attrName);
  attribute.set("attrValue",attrValue);
  attribute.set("attrType",attrType);
  if (updateMode.equals("CREATE")) {
    try {
      delegator.storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_attribute_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
 else   if (updateMode.equals("UPDATE")) {
    try {
      delegator.storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_update_attribute_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      Debug.logWarning("[ProductEvents.updateAttribute] Could not update attribute (write error); message: " + e.getMessage(),module);
      return "error";
    }
  }
 else   if (updateMode.equals("DELETE")) {
    try {
      delegator.removeByAnd("ProductAttribute",UtilMisc.toMap("productId",productId,"attrName",attrName));
    }
 catch (    GenericEntityException e) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_delete_attribute_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      Debug.logWarning("[ProductEvents.updateAttribute] Could not delete attribute (write error); message: " + e.getMessage(),module);
      return "error";
    }
  }
 else {
    Map messageMap=UtilMisc.toMap("updateMode",updateMode);
    errMsg=UtilProperties.getMessage(resource,"productevents.specified_update_mode_not_supported",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}
