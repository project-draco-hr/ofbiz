{
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  Security security=(Security)request.getAttribute("security");
  String updateMode=request.getParameter("UPDATE_MODE");
  if (updateMode == null || updateMode.length() <= 0) {
    String errMsg=UtilProperties.getMessage(resource,"productevents.updatemode_not_specified",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    Debug.logWarning("[ProductEvents.updateProductKeyword] Update Mode was not specified, but is required",module);
    return "error";
  }
  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {
    Map messageMap=UtilMisc.toMap("updateMode",updateMode);
    String errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  String productId=request.getParameter("PRODUCT_ID");
  String keyword=request.getParameter("KEYWORD");
  String relevancyWeightString=request.getParameter("relevancyWeight");
  Long relevancyWeight=null;
  if (UtilValidate.isNotEmpty(relevancyWeightString)) {
    try {
      relevancyWeight=Long.valueOf(relevancyWeightString);
    }
 catch (    NumberFormatException e) {
      String errMsg="Bad format for relevancyWeight [" + relevancyWeightString + "]: "+ e.toString();
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
  String errMsgTemp="";
  if (!UtilValidate.isNotEmpty(productId)) {
    errMsgTemp+=("<li>" + UtilProperties.getMessage(resource,"productevents.product_ID_missing",UtilHttp.getLocale(request)));
  }
  if (!UtilValidate.isNotEmpty(keyword)) {
    errMsgTemp+=("<li>" + UtilProperties.getMessage(resource,"productevents.keyword_missing",UtilHttp.getLocale(request)));
  }
  if (errMsgTemp.length() > 0) {
    errMsgTemp+=("<b>" + UtilProperties.getMessage(resource,"productevents.following_errors_occurred",UtilHttp.getLocale(request)));
    errMsgTemp+=("</b><br/><ul>" + errMsgTemp + "</ul>");
    request.setAttribute("_ERROR_MESSAGE_",errMsgTemp);
    return "error";
  }
  if (updateMode.equals("CREATE")) {
    keyword=keyword.toLowerCase();
    GenericValue productKeyword=delegator.makeValue("ProductKeyword",UtilMisc.toMap("productId",productId,"keyword",keyword,"relevancyWeight",relevancyWeight));
    GenericValue newValue=null;
    try {
      newValue=delegator.findByPrimaryKey(productKeyword.getPrimaryKey());
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      newValue=null;
    }
    if (newValue != null) {
      String errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_productkeyword_entry_exists",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    try {
      productKeyword=productKeyword.create();
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      productKeyword=null;
    }
    if (productKeyword == null) {
      String errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_productkeyword_entry_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
 else   if (updateMode.equals("DELETE")) {
    GenericValue productKeyword=null;
    try {
      productKeyword=delegator.findByPrimaryKey("ProductKeyword",UtilMisc.toMap("productId",productId,"keyword",keyword));
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      productKeyword=null;
    }
    if (productKeyword == null) {
      String errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_productkeyword_entry_notexists",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    try {
      productKeyword.remove();
    }
 catch (    GenericEntityException e) {
      String errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_productkeyword_entry_writeerror",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      Debug.logWarning("[ProductEvents.updateProductKeyword] Could not remove product-keyword (write error); message: " + e.getMessage(),module);
      return "error";
    }
  }
 else {
    Map messageMap=UtilMisc.toMap("updateMode",updateMode);
    String errMsg=UtilProperties.getMessage(resource,"productevents.specified_update_mode_not_supported",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}
