{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  String variantProductId=request.getParameter("productId0");
  boolean applyToAll=(request.getParameter("applyToAll") != null);
  try {
    boolean beganTransaction=TransactionUtil.begin();
    try {
      if (variantProductId == null) {
        String productId=request.getParameter("productId");
        GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();
        product.set("lastModifiedDate",nowTimestamp);
        product.setString("lastModifiedByUserLogin",userLogin.getString("userLoginId"));
        try {
          product.set("productHeight",parseBigDecimalForEntity(request.getParameter("productHeight")));
          product.set("productWidth",parseBigDecimalForEntity(request.getParameter("productWidth")));
          product.set("productDepth",parseBigDecimalForEntity(request.getParameter("productDepth")));
          product.set("weight",parseBigDecimalForEntity(request.getParameter("weight")));
          product.set("heightUomId","LEN_in");
          product.set("widthUomId","LEN_in");
          product.set("depthUomId","LEN_in");
          product.set("weightUomId","WT_oz");
          BigDecimal floz=parseBigDecimalForEntity(request.getParameter("~floz"));
          BigDecimal ml=parseBigDecimalForEntity(request.getParameter("~ml"));
          BigDecimal ntwt=parseBigDecimalForEntity(request.getParameter("~ntwt"));
          BigDecimal grams=parseBigDecimalForEntity(request.getParameter("~grams"));
          List<GenericValue> currentProductFeatureAndAppls=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureApplTypeId","STANDARD_FEATURE").filterByDate().queryList();
          setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"VLIQ_ozUS","AMOUNT",floz);
          setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"VLIQ_ml","AMOUNT",ml);
          setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"WT_g","AMOUNT",grams);
          setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"WT_oz","AMOUNT",ntwt);
          product.store();
        }
 catch (        NumberFormatException nfe) {
          String errMsg="Shipping Dimensions and Weights must be numbers.";
          request.setAttribute("_ERROR_MESSAGE_",errMsg);
          Debug.logError(nfe,errMsg,module);
          return "error";
        }
      }
 else {
        int prodIdx=0;
        int attribIdx=0;
        String productId=variantProductId;
        do {
          GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();
          try {
            product.set("productHeight",parseBigDecimalForEntity(request.getParameter("productHeight" + attribIdx)));
            product.set("productWidth",parseBigDecimalForEntity(request.getParameter("productWidth" + attribIdx)));
            product.set("productDepth",parseBigDecimalForEntity(request.getParameter("productDepth" + attribIdx)));
            product.set("weight",parseBigDecimalForEntity(request.getParameter("weight" + attribIdx)));
            BigDecimal floz=parseBigDecimalForEntity(request.getParameter("~floz" + attribIdx));
            BigDecimal ml=parseBigDecimalForEntity(request.getParameter("~ml" + attribIdx));
            BigDecimal ntwt=parseBigDecimalForEntity(request.getParameter("~ntwt" + attribIdx));
            BigDecimal grams=parseBigDecimalForEntity(request.getParameter("~grams" + attribIdx));
            List<GenericValue> currentProductFeatureAndAppls=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureApplTypeId","STANDARD_FEATURE").filterByDate().queryList();
            setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"VLIQ_ozUS","AMOUNT",floz);
            setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"VLIQ_ml","AMOUNT",ml);
            setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"WT_g","AMOUNT",grams);
            setOrCreateProdFeature(delegator,productId,currentProductFeatureAndAppls,"WT_oz","AMOUNT",ntwt);
            product.store();
          }
 catch (          NumberFormatException nfe) {
            String errMsg="Shipping Dimensions and Weights must be numbers.";
            request.setAttribute("_ERROR_MESSAGE_",errMsg);
            Debug.logError(nfe,errMsg,module);
            return "error";
          }
          prodIdx++;
          if (!applyToAll) {
            attribIdx=prodIdx;
          }
          productId=request.getParameter("productId" + prodIdx);
        }
 while (productId != null);
      }
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericEntityException e) {
      String errMsg="Error updating quick admin shipping settings: " + e.toString();
      Debug.logError(e,errMsg,module);
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      TransactionUtil.rollback(beganTransaction,errMsg,e);
      return "error";
    }
  }
 catch (  GenericTransactionException gte) {
    String errMsg="Error updating quick admin shipping settings: " + gte.toString();
    Debug.logError(gte,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}
