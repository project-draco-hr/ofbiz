{
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  Security security=(Security)request.getAttribute("security");
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  String updateMode="CREATE";
  String errMsg=null;
  String doAll=request.getParameter("doAll");
  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {
    Map messageMap=UtilMisc.toMap("updateMode",updateMode);
    errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  EntityCondition condition=null;
  if (!"Y".equals(doAll)) {
    List condList=new LinkedList();
    condList.add(new EntityExpr(new EntityExpr("autoCreateKeywords",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("autoCreateKeywords",EntityOperator.NOT_EQUAL,"N")));
    if ("true".equals(UtilProperties.getPropertyValue("prodsearch","index.ignore.variants"))) {
      condList.add(new EntityExpr(new EntityExpr("isVariant",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("isVariant",EntityOperator.NOT_EQUAL,"Y")));
    }
    if ("true".equals(UtilProperties.getPropertyValue("prodsearch","index.ignore.discontinued.sales"))) {
      condList.add(new EntityExpr(new EntityExpr("salesDiscontinuationDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("salesDiscontinuationDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp)));
    }
    condition=new EntityConditionList(condList,EntityOperator.AND);
  }
 else {
    condition=new EntityExpr(new EntityExpr("autoCreateKeywords",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("autoCreateKeywords",EntityOperator.NOT_EQUAL,"N"));
  }
  EntityListIterator entityListIterator=null;
  try {
    if (Debug.infoOn()) {
      long count=delegator.findCountByCondition("Product",condition,null);
      Debug.logInfo("========== Found " + count + " products to index ==========",module);
    }
    entityListIterator=delegator.findListIteratorByCondition("Product",condition,null,null);
  }
 catch (  GenericEntityException gee) {
    Debug.logWarning(gee,gee.getMessage(),module);
    Map messageMap=UtilMisc.toMap("gee",gee.toString());
    errMsg=UtilProperties.getMessage(resource,"productevents.error_getting_product_list",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  int numProds=0;
  int errProds=0;
  GenericValue product=null;
  while ((product=(GenericValue)entityListIterator.next()) != null) {
    try {
      KeywordSearch.induceKeywords(product,"Y".equals(doAll));
    }
 catch (    GenericEntityException e) {
      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_keywords_write",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      Debug.logWarning("[ProductEvents.updateAllKeywords] Could not create product-keyword (write error); message: " + e.getMessage(),module);
      try {
        entityListIterator.close();
      }
 catch (      GenericEntityException gee) {
        Debug.logError(gee,"Error closing EntityListIterator when indexing product keywords.",module);
      }
      errProds++;
    }
    numProds++;
    if (numProds % 500 == 0) {
      Debug.logInfo("Keywords indexed for " + numProds + " so far",module);
    }
  }
  if (entityListIterator != null) {
    try {
      entityListIterator.close();
    }
 catch (    GenericEntityException gee) {
      Debug.logError(gee,"Error closing EntityListIterator when indexing product keywords.",module);
    }
  }
  if (errProds == 0) {
    Map messageMap=UtilMisc.toMap("numProds",Integer.toString(numProds));
    errMsg=UtilProperties.getMessage(resource,"productevents.keyword_creation_complete_for_products",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_EVENT_MESSAGE_",errMsg);
    return "success";
  }
 else {
    Map messageMap=UtilMisc.toMap("numProds",Integer.toString(numProds));
    messageMap.put("errProds",Integer.toString(errProds));
    errMsg=UtilProperties.getMessage(resource,"productevents.keyword_creation_complete_for_products_with_errors",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
}
