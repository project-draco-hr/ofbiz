{
  Delegator delegator=dctx.getDelegator();
  String cardNumber=(String)context.get("cardNumber");
  String pinNumber=(String)context.get("pinNumber");
  Locale locale=(Locale)context.get("locale");
  if (!validatePin(delegator,cardNumber,pinNumber)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberPinNotValid",locale));
  }
  GenericValue finAccount=null;
  try {
    finAccount=delegator.findByPrimaryKey("FinAccount",UtilMisc.toMap("finAccountId",cardNumber));
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountNotFound",UtilMisc.toMap("finAccountId",cardNumber),locale));
  }
  BigDecimal balance=finAccount.get("availableBalance") == null ? BigDecimal.ZERO : finAccount.getBigDecimal("availableBalance");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("balance",balance);
  Debug.logInfo("GC Balance Result - " + result,module);
  return result;
}
