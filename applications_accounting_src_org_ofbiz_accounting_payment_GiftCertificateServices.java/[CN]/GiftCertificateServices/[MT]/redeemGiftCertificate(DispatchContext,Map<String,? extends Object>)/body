{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  final String withdrawl="WITHDRAWAL";
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productStoreId=(String)context.get("productStoreId");
  String cardNumber=(String)context.get("cardNumber");
  String pinNumber=(String)context.get("pinNumber");
  BigDecimal amount=(BigDecimal)context.get("amount");
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId)) {
    partyId="_NA_";
  }
  String currencyUom=(String)context.get("currency");
  if (UtilValidate.isEmpty(currencyUom)) {
    currencyUom=EntityUtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD",delegator);
  }
  if (amount.compareTo(BigDecimal.ZERO) < 0) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountMustBePositive",locale));
  }
  try {
    GenericValue giftCertSettings=EntityQuery.use(delegator).from("ProductStoreFinActSetting").where("productStoreId",productStoreId,"finAccountTypeId",FinAccountHelper.giftCertFinAccountTypeId).cache().queryOne();
    if ("Y".equals(giftCertSettings.getString("requirePinCode")) && !validatePin(delegator,cardNumber,pinNumber)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberPinNotValid",locale));
    }
  }
 catch (  GenericEntityException ex) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountSetting",UtilMisc.toMap("productStoreId",productStoreId,"finAccountTypeId",FinAccountHelper.giftCertFinAccountTypeId),locale));
  }
  Debug.logInfo("Attempting to redeem GC for " + amount,module);
  GenericValue finAccount=null;
  try {
    finAccount=EntityQuery.use(delegator).from("FinAccount").where("finAccountId",cardNumber).queryOne();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingFinAccountNotFound",UtilMisc.toMap("finAccountId",cardNumber),locale));
  }
  BigDecimal previousBalance=finAccount.get("actualBalance") == null ? BigDecimal.ZERO : finAccount.getBigDecimal("actualBalance");
  BigDecimal balance=BigDecimal.ZERO;
  String refNum=null;
  Boolean procResult;
  if (previousBalance.compareTo(amount) >= 0) {
    try {
      refNum=GiftCertificateServices.createTransaction(delegator,dispatcher,userLogin,amount,productStoreId,partyId,currencyUom,withdrawl,cardNumber,locale);
      finAccount.refresh();
      balance=finAccount.get("availableBalance") == null ? BigDecimal.ZERO : finAccount.getBigDecimal("availableBalance");
      procResult=Boolean.TRUE;
    }
 catch (    GeneralException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
 else {
    procResult=Boolean.FALSE;
    balance=previousBalance;
    refNum="N/A";
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("previousBalance",previousBalance);
  result.put("balance",balance);
  result.put("amount",amount);
  result.put("processResult",procResult);
  result.put("responseCode","2");
  result.put("referenceNum",refNum);
  Debug.logInfo("Redeem GC Result - " + result,module);
  return result;
}
