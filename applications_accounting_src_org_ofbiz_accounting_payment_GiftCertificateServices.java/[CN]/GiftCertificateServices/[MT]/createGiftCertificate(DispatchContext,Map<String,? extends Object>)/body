{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productStoreId=(String)context.get("productStoreId");
  BigDecimal initialAmount=(BigDecimal)context.get("initialAmount");
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId)) {
    partyId="_NA_";
  }
  String currencyUom=(String)context.get("currency");
  if (UtilValidate.isEmpty(currencyUom)) {
    currencyUom=UtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD");
  }
  String cardNumber=null;
  String pinNumber=null;
  String refNum=null;
  String finAccountId=null;
  try {
    final String accountName="Gift Certificate Account";
    final String deposit="DEPOSIT";
    GenericValue giftCertSettings=delegator.findByPrimaryKeyCache("ProductStoreFinActSetting",UtilMisc.toMap("productStoreId",productStoreId,"finAccountTypeId",FinAccountHelper.giftCertFinAccountTypeId));
    Map<String,Object> acctResult=null;
    if ("Y".equals(giftCertSettings.getString("requirePinCode"))) {
      int cardNumberLength=CARD_NUMBER_LENGTH;
      int pinNumberLength=PIN_NUMBER_LENGTH;
      if (giftCertSettings.getLong("accountCodeLength") != null) {
        cardNumberLength=giftCertSettings.getLong("accountCodeLength").intValue();
      }
      if (giftCertSettings.getLong("pinCodeLength") != null) {
        pinNumberLength=giftCertSettings.getLong("pinCodeLength").intValue();
      }
      cardNumber=generateNumber(delegator,cardNumberLength,true);
      pinNumber=generateNumber(delegator,pinNumberLength,false);
      finAccountId=cardNumber;
      Map<String,Object> acctCtx=UtilMisc.<String,Object>toMap("finAccountId",finAccountId);
      acctCtx.put("finAccountTypeId",FinAccountHelper.giftCertFinAccountTypeId);
      acctCtx.put("finAccountName",accountName);
      acctCtx.put("finAccountCode",pinNumber);
      acctCtx.put("userLogin",userLogin);
      acctResult=dispatcher.runSync("createFinAccount",acctCtx);
    }
 else {
      acctResult=dispatcher.runSync("createFinAccountForStore",UtilMisc.<String,Object>toMap("productStoreId",productStoreId,"finAccountTypeId",FinAccountHelper.giftCertFinAccountTypeId,"userLogin",userLogin));
      if (acctResult.get("finAccountId") != null) {
        finAccountId=cardNumber=(String)acctResult.get("finAccountId");
      }
      if (acctResult.get("finAccountCode") != null) {
        cardNumber=(String)acctResult.get("finAccountCode");
      }
    }
    if (ServiceUtil.isError(acctResult)) {
      String error=ServiceUtil.getErrorMessage(acctResult);
      return ServiceUtil.returnError(error);
    }
    GenericValue permUserLogin=delegator.findByPrimaryKeyCache("UserLogin",UtilMisc.toMap("userLoginId","system"));
    refNum=createTransaction(delegator,dispatcher,permUserLogin,initialAmount,productStoreId,partyId,currencyUom,deposit,finAccountId,locale);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCreationError",locale));
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingGiftCerticateNumberCreationError",locale));
  }
catch (  GeneralException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("cardNumber",cardNumber);
  result.put("pinNumber",pinNumber);
  result.put("initialAmount",initialAmount);
  result.put("processResult",Boolean.TRUE);
  result.put("responseCode","1");
  result.put("referenceNum",refNum);
  Debug.log("Create GC Result - " + result,module);
  return result;
}
