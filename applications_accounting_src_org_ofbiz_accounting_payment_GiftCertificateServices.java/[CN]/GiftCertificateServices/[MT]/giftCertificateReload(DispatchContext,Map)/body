{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericValue orderItem=(GenericValue)context.get("orderItem");
  Locale locale=(Locale)context.get("locale");
  String orderId=orderItem.getString("orderId");
  GenericValue orderHeader=null;
  try {
    orderHeader=orderItem.getRelatedOne("OrderHeader");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to get OrderHeader from OrderItem",module);
    return ServiceUtil.returnError("Unable to get OrderHeader from OrderItem");
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  String currency=orh.getCurrency();
  if (currency == null) {
    currency=UtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD");
  }
  String productStoreId=null;
  if (orderHeader != null) {
    productStoreId=orh.getProductStoreId();
  }
  if (productStoreId == null) {
    return ServiceUtil.returnError("Unable to process gift card reload; no productStoreId on OrderHeader : " + orderId);
  }
  GenericValue paymentSetting=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStoreId,"GIFT_CARD",null,true);
  String paymentConfig=null;
  if (paymentSetting != null) {
    paymentConfig=paymentSetting.getString("paymentPropertiesPath");
  }
  if (paymentConfig == null) {
    return ServiceUtil.returnError("Unable to get payment configuration file");
  }
  GenericValue placingParty=orh.getPlacingParty();
  String partyId=null;
  if (placingParty != null) {
    partyId=placingParty.getString("partyId");
  }
  BigDecimal amount=orderItem.getBigDecimal("unitPrice");
  String surveyId=UtilProperties.getPropertyValue(paymentConfig,"payment.giftcert.reload.surveyId");
  GenericValue surveyResponse=null;
  try {
    Map fields=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"surveyId",surveyId);
    List order=UtilMisc.toList("-responseDate");
    List responses=delegator.findByAnd("SurveyResponse",fields,order);
    surveyResponse=EntityUtil.getFirst(responses);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Unable to get survey response information; cannot fulfill gift card reload");
  }
  List responseAnswers=null;
  try {
    responseAnswers=surveyResponse.getRelated("SurveyResponseAnswer");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Unable to get survey response answers from survey response; cannot fulfill gift card reload");
  }
  Map answerMap=new HashMap();
  if (responseAnswers != null) {
    Iterator rai=responseAnswers.iterator();
    while (rai.hasNext()) {
      GenericValue answer=(GenericValue)rai.next();
      GenericValue question=null;
      try {
        question=answer.getRelatedOne("SurveyQuestion");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError("Unable to get survey question from answer");
      }
      if (question != null) {
        String desc=question.getString("description");
        String ans=answer.getString("textResponse");
        answerMap.put(desc,ans);
      }
    }
  }
  String cardNumberKey=UtilProperties.getPropertyValue(paymentConfig,"payment.giftcert.reload.survey.cardNumber");
  String pinNumberKey=UtilProperties.getPropertyValue(paymentConfig,"payment.giftcert.reload.survey.pinNumber");
  String cardNumber=(String)answerMap.get(cardNumberKey);
  String pinNumber=(String)answerMap.get(pinNumberKey);
  Map reloadCtx=new HashMap();
  reloadCtx.put("productStoreId",productStoreId);
  reloadCtx.put("currency",currency);
  reloadCtx.put("partyId",partyId);
  reloadCtx.put("cardNumber",cardNumber);
  reloadCtx.put("pinNumber",pinNumber);
  reloadCtx.put("amount",amount);
  reloadCtx.put("userLogin",userLogin);
  String errorMessage=null;
  Map reloadGcResult=null;
  try {
    reloadGcResult=dispatcher.runSync("addFundsToGiftCertificate",reloadCtx);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    errorMessage="Unable to call reload service!";
  }
  if (ServiceUtil.isError(reloadGcResult)) {
    errorMessage=ServiceUtil.getErrorMessage(reloadGcResult);
  }
  Map gcFulFill=new HashMap();
  gcFulFill.put("typeEnumId","GC_RELOAD");
  gcFulFill.put("userLogin",userLogin);
  gcFulFill.put("partyId",partyId);
  gcFulFill.put("orderId",orderId);
  gcFulFill.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
  gcFulFill.put("surveyResponseId",surveyResponse.get("surveyResponseId"));
  gcFulFill.put("cardNumber",cardNumber);
  gcFulFill.put("pinNumber",pinNumber);
  gcFulFill.put("amount",amount);
  if (reloadGcResult != null) {
    gcFulFill.put("responseCode",reloadGcResult.get("responseCode"));
    gcFulFill.put("referenceNum",reloadGcResult.get("referenceNum"));
  }
  try {
    dispatcher.runAsync("createGcFulFillmentRecord",gcFulFill,true);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Unable to store fulfillment info");
  }
  if (errorMessage != null) {
    Debug.logError("Reload Failed Need to Refund : " + reloadGcResult,module);
    try {
      Map refundCtx=UtilMisc.toMap("orderItem",orderItem,"partyId",partyId,"userLogin",userLogin);
      dispatcher.runAsync("refundGcPurchase",refundCtx,null,true,300,true);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"ERROR! Unable to call create refund service; this failed reload will NOT be refunded",module);
    }
    return ServiceUtil.returnError(errorMessage);
  }
  answerMap.put("processResult",reloadGcResult.get("processResult"));
  answerMap.put("responseCode",reloadGcResult.get("responseCode"));
  answerMap.put("previousAmount",reloadGcResult.get("previousBalance"));
  answerMap.put("amount",reloadGcResult.get("amount"));
  GenericValue productStoreEmail=null;
  String emailType="PRDS_GC_RELOAD";
  try {
    productStoreEmail=delegator.findByPrimaryKey("ProductStoreEmailSetting",UtilMisc.toMap("productStoreId",productStoreId,"emailType",emailType));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to get product store email setting for gift card purchase",module);
  }
  if (productStoreEmail == null) {
    Debug.logError("No gift card purchase email setting found for this store; cannot send gift card information",module);
  }
 else {
    ResourceBundleMapWrapper uiLabelMap=(ResourceBundleMapWrapper)UtilProperties.getResourceBundleMap("EcommerceUiLabels",locale);
    uiLabelMap.addBottomResourceBundle("OrderUiLabels");
    uiLabelMap.addBottomResourceBundle("CommonUiLabels");
    answerMap.put("uiLabelMap",uiLabelMap);
    answerMap.put("locale",locale);
    Map emailCtx=new HashMap();
    String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
    if (UtilValidate.isEmpty(bodyScreenLocation)) {
      bodyScreenLocation=ProductStoreWorker.getDefaultProductStoreEmailScreenLocation(emailType);
    }
    emailCtx.put("bodyScreenUri",bodyScreenLocation);
    emailCtx.put("bodyParameters",answerMap);
    emailCtx.put("sendTo",orh.getOrderEmailString());
    emailCtx.put("contentType",productStoreEmail.get("contentType"));
    emailCtx.put("sendFrom",productStoreEmail.get("fromAddress"));
    emailCtx.put("sendCc",productStoreEmail.get("ccAddress"));
    emailCtx.put("sendBcc",productStoreEmail.get("bccAddress"));
    emailCtx.put("subject",productStoreEmail.getString("subject"));
    emailCtx.put("userLogin",userLogin);
    try {
      dispatcher.runAsync("sendMailFromScreen",emailCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problem sending mail",module);
      return ServiceUtil.returnError("Error sending Gift Card notice email: " + e.toString());
    }
  }
  return ServiceUtil.returnSuccess();
}
