{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericValue orderItem=(GenericValue)context.get("orderItem");
  String partyId=(String)context.get("partyId");
  Locale locale=(Locale)context.get("locale");
  try {
    orderItem.refresh();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  Map<String,Object> returnableInfo=null;
  try {
    returnableInfo=dispatcher.runSync("getReturnableQuantity",UtilMisc.toMap("orderItem",orderItem,"userLogin",userLogin));
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorUnableToGetReturnItemInformation",locale));
  }
  if (returnableInfo != null) {
    BigDecimal returnableQuantity=(BigDecimal)returnableInfo.get("returnableQuantity");
    BigDecimal returnablePrice=(BigDecimal)returnableInfo.get("returnablePrice");
    Debug.logInfo("Returnable INFO : " + returnableQuantity + " @ "+ returnablePrice+ " :: "+ orderItem,module);
    Map<String,Object> returnHeaderInfo=FastMap.newInstance();
    returnHeaderInfo.put("fromPartyId",partyId);
    returnHeaderInfo.put("userLogin",userLogin);
    Map<String,Object> returnHeaderResp=null;
    try {
      returnHeaderResp=dispatcher.runSync("createReturnHeader",returnHeaderInfo);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorUnableToCreateReturnHeader",locale));
    }
    if (returnHeaderResp != null) {
      String errorMessage=ServiceUtil.getErrorMessage(returnHeaderResp);
      if (errorMessage != null) {
        return ServiceUtil.returnError(errorMessage);
      }
    }
    String returnId=null;
    if (returnHeaderResp != null) {
      returnId=(String)returnHeaderResp.get("returnId");
    }
    if (returnId == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorCreateReturnHeaderWithoutId",locale));
    }
    Map<String,Object> returnItemInfo=FastMap.newInstance();
    returnItemInfo.put("returnId",returnId);
    returnItemInfo.put("returnReasonId","RTN_DIG_FILL_FAIL");
    returnItemInfo.put("returnTypeId","RTN_REFUND");
    returnItemInfo.put("returnItemType","ITEM");
    returnItemInfo.put("description",orderItem.get("itemDescription"));
    returnItemInfo.put("orderId",orderItem.get("orderId"));
    returnItemInfo.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
    returnItemInfo.put("returnQuantity",returnableQuantity);
    returnItemInfo.put("returnPrice",returnablePrice);
    returnItemInfo.put("userLogin",userLogin);
    Map<String,Object> returnItemResp=null;
    try {
      returnItemResp=dispatcher.runSync("createReturnItem",returnItemInfo);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorUnableToCreateReturnItem",locale));
    }
    if (returnItemResp != null) {
      String errorMessage=ServiceUtil.getErrorMessage(returnItemResp);
      if (errorMessage != null) {
        return ServiceUtil.returnError(errorMessage);
      }
    }
    String returnItemSeqId=null;
    if (returnItemResp != null) {
      returnItemSeqId=(String)returnItemResp.get("returnItemSeqId");
    }
    if (returnItemSeqId == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorCreateReturnItemWithoutId",locale));
    }
 else {
      Debug.logVerbose("Created return item : " + returnId + " / "+ returnItemSeqId,module);
    }
    GenericValue admin=null;
    try {
      admin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorUnableToUpdateReturnHeaderStatusWithoutUserLogin",locale));
    }
    Map<String,Object> updateReturnInfo=FastMap.newInstance();
    updateReturnInfo.put("returnId",returnId);
    updateReturnInfo.put("statusId","RETURN_RECEIVED");
    updateReturnInfo.put("currentStatusId","RETURN_REQUESTED");
    updateReturnInfo.put("userLogin",admin);
    Map<String,Object> updateReturnResp=null;
    try {
      updateReturnResp=dispatcher.runSync("updateReturnHeader",updateReturnInfo);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrderError,"OrderErrorUnableToUpdateReturnHeaderStatus",locale));
    }
    if (updateReturnResp != null) {
      String errorMessage=ServiceUtil.getErrorMessage(updateReturnResp);
      if (errorMessage != null) {
        return ServiceUtil.returnError(errorMessage);
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
