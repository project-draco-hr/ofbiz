{
  Object originalObject;
  byte[] fieldBytes;
  try {
    Blob theBlob=rs.getBlob(columnIndex);
    fieldBytes=toByteArray(theBlob);
    originalObject=theBlob;
  }
 catch (  SQLException e) {
    fieldBytes=rs.getBytes(columnIndex);
    originalObject=fieldBytes;
  }
  if (originalObject != null) {
    Object blobObject=null;
    ObjectInputStream in=null;
    try {
      in=new ObjectInputStream(new ByteArrayInputStream(fieldBytes));
      blobObject=in.readObject();
    }
 catch (    IOException e) {
      if (Debug.verboseOn())       Debug.logVerbose(e,"Unable to read BLOB data from input stream",module);
    }
catch (    ClassNotFoundException e) {
      if (Debug.verboseOn())       Debug.logVerbose(e,"Class not found: Unable to cast BLOB data to an Java object while getting value, most likely because it is a straight byte[], so just using the raw bytes",module);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException e) {
        }
      }
    }
    if (blobObject != null) {
      Debug.logWarning("Blob java-type used for java.lang.Object. Use java.lang.Object java-type instead.",module);
      return blobObject;
    }
 else {
      if (originalObject instanceof Blob) {
        return new SerialBlob((Blob)originalObject);
      }
 else {
        Debug.logWarning("Blob java-type used for byte array. Use byte[] java-type instead.",module);
        return originalObject;
      }
    }
  }
  return null;
}
