{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  Map<String,Object> parameterMap=UtilHttp.getParameterMap(request);
  String workEffortId=(String)parameterMap.remove("workEffortId");
  String partyId=(String)parameterMap.remove("partyId");
  String roleTypeId=(String)parameterMap.remove("roleTypeId");
  String fromDateStr=(String)parameterMap.remove("fromDate");
  java.sql.Timestamp fromDate=null;
  Locale locale=UtilHttp.getLocale(request);
  try {
    fromDate=(java.sql.Timestamp)ObjectType.simpleTypeConvert(fromDateStr,"java.sql.Timestamp",null,null);
  }
 catch (  GeneralException e) {
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderInvalidDateFormatForFromDate",locale));
    return "error";
  }
  Map<String,Object> result=null;
  try {
    Map<String,? extends Object> context=UtilMisc.toMap("workEffortId",workEffortId,"partyId",partyId,"roleTypeId",roleTypeId,"fromDate",fromDate,"result",parameterMap,"userLogin",userLogin);
    result=dispatcher.runSync("wfCompleteAssignment",context);
    if (result.containsKey(ModelService.RESPOND_ERROR)) {
      request.setAttribute("_ERROR_MESSAGE_",result.get(ModelService.ERROR_MESSAGE));
      return "error";
    }
  }
 catch (  GenericServiceException e) {
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemsInvokingTheCompleteAssignmentService",locale));
    return "error";
  }
  return "success";
}
