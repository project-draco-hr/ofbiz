{
  String value=methodContext.expandString(this.value);
  String operator=methodContext.expandString(this.operator);
  String type=methodContext.expandString(this.type);
  String format=methodContext.expandString(this.format);
  while (true) {
    Object fieldVal=null;
    if (!mapAcsr.isEmpty()) {
      Map fromMap=(Map)mapAcsr.get(methodContext);
      if (fromMap == null) {
        if (Debug.infoOn())         Debug.logInfo("Map not found with name " + mapAcsr + ", using empty string for comparison",module);
      }
 else {
        fieldVal=fieldAcsr.get(fromMap,methodContext);
      }
    }
 else {
      fieldVal=fieldAcsr.get(methodContext);
    }
    if (fieldVal == null) {
      fieldVal="";
    }
    List messages=FastList.newInstance();
    Boolean resultBool=BaseCompare.doRealCompare(fieldVal,value,operator,type,format,messages,null,methodContext.getLoader(),true);
    if (messages.size() > 0) {
      messages.add(0,"Error with comparison in while-compare between field [" + mapAcsr.toString() + "."+ fieldAcsr.toString()+ "] with value ["+ fieldVal+ "] and value ["+ value+ "] with operator ["+ operator+ "] and type ["+ type+ "]: ");
      if (methodContext.getMethodType() == MethodContext.EVENT) {
        StringBuffer fullString=new StringBuffer();
        Iterator miter=messages.iterator();
        while (miter.hasNext()) {
          fullString.append((String)miter.next());
        }
        Debug.logWarning(fullString.toString(),module);
        methodContext.putEnv(simpleMethod.getEventErrorMessageName(),fullString.toString());
        methodContext.putEnv(simpleMethod.getEventResponseCodeName(),simpleMethod.getDefaultErrorCode());
      }
 else       if (methodContext.getMethodType() == MethodContext.SERVICE) {
        methodContext.putEnv(simpleMethod.getServiceErrorMessageListName(),messages);
        methodContext.putEnv(simpleMethod.getServiceResponseMessageName(),simpleMethod.getDefaultErrorCode());
      }
      return false;
    }
    if (resultBool != null && resultBool.booleanValue()) {
      boolean subOpResultBool=SimpleMethod.runSubOps(subOps,methodContext);
      if (!subOpResultBool) {
        return false;
      }
    }
 else {
      return true;
    }
  }
}
