{
  if (UtilValidate.isEmpty(productPromo)) {
    return null;
  }
  String candidateFieldName=ModelUtil.dbNameToVarName(productPromoContentTypeId);
  String cacheKey=productPromoContentTypeId + SEPARATOR + locale+ SEPARATOR+ mimeTypeId+ SEPARATOR+ productPromo.get("productPromoId");
  try {
    if (productPromoContentCache.get(cacheKey) != null) {
      return productPromoContentCache.get(cacheKey);
    }
    Writer outWriter=new StringWriter();
    getProductPromoContentAsText(null,productPromo,productPromoContentTypeId,locale,mimeTypeId,partyId,roleTypeId,delegator,dispatcher,outWriter);
    String outString=outWriter.toString();
    if (outString.length() > 0) {
      if (productPromoContentCache != null) {
        productPromoContentCache.put(cacheKey,outString);
      }
      return outString;
    }
 else {
      String candidateOut=productPromo.getModelEntity().isField(candidateFieldName) ? productPromo.getString(candidateFieldName) : "";
      return candidateOut == null ? "" : candidateOut;
    }
  }
 catch (  GeneralException e) {
    Debug.logError(e,"Error rendering ProductPromoContent, inserting empty String",module);
    String candidateOut=productPromo.getModelEntity().isField(candidateFieldName) ? productPromo.getString(candidateFieldName) : "";
    return candidateOut == null ? "" : candidateOut;
  }
catch (  IOException e) {
    Debug.logError(e,"Error rendering ProductPromoContent, inserting empty String",module);
    String candidateOut=productPromo.getModelEntity().isField(candidateFieldName) ? productPromo.getString(candidateFieldName) : "";
    return candidateOut == null ? "" : candidateOut;
  }
}
