{
  if (configWrapper == null || (!configWrapper.isCompleted()))   return;
  String configId=null;
  List questions=configWrapper.getQuestions();
  List configsToCheck=new LinkedList();
  int selectedOptionSize=0;
  for (int i=0; i < questions.size(); i++) {
    String configItemId=null;
    Long sequenceNum=null;
    List<ProductConfigWrapper.ConfigOption> selectedOptions=new ArrayList<ProductConfigWrapper.ConfigOption>();
    ConfigItem ci=(ConfigItem)questions.get(i);
    List options=ci.getOptions();
    if (ci.isStandard()) {
      selectedOptions.addAll(options);
    }
 else {
      Iterator availOptions=options.iterator();
      while (availOptions.hasNext()) {
        ConfigOption oneOption=(ConfigOption)availOptions.next();
        if (oneOption.isSelected()) {
          selectedOptions.add(oneOption);
        }
      }
    }
    if (selectedOptions.size() > 0) {
      selectedOptionSize+=selectedOptions.size();
      configItemId=ci.getConfigItemAssoc().getString("configItemId");
      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");
      try {
        List<GenericValue> configs=delegator.findByAnd("ProductConfigConfig",UtilMisc.toMap("configItemId",configItemId,"sequenceNum",sequenceNum));
        Iterator<GenericValue> configIt=configs.iterator();
        while (configIt.hasNext()) {
          GenericValue productConfigConfig=configIt.next();
          Iterator selOpIt=selectedOptions.iterator();
          while (selOpIt.hasNext()) {
            ConfigOption oneOption=(ConfigOption)selOpIt.next();
            String configOptionId=oneOption.configOption.getString("configOptionId");
            if (productConfigConfig.getString("configOptionId").equals(configOptionId)) {
              String comments=oneOption.getComments() != null ? oneOption.getComments() : "";
              if ((UtilValidate.isEmpty(comments) && UtilValidate.isEmpty(productConfigConfig.getString("description"))) || comments.equals(productConfigConfig.getString("description"))) {
                configsToCheck.add(productConfigConfig);
              }
            }
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
    }
  }
  if (UtilValidate.isNotEmpty(configsToCheck)) {
    Iterator<GenericValue> ctci=configsToCheck.iterator();
    while (ctci.hasNext()) {
      GenericValue productConfigConfig=ctci.next();
      String tempConfigId=productConfigConfig.getString("configId");
      try {
        List tempResult=delegator.findByAnd("ProductConfigConfig",UtilMisc.toMap("configId",tempConfigId));
        if (tempResult.size() == selectedOptionSize && configsToCheck.containsAll(tempResult)) {
          List<GenericValue> configOptionProductOptions=delegator.findByAnd("ConfigOptionProductOption",UtilMisc.toMap("configId",tempConfigId));
          if (UtilValidate.isNotEmpty(configOptionProductOptions)) {
            for (int i=0; i < questions.size(); i++) {
              String configItemId=null;
              Long sequenceNum=null;
              List<ProductConfigWrapper.ConfigOption> selectedOptions=new ArrayList<ProductConfigWrapper.ConfigOption>();
              ConfigItem ci=(ConfigItem)questions.get(i);
              List options=ci.getOptions();
              if (ci.isStandard()) {
                selectedOptions.addAll(options);
              }
 else {
                Iterator availOptions=options.iterator();
                while (availOptions.hasNext()) {
                  ConfigOption oneOption=(ConfigOption)availOptions.next();
                  if (oneOption.isSelected()) {
                    selectedOptions.add(oneOption);
                  }
                }
              }
              boolean match=true;
              for (              ProductConfigWrapper.ConfigOption anOption : selectedOptions) {
                if (match && anOption.hasVirtualComponent()) {
                  List<GenericValue> components=anOption.getComponents();
                  for (                  GenericValue aComponent : components) {
                    if (anOption.isVirtualComponent(aComponent)) {
                      Map componentOptions=anOption.getComponentOptions();
                      String optionProductId=aComponent.getString("productId");
                      String optionProductOptionId=(String)componentOptions.get(optionProductId);
                      String configOptionId=anOption.configOption.getString("configOptionId");
                      configItemId=ci.getConfigItemAssoc().getString("configItemId");
                      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");
                      GenericValue configOptionProductOption=delegator.makeValue("ConfigOptionProductOption");
                      configOptionProductOption.set("configId",tempConfigId);
                      configOptionProductOption.set("configItemId",configItemId);
                      configOptionProductOption.set("sequenceNum",sequenceNum);
                      configOptionProductOption.set("configOptionId",configOptionId);
                      configOptionProductOption.set("productId",optionProductId);
                      configOptionProductOption.set("productOptionId",optionProductOptionId);
                      if (!configOptionProductOptions.remove(configOptionProductOption)) {
                        match=false;
                        break;
                      }
                    }
                  }
                }
              }
              if (match && (UtilValidate.isEmpty(configOptionProductOptions))) {
                configWrapper.configId=tempConfigId;
                Debug.logInfo("Existing configuration found with configId:" + tempConfigId,module);
                return;
              }
            }
          }
 else {
            configWrapper.configId=tempConfigId;
            Debug.logInfo("Existing configuration found with configId:" + tempConfigId,module);
            return;
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
    }
  }
  boolean nextId=true;
  for (int i=0; i < questions.size(); i++) {
    String configItemId=null;
    Long sequenceNum=null;
    List<ProductConfigWrapper.ConfigOption> selectedOptions=new ArrayList<ProductConfigWrapper.ConfigOption>();
    ConfigItem ci=(ConfigItem)questions.get(i);
    List options=ci.getOptions();
    if (ci.isStandard()) {
      selectedOptions.addAll(options);
    }
 else {
      Iterator availOptions=options.iterator();
      while (availOptions.hasNext()) {
        ConfigOption oneOption=(ConfigOption)availOptions.next();
        if (oneOption.isSelected()) {
          selectedOptions.add(oneOption);
        }
      }
    }
    if (selectedOptions.size() > 0) {
      if (nextId) {
        configId=delegator.getNextSeqId("ProductConfigConfig");
        nextId=false;
      }
      configItemId=ci.getConfigItemAssoc().getString("configItemId");
      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");
      Iterator selOpIt=selectedOptions.iterator();
      while (selOpIt.hasNext()) {
        List toBeStored=new LinkedList();
        ConfigOption oneOption=(ConfigOption)selOpIt.next();
        String configOptionId=oneOption.configOption.getString("configOptionId");
        String description=oneOption.getComments();
        GenericValue productConfigConfig=delegator.makeValue("ProductConfigConfig");
        productConfigConfig.put("configId",configId);
        productConfigConfig.put("configItemId",configItemId);
        productConfigConfig.put("sequenceNum",sequenceNum);
        productConfigConfig.put("configOptionId",configOptionId);
        productConfigConfig.put("description",description);
        toBeStored.add(productConfigConfig);
        if (oneOption.hasVirtualComponent()) {
          List components=oneOption.getComponents();
          for (int j=0; j < components.size(); j++) {
            GenericValue component=(GenericValue)components.get(j);
            if (oneOption.isVirtualComponent(component)) {
              String componentOption=(String)oneOption.componentOptions.get(component.getString("productId"));
              GenericValue configOptionProductOption=delegator.makeValue("ConfigOptionProductOption");
              configOptionProductOption.put("configId",configId);
              configOptionProductOption.put("configItemId",configItemId);
              configOptionProductOption.put("sequenceNum",sequenceNum);
              configOptionProductOption.put("configOptionId",configOptionId);
              configOptionProductOption.put("productId",component.getString("productId"));
              configOptionProductOption.put("productOptionId",componentOption);
              toBeStored.add(configOptionProductOption);
            }
          }
        }
        try {
          delegator.storeAll(toBeStored);
        }
 catch (        GenericEntityException e) {
          configId=null;
          Debug.logWarning(e.getMessage(),module);
        }
      }
    }
  }
  configWrapper.configId=configId;
  Debug.logInfo("New configId created:" + configId,module);
  return;
}
