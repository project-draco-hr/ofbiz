{
  int numOfQuestions=configWrapper.getQuestions().size();
  for (int k=0; k < numOfQuestions; k++) {
    String[] opts=request.getParameterValues(Integer.toString(k));
    if (opts == null) {
      ProductConfigWrapper.ConfigItem question=configWrapper.getQuestions().get(k);
      if (question.isStandard()) {
        int i=0;
        while (i <= (question.getOptions().size() - 1)) {
          String comments=request.getParameter("comments_" + k + "_"+ i);
          if (UtilValidate.isNotEmpty(comments)) {
            try {
              configWrapper.setSelected(k,i,comments);
            }
 catch (            Exception e) {
              Debug.logWarning(e.getMessage(),module);
            }
          }
          i++;
        }
      }
      continue;
    }
    for (    String opt : opts) {
      int cnt=-1;
      try {
        cnt=Integer.parseInt(opt);
        String comments=null;
        ProductConfigWrapper.ConfigItem question=configWrapper.getQuestions().get(k);
        if (question.isSingleChoice()) {
          comments=request.getParameter("comments_" + k + "_"+ "0");
        }
 else {
          comments=request.getParameter("comments_" + k + "_"+ cnt);
        }
        configWrapper.setSelected(k,cnt,comments);
        ProductConfigWrapper.ConfigOption option=configWrapper.getItemOtion(k,cnt);
        if (UtilValidate.isNotEmpty(option) && (option.hasVirtualComponent())) {
          List<GenericValue> components=option.getComponents();
          int variantIndex=0;
          for (int i=0; i < components.size(); i++) {
            GenericValue component=components.get(i);
            if (option.isVirtualComponent(component)) {
              String productParamName="add_product_id" + k + "_"+ cnt+ "_"+ variantIndex;
              String selectedProductId=request.getParameter(productParamName);
              if (UtilValidate.isEmpty(selectedProductId)) {
                Debug.logWarning("ERROR: Request param [" + productParamName + "] not found!",module);
              }
 else {
                if (ProductWorker.isVirtual((Delegator)request.getAttribute("delegator"),selectedProductId)) {
                  if ("VV_FEATURETREE".equals(ProductWorker.getProductVirtualVariantMethod((Delegator)request.getAttribute("delegator"),selectedProductId))) {
                    List<String> selectedFeatures=FastList.newInstance();
                    Enumeration<String> paramNames=UtilGenerics.cast(request.getParameterNames());
                    while (paramNames.hasMoreElements()) {
                      String paramName=paramNames.nextElement();
                      if (paramName.startsWith("FT" + k + "_"+ cnt+ "_"+ variantIndex)) {
                        selectedFeatures.add(request.getParameterValues(paramName)[0]);
                      }
                    }
                    if (UtilValidate.isEmpty(selectedFeatures)) {
                      Debug.logWarning("ERROR: No features selected for productId [" + selectedProductId + "]",module);
                    }
                    String variantProductId=ProductWorker.getVariantFromFeatureTree(selectedProductId,selectedFeatures,(Delegator)request.getAttribute("delegator"));
                    if (UtilValidate.isNotEmpty(variantProductId)) {
                      selectedProductId=variantProductId;
                    }
 else {
                      Debug.logWarning("ERROR: Variant product not found!",module);
                      request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage("OrderErrorUiLabels","cart.addToCart.incompatibilityVariantFeature",UtilHttp.getLocale(request)));
                    }
                  }
                }
                configWrapper.setSelected(k,cnt,i,selectedProductId);
              }
              variantIndex++;
            }
          }
        }
      }
 catch (      Exception e) {
        Debug.logWarning(e.getMessage(),module);
      }
    }
  }
}
