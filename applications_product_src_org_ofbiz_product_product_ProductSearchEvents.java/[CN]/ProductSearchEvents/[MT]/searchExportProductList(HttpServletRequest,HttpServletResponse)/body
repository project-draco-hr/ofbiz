{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String errMsg=null;
  List<Map<String,Object>> productExportList=FastList.newInstance();
  try {
    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);
    try {
      EntityListIterator eli=getProductSearchResults(request);
      if (eli == null) {
        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
        return "error";
      }
      GenericValue searchResultView=null;
      while ((searchResultView=eli.next()) != null) {
        Map<String,Object> productMap=FastMap.newInstance();
        String productId=searchResultView.getString("mainProductId");
        productMap.put("productId",productId);
        productMap.put("productFeatureCustom",EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureTypeId","HAZMAT").filterByDate().queryFirst());
        List<GenericValue> productCategories=EntityQuery.use(delegator).from("ProductCategoryAndMember").where("productId",productId).filterByDate().queryList();
        productMap.put("productCategories",productCategories);
        List<GenericValue> productFeatures=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId).filterByDate().queryList();
        productMap.put("productFeatures",productFeatures);
        productExportList.add(productMap);
      }
      eli.close();
    }
 catch (    GenericEntityException e) {
      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());
      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));
      Debug.logError(e,errMsg,module);
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      TransactionUtil.rollback(beganTransaction,errMsg,e);
      return "error";
    }
 finally {
      TransactionUtil.commit(beganTransaction);
    }
  }
 catch (  GenericTransactionException e) {
    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());
    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  request.setAttribute("productExportList",productExportList);
  return "success";
}
