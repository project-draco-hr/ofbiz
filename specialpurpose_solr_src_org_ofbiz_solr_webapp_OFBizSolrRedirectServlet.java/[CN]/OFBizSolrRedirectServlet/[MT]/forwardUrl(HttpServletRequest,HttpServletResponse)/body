{
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  boolean forwardToLogin=false;
  if (UtilValidate.isEmpty(userLogin)) {
    forwardToLogin=true;
  }
  if (forwardToLogin || !request.getScheme().equals("https")) {
    StringBuilder newURL=new StringBuilder(250);
    try {
      OfbizUrlBuilder builder=OfbizUrlBuilder.from(request);
      builder.buildHostPart(newURL,"",true);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Exception thrown while getting web site properties: ",module);
      return false;
    }
catch (    WebAppConfigurationException e) {
      Debug.logError(e,"Exception thrown while parsing controller.xml file: ",module);
      return false;
    }
catch (    IOException e) {
      Debug.logError(e,"Exception thrown while writing to StringBuilder: ",module);
      return false;
    }
    if (forwardToLogin) {
      String contextPath=request.getContextPath();
      if (UtilValidate.isNotEmpty(contextPath)) {
        newURL.append(contextPath);
      }
      newURL.append("/control/checkLogin");
      String uri=request.getRequestURI();
      if (UtilValidate.isNotEmpty(contextPath) && uri.startsWith(contextPath)) {
        uri=uri.replaceFirst(request.getContextPath(),"");
      }
      String servletPath=request.getServletPath();
      if (UtilValidate.isNotEmpty(servletPath) && uri.startsWith(servletPath)) {
        uri=uri.replaceFirst(servletPath,"");
      }
      newURL.append(uri);
    }
 else {
      newURL.append(request.getRequestURI());
    }
    try {
      response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);
      response.setHeader("Location",newURL.toString());
      response.setHeader("Connection","close");
    }
 catch (    IllegalStateException ise) {
      throw new IOException(ise.getMessage(),ise);
    }
    return true;
  }
  return false;
}
