{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  MimeMessageWrapper wrapper=(MimeMessageWrapper)context.get("messageWrapper");
  MimeMessage message=wrapper.getMessage();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String partyIdTo=null;
  String partyIdFrom=null;
  String contentType=null;
  String content=null;
  String communicationEventId=null;
  String contactMechIdFrom=null;
  String contactMechIdTo=null;
  Map result=null;
  try {
    String contentTypeRaw=message.getContentType();
    int idx=contentTypeRaw.indexOf(";");
    if (idx == -1)     idx=contentTypeRaw.length();
    contentType=contentTypeRaw.substring(0,idx);
    if (contentType == null || contentType.equals(""))     contentType="text/html";
    Address[] addressesFrom=message.getFrom();
    Address[] addressesTo=message.getRecipients(MimeMessage.RecipientType.TO);
    Address[] addressesCC=message.getRecipients(MimeMessage.RecipientType.CC);
    Address[] addressesBCC=message.getRecipients(MimeMessage.RecipientType.BCC);
    Debug.logInfo("Processing Incoming Email message from: " + (addressesFrom[0] == null ? "not found" : addressesFrom[0].toString()) + " to: "+ (addressesTo[0] == null ? "not found" : addressesTo[0].toString()),module);
    String spamHeaderName=UtilProperties.getPropertyValue("general.properties","mail.spam.name","N");
    String configHeaderValue=UtilProperties.getPropertyValue("general.properties","mail.spam.value");
    if (!spamHeaderName.equals("N") && message.getHeader(spamHeaderName) != null) {
      String msgHeaderValue=message.getHeader(spamHeaderName)[0];
      if (msgHeaderValue != null && msgHeaderValue.startsWith(configHeaderValue)) {
        Debug.logInfo("Incoming Email message ignored, was detected by external spam checker",module);
        return ServiceUtil.returnSuccess(" Message Ignored: detected by external spam checker");
      }
    }
    if (addressesFrom == null) {
      Debug.logInfo("Incoming Email message ignored, had not 'from' email address",module);
      return ServiceUtil.returnSuccess(" Message Ignored: no 'From' address specified");
    }
    result=getParyInfoFromEmailAddress(addressesFrom,userLogin,dispatcher);
    partyIdFrom=(String)result.get("partyId");
    contactMechIdFrom=(String)result.get("contactMechId");
    List allResults=getListOfParyInfoFromEmailAddresses(addressesTo,addressesCC,addressesBCC,userLogin,dispatcher);
    Iterator itr=allResults.iterator();
    if ((allResults != null) && (allResults.size() > 0)) {
      Map firstAddressTo=(Map)itr.next();
      partyIdTo=(String)firstAddressTo.get("partyId");
      contactMechIdTo=(String)firstAddressTo.get("contactMechId");
    }
    String deliveredTo=message.getHeader("Delivered-To")[0];
    String dn=deliveredTo.substring(deliveredTo.indexOf("@") + 1,deliveredTo.length());
    if (deliveredTo.startsWith(dn)) {
      deliveredTo=deliveredTo.substring(dn.length() + 1,deliveredTo.length());
    }
    if (partyIdTo == null) {
      result=dispatcher.runSync("findPartyFromEmailAddress",UtilMisc.toMap("address",deliveredTo,"userLogin",userLogin));
      partyIdTo=(String)result.get("partyId");
      contactMechIdTo=(String)result.get("contactMechId");
    }
    Map commEventMap=new HashMap();
    commEventMap.put("communicationEventTypeId","AUTO_EMAIL_COMM");
    commEventMap.put("contactMechTypeId","EMAIL_ADDRESS");
    String subject=message.getSubject();
    commEventMap.put("subject",subject);
    commEventMap.put("entryDate",nowTimestamp);
    commEventMap.put("datetimeStarted",UtilDateTime.toTimestamp(message.getSentDate()));
    commEventMap.put("datetimeEnded",UtilDateTime.toTimestamp(message.getReceivedDate()));
    int contentIndex=-1;
    Multipart multipart=null;
    if (contentType.startsWith("text")) {
      content=(String)message.getContent();
      commEventMap.put("contentMimeTypeId",contentType);
    }
 else     if (contentType.startsWith("multipart") || contentType.startsWith("Multipart")) {
      multipart=(Multipart)message.getContent();
      int multipartCount=multipart.getCount();
      for (int i=0; i < multipartCount; i++) {
        Part part=multipart.getBodyPart(i);
        String thisContentTypeRaw=part.getContentType();
        int idx2=thisContentTypeRaw.indexOf(";");
        if (idx2 == -1)         idx2=thisContentTypeRaw.length();
        String thisContentType=thisContentTypeRaw.substring(0,idx2);
        if (thisContentType == null || thisContentType.equals(""))         thisContentType="text/html";
        String disposition=part.getDisposition();
        if ((disposition == null) && (i == 0) && thisContentType.startsWith("text")) {
          content=(String)part.getContent();
          if (UtilValidate.isNotEmpty(content)) {
            contentIndex=i;
            commEventMap.put("contentMimeTypeId",thisContentType);
            break;
          }
        }
 else         if ((disposition != null) && (disposition.equals(Part.ATTACHMENT) || disposition.equals(Part.INLINE)) && thisContentType.startsWith("text")) {
          content=(String)part.getContent();
          contentIndex=i;
          commEventMap.put("contentMimeTypeId",thisContentType);
          break;
        }
      }
    }
    commEventMap.put("content",content);
    String commNote="";
    if (partyIdFrom != null) {
      commEventMap.put("partyIdFrom",partyIdFrom);
      commEventMap.put("contactMechIdFrom",contactMechIdFrom);
    }
 else {
      commNote+="Sent from: " + ((InternetAddress)addressesFrom[0]).getAddress() + "; ";
      commNote+="Sent Name from: " + ((InternetAddress)addressesFrom[0]).getPersonal() + "; ";
    }
    if (partyIdTo != null) {
      commEventMap.put("partyIdTo",partyIdTo);
      commEventMap.put("contactMechIdTo",contactMechIdTo);
    }
 else {
      commNote+="Sent to: " + ((InternetAddress)addressesTo[0]).getAddress() + "; ";
      commNote+="Delivered-To: " + deliveredTo + "; ";
    }
    if (partyIdTo != null && partyIdFrom != null) {
      commEventMap.put("statusId","COM_ENTERED");
    }
 else {
      commEventMap.put("statusId","COM_UNKNOWN_PARTY");
    }
    if (!("".equals(commNote))) {
      commEventMap.put("note",commNote);
    }
    commEventMap.put("userLogin",userLogin);
    result=dispatcher.runSync("createCommunicationEvent",commEventMap);
    communicationEventId=(String)result.get("communicationEventId");
    if (userLogin.get("partyId") == null) {
      int ch=0;
      for (ch=communicationEventId.length(); ch > 0 && Character.isDigit(communicationEventId.charAt(ch - 1)); ch--)       ;
      userLogin.put("partyId",communicationEventId.substring(0,ch));
    }
    if (contentType.startsWith("multipart") || contentType.startsWith("Multipart")) {
      int attachmentCount=EmailWorker.addAttachmentsToCommEvent(message,communicationEventId,contentIndex,dispatcher,userLogin);
      if (Debug.infoOn())       Debug.logInfo(attachmentCount + " attachments added to CommunicationEvent:" + communicationEventId,module);
    }
    while (itr.hasNext()) {
      Map address=(Map)itr.next();
      String partyId=(String)address.get("partyId");
      GenericValue partyRole=delegator.findByPrimaryKey("PartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId","_NA_"));
      if (partyRole == null) {
        dispatcher.runSync("createPartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId","_NA_","userLogin",userLogin));
      }
      Map input=UtilMisc.toMap("communicationEventId",communicationEventId,"partyId",partyId,"roleTypeId","_NA_","userLogin",userLogin,"contactMechId",(String)address.get("contactMechId"));
      dispatcher.runSync("createCommunicationEventRole",input);
    }
    Map results=ServiceUtil.returnSuccess();
    results.put("communicationEventId",communicationEventId);
    return results;
  }
 catch (  MessagingException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  IOException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  Exception e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
}
