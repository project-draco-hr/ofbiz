{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)serviceContext.get("userLogin");
  String subject=(String)serviceContext.get("subject");
  String body=(String)serviceContext.get("body");
  String partyId=(String)serviceContext.get("partyId");
  String communicationEventId=(String)serviceContext.get("communicationEventId");
  String contentType=(String)serviceContext.get("contentType");
  if (communicationEventId == null) {
    String partyIdFrom=(String)userLogin.get("partyId");
    Map commEventMap=FastMap.newInstance();
    commEventMap.put("communicationEventTypeId","EMAIL_COMMUNICATION");
    commEventMap.put("statusId","COM_COMPLETE");
    commEventMap.put("contactMechTypeId","EMAIL_ADDRESS");
    commEventMap.put("partyIdFrom",partyIdFrom);
    commEventMap.put("partyIdTo",partyId);
    commEventMap.put("datetimeStarted",UtilDateTime.nowTimestamp());
    commEventMap.put("datetimeEnded",UtilDateTime.nowTimestamp());
    commEventMap.put("subject",subject);
    commEventMap.put("content",body);
    commEventMap.put("userLogin",userLogin);
    commEventMap.put("contentMimeTypeId",contentType);
    try {
      dispatcher.runSync("createCommunicationEvent",commEventMap);
    }
 catch (    Exception e) {
      Debug.logError(e,"Cannot store email as communication event",module);
      return ServiceUtil.returnError("Cannot store email as communication event; see logs");
    }
  }
  return ServiceUtil.returnSuccess();
}
