{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  MimeMessageWrapper wrapper=(MimeMessageWrapper)context.get("messageWrapper");
  MimeMessage message=wrapper.getMessage();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String partyIdTo=null;
  String partyIdFrom=null;
  String contentType=null;
  String communicationEventId=null;
  String contactMechIdFrom=null;
  String contactMechIdTo=null;
  Map result=null;
  try {
    String contentTypeRaw=message.getContentType();
    int idx=contentTypeRaw.indexOf(";");
    if (idx == -1)     idx=contentTypeRaw.length();
    contentType=contentTypeRaw.substring(0,idx);
    if (contentType == null || contentType.equals(""))     contentType="text/html";
    contentType=contentType.toLowerCase();
    Address[] addressesFrom=message.getFrom();
    Address[] addressesTo=message.getRecipients(MimeMessage.RecipientType.TO);
    Address[] addressesCC=message.getRecipients(MimeMessage.RecipientType.CC);
    Address[] addressesBCC=message.getRecipients(MimeMessage.RecipientType.BCC);
    String messageId=message.getMessageID();
    String aboutThisEmail="message [" + messageId + "] from ["+ (addressesFrom[0] == null ? "not found" : addressesFrom[0].toString())+ "] to ["+ (addressesTo[0] == null ? "not found" : addressesTo[0].toString())+ "]";
    if (Debug.verboseOn())     Debug.logVerbose("Processing Incoming Email " + aboutThisEmail,module);
    String spamHeaderName=UtilProperties.getPropertyValue("general.properties","mail.spam.name","N");
    String configHeaderValue=UtilProperties.getPropertyValue("general.properties","mail.spam.value");
    if (!spamHeaderName.equals("N") && message.getHeader(spamHeaderName) != null && message.getHeader(spamHeaderName).length > 0) {
      String msgHeaderValue=message.getHeader(spamHeaderName)[0];
      if (msgHeaderValue != null && msgHeaderValue.startsWith(configHeaderValue)) {
        Debug.logInfo("Incoming Email message ignored, was detected by external spam checker",module);
        return ServiceUtil.returnSuccess(" Message Ignored: detected by external spam checker");
      }
    }
    if (addressesFrom == null) {
      Debug.logInfo("Incoming Email message ignored, had not 'from' email address",module);
      return ServiceUtil.returnSuccess(" Message Ignored: no 'From' address specified");
    }
    List commEvents;
    try {
      commEvents=delegator.findByAnd("CommunicationEvent",UtilMisc.toMap("messageId",messageId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (!commEvents.isEmpty()) {
      Debug.logInfo("Ignoring Duplicate Email: " + aboutThisEmail,module);
      return ServiceUtil.returnSuccess(" Message Ignored: deplicate messageId");
    }
 else {
      Debug.logInfo("Persisting New Email: " + aboutThisEmail,module);
    }
    List toParties=buildListOfPartyInfoFromEmailAddresses(addressesTo,userLogin,dispatcher);
    List ccParties=buildListOfPartyInfoFromEmailAddresses(addressesCC,userLogin,dispatcher);
    List bccParties=buildListOfPartyInfoFromEmailAddresses(addressesBCC,userLogin,dispatcher);
    if (!toParties.isEmpty()) {
      Iterator itr=toParties.iterator();
      Map firstAddressTo=(Map)itr.next();
      partyIdTo=(String)firstAddressTo.get("partyId");
      contactMechIdTo=(String)firstAddressTo.get("contactMechId");
    }
    String deliveredTo=null;
    if (message.getHeader("Delivered-To") != null) {
      deliveredTo=message.getHeader("Delivered-To")[0];
      String dn=deliveredTo.substring(deliveredTo.indexOf("@") + 1,deliveredTo.length());
      if (deliveredTo.startsWith(dn)) {
        deliveredTo=deliveredTo.substring(dn.length() + 1,deliveredTo.length());
      }
    }
    if ((partyIdTo == null) && (deliveredTo != null)) {
      result=dispatcher.runSync("findPartyFromEmailAddress",UtilMisc.<String,Object>toMap("address",deliveredTo,"userLogin",userLogin));
      partyIdTo=(String)result.get("partyId");
      contactMechIdTo=(String)result.get("contactMechId");
    }
    if (userLogin.get("partyId") == null && partyIdTo != null) {
      int ch=0;
      for (ch=partyIdTo.length(); ch > 0 && Character.isDigit(partyIdTo.charAt(ch - 1)); ch--) {
        ;
      }
      userLogin.put("partyId",partyIdTo.substring(0,ch));
    }
    result=getParyInfoFromEmailAddress(addressesFrom,userLogin,dispatcher);
    partyIdFrom=(String)result.get("partyId");
    contactMechIdFrom=(String)result.get("contactMechId");
    Map commEventMap=FastMap.newInstance();
    commEventMap.put("communicationEventTypeId","AUTO_EMAIL_COMM");
    commEventMap.put("contactMechTypeId","EMAIL_ADDRESS");
    commEventMap.put("messageId",messageId);
    String subject=message.getSubject();
    commEventMap.put("subject",subject);
    commEventMap.put("entryDate",nowTimestamp);
    commEventMap.put("datetimeStarted",UtilDateTime.toTimestamp(message.getSentDate()));
    commEventMap.put("datetimeEnded",UtilDateTime.toTimestamp(message.getReceivedDate()));
    commEventMap.put("roleTypeIdFrom","_NA_");
    commEventMap.put("roleTypeIdTo","_NA_");
    Object messageContent=message.getContent();
    if (contentType.startsWith("text")) {
      commEventMap.put("content",messageContent);
      commEventMap.put("contentMimeTypeId",contentType);
    }
 else     if (messageContent instanceof Multipart) {
      contentIndex="";
      commEventMap=addMessageBody(commEventMap,(Multipart)messageContent);
    }
    String[] inReplyTo=message.getHeader("In-Reply-To");
    if (inReplyTo != null && inReplyTo[0] != null) {
      GenericValue parentCommEvent=null;
      try {
        List events=delegator.findByAnd("CommunicationEvent",UtilMisc.toMap("messageId",inReplyTo[0]));
        parentCommEvent=EntityUtil.getFirst(events);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      if (parentCommEvent != null) {
        String parentCommEventId=parentCommEvent.getString("communicationEventId");
        String orgCommEventId=parentCommEvent.getString("origCommEventId");
        if (orgCommEventId == null)         orgCommEventId=parentCommEventId;
        commEventMap.put("parentCommEventId",parentCommEventId);
        commEventMap.put("origCommEventId",orgCommEventId);
      }
    }
    Set emailAddressesFrom=new TreeSet();
    Set emailAddressesTo=new TreeSet();
    Set emailAddressesCC=new TreeSet();
    Set emailAddressesBCC=new TreeSet();
    for (int x=0; x < addressesFrom.length; x++) {
      emailAddressesFrom.add(((InternetAddress)addressesFrom[x]).getAddress());
    }
    for (int x=0; x < addressesTo.length; x++) {
      emailAddressesTo.add(((InternetAddress)addressesTo[x]).getAddress());
    }
    if (addressesCC != null) {
      for (int x=0; x < addressesCC.length; x++) {
        emailAddressesCC.add(((InternetAddress)addressesCC[x]).getAddress());
      }
    }
    if (addressesBCC != null) {
      for (int x=0; x < addressesBCC.length; x++) {
        emailAddressesBCC.add(((InternetAddress)addressesBCC[x]).getAddress());
      }
    }
    String fromString=StringUtil.join(UtilMisc.toList(emailAddressesFrom),",");
    String toString=StringUtil.join(UtilMisc.toList(emailAddressesTo),",");
    String ccString=StringUtil.join(UtilMisc.toList(emailAddressesCC),",");
    String bccString=StringUtil.join(UtilMisc.toList(emailAddressesBCC),",");
    if (UtilValidate.isNotEmpty(fromString))     commEventMap.put("fromString",fromString);
    if (UtilValidate.isNotEmpty(toString))     commEventMap.put("toString",toString);
    if (UtilValidate.isNotEmpty(ccString))     commEventMap.put("ccString",ccString);
    if (UtilValidate.isNotEmpty(bccString))     commEventMap.put("bccString",bccString);
    String commNote="";
    if (partyIdFrom != null) {
      commEventMap.put("partyIdFrom",partyIdFrom);
      commEventMap.put("contactMechIdFrom",contactMechIdFrom);
    }
 else {
      commNote+="Sent from: " + ((InternetAddress)addressesFrom[0]).getAddress() + "; ";
      commNote+="Sent Name from: " + ((InternetAddress)addressesFrom[0]).getPersonal() + "; ";
    }
    if (partyIdTo != null) {
      commEventMap.put("partyIdTo",partyIdTo);
      commEventMap.put("contactMechIdTo",contactMechIdTo);
    }
 else {
      commNote+="Sent to: " + ((InternetAddress)addressesTo[0]).getAddress() + "; ";
      if (deliveredTo != null) {
        commNote+="Delivered-To: " + deliveredTo + "; ";
      }
    }
    commNote+="Sent to: " + ((InternetAddress)addressesTo[0]).getAddress() + "; ";
    commNote+="Delivered-To: " + deliveredTo + "; ";
    if (partyIdTo != null && partyIdFrom != null) {
      commEventMap.put("statusId","COM_ENTERED");
    }
 else {
      commEventMap.put("statusId","COM_UNKNOWN_PARTY");
    }
    if (commNote.length() > 255)     commNote=commNote.substring(0,255);
    if (!("".equals(commNote))) {
      commEventMap.put("note",commNote);
    }
    commEventMap.put("userLogin",userLogin);
    String headerString="";
    Enumeration headerLines=message.getAllHeaderLines();
    while (headerLines.hasMoreElements()) {
      headerString+=System.getProperty("line.separator");
      headerString+=headerLines.nextElement();
    }
    commEventMap.put("headerString",headerString);
    result=dispatcher.runSync("createCommunicationEvent",commEventMap);
    communicationEventId=(String)result.get("communicationEventId");
    if (messageContent instanceof Multipart) {
      Debug.logInfo("===message has attachments=====",module);
      int attachmentCount=EmailWorker.addAttachmentsToCommEvent((Multipart)messageContent,subject,communicationEventId,dispatcher,userLogin);
      if (Debug.infoOn())       Debug.logInfo(attachmentCount + " attachments added to CommunicationEvent:" + communicationEventId,module);
    }
    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,toParties,"ADDRESSEE");
    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,ccParties,"CC");
    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,bccParties,"BCC");
    Map results=ServiceUtil.returnSuccess();
    results.put("communicationEventId",communicationEventId);
    results.put("statusId",commEventMap.get("statusId"));
    return results;
  }
 catch (  MessagingException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  IOException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  Exception e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
}
