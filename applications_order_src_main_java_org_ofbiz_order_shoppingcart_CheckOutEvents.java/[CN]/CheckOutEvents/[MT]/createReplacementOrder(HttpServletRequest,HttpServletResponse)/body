{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");
  Map<String,Object> context=cart.makeCartMap(dispatcher,false);
  String originalOrderId=request.getParameter("orderId");
  List<GenericValue> orderAdjustments=UtilGenerics.checkList(context.get("orderAdjustments"));
  List<GenericValue> orderItems=UtilGenerics.checkList(context.get("orderItems"));
  OrderReadHelper orderReadHelper=new OrderReadHelper(orderAdjustments,orderItems);
  BigDecimal grandTotal=orderReadHelper.getOrderGrandTotal();
  if (grandTotal.compareTo(new BigDecimal(0)) != 0) {
    GenericValue adjustment=delegator.makeValue("OrderAdjustment");
    adjustment.set("orderAdjustmentTypeId","REPLACE_ADJUSTMENT");
    adjustment.set("amount",grandTotal.negate());
    adjustment.set("comments","ReShip Order for Order #" + originalOrderId);
    adjustment.set("createdDate",UtilDateTime.nowTimestamp());
    adjustment.set("createdByUserLogin",userLogin.getString("userLoginId"));
    cart.addAdjustment(adjustment);
  }
  List<ShoppingCartItem> cartLines=cart.items();
  for (  ShoppingCartItem sci : cartLines) {
    int index=cart.getItemIndex(sci);
    try {
      GenericValue orderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",originalOrderId,"isPromo",sci.getIsPromo() ? "Y" : "N","productId",sci.getProductId(),"orderItemTypeId",sci.getItemType()).queryFirst();
      if (UtilValidate.isNotEmpty(orderItem)) {
        sci.setAssociatedOrderId(orderItem.getString("orderId"));
        sci.setAssociatedOrderItemSeqId(orderItem.getString("orderItemSeqId"));
        sci.setOrderItemAssocTypeId("REPLACEMENT");
        cart.addItem(index,sci);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
catch (    CartItemModifyException e) {
      Debug.logError(e.getMessage(),module);
    }
  }
  String result=createOrder(request,response);
  if ("error".equals(result)) {
    return "error";
  }
 else {
    return "success";
  }
}
