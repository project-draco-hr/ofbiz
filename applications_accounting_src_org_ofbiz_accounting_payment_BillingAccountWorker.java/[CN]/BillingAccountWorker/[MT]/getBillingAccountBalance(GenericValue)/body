{
  GenericDelegator delegator=billingAccount.getDelegator();
  String billingAccountId=billingAccount.getString("billingAccountId");
  BigDecimal balance=ZERO;
  BigDecimal accountLimit=getAccountLimit(billingAccount);
  balance=balance.add(accountLimit);
  EntityConditionList whereConditions=new EntityConditionList(UtilMisc.toList(new EntityExpr("billingAccountId",EntityOperator.EQUALS,billingAccountId),new EntityExpr("paymentMethodTypeId",EntityOperator.EQUALS,"EXT_BILLACT"),new EntityExpr("statusId",EntityOperator.NOT_IN,UtilMisc.toList("ORDER_CANCELLED","ORDER_REJECTED")),new EntityExpr("preferenceStatusId",EntityOperator.NOT_IN,UtilMisc.toList("PAYMENT_SETTLED","PAYMENT_RECEIVED","PAYMENT_DECLINED","PAYMENT_CANCELLED"))),EntityOperator.AND);
  List orderPaymentPreferenceSums=delegator.findByCondition("OrderPurchasePaymentSummary",whereConditions,null,UtilMisc.toList("maxAmount"),null,null);
  if (orderPaymentPreferenceSums != null) {
    for (Iterator oppsi=orderPaymentPreferenceSums.iterator(); oppsi.hasNext(); ) {
      GenericValue orderPaymentPreferenceSum=(GenericValue)oppsi.next();
      BigDecimal maxAmount=orderPaymentPreferenceSum.getBigDecimal("maxAmount");
      balance=maxAmount != null ? balance.subtract(maxAmount) : balance;
    }
  }
  List paymentAppls=delegator.findByAnd("PaymentApplication",UtilMisc.toMap("billingAccountId",billingAccountId));
  if (paymentAppls != null) {
    for (Iterator pAi=paymentAppls.iterator(); pAi.hasNext(); ) {
      GenericValue paymentAppl=(GenericValue)pAi.next();
      if (paymentAppl.getString("invoiceId") == null) {
        BigDecimal amountApplied=paymentAppl.getBigDecimal("amountApplied");
        balance=balance.add(amountApplied);
      }
    }
  }
  balance=balance.setScale(decimals,rounding);
  return balance;
}
