{
  List billingAccountList=FastList.newInstance();
  Map agentResult=dispatcher.runSync("getRelatedParties",UtilMisc.<String,Object>toMap("userLogin",userLogin,"partyIdFrom",partyId,"roleTypeIdFrom","AGENT","roleTypeIdTo","CUSTOMER","partyRelationshipTypeId","AGENT","includeFromToSwitched","Y"));
  if (ServiceUtil.isError(agentResult)) {
    throw new GeneralException("Error while finding party BillingAccounts when getting Customers that this party is an agent of: " + ServiceUtil.getErrorMessage(agentResult));
  }
  List relatedPartyIdList=(List)agentResult.get("relatedPartyIdList");
  EntityCondition barFindCond=new EntityConditionList(UtilMisc.toList(new EntityExpr("partyId",EntityOperator.IN,relatedPartyIdList),new EntityExpr("roleTypeId",EntityOperator.EQUALS,"BILL_TO_CUSTOMER")),EntityOperator.AND);
  List billingAccountRoleList=delegator.findByCondition("BillingAccountRole",barFindCond,null,null);
  billingAccountRoleList=EntityUtil.filterByDate(billingAccountRoleList);
  if (billingAccountRoleList != null && billingAccountRoleList.size() > 0) {
    double totalAvailable=0.0;
    Iterator billingAcctIter=billingAccountRoleList.iterator();
    while (billingAcctIter.hasNext()) {
      GenericValue billingAccountRole=(GenericValue)billingAcctIter.next();
      GenericValue billingAccountVO=billingAccountRole.getRelatedOne("BillingAccount");
      java.sql.Timestamp thruDate=billingAccountVO.getTimestamp("thruDate");
      if ((thruDate != null) && UtilDateTime.nowTimestamp().after(thruDate))       continue;
      if (currencyUomId.equals(billingAccountVO.getString("accountCurrencyUomId"))) {
        double accountBalance=(BillingAccountWorker.getBillingAccountBalance(billingAccountVO)).doubleValue();
        Map billingAccount=new HashMap(billingAccountVO);
        double accountLimit=getAccountLimit(billingAccountVO).doubleValue();
        billingAccount.put("accountBalance",new Double(accountBalance));
        double accountAvailable=accountLimit - accountBalance;
        totalAvailable+=accountAvailable;
        billingAccountList.add(billingAccount);
      }
    }
    Collections.sort(billingAccountList,new BillingAccountComparator());
  }
  return billingAccountList;
}
