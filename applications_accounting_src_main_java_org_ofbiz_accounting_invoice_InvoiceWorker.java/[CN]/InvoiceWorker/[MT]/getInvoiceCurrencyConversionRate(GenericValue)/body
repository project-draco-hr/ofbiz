{
  BigDecimal conversionRate=null;
  Delegator delegator=invoice.getDelegator();
  String otherCurrencyUomId=null;
  try {
    GenericValue party=EntityQuery.use(delegator).from("PartyAcctgPreference").where("partyId",invoice.get("partyIdFrom")).queryOne();
    if (UtilValidate.isEmpty(party) || party.getString("baseCurrencyUomId").equals(invoice.getString("currencyUomId"))) {
      party=EntityQuery.use(delegator).from("PartyAcctgPreference").where("partyId",invoice.get("partyId")).queryOne();
    }
    if (UtilValidate.isNotEmpty(party) && party.getString("baseCurrencyUomId") != null) {
      otherCurrencyUomId=party.getString("baseCurrencyUomId");
    }
 else {
      otherCurrencyUomId=EntityUtilProperties.getPropertyValue("general","currency.uom.id.default",delegator);
    }
    if (otherCurrencyUomId == null) {
      otherCurrencyUomId="USD";
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting database records....",module);
  }
  if (invoice.getString("currencyUomId").equals(otherCurrencyUomId)) {
    return BigDecimal.ONE;
  }
  try {
    List<GenericValue> acctgTransEntries=invoice.getRelated("AcctgTrans",null,null,false);
    if (UtilValidate.isNotEmpty(acctgTransEntries)) {
      GenericValue acctgTransEntry=(acctgTransEntries.get(0)).getRelated("AcctgTransEntry",null,null,false).get(0);
      BigDecimal origAmount=acctgTransEntry.getBigDecimal("origAmount");
      if (origAmount.compareTo(ZERO) == 1) {
        conversionRate=acctgTransEntry.getBigDecimal("amount").divide(acctgTransEntry.getBigDecimal("origAmount"),new MathContext(100)).setScale(decimals,rounding);
      }
    }
    if (UtilValidate.isEmpty(conversionRate)) {
      List<GenericValue> paymentAppls=invoice.getRelated("PaymentApplication",null,null,false);
      for (      GenericValue paymentAppl : paymentAppls) {
        GenericValue payment=paymentAppl.getRelatedOne("Payment",false);
        if (UtilValidate.isNotEmpty(payment.getBigDecimal("actualCurrencyAmount"))) {
          if (UtilValidate.isEmpty(conversionRate)) {
            conversionRate=payment.getBigDecimal("amount").divide(payment.getBigDecimal("actualCurrencyAmount"),new MathContext(100)).setScale(decimals,rounding);
          }
 else {
            conversionRate=conversionRate.add(payment.getBigDecimal("amount").divide(payment.getBigDecimal("actualCurrencyAmount"),new MathContext(100))).divide(new BigDecimal("2"),new MathContext(100)).setScale(decimals,rounding);
          }
        }
      }
    }
    if (UtilValidate.isEmpty(conversionRate)) {
      GenericValue rate=EntityQuery.use(delegator).from("UomConversionDated").where("uomIdTo",invoice.get("currencyUomId"),"uomId",otherCurrencyUomId).filterByDate(invoice.getTimestamp("invoiceDate")).queryFirst();
      if (rate != null) {
        conversionRate=BigDecimal.ONE.divide(rate.getBigDecimal("conversionFactor"),new MathContext(100)).setScale(decimals,rounding);
      }
 else {
        Debug.logError("Could not find conversionrate for invoice: " + invoice.getString("invoiceId"),module);
        return new BigDecimal("1");
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting database records....",module);
  }
  return (conversionRate);
}
