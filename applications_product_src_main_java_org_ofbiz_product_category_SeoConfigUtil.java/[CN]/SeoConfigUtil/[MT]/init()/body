{
  FileInputStream configFileIS=null;
  String result="success";
  seoPatterns=new HashMap<String,Pattern>();
  seoReplacements=new HashMap<String,String>();
  forwardReplacements=new HashMap<String,String>();
  forwardResponseCodes=new HashMap<String,Integer>();
  userExceptionPatterns=new LinkedList<Pattern>();
  specialProductIds=new HashMap<String,String>();
  charFilters=new HashMap<String,String>();
  try {
    URL seoConfigFilename=UtilURL.fromResource(SEO_CONFIG_FILENAME);
    Document configDoc=UtilXml.readXmlDocument(seoConfigFilename,false);
    Element rootElement=configDoc.getDocumentElement();
    String regexIfMatch=UtilXml.childElementValue(rootElement,ELEMENT_REGEXPIFMATCH,DEFAULT_REGEXP);
    Debug.logInfo("Parsing " + regexIfMatch,module);
    try {
      regexpIfMatch=perlCompiler.compile(regexIfMatch,Perl5Compiler.READ_ONLY_MASK);
    }
 catch (    MalformedPatternException e1) {
      Debug.logWarning(e1,"Error while parsing " + regexIfMatch,module);
    }
    try {
      Element categoryUrlElement=UtilXml.firstChildElement(rootElement,ELEMENT_CATEGORY_URL);
      Debug.logInfo("Parsing " + ELEMENT_CATEGORY_URL + " ["+ (categoryUrlElement != null)+ "]:",module);
      if (categoryUrlElement != null) {
        String enableCategoryUrlValue=UtilXml.childElementValue(categoryUrlElement,ELEMENT_VALUE,DEFAULT_CATEGORY_URL_VALUE);
        if (DEFAULT_CATEGORY_URL_VALUE.equalsIgnoreCase(enableCategoryUrlValue)) {
          categoryUrlEnabled=true;
        }
 else {
          categoryUrlEnabled=false;
        }
        if (categoryUrlEnabled) {
          String allowedContextValue=UtilXml.childElementValue(categoryUrlElement,ELEMENT_ALLOWED_CONTEXT_PATHS,null);
          allowedContextPaths=new HashSet<String>();
          if (UtilValidate.isNotEmpty(allowedContextValue)) {
            List<String> allowedContextPathList=StringUtil.split(allowedContextValue,ALLOWED_CONTEXT_PATHS_SEPERATOR);
            for (            String path : allowedContextPathList) {
              if (UtilValidate.isNotEmpty(path)) {
                path=path.trim();
                if (!allowedContextPaths.contains(path)) {
                  allowedContextPaths.add(path);
                  Debug.logInfo("  " + ELEMENT_ALLOWED_CONTEXT_PATHS + ": "+ path,module);
                }
              }
            }
          }
          String categoryNameValue=UtilXml.childElementValue(categoryUrlElement,ELEMENT_CATEGORY_NAME,DEFAULT_CATEGORY_NAME_VALUE);
          if (DEFAULT_CATEGORY_NAME_VALUE.equalsIgnoreCase(categoryNameValue)) {
            categoryNameEnabled=false;
          }
 else {
            categoryNameEnabled=true;
          }
          Debug.logInfo("  " + ELEMENT_CATEGORY_NAME + ": "+ categoryNameEnabled,module);
          categoryUrlSuffix=UtilXml.childElementValue(categoryUrlElement,ELEMENT_CATEGORY_URL_SUFFIX,null);
          if (UtilValidate.isNotEmpty(categoryUrlSuffix)) {
            categoryUrlSuffix=categoryUrlSuffix.trim();
            if (categoryUrlSuffix.contains("/")) {
              categoryUrlSuffix=null;
            }
          }
          Debug.logInfo("  " + ELEMENT_CATEGORY_URL_SUFFIX + ": "+ categoryUrlSuffix,module);
        }
      }
    }
 catch (    NullPointerException e) {
      Debug.logWarning("No category-url element found in " + seoConfigFilename.toString(),module);
    }
    try {
      Element jSessionId=UtilXml.firstChildElement(rootElement,ELEMENT_JSESSIONID);
      Debug.logInfo("Parsing " + ELEMENT_JSESSIONID + " ["+ (jSessionId != null)+ "]:",module);
      if (jSessionId != null) {
        Element anonymous=UtilXml.firstChildElement(jSessionId,ELEMENT_ANONYMOUS);
        if (anonymous != null) {
          String anonymousValue=UtilXml.childElementValue(anonymous,ELEMENT_VALUE,DEFAULT_ANONYMOUS_VALUE);
          if (DEFAULT_ANONYMOUS_VALUE.equalsIgnoreCase(anonymousValue)) {
            jSessionIdAnonEnabled=false;
          }
 else {
            jSessionIdAnonEnabled=true;
          }
        }
 else {
          jSessionIdAnonEnabled=Boolean.valueOf(DEFAULT_ANONYMOUS_VALUE).booleanValue();
        }
        Debug.logInfo("  " + ELEMENT_ANONYMOUS + ": "+ jSessionIdAnonEnabled,module);
        Element user=UtilXml.firstChildElement(jSessionId,ELEMENT_USER);
        if (user != null) {
          String userValue=UtilXml.childElementValue(user,ELEMENT_VALUE,DEFAULT_USER_VALUE);
          if (DEFAULT_USER_VALUE.equalsIgnoreCase(userValue)) {
            jSessionIdUserEnabled=false;
          }
 else {
            jSessionIdUserEnabled=true;
          }
          Element exceptions=UtilXml.firstChildElement(user,ELEMENT_EXCEPTIONS);
          if (exceptions != null) {
            Debug.logInfo("  " + ELEMENT_EXCEPTIONS + ": ",module);
            List<? extends Element> exceptionUrlPatterns=UtilXml.childElementList(exceptions,ELEMENT_URLPATTERN);
            for (int i=0; i < exceptionUrlPatterns.size(); i++) {
              Element element=exceptionUrlPatterns.get(i);
              String urlpattern=element.getTextContent();
              if (UtilValidate.isNotEmpty(urlpattern)) {
                try {
                  Pattern pattern=perlCompiler.compile(urlpattern,Perl5Compiler.READ_ONLY_MASK);
                  userExceptionPatterns.add(pattern);
                  Debug.logInfo("    " + ELEMENT_URLPATTERN + ": "+ urlpattern,module);
                }
 catch (                MalformedPatternException e) {
                  Debug.logWarning("Can NOT parse " + urlpattern + " in element "+ ELEMENT_URLPATTERN+ " of "+ ELEMENT_EXCEPTIONS+ ". Error: "+ e.getMessage(),module);
                }
              }
            }
          }
        }
 else {
          jSessionIdUserEnabled=Boolean.valueOf(DEFAULT_USER_VALUE).booleanValue();
        }
        Debug.logInfo("  " + ELEMENT_USER + ": "+ jSessionIdUserEnabled,module);
      }
    }
 catch (    NullPointerException e) {
      Debug.logWarning("No jsessionid element found in " + seoConfigFilename.toString(),module);
    }
    try {
      NodeList configs=rootElement.getElementsByTagName(ELEMENT_URL_CONFIG);
      Debug.logInfo("Parsing " + ELEMENT_URL_CONFIG,module);
      for (int j=0; j < configs.getLength(); j++) {
        Element config=(Element)configs.item(j);
        String urlpattern=UtilXml.childElementValue(config,ELEMENT_URLPATTERN,null);
        if (UtilValidate.isEmpty(urlpattern)) {
          continue;
        }
        Debug.logInfo("  " + ELEMENT_URLPATTERN + ": "+ urlpattern,module);
        Pattern pattern;
        try {
          pattern=perlCompiler.compile(urlpattern,Perl5Compiler.READ_ONLY_MASK);
          seoPatterns.put(urlpattern,pattern);
        }
 catch (        MalformedPatternException e) {
          Debug.logWarning("Error while creating parttern for seo url-pattern: " + urlpattern,module);
          continue;
        }
        Element seo=UtilXml.firstChildElement(config,ELEMENT_SEO);
        if (UtilValidate.isNotEmpty(seo)) {
          String replacement=UtilXml.childElementValue(seo,ELEMENT_REPLACEMENT,null);
          if (UtilValidate.isNotEmpty(replacement)) {
            seoReplacements.put(urlpattern,replacement);
            Debug.logInfo("    " + ELEMENT_SEO + " "+ ELEMENT_REPLACEMENT+ ": "+ replacement,module);
          }
        }
        Element forward=UtilXml.firstChildElement(config,ELEMENT_FORWARD);
        if (UtilValidate.isNotEmpty(forward)) {
          String replacement=UtilXml.childElementValue(forward,ELEMENT_REPLACEMENT,null);
          String responseCode=UtilXml.childElementValue(forward,ELEMENT_RESPONSECODE,String.valueOf(DEFAULT_RESPONSECODE));
          if (UtilValidate.isNotEmpty(replacement)) {
            forwardReplacements.put(urlpattern,replacement);
            Debug.logInfo("    " + ELEMENT_FORWARD + " "+ ELEMENT_REPLACEMENT+ ": "+ replacement,module);
            if (UtilValidate.isNotEmpty(responseCode)) {
              Integer responseCodeInt=DEFAULT_RESPONSECODE;
              try {
                responseCodeInt=Integer.valueOf(responseCode);
              }
 catch (              NumberFormatException nfe) {
                Debug.logWarning(nfe,"Error while parsing response code number: " + responseCode,module);
              }
              forwardResponseCodes.put(urlpattern,responseCodeInt);
              Debug.logInfo("    " + ELEMENT_FORWARD + " "+ ELEMENT_RESPONSECODE+ ": "+ responseCodeInt,module);
            }
          }
        }
      }
    }
 catch (    NullPointerException e) {
      Debug.logWarning("No " + ELEMENT_URL_CONFIG + " element found in "+ seoConfigFilename.toString(),module);
    }
    try {
      NodeList nameFilterNodes=rootElement.getElementsByTagName(ELEMENT_CHAR_FILTER);
      Debug.logInfo("Parsing " + ELEMENT_CHAR_FILTER + ": ",module);
      for (int i=0; i < nameFilterNodes.getLength(); i++) {
        Element element=(Element)nameFilterNodes.item(i);
        String charaterPattern=UtilXml.childElementValue(element,ELEMENT_CHARACTER_PATTERN,null);
        String replacement=UtilXml.childElementValue(element,ELEMENT_REPLACEMENT,null);
        if (UtilValidate.isNotEmpty(charaterPattern) && UtilValidate.isNotEmpty(replacement)) {
          try {
            perlCompiler.compile(charaterPattern,Perl5Compiler.READ_ONLY_MASK);
            charFilters.put(charaterPattern,replacement);
            Debug.logInfo("  " + ELEMENT_CHARACTER_PATTERN + ": "+ charaterPattern,module);
            Debug.logInfo("  " + ELEMENT_REPLACEMENT + ": "+ replacement,module);
          }
 catch (          MalformedPatternException e) {
            Debug.logWarning(e,"Error while parsing " + ELEMENT_CHARACTER_PATTERN + ": "+ charaterPattern,module);
          }
        }
      }
    }
 catch (    NullPointerException e) {
      Debug.logWarning("No " + ELEMENT_CHAR_FILTER + " element found in "+ seoConfigFilename.toString(),module);
    }
  }
 catch (  SAXException e) {
    result="error";
    Debug.logError(e,module);
  }
catch (  ParserConfigurationException e) {
    result="error";
    Debug.logError(e,module);
  }
catch (  IOException e) {
    result="error";
    Debug.logError(e,module);
  }
 finally {
    if (configFileIS != null) {
      try {
        configFileIS.close();
      }
 catch (      IOException e) {
        result="error";
        Debug.logError(e,module);
      }
    }
  }
  if (seoReplacements.keySet().isEmpty()) {
    useUrlRegexp=false;
  }
 else {
    useUrlRegexp=true;
  }
  if (result.equals("success")) {
    isInitialed=true;
  }
}
