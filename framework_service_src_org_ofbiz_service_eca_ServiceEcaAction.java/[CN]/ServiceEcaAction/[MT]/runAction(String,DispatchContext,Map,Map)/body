{
  if (serviceName.equals(selfService)) {
    throw new GenericServiceException("Cannot invoke self on ECA.");
  }
  Map actionContext=dctx.getModelService(serviceName).makeValid(context,ModelService.IN_PARAM);
  actionContext.put("userLogin",ServiceUtil.getUserLogin(dctx,actionContext,runAsUser));
  Map actionResult=null;
  LocalDispatcher dispatcher=dctx.getDispatcher();
  if (eventName.startsWith("global-")) {
    ServiceXaWrapper xaw=new ServiceXaWrapper(dctx);
    if (eventName.equals("global-rollback")) {
      xaw.setRollbackService(serviceName,context,"async".equals(serviceMode),persist);
    }
 else     if (eventName.equals("global-commit")) {
      xaw.setCommitService(serviceName,context,"async".equals(serviceMode),persist);
    }
    try {
      xaw.enlist();
    }
 catch (    XAException e) {
      throw new GenericServiceException("Unable to enlist ServiceXaWrapper with transaction",e);
    }
  }
 else {
    if (serviceMode.equals("sync")) {
      if (newTransaction)       actionResult=dispatcher.runSync(serviceName,actionContext,-1,true);
 else       actionResult=dispatcher.runSync(serviceName,actionContext);
    }
 else     if (serviceMode.equals("async")) {
      dispatcher.runAsync(serviceName,actionContext,persist);
    }
  }
  if (resultMapName != null && resultMapName.length() > 0) {
    Map resultMap=(Map)context.get(resultMapName);
    if (resultMap == null) {
      resultMap=new HashMap();
    }
    resultMap.putAll(dctx.getModelService(this.serviceName).makeValid(actionResult,ModelService.OUT_PARAM,false,null));
    context.put(resultMapName,resultMap);
  }
  if (resultToContext) {
    context.putAll(dctx.getModelService(this.serviceName).makeValid(actionResult,ModelService.OUT_PARAM,false,null));
  }
  boolean success=true;
  if (actionResult != null) {
    if (!ignoreFailure) {
      if (ModelService.RESPOND_FAIL.equals(actionResult.get(ModelService.RESPONSE_MESSAGE))) {
        if (result != null) {
          result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_FAIL);
        }
        success=false;
      }
    }
    if (!ignoreError) {
      if (ModelService.RESPOND_ERROR.equals(actionResult.get(ModelService.RESPONSE_MESSAGE))) {
        if (result != null) {
          result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
        }
        success=false;
      }
    }
  }
  if (result != null && !success) {
    String errorMessage=(String)actionResult.get(ModelService.ERROR_MESSAGE);
    List errorMessageList=(List)actionResult.get(ModelService.ERROR_MESSAGE_LIST);
    Map errorMessageMap=(Map)actionResult.get(ModelService.ERROR_MESSAGE_MAP);
    if (UtilValidate.isNotEmpty(errorMessage)) {
      if (UtilValidate.isEmpty((String)result.get(ModelService.ERROR_MESSAGE))) {
        result.put(ModelService.ERROR_MESSAGE,errorMessage);
      }
 else {
        if (errorMessageList == null)         errorMessageList=new LinkedList();
        errorMessageList.add(0,errorMessage);
      }
    }
    if (errorMessageList != null && errorMessageList.size() > 0) {
      List origErrorMessageList=(List)result.get(ModelService.ERROR_MESSAGE_LIST);
      if (origErrorMessageList == null) {
        result.put(ModelService.ERROR_MESSAGE_LIST,errorMessageList);
      }
 else {
        origErrorMessageList.addAll(errorMessageList);
      }
    }
    if (errorMessageMap != null && errorMessageMap.size() > 0) {
      Map origErrorMessageMap=(Map)result.get(ModelService.ERROR_MESSAGE_MAP);
      if (origErrorMessageMap == null) {
        result.put(ModelService.ERROR_MESSAGE_MAP,errorMessageMap);
      }
 else {
        origErrorMessageMap.putAll(errorMessageMap);
      }
    }
  }
  return success;
}
