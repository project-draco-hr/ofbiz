{
  long requestStartTime=System.currentTimeMillis();
  RequestHandler requestHandler=this.getRequestHandler();
  HttpSession session=request.getSession();
  String charset=getServletContext().getInitParameter("charset");
  if (UtilValidate.isEmpty(charset))   charset=request.getCharacterEncoding();
  if (UtilValidate.isEmpty(charset))   charset="UTF-8";
  if (Debug.verboseOn())   Debug.logVerbose("The character encoding of the request is: [" + request.getCharacterEncoding() + "]. The character encoding we will use for the request and response is: ["+ charset+ "]",module);
  if (!"none".equals(charset)) {
    request.setCharacterEncoding(charset);
  }
  String contentType="text/html";
  if (charset.length() > 0 && !"none".equals(charset)) {
    response.setContentType(contentType + "; charset=" + charset);
    response.setCharacterEncoding(charset);
  }
 else {
    response.setContentType(contentType);
  }
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  if (userLogin != null) {
    GenericDelegator.pushUserIdentifier(userLogin.getString("userLoginId"));
  }
  String webappName=UtilHttp.getApplicationName(request);
  String rname="";
  if (request.getPathInfo() != null) {
    rname=request.getPathInfo().substring(1);
  }
  if (rname.indexOf('/') > 0) {
    rname=rname.substring(0,rname.indexOf('/'));
  }
  UtilTimer timer=null;
  if (Debug.timingOn()) {
    timer=new UtilTimer();
    timer.setLog(true);
    timer.timerString("[" + rname + "(Domain:"+ request.getScheme()+ "://"+ request.getServerName()+ ")] Request Begun, encoding=["+ charset+ "]",module);
  }
  String contextPath=request.getContextPath();
  if (contextPath == null || "/".equals(contextPath)) {
    contextPath="";
  }
  request.setAttribute("_CONTROL_PATH_",contextPath + request.getServletPath());
  if (Debug.verboseOn())   Debug.logVerbose("Control Path: " + request.getAttribute("_CONTROL_PATH_"),module);
  Delegator delegator=null;
  String delegatorName=(String)session.getAttribute("delegatorName");
  if (UtilValidate.isNotEmpty(delegatorName)) {
    delegator=DelegatorFactory.getDelegator(delegatorName);
  }
  if (delegator == null) {
    delegator=(Delegator)getServletContext().getAttribute("delegator");
  }
  if (delegator == null) {
    Debug.logError("[ControlServlet] ERROR: delegator not found in ServletContext",module);
  }
 else {
    request.setAttribute("delegator",delegator);
    session.setAttribute("delegatorName",delegator.getDelegatorName());
  }
  LocalDispatcher dispatcher=(LocalDispatcher)session.getAttribute("dispatcher");
  if (dispatcher == null) {
    dispatcher=(LocalDispatcher)getServletContext().getAttribute("dispatcher");
  }
  if (dispatcher == null) {
    Debug.logError("[ControlServlet] ERROR: dispatcher not found in ServletContext",module);
  }
  request.setAttribute("dispatcher",dispatcher);
  Security security=(Security)session.getAttribute("security");
  if (security == null) {
    security=(Security)getServletContext().getAttribute("security");
  }
  if (security == null) {
    Debug.logError("[ControlServlet] ERROR: security not found in ServletContext",module);
  }
  request.setAttribute("security",security);
  request.setAttribute("_REQUEST_HANDLER_",requestHandler);
  ServletContextHashModel ftlServletContext=new ServletContextHashModel(this,FreeMarkerWorker.getDefaultOfbizWrapper());
  request.setAttribute("ftlServletContext",ftlServletContext);
  UtilHttp.setInitialRequestInfo(request);
  VisitHandler.getVisitor(request,response);
  String visitId=VisitHandler.getVisitId(session);
  if (UtilValidate.isNotEmpty(visitId)) {
    GenericDelegator.pushSessionIdentifier(visitId);
  }
  if (Debug.verboseOn()) {
    logRequestInfo(request);
  }
  request.setAttribute(ContextFilter.FORWARDED_FROM_SERVLET,Boolean.TRUE);
  String errorPage=null;
  try {
    requestHandler.doRequest(request,response,null,userLogin,delegator);
  }
 catch (  RequestHandlerException e) {
    Throwable throwable=e.getNested() != null ? e.getNested() : e;
    if (throwable instanceof IOException) {
      if (Debug.warningOn())       Debug.logWarning(e,"Communication error with the client while processing the request: " + request.getAttribute("_CONTROL_PATH_") + request.getPathInfo(),module);
      if (Debug.verboseOn())       Debug.logVerbose(throwable,module);
    }
 else {
      Debug.logError(throwable,"Error in request handler: ",module);
      request.setAttribute("_ERROR_MESSAGE_",UtilCodec.getEncoder("html").encode(throwable.toString()));
      errorPage=requestHandler.getDefaultErrorPage(request);
    }
  }
catch (  RequestHandlerExceptionAllowExternalRequests e) {
    errorPage=requestHandler.getDefaultErrorPage(request);
    Debug.logInfo("Going to external page: " + request.getPathInfo(),module);
  }
catch (  Exception e) {
    Debug.logError(e,"Error in request handler: ",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilCodec.getEncoder("html").encode(e.toString()));
    errorPage=requestHandler.getDefaultErrorPage(request);
  }
  if (errorPage != null) {
    Debug.logError("An error occurred, going to the errorPage: " + errorPage,module);
    RequestDispatcher rd=request.getRequestDispatcher(errorPage);
    if (request.getAttribute("_ERROR_OCCURRED_") == null && rd != null) {
      request.setAttribute("_ERROR_OCCURRED_",Boolean.TRUE);
      Debug.logError("Including errorPage: " + errorPage,module);
      try {
        rd.include(request,response);
      }
 catch (      Throwable t) {
        Debug.logWarning("Error while trying to send error page using rd.include (will try response.getOutputStream or response.getWriter): " + t.toString(),module);
        String errorMessage="ERROR rendering error page [" + errorPage + "], but here is the error text: "+ request.getAttribute("_ERROR_MESSAGE_");
        try {
          response.getWriter().print(errorMessage);
        }
 catch (        Throwable t2) {
          try {
            int errorToSend=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
            Debug.logWarning("Error while trying to write error message using response.getOutputStream or response.getWriter: " + t.toString() + "; sending error code ["+ errorToSend+ "], and message ["+ errorMessage+ "]",module);
            response.sendError(errorToSend,errorMessage);
          }
 catch (          Throwable t3) {
            throw new IllegalStateException(errorMessage);
          }
        }
      }
    }
 else {
      if (rd == null) {
        Debug.logError("Could not get RequestDispatcher for errorPage: " + errorPage,module);
      }
      String errorMessage="<html><body>ERROR in error page, (infinite loop or error page not found with name [" + errorPage + "]), but here is the text just in case it helps you: "+ request.getAttribute("_ERROR_MESSAGE_")+ "</body></html>";
      response.getWriter().print(errorMessage);
    }
  }
  try {
    if (TransactionUtil.isTransactionInPlace()) {
      Debug.logWarning("*** NOTICE: ControlServlet finished w/ a transaction in place! Rolling back.",module);
      TransactionUtil.rollback();
    }
    if (TransactionUtil.suspendedTransactionsHeld()) {
      int suspended=TransactionUtil.cleanSuspendedTransactions();
      Debug.logWarning("Resumed/Rolled Back [" + suspended + "] transactions.",module);
    }
  }
 catch (  GenericTransactionException e) {
    Debug.logWarning(e,module);
  }
  if (response.isCommitted() && request.getSession(false) == null) {
    Debug.logError("Error in ControlServlet output where response isCommitted and there is no session (probably because of a logout); not saving ServerHit/Bin information because there is no session and as the response isCommitted we can't get a new one. The output was successful, but we just can't save ServerHit/Bin info.",module);
  }
 else {
    try {
      UtilHttp.setInitialRequestInfo(request);
      VisitHandler.getVisitor(request,response);
      if (requestHandler.trackStats(request)) {
        ServerHitBin.countRequest(webappName + "." + rname,request,requestStartTime,System.currentTimeMillis() - requestStartTime,userLogin);
      }
    }
 catch (    Throwable t) {
      Debug.logError(t,"Error in ControlServlet saving ServerHit/Bin information; the output was successful, but can't save this tracking information. The error was: " + t.toString(),module);
    }
  }
  if (Debug.timingOn())   timer.timerString("[" + rname + "(Domain:"+ request.getScheme()+ "://"+ request.getServerName()+ ")] Request Done",module);
  GenericDelegator.clearUserIdentifierStack();
  GenericDelegator.clearSessionIdentifierStack();
}
