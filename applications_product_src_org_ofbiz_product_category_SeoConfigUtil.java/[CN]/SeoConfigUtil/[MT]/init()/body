{
  FileInputStream configFileIS=null;
  String result="success";
  seoPatterns=new HashMap<String,Pattern>();
  seoReplacements=new HashMap<String,String>();
  forwardReplacements=new HashMap<String,String>();
  forwardPatterns=new HashMap<String,Pattern>();
  forwardResponseCodes=new HashMap<String,Integer>();
  userExceptionPatterns=FastList.newInstance();
  specialProductIds=FastMap.newInstance();
  nameFilters=FastMap.newInstance();
  try {
    Document configDoc=UtilXml.readXmlDocument(UtilURL.fromResource(SEO_CONFIG_FILENAME),false);
    Element rootElement=configDoc.getDocumentElement();
    String regexIfMatch=UtilXml.childElementValue(rootElement,ELEMENT_REGEXPIFMATCH,DEFAULT_REGEXP);
    try {
      regexpIfMatch=perlCompiler.compile(regexIfMatch,Perl5Compiler.DEFAULT_MASK);
    }
 catch (    MalformedPatternException e1) {
    }
    debug=Boolean.parseBoolean(UtilXml.childElementValue(rootElement,ELEMENT_DEBUG,"false"));
    try {
      Element jSessionId=UtilXml.firstChildElement(rootElement,ELEMENT_JSESSIONID);
      if (jSessionId != null) {
        Element anonymous=UtilXml.firstChildElement(jSessionId,ELEMENT_ANONYMOUS);
        if (anonymous != null) {
          String anonymousValue=UtilXml.childElementValue(anonymous,ELEMENT_VALUE,DEFAULT_ANONYMOUS_VALUE);
          if (DEFAULT_ANONYMOUS_VALUE.equalsIgnoreCase(anonymousValue)) {
            jSessionIdAnonEnabled=false;
          }
 else {
            jSessionIdAnonEnabled=true;
          }
        }
        Element user=UtilXml.firstChildElement(jSessionId,ELEMENT_USER);
        if (user != null) {
          String userValue=UtilXml.childElementValue(user,ELEMENT_VALUE,DEFAULT_USER_VALUE);
          if (DEFAULT_USER_VALUE.equalsIgnoreCase(userValue)) {
            jSessionIdUserEnabled=false;
          }
 else {
            jSessionIdUserEnabled=true;
          }
          Element exceptions=UtilXml.firstChildElement(user,ELEMENT_EXCEPTIONS);
          if (exceptions != null) {
            List<? extends Element> exceptionUrlPatterns=UtilXml.childElementList(exceptions,ELEMENT_URLPATTERN);
            for (int i=0; i < exceptionUrlPatterns.size(); i++) {
              Element element=(Element)exceptionUrlPatterns.get(i);
              String urlpattern=element.getTextContent();
              if (UtilValidate.isNotEmpty(urlpattern)) {
                try {
                  Pattern pattern=perlCompiler.compile(urlpattern,Perl5Compiler.DEFAULT_MASK);
                  userExceptionPatterns.add(pattern);
                }
 catch (                MalformedPatternException e) {
                }
              }
            }
          }
        }
      }
    }
 catch (    NullPointerException e) {
    }
    try {
      NodeList nameFilterNodes=rootElement.getElementsByTagName(ELEMENT_FILTER);
      for (int i=0; i < nameFilterNodes.getLength(); i++) {
        Element element=(Element)nameFilterNodes.item(i);
        String charaterPattern=UtilXml.childElementValue(element,ELEMENT_CHARACTER_PATTERN,null);
        String replacement=UtilXml.childElementValue(element,ELEMENT_REPLACEMENT,null);
        if (UtilValidate.isNotEmpty(charaterPattern) && UtilValidate.isNotEmpty(replacement)) {
          try {
            perlCompiler.compile(charaterPattern,Perl5Compiler.DEFAULT_MASK);
            nameFilters.put(charaterPattern,replacement);
          }
 catch (          MalformedPatternException e) {
          }
        }
      }
    }
 catch (    NullPointerException e) {
    }
    try {
      NodeList seos=rootElement.getElementsByTagName(ELEMENT_SEO);
      for (int i=0; i < seos.getLength(); i++) {
        Element element=(Element)seos.item(i);
        String urlpattern=UtilXml.childElementValue(element,ELEMENT_URLPATTERN,null);
        String replacement=UtilXml.childElementValue(element,ELEMENT_REPLACEMENT,null);
        if (UtilValidate.isNotEmpty(urlpattern) && UtilValidate.isNotEmpty(replacement)) {
          try {
            Pattern pattern=perlCompiler.compile(urlpattern,Perl5Compiler.DEFAULT_MASK);
            seoReplacements.put(urlpattern,replacement);
            seoPatterns.put(urlpattern,pattern);
          }
 catch (          MalformedPatternException e) {
          }
        }
      }
      NodeList forwards=rootElement.getElementsByTagName(ELEMENT_FORWARD);
      for (int i=0; i < forwards.getLength(); i++) {
        Element element=(Element)forwards.item(i);
        String urlpattern=UtilXml.childElementValue(element,ELEMENT_URLPATTERN,null);
        String replacement=UtilXml.childElementValue(element,ELEMENT_REPLACEMENT,null);
        String responseCode=UtilXml.childElementValue(element,ELEMENT_RESPONSECODE,String.valueOf(DEFAULT_RESPONSECODE));
        if (UtilValidate.isNotEmpty(urlpattern) && UtilValidate.isNotEmpty(replacement)) {
          try {
            Pattern pattern=perlCompiler.compile(urlpattern,Perl5Compiler.DEFAULT_MASK);
            forwardReplacements.put(urlpattern,replacement);
            forwardPatterns.put(urlpattern,pattern);
            if (UtilValidate.isNotEmpty(responseCode)) {
              Integer responseCodeInt=DEFAULT_RESPONSECODE;
              try {
                responseCodeInt=Integer.valueOf(responseCode);
              }
 catch (              NumberFormatException nfe) {
              }
              forwardResponseCodes.put(urlpattern,responseCodeInt);
            }
          }
 catch (          MalformedPatternException e) {
          }
        }
      }
    }
 catch (    NullPointerException e) {
    }
  }
 catch (  SAXException e) {
    result="error";
    Debug.logError(e,module);
  }
catch (  ParserConfigurationException e) {
    result="error";
    Debug.logError(e,module);
  }
catch (  IOException e) {
    result="error";
    Debug.logError(e,module);
  }
 finally {
    if (configFileIS != null) {
      try {
        configFileIS.close();
      }
 catch (      IOException e) {
        result="error";
        Debug.logError(e,module);
      }
    }
  }
  if (seoReplacements.keySet().isEmpty()) {
    useUrlRegexp=false;
  }
 else {
    useUrlRegexp=true;
  }
  if (result.equals("success")) {
    isInitialed=true;
  }
}
