{
  assertEquals("parse simple array",list(new Object[]{"foo",new Long(1234),new Double(5.678)}),parseJSON("[, ,\t,\r,\n,\r\n,\"foo\", 1234, 5.678,]",false));
  assertSimpleJSON("simple empty list",list(new Object[]{}),"[]");
  assertSimpleJSON("simple empty array",new Object[]{},"[]",list(new Object[]{}));
  assertSimpleJSON("simple array->list",new Object[]{"foo",new Long(1234),new Double(5.678)},"[\n \"foo\",\n 1234,\n 5.678\n]",list(new Object[]{"foo",new Long(1234),new Double(5.678)}));
  assertSimpleJSON("simple array",list(new Object[]{"foo",new Long(1234),new Double(5.678)}),"[\n \"foo\",\n 1234,\n 5.678\n]",list(new Object[]{"foo",new Long(1234),new Double(5.678)}));
  assertEquals("parse simple map",map(new Object[]{"foo",new Long(1234),"bar",new Double(5.678)}),parseJSON("{, ,\t,\r,\n,\r\n,\"foo\": 1234, \"bar\": 5.678,}",false));
  assertSimpleJSON("parse map",map(new Object[]{"foo",new Long(1234),"bar",new Double(5.678)}),"{\n \"foo\": 1234,\n \"bar\": 5.678\n}");
  assertSimpleJSON("parse empty map",map(new Object[]{}),"{}");
  assertEquals("parse nested map",map(new Object[]{"string","this is a string","integer",new Long(5000),"double",new Double(3.1415926),"array",new Object[]{"string",new Long(6000)},"list",list(new Object[]{"nested string","something"}),"empty-list",new ArrayList<String>(),"empty-array",new String[0],"empty-map",new HashMap<String,Object>()}),parseJSON("{\"string\": \"this is a string\", \"integer\": 5000, \"double\": 3.1415926, \"array\": [\"string\", 6000], \"list\": [\"nested string\", \"something\"], \"empty-list\": [], \"empty-array\": [], \"empty-map\": {}}",false));
}
