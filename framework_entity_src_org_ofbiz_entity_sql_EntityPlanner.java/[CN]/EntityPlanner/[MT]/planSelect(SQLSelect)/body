{
  DynamicViewEntity dve=new DynamicViewEntity();
  Unioned unioned=selectStatement.getUnioned();
  if (unioned.getOperator() != null || unioned.getNext() != null) {
    throw new IllegalArgumentException("union views not yet supported");
  }
  SelectGroup selectGroup=unioned.getGroup();
  Table table=selectGroup.getTable();
  addMember(dve,table.getTableName());
  addJoined(dve,table.getTableName().getAlias(),table.getJoined());
  for (  FieldAll fieldAll : selectGroup.getFieldAlls()) {
    dve.addAliasAll(fieldAll.getAlias(),null,null);
  }
  for (  Relation relation : selectStatement.getRelations().values()) {
    dve.addRelation(relation.getType(),relation.getTitle(),relation.getEntityName(),buildKeyMaps(relation));
  }
  List<String> groupBy=selectGroup.getGroupBy();
  if (groupBy == null) {
    groupBy=Collections.emptyList();
  }
  for (  FieldDef fieldDef : selectGroup.getFieldDefs()) {
    addFieldDef(dve,groupBy,fieldDef.getAlias(),fieldDef);
  }
  List<String> orderBy;
  if (selectStatement.getOrderBy() == null) {
    orderBy=null;
  }
 else {
    orderBy=FastList.newInstance();
    for (    OrderByItem orderByItem : selectStatement.getOrderBy()) {
      orderBy.add(orderByItem.toString());
    }
  }
  return new EntitySelectPlan(dve,plan(selectGroup.getWhereCondition()),plan(selectGroup.getHavingCondition()),orderBy);
}
