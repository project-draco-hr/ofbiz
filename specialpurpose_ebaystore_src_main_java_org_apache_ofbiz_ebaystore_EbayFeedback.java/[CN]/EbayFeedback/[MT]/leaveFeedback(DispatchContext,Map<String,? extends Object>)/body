{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productStoreId=(String)context.get("productStoreId");
  ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
  String itemId=(String)context.get("itemId");
  String targetUser=(String)context.get("targetUser");
  String transactionId=(String)context.get("transactionId");
  String commentingUser=(String)context.get("commentingUser");
  String role=(String)context.get("role");
  String commentType=(String)context.get("commentType");
  String commentText=(String)context.get("commentText");
  String ratingItem=(String)context.get("ratingItem");
  String ratingComm=(String)context.get("ratingComm");
  String ratingShip=(String)context.get("ratingShip");
  String ratingShipHand=(String)context.get("ratingShipHand");
  try {
    if (commentType != null) {
      LeaveFeedbackCall leaveFeedbackCall=new LeaveFeedbackCall();
      leaveFeedbackCall.setApiContext(apiContext);
      leaveFeedbackCall.setTargetUser(targetUser);
      leaveFeedbackCall.setTransactionID(transactionId);
      if (role.equals("seller")) {
        ItemRatingDetailArrayType sellerItemRatingDetailArray=new ItemRatingDetailArrayType();
        ItemRatingDetailsType itemRatingDetailsType1=new ItemRatingDetailsType();
        int ratingItemValue=0;
        if (UtilValidate.isInteger(ratingItem)) {
          ratingItemValue=Integer.parseInt(ratingItem);
        }
        if (ratingItemValue < 3) {
        }
        itemRatingDetailsType1.setRating(ratingItemValue);
        itemRatingDetailsType1.setRatingDetail(FeedbackRatingDetailCodeType.ITEM_AS_DESCRIBED);
        ItemRatingDetailsType itemRatingDetailsType2=new ItemRatingDetailsType();
        int ratingCommValue=0;
        if (UtilValidate.isInteger(ratingComm)) {
          ratingCommValue=Integer.parseInt(ratingComm);
        }
        itemRatingDetailsType2.setRating(ratingCommValue);
        itemRatingDetailsType2.setRatingDetail(FeedbackRatingDetailCodeType.COMMUNICATION);
        ItemRatingDetailsType itemRatingDetailsType3=new ItemRatingDetailsType();
        int ratingShipValue=0;
        if (UtilValidate.isInteger(ratingShip)) {
          ratingShipValue=Integer.parseInt(ratingShip);
        }
        itemRatingDetailsType3.setRating(ratingShipValue);
        itemRatingDetailsType3.setRatingDetail(FeedbackRatingDetailCodeType.SHIPPING_TIME);
        ItemRatingDetailsType itemRatingDetailsType4=new ItemRatingDetailsType();
        int ratingShipHandValue=0;
        if (UtilValidate.isInteger(ratingShipHand)) {
          ratingShipHandValue=Integer.parseInt(ratingShipHand);
        }
        itemRatingDetailsType4.setRating(ratingShipHandValue);
        itemRatingDetailsType4.setRatingDetail(FeedbackRatingDetailCodeType.SHIPPING_AND_HANDLING_CHARGES);
        ItemRatingDetailsType[] itemRatingDetailsType={itemRatingDetailsType1,itemRatingDetailsType2,itemRatingDetailsType3,itemRatingDetailsType4};
        sellerItemRatingDetailArray.setItemRatingDetails(itemRatingDetailsType);
        leaveFeedbackCall.setSellerItemRatingDetailArray(sellerItemRatingDetailArray);
      }
      FeedbackDetailType feedbackDetail=new FeedbackDetailType();
      feedbackDetail.setItemID(itemId);
      feedbackDetail.setCommentingUser(commentingUser);
      feedbackDetail.setCommentText(commentText);
      feedbackDetail.setCommentTime(Calendar.getInstance());
      if (commentType.equals("positive")) {
        feedbackDetail.setCommentType(CommentTypeCodeType.POSITIVE);
      }
 else       if (commentType.equals("neutral")) {
        feedbackDetail.setCommentType(CommentTypeCodeType.NEUTRAL);
      }
 else       if (commentType.equals("negative")) {
        feedbackDetail.setCommentType(CommentTypeCodeType.NEGATIVE);
      }
      leaveFeedbackCall.setFeedbackDetail(feedbackDetail);
      leaveFeedbackCall.leaveFeedback();
    }
  }
 catch (  ApiException e) {
    e.printStackTrace();
  }
catch (  SdkException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  result=ServiceUtil.returnSuccess();
  return result;
}
