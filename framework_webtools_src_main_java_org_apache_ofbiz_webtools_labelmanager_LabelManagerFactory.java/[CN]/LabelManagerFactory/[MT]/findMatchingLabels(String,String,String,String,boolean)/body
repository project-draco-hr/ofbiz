{
  if (UtilValidate.isEmpty(component) && UtilValidate.isEmpty(fileName) && UtilValidate.isEmpty(key)&& UtilValidate.isEmpty(locale)) {
    return;
  }
  for (  LabelFile fileInfo : filesFound.values()) {
    if (UtilValidate.isNotEmpty(component) && !component.equals(fileInfo.componentName)) {
      continue;
    }
    if (UtilValidate.isNotEmpty(fileName) && !fileName.equals(fileInfo.getFileName())) {
      continue;
    }
    if (Debug.infoOn()) {
      Debug.logInfo("Current file : " + fileInfo.getFileName(),module);
    }
    Document resourceDocument=UtilXml.readXmlDocument(fileInfo.file.toURI().toURL(),false);
    Element resourceElem=resourceDocument.getDocumentElement();
    String labelKeyComment="";
    for (    Node propertyNode : UtilXml.childNodeList(resourceElem.getFirstChild())) {
      if (propertyNode instanceof Element) {
        Element propertyElem=(Element)propertyNode;
        String labelKey=UtilCodec.canonicalize(propertyElem.getAttribute("key"));
        if (onlyNotUsedLabels && (labelKey.contains(".description.") || labelKey.contains(".transitionName.") || labelKey.contains(".partyRelationshipName.")|| labelKey.contains(".geoName.")|| labelKey.contains(".categoryName.")|| labelKey.contains(".ProductPromoCondition..")|| labelKey.contains(".ProductPromoOperatorEquality..")|| labelKey.contains(".Example."))) {
          continue;
        }
        String labelComment="";
        for (        Node valueNode : UtilXml.childNodeList(propertyElem.getFirstChild())) {
          if (valueNode instanceof Element) {
            Element valueElem=(Element)valueNode;
            String localeName=valueElem.getAttribute("xml:lang");
            if (localeName.contains("_")) {
              localeName=localeName.replace('_','-');
            }
            String labelValue=UtilCodec.canonicalize(UtilXml.nodeValue(valueElem.getFirstChild()));
            LabelInfo label=labels.get(labelKey + keySeparator + fileInfo.getFileName());
            if (UtilValidate.isEmpty(label)) {
              label=new LabelInfo(labelKey,labelKeyComment,fileInfo.getFileName(),localeName,labelValue,labelComment);
              labels.put(labelKey + keySeparator + fileInfo.getFileName(),label);
            }
 else {
              if (label.setLabelValue(localeName,labelValue,labelComment,false)) {
                duplicatedLocalesLabelsList.add(label);
              }
            }
            localesFound.add(localeName);
            labelComment="";
          }
 else           if (valueNode instanceof Comment) {
            labelComment=labelComment + UtilCodec.canonicalize(valueNode.getNodeValue());
          }
        }
        labelKeyComment="";
      }
 else       if (propertyNode instanceof Comment) {
        labelKeyComment=labelKeyComment + UtilCodec.canonicalize(propertyNode.getNodeValue());
      }
    }
  }
}
