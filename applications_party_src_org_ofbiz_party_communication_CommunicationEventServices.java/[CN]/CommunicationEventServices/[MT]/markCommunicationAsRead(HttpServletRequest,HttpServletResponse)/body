{
  String communicationEventId=null;
  String pathInfo=request.getPathInfo();
  String[] pathParsed=pathInfo.split("/",3);
  if (pathParsed != null && pathParsed.length > 2) {
    pathInfo=pathParsed[2];
  }
 else {
    pathInfo=null;
  }
  if (pathInfo != null & pathInfo.indexOf("/") > -1) {
    pathParsed=pathInfo.split("/");
    communicationEventId=pathParsed[0];
  }
  if (communicationEventId != null) {
    Debug.logInfo("Marking communicationEventId [" + communicationEventId + "] from path info : "+ request.getPathInfo()+ " as read.",module);
    GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
    GenericValue communicationEvent=null;
    try {
      communicationEvent=delegator.findOne("CommunicationEvent",UtilMisc.toMap("communicationEventId",communicationEventId),true);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
    try {
      dispatcher.runAsync("setCommEventRoleToRead",UtilMisc.toMap("communicationEventId",communicationEventId,"partyId",communicationEvent.getString("partyIdTo")));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
    }
  }
  URL imageUrl;
  try {
    imageUrl=FlexibleLocation.resolveLocation("component://images/webapp/images/spacer.gif");
    InputStream imageStream=imageUrl.openStream();
    UtilHttp.streamContentToBrowser(response,imageStream,43,"image/gif",null);
  }
 catch (  MalformedURLException e) {
    Debug.logError(e,module);
  }
catch (  IOException e) {
    Debug.logError(e,module);
  }
  return null;
}
