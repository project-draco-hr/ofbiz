{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String communicationEventId=(String)context.get("communicationEventId");
  Map result=ServiceUtil.returnSuccess();
  List errorMessages=new LinkedList();
  try {
    GenericValue communicationEvent=delegator.findByPrimaryKey("CommunicationEvent",UtilMisc.toMap("communicationEventId",communicationEventId));
    if (communicationEvent == null) {
      String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_not_found_failure",locale);
      return ServiceUtil.returnError(errMsg + " " + communicationEventId);
    }
    if ((communicationEvent.getString("communicationEventTypeId") == null) || !(communicationEvent.getString("communicationEventTypeId").equals("EMAIL_COMMUNICATION"))) {
      String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_must_be_email_for_email",locale);
      return ServiceUtil.returnError(errMsg + " " + communicationEventId);
    }
    if ((communicationEvent.getRelatedOne("FromContactMech") == null) || (!(communicationEvent.getRelatedOne("FromContactMech").getString("contactMechTypeId").equals("EMAIL_ADDRESS")) || (communicationEvent.getRelatedOne("FromContactMech").getString("infoString") == null))) {
      String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_from_contact_mech_must_be_email",locale);
      return ServiceUtil.returnError(errMsg + " " + communicationEventId);
    }
    Map sendMailParams=new HashMap();
    sendMailParams.put("sendFrom",communicationEvent.getRelatedOne("FromContactMech").getString("infoString"));
    sendMailParams.put("subject",communicationEvent.getString("subject"));
    sendMailParams.put("body",communicationEvent.getString("content"));
    sendMailParams.put("contentType",communicationEvent.getString("contentMimeTypeId"));
    sendMailParams.put("userLogin",userLogin);
    if ((communicationEvent.getString("contactListId") == null) || (communicationEvent.getString("contactListId").equals(""))) {
      if ((communicationEvent.getRelatedOne("ToContactMech") == null) || (!(communicationEvent.getRelatedOne("ToContactMech").getString("contactMechTypeId").equals("EMAIL_ADDRESS")) || (communicationEvent.getRelatedOne("ToContactMech").getString("infoString") == null))) {
        String errMsg=UtilProperties.getMessage(resource,"commeventservices.communication_event_to_contact_mech_must_be_email",locale);
        return ServiceUtil.returnError(errMsg + " " + communicationEventId);
      }
      sendMailParams.put("communicationEventId",communicationEventId);
      sendMailParams.put("sendTo",communicationEvent.getRelatedOne("ToContactMech").getString("infoString"));
      sendMailParams.put("partyId",communicationEvent.getString("partyIdTo"));
      Map tmpResult=dispatcher.runSync("sendMail",sendMailParams);
      if (ServiceUtil.isError(tmpResult)) {
        errorMessages.add(ServiceUtil.getErrorMessage(tmpResult));
      }
    }
 else {
      GenericValue contactList=communicationEvent.getRelatedOne("ContactList");
      boolean singleUse=("Y".equals(contactList.get("singleUse")) ? true : false);
      Timestamp now=UtilDateTime.nowTimestamp();
      EntityConditionList conditions=new EntityConditionList(UtilMisc.toList(new EntityExpr("contactListId",EntityOperator.EQUALS,contactList.get("contactListId")),new EntityExpr("statusId",EntityOperator.EQUALS,"CLPT_ACCEPTED"),new EntityExpr("preferredContactMechId",EntityOperator.NOT_EQUAL,null),EntityUtil.getFilterByDateExpr()),EntityOperator.AND);
      List fieldsToSelect=UtilMisc.toList("partyId","preferredContactMechId","contactListId","fromDate");
      EntityListIterator sendToPartiesIt=delegator.findListIteratorByCondition("ContactListParty",conditions,null,fieldsToSelect,null,new EntityFindOptions(true,EntityFindOptions.TYPE_SCROLL_INSENSITIVE,EntityFindOptions.CONCUR_READ_ONLY,true));
      GenericValue nextSendToParty=null;
      while ((nextSendToParty=(GenericValue)sendToPartiesIt.next()) != null) {
        GenericValue email=nextSendToParty.getRelatedOne("PreferredContactMech");
        if (email == null)         continue;
        sendMailParams.put("sendTo",email.getString("infoString"));
        sendMailParams.put("partyId",nextSendToParty.getString("partyId"));
        Map tmpResult=dispatcher.runSync("sendMail",sendMailParams);
        if (ServiceUtil.isError(tmpResult)) {
          errorMessages.add(ServiceUtil.getErrorMessage(tmpResult));
        }
 else         if (singleUse) {
          tmpResult=dispatcher.runSync("updateContactListParty",UtilMisc.toMap("contactListId",nextSendToParty.get("contactListId"),"partyId",nextSendToParty.get("partyId"),"fromDate",nextSendToParty.get("fromDate"),"thruDate",now,"userLogin",userLogin));
          if (ServiceUtil.isError(tmpResult)) {
            errorMessages.add(ServiceUtil.getErrorMessage(tmpResult));
          }
        }
      }
      sendToPartiesIt.close();
    }
  }
 catch (  GenericEntityException eex) {
    ServiceUtil.returnError(eex.getMessage());
  }
catch (  GenericServiceException esx) {
    ServiceUtil.returnError(esx.getMessage());
  }
  if (errorMessages.size() > 0) {
    result=ServiceUtil.returnError(errorMessages);
  }
  return result;
}
