{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  List<Object> errorMessages=new LinkedList<Object>();
  String errorCallingUpdateContactListPartyService=UtilProperties.getMessage(resource,"commeventservices.errorCallingUpdateContactListPartyService",locale);
  String errorCallingSendMailService=UtilProperties.getMessage(resource,"commeventservices.errorCallingSendMailService",locale);
  String errorInSendEmailToContactListService=UtilProperties.getMessage(resource,"commeventservices.errorInSendEmailToContactListService",locale);
  String skippingInvalidEmailAddress=UtilProperties.getMessage(resource,"commeventservices.skippingInvalidEmailAddress",locale);
  String contactListId=(String)context.get("contactListId");
  String communicationEventId=(String)context.get("communicationEventId");
  EntityListIterator eli=null;
  try {
    GenericValue communicationEvent=EntityQuery.use(delegator).from("CommunicationEvent").where("communicationEventId",communicationEventId).queryOne();
    GenericValue contactList=EntityQuery.use(delegator).from("ContactList").where("contactListId",contactListId).queryOne();
    Map<String,Object> sendMailParams=new HashMap<String,Object>();
    sendMailParams.put("sendFrom",communicationEvent.getRelatedOne("FromContactMech",false).getString("infoString"));
    sendMailParams.put("subject",communicationEvent.getString("subject"));
    sendMailParams.put("contentType",communicationEvent.getString("contentMimeTypeId"));
    sendMailParams.put("userLogin",userLogin);
    List<EntityCondition> conditionList=UtilMisc.toList(EntityCondition.makeCondition("contactListId",EntityOperator.EQUALS,contactList.get("contactListId")),EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"CLPT_ACCEPTED"),EntityCondition.makeCondition("preferredContactMechId",EntityOperator.NOT_EQUAL,null),EntityUtil.getFilterByDateExpr(),EntityUtil.getFilterByDateExpr("contactFromDate","contactThruDate"));
    eli=EntityQuery.use(delegator).select("partyId","preferredContactMechId","fromDate","infoString").from("ContactListPartyAndContactMech").where(EntityCondition.makeCondition(conditionList,EntityOperator.AND)).cursorScrollInsensitive().distinct().queryIterator();
    for (GenericValue contactListPartyAndContactMech; (contactListPartyAndContactMech=eli.next()) != null; ) {
      Debug.logInfo("Contact info: " + contactListPartyAndContactMech,module);
      try {
        String emailAddress=contactListPartyAndContactMech.getString("infoString");
        if (UtilValidate.isEmpty(emailAddress))         continue;
        emailAddress=emailAddress.trim();
        if (!UtilValidate.isEmail(emailAddress)) {
          Debug.logError(skippingInvalidEmailAddress + ": " + emailAddress,module);
          errorMessages.add(skippingInvalidEmailAddress + ": " + emailAddress);
          continue;
        }
        List<EntityCondition> clpConditionList=UtilMisc.makeListWritable(conditionList);
        clpConditionList.add(EntityCondition.makeCondition("infoString",EntityOperator.EQUALS,emailAddress));
        GenericValue lastContactListPartyACM=EntityQuery.use(delegator).from("ContactListPartyAndContactMech").where(EntityCondition.makeCondition(clpConditionList,EntityOperator.AND)).orderBy("-fromDate").cache(true).queryFirst();
        if (lastContactListPartyACM == null)         continue;
        String partyId=lastContactListPartyACM.getString("partyId");
        sendMailParams.put("sendTo",emailAddress);
        sendMailParams.put("partyId",partyId);
        Map<String,String> contactListCommStatusRecordMap=UtilMisc.toMap("contactListId",contactListId,"communicationEventId",communicationEventId,"contactMechId",lastContactListPartyACM.getString("preferredContactMechId"));
        GenericValue contactListCommStatusRecord=EntityQuery.use(delegator).from("ContactListCommStatus").where(contactListCommStatusRecordMap).queryOne();
        if (contactListCommStatusRecord == null) {
          Map<String,String> newContactListCommStatusRecordMap=UtilMisc.makeMapWritable(contactListCommStatusRecordMap);
          newContactListCommStatusRecordMap.put("statusId","COM_IN_PROGRESS");
          newContactListCommStatusRecordMap.put("partyId",partyId);
          contactListCommStatusRecord=delegator.create("ContactListCommStatus",newContactListCommStatusRecordMap);
        }
 else         if (contactListCommStatusRecord.get("statusId") != null && contactListCommStatusRecord.getString("statusId").equals("COM_COMPLETE")) {
          continue;
        }
        Debug.logInfo("Sending email to contact list [" + contactListId + "] party ["+ partyId+ "] : "+ emailAddress,module);
        Map<String,Object> tmpResult=null;
        GenericValue contactListPartyStatus=EntityQuery.use(delegator).from("ContactListPartyStatus").where("contactListId",contactListId,"partyId",contactListPartyAndContactMech.getString("partyId"),"fromDate",contactListPartyAndContactMech.getTimestamp("fromDate"),"statusId","CLPT_ACCEPTED").queryFirst();
        if (UtilValidate.isNotEmpty(contactListPartyStatus)) {
          Map<String,Object> bodyParameters=new HashMap<String,Object>();
          bodyParameters.put("contactListId",contactListId);
          bodyParameters.put("partyId",contactListPartyAndContactMech.getString("partyId"));
          bodyParameters.put("preferredContactMechId",contactListPartyAndContactMech.getString("preferredContactMechId"));
          bodyParameters.put("emailAddress",emailAddress);
          bodyParameters.put("fromDate",contactListPartyAndContactMech.getTimestamp("fromDate"));
          bodyParameters.put("optInVerifyCode",contactListPartyStatus.getString("optInVerifyCode"));
          bodyParameters.put("content",communicationEvent.getString("content"));
          NotificationServices.setBaseUrl(delegator,contactList.getString("verifyEmailWebSiteId"),bodyParameters);
          GenericValue webSite=EntityQuery.use(delegator).from("WebSite").where("webSiteId",contactList.getString("verifyEmailWebSiteId")).queryOne();
          if (UtilValidate.isNotEmpty(webSite)) {
            GenericValue productStore=webSite.getRelatedOne("ProductStore",false);
            if (UtilValidate.isNotEmpty(productStore)) {
              List<GenericValue> productStoreEmailSettings=productStore.getRelated("ProductStoreEmailSetting",UtilMisc.toMap("emailType","CONT_EMAIL_TEMPLATE"),null,false);
              GenericValue productStoreEmailSetting=EntityUtil.getFirst(productStoreEmailSettings);
              if (UtilValidate.isNotEmpty(productStoreEmailSetting)) {
                sendMailParams.put("bodyScreenUri",productStoreEmailSetting.getString("bodyScreenLocation"));
                sendMailParams.put("bodyParameters",bodyParameters);
                sendMailParams.remove("body");
                tmpResult=dispatcher.runSync("sendMailFromScreen",sendMailParams,360,true);
              }
            }
          }
        }
        if (UtilValidate.isEmpty(tmpResult)) {
          sendMailParams.put("body",communicationEvent.getString("content"));
          tmpResult=dispatcher.runSync("sendMail",sendMailParams,360,true);
        }
        if (tmpResult == null || ServiceUtil.isError(tmpResult)) {
          if (ServiceUtil.getErrorMessage(tmpResult).startsWith("[ADDRERR]")) {
            contactListCommStatusRecord.set("statusId","COM_BOUNCED");
            try {
              contactListCommStatusRecord.store();
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              errorMessages.add(e.getMessage());
            }
            try {
              GenericValue contactListParty=contactListPartyAndContactMech.getRelatedOne("ContactListParty",false);
              if (contactListParty != null) {
                contactListParty.set("statusId","CLPT_INVALID");
                contactListParty.store();
              }
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              errorMessages.add(e.getMessage());
            }
            continue;
          }
 else {
            Debug.logError(errorCallingSendMailService + ": " + ServiceUtil.getErrorMessage(tmpResult),module);
            errorMessages.add(errorCallingSendMailService + ": " + ServiceUtil.getErrorMessage(tmpResult));
            continue;
          }
        }
 else {
          String thisCommEventId=(String)tmpResult.get("communicationEventId");
          GenericValue thisCommEvent=EntityQuery.use(delegator).from("CommunicationEvent").where("communicationEventId",thisCommEventId).queryOne();
          if (thisCommEvent != null) {
            thisCommEvent.set("contactListId",contactListId);
            thisCommEvent.set("parentCommEventId",communicationEventId);
            thisCommEvent.store();
          }
          String messageId=(String)tmpResult.get("messageId");
          contactListCommStatusRecord.set("messageId",messageId);
        }
        if ("Y".equals(contactList.get("singleUse"))) {
          tmpResult=dispatcher.runSync("updateContactListParty",UtilMisc.toMap("contactListId",lastContactListPartyACM.get("contactListId"),"partyId",partyId,"fromDate",lastContactListPartyACM.get("fromDate"),"thruDate",UtilDateTime.nowTimestamp(),"userLogin",userLogin));
          if (ServiceUtil.isError(tmpResult)) {
            Debug.logError(errorCallingUpdateContactListPartyService + ": " + ServiceUtil.getErrorMessage(tmpResult),module);
            errorMessages.add(errorCallingUpdateContactListPartyService + ": " + ServiceUtil.getErrorMessage(tmpResult));
            continue;
          }
        }
        contactListCommStatusRecord.set("statusId","COM_COMPLETE");
        delegator.store(contactListCommStatusRecord);
      }
 catch (      GenericEntityException nonFatalGEE) {
        Debug.logError(nonFatalGEE,errorInSendEmailToContactListService,module);
        errorMessages.add(errorInSendEmailToContactListService + ": " + nonFatalGEE.getMessage());
      }
catch (      GenericServiceException nonFatalGSE) {
        Debug.logError(nonFatalGSE,errorInSendEmailToContactListService,module);
        errorMessages.add(errorInSendEmailToContactListService + ": " + nonFatalGSE.getMessage());
      }
    }
  }
 catch (  GenericEntityException fatalGEE) {
    return ServiceUtil.returnError(fatalGEE.getMessage());
  }
 finally {
    if (eli != null) {
      try {
        eli.close();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
    }
  }
  return errorMessages.size() == 0 ? ServiceUtil.returnSuccess() : ServiceUtil.returnError(errorMessages);
}
