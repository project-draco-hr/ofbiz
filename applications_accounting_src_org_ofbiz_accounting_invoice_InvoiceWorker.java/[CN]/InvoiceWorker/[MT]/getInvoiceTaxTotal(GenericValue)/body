{
  BigDecimal invoiceTaxTotal=ZERO;
  BigDecimal ONE=new BigDecimal("1");
  if (invoice == null)   throw new IllegalArgumentException("The invoiceId passed does not match an existing invoice");
  List invoiceTaxItems=null;
  try {
    GenericDelegator delegator=invoice.getDelegator();
    EntityConditionList condition=new EntityConditionList(UtilMisc.toList(new EntityExpr("invoiceId",EntityOperator.EQUALS,invoice.get("invoiceId")),new EntityExpr("invoiceItemTypeId",EntityOperator.IN,getTaxableInvoiceItemTypeIds(delegator))),EntityOperator.AND);
    invoiceTaxItems=delegator.findByCondition("InvoiceItem",condition,null,null);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting InvoiceItem list",module);
  }
  if (invoiceTaxItems != null && invoiceTaxItems.size() > 0) {
    Iterator invoiceItemsIter=invoiceTaxItems.iterator();
    while (invoiceItemsIter.hasNext()) {
      GenericValue invoiceItem=(GenericValue)invoiceItemsIter.next();
      BigDecimal amount=invoiceItem.getBigDecimal("amount");
      BigDecimal quantity=invoiceItem.getBigDecimal("quantity");
      if (amount == null)       amount=ZERO;
      if (quantity == null)       quantity=ONE;
      invoiceTaxTotal=invoiceTaxTotal.add(amount.multiply(quantity)).setScale(decimals + 1,rounding);
    }
  }
  return invoiceTaxTotal.setScale(decimals,rounding).doubleValue();
}
