{
  BigDecimal conversionRate=null;
  GenericDelegator delegator=invoice.getDelegator();
  String otherCurrencyUomId=null;
  try {
    GenericValue party=delegator.findByPrimaryKey("PartyAcctgPreference",UtilMisc.toMap("partyId",invoice.getString("partyIdFrom")));
    if (UtilValidate.isEmpty(party) || party.getString("baseCurrencyUomId").equals(invoice.getString("currencyUomId"))) {
      party=delegator.findByPrimaryKey("PartyAcctgPreference",UtilMisc.toMap("partyId",invoice.getString("partyId")));
    }
    if (UtilValidate.isNotEmpty(party) && party.getString("baseCurrencyUomId") != null) {
      otherCurrencyUomId=new String(party.getString("baseCurrencyUomId"));
    }
 else {
      otherCurrencyUomId=new String(UtilProperties.getPropertyValue("general","currency.uom.id.default"));
    }
    if (otherCurrencyUomId == null) {
      otherCurrencyUomId="USD";
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting database records....",module);
  }
  if (invoice.getString("currencyUomId").equals(otherCurrencyUomId)) {
    return BigDecimal.ONE;
  }
  try {
    List acctgTransEntries=invoice.getRelated("AcctgTrans");
    if (UtilValidate.isNotEmpty(acctgTransEntries)) {
      GenericValue acctgTransEntry=((GenericValue)acctgTransEntries.get(0)).getRelated("AcctgTransEntry").get(0);
      conversionRate=acctgTransEntry.getBigDecimal("amount").divide(acctgTransEntry.getBigDecimal("origAmount"),new MathContext(100)).setScale(decimals,rounding);
    }
    if (UtilValidate.isEmpty(conversionRate)) {
      List paymentAppls=invoice.getRelated("PaymentApplication");
      Iterator ii=paymentAppls.iterator();
      while (ii.hasNext()) {
        GenericValue paymentAppl=(GenericValue)ii.next();
        GenericValue payment=paymentAppl.getRelatedOne("Payment");
        if (UtilValidate.isNotEmpty(payment.getBigDecimal("actualCurrencyAmount"))) {
          if (UtilValidate.isEmpty(conversionRate)) {
            conversionRate=payment.getBigDecimal("amount").divide(payment.getBigDecimal("actualCurrencyAmount"),new MathContext(100)).setScale(decimals,rounding);
          }
 else {
            conversionRate=conversionRate.add(payment.getBigDecimal("amount").divide(payment.getBigDecimal("actualCurrencyAmount"),new MathContext(100))).divide(new BigDecimal("2"),new MathContext(100)).setScale(decimals,rounding);
          }
        }
      }
    }
    if (UtilValidate.isEmpty(conversionRate)) {
      List rates=EntityUtil.filterByDate(delegator.findByAnd("UomConversionDated",UtilMisc.toMap("uomIdTo",invoice.getString("currencyUomId"),"uomId",otherCurrencyUomId)),invoice.getTimestamp("invoiceDate"));
      if (UtilValidate.isNotEmpty(rates)) {
        conversionRate=(BigDecimal.ONE).divide(((GenericValue)rates.get(0)).getBigDecimal("conversionFactor"),new MathContext(100)).setScale(decimals,rounding);
      }
 else {
        Debug.logError("Could not find conversionrate for invoice: " + invoice.getString("invoiceId"),module);
        return new BigDecimal("1");
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting database records....",module);
  }
  return (conversionRate);
}
