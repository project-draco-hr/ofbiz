{
  BigDecimal invoiceTotal=ZERO;
  BigDecimal invoiceTaxTotal=ZERO;
  Map<String,Object> invoiceTaxByTaxAuthGeoAndPartyResult=getInvoiceTaxByTaxAuthGeoAndParty(invoice);
  invoiceTaxTotal=(BigDecimal)invoiceTaxByTaxAuthGeoAndPartyResult.get("taxGrandTotal");
  List<GenericValue> invoiceItems=null;
  try {
    invoiceItems=invoice.getRelated("InvoiceItem");
    if ("SALES_INVOICE".equals(invoice.getString("invoiceTypeId"))) {
      invoiceItems=EntityUtil.filterByAnd(invoiceItems,UtilMisc.toList(EntityCondition.makeCondition("invoiceItemTypeId",EntityOperator.NOT_EQUAL,"INV_SALES_TAX"),EntityCondition.makeCondition("invoiceItemTypeId",EntityOperator.NOT_EQUAL,"ITM_SALES_TAX")));
    }
 else     if (("PURCHASE_INVOICE".equals(invoice.getString("invoiceTypeId")))) {
      invoiceItems=EntityUtil.filterByAnd(invoiceItems,UtilMisc.toList(EntityCondition.makeCondition("invoiceItemTypeId",EntityOperator.NOT_EQUAL,"PINV_SALES_TAX"),EntityCondition.makeCondition("invoiceItemTypeId",EntityOperator.NOT_EQUAL,"PITM_SALES_TAX")));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting InvoiceItem list",module);
  }
  if (UtilValidate.isNotEmpty(invoiceItems)) {
    Iterator<GenericValue> invoiceItemsIter=invoiceItems.iterator();
    while (invoiceItemsIter.hasNext()) {
      GenericValue invoiceItem=invoiceItemsIter.next();
      BigDecimal amount=invoiceItem.getBigDecimal("amount");
      BigDecimal quantity=invoiceItem.getBigDecimal("quantity");
      if (amount == null)       amount=ZERO;
      if (quantity == null)       quantity=BigDecimal.ONE;
      invoiceTotal=invoiceTotal.add(amount.multiply(quantity)).setScale(decimals,rounding);
    }
  }
  invoiceTotal=invoiceTotal.add(invoiceTaxTotal).setScale(decimals,rounding);
  if (UtilValidate.isNotEmpty(invoiceTotal) && !actualCurrency) {
    invoiceTotal=invoiceTotal.multiply(getInvoiceCurrencyConversionRate(invoice)).setScale(decimals,rounding);
  }
  return invoiceTotal;
}
