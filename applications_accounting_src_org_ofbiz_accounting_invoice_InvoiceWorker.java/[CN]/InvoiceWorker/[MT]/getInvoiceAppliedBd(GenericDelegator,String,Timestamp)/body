{
  if (delegator == null) {
    throw new IllegalArgumentException("Null delegator is not allowed in this method");
  }
  BigDecimal invoiceApplied=ZERO;
  List paymentApplications=null;
  EntityConditionList dateCondition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("effectiveDate",EntityOperator.EQUALS,null),EntityCondition.makeCondition("effectiveDate",EntityOperator.LESS_THAN_EQUAL_TO,asOfDateTime)),EntityOperator.OR);
  EntityConditionList conditions=EntityCondition.makeCondition(UtilMisc.toList(dateCondition,EntityCondition.makeCondition("invoiceId",EntityOperator.EQUALS,invoiceId)),EntityOperator.AND);
  try {
    paymentApplications=delegator.findList("PaymentAndApplication",conditions,null,UtilMisc.toList("effectiveDate"),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting paymentApplicationlist",module);
  }
  if (UtilValidate.isNotEmpty(paymentApplications)) {
    Iterator p=paymentApplications.iterator();
    while (p.hasNext()) {
      GenericValue paymentApplication=(GenericValue)p.next();
      invoiceApplied=invoiceApplied.add(paymentApplication.getBigDecimal("amountApplied")).setScale(decimals,rounding);
    }
  }
  return invoiceApplied;
}
