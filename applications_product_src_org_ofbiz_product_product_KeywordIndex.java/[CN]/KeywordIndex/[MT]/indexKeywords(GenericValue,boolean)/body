{
  if (product == null)   return;
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  if (!doAll) {
    if ("N".equals(product.getString("autoCreateKeywords"))) {
      return;
    }
    if ("Y".equals(product.getString("isVariant")) && "true".equals(UtilProperties.getPropertyValue("prodsearch","index.ignore.variants"))) {
      return;
    }
    Timestamp salesDiscontinuationDate=product.getTimestamp("salesDiscontinuationDate");
    if (salesDiscontinuationDate != null && salesDiscontinuationDate.before(nowTimestamp) && "true".equals(UtilProperties.getPropertyValue("prodsearch","index.ignore.discontinued.sales"))) {
      return;
    }
  }
  Delegator delegator=product.getDelegator();
  if (delegator == null)   return;
  String productId=product.getString("productId");
  String separators=KeywordSearchUtil.getSeparators();
  String stopWordBagOr=KeywordSearchUtil.getStopWordBagOr();
  String stopWordBagAnd=KeywordSearchUtil.getStopWordBagAnd();
  boolean removeStems=KeywordSearchUtil.getRemoveStems();
  Set<String> stemSet=KeywordSearchUtil.getStemSet();
  Map<String,Long> keywords=new TreeMap<String,Long>();
  List<String> strings=FastList.newInstance();
  int pidWeight=1;
  try {
    pidWeight=Integer.parseInt(UtilProperties.getPropertyValue("prodsearch","index.weight.Product.productId","0"));
  }
 catch (  Exception e) {
    Debug.logWarning("Could not parse weight number: " + e.toString(),module);
  }
  keywords.put(product.getString("productId").toLowerCase(),Long.valueOf(pidWeight));
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.Product.productName","0"))) {
    addWeightedKeywordSourceString(product,"productName",strings);
  }
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.Product.internalName","0"))) {
    addWeightedKeywordSourceString(product,"internalName",strings);
  }
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.Product.brandName","0"))) {
    addWeightedKeywordSourceString(product,"brandName",strings);
  }
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.Product.description","0"))) {
    addWeightedKeywordSourceString(product,"description",strings);
  }
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.Product.longDescription","0"))) {
    addWeightedKeywordSourceString(product,"longDescription",strings);
  }
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductFeatureAndAppl.description","0")) || !"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductFeatureAndAppl.abbrev","0")) || !"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductFeatureAndAppl.idCode","0"))) {
    List<GenericValue> productFeatureAndAppls=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId).queryList();
    for (    GenericValue productFeatureAndAppl : productFeatureAndAppls) {
      addWeightedKeywordSourceString(productFeatureAndAppl,"description",strings);
      addWeightedKeywordSourceString(productFeatureAndAppl,"abbrev",strings);
      addWeightedKeywordSourceString(productFeatureAndAppl,"idCode",strings);
    }
  }
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductAttribute.attrName","0")) || !"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductAttribute.attrValue","0"))) {
    List<GenericValue> productAttributes=EntityQuery.use(delegator).from("ProductAttribute").where("productId",productId).queryList();
    for (    GenericValue productAttribute : productAttributes) {
      addWeightedKeywordSourceString(productAttribute,"attrName",strings);
      addWeightedKeywordSourceString(productAttribute,"attrValue",strings);
    }
  }
  if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.GoodIdentification.idValue","0"))) {
    List<GenericValue> goodIdentifications=EntityQuery.use(delegator).from("GoodIdentification").where("productId",productId).queryList();
    for (    GenericValue goodIdentification : goodIdentifications) {
      addWeightedKeywordSourceString(goodIdentification,"idValue",strings);
    }
  }
  if ("Y".equals(product.getString("isVirtual"))) {
    if (!"0".equals(UtilProperties.getPropertyValue("prodsearch","index.weight.Variant.Product.productId","0"))) {
      List<GenericValue> variantProductAssocs=EntityQuery.use(delegator).from("ProductAssoc").where("productId",productId,"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();
      for (      GenericValue variantProductAssoc : variantProductAssocs) {
        int weight=1;
        try {
          weight=Integer.parseInt(UtilProperties.getPropertyValue("prodsearch","index.weight.Variant.Product.productId","0"));
        }
 catch (        Exception e) {
          Debug.logWarning("Could not parse weight number: " + e.toString(),module);
        }
        for (int i=0; i < weight; i++) {
          strings.add(variantProductAssoc.getString("productIdTo"));
        }
      }
    }
  }
  String productContentTypes=UtilProperties.getPropertyValue("prodsearch","index.include.ProductContentTypes");
  for (  String productContentTypeId : productContentTypes.split(",")) {
    int weight=1;
    try {
      weight=Integer.parseInt(UtilProperties.getPropertyValue("prodsearch","index.weight.ProductContent." + productContentTypeId,"1"));
    }
 catch (    Exception e) {
      Debug.logWarning("Could not parse weight number: " + e.toString(),module);
    }
    List<GenericValue> productContentAndInfos=EntityQuery.use(delegator).from("ProductContentAndInfo").where("productId",productId,"productContentTypeId",productContentTypeId).queryList();
    for (    GenericValue productContentAndInfo : productContentAndInfos) {
      addWeightedDataResourceString(productContentAndInfo,weight,strings,delegator,product);
      List<GenericValue> alternateViews=productContentAndInfo.getRelated("ContentAssocDataResourceViewTo",UtilMisc.toMap("caContentAssocTypeId","ALTERNATE_LOCALE"),UtilMisc.toList("-caFromDate"),false);
      alternateViews=EntityUtil.filterByDate(alternateViews,UtilDateTime.nowTimestamp(),"caFromDate","caThruDate",true);
      for (      GenericValue thisView : alternateViews) {
        addWeightedDataResourceString(thisView,weight,strings,delegator,product);
      }
    }
  }
  if (UtilValidate.isNotEmpty(strings)) {
    for (    String str : strings) {
      KeywordSearchUtil.processKeywordsForIndex(str,keywords,separators,stopWordBagAnd,stopWordBagOr,removeStems,stemSet);
    }
  }
  List<GenericValue> toBeStored=FastList.newInstance();
  int keywordMaxLength=Integer.parseInt(UtilProperties.getPropertyValue("prodsearch","product.keyword.max.length"));
  for (  Map.Entry<String,Long> entry : keywords.entrySet()) {
    if (entry.getKey().length() <= keywordMaxLength) {
      GenericValue productKeyword=delegator.makeValue("ProductKeyword",UtilMisc.toMap("productId",product.getString("productId"),"keyword",entry.getKey(),"keywordTypeId","KWT_KEYWORD","relevancyWeight",entry.getValue()));
      toBeStored.add(productKeyword);
    }
  }
  if (toBeStored.size() > 0) {
    if (Debug.verboseOn())     Debug.logVerbose("[KeywordIndex.indexKeywords] Storing " + toBeStored.size() + " keywords for productId "+ product.getString("productId"),module);
    if ("true".equals(UtilProperties.getPropertyValue("prodsearch","index.delete.on_index","false"))) {
      delegator.removeByAnd("ProductKeyword",UtilMisc.toMap("productId",product.getString("productId")));
    }
    delegator.storeAll(toBeStored);
  }
}
