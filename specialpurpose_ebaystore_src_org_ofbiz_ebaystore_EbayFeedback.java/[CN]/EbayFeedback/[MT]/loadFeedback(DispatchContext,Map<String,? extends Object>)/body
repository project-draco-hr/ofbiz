{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productStoreId=(String)context.get("productStoreId");
  ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
  try {
    Map<String,Object> inMap=FastMap.newInstance();
    inMap.put("productStoreId",productStoreId);
    inMap.put("userLogin",userLogin);
    Map<String,Object> resultUser=dispatcher.runSync("getEbayStoreUser",inMap);
    String userID=(String)resultUser.get("userLoginId");
    GetFeedbackCall feedbackCall=new GetFeedbackCall();
    feedbackCall.setApiContext(apiContext);
    SiteCodeType siteCodeType=EbayStoreHelper.getSiteCodeType(productStoreId,locale,delegator);
    feedbackCall.setSite(siteCodeType);
    feedbackCall.setUserID(userID);
    DetailLevelCodeType[] detailLevelCodeType={DetailLevelCodeType.RETURN_ALL};
    feedbackCall.setDetailLevel(detailLevelCodeType);
    FeedbackDetailType[] feedback=feedbackCall.getFeedback();
    if (feedback != null) {
      String partyId=null;
      GenericValue userLoginEx=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userID).queryOne();
      if (userLoginEx == null) {
        GenericValue party=delegator.makeValue("Party");
        partyId=delegator.getNextSeqId("Party");
        party.put("partyId",partyId);
        party.put("partyTypeId","PERSON");
        party.create();
        userLoginEx=delegator.makeValue("UserLogin");
        userLoginEx.put("userLoginId",userID);
        userLoginEx.put("partyId",partyId);
        userLoginEx.create();
      }
 else {
        partyId=userLoginEx.getString("partyId");
      }
      List<GenericValue> partyRoles=delegator.findByAnd("PartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId","OWNER"),null,false);
      if (partyRoles.size() == 0) {
        GenericValue partyRole=delegator.makeValue("PartyRole");
        partyRole.put("partyId",partyId);
        partyRole.put("roleTypeId","OWNER");
        partyRole.create();
      }
      int feedbackLength=feedback.length;
      for (int i=0; i < feedbackLength; i++) {
        String contentId=feedback[i].getFeedbackID();
        Date eBayDateTime=feedback[i].getCommentTime().getTime();
        GenericValue contentCheck=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();
        if (contentCheck != null) {
          continue;
        }
        String textData=feedback[i].getCommentText();
        String commentingUserId=feedback[i].getCommentingUser();
        String commentingPartyId=null;
        List<GenericValue> CommentingUserLogins=delegator.findByAnd("UserLogin",UtilMisc.toMap("userLoginId",commentingUserId),null,false);
        if (CommentingUserLogins.size() == 0) {
          GenericValue party=delegator.makeValue("Party");
          commentingPartyId=delegator.getNextSeqId("Party");
          party.put("partyId",commentingPartyId);
          party.put("partyTypeId","PERSON");
          party.create();
          userLoginEx=delegator.makeValue("UserLogin");
          userLoginEx.put("userLoginId",commentingUserId);
          userLoginEx.put("partyId",commentingPartyId);
          userLoginEx.create();
        }
 else {
          userLoginEx=CommentingUserLogins.get(0);
          commentingPartyId=userLoginEx.getString("partyId");
        }
        GenericValue dataResource=delegator.makeValue("DataResource");
        String dataResourceId=delegator.getNextSeqId("DataResource");
        dataResource.put("dataResourceId",dataResourceId);
        dataResource.put("dataResourceTypeId","ELECTRONIC_TEXT");
        dataResource.put("mimeTypeId","text/html");
        dataResource.create();
        GenericValue electronicText=delegator.makeValue("ElectronicText");
        electronicText.put("dataResourceId",dataResourceId);
        electronicText.put("textData",textData);
        electronicText.create();
        GenericValue content=delegator.makeValue("Content");
        content.put("contentId",contentId);
        content.put("contentTypeId","DOCUMENT");
        content.put("dataResourceId",dataResourceId);
        content.put("createdDate",UtilDateTime.toTimestamp(eBayDateTime));
        content.create();
        GenericValue contentPurpose=delegator.makeValue("ContentPurpose");
        contentPurpose.put("contentId",contentId);
        contentPurpose.put("contentPurposeTypeId","FEEDBACK");
        contentPurpose.create();
        List<GenericValue> commentingPartyRoles=delegator.findByAnd("PartyRole",UtilMisc.toMap("partyId",commentingPartyId,"roleTypeId","COMMENTATOR"),null,false);
        if (commentingPartyRoles.size() == 0) {
          GenericValue partyRole=delegator.makeValue("PartyRole");
          partyRole.put("partyId",commentingPartyId);
          partyRole.put("roleTypeId","COMMENTATOR");
          partyRole.create();
        }
        List<GenericValue> contentRoles=delegator.findByAnd("ContentRole",UtilMisc.toMap("partyId",partyId,"roleTypeId","OWNER","contentId",contentId),null,false);
        if (contentRoles.size() == 0) {
          GenericValue contentRole=delegator.makeValue("ContentRole");
          contentRole.put("contentId",contentId);
          contentRole.put("partyId",partyId);
          contentRole.put("roleTypeId","OWNER");
          contentRole.put("fromDate",UtilDateTime.nowTimestamp());
          contentRole.create();
        }
        List<GenericValue> commentingContentRoles=delegator.findByAnd("ContentRole",UtilMisc.toMap("partyId",commentingPartyId,"roleTypeId","COMMENTATOR","contentId",contentId),null,false);
        if (commentingContentRoles.size() == 0) {
          GenericValue contentRole=delegator.makeValue("ContentRole");
          contentRole.put("contentId",contentId);
          contentRole.put("partyId",commentingPartyId);
          contentRole.put("roleTypeId","COMMENTATOR");
          contentRole.put("fromDate",UtilDateTime.nowTimestamp());
          contentRole.create();
        }
      }
    }
  }
 catch (  ApiException e) {
    e.printStackTrace();
  }
catch (  SdkException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  String successMsg="Load eBay Feedback successful.";
  result=ServiceUtil.returnSuccess(successMsg);
  return result;
}
