{
  SSLUtil.loadJsseProperties(this.debug);
  String arguments=null;
  InputStream in=null;
  if (url == null) {
    throw new HttpClientException("Cannot process a null URL.");
  }
  if (rawStream != null) {
    arguments=rawStream;
  }
 else   if (UtilValidate.isNotEmpty(parameters)) {
    arguments=UtilHttp.urlEncodeArgs(parameters,false);
  }
  if (method.equalsIgnoreCase("get") && arguments != null) {
    if (url.contains("?")) {
      url=url + "&" + arguments;
    }
 else {
      url=url + "?" + arguments;
    }
  }
  try {
    requestUrl=new URL(url);
    if (overrideTrust) {
      con=URLConnector.openUntrustedConnection(requestUrl,timeout,clientCertAlias,hostVerification);
    }
 else {
      con=URLConnector.openConnection(requestUrl,timeout,clientCertAlias,hostVerification);
    }
    if (Debug.verboseOn() || debug)     Debug.logInfo("Connection opened to : " + requestUrl.toExternalForm(),module);
    if ((con instanceof HttpURLConnection)) {
      ((HttpURLConnection)con).setInstanceFollowRedirects(followRedirects);
      if (Debug.verboseOn() || debug)       Debug.logInfo("Connection is of type HttpURLConnection, more specifically: " + con.getClass().getName(),module);
    }
    if (contentType != null) {
      con.setRequestProperty("Content-type",contentType);
    }
    con.setDoOutput(true);
    con.setUseCaches(false);
    if (keepAlive) {
      con.setRequestProperty("Connection","Keep-Alive");
    }
    if (method.equalsIgnoreCase("post")) {
      if (contentType == null) {
        con.setRequestProperty("Content-type","application/x-www-form-urlencoded");
      }
      con.setDoInput(true);
    }
    if (basicAuthUsername != null) {
      String basicAuthString="Basic " + Base64.base64Encode(basicAuthUsername + ":" + (basicAuthPassword == null ? "" : basicAuthPassword));
      con.setRequestProperty("Authorization",basicAuthString);
      if (Debug.verboseOn() || debug)       Debug.logInfo("Header - Authorization: " + basicAuthString,module);
    }
    if (UtilValidate.isNotEmpty(headers)) {
      for (      Map.Entry<String,String> entry : headers.entrySet()) {
        String headerName=entry.getKey();
        String headerValue=entry.getValue();
        con.setRequestProperty(headerName,headerValue);
        if (Debug.verboseOn() || debug)         Debug.logInfo("Header - " + headerName + ": "+ headerValue,module);
      }
    }
    if (method.equalsIgnoreCase("post")) {
      OutputStreamWriter out=new OutputStreamWriter(con.getOutputStream(),this.streamCharset != null ? this.streamCharset : "UTF-8");
      if (Debug.verboseOn() || debug)       Debug.logInfo("Opened output stream",module);
      if (arguments != null) {
        out.write(arguments);
        if (Debug.verboseOn() || debug)         Debug.logInfo("Wrote arguements (parameters) : " + arguments,module);
      }
      out.flush();
      out.close();
      if (Debug.verboseOn() || debug)       Debug.logInfo("Flushed and closed buffer",module);
    }
    if (Debug.verboseOn() || debug) {
      Map<String,List<String>> headerFields=con.getHeaderFields();
      Debug.logInfo("Header Fields : " + headerFields,module);
    }
    in=con.getInputStream();
  }
 catch (  IOException ioe) {
    if ((trustAny && !overrideTrust) && (ioe.getCause() instanceof CertificateException)) {
      Debug.logWarning(ioe.getCause(),module);
      return sendHttpRequestStream(method,true);
    }
    throw new HttpClientException("IO Error processing request",ioe);
  }
catch (  Exception e) {
    throw new HttpClientException("Error processing request",e);
  }
  return in;
}
