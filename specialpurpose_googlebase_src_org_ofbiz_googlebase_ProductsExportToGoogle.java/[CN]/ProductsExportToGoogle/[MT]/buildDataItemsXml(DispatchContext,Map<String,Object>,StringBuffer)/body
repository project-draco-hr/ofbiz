{
  Locale locale=(Locale)context.get("locale");
  List<Object> newProductsInGoogle=FastList.newInstance();
  List<Object> productsRemovedFromGoogle=FastList.newInstance();
  try {
    GenericDelegator delegator=dctx.getDelegator();
    LocalDispatcher dispatcher=dctx.getDispatcher();
    List selectResult=(List)context.get("selectResult");
    String webSiteUrl=(String)context.get("webSiteUrl");
    String imageUrl=(String)context.get("imageUrl");
    String actionType=(String)context.get("actionType");
    String statusId=(String)context.get("statusId");
    String trackingCodeId=(String)context.get("trackingCodeId");
    String countryCode=(String)context.get("countryCode");
    String webSiteMountPoint=(String)context.get("webSiteMountPoint");
    if (!webSiteUrl.startsWith("http://") && !webSiteUrl.startsWith("https://")) {
      webSiteUrl="http://" + webSiteUrl;
    }
    if (webSiteUrl.endsWith("/")) {
      webSiteUrl=webSiteUrl.substring(0,webSiteUrl.length() - 1);
    }
    if (webSiteMountPoint.endsWith("/")) {
      webSiteMountPoint=webSiteMountPoint.substring(0,webSiteMountPoint.length() - 1);
    }
    if (webSiteMountPoint.startsWith("/")) {
      webSiteMountPoint=webSiteMountPoint.substring(1,webSiteMountPoint.length());
    }
    String productCurrency=null;
    if ("US".equals(countryCode)) {
      productCurrency="USD";
    }
 else     if ("GB".equals(countryCode)) {
      productCurrency="GBP";
    }
 else     if ("DE".equals(countryCode)) {
      productCurrency="EUR";
    }
 else {
      Debug.logError("Exception during building data items to Google, Country Code must be either US, UK or DE: " + countryCode,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToGoogle.invalidCountryCode",locale));
    }
    List<GenericValue> productsList=delegator.findList("Product",EntityCondition.makeCondition("productId",EntityOperator.IN,selectResult),null,null,null,false);
    if (UtilValidate.isEmpty(trackingCodeId) || "_NA_".equals(trackingCodeId)) {
      trackingCodeId="";
    }
 else {
      trackingCodeId="?atc=" + trackingCodeId;
    }
    Document feedDocument=UtilXml.makeEmptyXmlDocument("feed");
    Element feedElem=feedDocument.getDocumentElement();
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns","http://www.w3.org/2005/Atom");
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:gm",googleBaseMetadataUrl);
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:g",googleBaseNSUrl);
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:batch",googleBaseBatchUrl);
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:app",googleBaseAppUrl);
    Iterator<GenericValue> productsListItr=productsList.iterator();
    int index=0;
    String itemActionType=null;
    GenericValue googleProduct;
    while (productsListItr.hasNext()) {
      itemActionType=actionType;
      GenericValue prod=(GenericValue)productsListItr.next();
      String price=getProductPrice(dispatcher,prod);
      if (price == null) {
        Debug.logInfo("Price not found for product [" + prod.getString("productId") + "]; product will not be exported.",module);
        continue;
      }
      String link=webSiteUrl + "/" + webSiteMountPoint+ "/control/product/~product_id="+ prod.getString("productId")+ trackingCodeId;
      String title=UtilFormatOut.encodeXmlValue(prod.getString("productName"));
      if (UtilValidate.isEmpty(title)) {
        title=UtilFormatOut.encodeXmlValue(prod.getString("internalName"));
      }
      String description=UtilFormatOut.encodeXmlValue(prod.getString("description"));
      if (UtilValidate.isEmpty(description)) {
        description=UtilFormatOut.encodeXmlValue(prod.getString("internalName"));
      }
      String imageLink="";
      if (UtilValidate.isNotEmpty(prod.getString("largeImageUrl"))) {
        imageLink=webSiteUrl + prod.getString("largeImageUrl");
      }
 else       if (UtilValidate.isNotEmpty(prod.getString("mediumImageUrl"))) {
        imageLink=webSiteUrl + prod.getString("mediumImageUrl");
      }
 else       if (UtilValidate.isNotEmpty(prod.getString("smallImageUrl"))) {
        imageLink=webSiteUrl + prod.getString("smallImageUrl");
      }
      String googleProductId=null;
      if (!"insert".equals(actionType)) {
        try {
          googleProduct=delegator.findByPrimaryKey("GoodIdentification",UtilMisc.toMap("productId",prod.getString("productId"),"goodIdentificationTypeId","GOOGLE_ID"));
          if (UtilValidate.isNotEmpty(googleProduct)) {
            googleProductId=googleProduct.getString("idValue");
          }
        }
 catch (        GenericEntityException gee) {
          Debug.logError("Unable to obtain GoodIdentification entity value of the Google id for product [" + prod.getString("productId") + "]: "+ gee.getMessage(),module);
        }
      }
      if ("update".equals(actionType) && UtilValidate.isEmpty(googleProductId)) {
        itemActionType="insert";
      }
      Element entryElem=UtilXml.addChildElement(feedElem,"entry",feedDocument);
      Element batchElem=UtilXml.addChildElementNSElement(entryElem,"batch:operation",feedDocument,googleBaseBatchUrl);
      Element batchOperationElem=UtilXml.firstChildElement(batchElem,"batch:operation");
      batchOperationElem.setAttribute("type",itemActionType);
      Element appControlElem=UtilXml.addChildElementNSElement(entryElem,"app:control",feedDocument,googleBaseAppUrl);
      Element appControlChildElem=UtilXml.firstChildElement(appControlElem,"app:control");
      UtilXml.addChildElementNSValue(appControlChildElem,"gm:publishing_priority","high",feedDocument,googleBaseMetadataUrl);
      if (statusId != null && ("draft".equals(statusId) || "deactivate".equals(statusId))) {
        UtilXml.addChildElementNSValue(appControlElem,"app:draft","yes",feedDocument,googleBaseAppUrl);
        if ("deactivate".equals(statusId)) {
          UtilXml.addChildElementNSElement(appControlElem,"gm:disapproved",feedDocument,googleBaseMetadataUrl);
        }
      }
      UtilXml.addChildElementValue(entryElem,"title",title,feedDocument);
      Element contentElem=UtilXml.addChildElementValue(entryElem,"content",description,feedDocument);
      contentElem.setAttribute("type","xhtml");
      if (UtilValidate.isNotEmpty(googleProductId)) {
        UtilXml.addChildElementNSValue(entryElem,"g:id",googleProductId,feedDocument,googleBaseNSUrl);
      }
 else {
        UtilXml.addChildElementNSValue(entryElem,"g:id",link,feedDocument,googleBaseNSUrl);
      }
      Element linkElem=UtilXml.addChildElement(entryElem,"link",feedDocument);
      linkElem.setAttribute("rel","alternate");
      linkElem.setAttribute("type","text/html");
      linkElem.setAttribute("href",link);
      UtilXml.addChildElementNSValue(entryElem,"g:item_type","products",feedDocument,googleBaseNSUrl);
      List<GenericValue> productCategoryMembers=delegator.findList("ProductCategoryMember",EntityCondition.makeCondition("productId",EntityOperator.EQUALS,prod.getString("productId")),null,UtilMisc.toList("productCategoryId"),null,false);
      Iterator<GenericValue> productCategoryMembersIter=productCategoryMembers.iterator();
      while (productCategoryMembersIter.hasNext()) {
        GenericValue productCategoryMember=(GenericValue)productCategoryMembersIter.next();
        GenericValue productCategory=productCategoryMember.getRelatedOne("ProductCategory");
        String categoryDescription="";
        if (UtilValidate.isNotEmpty(productCategory.getString("categoryName"))) {
          categoryDescription=productCategory.getString("categoryName");
        }
 else         if (UtilValidate.isNotEmpty(productCategory.getString("description"))) {
          categoryDescription=productCategory.getString("description");
        }
 else         if (UtilValidate.isNotEmpty(productCategory.getString("longDescription"))) {
          categoryDescription=productCategory.getString("longDescription");
        }
        if (UtilValidate.isNotEmpty(productCategory)) {
          UtilXml.addChildElementNSValue(entryElem,"g:product_type",StringUtil.wrapString(categoryDescription).toString(),feedDocument,googleBaseNSUrl);
        }
      }
      UtilXml.addChildElementNSValue(entryElem,"g:price",price,feedDocument,googleBaseNSUrl);
      UtilXml.addChildElementNSValue(entryElem,"g:currency",productCurrency,feedDocument,googleBaseNSUrl);
      UtilXml.addChildElementNSValue(entryElem,"g:target_country",countryCode,feedDocument,googleBaseNSUrl);
      if (UtilValidate.isNotEmpty(prod.getString("brandName"))) {
        UtilXml.addChildElementNSValue(entryElem,"g:brand",prod.getString("brandName"),feedDocument,googleBaseNSUrl);
      }
      try {
        googleProduct=delegator.findByPrimaryKey("GoodIdentification",UtilMisc.toMap("productId",prod.getString("productId"),"goodIdentificationTypeId","SKU"));
        if (UtilValidate.isNotEmpty(googleProduct)) {
          UtilXml.addChildElementNSValue(entryElem,"g:ean",googleProduct.getString("idValue"),feedDocument,googleBaseNSUrl);
        }
      }
 catch (      GenericEntityException gee) {
        Debug.logInfo("Unable to get the SKU for product [" + prod.getString("productId") + "]: "+ gee.getMessage(),module);
      }
      UtilXml.addChildElementNSValue(entryElem,"g:condition","new",feedDocument,googleBaseNSUrl);
      if (UtilValidate.isNotEmpty(imageLink)) {
        UtilXml.addChildElementNSValue(entryElem,"g:image_link",imageLink,feedDocument,googleBaseNSUrl);
      }
      if ("insert".equals(itemActionType)) {
        newProductsInGoogle.add(prod.getString("productId"));
        productsRemovedFromGoogle.add(null);
      }
 else       if ("delete".equals(itemActionType)) {
        newProductsInGoogle.add(null);
        productsRemovedFromGoogle.add(prod.getString("productId"));
      }
 else {
        newProductsInGoogle.add(null);
        productsRemovedFromGoogle.add(null);
      }
      index++;
    }
    dataItemsXml.append(UtilXml.writeXmlDocument(feedDocument));
  }
 catch (  IOException e) {
    return ServiceUtil.returnError("IO Error creating XML document for Google :" + e.getMessage());
  }
catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Unable to read from product entity: " + e.toString());
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("newProductsInGoogle",newProductsInGoogle);
  result.put("productsRemovedFromGoogle",productsRemovedFromGoogle);
  Debug.log("======returning with result: " + result);
  return result;
}
