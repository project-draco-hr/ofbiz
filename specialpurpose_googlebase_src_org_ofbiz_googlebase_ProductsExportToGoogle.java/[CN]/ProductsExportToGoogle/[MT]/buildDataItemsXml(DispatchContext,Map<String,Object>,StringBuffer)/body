{
  Locale locale=(Locale)context.get("locale");
  List<String> newProductsInGoogle=FastList.newInstance();
  List<String> productsRemovedFromGoogle=FastList.newInstance();
  String localeString=null;
  String productStoreId=(String)context.get("productStoreId");
  try {
    Delegator delegator=dctx.getDelegator();
    LocalDispatcher dispatcher=dctx.getDispatcher();
    List<String> selectResult=UtilGenerics.checkList(context.get("selectResult"),String.class);
    String webSiteUrl=(String)context.get("webSiteUrl");
    String actionType=(String)context.get("actionType");
    String statusId=(String)context.get("statusId");
    String trackingCodeId=(String)context.get("trackingCodeId");
    String countryCode=(String)context.get("countryCode");
    String webSiteMountPoint=(String)context.get("webSiteMountPoint");
    String utmSource=null;
    String utmMedium=null;
    String utmTerm=null;
    String utmContent=null;
    String utmCampaign=null;
    if (UtilValidate.isNotEmpty(productStoreId)) {
      GenericValue googleBaseConfig=null;
      try {
        googleBaseConfig=EntityQuery.use(delegator).from("GoogleBaseConfig").where(UtilMisc.toMap("productStoreId",productStoreId)).queryOne();
      }
 catch (      GenericEntityException e) {
        Debug.logError("Unable to find value for GoogleBaseConfig",module);
        e.printStackTrace();
      }
      if (UtilValidate.isNotEmpty(googleBaseConfig)) {
        String source=googleBaseConfig.getString("utmSource");
        String medium=googleBaseConfig.getString("utmMedium");
        String term=googleBaseConfig.getString("utmTerm");
        String content=googleBaseConfig.getString("utmContent");
        String campaign=googleBaseConfig.getString("utmCampaign");
        if (UtilValidate.isNotEmpty(source)) {
          utmSource="?utm_source=" + source;
        }
 else {
          utmSource="";
        }
        if (UtilValidate.isNotEmpty(medium)) {
          utmMedium="&utm_medium=" + medium;
        }
 else {
          utmMedium="";
        }
        if (UtilValidate.isNotEmpty(term)) {
          utmTerm="&utm_term=" + term;
        }
 else {
          utmTerm="";
        }
        if (UtilValidate.isNotEmpty(content)) {
          utmContent="&utm_content=" + content;
        }
 else {
          utmContent="";
        }
        if (UtilValidate.isNotEmpty(campaign)) {
          utmCampaign="&utm_campaign=" + campaign;
        }
 else {
          utmCampaign="";
        }
      }
    }
    if (!webSiteUrl.startsWith("http://") && !webSiteUrl.startsWith("https://")) {
      webSiteUrl="http://" + webSiteUrl;
    }
    if (webSiteUrl.endsWith("/")) {
      webSiteUrl=webSiteUrl.substring(0,webSiteUrl.length() - 1);
    }
    if (webSiteMountPoint.endsWith("/")) {
      webSiteMountPoint=webSiteMountPoint.substring(0,webSiteMountPoint.length() - 1);
    }
    if (webSiteMountPoint.startsWith("/")) {
      webSiteMountPoint=webSiteMountPoint.substring(1,webSiteMountPoint.length());
    }
    String productCurrency=null;
    if ("US".equals(countryCode)) {
      productCurrency="USD";
      localeString="en_US";
    }
 else     if ("GB".equals(countryCode)) {
      productCurrency="GBP";
      localeString="en_GB";
    }
 else     if ("DE".equals(countryCode)) {
      productCurrency="EUR";
      localeString="de";
    }
 else {
      Debug.logError("Exception during building data items to Google, Country Code must be either US, UK or DE: " + countryCode,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToGoogle.invalidCountryCode",locale));
    }
    List<GenericValue> productsList=delegator.findList("Product",EntityCondition.makeCondition("productId",EntityOperator.IN,selectResult),null,null,null,false);
    if (UtilValidate.isEmpty(trackingCodeId) || "_NA_".equals(trackingCodeId)) {
      trackingCodeId="";
    }
 else {
      trackingCodeId="?atc=" + trackingCodeId;
    }
    Document feedDocument=UtilXml.makeEmptyXmlDocument("feed");
    Element feedElem=feedDocument.getDocumentElement();
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns","http://www.w3.org/2005/Atom");
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:gm",googleBaseMetadataUrl);
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:g",googleBaseNSUrl);
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:batch",googleBaseBatchUrl);
    feedElem.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:app",googleBaseAppUrl);
    Iterator<GenericValue> productsListItr=productsList.iterator();
    int index=0;
    String itemActionType=null;
    GenericValue googleProduct;
    while (productsListItr.hasNext()) {
      itemActionType=actionType;
      GenericValue prod=productsListItr.next();
      String price=getProductPrice(dispatcher,prod);
      if (price == null) {
        Debug.logInfo("Price not found for product [" + prod.getString("productId") + "]; product will not be exported.",module);
        continue;
      }
      String link=webSiteUrl + "/" + webSiteMountPoint+ "/control/product/~product_id="+ prod.getString("productId")+ trackingCodeId+ utmSource+ utmMedium+ utmTerm+ utmContent+ utmCampaign;
      String productName=null;
      String productDescription=null;
      List<GenericValue> productAndInfos=delegator.findByAnd("ProductContentAndInfo",UtilMisc.toMap("productId",prod.getString("productId"),"localeString",localeString,"thruDate",null),null,false);
      if (productAndInfos.size() > 0) {
        for (        GenericValue productContentAndInfo : productAndInfos) {
          String dataReSourceId=productContentAndInfo.getString("dataResourceId");
          GenericValue electronicText=EntityQuery.use(delegator).from("ElectronicText").where("dataResourceId",dataReSourceId).queryOne();
          if ("PRODUCT_NAME".equals(productContentAndInfo.getString("productContentTypeId")))           productName=electronicText.getString("textData");
          if ("LONG_DESCRIPTION".equals(productContentAndInfo.getString("productContentTypeId")))           productDescription=electronicText.getString("textData");
        }
      }
 else {
        productName=prod.getString("internalName");
        productDescription=prod.getString("longDescription");
        if (UtilValidate.isEmpty(productDescription)) {
          productDescription=prod.getString("description");
        }
      }
      String title=UtilFormatOut.encodeXmlValue(productName);
      if (UtilValidate.isEmpty(title))       title=UtilFormatOut.encodeXmlValue(prod.getString("productName"));
      if (UtilValidate.isEmpty(title))       title=UtilFormatOut.encodeXmlValue(prod.getString("internalName"));
      String description=UtilFormatOut.encodeXmlValue(productDescription);
      if (UtilValidate.isEmpty(description))       description=UtilFormatOut.encodeXmlValue(prod.getString("description"));
      if (UtilValidate.isEmpty(description))       description=UtilFormatOut.encodeXmlValue(prod.getString("internalName"));
      String imageLink="";
      if (UtilValidate.isNotEmpty(prod.getString("largeImageUrl"))) {
        imageLink=webSiteUrl + prod.getString("largeImageUrl");
      }
 else       if (UtilValidate.isNotEmpty(prod.getString("mediumImageUrl"))) {
        imageLink=webSiteUrl + prod.getString("mediumImageUrl");
      }
 else       if (UtilValidate.isNotEmpty(prod.getString("smallImageUrl"))) {
        imageLink=webSiteUrl + prod.getString("smallImageUrl");
      }
      String googleProductId=null;
      if (!"insert".equals(actionType)) {
        try {
          googleProduct=EntityQuery.use(delegator).from("GoodIdentification").where("productId",prod.getString("productId"),"goodIdentificationTypeId","GOOGLE_ID_" + localeString).queryOne();
          if (UtilValidate.isNotEmpty(googleProduct)) {
            googleProductId=googleProduct.getString("idValue");
          }
        }
 catch (        GenericEntityException gee) {
          Debug.logError("Unable to obtain GoodIdentification entity value of the Google id for product [" + prod.getString("productId") + "]: "+ gee.getMessage(),module);
        }
      }
      if ("update".equals(actionType) && UtilValidate.isEmpty(googleProductId)) {
        itemActionType="insert";
      }
      Element entryElem=UtilXml.addChildElement(feedElem,"entry",feedDocument);
      Element batchElem=UtilXml.addChildElementNSElement(entryElem,"batch:operation",feedDocument,googleBaseBatchUrl);
      Element batchOperationElem=(Element)batchElem.getFirstChild();
      batchOperationElem.setAttribute("type",itemActionType);
      if ("delete".equals(actionType) || "update".equals(actionType)) {
        UtilXml.addChildElementNSValue(entryElem,"id",googleProductId,feedDocument,"");
      }
      Element appControlElem=UtilXml.addChildElementNSElement(entryElem,"app:control",feedDocument,googleBaseAppUrl);
      Element appControlChildElem=(Element)appControlElem.getLastChild();
      UtilXml.addChildElementNSValue(appControlChildElem,"gm:publishing_priority","high",feedDocument,googleBaseMetadataUrl);
      if (statusId != null && ("draft".equals(statusId) || "deactivate".equals(statusId))) {
        UtilXml.addChildElementNSValue(appControlElem,"app:draft","yes",feedDocument,googleBaseAppUrl);
        if ("deactivate".equals(statusId)) {
          UtilXml.addChildElementNSElement(appControlElem,"gm:disapproved",feedDocument,googleBaseMetadataUrl);
        }
      }
      UtilXml.addChildElementValue(entryElem,"title",title,feedDocument);
      Element contentElem=UtilXml.addChildElementValue(entryElem,"content",description,feedDocument);
      contentElem.setAttribute("type","xhtml");
      UtilXml.addChildElementNSValue(entryElem,"g:id",prod.getString("productId"),feedDocument,googleBaseNSUrl);
      Element linkElem=UtilXml.addChildElement(entryElem,"link",feedDocument);
      linkElem.setAttribute("href",link);
      linkElem.setAttribute("rel","self");
      linkElem.setAttribute("type","application/atom+xml");
      UtilXml.addChildElementNSValue(entryElem,"g:item_type","products",feedDocument,googleBaseNSUrl);
      List<GenericValue> productCategoryMembers=delegator.findList("ProductCategoryMember",EntityCondition.makeCondition("productId",EntityOperator.EQUALS,prod.getString("productId")),null,UtilMisc.toList("productCategoryId"),null,false);
      Iterator<GenericValue> productCategoryMembersIter=productCategoryMembers.iterator();
      while (productCategoryMembersIter.hasNext()) {
        GenericValue productCategoryMember=productCategoryMembersIter.next();
        GenericValue productCategory=productCategoryMember.getRelatedOne("ProductCategory",false);
        String productCategoryId=productCategory.getString("productCategoryId");
        String checkCategory=null;
        if ("GB".equals(countryCode)) {
          checkCategory="UK";
        }
 else {
          checkCategory=countryCode;
        }
        if (UtilValidate.isNotEmpty(productCategoryId) && (checkCategory.equals(productCategoryId.substring(0,2)))) {
          String categoryDescription="";
          if (UtilValidate.isNotEmpty(productCategory.getString("categoryName"))) {
            categoryDescription=productCategory.getString("categoryName");
          }
 else           if (UtilValidate.isNotEmpty(productCategory.getString("description"))) {
            categoryDescription=productCategory.getString("description");
          }
 else           if (UtilValidate.isNotEmpty(productCategory.getString("longDescription"))) {
            categoryDescription=productCategory.getString("longDescription");
          }
          if (UtilValidate.isNotEmpty(categoryDescription)) {
            UtilXml.addChildElementNSValue(entryElem,"g:product_type",StringUtil.wrapString(categoryDescription).toString(),feedDocument,googleBaseNSUrl);
          }
        }
      }
      UtilXml.addChildElementNSValue(entryElem,"g:price",price,feedDocument,googleBaseNSUrl);
      UtilXml.addChildElementNSValue(entryElem,"g:target_country",countryCode,feedDocument,googleBaseNSUrl);
      if (UtilValidate.isNotEmpty(prod.getString("brandName"))) {
        UtilXml.addChildElementNSValue(entryElem,"g:brand",prod.getString("brandName"),feedDocument,googleBaseNSUrl);
      }
      try {
        googleProduct=EntityQuery.use(delegator).from("GoodIdentification").where("productId",prod.getString("productId"),"goodIdentificationTypeId","SKU").queryOne();
        if (UtilValidate.isNotEmpty(googleProduct)) {
          UtilXml.addChildElementNSValue(entryElem,"g:ean",googleProduct.getString("idValue"),feedDocument,googleBaseNSUrl);
        }
      }
 catch (      GenericEntityException gee) {
        Debug.logInfo("Unable to get the SKU for product [" + prod.getString("productId") + "]: "+ gee.getMessage(),module);
      }
      String condition=null;
      if ("US".equals(countryCode) || "GB".equals(countryCode)) {
        condition="new";
      }
 else       if ("DE".equals(countryCode)) {
        condition="new";
      }
      UtilXml.addChildElementNSValue(entryElem,"g:condition",condition,feedDocument,googleBaseNSUrl);
      if (UtilValidate.isNotEmpty(imageLink)) {
        UtilXml.addChildElementNSValue(entryElem,"g:image_link",imageLink,feedDocument,googleBaseNSUrl);
      }
      if ("insert".equals(itemActionType)) {
        newProductsInGoogle.add(prod.getString("productId"));
        productsRemovedFromGoogle.add(null);
      }
 else       if ("delete".equals(itemActionType)) {
        newProductsInGoogle.add(null);
        productsRemovedFromGoogle.add(prod.getString("productId"));
      }
 else {
        newProductsInGoogle.add(null);
        productsRemovedFromGoogle.add(null);
      }
      if ("Y".equals(context.get("allowRecommended"))) {
        setRecommendedAttributes(prod,feedDocument,entryElem,delegator,countryCode,productCurrency);
      }
      index++;
    }
    dataItemsXml.append(UtilXml.writeXmlDocument(feedDocument));
  }
 catch (  IOException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"GoogleBaseExportErrorCreatingXmlDocument",locale) + e.getMessage());
  }
catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"GoogleBaseExportUnableToReadFromProduct",locale) + e.toString());
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("newProductsInGoogle",newProductsInGoogle);
  result.put("productsRemovedFromGoogle",productsRemovedFromGoogle);
  result.put("localeString",localeString);
  return result;
}
