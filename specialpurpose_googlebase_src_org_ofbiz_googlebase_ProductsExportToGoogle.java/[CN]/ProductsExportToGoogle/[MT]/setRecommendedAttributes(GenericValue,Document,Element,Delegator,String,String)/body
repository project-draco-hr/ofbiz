{
  if (UtilValidate.isEmpty(product) && UtilValidate.isEmpty(feedDocument) && UtilValidate.isEmpty(countryCode)&& UtilValidate.isNotEmpty(entryElem)) {
    Debug.logError("Required parameters in setRecommended method",module);
  }
  try {
    if (UtilValidate.isNotEmpty(product.getString("brandName"))) {
      UtilXml.addChildElementNSValue(entryElem,"g:brand",product.getString("brandName"),feedDocument,googleBaseNSUrl);
    }
    List<GenericValue> inventoryItems=delegator.findByAnd("InventoryItem",UtilMisc.toMap("productId",product.getString("productId")),null,false);
    if (UtilValidate.isNotEmpty(inventoryItems)) {
      BigDecimal totalquantity=new BigDecimal(0);
      for (      GenericValue inventoryItem : inventoryItems) {
        BigDecimal availableToPromiseTotal=new BigDecimal(inventoryItem.getString("availableToPromiseTotal"));
        totalquantity=totalquantity.add(availableToPromiseTotal);
      }
      if ("DE".equals(countryCode)) {
        UtilXml.addChildElementNSValue(entryElem,"g:menge",totalquantity.toString(),feedDocument,googleBaseNSUrl);
      }
 else {
        Integer intValue=totalquantity.intValue();
        UtilXml.addChildElementNSValue(entryElem,"g:quantity",intValue.toString(),feedDocument,googleBaseNSUrl);
      }
    }
    UtilXml.addChildElementNSValue(entryElem,"g:online_only","y",feedDocument,googleBaseNSUrl);
    if (UtilValidate.isNotEmpty(product.getString("weight")) && UtilValidate.isNotEmpty(product.getString("weightUomId"))) {
      GenericValue uom=delegator.findOne("Uom",UtilMisc.toMap("uomId",product.getString("weightUomId")),false);
      String shippingWeight=product.getString("weight") + " " + uom.getString("description");
      UtilXml.addChildElementNSValue(entryElem,"g:shipping_weight",shippingWeight,feedDocument,googleBaseNSUrl);
    }
    List<GenericValue> productFeatureAndAppls=delegator.findByAnd("ProductFeatureAndAppl",UtilMisc.toMap("productId",product.getString("productId")),null,false);
    if (productFeatureAndAppls.size() > 0) {
      for (      GenericValue productFeatureAndAppl : productFeatureAndAppls) {
        if ("GENRE".equals(productFeatureAndAppl.getString("productFeatureTypeId"))) {
          UtilXml.addChildElementNSValue(entryElem,"g:genre",productFeatureAndAppl.getString("description"),feedDocument,googleBaseNSUrl);
        }
        if ("COLOR".equals(productFeatureAndAppl.getString("productFeatureTypeId"))) {
          UtilXml.addChildElementNSValue(entryElem,"g:color",productFeatureAndAppl.getString("description"),feedDocument,googleBaseNSUrl);
        }
        if ("SIZE".equals(productFeatureAndAppl.getString("productFeatureTypeId"))) {
          UtilXml.addChildElementNSValue(entryElem,"g:size",productFeatureAndAppl.getString("description"),feedDocument,googleBaseNSUrl);
        }
        if ("YEAR_MADE".equals(productFeatureAndAppl.getString("productFeatureTypeId"))) {
          UtilXml.addChildElementNSValue(entryElem,"g:year",productFeatureAndAppl.getString("description"),feedDocument,googleBaseNSUrl);
        }
        if ("ARTIST".equals(productFeatureAndAppl.getString("productFeatureTypeId"))) {
          UtilXml.addChildElementNSValue(entryElem,"g:author",productFeatureAndAppl.getString("description"),feedDocument,googleBaseNSUrl);
        }
        if ("EDITION".equals(productFeatureAndAppl.getString("productFeatureTypeId"))) {
          UtilXml.addChildElementNSValue(entryElem,"g:edition",productFeatureAndAppl.getString("description"),feedDocument,googleBaseNSUrl);
        }
      }
    }
  }
 catch (  Exception e) {
    Debug.logError(e.toString(),module);
  }
}
