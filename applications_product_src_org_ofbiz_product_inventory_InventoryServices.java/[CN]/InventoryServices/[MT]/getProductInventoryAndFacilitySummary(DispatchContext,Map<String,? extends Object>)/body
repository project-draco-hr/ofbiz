{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Timestamp checkTime=(Timestamp)context.get("checkTime");
  String facilityId=(String)context.get("facilityId");
  String productId=(String)context.get("productId");
  String minimumStockStr=(String)context.get("minimumStock");
  String statusId=(String)context.get("statusId");
  Map<String,Object> result=FastMap.newInstance();
  Map<String,Object> resultOutput=FastMap.newInstance();
  Map<String,String> contextInput=UtilMisc.toMap("productId",productId,"facilityId",facilityId,"statusId",statusId);
  GenericValue product=null;
  try {
    product=delegator.findOne("Product",UtilMisc.toMap("productId",productId),false);
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
  }
  if (EntityTypeUtil.hasParentType(delegator,"ProductType","productTypeId",product.getString("productTypeId"),"parentTypeId","MARKETING_PKG")) {
    try {
      resultOutput=dispatcher.runSync("getMktgPackagesAvailable",contextInput);
    }
 catch (    GenericServiceException e) {
      e.printStackTrace();
    }
  }
 else {
    try {
      resultOutput=dispatcher.runSync("getInventoryAvailableByFacility",contextInput);
    }
 catch (    GenericServiceException e) {
      e.printStackTrace();
    }
  }
  BigDecimal minimumStock=BigDecimal.ZERO;
  if (minimumStockStr != null) {
    minimumStock=new BigDecimal(minimumStockStr);
  }
  BigDecimal quantityOnHandTotal=BigDecimal.ZERO;
  if (resultOutput.get("quantityOnHandTotal") != null) {
    quantityOnHandTotal=(BigDecimal)resultOutput.get("quantityOnHandTotal");
  }
  BigDecimal offsetQOHQtyAvailable=quantityOnHandTotal.subtract(minimumStock);
  BigDecimal availableToPromiseTotal=BigDecimal.ZERO;
  if (resultOutput.get("availableToPromiseTotal") != null) {
    availableToPromiseTotal=(BigDecimal)resultOutput.get("availableToPromiseTotal");
  }
  BigDecimal offsetATPQtyAvailable=availableToPromiseTotal.subtract(minimumStock);
  BigDecimal quantityOnOrder=InventoryWorker.getOutstandingPurchasedQuantity(productId,delegator);
  result.put("totalQuantityOnHand",resultOutput.get("quantityOnHandTotal").toString());
  result.put("totalAvailableToPromise",resultOutput.get("availableToPromiseTotal").toString());
  result.put("quantityOnOrder",quantityOnOrder);
  result.put("offsetQOHQtyAvailable",offsetQOHQtyAvailable);
  result.put("offsetATPQtyAvailable",offsetATPQtyAvailable);
  List<GenericValue> productPrices=null;
  try {
    productPrices=delegator.findByAnd("ProductPrice",UtilMisc.toMap("productId",productId),UtilMisc.toList("-fromDate"),true);
  }
 catch (  GenericEntityException e) {
    e.printStackTrace();
  }
  for (  GenericValue onePrice : productPrices) {
    if (onePrice.getString("productPriceTypeId").equals("DEFAULT_PRICE")) {
      result.put("defultPrice",onePrice.getBigDecimal("price"));
    }
 else     if (onePrice.getString("productPriceTypeId").equals("WHOLESALE_PRICE")) {
      result.put("wholeSalePrice",onePrice.getBigDecimal("price"));
    }
 else     if (onePrice.getString("productPriceTypeId").equals("LIST_PRICE")) {
      result.put("listPrice",onePrice.getBigDecimal("price"));
    }
 else {
      result.put("defultPrice",onePrice.getBigDecimal("price"));
      result.put("listPrice",onePrice.getBigDecimal("price"));
      result.put("wholeSalePrice",onePrice.getBigDecimal("price"));
    }
  }
  DynamicViewEntity salesUsageViewEntity=new DynamicViewEntity();
  DynamicViewEntity productionUsageViewEntity=new DynamicViewEntity();
  if (!UtilValidate.isEmpty(checkTime)) {
    salesUsageViewEntity.addMemberEntity("OI","OrderItem");
    salesUsageViewEntity.addMemberEntity("OH","OrderHeader");
    salesUsageViewEntity.addMemberEntity("ItIss","ItemIssuance");
    salesUsageViewEntity.addMemberEntity("InvIt","InventoryItem");
    salesUsageViewEntity.addViewLink("OI","OH",Boolean.valueOf(false),ModelKeyMap.makeKeyMapList("orderId"));
    salesUsageViewEntity.addViewLink("OI","ItIss",Boolean.valueOf(false),ModelKeyMap.makeKeyMapList("orderId","orderId","orderItemSeqId","orderItemSeqId"));
    salesUsageViewEntity.addViewLink("ItIss","InvIt",Boolean.valueOf(false),ModelKeyMap.makeKeyMapList("inventoryItemId"));
    salesUsageViewEntity.addAlias("OI","productId");
    salesUsageViewEntity.addAlias("OH","statusId");
    salesUsageViewEntity.addAlias("OH","orderTypeId");
    salesUsageViewEntity.addAlias("OH","orderDate");
    salesUsageViewEntity.addAlias("ItIss","inventoryItemId");
    salesUsageViewEntity.addAlias("ItIss","quantity");
    salesUsageViewEntity.addAlias("InvIt","facilityId");
    productionUsageViewEntity.addMemberEntity("WEIA","WorkEffortInventoryAssign");
    productionUsageViewEntity.addMemberEntity("WE","WorkEffort");
    productionUsageViewEntity.addMemberEntity("II","InventoryItem");
    productionUsageViewEntity.addViewLink("WEIA","WE",Boolean.valueOf(false),ModelKeyMap.makeKeyMapList("workEffortId"));
    productionUsageViewEntity.addViewLink("WEIA","II",Boolean.valueOf(false),ModelKeyMap.makeKeyMapList("inventoryItemId"));
    productionUsageViewEntity.addAlias("WEIA","quantity");
    productionUsageViewEntity.addAlias("WE","actualCompletionDate");
    productionUsageViewEntity.addAlias("WE","workEffortTypeId");
    productionUsageViewEntity.addAlias("II","facilityId");
    productionUsageViewEntity.addAlias("II","productId");
  }
  if (!UtilValidate.isEmpty(checkTime)) {
    EntityListIterator salesUsageIt=null;
    try {
      salesUsageIt=delegator.findListIteratorByCondition(salesUsageViewEntity,EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("facilityId",EntityOperator.EQUALS,facilityId),EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("statusId",EntityOperator.IN,UtilMisc.toList("ORDER_COMPLETED","ORDER_APPROVED","ORDER_HELD")),EntityCondition.makeCondition("orderTypeId",EntityOperator.EQUALS,"SALES_ORDER"),EntityCondition.makeCondition("orderDate",EntityOperator.GREATER_THAN_EQUAL_TO,checkTime)),EntityOperator.AND),null,null,null,null);
    }
 catch (    GenericEntityException e2) {
      e2.printStackTrace();
    }
    BigDecimal salesUsageQuantity=BigDecimal.ZERO;
    GenericValue salesUsageItem=null;
    while ((salesUsageItem=salesUsageIt.next()) != null) {
      if (salesUsageItem.get("quantity") != null) {
        try {
          salesUsageQuantity=salesUsageQuantity.add(salesUsageItem.getBigDecimal("quantity"));
        }
 catch (        Exception e) {
        }
      }
    }
    try {
      salesUsageIt.close();
    }
 catch (    GenericEntityException e2) {
      e2.printStackTrace();
    }
    EntityListIterator productionUsageIt=null;
    try {
      productionUsageIt=delegator.findListIteratorByCondition(productionUsageViewEntity,EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("facilityId",EntityOperator.EQUALS,facilityId),EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"PROD_ORDER_TASK"),EntityCondition.makeCondition("actualCompletionDate",EntityOperator.GREATER_THAN_EQUAL_TO,checkTime)),EntityOperator.AND),null,null,null,null);
    }
 catch (    GenericEntityException e1) {
      e1.printStackTrace();
    }
    BigDecimal productionUsageQuantity=BigDecimal.ZERO;
    GenericValue productionUsageItem=null;
    while ((productionUsageItem=productionUsageIt.next()) != null) {
      if (productionUsageItem.get("quantity") != null) {
        try {
          productionUsageQuantity=productionUsageQuantity.add(productionUsageItem.getBigDecimal("quantity"));
        }
 catch (        Exception e) {
        }
      }
    }
    try {
      productionUsageIt.close();
    }
 catch (    GenericEntityException e) {
      e.printStackTrace();
    }
    result.put("usageQuantity",salesUsageQuantity.add(productionUsageQuantity));
  }
  return result;
}
