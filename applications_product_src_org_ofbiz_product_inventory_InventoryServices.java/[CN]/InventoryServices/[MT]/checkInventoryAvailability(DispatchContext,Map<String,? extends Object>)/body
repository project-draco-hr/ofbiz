{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Map<String,Map<String,Timestamp>> ordersToUpdate=FastMap.newInstance();
  Map<String,Map<String,Timestamp>> ordersToCancel=FastMap.newInstance();
  List<GenericValue> inventoryItems=null;
  try {
    EntityExpr ee=EntityCondition.makeCondition("availableToPromiseTotal",EntityOperator.LESS_THAN,BigDecimal.ZERO);
    inventoryItems=delegator.findList("InventoryItem",ee,null,null,null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting inventory items",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveInventoryItem",locale));
  }
  if (inventoryItems == null) {
    Debug.logInfo("No items out of stock; no backorders to worry about",module);
    return ServiceUtil.returnSuccess();
  }
  Debug.logInfo("OOS Inventory Items: " + inventoryItems.size(),module);
  for (  GenericValue inventoryItem : inventoryItems) {
    List<GenericValue> shipmentAndItems=null;
    try {
      List<EntityExpr> exprs=FastList.newInstance();
      exprs.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,inventoryItem.get("productId")));
      exprs.add(EntityCondition.makeCondition("destinationFacilityId",EntityOperator.EQUALS,inventoryItem.get("facilityId")));
      exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_DELIVERED"));
      exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_CANCELLED"));
      EntityConditionList<EntityExpr> ecl=EntityCondition.makeCondition(exprs,EntityOperator.AND);
      shipmentAndItems=delegator.findList("ShipmentAndItem",ecl,null,UtilMisc.toList("estimatedArrivalDate"),null,false);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problem getting ShipmentAndItem records",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveShipmentAndItem",locale));
    }
    List<GenericValue> reservations=null;
    try {
      reservations=inventoryItem.getRelated("OrderItemShipGrpInvRes",null,UtilMisc.toList("-reservedDatetime"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problem getting related reservations",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveRelativeReservation",locale));
    }
    if (reservations == null) {
      Debug.logWarning("No outstanding reservations for this inventory item, why is it negative then?",module);
      continue;
    }
    Debug.logInfo("Reservations for item: " + reservations.size(),module);
    BigDecimal availableBeforeReserved=inventoryItem.getBigDecimal("availableToPromiseTotal");
    for (    GenericValue reservation : reservations) {
      String orderId=reservation.getString("orderId");
      String orderItemSeqId=reservation.getString("orderItemSeqId");
      Timestamp promisedDate=reservation.getTimestamp("promisedDatetime");
      Timestamp currentPromiseDate=reservation.getTimestamp("currentPromisedDate");
      Timestamp actualPromiseDate=currentPromiseDate;
      if (actualPromiseDate == null) {
        if (promisedDate != null) {
          actualPromiseDate=promisedDate;
        }
 else {
          actualPromiseDate=reservation.getTimestamp("reservedDatetime");
        }
      }
      Debug.logInfo("Promised Date: " + actualPromiseDate,module);
      Timestamp nextShipDate=null;
      BigDecimal availableAtTime=BigDecimal.ZERO;
      for (      GenericValue shipmentItem : shipmentAndItems) {
        availableAtTime=availableAtTime.add(shipmentItem.getBigDecimal("quantity"));
        if (availableAtTime.compareTo(availableBeforeReserved) >= 0) {
          nextShipDate=shipmentItem.getTimestamp("estimatedArrivalDate");
          break;
        }
      }
      Debug.logInfo("Next Ship Date: " + nextShipDate,module);
      Calendar pCal=Calendar.getInstance();
      pCal.setTimeInMillis(actualPromiseDate.getTime());
      pCal.add(Calendar.DAY_OF_YEAR,-1);
      Timestamp modifiedPromisedDate=new Timestamp(pCal.getTimeInMillis());
      Timestamp now=UtilDateTime.nowTimestamp();
      Debug.logInfo("Promised Date + 1: " + modifiedPromisedDate,module);
      Debug.logInfo("Now: " + now,module);
      if (nextShipDate == null || nextShipDate.after(actualPromiseDate)) {
        if (nextShipDate == null && modifiedPromisedDate.after(now)) {
          Debug.logInfo("No ship date known yet, but promised date hasn't approached, assuming it will be here on time",module);
        }
 else {
          Debug.logInfo("We won't ship on time, getting notification info",module);
          Map<String,Timestamp> notifyItems=ordersToUpdate.get(orderId);
          if (notifyItems == null) {
            notifyItems=FastMap.newInstance();
          }
          notifyItems.put(orderItemSeqId,nextShipDate);
          ordersToUpdate.put(orderId,notifyItems);
          Calendar sCal=Calendar.getInstance();
          sCal.setTimeInMillis(actualPromiseDate.getTime());
          sCal.add(Calendar.DAY_OF_YEAR,30);
          Timestamp farPastPromised=new Timestamp(sCal.getTimeInMillis());
          boolean needToCancel=false;
          if (nextShipDate == null || nextShipDate.after(farPastPromised)) {
            Debug.logInfo("Ship date is >30 past the promised date",module);
            needToCancel=true;
          }
 else           if (currentPromiseDate != null && actualPromiseDate.equals(currentPromiseDate)) {
            needToCancel=true;
          }
          if (needToCancel) {
            Debug.logInfo("Flagging the item to auto-cancel",module);
            Map<String,Timestamp> cancelItems=ordersToCancel.get(orderId);
            if (cancelItems == null) {
              cancelItems=FastMap.newInstance();
            }
            cancelItems.put(orderItemSeqId,farPastPromised);
            ordersToCancel.put(orderId,cancelItems);
          }
          try {
            reservation.set("currentPromisedDate",nextShipDate);
            reservation.store();
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"Problem storing reservation : " + reservation,module);
          }
        }
      }
      availableBeforeReserved=availableBeforeReserved.subtract(reservation.getBigDecimal("quantity"));
    }
  }
  List<String> ordersToNotify=FastList.newInstance();
  for (  Map.Entry<String,Map<String,Timestamp>> entry : ordersToUpdate.entrySet()) {
    String orderId=entry.getKey();
    Map<String,Timestamp> backOrderedItems=entry.getValue();
    Map<String,Timestamp> cancelItems=ordersToCancel.get(orderId);
    boolean cancelAll=false;
    Timestamp cancelAllTime=null;
    List<GenericValue> orderItemShipGroups=null;
    try {
      orderItemShipGroups=delegator.findByAnd("OrderItemShipGroup",UtilMisc.toMap("orderId",orderId),null,false);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Cannot get OrderItemShipGroups from orderId" + orderId,module);
    }
    for (    GenericValue orderItemShipGroup : orderItemShipGroups) {
      List<GenericValue> orderItems=FastList.newInstance();
      List<GenericValue> orderItemShipGroupAssoc=null;
      try {
        orderItemShipGroupAssoc=delegator.findByAnd("OrderItemShipGroupAssoc",UtilMisc.toMap("shipGroupSeqId",orderItemShipGroup.get("shipGroupSeqId"),"orderId",orderId),null,false);
        for (        GenericValue assoc : orderItemShipGroupAssoc) {
          GenericValue orderItem=assoc.getRelatedOne("OrderItem",false);
          if (orderItem != null) {
            orderItems.add(orderItem);
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problem fetching OrderItemShipGroupAssoc",module);
      }
      boolean maySplit=false;
      if (orderItemShipGroup != null && orderItemShipGroup.get("maySplit") != null) {
        maySplit=orderItemShipGroup.getBoolean("maySplit").booleanValue();
      }
      if (!maySplit && cancelItems != null) {
        cancelAll=true;
        Set<String> cancelSet=cancelItems.keySet();
        cancelAllTime=cancelItems.get(cancelSet.iterator().next());
      }
      if (cancelItems == null) {
        cancelItems=FastMap.newInstance();
      }
      if (orderItems != null) {
        List<GenericValue> toBeStored=FastList.newInstance();
        for (        GenericValue orderItem : orderItems) {
          String orderItemSeqId=orderItem.getString("orderItemSeqId");
          Timestamp shipDate=backOrderedItems.get(orderItemSeqId);
          Timestamp cancelDate=cancelItems.get(orderItemSeqId);
          Timestamp currentCancelDate=orderItem.getTimestamp("autoCancelDate");
          Debug.logInfo("OI: " + orderId + " SEQID: "+ orderItemSeqId+ " cancelAll: "+ cancelAll+ " cancelDate: "+ cancelDate,module);
          if (backOrderedItems.containsKey(orderItemSeqId)) {
            orderItem.set("estimatedShipDate",shipDate);
            if (currentCancelDate == null) {
              if (cancelAll || cancelDate != null) {
                if (orderItem.get("dontCancelSetUserLogin") == null && orderItem.get("dontCancelSetDate") == null) {
                  if (cancelAllTime != null) {
                    orderItem.set("autoCancelDate",cancelAllTime);
                  }
 else {
                    orderItem.set("autoCancelDate",cancelDate);
                  }
                }
              }
              ordersToNotify.add(orderId);
            }
            toBeStored.add(orderItem);
          }
        }
        if (toBeStored.size() > 0) {
          try {
            delegator.storeAll(toBeStored);
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"Problem storing order items",module);
          }
        }
      }
    }
  }
  for (  String orderId : ordersToNotify) {
    try {
      dispatcher.runAsync("sendOrderBackorderNotification",UtilMisc.<String,Object>toMap("orderId",orderId,"userLogin",userLogin));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problems sending off the notification",module);
      continue;
    }
  }
  return ServiceUtil.returnSuccess();
}
