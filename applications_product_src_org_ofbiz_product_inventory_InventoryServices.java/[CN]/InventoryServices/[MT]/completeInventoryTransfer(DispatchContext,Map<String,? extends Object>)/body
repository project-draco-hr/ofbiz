{
  Delegator delegator=dctx.getDelegator();
  String inventoryTransferId=(String)context.get("inventoryTransferId");
  GenericValue inventoryTransfer=null;
  GenericValue inventoryItem=null;
  GenericValue destinationFacility=null;
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  try {
    inventoryTransfer=delegator.findByPrimaryKey("InventoryTransfer",UtilMisc.toMap("inventoryTransferId",inventoryTransferId));
    inventoryItem=inventoryTransfer.getRelatedOne("InventoryItem");
    destinationFacility=inventoryTransfer.getRelatedOne("ToFacility");
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Inventory Item/Transfer lookup problem [" + e.getMessage() + "]");
  }
  if (inventoryTransfer == null || inventoryItem == null) {
    return ServiceUtil.returnError("ERROR: Lookup of InventoryTransfer and/or InventoryItem failed!");
  }
  String inventoryType=inventoryItem.getString("inventoryItemTypeId");
  if (inventoryTransfer.get("receiveDate") == null) {
    inventoryTransfer.set("receiveDate",UtilDateTime.nowTimestamp());
  }
  if (inventoryType.equals("NON_SERIAL_INV_ITEM")) {
    BigDecimal atp=inventoryItem.get("availableToPromiseTotal") == null ? BigDecimal.ZERO : inventoryItem.getBigDecimal("availableToPromiseTotal");
    BigDecimal qoh=inventoryItem.get("quantityOnHandTotal") == null ? BigDecimal.ZERO : inventoryItem.getBigDecimal("quantityOnHandTotal");
    Map<String,Object> createDetailMap=UtilMisc.toMap("availableToPromiseDiff",qoh.subtract(atp),"inventoryItemId",inventoryItem.get("inventoryItemId"),"userLogin",userLogin);
    try {
      Map<String,Object> result=dctx.getDispatcher().runSync("createInventoryItemDetail",createDetailMap);
      if (ServiceUtil.isError(result)) {
        return ServiceUtil.returnError("Inventory Item Detail create problem in complete inventory transfer",null,null,result);
      }
    }
 catch (    GenericServiceException e1) {
      return ServiceUtil.returnError("Inventory Item Detail create problem in complete inventory transfer: [" + e1.getMessage() + "]");
    }
    try {
      inventoryItem.refresh();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError("Inventory refresh problem [" + e.getMessage() + "]");
    }
  }
  Map<String,Object> updateInventoryItemMap=UtilMisc.toMap("inventoryItemId",inventoryItem.getString("inventoryItemId"),"facilityId",inventoryTransfer.get("facilityIdTo"),"containerId",inventoryTransfer.get("containerIdTo"),"locationSeqId",inventoryTransfer.get("locationSeqIdTo"),"userLogin",userLogin);
  if (inventoryType.equals("SERIALIZED_INV_ITEM")) {
    updateInventoryItemMap.put("statusId","INV_AVAILABLE");
  }
  if (destinationFacility != null && destinationFacility.get("ownerPartyId") != null) {
    String fromPartyId=inventoryItem.getString("ownerPartyId");
    String toPartyId=destinationFacility.getString("ownerPartyId");
    if (fromPartyId == null || !fromPartyId.equals(toPartyId)) {
      updateInventoryItemMap.put("ownerPartyId",toPartyId);
    }
  }
  try {
    Map<String,Object> result=dctx.getDispatcher().runSync("updateInventoryItem",updateInventoryItemMap);
    if (ServiceUtil.isError(result)) {
      return ServiceUtil.returnError("Inventory item store problem",null,null,result);
    }
  }
 catch (  GenericServiceException exc) {
    return ServiceUtil.returnError("Inventory item store problem [" + exc.getMessage() + "]");
  }
  inventoryTransfer.set("statusId","IXF_COMPLETE");
  try {
    inventoryTransfer.store();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Inventory store problem [" + e.getMessage() + "]");
  }
  return ServiceUtil.returnSuccess();
}
