{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  List<GenericValue> orderItems=UtilGenerics.checkList(context.get("orderItems"));
  String facilityId=(String)context.get("facilityId");
  Locale locale=(Locale)context.get("");
  Map<String,BigDecimal> atpMap=FastMap.newInstance();
  Map<String,BigDecimal> qohMap=FastMap.newInstance();
  Map<String,BigDecimal> mktgPkgAtpMap=FastMap.newInstance();
  Map<String,BigDecimal> mktgPkgQohMap=FastMap.newInstance();
  Map<String,Object> results=ServiceUtil.returnSuccess();
  List<GenericValue> facilities=null;
  try {
    if (facilityId != null) {
      facilities=EntityQuery.use(delegator).from("Facility").where("facilityId",facilityId).queryList();
    }
 else {
      facilities=EntityQuery.use(delegator).from("Facility").queryList();
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductErrorFacilityIdNotFound",UtilMisc.toMap("facilityId",facilityId),locale));
  }
  for (  GenericValue orderItem : orderItems) {
    String productId=orderItem.getString("productId");
    if ((productId == null) || productId.equals(""))     continue;
    GenericValue product=null;
    try {
      product=orderItem.getRelatedOne("Product",true);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Couldn't get product.",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductNotFound",locale) + productId);
    }
    BigDecimal atp=BigDecimal.ZERO;
    BigDecimal qoh=BigDecimal.ZERO;
    BigDecimal mktgPkgAtp=BigDecimal.ZERO;
    BigDecimal mktgPkgQoh=BigDecimal.ZERO;
    for (    GenericValue facility : facilities) {
      Map<String,Object> invResult=null;
      Map<String,Object> mktgPkgInvResult=null;
      try {
        if (EntityTypeUtil.hasParentType(delegator,"ProductType","productTypeId",product.getString("productTypeId"),"parentTypeId","MARKETING_PKG")) {
          mktgPkgInvResult=dispatcher.runSync("getMktgPackagesAvailable",UtilMisc.toMap("productId",productId,"facilityId",facility.getString("facilityId")));
        }
        invResult=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",facility.getString("facilityId")));
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Could not find inventory for facility " + facility.getString("facilityId"),module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryNotAvailableForFacility",UtilMisc.toMap("facilityId",facility.getString("facilityId")),locale));
      }
      if (!ServiceUtil.isError(invResult)) {
        BigDecimal fatp=(BigDecimal)invResult.get("availableToPromiseTotal");
        BigDecimal fqoh=(BigDecimal)invResult.get("quantityOnHandTotal");
        if (fatp != null)         atp=atp.add(fatp);
        if (fqoh != null)         qoh=qoh.add(fqoh);
      }
      if (EntityTypeUtil.hasParentType(delegator,"ProductType","productTypeId",product.getString("productTypeId"),"parentTypeId","MARKETING_PKG") && !ServiceUtil.isError(mktgPkgInvResult)) {
        BigDecimal fatp=(BigDecimal)mktgPkgInvResult.get("availableToPromiseTotal");
        BigDecimal fqoh=(BigDecimal)mktgPkgInvResult.get("quantityOnHandTotal");
        if (fatp != null)         mktgPkgAtp=mktgPkgAtp.add(fatp);
        if (fqoh != null)         mktgPkgQoh=mktgPkgQoh.add(fqoh);
      }
    }
    atpMap.put(productId,atp);
    qohMap.put(productId,qoh);
    mktgPkgAtpMap.put(productId,mktgPkgAtp);
    mktgPkgQohMap.put(productId,mktgPkgQoh);
  }
  results.put("availableToPromiseMap",atpMap);
  results.put("quantityOnHandMap",qohMap);
  results.put("mktgPkgATPMap",mktgPkgAtpMap);
  results.put("mktgPkgQOHMap",mktgPkgQohMap);
  return results;
}
