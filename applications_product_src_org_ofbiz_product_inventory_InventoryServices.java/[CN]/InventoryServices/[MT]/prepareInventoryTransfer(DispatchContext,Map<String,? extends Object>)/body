{
  Delegator delegator=dctx.getDelegator();
  String inventoryItemId=(String)context.get("inventoryItemId");
  BigDecimal xferQty=(BigDecimal)context.get("xferQty");
  GenericValue inventoryItem=null;
  GenericValue newItem=null;
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  try {
    inventoryItem=delegator.findByPrimaryKey("InventoryItem",UtilMisc.toMap("inventoryItemId",inventoryItemId));
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductNotFindInventoryItemWithId",locale) + inventoryItemId);
  }
  if (inventoryItem == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductNotFindInventoryItemWithId",locale) + inventoryItemId);
  }
  try {
    Map<String,Object> results=ServiceUtil.returnSuccess();
    String inventoryType=inventoryItem.getString("inventoryItemTypeId");
    if (inventoryType.equals("NON_SERIAL_INV_ITEM")) {
      BigDecimal atp=inventoryItem.getBigDecimal("availableToPromiseTotal");
      BigDecimal qoh=inventoryItem.getBigDecimal("quantityOnHandTotal");
      if (atp == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemATPNotAvailable",UtilMisc.toMap("inventoryItemId",inventoryItem.getString("inventoryItemId")),locale));
      }
      if (qoh == null) {
        qoh=atp;
      }
      if (xferQty.compareTo(atp) > 0) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemATPIsNotSufficient",UtilMisc.toMap("inventoryItemId",inventoryItem.getString("inventoryItemId"),"atp",atp,"xferQty",xferQty),locale));
      }
      if (xferQty.compareTo(atp) < 0 || atp.compareTo(qoh) < 0) {
        BigDecimal negXferQty=xferQty.negate();
        newItem=GenericValue.create(inventoryItem);
        newItem.set("availableToPromiseTotal",BigDecimal.ZERO);
        newItem.set("quantityOnHandTotal",BigDecimal.ZERO);
        delegator.createSetNextSeqId(newItem);
        results.put("inventoryItemId",newItem.get("inventoryItemId"));
        Map<String,Object> createNewDetailMap=UtilMisc.toMap("availableToPromiseDiff",xferQty,"quantityOnHandDiff",xferQty,"inventoryItemId",newItem.get("inventoryItemId"),"userLogin",userLogin);
        Map<String,Object> createUpdateDetailMap=UtilMisc.toMap("availableToPromiseDiff",negXferQty,"quantityOnHandDiff",negXferQty,"inventoryItemId",inventoryItem.get("inventoryItemId"),"userLogin",userLogin);
        try {
          Map<String,Object> resultNew=dctx.getDispatcher().runSync("createInventoryItemDetail",createNewDetailMap);
          if (ServiceUtil.isError(resultNew)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemDetailCreateProblem",UtilMisc.toMap("errorString",""),locale),null,null,resultNew);
          }
          Map<String,Object> resultUpdate=dctx.getDispatcher().runSync("createInventoryItemDetail",createUpdateDetailMap);
          if (ServiceUtil.isError(resultUpdate)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemDetailCreateProblem",UtilMisc.toMap("errorString",""),locale),null,null,resultUpdate);
          }
        }
 catch (        GenericServiceException e1) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemDetailCreateProblem",UtilMisc.toMap("errorString",e1.getMessage()),locale));
        }
      }
 else {
        results.put("inventoryItemId",inventoryItem.get("inventoryItemId"));
      }
    }
 else     if (inventoryType.equals("SERIALIZED_INV_ITEM")) {
      if (!"INV_AVAILABLE".equals(inventoryItem.getString("statusId"))) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductSerializedInventoryNotAvailable",locale));
      }
    }
    if (inventoryType.equals("NON_SERIAL_INV_ITEM")) {
      GenericValue inventoryItemToClear=newItem == null ? inventoryItem : newItem;
      inventoryItemToClear.refresh();
      BigDecimal atp=inventoryItemToClear.get("availableToPromiseTotal") == null ? BigDecimal.ZERO : inventoryItemToClear.getBigDecimal("availableToPromiseTotal");
      if (atp.compareTo(BigDecimal.ZERO) != 0) {
        Map<String,Object> createDetailMap=UtilMisc.toMap("availableToPromiseDiff",atp.negate(),"inventoryItemId",inventoryItemToClear.get("inventoryItemId"),"userLogin",userLogin);
        try {
          Map<String,Object> result=dctx.getDispatcher().runSync("createInventoryItemDetail",createDetailMap);
          if (ServiceUtil.isError(result)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemDetailCreateProblem",UtilMisc.toMap("errorString",""),locale),null,null,result);
          }
        }
 catch (        GenericServiceException e1) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemDetailCreateProblem",UtilMisc.toMap("errorString",e1.getMessage()),locale));
        }
      }
    }
 else     if (inventoryType.equals("SERIALIZED_INV_ITEM")) {
      if (newItem != null) {
        newItem.refresh();
        newItem.set("statusId","INV_BEING_TRANSFERED");
        newItem.store();
        results.put("inventoryItemId",newItem.get("inventoryItemId"));
      }
 else {
        inventoryItem.refresh();
        inventoryItem.set("statusId","INV_BEING_TRANSFERED");
        inventoryItem.store();
        results.put("inventoryItemId",inventoryItem.get("inventoryItemId"));
      }
    }
    return results;
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemStoreProblem",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
}
