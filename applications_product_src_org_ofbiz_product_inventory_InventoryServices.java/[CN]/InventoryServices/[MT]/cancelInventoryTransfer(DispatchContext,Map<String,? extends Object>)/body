{
  Delegator delegator=dctx.getDelegator();
  String inventoryTransferId=(String)context.get("inventoryTransferId");
  GenericValue inventoryTransfer=null;
  GenericValue inventoryItem=null;
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  try {
    inventoryTransfer=delegator.findOne("InventoryTransfer",UtilMisc.toMap("inventoryTransferId",inventoryTransferId),false);
    if (UtilValidate.isEmpty(inventoryTransfer)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemTransferNotFound",UtilMisc.toMap("inventoryTransferId",inventoryTransferId),locale));
    }
    inventoryItem=inventoryTransfer.getRelatedOne("InventoryItem");
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemLookupProblem",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  if (inventoryTransfer == null || inventoryItem == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemLookupProblem",UtilMisc.toMap("errorString",""),locale));
  }
  String inventoryType=inventoryItem.getString("inventoryItemTypeId");
  if (inventoryType.equals("NON_SERIAL_INV_ITEM")) {
    BigDecimal atp=inventoryItem.get("availableToPromiseTotal") == null ? BigDecimal.ZERO : inventoryItem.getBigDecimal("availableToPromiseTotal");
    BigDecimal qoh=inventoryItem.get("quantityOnHandTotal") == null ? BigDecimal.ZERO : inventoryItem.getBigDecimal("quantityOnHandTotal");
    Map<String,Object> createDetailMap=UtilMisc.toMap("availableToPromiseDiff",qoh.subtract(atp),"inventoryItemId",inventoryItem.get("inventoryItemId"),"userLogin",userLogin);
    try {
      Map<String,Object> result=dctx.getDispatcher().runSync("createInventoryItemDetail",createDetailMap);
      if (ServiceUtil.isError(result)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemDetailCreateProblem",UtilMisc.toMap("errorString",""),locale),null,null,result);
      }
    }
 catch (    GenericServiceException e1) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemDetailCreateProblem",UtilMisc.toMap("errorString",e1.getMessage()),locale));
    }
  }
 else   if (inventoryType.equals("SERIALIZED_INV_ITEM")) {
    inventoryItem.set("statusId","INV_AVAILABLE");
    try {
      inventoryItem.store();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemStoreProblem",UtilMisc.toMap("errorString",e.getMessage()),locale));
    }
  }
  inventoryTransfer.set("statusId","IXF_CANCELLED");
  try {
    inventoryTransfer.store();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductInventoryItemStoreProblem",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  return ServiceUtil.returnSuccess();
}
