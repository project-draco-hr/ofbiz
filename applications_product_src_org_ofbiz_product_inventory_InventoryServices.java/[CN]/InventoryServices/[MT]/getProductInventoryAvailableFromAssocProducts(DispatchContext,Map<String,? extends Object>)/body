{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  List<GenericValue> productAssocList=UtilGenerics.checkList(context.get("assocProducts"));
  String facilityId=(String)context.get("facilityId");
  String statusId=(String)context.get("statusId");
  BigDecimal availableToPromiseTotal=BigDecimal.ZERO;
  BigDecimal quantityOnHandTotal=BigDecimal.ZERO;
  if (UtilValidate.isNotEmpty(productAssocList)) {
    BigDecimal minQuantityOnHandTotal=null;
    BigDecimal minAvailableToPromiseTotal=null;
    for (    GenericValue productAssoc : productAssocList) {
      String productIdTo=productAssoc.getString("productIdTo");
      BigDecimal assocQuantity=productAssoc.getBigDecimal("quantity");
      if (assocQuantity == null) {
        Debug.logWarning("ProductAssoc from [" + productAssoc.getString("productId") + "] to ["+ productAssoc.getString("productIdTo")+ "] has no quantity, assuming 1.0",module);
        assocQuantity=BigDecimal.ONE;
      }
      Map<String,Object> resultOutput=null;
      try {
        Map<String,String> inputMap=UtilMisc.toMap("productId",productIdTo,"statusId",statusId);
        if (facilityId != null) {
          inputMap.put("facilityId",facilityId);
          resultOutput=dispatcher.runSync("getInventoryAvailableByFacility",inputMap);
        }
 else {
          resultOutput=dispatcher.runSync("getProductInventoryAvailable",inputMap);
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problems getting inventory available by facility",module);
        return ServiceUtil.returnError(e.getMessage());
      }
      BigDecimal currentQuantityOnHandTotal=(BigDecimal)resultOutput.get("quantityOnHandTotal");
      BigDecimal currentAvailableToPromiseTotal=(BigDecimal)resultOutput.get("availableToPromiseTotal");
      BigDecimal tmpQuantityOnHandTotal=currentQuantityOnHandTotal.divide(assocQuantity,generalRounding);
      BigDecimal tmpAvailableToPromiseTotal=currentAvailableToPromiseTotal.divide(assocQuantity,generalRounding);
      if (minQuantityOnHandTotal == null || tmpQuantityOnHandTotal.compareTo(minQuantityOnHandTotal) < 0) {
        minQuantityOnHandTotal=tmpQuantityOnHandTotal;
      }
      if (minAvailableToPromiseTotal == null || tmpAvailableToPromiseTotal.compareTo(minAvailableToPromiseTotal) < 0) {
        minAvailableToPromiseTotal=tmpAvailableToPromiseTotal;
      }
      if (Debug.verboseOn()) {
        Debug.logVerbose("productIdTo = " + productIdTo + " assocQuantity = "+ assocQuantity+ "current QOH "+ currentQuantityOnHandTotal+ "currentATP = "+ currentAvailableToPromiseTotal+ " minQOH = "+ minQuantityOnHandTotal+ " minATP = "+ minAvailableToPromiseTotal,module);
      }
    }
    quantityOnHandTotal=minQuantityOnHandTotal;
    availableToPromiseTotal=minAvailableToPromiseTotal;
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("availableToPromiseTotal",availableToPromiseTotal);
  result.put("quantityOnHandTotal",quantityOnHandTotal);
  return result;
}
