{
  String expression=new String(chars,0,length + offset);
  int start=expression.indexOf(openBracket,offset);
  if (start == -1) {
    return new FlexibleStringExpander[]{new ConstOffsetElem(chars,offset,length)};
  }
  int origLen=length;
  ArrayList<FlexibleStringExpander> strElems=new ArrayList<FlexibleStringExpander>();
  int currentInd=offset;
  int end=-1;
  while (start != -1) {
    end=expression.indexOf(closeBracket,start);
    if (end == -1) {
      Debug.logWarning("Found a ${ without a closing } (curly-brace) in the String: " + expression,module);
      break;
    }
    boolean escapedExpression=(start - 1 >= 0 && expression.charAt(start - 1) == '\\');
    if (start > currentInd) {
      strElems.add(new ConstOffsetElem(chars,currentInd,(escapedExpression ? start - 1 : start) - currentInd));
    }
    if (expression.indexOf("bsh:",start + 2) == start + 2 && !escapedExpression) {
      strElems.add(new BshElem(chars,start,Math.min(end + 1,start + length) - start,start + 6,end - start - 6));
    }
 else     if (expression.indexOf("groovy:",start + 2) == start + 2 && !escapedExpression) {
      strElems.add(new GroovyElem(chars,start,Math.min(end + 1,start + length) - start,start + 9,end - start - 9));
    }
 else {
      int ptr=expression.indexOf(openBracket,start + 2);
      while (ptr != -1 && end != -1 && ptr < end) {
        end=expression.indexOf(closeBracket,end + 1);
        ptr=expression.indexOf(openBracket,ptr + 2);
      }
      if (end == -1) {
        end=origLen;
      }
      if (escapedExpression) {
        strElems.add(new ConstOffsetElem(chars,start,end + 1 - start));
      }
 else {
        String subExpression=expression.substring(start + 2,end);
        int currencyPos=subExpression.indexOf("?currency(");
        int closeParen=currencyPos > 0 ? subExpression.indexOf(")",currencyPos + 10) : -1;
        if (closeParen != -1) {
          strElems.add(new CurrElem(chars,start,Math.min(end + 1,start + length) - start,start + 2,end - start - 1));
        }
 else         if (subExpression.contains(openBracket)) {
          strElems.add(new NestedVarElem(chars,start,Math.min(end + 1,start + length) - start,start + 2,Math.min(end - 2,start + length) - start));
        }
 else {
          strElems.add(new VarElem(chars,start,Math.min(end + 1,start + length) - start,start + 2,Math.min(end - 2,start + length) - start));
        }
      }
    }
    currentInd=end + 1;
    if (currentInd > origLen + offset) {
      currentInd=origLen + offset;
    }
    start=expression.indexOf(openBracket,currentInd);
  }
  if (currentInd < origLen + offset) {
    strElems.add(new ConstOffsetElem(chars,currentInd,offset + length - currentInd));
  }
  return strElems.toArray(new FlexibleStringExpander[strElems.size()]);
}
