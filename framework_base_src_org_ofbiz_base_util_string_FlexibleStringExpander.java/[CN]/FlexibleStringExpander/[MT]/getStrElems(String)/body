{
  if (original == null || original.length() == 0) {
    return null;
  }
  int origLen=original.length();
  ArrayList<StrElem> strElems=new ArrayList<StrElem>();
  int start=original.indexOf("${");
  if (start == -1) {
    strElems.add(new ConstElem(original));
    strElems.trimToSize();
    return strElems;
  }
  int currentInd=0;
  int end=-1;
  while (start != -1) {
    end=original.indexOf("}",start);
    if (end == -1) {
      Debug.logWarning("Found a ${ without a closing } (curly-brace) in the String: " + original,module);
      break;
    }
    if (start > currentInd) {
      strElems.add(new ConstElem(original.substring(currentInd,start)));
    }
    if (original.indexOf("bsh:",start + 2) == start + 2) {
      strElems.add(new BshElem(original.substring(start + 6,end)));
    }
 else {
      int ptr=original.indexOf("${",start + 2);
      while (ptr != -1 && end != -1 && ptr < end) {
        end=original.indexOf("}",end + 1);
        ptr=original.indexOf("${",ptr + 2);
      }
      if (end == -1) {
        end=origLen;
      }
      String expression=original.substring(start + 2,end);
      if (expression.contains("?currency(")) {
        strElems.add(new CurrElem(expression));
      }
 else       if (expression.contains("${")) {
        strElems.add(new NestedVarElem(expression));
      }
 else {
        strElems.add(new VarElem(expression));
      }
    }
    currentInd=end + 1;
    if (currentInd > origLen) {
      currentInd=origLen;
    }
    start=original.indexOf("${",currentInd);
  }
  if (currentInd < origLen) {
    strElems.add(new ConstElem(original.substring(currentInd)));
  }
  strElems.trimToSize();
  return strElems;
}
