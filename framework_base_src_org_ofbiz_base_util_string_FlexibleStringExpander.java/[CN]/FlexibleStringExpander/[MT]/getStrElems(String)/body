{
  if (UtilValidate.isEmpty(expression)) {
    return null;
  }
  int origLen=expression.length();
  ArrayList<FlexibleStringExpander> strElems=new ArrayList<FlexibleStringExpander>();
  int start=expression.indexOf(openBracket);
  if (start == -1) {
    strElems.add(new ConstElem(expression));
    strElems.trimToSize();
    return strElems.toArray(new FlexibleStringExpander[strElems.size()]);
  }
  int currentInd=0;
  int end=-1;
  while (start != -1) {
    end=expression.indexOf(closeBracket,start);
    if (end == -1) {
      Debug.logWarning("Found a ${ without a closing } (curly-brace) in the String: " + expression,module);
      break;
    }
    boolean escapedExpression=(start - 1 >= 0 && expression.charAt(start - 1) == '\\');
    if (start > currentInd) {
      strElems.add(new ConstElem(expression.substring(currentInd,escapedExpression ? start - 1 : start)));
    }
    if (expression.indexOf("bsh:",start + 2) == start + 2 && !escapedExpression) {
      strElems.add(new BshElem(expression.substring(start + 6,end)));
    }
 else     if (expression.indexOf("groovy:",start + 2) == start + 2 && !escapedExpression) {
      strElems.add(new GroovyElem(expression.substring(start + 9,end)));
    }
 else {
      int ptr=expression.indexOf(openBracket,start + 2);
      while (ptr != -1 && end != -1 && ptr < end) {
        end=expression.indexOf(closeBracket,end + 1);
        ptr=expression.indexOf(openBracket,ptr + 2);
      }
      if (end == -1) {
        end=origLen;
      }
      String subExpression=expression.substring(start + 2,end);
      if (escapedExpression) {
        strElems.add(new ConstElem(expression.substring(start,end + 1)));
      }
 else       if (subExpression.contains("?currency(")) {
        strElems.add(new CurrElem(subExpression));
      }
 else       if (subExpression.contains(openBracket)) {
        strElems.add(new NestedVarElem(subExpression));
      }
 else {
        strElems.add(new VarElem(subExpression));
      }
    }
    currentInd=end + 1;
    if (currentInd > origLen) {
      currentInd=origLen;
    }
    start=expression.indexOf(openBracket,currentInd);
  }
  if (currentInd < origLen) {
    strElems.add(new ConstElem(expression.substring(currentInd)));
  }
  return strElems.toArray(new FlexibleStringExpander[strElems.size()]);
}
