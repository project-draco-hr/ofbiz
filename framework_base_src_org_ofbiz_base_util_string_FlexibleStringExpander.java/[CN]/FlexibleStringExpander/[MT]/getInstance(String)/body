{
  if (UtilValidate.isEmpty(expression)) {
    return nullExpr;
  }
  if (!expression.contains(openBracket)) {
    return new ConstElem(expression);
  }
  FlexibleStringExpander fse=exprCache.get(expression);
  if (fse == null) {
synchronized (exprCache) {
      FlexibleStringExpander[] strElems=getStrElems(expression);
      if (strElems.length == 1) {
        fse=strElems[0];
      }
 else {
        fse=new Elements(expression,strElems);
      }
      exprCache.put(expression,fse);
    }
  }
  return fse;
}
