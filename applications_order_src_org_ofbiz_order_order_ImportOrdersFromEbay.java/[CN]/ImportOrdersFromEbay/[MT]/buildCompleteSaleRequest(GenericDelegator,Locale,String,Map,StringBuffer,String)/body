{
  String paid=(String)context.get("paid");
  String shipped=(String)context.get("shipped");
  try {
    Map result=buildItemAndTransactionIdFromExternalId(externalId);
    String itemId=(String)result.get("itemId");
    String transactionId=(String)result.get("transactionId");
    if (itemId == null || transactionId == null) {
      Debug.logError("Cannot be retrieve itemId and transactionId from externalId",module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.errorDuringBuildItemAndTransactionIdFromExternalId",locale));
    }
    Document transDoc=UtilXml.makeEmptyXmlDocument("CompleteSaleRequest");
    Element transElem=transDoc.getDocumentElement();
    transElem.setAttribute("xmlns","urn:ebay:apis:eBLBaseComponents");
    appendRequesterCredentials(transElem,transDoc,token);
    UtilXml.addChildElementValue(transElem,"ItemID",itemId,transDoc);
    if (UtilValidate.isNotEmpty(paid)) {
      if ("Y".equals(paid)) {
        paid="1";
      }
 else {
        paid="0";
      }
      UtilXml.addChildElementValue(transElem,"Paid",paid,transDoc);
    }
    if (UtilValidate.isNotEmpty(shipped)) {
      if ("Y".equals(shipped)) {
        shipped="1";
      }
 else {
        shipped="0";
      }
      UtilXml.addChildElementValue(transElem,"Shipped",shipped,transDoc);
    }
    UtilXml.addChildElementValue(transElem,"TransactionID",transactionId,transDoc);
    dataItemsXml.append(UtilXml.writeXmlDocument(transDoc));
  }
 catch (  Exception e) {
    Debug.logError("Exception during building complete sale request",module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.exceptionDuringBuildingCompleteSaleRequest",locale));
  }
  return ServiceUtil.returnSuccess();
}
