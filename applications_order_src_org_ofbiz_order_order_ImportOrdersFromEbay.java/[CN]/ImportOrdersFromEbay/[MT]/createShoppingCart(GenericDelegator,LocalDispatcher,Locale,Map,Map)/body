{
  try {
    String productStoreId=(String)context.get("productStoreId");
    GenericValue userLogin=(GenericValue)context.get("userLogin");
    String defaultCurrencyUomId="";
    String payToPartyId="";
    String facilityId="";
    if (productStoreId == null) {
      ;
    }
 else {
      GenericValue productStore=delegator.findByPrimaryKey("ProductStore",UtilMisc.toMap("productStoreId",productStoreId));
      if (productStore != null) {
        defaultCurrencyUomId=productStore.getString("defaultCurrencyUomId");
        payToPartyId=productStore.getString("payToPartyId");
        facilityId=productStore.getString("inventoryFacilityId");
      }
 else {
        ;
      }
    }
    ShoppingCart cart=new ShoppingCart(delegator,productStoreId,locale,defaultCurrencyUomId);
    String externalId=(String)order.get("externalId");
    if (UtilValidate.isNotEmpty(externalId)) {
      if (externalOrderExists(delegator,externalId)) {
        return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.externalIdAlreadyExist",locale));
      }
      cart.setExternalId(externalId);
    }
 else {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.externalIdNotAvailable",locale));
    }
    cart.setOrderType("SALES_ORDER");
    cart.setChannelType("EBAY_SALES_CHANNEL");
    cart.setUserLogin(userLogin,dispatcher);
    cart.setProductStoreId(productStoreId);
    if (UtilValidate.isNotEmpty(facilityId)) {
      cart.setFacilityId(facilityId);
    }
    String amountStr=(String)order.get("amountPaid");
    Double amountPaid=new Double(0);
    if (UtilValidate.isNotEmpty(amountStr)) {
      amountPaid=new Double(amountStr);
    }
    cart.addPaymentAmount("EXT_EBAY",amountPaid,externalId,null,true,false,false);
    Timestamp orderDate=UtilDateTime.nowTimestamp();
    if (UtilValidate.isNotEmpty((String)order.get("createdDate"))) {
      SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
      Date createdDate=sdf.parse((String)order.get("createdDate"));
      orderDate=new Timestamp(createdDate.getTime());
    }
    cart.setOrderDate(orderDate);
    cart.addItemGroup("00001",null);
    String productId=(String)order.get("productId");
    if (UtilValidate.isEmpty(productId)) {
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"ordersImportFromEbay.productIdNotAvailable",locale));
    }
    Double unitPrice=new Double((String)order.get("amount"));
    double quantity=new Double((String)order.get("quantitySold")).doubleValue();
    Double amount=new Double(quantity * unitPrice.doubleValue());
    cart.addItemToEnd(productId,amount,quantity,unitPrice,null,null,null,"PRODUCT_ORDER_ITEM",dispatcher,Boolean.FALSE,Boolean.FALSE);
    if (UtilValidate.isNotEmpty(payToPartyId)) {
      cart.setBillFromVendorPartyId(payToPartyId);
    }
    String partyId=createCustomerParty(dispatcher,(String)order.get("buyerName"),userLogin);
    String contactMechId="";
    if (UtilValidate.isNotEmpty(partyId)) {
      contactMechId=createAddress(dispatcher,partyId,userLogin,"SHIPPING_LOCATION",order);
      createPartyPhone(dispatcher,partyId,(String)order.get("shippingAddressPhone"),userLogin);
      String emailBuyer=(String)order.get("emailBuyer");
      if (!(emailBuyer.equals("") || emailBuyer.equalsIgnoreCase("Invalid Request"))) {
        createPartyEmail(dispatcher,partyId,emailBuyer,userLogin);
      }
    }
 else {
      partyId="admin";
    }
    cart.setBillToCustomerPartyId(partyId);
    cart.setPlacingCustomerPartyId(partyId);
    cart.setShipToCustomerPartyId(partyId);
    cart.setEndUserCustomerPartyId(partyId);
    cart.setCarrierPartyId("_NA_");
    cart.setShippingContactMechId(contactMechId);
    cart.setShipmentMethodTypeId("NO_SHIPPING");
    cart.setMaySplit(Boolean.FALSE);
    cart.makeAllShipGroupInfos();
    String shippingCost=(String)order.get("shippingServiceCost");
    if (UtilValidate.isNotEmpty(shippingCost)) {
      double shippingAmount=new Double(shippingCost).doubleValue();
      if (shippingAmount > 0) {
        GenericValue shippingAdjustment=madeOrderAdjustment(delegator,"SHIPPING_CHARGES",cart.getOrderId(),null,null,shippingAmount);
        if (shippingAdjustment != null) {
          cart.addAdjustment(shippingAdjustment);
        }
      }
    }
    CheckOutHelper checkout=new CheckOutHelper(dispatcher,delegator,cart);
    Map orderCreate=checkout.createOrder(userLogin);
    String orderId=(String)orderCreate.get("orderId");
    if (UtilValidate.isNotEmpty(orderId)) {
      boolean approved=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);
      if (approved) {
        createPaymentFromPaymentPreferences(delegator,dispatcher,userLogin,orderId,externalId,cart.getOrderDate(),partyId);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return ServiceUtil.returnSuccess();
}
