{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  String shipmentId=(String)context.get("shipmentId");
  String errorMsg=UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceForShipment",UtilMisc.toMap("shipmentId",shipmentId),locale);
  boolean salesReturnFound=false;
  boolean purchaseReturnFound=false;
  List<String> invoicesCreated=FastList.newInstance();
  try {
    GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
    if (shipment == null) {
      return ServiceUtil.returnError(errorMsg + UtilProperties.getMessage(resource,"AccountingShipmentNotFound",locale));
    }
    if (shipment.getString("shipmentTypeId").equals("SALES_RETURN")) {
      salesReturnFound=true;
    }
 else     if ("PURCHASE_RETURN".equals(shipment.getString("shipmentTypeId"))) {
      purchaseReturnFound=true;
    }
    if (!(salesReturnFound || purchaseReturnFound)) {
      return ServiceUtil.returnError(errorMsg + UtilProperties.getMessage(resource,"AccountingShipmentNotSalesReturnAndPurchaseReturn",locale));
    }
    List<GenericValue> shippedItems=null;
    if (salesReturnFound) {
      shippedItems=shipment.getRelated("ShipmentReceipt");
    }
 else     if (purchaseReturnFound) {
      shippedItems=shipment.getRelated("ItemIssuance");
    }
    if (shippedItems == null) {
      Debug.logInfo("No items issued for shipments",module);
      return ServiceUtil.returnSuccess();
    }
    Map<String,List<GenericValue>> itemsShippedGroupedByReturn=FastMap.newInstance();
    for (    GenericValue item : shippedItems) {
      String returnId=null;
      String returnItemSeqId=null;
      if (item.getEntityName().equals("ShipmentReceipt")) {
        returnId=item.getString("returnId");
      }
 else       if (item.getEntityName().equals("ItemIssuance")) {
        GenericValue returnItemShipment=EntityUtil.getFirst(delegator.findByAnd("ReturnItemShipment",UtilMisc.toMap("shipmentId",item.getString("shipmentId"),"shipmentItemSeqId",item.getString("shipmentItemSeqId"))));
        returnId=returnItemShipment.getString("returnId");
        returnItemSeqId=returnItemShipment.getString("returnItemSeqId");
      }
      List<GenericValue> billings=null;
      if (item.getEntityName().equals("ShipmentReceipt")) {
        billings=delegator.findByAnd("ReturnItemBilling",UtilMisc.toMap("shipmentReceiptId",item.getString("receiptId"),"returnId",returnId,"returnItemSeqId",item.get("returnItemSeqId")));
      }
 else       if (item.getEntityName().equals("ItemIssuance")) {
        billings=delegator.findByAnd("ReturnItemBilling",UtilMisc.toMap("returnId",returnId,"returnItemSeqId",returnItemSeqId));
      }
      if (billings != null && billings.size() > 0)       continue;
      List<GenericValue> billItems=itemsShippedGroupedByReturn.get(returnId);
      if (billItems == null) {
        billItems=FastList.newInstance();
      }
      billItems.add(item);
      itemsShippedGroupedByReturn.put(returnId,billItems);
    }
    for (    String returnId : itemsShippedGroupedByReturn.keySet()) {
      List<GenericValue> billItems=itemsShippedGroupedByReturn.get(returnId);
      if (Debug.verboseOn()) {
        Debug.logVerbose("Creating invoice for return [" + returnId + "] with items: "+ billItems.toString(),module);
      }
      Map<String,Object> input=UtilMisc.toMap("returnId",returnId,"billItems",billItems,"userLogin",context.get("userLogin"));
      Map<String,Object> serviceResults=dispatcher.runSync("createInvoiceFromReturn",input);
      if (ServiceUtil.isError(serviceResults)) {
        return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
      }
      invoicesCreated.add((String)serviceResults.get("invoiceId"));
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,errorMsg + e.getMessage(),module);
    return ServiceUtil.returnError(errorMsg + e.getMessage());
  }
catch (  GenericEntityException e) {
    Debug.logError(e,errorMsg + e.getMessage(),module);
    return ServiceUtil.returnError(errorMsg + e.getMessage());
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("invoicesCreated",invoicesCreated);
  return result;
}
