{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  List shipmentIds=(List)context.get("shipmentIds");
  Locale locale=(Locale)context.get("locale");
  boolean salesShipmentFound=false;
  boolean purchaseShipmentFound=false;
  List invoicesCreated=new ArrayList();
  for (int i=0; i < shipmentIds.size(); i++) {
    String tmpShipmentId=(String)shipmentIds.get(i);
    try {
      GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",tmpShipmentId));
      if ((shipment.getString("shipmentTypeId") != null) && (shipment.getString("shipmentTypeId").equals("PURCHASE_SHIPMENT"))) {
        purchaseShipmentFound=true;
      }
 else {
        salesShipmentFound=true;
      }
      if (purchaseShipmentFound && salesShipmentFound) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingShipmentsOfDifferentTypes",UtilMisc.toMap("tmpShipmentId",tmpShipmentId,"shipmentTypeId",shipment.getString("shipmentTypeId")),locale));
      }
    }
 catch (    GenericEntityException e) {
      String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleGettingShipmentEntity",UtilMisc.toMap("tmpShipmentId",tmpShipmentId),locale);
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  EntityCondition shipmentIdsCond=new EntityExpr("shipmentId",EntityOperator.IN,shipmentIds);
  List items=null;
  try {
    if (purchaseShipmentFound) {
      items=delegator.findByCondition("ShipmentReceipt",shipmentIdsCond,null,UtilMisc.toList("shipmentId"));
    }
 else {
      items=delegator.findByCondition("ItemIssuance",shipmentIdsCond,null,UtilMisc.toList("shipmentId"));
    }
  }
 catch (  GenericEntityException e) {
    String errMsg=UtilProperties.getMessage(resource,"AccountingProblemGettingItemsFromShipments",locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (items == null) {
    Debug.logInfo("No items issued for shipments",module);
    return ServiceUtil.returnSuccess();
  }
  Map shippedOrderItems=new HashMap();
  Iterator itemsIter=items.iterator();
  while (itemsIter.hasNext()) {
    GenericValue item=(GenericValue)itemsIter.next();
    String orderId=item.getString("orderId");
    String orderItemSeqId=item.getString("orderItemSeqId");
    List itemsByOrder=(List)shippedOrderItems.get(orderId);
    if (itemsByOrder == null) {
      itemsByOrder=new ArrayList();
    }
    Map billFields=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId);
    if (item.getEntityName().equals("ItemIssuance")) {
      billFields.put("itemIssuanceId",item.get("itemIssuanceId"));
    }
 else     if (item.getEntityName().equals("ShipmentReceipt")) {
      billFields.put("shipmentReceiptId",item.getString("receiptId"));
    }
    List itemBillings=null;
    try {
      itemBillings=delegator.findByAnd("OrderItemBilling",billFields);
    }
 catch (    GenericEntityException e) {
      String errMsg=UtilProperties.getMessage(resource,"AccountingProblemLookingUpOrderItemBilling",UtilMisc.toMap("billFields",billFields),locale);
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
    if (itemBillings == null || itemBillings.size() == 0) {
      itemsByOrder.add(item);
    }
    shippedOrderItems.put(orderId,itemsByOrder);
  }
  Set orders=shippedOrderItems.keySet();
  Iterator ordersIter=orders.iterator();
  while (ordersIter.hasNext()) {
    String orderId=(String)ordersIter.next();
    List billItems=(List)shippedOrderItems.get(orderId);
    List toBillItems=new ArrayList();
    Map itemQtyAvail=new HashMap();
    Iterator billIt=billItems.iterator();
    while (billIt.hasNext()) {
      GenericValue issue=(GenericValue)billIt.next();
      BigDecimal issueQty=ZERO;
      if (issue.getEntityName().equals("ShipmentReceipt")) {
        issueQty=issue.getBigDecimal("quantityAccepted");
      }
 else {
        issueQty=issue.getBigDecimal("quantity");
      }
      BigDecimal billAvail=(BigDecimal)itemQtyAvail.get(issue.getString("orderItemSeqId"));
      if (billAvail == null) {
        Map lookup=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",issue.get("orderItemSeqId"));
        GenericValue orderItem=null;
        List billed=null;
        try {
          orderItem=issue.getRelatedOne("OrderItem");
          billed=delegator.findByAnd("OrderItemBilling",lookup);
        }
 catch (        GenericEntityException e) {
          String errMsg=UtilProperties.getMessage(resource,"AccountingProblemGettingOrderItemOrderItemBilling",UtilMisc.toMap("lookup",lookup),locale);
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
        BigDecimal orderedQty=orderItem.getBigDecimal("quantity");
        if (billed != null && billed.size() > 0) {
          BigDecimal billedQuantity=ZERO;
          Iterator bi=billed.iterator();
          while (bi.hasNext()) {
            GenericValue oib=(GenericValue)bi.next();
            BigDecimal qty=oib.getBigDecimal("quantity");
            if (qty != null) {
              billedQuantity=billedQuantity.add(qty).setScale(decimals,rounding);
            }
          }
          BigDecimal leftToBill=orderedQty.subtract(billedQuantity).setScale(decimals,rounding);
          billAvail=leftToBill;
        }
 else {
          billAvail=orderedQty;
        }
      }
      if (billAvail != null && billAvail.signum() == 1) {
        if (issueQty != null && issueQty.doubleValue() > billAvail.doubleValue()) {
          issue.set("quantity",new Double(billAvail.doubleValue()));
          billAvail=ZERO;
        }
 else {
          billAvail=billAvail.subtract(issueQty).setScale(decimals,rounding);
        }
        toBillItems.add(issue);
      }
      itemQtyAvail.put(issue.getString("orderItemSeqId"),billAvail);
    }
    OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
    GenericValue productStore=orh.getProductStore();
    if (productStore.getString("prorateShipping").equals("N")) {
      List invoiceableShipmentIds=EntityUtil.getFieldListFromEntityList(toBillItems,"shipmentId",true);
      List invoiceableShipments=null;
      try {
        invoiceableShipments=delegator.findByCondition("Shipment",new EntityExpr("shipmentId",EntityOperator.IN,invoiceableShipmentIds),null,null);
      }
 catch (      GenericEntityException e) {
        String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateInvoicesFromShipmentsService",locale);
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      Map additionalShippingCharges=new HashMap();
      BigDecimal totalAdditionalShippingCharges=ZERO;
      Iterator isit=invoiceableShipments.iterator();
      while (isit.hasNext()) {
        GenericValue shipment=(GenericValue)isit.next();
        if (shipment.get("additionalShippingCharge") == null)         continue;
        BigDecimal shipmentAdditionalShippingCharges=shipment.getBigDecimal("additionalShippingCharge").setScale(decimals,rounding);
        additionalShippingCharges.put(shipment,shipmentAdditionalShippingCharges);
        totalAdditionalShippingCharges=totalAdditionalShippingCharges.add(shipmentAdditionalShippingCharges);
      }
      if (totalAdditionalShippingCharges.signum() == 1) {
        Iterator ascit=additionalShippingCharges.keySet().iterator();
        while (ascit.hasNext()) {
          GenericValue shipment=(GenericValue)ascit.next();
          String shipmentId=shipment.getString("shipmentId");
          BigDecimal additionalShippingCharge=(BigDecimal)additionalShippingCharges.get(shipment);
          Map createOrderAdjustmentContext=new HashMap();
          createOrderAdjustmentContext.put("orderId",orderId);
          createOrderAdjustmentContext.put("orderAdjustmentTypeId","SHIPPING_CHARGES");
          createOrderAdjustmentContext.put("description",UtilProperties.getMessage(resource,"AccountingAdditionalShippingChargeForShipment",locale) + " #" + shipmentId);
          createOrderAdjustmentContext.put("sourceReferenceId",shipmentId);
          createOrderAdjustmentContext.put("amount",new Double(additionalShippingCharge.doubleValue()));
          createOrderAdjustmentContext.put("userLogin",context.get("userLogin"));
          String shippingOrderAdjustmentId=null;
          try {
            Map createOrderAdjustmentResult=dispatcher.runSync("createOrderAdjustment",createOrderAdjustmentContext);
            shippingOrderAdjustmentId=(String)createOrderAdjustmentResult.get("orderAdjustmentId");
          }
 catch (          GenericServiceException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateOrderAdjustmentService",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          GenericValue billToParty=orh.getBillToParty();
          GenericValue payToParty=orh.getBillFromParty();
          GenericValue destinationContactMech=null;
          try {
            destinationContactMech=shipment.getRelatedOne("DestinationPostalAddress");
          }
 catch (          GenericEntityException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateInvoicesFromShipmentService",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          List emptyList=new ArrayList();
          Map calcTaxContext=new HashMap();
          calcTaxContext.put("productStoreId",orh.getProductStoreId());
          calcTaxContext.put("payToPartyId",payToParty.getString("partyId"));
          calcTaxContext.put("billToPartyId",billToParty.getString("partyId"));
          calcTaxContext.put("orderShippingAmount",totalAdditionalShippingCharges);
          calcTaxContext.put("shippingAddress",destinationContactMech);
          calcTaxContext.put("itemProductList",emptyList);
          calcTaxContext.put("itemAmountList",emptyList);
          calcTaxContext.put("itemPriceList",emptyList);
          calcTaxContext.put("itemShippingList",emptyList);
          List orderAdjustments=null;
          Map calcTaxResult=null;
          try {
            calcTaxResult=dispatcher.runSync("calcTax",calcTaxContext);
          }
 catch (          GenericServiceException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCalcTaxService",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          orderAdjustments=(List)calcTaxResult.get("orderAdjustments");
          if (calcTaxResult != null && orderAdjustments != null) {
            Iterator oait=orderAdjustments.iterator();
            while (oait.hasNext()) {
              GenericValue orderAdjustment=(GenericValue)oait.next();
              totalAdditionalShippingCharges=totalAdditionalShippingCharges.add(orderAdjustment.getBigDecimal("amount").setScale(decimals,rounding));
              orderAdjustment.set("orderAdjustmentId",delegator.getNextSeqId("OrderAdjustment"));
              orderAdjustment.set("orderId",orderId);
              orderAdjustment.set("orderItemSeqId","_NA_");
              orderAdjustment.set("shipGroupSeqId",shipment.getString("primaryShipGroupSeqId"));
              orderAdjustment.set("originalAdjustmentId",shippingOrderAdjustmentId);
            }
            try {
              delegator.storeAll(orderAdjustments);
            }
 catch (            GenericEntityException e) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingProblemStoringOrderAdjustments",UtilMisc.toMap("orderAdjustments",orderAdjustments),locale);
              Debug.logError(e,errMsg,module);
              return ServiceUtil.returnError(errMsg);
            }
          }
          List orderPaymentPreferences=new ArrayList();
          try {
            orderPaymentPreferences=delegator.findByAnd("OrderPaymentPreference",UtilMisc.toMap("orderId",orderId));
          }
 catch (          GenericEntityException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          String paymentMethodId=null;
          Iterator oppit=orderPaymentPreferences.iterator();
          while (oppit.hasNext()) {
            GenericValue orderPaymentPreference=(GenericValue)oppit.next();
            if (orderPaymentPreference.getString("paymentMethodTypeId").equals("CREDIT_CARD")) {
              paymentMethodId=orderPaymentPreference.getString("paymentMethodId");
              break;
            }
          }
          if (paymentMethodId != null) {
            Map serviceContext=UtilMisc.toMap("orderId",orderId,"paymentMethodId",paymentMethodId,"paymentMethodTypeId","CREDIT_CARD","userLogin",context.get("userLogin"));
            String orderPaymentPreferenceId=null;
            try {
              Map result=dispatcher.runSync("createOrderPaymentPreference",serviceContext);
              orderPaymentPreferenceId=(String)result.get("orderPaymentPreferenceId");
            }
 catch (            GenericServiceException e) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateOrderPaymentPreferenceService",locale);
              Debug.logError(e,errMsg,module);
              return ServiceUtil.returnError(errMsg);
            }
            Map authResult=null;
            try {
              authResult=dispatcher.runSync("authOrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId,"overrideAmount",new Double(totalAdditionalShippingCharges.doubleValue()),"userLogin",context.get("userLogin")));
            }
 catch (            GenericServiceException e) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingAuthOrderPaymentPreferenceService",locale);
              Debug.logError(e,errMsg,module);
              return ServiceUtil.returnError(errMsg);
            }
            boolean authFinished=((Boolean)authResult.get("finished")).booleanValue();
            boolean authErrors=((Boolean)authResult.get("errors")).booleanValue();
            if (authErrors || !authFinished) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingUnableToAuthAdditionalShipCharges",UtilMisc.toMap("shipmentId",shipmentId,"paymentMethodId",paymentMethodId,"orderPaymentPreferenceId",orderPaymentPreferenceId),locale);
              Debug.logError(errMsg,module);
            }
          }
        }
      }
    }
    Map serviceContext=UtilMisc.toMap("orderId",orderId,"billItems",toBillItems,"userLogin",context.get("userLogin"));
    try {
      Map result=dispatcher.runSync("createInvoiceForOrder",serviceContext);
      invoicesCreated.add(result.get("invoiceId"));
    }
 catch (    GenericServiceException e) {
      String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateInvoiceForOrderService",locale);
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  Map response=ServiceUtil.returnSuccess();
  response.put("invoicesCreated",invoicesCreated);
  return response;
}
