{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  if (DECIMALS == -1 || ROUNDING == -1) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingAritmeticPropertiesNotConfigured",locale));
  }
  String orderId=(String)context.get("orderId");
  List<GenericValue> billItems=UtilGenerics.checkList(context.get("billItems"));
  String invoiceId=(String)context.get("invoiceId");
  if (UtilValidate.isEmpty(billItems)) {
    Debug.logVerbose("No order items to invoice; not creating invoice; returning success",module);
    return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingNoOrderItemsToInvoice",locale));
  }
  try {
    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
    if (orderHeader == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingNoOrderHeader",locale));
    }
    String invoiceType=null;
    String orderType=orderHeader.getString("orderTypeId");
    if (orderType.equals("SALES_ORDER")) {
      invoiceType="SALES_INVOICE";
    }
 else     if (orderType.equals("PURCHASE_ORDER")) {
      invoiceType="PURCHASE_INVOICE";
    }
    int invoiceTypeDecimals=UtilNumber.getBigDecimalScale("invoice." + invoiceType + ".decimals");
    if (invoiceTypeDecimals == -1)     invoiceTypeDecimals=DECIMALS;
    OrderReadHelper orh=new OrderReadHelper(orderHeader);
    GenericValue productStore=orh.getProductStore();
    String prorateShipping=productStore != null ? productStore.getString("prorateShipping") : "Y";
    if (prorateShipping == null) {
      prorateShipping="Y";
    }
    String billToCustomerPartyId=orh.getBillToParty().getString("partyId");
    String billFromVendorPartyId=orh.getBillFromParty().getString("partyId");
    BigDecimal shippableAmount=orh.getShippableTotal(null);
    BigDecimal orderSubTotal=orh.getOrderItemsSubTotal();
    BigDecimal invoiceShipProRateAmount=ZERO;
    BigDecimal invoiceSubTotal=ZERO;
    BigDecimal invoiceQuantity=ZERO;
    GenericValue billingAccount=orderHeader.getRelatedOne("BillingAccount",false);
    String billingAccountId=billingAccount != null ? billingAccount.getString("billingAccountId") : null;
    Timestamp invoiceDate=(Timestamp)context.get("eventDate");
    if (UtilValidate.isEmpty(invoiceDate)) {
      invoiceDate=UtilDateTime.nowTimestamp();
    }
    Long orderTermNetDays=orh.getOrderTermNetDays();
    Timestamp dueDate=null;
    if (orderTermNetDays != null) {
      dueDate=UtilDateTime.getDayEnd(invoiceDate,orderTermNetDays);
    }
    if (UtilValidate.isEmpty(invoiceId)) {
      Map<String,Object> createInvoiceContext=FastMap.newInstance();
      createInvoiceContext.put("partyId",billToCustomerPartyId);
      createInvoiceContext.put("partyIdFrom",billFromVendorPartyId);
      createInvoiceContext.put("billingAccountId",billingAccountId);
      createInvoiceContext.put("invoiceDate",invoiceDate);
      createInvoiceContext.put("dueDate",dueDate);
      createInvoiceContext.put("invoiceTypeId",invoiceType);
      createInvoiceContext.put("statusId","INVOICE_IN_PROCESS");
      createInvoiceContext.put("currencyUomId",orderHeader.getString("currencyUom"));
      createInvoiceContext.put("userLogin",userLogin);
      Map<String,Object> createInvoiceResult=dispatcher.runSync("createInvoice",createInvoiceContext);
      if (ServiceUtil.isError(createInvoiceResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,createInvoiceResult);
      }
      invoiceId=(String)createInvoiceResult.get("invoiceId");
    }
    List<GenericValue> orderRoles=orderHeader.getRelated("OrderRole",null,null,false);
    Map<String,Object> createInvoiceRoleContext=FastMap.newInstance();
    createInvoiceRoleContext.put("invoiceId",invoiceId);
    createInvoiceRoleContext.put("userLogin",userLogin);
    for (    GenericValue orderRole : orderRoles) {
      createInvoiceRoleContext.put("partyId",orderRole.getString("partyId"));
      createInvoiceRoleContext.put("roleTypeId",orderRole.getString("roleTypeId"));
      Map<String,Object> createInvoiceRoleResult=dispatcher.runSync("createInvoiceRole",createInvoiceRoleContext);
      if (ServiceUtil.isError(createInvoiceRoleResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,createInvoiceRoleResult);
      }
    }
    List<GenericValue> orderTerms=orh.getOrderTerms();
    createInvoiceTerms(delegator,dispatcher,invoiceId,orderTerms,userLogin,locale);
    if (billingAccount != null) {
      List<GenericValue> billToRoles=billingAccount.getRelated("BillingAccountRole",UtilMisc.toMap("roleTypeId","BILL_TO_CUSTOMER"),null,false);
      for (      GenericValue billToRole : billToRoles) {
        if (!(billToRole.getString("partyId").equals(billToCustomerPartyId))) {
          createInvoiceRoleContext=UtilMisc.toMap("invoiceId",invoiceId,"partyId",billToRole.get("partyId"),"roleTypeId","BILL_TO_CUSTOMER","userLogin",userLogin);
          Map<String,Object> createInvoiceRoleResult=dispatcher.runSync("createInvoiceRole",createInvoiceRoleContext);
          if (ServiceUtil.isError(createInvoiceRoleResult)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceRoleFromOrder",locale),null,null,createInvoiceRoleResult);
          }
        }
      }
      if (UtilValidate.isNotEmpty(billingAccount.getString("contactMechId"))) {
        Map<String,Object> createBillToContactMechContext=UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",billingAccount.getString("contactMechId"),"contactMechPurposeTypeId","BILLING_LOCATION","userLogin",userLogin);
        Map<String,Object> createBillToContactMechResult=dispatcher.runSync("createInvoiceContactMech",createBillToContactMechContext);
        if (ServiceUtil.isError(createBillToContactMechResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceContactMechFromOrder",locale),null,null,createBillToContactMechResult);
        }
      }
    }
 else {
      List<GenericValue> billingLocations=orh.getBillingLocations();
      if (UtilValidate.isNotEmpty(billingLocations)) {
        for (        GenericValue ocm : billingLocations) {
          Map<String,Object> createBillToContactMechContext=UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",ocm.getString("contactMechId"),"contactMechPurposeTypeId","BILLING_LOCATION","userLogin",userLogin);
          Map<String,Object> createBillToContactMechResult=dispatcher.runSync("createInvoiceContactMech",createBillToContactMechContext);
          if (ServiceUtil.isError(createBillToContactMechResult)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceContactMechFromOrder",locale),null,null,createBillToContactMechResult);
          }
        }
      }
 else {
        Debug.logWarning("No billing locations found for order [" + orderId + "] and none were created for Invoice ["+ invoiceId+ "]",module);
      }
    }
    GenericValue payToAddress=null;
    if (invoiceType.equals("PURCHASE_INVOICE")) {
      GenericValue billFromVendor=orh.getPartyFromRole("BILL_FROM_VENDOR");
      if (billFromVendor != null) {
        List<GenericValue> billingContactMechs=billFromVendor.getRelatedOne("Party",false).getRelated("PartyContactMechPurpose",UtilMisc.toMap("contactMechPurposeTypeId","BILLING_LOCATION"),null,false);
        if (UtilValidate.isNotEmpty(billingContactMechs)) {
          payToAddress=EntityUtil.getFirst(billingContactMechs);
        }
      }
    }
 else {
      payToAddress=PaymentWorker.getPaymentAddress(delegator,productStore.getString("payToPartyId"));
    }
    if (payToAddress != null) {
      Map<String,Object> createPayToContactMechContext=UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",payToAddress.getString("contactMechId"),"contactMechPurposeTypeId","PAYMENT_LOCATION","userLogin",userLogin);
      Map<String,Object> createPayToContactMechResult=dispatcher.runSync("createInvoiceContactMech",createPayToContactMechContext);
      if (ServiceUtil.isError(createPayToContactMechResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceContactMechFromOrder",locale),null,null,createPayToContactMechResult);
      }
    }
    int invoiceItemSeqNum=1;
    String invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    for (    GenericValue currentValue : billItems) {
      GenericValue itemIssuance=null;
      GenericValue orderItem=null;
      GenericValue shipmentReceipt=null;
      if ("ItemIssuance".equals(currentValue.getEntityName())) {
        itemIssuance=currentValue;
      }
 else       if ("OrderItem".equals(currentValue.getEntityName())) {
        orderItem=currentValue;
      }
 else       if ("ShipmentReceipt".equals(currentValue.getEntityName())) {
        shipmentReceipt=currentValue;
      }
 else {
        Debug.logError("Unexpected entity " + currentValue + " of type "+ currentValue.getEntityName(),module);
      }
      if (orderItem == null && itemIssuance != null) {
        orderItem=itemIssuance.getRelatedOne("OrderItem",false);
      }
 else       if ((orderItem == null) && (shipmentReceipt != null)) {
        orderItem=shipmentReceipt.getRelatedOne("OrderItem",false);
      }
 else       if ((orderItem == null) && (itemIssuance == null) && (shipmentReceipt == null)) {
        Debug.logError("Cannot create invoice when orderItem, itemIssuance, and shipmentReceipt are all null",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingIllegalValuesPassedToCreateInvoiceService",locale));
      }
      GenericValue product=null;
      if (orderItem.get("productId") != null) {
        product=orderItem.getRelatedOne("Product",false);
      }
      BigDecimal billingQuantity=null;
      if (itemIssuance != null) {
        billingQuantity=itemIssuance.getBigDecimal("quantity");
        BigDecimal cancelQty=itemIssuance.getBigDecimal("cancelQuantity");
        if (cancelQty == null) {
          cancelQty=ZERO;
        }
        billingQuantity=billingQuantity.subtract(cancelQty).setScale(DECIMALS,ROUNDING);
      }
 else       if (shipmentReceipt != null) {
        billingQuantity=shipmentReceipt.getBigDecimal("quantityAccepted");
      }
 else {
        BigDecimal orderedQuantity=OrderReadHelper.getOrderItemQuantity(orderItem);
        BigDecimal invoicedQuantity=OrderReadHelper.getOrderItemInvoicedQuantity(orderItem);
        billingQuantity=orderedQuantity.subtract(invoicedQuantity);
        if (billingQuantity.compareTo(ZERO) < 0) {
          billingQuantity=ZERO;
        }
      }
      if (billingQuantity == null)       billingQuantity=ZERO;
      boolean shippingApplies=false;
      if ((product != null) && (ProductWorker.shippingApplies(product)) && (invoiceType.equals("SALES_INVOICE"))) {
        shippingApplies=true;
      }
      BigDecimal billingAmount=orderItem.getBigDecimal("unitPrice").setScale(invoiceTypeDecimals,ROUNDING);
      Map<String,Object> createInvoiceItemContext=FastMap.newInstance();
      createInvoiceItemContext.put("invoiceId",invoiceId);
      createInvoiceItemContext.put("invoiceItemSeqId",invoiceItemSeqId);
      createInvoiceItemContext.put("invoiceItemTypeId",getInvoiceItemType(delegator,(orderItem.getString("orderItemTypeId")),(product == null ? null : product.getString("productTypeId")),invoiceType,"INV_FPROD_ITEM"));
      createInvoiceItemContext.put("description",orderItem.get("itemDescription"));
      createInvoiceItemContext.put("quantity",billingQuantity);
      createInvoiceItemContext.put("amount",billingAmount);
      createInvoiceItemContext.put("productId",orderItem.get("productId"));
      createInvoiceItemContext.put("productFeatureId",orderItem.get("productFeatureId"));
      createInvoiceItemContext.put("overrideGlAccountId",orderItem.get("overrideGlAccountId"));
      createInvoiceItemContext.put("userLogin",userLogin);
      String itemIssuanceId=null;
      if (itemIssuance != null && itemIssuance.get("inventoryItemId") != null) {
        itemIssuanceId=itemIssuance.getString("itemIssuanceId");
        createInvoiceItemContext.put("inventoryItemId",itemIssuance.get("inventoryItemId"));
      }
      if ((product != null) && (invoiceType.equals("SALES_INVOICE"))) {
        createInvoiceItemContext.put("taxableFlag",product.get("taxable"));
      }
      Map<String,Object> createInvoiceItemResult=dispatcher.runSync("createInvoiceItem",createInvoiceItemContext);
      if (ServiceUtil.isError(createInvoiceItemResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceItemFromOrder",locale),null,null,createInvoiceItemResult);
      }
      BigDecimal thisAmount=billingAmount.multiply(billingQuantity).setScale(invoiceTypeDecimals,ROUNDING);
      if (shippingApplies) {
        invoiceShipProRateAmount=invoiceShipProRateAmount.add(thisAmount).setScale(invoiceTypeDecimals,ROUNDING);
      }
      invoiceSubTotal=invoiceSubTotal.add(thisAmount).setScale(100,ROUNDING);
      invoiceQuantity=invoiceQuantity.add(billingQuantity).setScale(invoiceTypeDecimals,ROUNDING);
      Map<String,Object> createOrderItemBillingContext=FastMap.newInstance();
      createOrderItemBillingContext.put("invoiceId",invoiceId);
      createOrderItemBillingContext.put("invoiceItemSeqId",invoiceItemSeqId);
      createOrderItemBillingContext.put("orderId",orderItem.get("orderId"));
      createOrderItemBillingContext.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
      createOrderItemBillingContext.put("itemIssuanceId",itemIssuanceId);
      createOrderItemBillingContext.put("quantity",billingQuantity);
      createOrderItemBillingContext.put("amount",billingAmount);
      createOrderItemBillingContext.put("userLogin",userLogin);
      if ((shipmentReceipt != null) && (shipmentReceipt.getString("receiptId") != null)) {
        createOrderItemBillingContext.put("shipmentReceiptId",shipmentReceipt.getString("receiptId"));
      }
      Map<String,Object> createOrderItemBillingResult=dispatcher.runSync("createOrderItemBilling",createOrderItemBillingContext);
      if (ServiceUtil.isError(createOrderItemBillingResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingOrderItemBillingFromOrder",locale),null,null,createOrderItemBillingResult);
      }
      if ("ItemIssuance".equals(currentValue.getEntityName())) {
        List<GenericValue> shipmentItemBillings=EntityQuery.use(delegator).from("ShipmentItemBilling").where("shipmentId",currentValue.get("shipmentId"),"shipmentItemSeqId",currentValue.get("shipmentItemSeqId")).queryList();
        if (UtilValidate.isEmpty(shipmentItemBillings)) {
          GenericValue shipmentItemBilling=delegator.makeValue("ShipmentItemBilling",UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId));
          shipmentItemBilling.put("shipmentId",currentValue.get("shipmentId"));
          shipmentItemBilling.put("shipmentItemSeqId",currentValue.get("shipmentItemSeqId"));
          shipmentItemBilling.create();
        }
      }
      String parentInvoiceItemSeqId=invoiceItemSeqId;
      invoiceItemSeqNum++;
      invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
      GenericValue originalOrderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId")).queryOne();
      List<GenericValue> itemAdjustments=OrderReadHelper.getOrderItemAdjustmentList(orderItem,orh.getAdjustments());
      for (      GenericValue adj : itemAdjustments) {
        BigDecimal adjAlreadyInvoicedAmount=null;
        try {
          Map<String,Object> checkResult=dispatcher.runSync("calculateInvoicedAdjustmentTotal",UtilMisc.toMap("orderAdjustment",adj));
          adjAlreadyInvoicedAmount=(BigDecimal)checkResult.get("invoicedTotal");
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Accounting trouble calling calculateInvoicedAdjustmentTotal service",module);
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTroubleCallingCalculateInvoicedAdjustmentTotalService",locale));
        }
        if (adj.get("amount") == null) {
          continue;
        }
        if (adjAlreadyInvoicedAmount.abs().compareTo(adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,ROUNDING).abs()) > 0) {
          continue;
        }
        BigDecimal originalOrderItemQuantity=OrderReadHelper.getOrderItemQuantity(originalOrderItem);
        BigDecimal amount=ZERO;
        if (originalOrderItemQuantity.signum() != 0) {
          if (adj.get("amount") != null) {
            amount=adj.getBigDecimal("amount").divide(originalOrderItemQuantity,100,ROUNDING);
            amount=amount.multiply(billingQuantity);
            if (adj.getString("orderAdjustmentTypeId").equals("SALES_TAX")) {
              amount=amount.setScale(TAX_DECIMALS,TAX_ROUNDING);
            }
 else {
              amount=amount.setScale(invoiceTypeDecimals,ROUNDING);
            }
          }
 else           if (adj.get("sourcePercentage") != null) {
            BigDecimal percent=adj.getBigDecimal("sourcePercentage");
            percent=percent.divide(new BigDecimal(100),100,ROUNDING);
            amount=billingAmount.multiply(percent);
            amount=amount.divide(originalOrderItemQuantity,100,ROUNDING);
            amount=amount.multiply(billingQuantity);
            amount=amount.setScale(invoiceTypeDecimals,ROUNDING);
          }
        }
        if (amount.signum() != 0) {
          Map<String,Object> createInvoiceItemAdjContext=FastMap.newInstance();
          createInvoiceItemAdjContext.put("invoiceId",invoiceId);
          createInvoiceItemAdjContext.put("invoiceItemSeqId",invoiceItemSeqId);
          createInvoiceItemAdjContext.put("invoiceItemTypeId",getInvoiceItemType(delegator,adj.getString("orderAdjustmentTypeId"),null,invoiceType,"INVOICE_ITM_ADJ"));
          createInvoiceItemAdjContext.put("quantity",BigDecimal.ONE);
          createInvoiceItemAdjContext.put("amount",amount);
          createInvoiceItemAdjContext.put("productId",orderItem.get("productId"));
          createInvoiceItemAdjContext.put("productFeatureId",orderItem.get("productFeatureId"));
          createInvoiceItemAdjContext.put("overrideGlAccountId",adj.get("overrideGlAccountId"));
          createInvoiceItemAdjContext.put("parentInvoiceId",invoiceId);
          createInvoiceItemAdjContext.put("parentInvoiceItemSeqId",parentInvoiceItemSeqId);
          createInvoiceItemAdjContext.put("userLogin",userLogin);
          createInvoiceItemAdjContext.put("taxAuthPartyId",adj.get("taxAuthPartyId"));
          createInvoiceItemAdjContext.put("taxAuthGeoId",adj.get("taxAuthGeoId"));
          createInvoiceItemAdjContext.put("taxAuthorityRateSeqId",adj.get("taxAuthorityRateSeqId"));
          String description=(UtilValidate.isEmpty(adj.getString("description")) ? adj.getString("comments") : adj.getString("description"));
          createInvoiceItemAdjContext.put("description",description);
          if (!(adj.getString("orderAdjustmentTypeId").equals("SALES_TAX"))) {
            createInvoiceItemAdjContext.put("taxableFlag",product.get("taxable"));
          }
          if (UtilValidate.isNotEmpty(adj.getString("productPromoId"))) {
            try {
              GenericValue productPromo=adj.getRelatedOne("ProductPromo",false);
              if (UtilValidate.isNotEmpty(productPromo.getString("overrideOrgPartyId"))) {
                createInvoiceItemAdjContext.put("overrideOrgPartyId",productPromo.getString("overrideOrgPartyId"));
              }
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,"Error looking up ProductPromo with id [" + adj.getString("productPromoId") + "]",module);
            }
          }
          Map<String,Object> createInvoiceItemAdjResult=dispatcher.runSync("createInvoiceItem",createInvoiceItemAdjContext);
          if (ServiceUtil.isError(createInvoiceItemAdjResult)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceItemFromOrder",locale),null,null,createInvoiceItemAdjResult);
          }
          Map<String,Object> createOrderAdjustmentBillingContext=FastMap.newInstance();
          createOrderAdjustmentBillingContext.put("orderAdjustmentId",adj.getString("orderAdjustmentId"));
          createOrderAdjustmentBillingContext.put("invoiceId",invoiceId);
          createOrderAdjustmentBillingContext.put("invoiceItemSeqId",invoiceItemSeqId);
          createOrderAdjustmentBillingContext.put("amount",amount);
          createOrderAdjustmentBillingContext.put("userLogin",userLogin);
          Map<String,Object> createOrderAdjustmentBillingResult=dispatcher.runSync("createOrderAdjustmentBilling",createOrderAdjustmentBillingContext);
          if (ServiceUtil.isError(createOrderAdjustmentBillingResult)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingOrderAdjustmentBillingFromOrder",locale),null,null,createOrderAdjustmentBillingContext);
          }
          BigDecimal thisAdjAmount=amount;
          if (!"SALES_TAX".equals(adj.getString("orderAdjustmentTypeId")) && !"SHIPPING_ADJUSTMENT".equals(adj.getString("orderAdjustmentTypeId"))) {
            invoiceSubTotal=invoiceSubTotal.add(thisAdjAmount).setScale(100,ROUNDING);
            if (shippingApplies) {
              invoiceShipProRateAmount=invoiceShipProRateAmount.add(thisAdjAmount).setScale(invoiceTypeDecimals,ROUNDING);
            }
          }
          invoiceItemSeqNum++;
          invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
        }
      }
    }
    Map<GenericValue,BigDecimal> shipAdjustments=FastMap.newInstance();
    Map<GenericValue,BigDecimal> taxAdjustments=FastMap.newInstance();
    List<GenericValue> headerAdjustments=orh.getOrderHeaderAdjustments();
    for (    GenericValue adj : headerAdjustments) {
      BigDecimal adjAlreadyInvoicedAmount=null;
      try {
        Map<String,Object> checkResult=dispatcher.runSync("calculateInvoicedAdjustmentTotal",UtilMisc.toMap("orderAdjustment",adj));
        adjAlreadyInvoicedAmount=((BigDecimal)checkResult.get("invoicedTotal")).setScale(invoiceTypeDecimals,ROUNDING);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Accounting trouble calling calculateInvoicedAdjustmentTotal service",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTroubleCallingCalculateInvoicedAdjustmentTotalService",locale));
      }
      if (null == adj.get("amount")) {
        continue;
      }
      if (adjAlreadyInvoicedAmount.abs().compareTo(adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,ROUNDING).abs()) > 0) {
        continue;
      }
      if ("SHIPPING_CHARGES".equals(adj.getString("orderAdjustmentTypeId"))) {
        shipAdjustments.put(adj,adjAlreadyInvoicedAmount);
      }
 else       if ("SALES_TAX".equals(adj.getString("orderAdjustmentTypeId"))) {
        taxAdjustments.put(adj,adjAlreadyInvoicedAmount);
      }
 else {
        calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,orderSubTotal,invoiceSubTotal,adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,ROUNDING),invoiceTypeDecimals,ROUNDING,userLogin,dispatcher,locale);
        invoiceItemSeqNum++;
        invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
      }
    }
    for (    GenericValue adj : shipAdjustments.keySet()) {
      BigDecimal adjAlreadyInvoicedAmount=shipAdjustments.get(adj);
      if ("N".equalsIgnoreCase(prorateShipping)) {
        BigDecimal divisor=BigDecimal.ONE;
        BigDecimal multiplier=BigDecimal.ONE;
        BigDecimal baseAmount=adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,ROUNDING).subtract(adjAlreadyInvoicedAmount);
        calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,invoiceTypeDecimals,ROUNDING,userLogin,dispatcher,locale);
      }
 else {
        BigDecimal divisor=shippableAmount;
        BigDecimal multiplier=invoiceShipProRateAmount;
        BigDecimal baseAmount=adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,ROUNDING);
        calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,invoiceTypeDecimals,ROUNDING,userLogin,dispatcher,locale);
      }
      invoiceItemSeqNum++;
      invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    }
    String prorateTaxes=productStore != null ? productStore.getString("prorateTaxes") : "Y";
    if (prorateTaxes == null) {
      prorateTaxes="Y";
    }
    for (    Map.Entry<GenericValue,BigDecimal> entry : taxAdjustments.entrySet()) {
      GenericValue adj=entry.getKey();
      BigDecimal adjAlreadyInvoicedAmount=entry.getValue();
      BigDecimal adjAmount=null;
      if ("N".equalsIgnoreCase(prorateTaxes)) {
        BigDecimal divisor=BigDecimal.ONE;
        BigDecimal multiplier=BigDecimal.ONE;
        BigDecimal baseAmount=adj.getBigDecimal("amount").setScale(TAX_DECIMALS,TAX_ROUNDING).subtract(adjAlreadyInvoicedAmount);
        adjAmount=calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,TAX_DECIMALS,TAX_ROUNDING,userLogin,dispatcher,locale);
      }
 else {
        BigDecimal divisor=orderSubTotal;
        BigDecimal multiplier=invoiceSubTotal;
        BigDecimal baseAmount=adj.getBigDecimal("amount");
        adjAmount=calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,TAX_DECIMALS,TAX_ROUNDING,userLogin,dispatcher,locale);
      }
      invoiceSubTotal=invoiceSubTotal.add(adjAmount).setScale(invoiceTypeDecimals,ROUNDING);
      invoiceItemSeqNum++;
      invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    }
    List<GenericValue> orderPaymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where(EntityCondition.makeCondition("orderId",EntityOperator.EQUALS,orderId),EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PAYMENT_CANCELLED")).queryList();
    List<GenericValue> currentPayments=FastList.newInstance();
    for (    GenericValue paymentPref : orderPaymentPrefs) {
      List<GenericValue> payments=paymentPref.getRelated("Payment",null,null,false);
      currentPayments.addAll(payments);
    }
    for (    GenericValue payment : currentPayments) {
      if ("PMNT_VOID".equals(payment.getString("statusId")) || "PMNT_CANCELLED".equals(payment.getString("statusId"))) {
        continue;
      }
      BigDecimal notApplied=PaymentWorker.getPaymentNotApplied(payment);
      if (notApplied.signum() > 0) {
        Map<String,Object> appl=FastMap.newInstance();
        appl.put("paymentId",payment.get("paymentId"));
        appl.put("invoiceId",invoiceId);
        appl.put("billingAccountId",billingAccountId);
        appl.put("amountApplied",notApplied);
        appl.put("userLogin",userLogin);
        Map<String,Object> createPayApplResult=dispatcher.runSync("createPaymentApplication",appl);
        if (ServiceUtil.isError(createPayApplResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,createPayApplResult);
        }
      }
    }
    String autoApproveInvoice=productStore != null ? productStore.getString("autoApproveInvoice") : "Y";
    if (!"N".equals(autoApproveInvoice)) {
      String nextStatusId="PURCHASE_INVOICE".equals(invoiceType) ? "INVOICE_IN_PROCESS" : "INVOICE_READY";
      Map<String,Object> setInvoiceStatusResult=dispatcher.runSync("setInvoiceStatus",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"statusId",nextStatusId,"userLogin",userLogin));
      if (ServiceUtil.isError(setInvoiceStatusResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,setInvoiceStatusResult);
      }
    }
    Map<String,Object> resp=ServiceUtil.returnSuccess();
    resp.put("invoiceId",invoiceId);
    resp.put("invoiceTypeId",invoiceType);
    return resp;
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Entity/data problem creating invoice from order items: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingEntityDataProblemCreatingInvoiceFromOrderItems",UtilMisc.toMap("reason",e.toString()),locale));
  }
catch (  GenericServiceException e) {
    Debug.logError(e,"Service/other problem creating invoice from order items: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingServiceOtherProblemCreatingInvoiceFromOrderItems",UtilMisc.toMap("reason",e.toString()),locale));
  }
}
