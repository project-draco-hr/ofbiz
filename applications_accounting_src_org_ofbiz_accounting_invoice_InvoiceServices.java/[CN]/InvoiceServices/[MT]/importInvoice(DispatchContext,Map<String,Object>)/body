{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  ByteBuffer fileBytes=(ByteBuffer)context.get("uploadedFile");
  String organizationPartyId=(String)context.get("organizationPartyId");
  String encoding=System.getProperty("file.encoding");
  String csvString=Charset.forName(encoding).decode(fileBytes).toString();
  final BufferedReader csvReader=new BufferedReader(new StringReader(csvString));
  CSVFormat fmt=CSVFormat.DEFAULT.withHeader();
  List<String> errMsgs=FastList.newInstance();
  List<String> newErrMsgs=FastList.newInstance();
  String lastInvoiceId=null;
  String currentInvoiceId=null;
  String newInvoiceId=null;
  int invoicesCreated=0;
  if (fileBytes == null) {
    return ServiceUtil.returnError("Uploaded file data not found");
  }
  try {
    for (    final CSVRecord rec : fmt.parse(csvReader)) {
      currentInvoiceId=rec.get("invoiceId");
      if (lastInvoiceId == null || !currentInvoiceId.equals(lastInvoiceId)) {
        newInvoiceId=null;
        Map<String,Object> invoice=UtilMisc.toMap("invoiceTypeId",rec.get("invoiceTypeId"),"partyIdFrom",rec.get("partyIdFrom"),"partyId",rec.get("partyId"),"invoiceDate",rec.get("invoiceDate"),"dueDate",rec.get("dueDate"),"currencyUomId",rec.get("currencyUomId"),"description",rec.get("description"),"referenceNumber",rec.get("referenceNumber") + "   Imported: orginal InvoiceId: " + currentInvoiceId,"userLogin",userLogin);
        if (UtilValidate.isNotEmpty(rec.get("partyIdFromTrans"))) {
          invoice.put("partyIdFrom",rec.get("partyIdFromTrans"));
        }
        if (UtilValidate.isNotEmpty(rec.get("partyIdTrans"))) {
          invoice.put("partyId",rec.get("partyIdTrans"));
        }
        try {
          newErrMsgs=FastList.newInstance();
          if (UtilValidate.isEmpty(invoice.get("partyIdFrom"))) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": Mandatory Party Id From and Party Id From Trans missing for invoice: "+ currentInvoiceId);
          }
 else           if (EntityQuery.use(delegator).from("Party").where("partyId",invoice.get("partyIdFrom")).queryOne() == null) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": partyIdFrom: "+ invoice.get("partyIdFrom")+ " not found for invoice: "+ currentInvoiceId);
          }
          if (UtilValidate.isEmpty(invoice.get("partyId"))) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": Mandatory Party Id and Party Id Trans missing for invoice: "+ currentInvoiceId);
          }
 else           if (EntityQuery.use(delegator).from("Party").where("partyId",invoice.get("partyId")).queryOne() == null) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": partyId: "+ invoice.get("partyId")+ " not found for invoice: "+ currentInvoiceId);
          }
          if (UtilValidate.isEmpty(invoice.get("invoiceTypeId"))) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": Mandatory Invoice Type missing for invoice: "+ currentInvoiceId);
          }
 else           if (EntityQuery.use(delegator).from("InvoiceType").where("invoiceTypeId",invoice.get("invoiceTypeId")).queryOne() == null) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": InvoiceItem type id: "+ invoice.get("invoiceTypeId")+ " not found for invoice: "+ currentInvoiceId);
          }
          GenericValue invoiceType=EntityQuery.use(delegator).from("InvoiceType").where("invoiceTypeId",invoice.get("invoiceTypeId")).queryOne();
          if ("PURCHASE_INVOICE".equals(invoiceType.getString("parentTypeId")) && !invoice.get("partyId").equals(organizationPartyId)) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": A purchase type invoice should have the partyId 'To' being the organizationPartyId(="+ organizationPartyId+ ")! however is "+ invoice.get("partyId")+ "! invoice: "+ currentInvoiceId);
          }
          if ("SALES_INVOICE".equals(invoiceType.getString("parentTypeId")) && !invoice.get("partyIdFrom").equals(organizationPartyId)) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": A sales type invoice should have the partyId 'from' being the organizationPartyId(="+ organizationPartyId+ ")! however is "+ invoice.get("partyIdFrom")+ "! invoice: "+ currentInvoiceId);
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError("Valication checking problem against database. due to " + e.getMessage(),module);
        }
        if (newErrMsgs.size() > 0) {
          errMsgs.addAll(newErrMsgs);
        }
 else {
          Map<String,Object> invoiceResult=null;
          try {
            invoiceResult=dispatcher.runSync("createInvoice",invoice);
          }
 catch (          GenericServiceException e) {
            csvReader.close();
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
          newInvoiceId=(String)invoiceResult.get("invoiceId");
          invoicesCreated++;
        }
        lastInvoiceId=currentInvoiceId;
      }
      if (newInvoiceId != null) {
        Map<String,Object> invoiceItem=UtilMisc.toMap("invoiceId",newInvoiceId,"invoiceItemSeqId",rec.get("invoiceItemSeqId"),"invoiceItemTypeId",rec.get("invoiceItemTypeId"),"productId",rec.get("productId"),"description",rec.get("itemDescription"),"amount",rec.get("amount"),"quantity",rec.get("quantity"),"userLogin",userLogin);
        if (UtilValidate.isNotEmpty(rec.get("productIdTrans"))) {
          invoiceItem.put("productId",rec.get("productIdTrans"));
        }
        try {
          newErrMsgs=FastList.newInstance();
          if (UtilValidate.isEmpty(invoiceItem.get("invoiceItemSeqId"))) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": Mandatory item sequence Id missing for invoice: "+ currentInvoiceId);
          }
          if (UtilValidate.isEmpty(invoiceItem.get("invoiceItemTypeId"))) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": Mandatory invoice item type missing for invoice: "+ currentInvoiceId);
          }
 else           if (EntityQuery.use(delegator).from("InvoiceItemType").where("invoiceItemTypeId",invoiceItem.get("invoiceItemTypeId")).queryOne() == null) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": InvoiceItem Item type id: "+ invoiceItem.get("invoiceItemTypeId")+ " not found for invoice: "+ currentInvoiceId+ " Item seqId:"+ invoiceItem.get("invoiceItemSeqId"));
          }
          if (UtilValidate.isEmpty(invoiceItem.get("productId")) && UtilValidate.isEmpty(invoiceItem.get("description"))) {
          }
          if (UtilValidate.isNotEmpty(invoiceItem.get("productId")) && EntityQuery.use(delegator).from("Product").where("productId",invoiceItem.get("productId")).queryOne() == null) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": Product Id: "+ invoiceItem.get("productId")+ " not found for invoice: "+ currentInvoiceId+ " Item seqId:"+ invoiceItem.get("invoiceItemSeqId"));
          }
          if (UtilValidate.isEmpty(invoiceItem.get("amount")) && UtilValidate.isEmpty(invoiceItem.get("quantity"))) {
            newErrMsgs.add("Line number " + rec.getRecordNumber() + ": Either or both quantity and amount is required for invoice: "+ currentInvoiceId+ " Item seqId:"+ invoiceItem.get("invoiceItemSeqId"));
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError("Validation checking problem against database. due to " + e.getMessage(),module);
        }
        if (newErrMsgs.size() > 0) {
          errMsgs.addAll(newErrMsgs);
        }
 else {
          try {
            dispatcher.runSync("createInvoiceItem",invoiceItem);
          }
 catch (          GenericServiceException e) {
            csvReader.close();
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
        }
      }
    }
  }
 catch (  IOException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (errMsgs.size() > 0) {
    return ServiceUtil.returnError(errMsgs);
  }
  Map<String,Object> result=ServiceUtil.returnSuccess(invoicesCreated + " new invoice(s) created");
  result.put("organizationPartyId",organizationPartyId);
  return result;
}
