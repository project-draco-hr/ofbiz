{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  List<String> salesInvoiceIds=UtilGenerics.checkList(context.get("invoiceIds"));
  List<Map<String,String>> invoicesCreated=FastList.newInstance();
  Map<String,List<Map<String,Object>>> commissionParties=FastMap.newInstance();
  for (  String salesInvoiceId : salesInvoiceIds) {
    List<String> salesRepPartyIds=UtilGenerics.checkList(context.get("partyIds"));
    BigDecimal amountTotal=InvoiceWorker.getInvoiceTotal(delegator,salesInvoiceId);
    if (amountTotal.signum() == 0) {
      Debug.logWarning("Invoice [" + salesInvoiceId + "] has an amount total of ["+ amountTotal+ "], so no commission invoice will be created",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionZeroInvoiceAmount",locale));
    }
    BigDecimal appliedFraction=amountTotal.divide(amountTotal,12,ROUNDING);
    GenericValue invoice=null;
    boolean isReturn=false;
    List<String> billFromVendorInvoiceRoles=new ArrayList<String>();
    List<GenericValue> invoiceItems=new ArrayList<GenericValue>();
    try {
      List<EntityExpr> invoiceRoleConds=UtilMisc.toList(EntityCondition.makeCondition("invoiceId",EntityOperator.EQUALS,salesInvoiceId),EntityCondition.makeCondition("roleTypeId",EntityOperator.EQUALS,"BILL_FROM_VENDOR"));
      billFromVendorInvoiceRoles=EntityUtil.getFieldListFromEntityList(delegator.findList("InvoiceRole",EntityCondition.makeCondition(invoiceRoleConds,EntityOperator.AND),null,null,null,false),"partyId",true);
      invoiceRoleConds=UtilMisc.toList(EntityCondition.makeCondition("invoiceId",EntityOperator.EQUALS,salesInvoiceId),EntityCondition.makeCondition("roleTypeId",EntityOperator.EQUALS,"SALES_REP"));
      if (UtilValidate.isEmpty(salesRepPartyIds)) {
        salesRepPartyIds=EntityUtil.getFieldListFromEntityList(delegator.findList("InvoiceRole",EntityCondition.makeCondition(invoiceRoleConds,EntityOperator.AND),null,null,null,false),"partyId",true);
        if (UtilValidate.isEmpty(salesRepPartyIds)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"No party found with role sales representative for sales invoice " + salesInvoiceId,locale));
        }
      }
 else {
        List<String> salesInvoiceRolePartyIds=EntityUtil.getFieldListFromEntityList(delegator.findList("InvoiceRole",EntityCondition.makeCondition(invoiceRoleConds,EntityOperator.AND),null,null,null,false),"partyId",true);
        if (UtilValidate.isNotEmpty(salesInvoiceRolePartyIds)) {
          salesRepPartyIds=UtilGenerics.checkList(CollectionUtils.intersection(salesRepPartyIds,salesInvoiceRolePartyIds));
        }
      }
      invoice=delegator.findOne("Invoice",UtilMisc.toMap("invoiceId",salesInvoiceId),false);
      String invoiceTypeId=invoice.getString("invoiceTypeId");
      if ("CUST_RTN_INVOICE".equals(invoiceTypeId)) {
        isReturn=true;
      }
 else       if (!"SALES_INVOICE".equals(invoiceTypeId)) {
        Debug.logWarning("This type of invoice has no commission; returning success",module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionInvalid",locale));
      }
      invoiceItems=delegator.findList("InvoiceItem",EntityCondition.makeCondition("invoiceId",EntityOperator.EQUALS,salesInvoiceId),null,null,null,false);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    for (    GenericValue invoiceItem : invoiceItems) {
      BigDecimal amount=ZERO;
      BigDecimal quantity=ZERO;
      quantity=invoiceItem.getBigDecimal("quantity");
      amount=invoiceItem.getBigDecimal("amount");
      amount=isReturn ? amount.negate() : amount;
      String productId=invoiceItem.getString("productId");
      String invoiceItemSeqId=invoiceItem.getString("invoiceItemSeqId");
      String invoiceId=invoiceItem.getString("invoiceId");
      if (UtilValidate.isNotEmpty(productId)) {
        Map<String,Object> resultMap=null;
        try {
          resultMap=dispatcher.runSync("getCommissionForProduct",UtilMisc.<String,Object>toMap("productId",productId,"invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId,"invoiceItemTypeId",invoiceItem.getString("invoiceItemTypeId"),"amount",amount,"quantity",quantity,"userLogin",userLogin));
        }
 catch (        GenericServiceException e) {
          return ServiceUtil.returnError(e.getMessage());
        }
        List<Map<String,Object>> itemCommissions=UtilGenerics.checkList(resultMap.get("commissions"));
        if (UtilValidate.isNotEmpty(itemCommissions)) {
          for (          Map<String,Object> commissionMap : itemCommissions) {
            commissionMap.put("invoice",invoice);
            commissionMap.put("appliedFraction",appliedFraction);
            if (!billFromVendorInvoiceRoles.contains(commissionMap.get("partyIdFrom")) || !salesRepPartyIds.contains(commissionMap.get("partyIdTo"))) {
              continue;
            }
            String partyIdFromTo=(String)commissionMap.get("partyIdFrom") + (String)commissionMap.get("partyIdTo");
            if (!commissionParties.containsKey(partyIdFromTo)) {
              commissionParties.put(partyIdFromTo,UtilMisc.toList(commissionMap));
            }
 else {
              (commissionParties.get(partyIdFromTo)).add(commissionMap);
            }
          }
        }
      }
    }
  }
  Timestamp now=UtilDateTime.nowTimestamp();
  for (  Map.Entry<String,List<Map<String,Object>>> commissionParty : commissionParties.entrySet()) {
    List<GenericValue> toStore=FastList.newInstance();
    List<Map<String,Object>> commList=commissionParty.getValue();
    if (UtilValidate.isEmpty(commList)) {
      continue;
    }
    String partyIdBillTo=(String)(commList.get(0)).get("partyIdFrom");
    String partyIdBillFrom=(String)(commList.get(0)).get("partyIdTo");
    GenericValue invoice=(GenericValue)(commList.get(0)).get("invoice");
    BigDecimal appliedFraction=(BigDecimal)(commList.get(0)).get("appliedFraction");
    Long days=(Long)(commList.get(0)).get("days");
    Map<String,Object> createInvoiceMap=FastMap.newInstance();
    createInvoiceMap.put("partyId",partyIdBillTo);
    createInvoiceMap.put("partyIdFrom",partyIdBillFrom);
    createInvoiceMap.put("invoiceDate",now);
    if (days != null) {
      createInvoiceMap.put("dueDate",UtilDateTime.getDayEnd(now,days));
    }
    createInvoiceMap.put("invoiceTypeId","COMMISSION_INVOICE");
    createInvoiceMap.put("statusId","INVOICE_IN_PROCESS");
    createInvoiceMap.put("currencyUomId",invoice.getString("currencyUomId"));
    createInvoiceMap.put("userLogin",userLogin);
    Map<String,Object> createInvoiceResult=null;
    try {
      createInvoiceResult=dispatcher.runSync("createInvoice",createInvoiceMap);
    }
 catch (    GenericServiceException e) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionError",locale),null,null,createInvoiceResult);
    }
    String invoiceId=(String)createInvoiceResult.get("invoiceId");
    List<EntityExpr> partyContactMechPurposeConds=UtilMisc.toList(EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyIdBillTo),EntityCondition.makeCondition("contactMechPurposeTypeId",EntityOperator.EQUALS,"BILLING_LOCATION"));
    List<GenericValue> partyContactMechPurposes=new ArrayList<GenericValue>();
    try {
      partyContactMechPurposes=delegator.findList("PartyContactMechPurpose",EntityCondition.makeCondition(partyContactMechPurposeConds,EntityOperator.AND),null,null,null,false);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (partyContactMechPurposes.size() > 0) {
      GenericValue address=partyContactMechPurposes.get(0);
      GenericValue invoiceContactMech=delegator.makeValue("InvoiceContactMech",UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",address.getString("contactMechId"),"contactMechPurposeTypeId","BILLING_LOCATION"));
      toStore.add(invoiceContactMech);
    }
    partyContactMechPurposeConds=UtilMisc.toList(EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyIdBillTo),EntityCondition.makeCondition("contactMechPurposeTypeId",EntityOperator.EQUALS,"PAYMENT_LOCATION"));
    try {
      partyContactMechPurposes=delegator.findList("PartyContactMechPurpose",EntityCondition.makeCondition(partyContactMechPurposeConds,EntityOperator.AND),null,null,null,false);
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (partyContactMechPurposes.size() > 0) {
      GenericValue address=partyContactMechPurposes.get(0);
      GenericValue invoiceContactMech=delegator.makeValue("InvoiceContactMech",UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",address.getString("contactMechId"),"contactMechPurposeTypeId","PAYMENT_LOCATION"));
      toStore.add(invoiceContactMech);
    }
    for (    Map<String,Object> commissionMap : commList) {
      BigDecimal elemAmount=((BigDecimal)commissionMap.get("commission")).multiply(appliedFraction);
      BigDecimal quantity=(BigDecimal)commissionMap.get("quantity");
      String invoiceIdFrom=(String)commissionMap.get("invoiceId");
      String invoiceItemSeqIdFrom=(String)commissionMap.get("invoiceItemSeqId");
      elemAmount=elemAmount.setScale(DECIMALS,ROUNDING);
      Map<String,Object> resMap=null;
      Map<String,Object> invoiceItemAssocResultMap=null;
      try {
        resMap=dispatcher.runSync("createInvoiceItem",UtilMisc.toMap("invoiceId",invoiceId,"productId",commissionMap.get("productId"),"invoiceItemTypeId","COMM_INV_ITEM","quantity",quantity,"amount",elemAmount,"userLogin",userLogin));
        invoiceItemAssocResultMap=dispatcher.runSync("createInvoiceItemAssoc",UtilMisc.toMap("invoiceIdFrom",invoiceIdFrom,"invoiceItemSeqIdFrom",invoiceItemSeqIdFrom,"invoiceIdTo",invoiceId,"invoiceItemSeqIdTo",resMap.get("invoiceItemSeqId"),"invoiceItemAssocTypeId","COMMISSION_INVOICE","partyIdFrom",partyIdBillFrom,"partyIdTo",partyIdBillTo,"quantity",quantity,"amount",elemAmount,"userLogin",userLogin));
      }
 catch (      GenericServiceException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
      if (ServiceUtil.isError(resMap)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionErrorItem",locale),null,null,resMap);
      }
    }
    try {
      delegator.storeAll(toStore);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Entity/data problem creating commission invoice: " + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionEntityDataProblem",UtilMisc.toMap("reason",e.toString()),locale));
    }
    invoicesCreated.add(UtilMisc.<String,String>toMap("commissionInvoiceId",invoiceId,"salesRepresentative ",partyIdBillFrom));
  }
  String invCreated=new Integer(invoicesCreated.size()).toString();
  Map<String,Object> result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingCommissionInvoicesCreated",UtilMisc.toMap("invoicesCreated",invCreated),locale));
  Debug.logInfo("Created Commission invoices for each commission receiving parties " + invCreated,module);
  result.put("invoicesCreated",invoicesCreated);
  return result;
}
