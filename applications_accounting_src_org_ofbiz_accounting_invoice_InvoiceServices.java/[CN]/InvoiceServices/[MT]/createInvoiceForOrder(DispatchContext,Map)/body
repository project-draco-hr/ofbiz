{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  if (decimals == -1 || rounding == -1) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingAritmeticPropertiesNotConfigured",locale));
  }
  String orderId=(String)context.get("orderId");
  List billItems=(List)context.get("billItems");
  boolean previousInvoiceFound=false;
  if (billItems == null || billItems.size() == 0) {
    Debug.logVerbose("No order items to invoice; not creating invoice; returning success",module);
    return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingNoOrderItemsToInvoice",locale));
  }
  try {
    GenericValue orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
    if (orderHeader == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingNoOrderHeader",locale));
    }
    List billedItems=delegator.findByAnd("OrderItemBilling",UtilMisc.toMap("orderId",orderId));
    if (billedItems != null && billedItems.size() > 0) {
      boolean nonDigitalInvoice=false;
      Iterator bii=billedItems.iterator();
      while (bii.hasNext() && !nonDigitalInvoice) {
        GenericValue orderItemBilling=(GenericValue)bii.next();
        GenericValue invoiceItem=orderItemBilling.getRelatedOne("InvoiceItem");
        if (invoiceItem != null) {
          String invoiceItemType=invoiceItem.getString("invoiceItemTypeId");
          if (invoiceItemType != null) {
            if ("INV_FPROD_ITEM".equals(invoiceItemType) || "INV_PROD_FEATR_ITEM".equals(invoiceItemType)) {
              nonDigitalInvoice=true;
            }
          }
        }
      }
      if (nonDigitalInvoice) {
        previousInvoiceFound=true;
      }
    }
    String invoiceType=null;
    String orderType=orderHeader.getString("orderTypeId");
    if (orderType.equals("SALES_ORDER")) {
      invoiceType="SALES_INVOICE";
    }
 else     if (orderType.equals("PURCHASE_ORDER")) {
      invoiceType="PURCHASE_INVOICE";
    }
    int invoiceTypeDecimals=UtilNumber.getBigDecimalScale("invoice." + invoiceType + ".decimals");
    if (invoiceTypeDecimals == -1)     invoiceTypeDecimals=decimals;
    OrderReadHelper orh=new OrderReadHelper(orderHeader);
    GenericValue productStore=delegator.findByPrimaryKey("ProductStore",UtilMisc.toMap("productStoreId",orh.getProductStoreId()));
    String prorateShipping=productStore.getString("prorateShipping");
    if (prorateShipping == null) {
      prorateShipping="Y";
    }
    String billToCustomerPartyId=orh.getBillToParty().getString("partyId");
    String billFromVendorPartyId=orh.getBillFromParty().getString("partyId");
    BigDecimal totalItemsInOrder=orh.getTotalOrderItemsQuantity();
    BigDecimal shippableAmount=orh.getShippableTotal(null);
    BigDecimal orderSubTotal=orh.getOrderItemsSubTotal();
    BigDecimal invoiceShipProRateAmount=ZERO;
    BigDecimal invoiceSubTotal=ZERO;
    BigDecimal invoiceQuantity=ZERO;
    GenericValue billingAccount=orderHeader.getRelatedOne("BillingAccount");
    String billingAccountId=billingAccount != null ? billingAccount.getString("billingAccountId") : null;
    Timestamp invoiceDate=UtilDateTime.nowTimestamp();
    Long orderTermNetDays=orh.getOrderTermNetDays();
    Timestamp dueDate=null;
    if (orderTermNetDays != null) {
      dueDate=UtilDateTime.getDayEnd(invoiceDate,orderTermNetDays);
    }
    Map createInvoiceContext=FastMap.newInstance();
    createInvoiceContext.put("partyId",billToCustomerPartyId);
    createInvoiceContext.put("partyIdFrom",billFromVendorPartyId);
    createInvoiceContext.put("billingAccountId",billingAccountId);
    createInvoiceContext.put("invoiceDate",invoiceDate);
    createInvoiceContext.put("dueDate",dueDate);
    createInvoiceContext.put("invoiceTypeId",invoiceType);
    createInvoiceContext.put("statusId","INVOICE_IN_PROCESS");
    createInvoiceContext.put("currencyUomId",orderHeader.getString("currencyUom"));
    createInvoiceContext.put("userLogin",userLogin);
    Map createInvoiceResult=dispatcher.runSync("createInvoice",createInvoiceContext);
    if (ServiceUtil.isError(createInvoiceResult)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,createInvoiceResult);
    }
    String invoiceId=(String)createInvoiceResult.get("invoiceId");
    List orderRoles=orderHeader.getRelated("OrderRole");
    if (orderRoles != null) {
      Iterator orderRolesIt=orderRoles.iterator();
      Map createInvoiceRoleContext=FastMap.newInstance();
      createInvoiceRoleContext.put("invoiceId",invoiceId);
      createInvoiceRoleContext.put("userLogin",userLogin);
      while (orderRolesIt.hasNext()) {
        GenericValue orderRole=(GenericValue)orderRolesIt.next();
        createInvoiceRoleContext.put("partyId",orderRole.getString("partyId"));
        createInvoiceRoleContext.put("roleTypeId",orderRole.getString("roleTypeId"));
        Map createInvoiceRoleResult=dispatcher.runSync("createInvoiceRole",createInvoiceRoleContext);
        if (ServiceUtil.isError(createInvoiceRoleResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,createInvoiceRoleResult);
        }
      }
    }
    List orderTerms=orh.getOrderTerms();
    createInvoiceTerms(delegator,dispatcher,invoiceId,orderTerms,userLogin,locale);
    List billingAccountTerms=null;
    if (billingAccount != null) {
      List billToRoles=billingAccount.getRelated("BillingAccountRole",UtilMisc.toMap("roleTypeId","BILL_TO_CUSTOMER"),null);
      Iterator billToIter=billToRoles.iterator();
      while (billToIter.hasNext()) {
        GenericValue billToRole=(GenericValue)billToIter.next();
        if (!(billToRole.getString("partyId").equals(billToCustomerPartyId))) {
          Map createInvoiceRoleContext=UtilMisc.toMap("invoiceId",invoiceId,"partyId",billToRole.get("partyId"),"roleTypeId","BILL_TO_CUSTOMER","userLogin",userLogin);
          Map createInvoiceRoleResult=dispatcher.runSync("createInvoiceRole",createInvoiceRoleContext);
          if (ServiceUtil.isError(createInvoiceRoleResult)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceRoleFromOrder",locale),null,null,createInvoiceRoleResult);
          }
        }
      }
      if (UtilValidate.isNotEmpty(billingAccount.getString("contactMechId"))) {
        Map createBillToContactMechContext=UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",billingAccount.getString("contactMechId"),"contactMechPurposeTypeId","BILLING_LOCATION","userLogin",userLogin);
        Map createBillToContactMechResult=dispatcher.runSync("createInvoiceContactMech",createBillToContactMechContext);
        if (ServiceUtil.isError(createBillToContactMechResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceContactMechFromOrder",locale),null,null,createBillToContactMechResult);
        }
      }
    }
 else {
      List billingLocations=orh.getBillingLocations();
      if (UtilValidate.isNotEmpty(billingLocations)) {
        Iterator bli=billingLocations.iterator();
        while (bli.hasNext()) {
          GenericValue ocm=(GenericValue)bli.next();
          Map createBillToContactMechContext=UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",ocm.getString("contactMechId"),"contactMechPurposeTypeId","BILLING_LOCATION","userLogin",userLogin);
          Map createBillToContactMechResult=dispatcher.runSync("createInvoiceContactMech",createBillToContactMechContext);
          if (ServiceUtil.isError(createBillToContactMechResult)) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceContactMechFromOrder",locale),null,null,createBillToContactMechResult);
          }
        }
      }
 else {
        Debug.logWarning("No billing locations found for order [" + orderId + "] and none were created for Invoice ["+ invoiceId+ "]",module);
      }
    }
    GenericValue payToAddress=null;
    if (invoiceType.equals("PURCHASE_INVOICE")) {
      GenericValue billFromVendor=orh.getPartyFromRole("BILL_FROM_VENDOR");
      if (billFromVendor != null) {
        List billingContactMechs=billFromVendor.getRelatedOne("Party").getRelatedByAnd("PartyContactMechPurpose",UtilMisc.toMap("contactMechPurposeTypeId","BILLING_LOCATION"));
        if ((billingContactMechs != null) && (billingContactMechs.size() > 0)) {
          payToAddress=(GenericValue)billingContactMechs.get(0);
        }
      }
    }
 else {
      payToAddress=PaymentWorker.getPaymentAddress(delegator,productStore.getString("payToPartyId"));
    }
    if (payToAddress != null) {
      Map createPayToContactMechContext=UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",payToAddress.getString("contactMechId"),"contactMechPurposeTypeId","PAYMENT_LOCATION","userLogin",userLogin);
      Map createPayToContactMechResult=dispatcher.runSync("createInvoiceContactMech",createPayToContactMechContext);
      if (ServiceUtil.isError(createPayToContactMechResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceContactMechFromOrder",locale),null,null,createPayToContactMechResult);
      }
    }
    int invoiceItemSeqNum=1;
    String invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    if (billItems != null) {
      Iterator itemIter=billItems.iterator();
      while (itemIter.hasNext()) {
        GenericValue itemIssuance=null;
        GenericValue orderItem=null;
        GenericValue shipmentReceipt=null;
        GenericValue currentValue=(GenericValue)itemIter.next();
        if ("ItemIssuance".equals(currentValue.getEntityName())) {
          itemIssuance=currentValue;
        }
 else         if ("OrderItem".equals(currentValue.getEntityName())) {
          orderItem=currentValue;
        }
 else         if ("ShipmentReceipt".equals(currentValue.getEntityName())) {
          shipmentReceipt=currentValue;
        }
 else {
          Debug.logError("Unexpected entity " + currentValue + " of type "+ currentValue.getEntityName(),module);
        }
        if (orderItem == null && itemIssuance != null) {
          orderItem=itemIssuance.getRelatedOne("OrderItem");
        }
 else         if ((orderItem == null) && (shipmentReceipt != null)) {
          orderItem=shipmentReceipt.getRelatedOne("OrderItem");
        }
 else         if ((orderItem == null) && (itemIssuance == null) && (shipmentReceipt == null)) {
          Debug.logError("Cannot create invoice when orderItem, itemIssuance, and shipmentReceipt are all null",module);
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingIllegalValuesPassedToCreateInvoiceService",locale));
        }
        GenericValue product=null;
        if (orderItem.get("productId") != null) {
          product=orderItem.getRelatedOne("Product");
        }
        BigDecimal orderedQuantity=orderItem.getBigDecimal("quantity");
        BigDecimal billingQuantity=null;
        if (itemIssuance != null) {
          billingQuantity=itemIssuance.getBigDecimal("quantity");
          BigDecimal cancelQty=itemIssuance.getBigDecimal("cancelQuantity");
          if (cancelQty == null) {
            cancelQty=ZERO;
          }
          billingQuantity=billingQuantity.subtract(cancelQty).setScale(decimals,rounding);
        }
 else         if (shipmentReceipt != null) {
          billingQuantity=shipmentReceipt.getBigDecimal("quantityAccepted");
        }
 else {
          billingQuantity=orderedQuantity;
        }
        if (orderedQuantity == null)         orderedQuantity=ZERO;
        if (billingQuantity == null)         billingQuantity=ZERO;
        boolean shippingApplies=false;
        if ((product != null) && (ProductWorker.shippingApplies(product)) && (invoiceType.equals("SALES_INVOICE"))) {
          shippingApplies=true;
        }
        BigDecimal billingAmount=orderItem.getBigDecimal("unitPrice").setScale(invoiceTypeDecimals,rounding);
        Map createInvoiceItemContext=FastMap.newInstance();
        createInvoiceItemContext.put("invoiceId",invoiceId);
        createInvoiceItemContext.put("invoiceItemSeqId",invoiceItemSeqId);
        createInvoiceItemContext.put("invoiceItemTypeId",getInvoiceItemType(delegator,(orderItem == null ? null : orderItem.getString("orderItemTypeId")),(product == null ? null : product.getString("productTypeId")),invoiceType,"INV_FPROD_ITEM"));
        createInvoiceItemContext.put("description",orderItem.get("itemDescription"));
        createInvoiceItemContext.put("quantity",new Double(billingQuantity.doubleValue()));
        createInvoiceItemContext.put("amount",new Double(billingAmount.doubleValue()));
        createInvoiceItemContext.put("productId",orderItem.get("productId"));
        createInvoiceItemContext.put("productFeatureId",orderItem.get("productFeatureId"));
        createInvoiceItemContext.put("overrideGlAccountId",orderItem.get("overrideGlAccountId"));
        createInvoiceItemContext.put("userLogin",userLogin);
        String itemIssuanceId=null;
        if (itemIssuance != null && itemIssuance.get("inventoryItemId") != null) {
          itemIssuanceId=itemIssuance.getString("itemIssuanceId");
          createInvoiceItemContext.put("inventoryItemId",itemIssuance.get("inventoryItemId"));
        }
        if ((product != null) && (invoiceType.equals("SALES_INVOICE"))) {
          createInvoiceItemContext.put("taxableFlag",product.get("taxable"));
        }
        Map createInvoiceItemResult=dispatcher.runSync("createInvoiceItem",createInvoiceItemContext);
        if (ServiceUtil.isError(createInvoiceItemResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceItemFromOrder",locale),null,null,createInvoiceItemResult);
        }
        BigDecimal thisAmount=billingAmount.multiply(billingQuantity).setScale(invoiceTypeDecimals,rounding);
        if (shippingApplies) {
          invoiceShipProRateAmount=invoiceShipProRateAmount.add(thisAmount).setScale(invoiceTypeDecimals,rounding);
        }
        invoiceSubTotal=invoiceSubTotal.add(thisAmount).setScale(100,rounding);
        invoiceQuantity=invoiceQuantity.add(billingQuantity).setScale(invoiceTypeDecimals,rounding);
        Map createOrderItemBillingContext=FastMap.newInstance();
        createOrderItemBillingContext.put("invoiceId",invoiceId);
        createOrderItemBillingContext.put("invoiceItemSeqId",invoiceItemSeqId);
        createOrderItemBillingContext.put("orderId",orderItem.get("orderId"));
        createOrderItemBillingContext.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
        createOrderItemBillingContext.put("itemIssuanceId",itemIssuanceId);
        createOrderItemBillingContext.put("quantity",new Double(billingQuantity.doubleValue()));
        createOrderItemBillingContext.put("amount",new Double(billingAmount.doubleValue()));
        createOrderItemBillingContext.put("userLogin",userLogin);
        if ((shipmentReceipt != null) && (shipmentReceipt.getString("receiptId") != null)) {
          createOrderItemBillingContext.put("shipmentReceiptId",shipmentReceipt.getString("receiptId"));
        }
        Map createOrderItemBillingResult=dispatcher.runSync("createOrderItemBilling",createOrderItemBillingContext);
        if (ServiceUtil.isError(createOrderItemBillingResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingOrderItemBillingFromOrder",locale),null,null,createOrderItemBillingResult);
        }
        if ("ItemIssuance".equals(currentValue.getEntityName())) {
          GenericValue shipmentItemBilling=delegator.makeValue("ShipmentItemBilling",UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId));
          shipmentItemBilling.put("shipmentId",currentValue.get("shipmentId"));
          shipmentItemBilling.put("shipmentItemSeqId",currentValue.get("shipmentItemSeqId"));
          shipmentItemBilling.create();
        }
        String parentInvoiceItemSeqId=invoiceItemSeqId;
        invoiceItemSeqNum++;
        invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
        GenericValue originalOrderItem=delegator.findByPrimaryKey("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId")));
        List itemAdjustments=OrderReadHelper.getOrderItemAdjustmentList(orderItem,orh.getAdjustments());
        Iterator itemAdjIter=itemAdjustments.iterator();
        while (itemAdjIter.hasNext()) {
          GenericValue adj=(GenericValue)itemAdjIter.next();
          BigDecimal adjAlreadyInvoicedAmount=null;
          try {
            Map checkResult=dispatcher.runSync("calculateInvoicedAdjustmentTotal",UtilMisc.toMap("orderAdjustment",adj));
            adjAlreadyInvoicedAmount=(BigDecimal)checkResult.get("invoicedTotal");
          }
 catch (          GenericServiceException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCalculateInvoicedAdjustmentTotalService",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          if (adj.get("amount") == null) {
            continue;
          }
          if (adjAlreadyInvoicedAmount.abs().compareTo(adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,rounding).abs()) > 0) {
            continue;
          }
          BigDecimal amount=ZERO;
          if (adj.get("amount") != null) {
            amount=adj.getBigDecimal("amount").divide(originalOrderItem.getBigDecimal("quantity"),100,rounding);
            amount=amount.multiply(billingQuantity);
            if (adj.getString("orderAdjustmentTypeId").equals("SALES_TAX")) {
              amount=amount.setScale(taxDecimals,taxRounding);
            }
 else {
              amount=amount.setScale(invoiceTypeDecimals,rounding);
            }
          }
 else           if (adj.get("sourcePercentage") != null) {
            BigDecimal percent=adj.getBigDecimal("sourcePercentage");
            percent=percent.divide(new BigDecimal(100),100,rounding);
            amount=billingAmount.multiply(percent);
            amount=amount.divide(originalOrderItem.getBigDecimal("quantity"),100,rounding);
            amount=amount.multiply(billingQuantity);
            amount=amount.setScale(invoiceTypeDecimals,rounding);
          }
          if (amount.signum() != 0) {
            Map createInvoiceItemAdjContext=FastMap.newInstance();
            createInvoiceItemAdjContext.put("invoiceId",invoiceId);
            createInvoiceItemAdjContext.put("invoiceItemSeqId",invoiceItemSeqId);
            createInvoiceItemAdjContext.put("invoiceItemTypeId",getInvoiceItemType(delegator,adj.getString("orderAdjustmentTypeId"),null,invoiceType,"INVOICE_ITM_ADJ"));
            createInvoiceItemAdjContext.put("quantity",new Double(1));
            createInvoiceItemAdjContext.put("amount",new Double(amount.doubleValue()));
            createInvoiceItemAdjContext.put("productId",orderItem.get("productId"));
            createInvoiceItemAdjContext.put("productFeatureId",orderItem.get("productFeatureId"));
            createInvoiceItemAdjContext.put("overrideGlAccountId",adj.get("overrideGlAccountId"));
            createInvoiceItemAdjContext.put("parentInvoiceId",invoiceId);
            createInvoiceItemAdjContext.put("parentInvoiceItemSeqId",parentInvoiceItemSeqId);
            createInvoiceItemAdjContext.put("userLogin",userLogin);
            createInvoiceItemAdjContext.put("taxAuthPartyId",adj.get("taxAuthPartyId"));
            createInvoiceItemAdjContext.put("taxAuthGeoId",adj.get("taxAuthGeoId"));
            createInvoiceItemAdjContext.put("taxAuthorityRateSeqId",adj.get("taxAuthorityRateSeqId"));
            String description=(UtilValidate.isEmpty(adj.getString("description")) ? adj.getString("comments") : adj.getString("description"));
            createInvoiceItemAdjContext.put("description",description);
            if (!(adj.getString("orderAdjustmentTypeId").equals("SALES_TAX"))) {
              createInvoiceItemAdjContext.put("taxableFlag",product.get("taxable"));
            }
            if (UtilValidate.isNotEmpty(adj.getString("productPromoId"))) {
              try {
                GenericValue productPromo=adj.getRelatedOne("ProductPromo");
                if (UtilValidate.isNotEmpty(productPromo.getString("overrideOrgPartyId"))) {
                  createInvoiceItemAdjContext.put("overrideOrgPartyId",productPromo.getString("overrideOrgPartyId"));
                }
              }
 catch (              GenericEntityException e) {
                Debug.logError(e,"Error looking up ProductPromo with id [" + adj.getString("productPromoId") + "]",module);
              }
            }
            Map createInvoiceItemAdjResult=dispatcher.runSync("createInvoiceItem",createInvoiceItemAdjContext);
            if (ServiceUtil.isError(createInvoiceItemAdjResult)) {
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceItemFromOrder",locale),null,null,createInvoiceItemAdjResult);
            }
            Map createOrderAdjustmentBillingContext=FastMap.newInstance();
            createOrderAdjustmentBillingContext.put("orderAdjustmentId",adj.getString("orderAdjustmentId"));
            createOrderAdjustmentBillingContext.put("invoiceId",invoiceId);
            createOrderAdjustmentBillingContext.put("invoiceItemSeqId",invoiceItemSeqId);
            createOrderAdjustmentBillingContext.put("amount",new Double(amount.doubleValue()));
            createOrderAdjustmentBillingContext.put("userLogin",userLogin);
            Map createOrderAdjustmentBillingResult=dispatcher.runSync("createOrderAdjustmentBilling",createOrderAdjustmentBillingContext);
            if (ServiceUtil.isError(createOrderAdjustmentBillingResult)) {
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingOrderAdjustmentBillingFromOrder",locale),null,null,createOrderAdjustmentBillingContext);
            }
            BigDecimal thisAdjAmount=new BigDecimal(amount.doubleValue());
            if (!"SALES_TAX".equals(adj.getString("orderAdjustmentTypeId")) && !"SHIPPING_ADJUSTMENT".equals(adj.getString("orderAdjustmentTypeId"))) {
              invoiceSubTotal=invoiceSubTotal.add(thisAdjAmount).setScale(100,rounding);
              if (shippingApplies) {
                invoiceShipProRateAmount=invoiceShipProRateAmount.add(thisAdjAmount).setScale(invoiceTypeDecimals,rounding);
              }
            }
            invoiceItemSeqNum++;
            invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
          }
        }
      }
    }
    Map shipAdjustments=new HashMap();
    Map taxAdjustments=new HashMap();
    List headerAdjustments=orh.getOrderHeaderAdjustments();
    Iterator headerAdjIter=headerAdjustments.iterator();
    while (headerAdjIter.hasNext()) {
      GenericValue adj=(GenericValue)headerAdjIter.next();
      BigDecimal adjAlreadyInvoicedAmount=null;
      try {
        Map checkResult=dispatcher.runSync("calculateInvoicedAdjustmentTotal",UtilMisc.toMap("orderAdjustment",adj));
        adjAlreadyInvoicedAmount=((BigDecimal)checkResult.get("invoicedTotal")).setScale(invoiceTypeDecimals,rounding);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCalculateInvoicedAdjustmentTotalService",locale);
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      if (null == adj.get("amount")) {
        continue;
      }
      if (adjAlreadyInvoicedAmount.abs().compareTo(adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,rounding).abs()) > 0) {
        continue;
      }
      if ("SHIPPING_CHARGES".equals(adj.getString("orderAdjustmentTypeId"))) {
        shipAdjustments.put(adj,adjAlreadyInvoicedAmount);
      }
 else       if ("SALES_TAX".equals(adj.getString("orderAdjustmentTypeId"))) {
        taxAdjustments.put(adj,adjAlreadyInvoicedAmount);
      }
 else {
        BigDecimal adjAmount=calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,orderSubTotal,invoiceSubTotal,adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,rounding),invoiceTypeDecimals,rounding,userLogin,dispatcher,locale);
        invoiceItemSeqNum++;
        invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
      }
    }
    Iterator shipAdjIter=shipAdjustments.keySet().iterator();
    while (shipAdjIter.hasNext()) {
      GenericValue adj=(GenericValue)shipAdjIter.next();
      BigDecimal adjAlreadyInvoicedAmount=(BigDecimal)shipAdjustments.get(adj);
      if ("N".equalsIgnoreCase(prorateShipping)) {
        BigDecimal divisor=BigDecimal.ONE;
        BigDecimal multiplier=BigDecimal.ONE;
        BigDecimal baseAmount=adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,rounding).subtract(adjAlreadyInvoicedAmount);
        BigDecimal adjAmount=calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,invoiceTypeDecimals,rounding,userLogin,dispatcher,locale);
      }
 else {
        BigDecimal divisor=shippableAmount;
        BigDecimal multiplier=invoiceShipProRateAmount;
        BigDecimal baseAmount=adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,rounding);
        BigDecimal adjAmount=calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,invoiceTypeDecimals,rounding,userLogin,dispatcher,locale);
      }
      invoiceItemSeqNum++;
      invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    }
    String prorateTaxes=productStore.getString("prorateTaxes");
    if (prorateTaxes == null) {
      prorateTaxes="Y";
    }
    Iterator taxAdjIter=taxAdjustments.keySet().iterator();
    while (taxAdjIter.hasNext()) {
      GenericValue adj=(GenericValue)taxAdjIter.next();
      BigDecimal adjAlreadyInvoicedAmount=(BigDecimal)taxAdjustments.get(adj);
      BigDecimal adjAmount=null;
      if ("N".equalsIgnoreCase(prorateTaxes)) {
        BigDecimal divisor=BigDecimal.ONE;
        BigDecimal multiplier=BigDecimal.ONE;
        BigDecimal baseAmount=adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,rounding).subtract(adjAlreadyInvoicedAmount);
        adjAmount=calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,invoiceTypeDecimals,rounding,userLogin,dispatcher,locale);
      }
 else {
        BigDecimal divisor=orderSubTotal;
        BigDecimal multiplier=invoiceSubTotal;
        BigDecimal baseAmount=adj.getBigDecimal("amount").setScale(invoiceTypeDecimals,rounding);
        adjAmount=calcHeaderAdj(delegator,adj,invoiceType,invoiceId,invoiceItemSeqId,divisor,multiplier,baseAmount,invoiceTypeDecimals,rounding,userLogin,dispatcher,locale);
      }
      invoiceSubTotal=invoiceSubTotal.add(adjAmount).setScale(invoiceTypeDecimals,rounding);
      invoiceItemSeqNum++;
      invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    }
    List orderPaymentPrefs=delegator.findByAnd("OrderPaymentPreference",UtilMisc.toMap("orderId",orderId));
    if (orderPaymentPrefs != null) {
      List currentPayments=new ArrayList();
      Iterator opi=orderPaymentPrefs.iterator();
      while (opi.hasNext()) {
        GenericValue paymentPref=(GenericValue)opi.next();
        List payments=paymentPref.getRelated("Payment");
        currentPayments.addAll(payments);
      }
      if (currentPayments.size() > 0) {
        Iterator cpi=currentPayments.iterator();
        while (cpi.hasNext()) {
          GenericValue payment=(GenericValue)cpi.next();
          List currentApplications=null;
          currentApplications=payment.getRelated("PaymentApplication");
          if (currentApplications == null || currentApplications.size() == 0) {
            Map appl=new HashMap();
            appl.put("paymentId",payment.get("paymentId"));
            appl.put("invoiceId",invoiceId);
            appl.put("billingAccountId",billingAccountId);
            appl.put("amountApplied",payment.get("amount"));
            appl.put("userLogin",userLogin);
            Map createPayApplResult=dispatcher.runSync("createPaymentApplication",appl);
            if (ServiceUtil.isError(createPayApplResult)) {
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,createPayApplResult);
            }
          }
        }
      }
    }
    boolean autoApproveInvoice=UtilValidate.isEmpty(productStore.get("autoApproveInvoice")) || "Y".equals(productStore.getString("autoApproveInvoice"));
    if (autoApproveInvoice) {
      String nextStatusId="INVOICE_READY";
      if (invoiceType.equals("PURCHASE_INVOICE")) {
        nextStatusId="INVOICE_IN_PROCESS";
      }
      Map setInvoiceStatusResult=dispatcher.runSync("setInvoiceStatus",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"statusId",nextStatusId,"userLogin",userLogin));
      if (ServiceUtil.isError(setInvoiceStatusResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,setInvoiceStatusResult);
      }
    }
    Map checkResp=dispatcher.runSync("checkInvoicePaymentApplications",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"userLogin",userLogin));
    if (ServiceUtil.isError(checkResp)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrderCheckPaymentAppl",locale),null,null,checkResp);
    }
    Map resp=ServiceUtil.returnSuccess();
    resp.put("invoiceId",invoiceId);
    return resp;
  }
 catch (  GenericEntityException e) {
    String errMsg=UtilProperties.getMessage(resource,"AccountingEntityDataProblemCreatingInvoiceFromOrderItems",UtilMisc.toMap("reason",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  GenericServiceException e) {
    String errMsg=UtilProperties.getMessage(resource,"AccountingServiceOtherProblemCreatingInvoiceFromOrderItems",UtilMisc.toMap("reason",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
}
