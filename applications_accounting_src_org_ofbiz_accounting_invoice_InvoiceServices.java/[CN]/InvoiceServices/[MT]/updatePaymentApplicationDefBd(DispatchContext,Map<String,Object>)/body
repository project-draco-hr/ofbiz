{
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  if (DECIMALS == -1 || ROUNDING == -1) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingAritmeticPropertiesNotConfigured",locale));
  }
  if (!context.containsKey("useHighestAmount")) {
    context.put("useHighestAmount","Y");
  }
  String defaultInvoiceProcessing=EntityUtilProperties.getPropertyValue("AccountingConfig","invoiceProcessing",delegator);
  boolean debug=true;
  String changeProcessing=(String)context.get("invoiceProcessing");
  String invoiceId=(String)context.get("invoiceId");
  String invoiceItemSeqId=(String)context.get("invoiceItemSeqId");
  String paymentId=(String)context.get("paymentId");
  String toPaymentId=(String)context.get("toPaymentId");
  String paymentApplicationId=(String)context.get("paymentApplicationId");
  BigDecimal amountApplied=(BigDecimal)context.get("amountApplied");
  String billingAccountId=(String)context.get("billingAccountId");
  String taxAuthGeoId=(String)context.get("taxAuthGeoId");
  String useHighestAmount=(String)context.get("useHighestAmount");
  List<String> errorMessageList=FastList.newInstance();
  if (debug)   Debug.logInfo("updatePaymentApplicationDefBd input parameters..." + " defaultInvoiceProcessing: " + defaultInvoiceProcessing + " changeDefaultInvoiceProcessing: "+ changeProcessing+ " useHighestAmount: "+ useHighestAmount+ " paymentApplicationId: "+ paymentApplicationId+ " PaymentId: "+ paymentId+ " InvoiceId: "+ invoiceId+ " InvoiceItemSeqId: "+ invoiceItemSeqId+ " BillingAccountId: "+ billingAccountId+ " toPaymentId: "+ toPaymentId+ " amountApplied: "+ amountApplied+ " TaxAuthGeoId: "+ taxAuthGeoId,module);
  if (changeProcessing == null) {
    changeProcessing="N";
  }
  boolean invoiceProcessing=true;
  if (defaultInvoiceProcessing.equals("YY")) {
    invoiceProcessing=true;
  }
 else   if (defaultInvoiceProcessing.equals("NN")) {
    invoiceProcessing=false;
  }
 else   if (defaultInvoiceProcessing.equals("Y")) {
    invoiceProcessing=!"Y".equals(changeProcessing);
  }
 else   if (defaultInvoiceProcessing.equals("N")) {
    invoiceProcessing="Y".equals(changeProcessing);
  }
  if (paymentApplicationId == null) {
    int count=0;
    if (invoiceId != null)     count++;
    if (toPaymentId != null)     count++;
    if (billingAccountId != null)     count++;
    if (taxAuthGeoId != null)     count++;
    if ((billingAccountId != null) && (invoiceId != null))     count--;
    if (count != 1) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingSpecifyInvoiceToPaymentBillingAccountTaxGeoId",locale));
    }
  }
  if (amountApplied == null)   amountApplied=ZERO;
  if (invoiceId == null)   invoiceItemSeqId=null;
  BigDecimal paymentApplyAvailable=ZERO;
  BigDecimal amountAppliedMax=ZERO;
  GenericValue payment=null;
  String currencyUomId=null;
  if (paymentId == null || paymentId.equals("")) {
    errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentIdBlankNotSupplied",locale));
  }
 else {
    try {
      payment=EntityQuery.use(delegator).from("Payment").where("paymentId",paymentId).queryOne();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (payment == null) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentRecordNotFound",UtilMisc.toMap("paymentId",paymentId),locale));
    }
    paymentApplyAvailable=payment.getBigDecimal("amount").subtract(PaymentWorker.getPaymentApplied(payment)).setScale(DECIMALS,ROUNDING);
    if (payment.getString("statusId").equals("PMNT_CANCELLED")) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentCancelled",UtilMisc.toMap("paymentId",paymentId),locale));
    }
    if (payment.getString("statusId").equals("PMNT_CONFIRMED")) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentConfirmed",UtilMisc.toMap("paymentId",paymentId),locale));
    }
    currencyUomId=payment.getString("currencyUomId");
    if (amountApplied.signum() == 0) {
      amountAppliedMax=paymentApplyAvailable;
    }
  }
  BigDecimal toPaymentApplyAvailable=ZERO;
  GenericValue toPayment=null;
  if (toPaymentId != null && !toPaymentId.equals("")) {
    try {
      toPayment=EntityQuery.use(delegator).from("Payment").where("paymentId",toPaymentId).queryOne();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (toPayment == null) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentRecordNotFound",UtilMisc.toMap("paymentId",toPaymentId),locale));
    }
    toPaymentApplyAvailable=toPayment.getBigDecimal("amount").subtract(PaymentWorker.getPaymentApplied(toPayment)).setScale(DECIMALS,ROUNDING);
    if (toPayment.getString("statusId").equals("PMNT_CANCELLED")) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentCancelled",UtilMisc.toMap("paymentId",paymentId),locale));
    }
    if (toPayment.getString("statusId").equals("PMNT_CONFIRMED")) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentConfirmed",UtilMisc.toMap("paymentId",paymentId),locale));
    }
    if (amountAppliedMax.compareTo(toPaymentApplyAvailable) > 0) {
      amountAppliedMax=toPaymentApplyAvailable;
    }
    if (paymentApplicationId == null) {
      if (toPaymentApplyAvailable.signum() == 0) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentAlreadyApplied",UtilMisc.toMap("paymentId",toPaymentId),locale));
      }
 else {
        if (amountApplied.compareTo(toPaymentApplyAvailable) > 0) {
          errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentLessRequested",UtilMisc.<String,Object>toMap("paymentId",toPaymentId,"paymentApplyAvailable",toPaymentApplyAvailable,"amountApplied",amountApplied,"isoCode",currencyUomId),locale));
        }
      }
    }
    if (!payment.getString("partyIdFrom").equals(toPayment.getString("partyIdTo")) && !payment.getString("partyIdTo").equals(toPayment.getString("partyIdFrom"))) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingFromPartySameToParty",locale));
    }
    if (debug)     Debug.logInfo("toPayment info retrieved and checked...",module);
  }
  if (invoiceId != null) {
    GenericValue invoice=null;
    try {
      invoice=EntityQuery.use(delegator).from("Invoice").where("invoiceId",invoiceId).queryOne();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (invoice == null) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceNotFound",UtilMisc.toMap("invoiceId",invoiceId),locale));
    }
 else {
      if (invoice.getString("billingAccountId") != null) {
        billingAccountId=invoice.getString("billingAccountId");
      }
    }
  }
  GenericValue billingAccount=null;
  if (billingAccountId != null && !billingAccountId.equals("")) {
    try {
      billingAccount=EntityQuery.use(delegator).from("BillingAccount").where("billingAccountId",billingAccountId).queryOne();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (billingAccount == null) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingBillingAccountNotFound",UtilMisc.toMap("billingAccountId",billingAccountId),locale));
    }
    if (billingAccount.get("accountCurrencyUomId") != null && currencyUomId != null && !billingAccount.getString("accountCurrencyUomId").equals(currencyUomId)) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingBillingAccountCurrencyProblem",UtilMisc.toMap("billingAccountId",billingAccountId,"accountCurrencyUomId",billingAccount.getString("accountCurrencyUomId"),"paymentId",paymentId,"paymentCurrencyUomId",currencyUomId),locale));
    }
    if (debug)     Debug.logInfo("Billing Account info retrieved and checked...",module);
  }
  BigDecimal invoiceApplyAvailable=ZERO;
  BigDecimal invoiceItemApplyAvailable=ZERO;
  GenericValue invoice=null;
  GenericValue invoiceItem=null;
  if (invoiceId != null) {
    try {
      invoice=EntityQuery.use(delegator).from("Invoice").where("invoiceId",invoiceId).queryOne();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (invoice == null) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceNotFound",UtilMisc.toMap("invoiceId",invoiceId),locale));
    }
 else {
      if (invoice.getString("statusId").equals("INVOICE_CANCELLED")) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceCancelledCannotApplyTo",UtilMisc.toMap("invoiceId",invoiceId),locale));
      }
      if (currencyUomId != null && invoice.get("currencyUomId") != null && !currencyUomId.equals(invoice.getString("currencyUomId"))) {
        Debug.logInfo(UtilProperties.getMessage(resource,"AccountingInvoicePaymentCurrencyProblem",UtilMisc.toMap("invoiceCurrency",invoice.getString("currencyUomId"),"paymentCurrency",payment.getString("currencyUomId")),locale),module);
        Debug.logInfo("will try to apply payment on the actualCurrency amount on payment",module);
        if (payment.get("actualCurrencyAmount") == null || payment.get("actualCurrencyUomId") == null) {
          errorMessageList.add("Actual amounts are required in the currency of the invoice to make this work....");
        }
 else {
          currencyUomId=payment.getString("actualCurrencyUomId");
          if (!currencyUomId.equals(invoice.getString("currencyUomId"))) {
            errorMessageList.add("actual currency on payment (" + currencyUomId + ") not the same as original invoice currency ("+ invoice.getString("currencyUomId")+ ")");
          }
        }
        paymentApplyAvailable=payment.getBigDecimal("actualCurrencyAmount").subtract(PaymentWorker.getPaymentApplied(payment)).setScale(DECIMALS,ROUNDING);
        if (amountApplied.signum() == 0) {
          amountAppliedMax=paymentApplyAvailable;
        }
      }
      BigDecimal invoiceTotal=InvoiceWorker.getInvoiceTotal(invoice);
      invoiceApplyAvailable=InvoiceWorker.getInvoiceNotApplied(invoice);
      if (invoiceApplyAvailable.compareTo(amountAppliedMax) < 0) {
        amountAppliedMax=invoiceApplyAvailable;
      }
      if (invoiceTotal.signum() == 0) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceTotalZero",UtilMisc.toMap("invoiceId",invoiceId),locale));
      }
 else       if (paymentApplicationId == null) {
        if (invoiceApplyAvailable.signum() == 0) {
          errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceCompletelyApplied",UtilMisc.toMap("invoiceId",invoiceId),locale));
        }
 else         if (amountApplied.compareTo(invoiceApplyAvailable) > 0) {
          errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceLessRequested",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"invoiceApplyAvailable",invoiceApplyAvailable,"amountApplied",amountApplied,"isoCode",invoice.getString("currencyUomId")),locale));
        }
      }
      if (!payment.getString("partyIdFrom").equals(invoice.getString("partyId")) && !payment.getString("partyIdTo").equals(invoice.getString("partyIdFrom"))) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingFromPartySameToParty",locale));
      }
      if (debug)       Debug.logInfo("Invoice info retrieved and checked ...",module);
    }
    if (invoiceItemSeqId != null) {
      try {
        invoiceItem=EntityQuery.use(delegator).from("InvoiceItem").where("invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId).queryOne();
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
      if (invoiceItem == null) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceItemNotFound",UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId),locale));
      }
 else {
        if (invoice.get("currencyUomId") != null && currencyUomId != null && !invoice.getString("currencyUomId").equals(currencyUomId)) {
          errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoicePaymentCurrencyProblem",UtilMisc.toMap("paymentCurrencyId",currencyUomId,"itemCurrency",invoice.getString("currencyUomId")),locale));
        }
        BigDecimal quantity=null;
        if (invoiceItem.get("quantity") == null) {
          quantity=BigDecimal.ONE;
        }
 else {
          quantity=invoiceItem.getBigDecimal("quantity").setScale(DECIMALS,ROUNDING);
        }
        invoiceItemApplyAvailable=invoiceItem.getBigDecimal("amount").multiply(quantity).setScale(DECIMALS,ROUNDING).subtract(InvoiceWorker.getInvoiceItemApplied(invoiceItem));
        if (paymentApplicationId == null && amountApplied.compareTo(invoiceItemApplyAvailable) > 0) {
          errorMessageList.add("Invoice(" + invoiceId + ") item("+ invoiceItemSeqId+ ") has  "+ invoiceItemApplyAvailable+ " to apply but "+ amountApplied+ " is requested\n");
          String uomId=invoice.getString("currencyUomId");
          errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceItemLessRequested",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId,"invoiceItemApplyAvailable",invoiceItemApplyAvailable,"amountApplied",amountApplied,"isoCode",uomId),locale));
        }
      }
      if (debug)       Debug.logInfo("InvoiceItem info retrieved and checked against the Invoice (currency and amounts) ...",module);
    }
  }
  if (paymentApplicationId == null) {
    if (paymentApplyAvailable.signum() == 0) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentAlreadyApplied",UtilMisc.toMap("paymentId",paymentId),locale));
    }
 else {
      if (amountApplied.compareTo(paymentApplyAvailable) > 0) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentLessRequested",UtilMisc.<String,Object>toMap("paymentId",paymentId,"paymentApplyAvailable",paymentApplyAvailable,"amountApplied",amountApplied,"isoCode",currencyUomId),locale));
      }
    }
  }
  BigDecimal newInvoiceApplyAvailable=invoiceApplyAvailable;
  BigDecimal newInvoiceItemApplyAvailable=invoiceItemApplyAvailable;
  BigDecimal newToPaymentApplyAvailable=toPaymentApplyAvailable;
  BigDecimal newPaymentApplyAvailable=paymentApplyAvailable;
  GenericValue paymentApplication=null;
  if (paymentApplicationId == null) {
    paymentApplication=delegator.makeValue("PaymentApplication");
  }
 else {
    try {
      paymentApplication=EntityQuery.use(delegator).from("PaymentApplication").where("paymentApplicationId",paymentApplicationId).queryOne();
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    if (paymentApplication == null) {
      errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentApplicationNotFound",UtilMisc.toMap("paymentApplicationId",paymentApplicationId),locale));
      paymentApplicationId=null;
    }
 else {
      if (paymentApplication.get("invoiceId") == null && invoiceId != null) {
        billingAccountId=null;
        taxAuthGeoId=null;
        toPaymentId=null;
      }
 else       if (paymentApplication.get("toPaymentId") == null && toPaymentId != null) {
        invoiceId=null;
        invoiceItemSeqId=null;
        taxAuthGeoId=null;
        billingAccountId=null;
      }
 else       if (paymentApplication.get("billingAccountId") == null && billingAccountId != null) {
        invoiceId=null;
        invoiceItemSeqId=null;
        toPaymentId=null;
        taxAuthGeoId=null;
      }
 else       if (paymentApplication.get("taxAuthGeoId") == null && taxAuthGeoId != null) {
        invoiceId=null;
        invoiceItemSeqId=null;
        toPaymentId=null;
        billingAccountId=null;
      }
      if (paymentApplyAvailable.compareTo(ZERO) == 0) {
        newPaymentApplyAvailable=paymentApplyAvailable.add(paymentApplication.getBigDecimal("amountApplied")).subtract(amountApplied).setScale(DECIMALS,ROUNDING);
      }
 else {
        newPaymentApplyAvailable=paymentApplyAvailable.add(paymentApplyAvailable).subtract(amountApplied).setScale(DECIMALS,ROUNDING);
      }
      if (newPaymentApplyAvailable.compareTo(ZERO) < 0) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentNotEnough",UtilMisc.<String,Object>toMap("paymentId",paymentId,"paymentApplyAvailable",paymentApplyAvailable.add(paymentApplication.getBigDecimal("amountApplied")),"amountApplied",amountApplied),locale));
      }
      if (invoiceId != null) {
        if (invoiceId.equals(paymentApplication.getString("invoiceId"))) {
          if (invoiceItemSeqId == null && paymentApplication.get("invoiceItemSeqId") == null) {
            newInvoiceApplyAvailable=invoiceApplyAvailable.add(paymentApplication.getBigDecimal("amountApplied")).subtract(amountApplied).setScale(DECIMALS,ROUNDING);
            if (invoiceApplyAvailable.compareTo(ZERO) < 0) {
              errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceNotEnough",UtilMisc.<String,Object>toMap("tooMuch",newInvoiceApplyAvailable.negate(),"invoiceId",invoiceId),locale));
            }
          }
 else           if (invoiceItemSeqId == null && paymentApplication.get("invoiceItemSeqId") != null) {
            newInvoiceApplyAvailable=invoiceApplyAvailable.add(paymentApplication.getBigDecimal("amountApplied")).subtract(amountApplied).setScale(DECIMALS,ROUNDING);
            if (invoiceApplyAvailable.compareTo(ZERO) < 0) {
              errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceNotEnough",UtilMisc.<String,Object>toMap("tooMuch",newInvoiceApplyAvailable.negate(),"invoiceId",invoiceId),locale));
            }
          }
 else           if (invoiceItemSeqId != null && paymentApplication.get("invoiceItemSeqId") == null) {
            newInvoiceItemApplyAvailable=invoiceItemApplyAvailable.subtract(amountApplied).setScale(DECIMALS,ROUNDING);
            if (newInvoiceItemApplyAvailable.compareTo(ZERO) < 0) {
              errorMessageList.add(UtilProperties.getMessage(resource,"AccountingItemInvoiceNotEnough",UtilMisc.<String,Object>toMap("tooMuch",newInvoiceItemApplyAvailable.negate(),"invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId),locale));
            }
          }
 else           if (invoiceItemSeqId.equals(paymentApplication.getString("invoiceItemSeqId"))) {
            newInvoiceItemApplyAvailable=invoiceItemApplyAvailable.add(paymentApplication.getBigDecimal("amountApplied")).subtract(amountApplied).setScale(DECIMALS,ROUNDING);
            if (newInvoiceItemApplyAvailable.compareTo(ZERO) < 0) {
              errorMessageList.add(UtilProperties.getMessage(resource,"AccountingItemInvoiceNotEnough",UtilMisc.<String,Object>toMap("tooMuch",newInvoiceItemApplyAvailable.negate(),"invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId),locale));
            }
          }
 else {
            newInvoiceItemApplyAvailable=invoiceItemApplyAvailable.add(amountApplied).setScale(DECIMALS,ROUNDING);
            if (newInvoiceItemApplyAvailable.compareTo(ZERO) < 0) {
              errorMessageList.add(UtilProperties.getMessage(resource,"AccountingItemInvoiceNotEnough",UtilMisc.<String,Object>toMap("tooMuch",newInvoiceItemApplyAvailable.negate(),"invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId),locale));
            }
          }
          if (amountApplied.signum() == 0) {
            if (newInvoiceItemApplyAvailable.compareTo(newPaymentApplyAvailable) < 0) {
              amountApplied=newInvoiceItemApplyAvailable;
            }
 else {
              amountApplied=newPaymentApplyAvailable;
            }
          }
          newInvoiceApplyAvailable=invoiceApplyAvailable.add(paymentApplication.getBigDecimal("amountApplied").subtract(amountApplied)).setScale(DECIMALS,ROUNDING);
          if (newInvoiceApplyAvailable.compareTo(ZERO) < 0) {
            errorMessageList.add(UtilProperties.getMessage(resource,"AccountingInvoiceNotEnough",UtilMisc.<String,Object>toMap("tooMuch",invoiceApplyAvailable.add(paymentApplication.getBigDecimal("amountApplied")).subtract(amountApplied),"invoiceId",invoiceId),locale));
          }
        }
      }
      if (toPaymentId != null && toPaymentId.equals(paymentApplication.getString("toPaymentId"))) {
        newToPaymentApplyAvailable=toPaymentApplyAvailable.subtract(paymentApplication.getBigDecimal("amountApplied")).add(amountApplied).setScale(DECIMALS,ROUNDING);
        if (newToPaymentApplyAvailable.compareTo(ZERO) < 0) {
          errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentNotEnough",UtilMisc.<String,Object>toMap("paymentId",toPaymentId,"paymentApplyAvailable",newToPaymentApplyAvailable,"amountApplied",amountApplied),locale));
        }
      }
 else       if (toPaymentId != null) {
        newToPaymentApplyAvailable=toPaymentApplyAvailable.add(amountApplied).setScale(DECIMALS,ROUNDING);
        if (newToPaymentApplyAvailable.compareTo(ZERO) < 0) {
          errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentNotEnough",UtilMisc.<String,Object>toMap("paymentId",toPaymentId,"paymentApplyAvailable",newToPaymentApplyAvailable,"amountApplied",amountApplied),locale));
        }
      }
    }
    if (debug)     Debug.logInfo("paymentApplication record info retrieved and checked...",module);
  }
  String toMessage=null;
  if (debug) {
    String extra="";
    if (invoiceItemSeqId != null) {
      extra=" Invoice item(" + invoiceItemSeqId + ") amount not yet applied: "+ newInvoiceItemApplyAvailable;
    }
    Debug.logInfo("checking finished, start processing with the following data... ",module);
    if (invoiceId != null) {
      Debug.logInfo(" Invoice(" + invoiceId + ") amount not yet applied: "+ newInvoiceApplyAvailable+ extra+ " Payment("+ paymentId+ ") amount not yet applied: "+ newPaymentApplyAvailable+ " Requested amount to apply:"+ amountApplied,module);
      toMessage=UtilProperties.getMessage(resource,"AccountingApplicationToInvoice",UtilMisc.toMap("invoiceId",invoiceId),locale);
      if (extra.length() > 0)       toMessage=UtilProperties.getMessage(resource,"AccountingApplicationToInvoiceItem",UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId),locale);
    }
    if (toPaymentId != null) {
      Debug.logInfo(" toPayment(" + toPaymentId + ") amount not yet applied: "+ newToPaymentApplyAvailable+ " Payment("+ paymentId+ ") amount not yet applied: "+ newPaymentApplyAvailable+ " Requested amount to apply:"+ amountApplied,module);
      toMessage=UtilProperties.getMessage(resource,"AccountingApplicationToPayment",UtilMisc.toMap("paymentId",toPaymentId),locale);
    }
    if (taxAuthGeoId != null) {
      Debug.logInfo(" taxAuthGeoId(" + taxAuthGeoId + ")  Payment("+ paymentId+ ") amount not yet applied: "+ newPaymentApplyAvailable+ " Requested amount to apply:"+ amountApplied,module);
      toMessage=UtilProperties.getMessage(resource,"AccountingApplicationToTax",UtilMisc.toMap("taxAuthGeoId",taxAuthGeoId),locale);
    }
  }
  if (amountApplied.signum() == 0 && useHighestAmount.equals("Y")) {
    amountApplied=newPaymentApplyAvailable;
    if (invoiceId != null && newInvoiceApplyAvailable.compareTo(amountApplied) < 0) {
      amountApplied=newInvoiceApplyAvailable;
      toMessage=UtilProperties.getMessage(resource,"AccountingApplicationToInvoice",UtilMisc.toMap("invoiceId",invoiceId),locale);
    }
    if (toPaymentId != null && newToPaymentApplyAvailable.compareTo(amountApplied) < 0) {
      amountApplied=newToPaymentApplyAvailable;
      toMessage=UtilProperties.getMessage(resource,"AccountingApplicationToPayment",UtilMisc.toMap("paymentId",toPaymentId),locale);
    }
  }
  String successMessage=null;
  if (amountApplied.signum() == 0) {
    errorMessageList.add(UtilProperties.getMessage(resource,"AccountingNoAmount",locale));
  }
 else {
    successMessage=UtilProperties.getMessage(resource,"AccountingApplicationSuccess",UtilMisc.<String,Object>toMap("amountApplied",amountApplied,"paymentId",paymentId,"isoCode",currencyUomId,"toMessage",toMessage),locale);
  }
  if (errorMessageList.size() > 0) {
    return ServiceUtil.returnError(errorMessageList);
  }
  if (paymentApplicationId != null) {
    if (debug)     Debug.logInfo("Process an existing paymentApplication record: " + paymentApplicationId,module);
    paymentApplication.set("invoiceId",invoiceId);
    paymentApplication.set("invoiceItemSeqId",invoiceItemSeqId);
    paymentApplication.set("paymentId",paymentId);
    paymentApplication.set("toPaymentId",toPaymentId);
    paymentApplication.set("amountApplied",amountApplied);
    paymentApplication.set("billingAccountId",billingAccountId);
    paymentApplication.set("taxAuthGeoId",taxAuthGeoId);
    return storePaymentApplication(delegator,paymentApplication,locale);
  }
  if (invoiceId != null && paymentId != null && (invoiceItemSeqId == null)) {
    if (invoiceProcessing) {
      if (debug)       Debug.logInfo("Try to allocate the payment to the invoice as a whole",module);
      paymentApplication.set("paymentId",paymentId);
      paymentApplication.set("toPaymentId",null);
      paymentApplication.set("invoiceId",invoiceId);
      paymentApplication.set("invoiceItemSeqId",null);
      paymentApplication.set("toPaymentId",null);
      paymentApplication.set("amountApplied",amountApplied);
      paymentApplication.set("billingAccountId",billingAccountId);
      paymentApplication.set("taxAuthGeoId",null);
      if (debug)       Debug.logInfo("creating new paymentapplication",module);
      return storePaymentApplication(delegator,paymentApplication,locale);
    }
 else {
      if (debug)       Debug.logInfo("Try to allocate the payment to the itemnumbers of the invoice",module);
      List<GenericValue> invoiceItems=null;
      try {
        invoiceItems=EntityQuery.use(delegator).from("InvoiceItem").where("invoiceId",invoiceId).queryList();
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
      if (invoiceItems.size() == 0) {
        errorMessageList.add(UtilProperties.getMessage(resource,"AccountingNoInvoiceItemsFoundForInvoice",UtilMisc.toMap("invoiceId",invoiceId),locale));
        return ServiceUtil.returnError(errorMessageList);
      }
 else {
        if (amountApplied.signum() != 0 && amountApplied.compareTo(paymentApplyAvailable) < 0) {
          paymentApplyAvailable=amountApplied;
        }
        for (        GenericValue currentInvoiceItem : invoiceItems) {
          if (paymentApplyAvailable.compareTo(ZERO) > 0) {
            break;
          }
          if (debug)           Debug.logInfo("Start processing item: " + currentInvoiceItem.getString("invoiceItemSeqId"),module);
          BigDecimal itemQuantity=BigDecimal.ONE;
          if (currentInvoiceItem.get("quantity") != null && currentInvoiceItem.getBigDecimal("quantity").signum() != 0) {
            itemQuantity=new BigDecimal(currentInvoiceItem.getString("quantity")).setScale(DECIMALS,ROUNDING);
          }
          BigDecimal itemAmount=currentInvoiceItem.getBigDecimal("amount").setScale(DECIMALS,ROUNDING);
          BigDecimal itemTotal=itemAmount.multiply(itemQuantity).setScale(DECIMALS,ROUNDING);
          List<GenericValue> paymentApplications=null;
          try {
            paymentApplications=currentInvoiceItem.getRelated("PaymentApplication",null,null,false);
          }
 catch (          GenericEntityException e) {
            return ServiceUtil.returnError(e.getMessage());
          }
          BigDecimal tobeApplied=ZERO;
          BigDecimal alreadyApplied=ZERO;
          if (UtilValidate.isNotEmpty(paymentApplications)) {
            Iterator<GenericValue> p=paymentApplications.iterator();
            while (p.hasNext()) {
              paymentApplication=p.next();
              alreadyApplied=alreadyApplied.add(paymentApplication.getBigDecimal("amountApplied").setScale(DECIMALS,ROUNDING));
            }
            tobeApplied=itemTotal.subtract(alreadyApplied).setScale(DECIMALS,ROUNDING);
          }
 else {
            tobeApplied=itemTotal;
          }
          if (debug)           Debug.logInfo("tobeApplied:(" + tobeApplied + ") = "+ "itemTotal("+ itemTotal+ ") - alreadyApplied("+ alreadyApplied+ ") but not more then (nonapplied) paymentAmount("+ paymentApplyAvailable+ ")",module);
          if (tobeApplied.signum() == 0) {
            continue;
          }
          if (paymentApplyAvailable.compareTo(tobeApplied) > 0) {
            paymentApplyAvailable=paymentApplyAvailable.subtract(tobeApplied);
          }
 else {
            tobeApplied=paymentApplyAvailable;
            paymentApplyAvailable=ZERO;
          }
          if (invoice.get("currencyUomId") != null && currencyUomId != null && !invoice.getString("currencyUomId").equals(currencyUomId)) {
            errorMessageList.add("Payment currency (" + currencyUomId + ") and invoice currency("+ invoice.getString("currencyUomId")+ ") not the same\n");
          }
 else {
            paymentApplication.set("paymentApplicationId",null);
            paymentApplication.set("invoiceId",invoiceId);
            paymentApplication.set("invoiceItemSeqId",currentInvoiceItem.getString("invoiceItemSeqId"));
            paymentApplication.set("paymentId",paymentId);
            paymentApplication.set("toPaymentId",toPaymentId);
            paymentApplication.set("amountApplied",tobeApplied);
            paymentApplication.set("billingAccountId",billingAccountId);
            paymentApplication.set("taxAuthGeoId",taxAuthGeoId);
            storePaymentApplication(delegator,paymentApplication,locale);
          }
        }
        if (errorMessageList.size() > 0) {
          return ServiceUtil.returnError(errorMessageList);
        }
 else {
          if (successMessage != null) {
            return ServiceUtil.returnSuccess(successMessage);
          }
 else {
            return ServiceUtil.returnSuccess();
          }
        }
      }
    }
  }
  if (paymentApplicationId == null && amountApplied != null) {
    paymentApplication.set("paymentApplicationId",paymentApplicationId);
    paymentApplication.set("invoiceId",invoiceId);
    paymentApplication.set("invoiceItemSeqId",invoiceItemSeqId);
    paymentApplication.set("paymentId",paymentId);
    paymentApplication.set("toPaymentId",toPaymentId);
    paymentApplication.set("amountApplied",amountApplied);
    paymentApplication.set("billingAccountId",billingAccountId);
    paymentApplication.set("taxAuthGeoId",taxAuthGeoId);
    return storePaymentApplication(delegator,paymentApplication,locale);
  }
  errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentApplicationParameterUnsuitable",locale));
  errorMessageList.add(UtilProperties.getMessage(resource,"AccountingPaymentApplicationParameterListUnsuitable",UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemSeqId",invoiceItemSeqId,"paymentId",paymentId,"toPaymentId",toPaymentId,"paymentApplicationId",paymentApplicationId,"amountApplied",amountApplied),locale));
  return ServiceUtil.returnError(errorMessageList);
}
