{
  List invoiceTerms=new LinkedList();
  if ((terms != null) && (terms.size() > 0)) {
    for (Iterator termsIter=terms.iterator(); termsIter.hasNext(); ) {
      GenericValue term=(GenericValue)termsIter.next();
      Map createInvoiceTermContext=FastMap.newInstance();
      createInvoiceTermContext.put("invoiceId",invoiceId);
      createInvoiceTermContext.put("invoiceItemSeqId","_NA_");
      createInvoiceTermContext.put("termTypeId",term.get("termTypeId"));
      createInvoiceTermContext.put("termValue",term.get("termValue"));
      createInvoiceTermContext.put("termDays",term.get("termDays"));
      if (!"BillingAccountTerm".equals(term.getEntityName())) {
        createInvoiceTermContext.put("textValue",term.get("textValue"));
        createInvoiceTermContext.put("description",term.get("description"));
      }
      createInvoiceTermContext.put("uomId",term.get("uomId"));
      createInvoiceTermContext.put("userLogin",userLogin);
      Map createInvoiceTermResult=null;
      try {
        createInvoiceTermResult=dispatcher.runSync("createInvoiceTerm",createInvoiceTermContext);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(resource,"AccountingServiceErrorCreatingInvoiceTermFromOrder",locale) + ": " + e.toString();
        Debug.logError(e,errMsg,module);
        ServiceUtil.returnError(errMsg);
      }
      if (ServiceUtil.isError(createInvoiceTermResult)) {
        ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceTermFromOrder",locale),null,null,createInvoiceTermResult);
      }
    }
  }
}
