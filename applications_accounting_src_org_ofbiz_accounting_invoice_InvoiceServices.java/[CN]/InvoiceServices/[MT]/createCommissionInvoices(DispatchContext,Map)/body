{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  List invoicesCreated=FastList.newInstance();
  String invoiceIdIn=(String)context.get("invoiceId");
  String invoiceItemSeqIdIn=(String)context.get("invoiceItemSeqId");
  BigDecimal amountTotal=InvoiceWorker.getInvoiceTotal(delegator,invoiceIdIn);
  if (amountTotal.signum() == 0) {
    Debug.logWarning("Invoice [" + invoiceIdIn + "] has an amount total of ["+ amountTotal+ "], so no commission invoice will be created",module);
    return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionZeroInvoiceAmount",locale));
  }
  try {
    BigDecimal appliedFraction=((BigDecimal)context.get("amountApplied")).divide(amountTotal,12,rounding);
    Map inMap=UtilMisc.toMap("invoiceId",invoiceIdIn);
    GenericValue invoice=delegator.findByPrimaryKey("Invoice",inMap);
    String invoiceTypeId=invoice.getString("invoiceTypeId");
    boolean isReturn=false;
    if ("SALES_INVOICE".equals(invoiceTypeId)) {
      isReturn=false;
    }
 else     if ("CUST_RTN_INVOICE".equals(invoiceTypeId)) {
      isReturn=true;
    }
 else {
      Debug.logWarning("This type of invoice has no commission; returning success",module);
      return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionInvalid",locale));
    }
    if (invoiceItemSeqIdIn != null) {
      inMap.put("invoiceItemSeqId",invoiceItemSeqIdIn);
    }
    List invoiceItems=delegator.findByAnd("InvoiceItem",inMap);
    Map commissionParties=FastMap.newInstance();
    Iterator itemIter=invoiceItems.iterator();
    while (itemIter.hasNext()) {
      GenericValue invoiceItem=(GenericValue)itemIter.next();
      BigDecimal amount=ZERO;
      BigDecimal quantity=ZERO;
      quantity=invoiceItem.getBigDecimal("quantity");
      amount=invoiceItem.getBigDecimal("amount");
      amount=isReturn ? amount.negate() : amount;
      String productId=invoiceItem.getString("productId");
      if (productId != null && productId.length() > 0) {
        Map outMap=dispatcher.runSync("getCommissionForProduct",UtilMisc.<String,Object>toMap("productId",productId,"invoiceItemTypeId",invoiceItem.getString("invoiceItemTypeId"),"amount",amount,"quantity",quantity,"userLogin",userLogin));
        if (ServiceUtil.isError(outMap)) {
          return outMap;
        }
        List itemComms=(List)outMap.get("commissions");
        if (UtilValidate.isNotEmpty(itemComms)) {
          Iterator it=itemComms.iterator();
          while (it.hasNext()) {
            Map commMap=(Map)it.next();
            String partyIdFromTo=(String)commMap.get("partyIdFrom") + (String)commMap.get("partyIdTo");
            if (!commissionParties.containsKey(partyIdFromTo)) {
              commissionParties.put(partyIdFromTo,UtilMisc.toList(commMap));
            }
 else {
              ((List)commissionParties.get(partyIdFromTo)).add(commMap);
            }
          }
        }
      }
    }
    String invoiceType="COMMISSION_INVOICE";
    Timestamp now=UtilDateTime.nowTimestamp();
    Iterator it=commissionParties.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pair=(Map.Entry)it.next();
      List toStore=FastList.newInstance();
      List commList=(List)pair.getValue();
      if (UtilValidate.isEmpty(commList)) {
        continue;
      }
      String partyIdBillTo=(String)((Map)commList.get(0)).get("partyIdFrom");
      String partyIdBillFrom=(String)((Map)commList.get(0)).get("partyIdTo");
      Long days=(Long)((Map)commList.get(0)).get("days");
      Map createInvoiceContext=FastMap.newInstance();
      createInvoiceContext.put("partyId",partyIdBillTo);
      createInvoiceContext.put("partyIdFrom",partyIdBillFrom);
      createInvoiceContext.put("invoiceDate",now);
      if (days != null) {
        createInvoiceContext.put("dueDate",UtilDateTime.getDayEnd(now,days));
      }
      createInvoiceContext.put("invoiceTypeId",invoiceType);
      createInvoiceContext.put("statusId","INVOICE_IN_PROCESS");
      createInvoiceContext.put("currencyUomId",invoice.getString("currencyUomId"));
      createInvoiceContext.put("userLogin",userLogin);
      Map createInvoiceResult=dispatcher.runSync("createInvoice",createInvoiceContext);
      if (ServiceUtil.isError(createInvoiceResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionError",locale),null,null,createInvoiceResult);
      }
      String invoiceId=(String)createInvoiceResult.get("invoiceId");
      List contactMechs=delegator.findByAnd("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyIdBillTo,"contactMechPurposeTypeId","BILLING_LOCATION"));
      if (contactMechs.size() > 0) {
        GenericValue address=(GenericValue)contactMechs.get(0);
        GenericValue payToCm=delegator.makeValue("InvoiceContactMech",UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",address.getString("contactMechId"),"contactMechPurposeTypeId","BILLING_LOCATION"));
        toStore.add(payToCm);
      }
      contactMechs=delegator.findByAnd("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyIdBillFrom,"contactMechPurposeTypeId","PAYMENT_LOCATION"));
      if (contactMechs.size() > 0) {
        GenericValue address=(GenericValue)contactMechs.get(0);
        GenericValue payToCm=delegator.makeValue("InvoiceContactMech",UtilMisc.toMap("invoiceId",invoiceId,"contactMechId",address.getString("contactMechId"),"contactMechPurposeTypeId","PAYMENT_LOCATION"));
        toStore.add(payToCm);
      }
      Iterator itt=commList.iterator();
      while (itt.hasNext()) {
        Map elem=(Map)itt.next();
        BigDecimal elemAmount=((BigDecimal)elem.get("commission")).multiply(appliedFraction);
        elemAmount=elemAmount.setScale(decimals,rounding);
        Map resMap=dispatcher.runSync("createInvoiceItem",UtilMisc.toMap("invoiceId",invoiceId,"productId",elem.get("productId"),"invoiceItemTypeId","COMM_INV_ITEM","amount",elemAmount,"userLogin",userLogin));
        if (ServiceUtil.isError(resMap)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceCommissionErrorItem",locale),null,null,resMap);
        }
      }
      delegator.storeAll(toStore);
      invoicesCreated.add(invoiceId);
    }
    Map resp=ServiceUtil.returnSuccess();
    resp.put("invoicesCreated",invoicesCreated);
    return resp;
  }
 catch (  GenericEntityException e) {
    String errMsg=UtilProperties.getMessage(resource,"AccountingInvoiceCommissionEntityDataProblem",UtilMisc.toMap("reason",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  GenericServiceException e) {
    String errMsg=UtilProperties.getMessage(resource,"AccountingInvoiceCommissionEntityDataProblem",UtilMisc.toMap("reason",e.toString()),locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
}
