{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  try {
    List<GenericValue> orderItems=EntityQuery.use(delegator).from("OrderItem").where("orderId",context.get("orderId")).orderBy("orderItemSeqId").queryList();
    if (orderItems.size() > 0) {
      context.put("billItems",orderItems);
    }
    GenericValue userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
    if (userLogin != null) {
      context.put("userLogin",userLogin);
    }
    Map<String,Object> result=dispatcher.runSync("createInvoiceForOrder",context);
    result.remove("invoiceTypeId");
    return result;
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Entity/data problem creating invoice from order items: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingEntityDataProblemCreatingInvoiceFromOrderItems",UtilMisc.toMap("reason",e.toString()),locale));
  }
catch (  GenericEntityException e) {
    Debug.logError(e,"Entity/data problem creating invoice from order items: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingEntityDataProblemCreatingInvoiceFromOrderItems",UtilMisc.toMap("reason",e.toString()),locale));
  }
}
