{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  List<String> shipmentIds=UtilGenerics.checkList(context.get("shipmentIds"));
  Locale locale=(Locale)context.get("locale");
  Boolean createSalesInvoicesForDropShipments=(Boolean)context.get("createSalesInvoicesForDropShipments");
  if (UtilValidate.isEmpty(createSalesInvoicesForDropShipments))   createSalesInvoicesForDropShipments=Boolean.FALSE;
  boolean salesShipmentFound=false;
  boolean purchaseShipmentFound=false;
  boolean dropShipmentFound=false;
  List<String> invoicesCreated=FastList.newInstance();
  for (  String tmpShipmentId : shipmentIds) {
    try {
      GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",tmpShipmentId));
      if ((shipment.getString("shipmentTypeId") != null) && (shipment.getString("shipmentTypeId").equals("PURCHASE_SHIPMENT"))) {
        purchaseShipmentFound=true;
      }
 else       if ((shipment.getString("shipmentTypeId") != null) && (shipment.getString("shipmentTypeId").equals("DROP_SHIPMENT"))) {
        dropShipmentFound=true;
      }
 else {
        salesShipmentFound=true;
      }
      if (purchaseShipmentFound && salesShipmentFound && dropShipmentFound) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingShipmentsOfDifferentTypes",UtilMisc.toMap("tmpShipmentId",tmpShipmentId,"shipmentTypeId",shipment.getString("shipmentTypeId")),locale));
      }
    }
 catch (    GenericEntityException e) {
      String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleGettingShipmentEntity",UtilMisc.toMap("tmpShipmentId",tmpShipmentId),locale);
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  EntityCondition shipmentIdsCond=EntityCondition.makeCondition("shipmentId",EntityOperator.IN,shipmentIds);
  List<GenericValue> items=null;
  List<GenericValue> orderItemAssocs=null;
  try {
    if (purchaseShipmentFound) {
      items=delegator.findList("ShipmentReceipt",shipmentIdsCond,null,UtilMisc.toList("shipmentId"),null,false);
      Iterator<GenericValue> itemsIter=items.iterator();
      while (itemsIter.hasNext()) {
        GenericValue item=itemsIter.next();
        GenericValue inventoryItem=item.getRelatedOne("InventoryItem");
        GenericValue ownerPartyRole=delegator.findByPrimaryKeyCache("PartyRole",UtilMisc.toMap("partyId",inventoryItem.getString("ownerPartyId"),"roleTypeId","INTERNAL_ORGANIZATIO"));
        if (UtilValidate.isEmpty(ownerPartyRole)) {
          itemsIter.remove();
        }
      }
    }
 else     if (dropShipmentFound) {
      List<GenericValue> shipments=delegator.findList("Shipment",shipmentIdsCond,null,null,null,false);
      List<String> purchaseOrderIds=EntityUtil.getFieldListFromEntityList(shipments,"primaryOrderId",true);
      if (createSalesInvoicesForDropShipments) {
        orderItemAssocs=delegator.findList("OrderItemAssoc",EntityCondition.makeCondition("toOrderId",EntityOperator.IN,purchaseOrderIds),null,null,null,false);
        items=EntityUtil.getRelated("FromOrderItem",orderItemAssocs);
      }
 else {
        items=delegator.findList("OrderItem",EntityCondition.makeCondition("orderId",EntityOperator.IN,purchaseOrderIds),null,null,null,false);
      }
    }
 else {
      items=delegator.findList("ItemIssuance",shipmentIdsCond,null,UtilMisc.toList("shipmentId"),null,false);
    }
  }
 catch (  GenericEntityException e) {
    String errMsg=UtilProperties.getMessage(resource,"AccountingProblemGettingItemsFromShipments",locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (items.size() == 0) {
    Debug.logInfo("No items issued for shipments",module);
    return ServiceUtil.returnSuccess();
  }
  Map<String,List<GenericValue>> shippedOrderItems=FastMap.newInstance();
  for (  GenericValue item : items) {
    String orderId=item.getString("orderId");
    String orderItemSeqId=item.getString("orderItemSeqId");
    List<GenericValue> itemsByOrder=shippedOrderItems.get(orderId);
    if (itemsByOrder == null) {
      itemsByOrder=FastList.newInstance();
    }
    List<EntityCondition> billFields=FastList.newInstance();
    billFields.add(EntityCondition.makeCondition("orderId",orderId));
    billFields.add(EntityCondition.makeCondition("orderItemSeqId",orderItemSeqId));
    billFields.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"INVOICE_CANCELLED"));
    if (dropShipmentFound) {
      itemsByOrder.add(item);
      shippedOrderItems.put(orderId,itemsByOrder);
      continue;
    }
 else     if (item.getEntityName().equals("ItemIssuance")) {
      billFields.add(EntityCondition.makeCondition("itemIssuanceId",item.get("itemIssuanceId")));
    }
 else     if (item.getEntityName().equals("ShipmentReceipt")) {
      billFields.add(EntityCondition.makeCondition("shipmentReceiptId",item.getString("receiptId")));
    }
    List<GenericValue> itemBillings=null;
    try {
      itemBillings=delegator.findList("OrderItemBillingAndInvoiceAndItem",EntityCondition.makeCondition(billFields,EntityOperator.AND),null,null,null,false);
    }
 catch (    GenericEntityException e) {
      String errMsg=UtilProperties.getMessage(resource,"AccountingProblemLookingUpOrderItemBilling",UtilMisc.toMap("billFields",billFields),locale);
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
    if (itemBillings.size() == 0) {
      itemsByOrder.add(item);
    }
    shippedOrderItems.put(orderId,itemsByOrder);
  }
  Set<String> orders=shippedOrderItems.keySet();
  for (  String orderId : orders) {
    List<GenericValue> billItems=shippedOrderItems.get(orderId);
    List<GenericValue> toBillItems=FastList.newInstance();
    Map<String,BigDecimal> itemQtyAvail=FastMap.newInstance();
    for (    GenericValue issue : billItems) {
      BigDecimal issueQty=ZERO;
      if (issue.getEntityName().equals("ShipmentReceipt")) {
        issueQty=issue.getBigDecimal("quantityAccepted");
      }
 else {
        issueQty=issue.getBigDecimal("quantity");
      }
      BigDecimal billAvail=itemQtyAvail.get(issue.getString("orderItemSeqId"));
      if (billAvail == null) {
        List<EntityCondition> lookup=FastList.newInstance();
        lookup.add(EntityCondition.makeCondition("orderId",orderId));
        lookup.add(EntityCondition.makeCondition("orderItemSeqId",issue.get("orderItemSeqId")));
        lookup.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"INVOICE_CANCELLED"));
        GenericValue orderItem=null;
        List<GenericValue> billed=null;
        BigDecimal orderedQty=null;
        try {
          orderItem=issue.getEntityName().equals("OrderItem") ? issue : issue.getRelatedOne("OrderItem");
          orderedQty=orderItem.getBigDecimal("quantity");
          if (dropShipmentFound && createSalesInvoicesForDropShipments.booleanValue()) {
            GenericValue orderItemAssoc=EntityUtil.getFirst(EntityUtil.filterByAnd(orderItemAssocs,UtilMisc.toMap("orderId",issue.getString("orderId"),"orderItemSeqId",issue.getString("orderItemSeqId"))));
            GenericValue purchaseOrderItem=orderItemAssoc.getRelatedOne("ToOrderItem");
            orderItem.set("quantity",purchaseOrderItem.getBigDecimal("quantity"));
            issueQty=purchaseOrderItem.getBigDecimal("quantity");
          }
          billed=delegator.findList("OrderItemBillingAndInvoiceAndItem",EntityCondition.makeCondition(lookup,EntityOperator.AND),null,null,null,false);
        }
 catch (        GenericEntityException e) {
          String errMsg=UtilProperties.getMessage(resource,"AccountingProblemGettingOrderItemOrderItemBilling",UtilMisc.toMap("lookup",lookup),locale);
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
        if (billed.size() > 0) {
          BigDecimal billedQuantity=ZERO;
          for (          GenericValue oib : billed) {
            BigDecimal qty=oib.getBigDecimal("quantity");
            if (qty != null) {
              billedQuantity=billedQuantity.add(qty).setScale(DECIMALS,ROUNDING);
            }
          }
          BigDecimal leftToBill=orderedQty.subtract(billedQuantity).setScale(DECIMALS,ROUNDING);
          billAvail=leftToBill;
        }
 else {
          billAvail=orderedQty;
        }
      }
      if (billAvail != null && billAvail.signum() == 1) {
        if (issueQty != null && issueQty.compareTo(billAvail) > 0) {
          if ("ShipmentReceipt".equals(issue.getEntityName())) {
            issue.set("quantityAccepted",billAvail);
          }
 else {
            issue.set("quantity",billAvail);
          }
          billAvail=ZERO;
        }
 else {
          billAvail=billAvail.subtract(issueQty).setScale(DECIMALS,ROUNDING);
        }
        toBillItems.add(issue);
      }
      itemQtyAvail.put(issue.getString("orderItemSeqId"),billAvail);
    }
    OrderReadHelper orh=new OrderReadHelper(delegator,orderId);
    GenericValue productStore=orh.getProductStore();
    String prorateShipping=productStore != null ? productStore.getString("prorateShipping") : "N";
    if ("N".equalsIgnoreCase(prorateShipping)) {
      List<GenericValue> invoiceableShipments=null;
      try {
        if (dropShipmentFound) {
          List<String> invoiceablePrimaryOrderIds=null;
          if (createSalesInvoicesForDropShipments) {
            List<String> invoiceableLinkedOrderIds=EntityUtil.getFieldListFromEntityList(toBillItems,"orderId",true);
            List<GenericValue> reverseOrderItemAssocs=EntityUtil.filterByCondition(orderItemAssocs,EntityCondition.makeCondition("orderId",EntityOperator.IN,invoiceableLinkedOrderIds));
            invoiceablePrimaryOrderIds=EntityUtil.getFieldListFromEntityList(reverseOrderItemAssocs,"toOrderId",true);
          }
 else {
            invoiceablePrimaryOrderIds=EntityUtil.getFieldListFromEntityList(toBillItems,"orderId",true);
          }
          if (!UtilValidate.isEmpty(invoiceablePrimaryOrderIds)) {
            List<EntityExpr> invoiceableShipmentConds=UtilMisc.toList(EntityCondition.makeCondition("primaryOrderId",EntityOperator.IN,invoiceablePrimaryOrderIds),EntityCondition.makeCondition("shipmentId",EntityOperator.IN,shipmentIds));
            invoiceableShipments=delegator.findList("Shipment",EntityCondition.makeCondition(invoiceableShipmentConds,EntityOperator.AND),null,null,null,false);
          }
        }
 else {
          List<String> invoiceableShipmentIds=EntityUtil.getFieldListFromEntityList(toBillItems,"shipmentId",true);
          if (UtilValidate.isNotEmpty(invoiceableShipmentIds)) {
            invoiceableShipments=delegator.findList("Shipment",EntityCondition.makeCondition("shipmentId",EntityOperator.IN,invoiceableShipmentIds),null,null,null,false);
          }
        }
      }
 catch (      GenericEntityException e) {
        String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateInvoicesFromShipmentsService",locale);
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      Map<GenericValue,BigDecimal> additionalShippingCharges=FastMap.newInstance();
      BigDecimal totalAdditionalShippingCharges=ZERO;
      if (UtilValidate.isNotEmpty(invoiceableShipments)) {
        for (        GenericValue shipment : invoiceableShipments) {
          if (shipment.get("additionalShippingCharge") == null)           continue;
          BigDecimal shipmentAdditionalShippingCharges=shipment.getBigDecimal("additionalShippingCharge").setScale(DECIMALS,ROUNDING);
          additionalShippingCharges.put(shipment,shipmentAdditionalShippingCharges);
          totalAdditionalShippingCharges=totalAdditionalShippingCharges.add(shipmentAdditionalShippingCharges);
        }
      }
      if (totalAdditionalShippingCharges.signum() == 1) {
        for (        GenericValue shipment : additionalShippingCharges.keySet()) {
          String shipmentId=shipment.getString("shipmentId");
          BigDecimal additionalShippingCharge=additionalShippingCharges.get(shipment);
          Map<String,Object> createOrderAdjustmentContext=FastMap.newInstance();
          createOrderAdjustmentContext.put("orderId",orderId);
          createOrderAdjustmentContext.put("orderAdjustmentTypeId","SHIPPING_CHARGES");
          String addtlChargeDescription=shipment.getString("addtlShippingChargeDesc");
          if (UtilValidate.isEmpty(addtlChargeDescription)) {
            addtlChargeDescription=UtilProperties.getMessage(resource,"AccountingAdditionalShippingChargeForShipment",UtilMisc.toMap("shipmentId",shipmentId),locale);
          }
          createOrderAdjustmentContext.put("description",addtlChargeDescription);
          createOrderAdjustmentContext.put("sourceReferenceId",shipmentId);
          createOrderAdjustmentContext.put("amount",additionalShippingCharge);
          createOrderAdjustmentContext.put("userLogin",context.get("userLogin"));
          String shippingOrderAdjustmentId=null;
          try {
            Map<String,Object> createOrderAdjustmentResult=dispatcher.runSync("createOrderAdjustment",createOrderAdjustmentContext);
            shippingOrderAdjustmentId=(String)createOrderAdjustmentResult.get("orderAdjustmentId");
          }
 catch (          GenericServiceException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateOrderAdjustmentService",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          GenericValue billToParty=orh.getBillToParty();
          GenericValue payToParty=orh.getBillFromParty();
          GenericValue destinationContactMech=null;
          try {
            destinationContactMech=shipment.getRelatedOne("DestinationPostalAddress");
          }
 catch (          GenericEntityException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateInvoicesFromShipmentService",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          List<Object> emptyList=FastList.newInstance();
          Map<String,Object> calcTaxContext=FastMap.newInstance();
          calcTaxContext.put("productStoreId",orh.getProductStoreId());
          calcTaxContext.put("payToPartyId",payToParty.getString("partyId"));
          calcTaxContext.put("billToPartyId",billToParty.getString("partyId"));
          calcTaxContext.put("orderShippingAmount",totalAdditionalShippingCharges);
          calcTaxContext.put("shippingAddress",destinationContactMech);
          calcTaxContext.put("itemProductList",emptyList);
          calcTaxContext.put("itemAmountList",emptyList);
          calcTaxContext.put("itemPriceList",emptyList);
          calcTaxContext.put("itemShippingList",emptyList);
          Map<String,Object> calcTaxResult=null;
          try {
            calcTaxResult=dispatcher.runSync("calcTax",calcTaxContext);
          }
 catch (          GenericServiceException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCalcTaxService",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          List<GenericValue> orderAdjustments=UtilGenerics.checkList(calcTaxResult.get("orderAdjustments"));
          if (orderAdjustments != null) {
            for (            GenericValue orderAdjustment : orderAdjustments) {
              totalAdditionalShippingCharges=totalAdditionalShippingCharges.add(orderAdjustment.getBigDecimal("amount").setScale(DECIMALS,ROUNDING));
              orderAdjustment.set("orderAdjustmentId",delegator.getNextSeqId("OrderAdjustment"));
              orderAdjustment.set("orderId",orderId);
              orderAdjustment.set("orderItemSeqId","_NA_");
              orderAdjustment.set("shipGroupSeqId",shipment.getString("primaryShipGroupSeqId"));
              orderAdjustment.set("originalAdjustmentId",shippingOrderAdjustmentId);
            }
            try {
              delegator.storeAll(orderAdjustments);
            }
 catch (            GenericEntityException e) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingProblemStoringOrderAdjustments",UtilMisc.toMap("orderAdjustments",orderAdjustments),locale);
              Debug.logError(e,errMsg,module);
              return ServiceUtil.returnError(errMsg);
            }
          }
          List<GenericValue> orderPaymentPreferences=null;
          try {
            orderPaymentPreferences=delegator.findByAnd("OrderPaymentPreference",UtilMisc.toMap("orderId",orderId,"paymentMethodTypeId","CREDIT_CARD"));
          }
 catch (          GenericEntityException e) {
            String errMsg=UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale);
            Debug.logError(e,errMsg,module);
            return ServiceUtil.returnError(errMsg);
          }
          String paymentMethodId=null;
          GenericValue cardOrderPaymentPref=EntityUtil.getFirst(orderPaymentPreferences);
          if (cardOrderPaymentPref != null) {
            paymentMethodId=cardOrderPaymentPref.getString("paymentMethodId");
          }
          if (paymentMethodId != null) {
            BigDecimal totalNewAuthAmount=totalAdditionalShippingCharges.setScale(DECIMALS,ROUNDING);
            for (            GenericValue orderPaymentPreference : orderPaymentPreferences) {
              if (!(orderPaymentPreference.getString("statusId").equals("PAYMENT_SETTLED") || orderPaymentPreference.getString("statusId").equals("PAYMENT_CANCELLED"))) {
                GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(orderPaymentPreference);
                if (authTransaction != null && authTransaction.get("amount") != null) {
                  totalNewAuthAmount=totalNewAuthAmount.add(authTransaction.getBigDecimal("amount").setScale(DECIMALS,ROUNDING));
                  Map<String,Object> prefReleaseResult=null;
                  try {
                    prefReleaseResult=dispatcher.runSync("releaseOrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreference.getString("orderPaymentPreferenceId"),"userLogin",context.get("userLogin")));
                  }
 catch (                  GenericServiceException e) {
                    String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale);
                    Debug.logError(e,errMsg,module);
                    return ServiceUtil.returnError(errMsg);
                  }
                  if (ServiceUtil.isError(prefReleaseResult) || ServiceUtil.isFailure(prefReleaseResult)) {
                    String errMsg=ServiceUtil.getErrorMessage(prefReleaseResult);
                    Debug.logError(errMsg,module);
                    return ServiceUtil.returnError(errMsg);
                  }
                }
              }
            }
            Map<String,Object> serviceContext=UtilMisc.toMap("orderId",orderId,"paymentMethodId",paymentMethodId,"paymentMethodTypeId","CREDIT_CARD","userLogin",context.get("userLogin"));
            String orderPaymentPreferenceId=null;
            try {
              Map<String,Object> result=dispatcher.runSync("createOrderPaymentPreference",serviceContext);
              orderPaymentPreferenceId=(String)result.get("orderPaymentPreferenceId");
            }
 catch (            GenericServiceException e) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateOrderPaymentPreferenceService",locale);
              Debug.logError(e,errMsg,module);
              return ServiceUtil.returnError(errMsg);
            }
            Map<String,Object> authResult=null;
            try {
              authResult=dispatcher.runSync("authOrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId,"overrideAmount",totalNewAuthAmount,"userLogin",context.get("userLogin")));
            }
 catch (            GenericServiceException e) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingAuthOrderPaymentPreferenceService",locale);
              Debug.logError(e,errMsg,module);
              return ServiceUtil.returnError(errMsg);
            }
            boolean authFinished=((Boolean)authResult.get("finished")).booleanValue();
            boolean authErrors=((Boolean)authResult.get("errors")).booleanValue();
            if (authErrors || !authFinished) {
              String errMsg=UtilProperties.getMessage(resource,"AccountingUnableToAuthAdditionalShipCharges",UtilMisc.toMap("shipmentId",shipmentId,"paymentMethodId",paymentMethodId,"orderPaymentPreferenceId",orderPaymentPreferenceId),locale);
              Debug.logError(errMsg,module);
            }
          }
        }
      }
    }
 else {
      Debug.logInfo(UtilProperties.getMessage(resource,"AccountingIgnoringAdditionalShipCharges",UtilMisc.toMap("productStoreId",orh.getProductStoreId()),locale),module);
    }
    String invoiceId=null;
    List<GenericValue> shipmentItemBillings=null;
    String shipmentId=shipmentIds.get(0);
    try {
      shipmentItemBillings=delegator.findByAnd("ShipmentItemBilling",UtilMisc.toMap("shipmentId",shipmentId));
    }
 catch (    GenericEntityException e) {
      String errMsg=UtilProperties.getMessage(resource,"AccountingProblemGettingShipmentItemBilling",locale);
      return ServiceUtil.returnError(errMsg);
    }
    if (UtilValidate.isNotEmpty(shipmentItemBillings)) {
      GenericValue shipmentItemBilling=EntityUtil.getFirst(shipmentItemBillings);
      invoiceId=shipmentItemBilling.getString("invoiceId");
    }
    Map<String,Object> serviceContext=UtilMisc.toMap("orderId",orderId,"billItems",toBillItems,"invoiceId",invoiceId,"eventDate",context.get("eventDate"),"userLogin",context.get("userLogin"));
    try {
      Map<String,Object> result=dispatcher.runSync("createInvoiceForOrder",serviceContext);
      invoicesCreated.add((String)result.get("invoiceId"));
    }
 catch (    GenericServiceException e) {
      String errMsg=UtilProperties.getMessage(resource,"AccountingTroubleCallingCreateInvoiceForOrderService",locale);
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  Map<String,Object> response=ServiceUtil.returnSuccess();
  response.put("invoicesCreated",invoicesCreated);
  return response;
}
