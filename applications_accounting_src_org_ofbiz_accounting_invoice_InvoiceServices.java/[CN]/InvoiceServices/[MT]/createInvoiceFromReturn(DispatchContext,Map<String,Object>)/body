{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String returnId=(String)context.get("returnId");
  List<GenericValue> billItems=UtilGenerics.checkList(context.get("billItems"));
  String errorMsg=UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceForReturn",UtilMisc.toMap("returnId",returnId),locale);
  try {
    String invoiceTypeId;
    String description;
    GenericValue returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
    if ("CUSTOMER_RETURN".equals(returnHeader.getString("returnHeaderTypeId"))) {
      invoiceTypeId="CUST_RTN_INVOICE";
      description="Return Invoice for Customer Return #" + returnId;
    }
 else {
      invoiceTypeId="PURC_RTN_INVOICE";
      description="Return Invoice for Vendor Return #" + returnId;
    }
    Map<String,Object> input=UtilMisc.<String,Object>toMap("invoiceTypeId",invoiceTypeId,"statusId","INVOICE_IN_PROCESS");
    input.put("partyId",returnHeader.get("toPartyId"));
    input.put("partyIdFrom",returnHeader.get("fromPartyId"));
    input.put("currencyUomId",returnHeader.get("currencyUomId"));
    input.put("invoiceDate",UtilDateTime.nowTimestamp());
    input.put("description",description);
    input.put("billingAccountId",returnHeader.get("billingAccountId"));
    input.put("userLogin",userLogin);
    Map<String,Object> serviceResults=dispatcher.runSync("createInvoice",input);
    if (ServiceUtil.isError(serviceResults)) {
      return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
    }
    String invoiceId=(String)serviceResults.get("invoiceId");
    BigDecimal invoiceTotal=ZERO;
    BigDecimal promisedTotal=ZERO;
    int invoiceItemSeqNum=1;
    String invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    for (    GenericValue item : billItems) {
      boolean shipmentReceiptFound=false;
      boolean itemIssuanceFound=false;
      if ("ShipmentReceipt".equals(item.getEntityName())) {
        shipmentReceiptFound=true;
      }
 else       if ("ItemIssuance".equals(item.getEntityName())) {
        itemIssuanceFound=true;
      }
 else {
        Debug.logError("Unexpected entity " + item + " of type "+ item.getEntityName(),module);
      }
      GenericValue returnItem=null;
      if (shipmentReceiptFound) {
        returnItem=item.getRelatedOneCache("ReturnItem");
      }
 else       if (itemIssuanceFound) {
        GenericValue shipmentItem=item.getRelatedOneCache("ShipmentItem");
        GenericValue returnItemShipment=EntityUtil.getFirst(shipmentItem.getRelated("ReturnItemShipment"));
        returnItem=returnItemShipment.getRelatedOneCache("ReturnItem");
      }
      if (returnItem == null)       continue;
      GenericValue product=returnItem.getRelatedOneCache("Product");
      BigDecimal returnPrice=returnItem.getBigDecimal("returnPrice");
      String invoiceItemTypeId=getInvoiceItemType(delegator,returnItem.getString("returnItemTypeId"),null,invoiceTypeId,null);
      if (invoiceItemTypeId == null) {
        return ServiceUtil.returnError(errorMsg + UtilProperties.getMessage(resource,"AccountingNoKnownInvoiceItemTypeReturnItemType",UtilMisc.toMap("returnItemTypeId",returnItem.getString("returnItemTypeId")),locale));
      }
      BigDecimal quantity=BigDecimal.ZERO;
      if (shipmentReceiptFound) {
        quantity=item.getBigDecimal("quantityAccepted");
      }
 else       if (itemIssuanceFound) {
        quantity=item.getBigDecimal("quantity");
      }
      input=UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemTypeId",invoiceItemTypeId,"quantity",quantity);
      input.put("invoiceItemSeqId","" + invoiceItemSeqId);
      input.put("amount",returnItem.get("returnPrice"));
      input.put("productId",returnItem.get("productId"));
      input.put("taxableFlag",product.get("taxable"));
      input.put("description",returnItem.get("description"));
      input.put("userLogin",userLogin);
      serviceResults=dispatcher.runSync("createInvoiceItem",input);
      if (ServiceUtil.isError(serviceResults)) {
        return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
      }
      input=UtilMisc.toMap("returnId",returnId,"returnItemSeqId",returnItem.get("returnItemSeqId"),"invoiceId",invoiceId);
      input.put("invoiceItemSeqId","" + invoiceItemSeqId);
      input.put("quantity",quantity);
      input.put("amount",returnItem.get("returnPrice"));
      input.put("userLogin",userLogin);
      if (shipmentReceiptFound) {
        input.put("shipmentReceiptId",item.get("receiptId"));
      }
      serviceResults=dispatcher.runSync("createReturnItemBilling",input);
      if (ServiceUtil.isError(serviceResults)) {
        return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
      }
      if (Debug.verboseOn()) {
        Debug.logVerbose("Creating Invoice Item with amount " + returnPrice + " and quantity "+ quantity+ " for shipment ["+ item.getString("shipmentId")+ ":"+ item.getString("shipmentItemSeqId")+ "]",module);
      }
      String parentInvoiceItemSeqId=invoiceItemSeqId;
      invoiceItemSeqNum+=1;
      invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
      BigDecimal cancelQuantity=ZERO;
      if (shipmentReceiptFound) {
        cancelQuantity=item.getBigDecimal("quantityRejected");
      }
 else       if (itemIssuanceFound) {
        cancelQuantity=item.getBigDecimal("cancelQuantity");
      }
      if (cancelQuantity == null) {
        cancelQuantity=ZERO;
      }
      ;
      BigDecimal actualAmount=returnPrice.multiply(quantity).setScale(DECIMALS,ROUNDING);
      BigDecimal promisedAmount=returnPrice.multiply(quantity.add(cancelQuantity)).setScale(DECIMALS,ROUNDING);
      invoiceTotal=invoiceTotal.add(actualAmount).setScale(DECIMALS,ROUNDING);
      promisedTotal=promisedTotal.add(promisedAmount).setScale(DECIMALS,ROUNDING);
      List<GenericValue> adjustments=returnItem.getRelatedCache("ReturnAdjustment");
      for (      GenericValue adjustment : adjustments) {
        if (adjustment.get("amount") == null) {
          Debug.logWarning("Return adjustment [" + adjustment.get("returnAdjustmentId") + "] has null amount and will be skipped",module);
          continue;
        }
        invoiceItemTypeId=getInvoiceItemType(delegator,adjustment.getString("returnAdjustmentTypeId"),null,invoiceTypeId,null);
        if (invoiceItemTypeId == null) {
          return ServiceUtil.returnError(errorMsg + "No known invoice item type for the return adjustment type [" + adjustment.getString("returnAdjustmentTypeId")+ "]");
        }
        BigDecimal ratio=quantity.divide(returnItem.getBigDecimal("returnQuantity"),100,ROUNDING);
        BigDecimal amount=adjustment.getBigDecimal("amount");
        amount=amount.multiply(ratio).setScale(DECIMALS,ROUNDING);
        if (Debug.verboseOn()) {
          Debug.logVerbose("Creating Invoice Item with amount " + adjustment.getBigDecimal("amount") + " prorated to "+ amount+ " for return adjustment ["+ adjustment.getString("returnAdjustmentId")+ "]",module);
        }
        input=UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemTypeId",invoiceItemTypeId,"quantity",BigDecimal.ONE);
        input.put("amount",amount);
        input.put("invoiceItemSeqId","" + invoiceItemSeqId);
        input.put("productId",returnItem.get("productId"));
        input.put("description",adjustment.get("description"));
        input.put("overrideGlAccountId",adjustment.get("overrideGlAccountId"));
        input.put("parentInvoiceId",invoiceId);
        input.put("parentInvoiceItemSeqId",parentInvoiceItemSeqId);
        input.put("taxAuthPartyId",adjustment.get("taxAuthPartyId"));
        input.put("taxAuthGeoId",adjustment.get("taxAuthGeoId"));
        input.put("userLogin",userLogin);
        if (adjustment.get("returnAdjustmentTypeId").equals("RET_SALES_TAX_ADJ")) {
          input.put("taxableFlag","N");
        }
        serviceResults=dispatcher.runSync("createInvoiceItem",input);
        if (ServiceUtil.isError(serviceResults)) {
          return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
        }
        invoiceItemSeqNum+=1;
        invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
        invoiceTotal=invoiceTotal.add(amount).setScale(DECIMALS,ROUNDING);
        promisedTotal=promisedTotal.add(amount).setScale(DECIMALS,ROUNDING);
      }
    }
    BigDecimal actualToPromisedRatio=ZERO;
    if (invoiceTotal.signum() != 0) {
      actualToPromisedRatio=invoiceTotal.divide(promisedTotal,100,ROUNDING);
    }
    List<GenericValue> adjustments=returnHeader.getRelatedByAndCache("ReturnAdjustment",UtilMisc.toMap("returnItemSeqId","_NA_"));
    for (    GenericValue adjustment : adjustments) {
      String invoiceItemTypeId=getInvoiceItemType(delegator,adjustment.getString("returnAdjustmentTypeId"),null,invoiceTypeId,null);
      if (invoiceItemTypeId == null) {
        return ServiceUtil.returnError(errorMsg + UtilProperties.getMessage(resource,"AccountingNoKnownInvoiceItemTypeReturnAdjustmentType",UtilMisc.toMap("returnAdjustmentTypeId",adjustment.getString("returnAdjustmentTypeId")),locale));
      }
      BigDecimal amount=adjustment.getBigDecimal("amount").multiply(actualToPromisedRatio).setScale(DECIMALS,ROUNDING);
      if (Debug.verboseOn()) {
        Debug.logVerbose("Creating Invoice Item with amount " + adjustment.getBigDecimal("amount") + " prorated to "+ amount+ " for return adjustment ["+ adjustment.getString("returnAdjustmentId")+ "]",module);
      }
      input=UtilMisc.toMap("invoiceId",invoiceId,"invoiceItemTypeId",invoiceItemTypeId,"quantity",BigDecimal.ONE);
      input.put("amount",amount);
      input.put("invoiceItemSeqId","" + invoiceItemSeqId);
      input.put("description",adjustment.get("description"));
      input.put("overrideGlAccountId",adjustment.get("overrideGlAccountId"));
      input.put("taxAuthPartyId",adjustment.get("taxAuthPartyId"));
      input.put("taxAuthGeoId",adjustment.get("taxAuthGeoId"));
      input.put("userLogin",userLogin);
      input.put("taxableFlag",adjustment.get("includeInTax"));
      serviceResults=dispatcher.runSync("createInvoiceItem",input);
      if (ServiceUtil.isError(serviceResults)) {
        return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
      }
      invoiceItemSeqNum+=1;
      invoiceItemSeqId=UtilFormatOut.formatPaddedNumber(invoiceItemSeqNum,INVOICE_ITEM_SEQUENCE_ID_DIGITS);
    }
    serviceResults=dispatcher.runSync("setInvoiceStatus",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"statusId","INVOICE_READY","userLogin",userLogin));
    if (ServiceUtil.isError(serviceResults)) {
      return ServiceUtil.returnError(errorMsg,null,null,serviceResults);
    }
    Map<String,Object> results=ServiceUtil.returnSuccess();
    results.put("invoiceId",invoiceId);
    return results;
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,errorMsg + e.getMessage(),module);
    return ServiceUtil.returnError(errorMsg + e.getMessage());
  }
catch (  GenericEntityException e) {
    Debug.logError(e,errorMsg + e.getMessage(),module);
    return ServiceUtil.returnError(errorMsg + e.getMessage());
  }
}
