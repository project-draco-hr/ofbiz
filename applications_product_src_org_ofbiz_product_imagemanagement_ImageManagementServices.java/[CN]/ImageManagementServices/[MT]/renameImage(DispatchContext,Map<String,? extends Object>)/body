{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String imageServerPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.management.path"),context);
  String imageServerUrl=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.management.url"),context);
  String productId=(String)context.get("productId");
  String contentId=(String)context.get("contentId");
  String filenameToUse=(String)context.get("drDataResourceName");
  String imageType=filenameToUse.substring(filenameToUse.lastIndexOf("."));
  String imgExtension=filenameToUse.substring(filenameToUse.length() - 3,filenameToUse.length());
  String imageUrl=imageServerUrl + "/" + productId+ "/"+ filenameToUse;
  try {
    List<GenericValue> productContentList=delegator.findByAnd("ProductContentAndInfo",UtilMisc.toMap("productId",productId,"contentId",contentId,"productContentTypeId","IMAGE"),null,false);
    GenericValue productContent=EntityUtil.getFirst(productContentList);
    String dataResourceName=(String)productContent.get("drDataResourceName");
    String mimeType=filenameToUse.substring(filenameToUse.lastIndexOf("."));
    if (imageType.equals(mimeType)) {
      BufferedImage bufImg=ImageIO.read(new File(imageServerPath + "/" + productId+ "/"+ dataResourceName));
      ImageIO.write(bufImg,imgExtension,new File(imageServerPath + "/" + productId+ "/"+ filenameToUse));
      File file=new File(imageServerPath + "/" + productId+ "/"+ dataResourceName);
      file.delete();
      Map<String,Object> contentUp=FastMap.newInstance();
      contentUp.put("contentId",contentId);
      contentUp.put("contentName",filenameToUse);
      contentUp.put("userLogin",userLogin);
      try {
        dispatcher.runSync("updateContent",contentUp);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      GenericValue content=null;
      try {
        content=delegator.findOne("Content",UtilMisc.toMap("contentId",contentId),false);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      if (content != null) {
        GenericValue dataResource=null;
        try {
          dataResource=content.getRelatedOne("DataResource",false);
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
        if (dataResource != null) {
          Map<String,Object> dataResourceCtx=FastMap.newInstance();
          dataResourceCtx.put("dataResourceId",dataResource.getString("dataResourceId"));
          dataResourceCtx.put("objectInfo",imageUrl);
          dataResourceCtx.put("dataResourceName",filenameToUse);
          dataResourceCtx.put("userLogin",userLogin);
          try {
            dispatcher.runSync("updateDataResource",dataResourceCtx);
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
        }
      }
      List<GenericValue> contentAssocList=delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentId",contentId,"contentAssocTypeId","IMAGE_THUMBNAIL"),null,false);
      if (contentAssocList.size() > 0) {
        for (int i=0; i < contentAssocList.size(); i++) {
          GenericValue contentAssoc=contentAssocList.get(i);
          List<GenericValue> dataResourceAssocList=delegator.findByAnd("ContentDataResourceView",UtilMisc.toMap("contentId",contentAssoc.get("contentIdTo")),null,false);
          GenericValue dataResourceAssoc=EntityUtil.getFirst(dataResourceAssocList);
          String drDataResourceNameAssoc=(String)dataResourceAssoc.get("drDataResourceName");
          String filenameToUseAssoc=filenameToUse.substring(0,filenameToUse.length() - 4) + "-" + contentAssoc.get("mapKey")+ imageType;
          String imageUrlAssoc=imageServerUrl + "/" + productId+ "/"+ filenameToUseAssoc;
          BufferedImage bufImgAssoc=ImageIO.read(new File(imageServerPath + "/" + productId+ "/"+ drDataResourceNameAssoc));
          ImageIO.write(bufImgAssoc,imgExtension,new File(imageServerPath + "/" + productId+ "/"+ filenameToUseAssoc));
          File fileAssoc=new File(imageServerPath + "/" + productId+ "/"+ drDataResourceNameAssoc);
          fileAssoc.delete();
          Map<String,Object> contentAssocMap=FastMap.newInstance();
          contentAssocMap.put("contentId",contentAssoc.get("contentIdTo"));
          contentAssocMap.put("contentName",filenameToUseAssoc);
          contentAssocMap.put("userLogin",userLogin);
          try {
            dispatcher.runSync("updateContent",contentAssocMap);
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
          GenericValue contentAssocUp=null;
          try {
            contentAssocUp=delegator.findOne("Content",UtilMisc.toMap("contentId",contentAssoc.get("contentIdTo")),false);
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
          if (contentAssocUp != null) {
            GenericValue dataResourceAssocUp=null;
            try {
              dataResourceAssocUp=contentAssocUp.getRelatedOne("DataResource",false);
            }
 catch (            GenericEntityException e) {
              Debug.logError(e,module);
              return ServiceUtil.returnError(e.getMessage());
            }
            if (dataResourceAssocUp != null) {
              Map<String,Object> dataResourceAssocMap=FastMap.newInstance();
              dataResourceAssocMap.put("dataResourceId",dataResourceAssocUp.getString("dataResourceId"));
              dataResourceAssocMap.put("objectInfo",imageUrlAssoc);
              dataResourceAssocMap.put("dataResourceName",filenameToUseAssoc);
              dataResourceAssocMap.put("userLogin",userLogin);
              try {
                dispatcher.runSync("updateDataResource",dataResourceAssocMap);
              }
 catch (              GenericServiceException e) {
                Debug.logError(e,module);
                return ServiceUtil.returnError(e.getMessage());
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  String successMsg="Rename image successfully.";
  return ServiceUtil.returnSuccess(successMsg);
}
