{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productId=(String)context.get("productId");
  String contentIdTo=(String)context.get("contentIdTo");
  try {
    if (UtilValidate.isNotEmpty(contentIdTo)) {
      String imageFilenameFormat=UtilProperties.getPropertyValue("catalog","image.filename.format");
      String imageServerPath=FlexibleStringExpander.expandString(UtilProperties.getPropertyValue("catalog","image.server.path"),context);
      FlexibleStringExpander filenameExpander=FlexibleStringExpander.getInstance(imageFilenameFormat);
      String fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","type","small","id",productId));
      String filePathPrefix="";
      String filenameToUse=fileLocation;
      if (fileLocation.lastIndexOf("/") != -1) {
        filePathPrefix=fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);
        filenameToUse=fileLocation.substring(fileLocation.lastIndexOf("/") + 1);
      }
      GenericValue content=null;
      try {
        content=delegator.findOne("Content",UtilMisc.toMap("contentId",contentIdTo),false);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      String contentName=(String)content.get("contentName");
      if (contentName.lastIndexOf(".") > 0 && contentName.lastIndexOf(".") < contentName.length()) {
        filenameToUse+=contentName.substring(contentName.lastIndexOf("."));
      }
 else {
        filenameToUse+=".jpg";
      }
      try {
        File f1=new File(imageServerPath + "/products/management/" + productId+ "/"+ contentName);
        File f2=new File(imageServerPath + "/" + filePathPrefix,filenameToUse);
        InputStream input=new FileInputStream(f1);
        OutputStream out=new FileOutputStream(f2);
        byte[] buf=new byte[1024];
        int len;
        while ((len=input.read(buf)) > 0) {
          out.write(buf,0,len);
        }
        input.close();
        out.close();
        Map<String,Object> updateProductMap=FastMap.newInstance();
        updateProductMap.put("userLogin",userLogin);
        updateProductMap.put("productId",productId);
        updateProductMap.put("smallImageUrl","/images/products/small/" + filenameToUse);
        try {
          dispatcher.runSync("updateProduct",updateProductMap);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
