{
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  URL url=(URL)context.get("url");
  String xmltext=(String)context.get("xmltext");
  if (url == null && xmltext == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityImportNoXmlFileOrTextSpecified",locale));
  }
  boolean mostlyInserts=(String)context.get("mostlyInserts") != null;
  boolean maintainTimeStamps=(String)context.get("maintainTimeStamps") != null;
  boolean createDummyFks=(String)context.get("createDummyFks") != null;
  boolean checkDataOnly=(String)context.get("checkDataOnly") != null;
  Integer txTimeout=(Integer)context.get("txTimeout");
  if (txTimeout == null) {
    txTimeout=Integer.valueOf(7200);
  }
  long rowProcessed=0;
  try {
    EntitySaxReader reader=new EntitySaxReader(delegator);
    reader.setUseTryInsertMethod(mostlyInserts);
    reader.setMaintainTxStamps(maintainTimeStamps);
    reader.setTransactionTimeout(txTimeout.intValue());
    reader.setCreateDummyFks(createDummyFks);
    reader.setCheckDataOnly(checkDataOnly);
    long numberRead=(url != null ? reader.parse(url) : reader.parse(xmltext));
    rowProcessed=numberRead;
  }
 catch (  Exception ex) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityImportParsingError",UtilMisc.toMap("errorString",ex.toString()),locale));
  }
  Map<String,Object> resp=UtilMisc.<String,Object>toMap("rowProcessed",rowProcessed);
  return resp;
}
