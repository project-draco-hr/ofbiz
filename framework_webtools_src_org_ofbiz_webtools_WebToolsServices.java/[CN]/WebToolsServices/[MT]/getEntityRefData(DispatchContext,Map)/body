{
  GenericDelegator delegator=dctx.getDelegator();
  Map resultMap=ServiceUtil.returnSuccess();
  ModelReader reader=delegator.getModelReader();
  Map packages=new HashMap();
  TreeSet packageNames=new TreeSet();
  TreeSet tableNames=new TreeSet();
  try {
    Collection ec=reader.getEntityNames();
    resultMap.put("numberOfEntities",ec.size());
    TreeSet entityNames=new TreeSet(ec);
    Iterator ecIter=ec.iterator();
    while (ecIter.hasNext()) {
      String eName=(String)ecIter.next();
      ModelEntity ent=reader.getModelEntity(eName);
      if (UtilValidate.isNotEmpty(ent.getPlainTableName())) {
        tableNames.add(ent.getPlainTableName());
      }
      TreeSet entities=(TreeSet)packages.get(ent.getPackageName());
      if (entities == null) {
        entities=new TreeSet();
        packages.put(ent.getPackageName(),entities);
        packageNames.add(ent.getPackageName());
      }
      entities.add(eName);
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("ERROR: getting entity names: " + e.getMessage());
  }
  String search=(String)context.get("search");
  List packagesList=new ArrayList();
  Iterator piter=packageNames.iterator();
  try {
    while (piter.hasNext()) {
      Map packageMap=new HashMap();
      String pName=(String)piter.next();
      TreeSet entities=(TreeSet)packages.get(pName);
      List entitiesList=new ArrayList();
      Iterator i=entities.iterator();
      while (i.hasNext()) {
        Map entityMap=new HashMap();
        String entityName=(String)i.next();
        String helperName=delegator.getEntityHelperName(entityName);
        String groupName=delegator.getEntityGroupName(entityName);
        if (search == null || entityName.toLowerCase().indexOf(search.toLowerCase()) != -1) {
          ModelEntity entity=reader.getModelEntity(entityName);
          List javaNameList=new ArrayList();
          TreeSet ufields=new TreeSet();
          for (int y=0; y < entity.getFieldsSize(); y++) {
            Map javaNameMap=new HashMap();
            ModelField field=entity.getField(y);
            ModelFieldType type=delegator.getEntityFieldType(entity,field.getType());
            String javaName=null;
            javaNameMap.put("isPk",field.getIsPk());
            javaNameMap.put("name",field.getName());
            javaNameMap.put("colName",field.getColName());
            javaNameMap.put("description",field.getDescription());
            javaNameMap.put("type",(field.getType()) != null ? field.getType() : null);
            javaNameMap.put("javaType",(field.getType() != null && type != null) ? type.getJavaType() : "Undefined");
            javaNameMap.put("sqlType",(type != null && type.getSqlType() != null) ? type.getSqlType() : "Undefined");
            javaNameList.add(javaNameMap);
          }
          List relationsList=new ArrayList();
          for (int r=0; r < entity.getRelationsSize(); r++) {
            Map relationMap=new HashMap();
            ModelRelation relation=entity.getRelation(r);
            List keysList=new ArrayList();
            for (int km=0; km < relation.getKeyMapsSize(); km++) {
              Map keysMap=new HashMap();
              ModelKeyMap keyMap=relation.getKeyMap(km);
              String fieldName=null;
              String relFieldName=null;
              if (keyMap.getFieldName().equals(keyMap.getRelFieldName())) {
                fieldName=keyMap.getFieldName();
                relFieldName="aa";
              }
 else {
                fieldName=keyMap.getFieldName();
                relFieldName=keyMap.getRelFieldName();
              }
              keysMap.put("row",km + 1);
              keysMap.put("fieldName",fieldName);
              keysMap.put("relFieldName",relFieldName);
              keysList.add(keysMap);
            }
            relationMap.put("title",relation.getTitle());
            relationMap.put("description",relation.getDescription());
            relationMap.put("relEntity",relation.getRelEntityName());
            relationMap.put("fkName",relation.getFkName());
            relationMap.put("type",relation.getType());
            relationMap.put("length",relation.getType().length());
            relationMap.put("keysList",keysList);
            relationsList.add(relationMap);
          }
          List indexList=new ArrayList();
          for (int r=0; r < entity.getIndexesSize(); r++) {
            List fieldNameList=new ArrayList();
            ModelIndex index=entity.getIndex(r);
            for (Iterator fieldIterator=index.getIndexFieldsIterator(); fieldIterator.hasNext(); ) {
              fieldNameList.add((String)fieldIterator.next());
            }
            Map indexMap=new HashMap();
            indexMap.put("name",index.getName());
            indexMap.put("description",index.getDescription());
            indexMap.put("fieldNameList",fieldNameList);
            indexList.add(indexMap);
          }
          entityMap.put("entityName",entityName);
          entityMap.put("helperName",helperName);
          entityMap.put("groupName",groupName);
          entityMap.put("plainTableName",entity.getPlainTableName());
          entityMap.put("title",entity.getTitle());
          entityMap.put("description",entity.getDescription());
          entityMap.put("location",entity.getLocation());
          entityMap.put("javaNameList",javaNameList);
          entityMap.put("relationsList",relationsList);
          entityMap.put("indexList",indexList);
          entitiesList.add(entityMap);
        }
      }
      packageMap.put("packageName",pName);
      packageMap.put("entitiesList",entitiesList);
      packagesList.add(packageMap);
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("ERROR: getting entity info: " + e.getMessage());
  }
  resultMap.put("packagesList",packagesList);
  return resultMap;
}
