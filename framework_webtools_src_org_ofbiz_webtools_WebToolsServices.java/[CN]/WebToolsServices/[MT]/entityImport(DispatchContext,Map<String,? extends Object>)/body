{
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  LocalDispatcher dispatcher=dctx.getDispatcher();
  List<String> messages=FastList.newInstance();
  String filename=(String)context.get("filename");
  String fmfilename=(String)context.get("fmfilename");
  String fulltext=(String)context.get("fulltext");
  boolean isUrl=(String)context.get("isUrl") != null;
  String mostlyInserts=(String)context.get("mostlyInserts");
  String maintainTimeStamps=(String)context.get("maintainTimeStamps");
  String createDummyFks=(String)context.get("createDummyFks");
  String checkDataOnly=(String)context.get("checkDataOnly");
  Integer txTimeout=(Integer)context.get("txTimeout");
  if (txTimeout == null) {
    txTimeout=Integer.valueOf(7200);
  }
  URL url=null;
  if (UtilValidate.isNotEmpty(filename)) {
    try {
      url=isUrl ? FlexibleLocation.resolveLocation(filename) : UtilURL.fromFilename(filename);
    }
 catch (    MalformedURLException mue) {
      return ServiceUtil.returnError("ERROR: invalid file name (" + filename + "): "+ mue.getMessage());
    }
catch (    IOException ioe) {
      return ServiceUtil.returnError("ERROR reading file name (" + filename + "): "+ ioe.getMessage());
    }
catch (    Exception exc) {
      return ServiceUtil.returnError("ERROR: reading file name (" + filename + "): "+ exc.getMessage());
    }
  }
  if (UtilValidate.isNotEmpty(fmfilename) && (UtilValidate.isNotEmpty(fulltext) || url != null)) {
    FileReader templateReader=null;
    try {
      templateReader=new FileReader(fmfilename);
    }
 catch (    FileNotFoundException e) {
      return ServiceUtil.returnError("ERROR reading template file (" + fmfilename + "): "+ e.getMessage());
    }
    StringWriter outWriter=new StringWriter();
    Template template=null;
    try {
      Configuration conf=org.ofbiz.base.util.template.FreeMarkerWorker.getDefaultOfbizConfig();
      template=new Template("FMImportFilter",templateReader,conf);
      Map<String,Object> fmcontext=FastMap.newInstance();
      InputSource ins=url != null ? new InputSource(url.openStream()) : new InputSource(new StringReader(fulltext));
      NodeModel nodeModel;
      try {
        nodeModel=NodeModel.parse(ins);
      }
  finally {
        if (ins.getByteStream() != null) {
          ins.getByteStream().close();
        }
        if (ins.getCharacterStream() != null) {
          ins.getCharacterStream().close();
        }
      }
      fmcontext.put("doc",nodeModel);
      BeansWrapper wrapper=BeansWrapper.getDefaultInstance();
      TemplateHashModel staticModels=wrapper.getStaticModels();
      fmcontext.put("Static",staticModels);
      template.process(fmcontext,outWriter);
      fulltext=outWriter.toString();
    }
 catch (    Exception ex) {
      return ServiceUtil.returnError("ERROR processing template file (" + fmfilename + "): "+ ex.getMessage());
    }
  }
  if (fulltext != null || url != null) {
    try {
      Map<String,Object> inputMap=UtilMisc.toMap("mostlyInserts",mostlyInserts,"createDummyFks",createDummyFks,"checkDataOnly",checkDataOnly,"maintainTimeStamps",maintainTimeStamps,"txTimeout",txTimeout,"userLogin",userLogin);
      if (fulltext != null) {
        inputMap.put("xmltext",fulltext);
      }
 else {
        inputMap.put("url",url);
      }
      Map<String,Object> outputMap=dispatcher.runSync("parseEntityXmlFile",inputMap);
      if (ServiceUtil.isError(outputMap)) {
        return ServiceUtil.returnError("ERROR: " + ServiceUtil.getErrorMessage(outputMap));
      }
 else {
        Long numberRead=(Long)outputMap.get("rowProcessed");
        messages.add("Got " + numberRead.longValue() + " entities to write to the datasource.");
      }
    }
 catch (    Exception ex) {
      return ServiceUtil.returnError("ERROR parsing Entity Xml file: " + ex.getMessage());
    }
  }
 else {
    messages.add("No filename/URL or complete XML document specified, doing nothing.");
  }
  Map<String,Object> resp=UtilMisc.toMap("messages",(Object)messages);
  return resp;
}
