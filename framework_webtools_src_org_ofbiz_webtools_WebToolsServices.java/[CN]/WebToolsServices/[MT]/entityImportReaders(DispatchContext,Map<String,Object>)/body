{
  String readers=(String)context.get("readers");
  String overrideDelegator=(String)context.get("overrideDelegator");
  String overrideGroup=(String)context.get("overrideGroup");
  boolean useDummyFks="true".equals(context.get("createDummyFks"));
  boolean maintainTxs="true".equals(context.get("maintainTimeStamps"));
  boolean tryInserts="true".equals(context.get("mostlyInserts"));
  boolean checkDataOnly="true".equals(context.get("checkDataOnly"));
  Integer txTimeoutInt=(Integer)context.get("txTimeout");
  int txTimeout=txTimeoutInt != null ? txTimeoutInt.intValue() : -1;
  List<Object> messages=FastList.newInstance();
  List<String> readerNames=null;
  if (UtilValidate.isNotEmpty(readers) && !"none".equalsIgnoreCase(readers)) {
    if (readers.indexOf(",") == -1) {
      readerNames=FastList.newInstance();
      readerNames.add(readers);
    }
 else {
      readerNames=StringUtil.split(readers,",");
    }
  }
  String groupNameToUse=overrideGroup != null ? overrideGroup : "org.ofbiz";
  Delegator delegator=null;
  if (UtilValidate.isNotEmpty(overrideDelegator)) {
    delegator=DelegatorFactory.getDelegator(overrideDelegator);
  }
 else {
    delegator=dctx.getDelegator();
  }
  String helperName=delegator.getGroupHelperName(groupNameToUse);
  if (helperName == null) {
    return ServiceUtil.returnError("Unable to locate the datasource helper for the group [" + groupNameToUse + "]");
  }
  List<URL> urlList=null;
  if (readerNames != null) {
    urlList=EntityDataLoader.getUrlList(helperName,readerNames);
  }
 else   if (!"none".equalsIgnoreCase(readers)) {
    urlList=EntityDataLoader.getUrlList(helperName);
  }
  if (urlList == null) {
    urlList=FastList.newInstance();
  }
  NumberFormat changedFormat=NumberFormat.getIntegerInstance();
  changedFormat.setMinimumIntegerDigits(5);
  changedFormat.setGroupingUsed(false);
  List<Object> errorMessages=FastList.newInstance();
  List<String> infoMessages=FastList.newInstance();
  int totalRowsChanged=0;
  if (UtilValidate.isNotEmpty(urlList)) {
    messages.add("=-=-=-=-=-=-= Doing a data " + (checkDataOnly ? "check" : "load") + " with the following files:");
    for (    URL dataUrl : urlList) {
      messages.add(dataUrl.toExternalForm());
    }
    messages.add("=-=-=-=-=-=-= Starting the data " + (checkDataOnly ? "check" : "load") + "...");
    for (    URL dataUrl : urlList) {
      try {
        int rowsChanged=0;
        if (checkDataOnly) {
          try {
            errorMessages.add("Checking data in [" + dataUrl.toExternalForm() + "]");
            rowsChanged=EntityDataAssert.assertData(dataUrl,delegator,errorMessages);
          }
 catch (          SAXException e) {
            errorMessages.add("Error checking data in [" + dataUrl.toExternalForm() + "]: "+ e.toString());
          }
catch (          ParserConfigurationException e) {
            errorMessages.add("Error checking data in [" + dataUrl.toExternalForm() + "]: "+ e.toString());
          }
catch (          IOException e) {
            errorMessages.add("Error checking data in [" + dataUrl.toExternalForm() + "]: "+ e.toString());
          }
        }
 else {
          rowsChanged=EntityDataLoader.loadData(dataUrl,helperName,delegator,errorMessages,txTimeout,useDummyFks,maintainTxs,tryInserts);
        }
        totalRowsChanged+=rowsChanged;
        infoMessages.add(changedFormat.format(rowsChanged) + " of " + changedFormat.format(totalRowsChanged)+ " from "+ dataUrl.toExternalForm());
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Error loading data file: " + dataUrl.toExternalForm(),module);
      }
    }
  }
 else {
    messages.add("=-=-=-=-=-=-= No data " + (checkDataOnly ? "check" : "load") + " files found.");
  }
  if (infoMessages.size() > 0) {
    messages.add("=-=-=-=-=-=-= Here is a summary of the data " + (checkDataOnly ? "check" : "load") + ":");
    messages.addAll(infoMessages);
  }
  if (errorMessages.size() > 0) {
    messages.add("=-=-=-=-=-=-= The following errors occured in the data " + (checkDataOnly ? "check" : "load") + ":");
    messages.addAll(errorMessages);
  }
  messages.add("=-=-=-=-=-=-= Finished the data " + (checkDataOnly ? "check" : "load") + " with "+ totalRowsChanged+ " rows "+ (checkDataOnly ? "checked" : "changed")+ ".");
  Map<String,Object> resultMap=ServiceUtil.returnSuccess();
  resultMap.put("messages",messages);
  return resultMap;
}
