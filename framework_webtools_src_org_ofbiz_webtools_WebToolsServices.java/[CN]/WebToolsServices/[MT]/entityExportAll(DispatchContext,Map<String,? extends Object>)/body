{
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String outpath=(String)context.get("outpath");
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  Integer txTimeout=(Integer)context.get("txTimeout");
  if (txTimeout == null) {
    txTimeout=Integer.valueOf(7200);
  }
  List<String> results=FastList.newInstance();
  if (UtilValidate.isNotEmpty(outpath)) {
    File outdir=new File(outpath);
    if (!outdir.exists()) {
      outdir.mkdir();
    }
    if (outdir.isDirectory() && outdir.canWrite()) {
      Set<String> passedEntityNames;
      try {
        ModelReader reader=delegator.getModelReader();
        Collection<String> ec=reader.getEntityNames();
        passedEntityNames=new TreeSet<String>(ec);
      }
 catch (      Exception exc) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityImportErrorRetrievingEntityNames",locale));
      }
      int fileNumber=1;
      for (      String curEntityName : passedEntityNames) {
        long numberWritten=0;
        EntityListIterator values=null;
        try {
          ModelEntity me=delegator.getModelEntity(curEntityName);
          if (me instanceof ModelViewEntity) {
            results.add("[" + fileNumber + "] [vvv] "+ curEntityName+ " skipping view entity");
            continue;
          }
          boolean beganTx=TransactionUtil.begin();
          try {
            List<EntityCondition> conds=FastList.newInstance();
            if (UtilValidate.isNotEmpty(fromDate)) {
              conds.add(EntityCondition.makeCondition("createdStamp",EntityOperator.GREATER_THAN_EQUAL_TO,fromDate));
            }
            values=EntityQuery.use(delegator).from(curEntityName).where(conds).orderBy(me.getPkFieldNames()).queryIterator();
          }
 catch (          Exception entityEx) {
            results.add("[" + fileNumber + "] [xxx] Error when writing "+ curEntityName+ ": "+ entityEx);
            continue;
          }
          GenericValue value=values.next();
          if (value != null) {
            PrintWriter writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(outdir,curEntityName + ".xml")),"UTF-8")));
            writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            writer.println("<entity-engine-xml>");
            do {
              value.writeXmlText(writer,"");
              numberWritten++;
              if (numberWritten % 500 == 0) {
                TransactionUtil.commit(beganTx);
                beganTx=TransactionUtil.begin();
              }
            }
 while ((value=values.next()) != null);
            writer.println("</entity-engine-xml>");
            writer.close();
            results.add("[" + fileNumber + "] ["+ numberWritten+ "] "+ curEntityName+ " wrote "+ numberWritten+ " records");
          }
 else {
            results.add("[" + fileNumber + "] [---] "+ curEntityName+ " has no records, not writing file");
          }
          values.close();
          TransactionUtil.commit(beganTx);
        }
 catch (        Exception ex) {
          if (values != null) {
            try {
              values.close();
            }
 catch (            Exception exc) {
            }
          }
          results.add("[" + fileNumber + "] [xxx] Error when writing "+ curEntityName+ ": "+ ex);
        }
        fileNumber++;
      }
    }
 else {
      results.add("Path not found or no write access.");
    }
  }
 else {
    results.add("No path specified, doing nothing.");
  }
  Map<String,Object> resp=UtilMisc.<String,Object>toMap("results",results);
  return resp;
}
