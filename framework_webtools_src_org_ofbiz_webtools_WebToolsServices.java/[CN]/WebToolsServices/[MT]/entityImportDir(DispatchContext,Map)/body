{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  List messages=new ArrayList();
  String path=(String)context.get("path");
  String mostlyInserts=(String)context.get("mostlyInserts");
  String maintainTimeStamps=(String)context.get("maintainTimeStamps");
  String createDummyFks=(String)context.get("createDummyFks");
  boolean deleteFiles=(String)context.get("deleteFiles") != null;
  Integer txTimeout=(Integer)context.get("txTimeout");
  Long filePause=(Long)context.get("filePause");
  if (txTimeout == null) {
    txTimeout=new Integer(7200);
  }
  if (filePause == null) {
    filePause=new Long(0);
  }
  if (path != null && path.length() > 0) {
    long pauseLong=filePause != null ? filePause.longValue() : 0;
    File baseDir=new File(path);
    if (baseDir.isDirectory() && baseDir.canRead()) {
      File[] fileArray=baseDir.listFiles();
      ArrayList files=new ArrayList(fileArray.length);
      for (int a=0; a < fileArray.length; a++) {
        if (fileArray[a].getName().toUpperCase().endsWith("XML")) {
          files.add(fileArray[a]);
        }
      }
      boolean importedOne=false;
      int fileListMarkedSize=files.size();
      int passes=0;
      for (int a=0; a < files.size(); a++) {
        if (a == fileListMarkedSize) {
          passes++;
          fileListMarkedSize=files.size();
          messages.add("Pass " + passes + " complete");
          if (false == importedOne) {
            messages.add("Dropping out as we failed to make any imports on the last pass");
            a=files.size();
            continue;
          }
          importedOne=false;
        }
        File curFile=(File)files.get(a);
        try {
          URL url=curFile.toURL();
          Map inputMap=UtilMisc.toMap("url",url,"mostlyInserts",mostlyInserts,"createDummyFks",createDummyFks,"maintainTimeStamps",maintainTimeStamps,"txTimeout",txTimeout,"userLogin",userLogin);
          Map outputMap=dispatcher.runSync("parseEntityXmlFile",inputMap);
          Long numberRead=(Long)outputMap.get("rowProcessed");
          messages.add("Got " + numberRead.longValue() + " entities from "+ curFile);
          importedOne=true;
          if (deleteFiles) {
            curFile.delete();
          }
        }
 catch (        Exception ex) {
          messages.add("Error trying to read from " + curFile + ": "+ ex);
          if (ex.toString().indexOf("referential integrity violation") > -1 || ex.toString().indexOf("Integrity constraint violation") > -1) {
            messages.add("Looks like referential integrity violation, will retry");
            files.add(curFile);
          }
        }
        if (pauseLong > 0) {
          Debug.log("Pausing for [" + pauseLong + "] seconds - "+ UtilDateTime.nowTimestamp());
          try {
            Thread.sleep((pauseLong * 1000));
          }
 catch (          InterruptedException ie) {
            Debug.log("Pause finished - " + UtilDateTime.nowTimestamp());
          }
        }
      }
    }
 else {
      messages.add("path not found or can't be read");
    }
  }
 else {
    messages.add("No path specified, doing nothing.");
  }
  Map resp=UtilMisc.toMap("messages",messages);
  return resp;
}
