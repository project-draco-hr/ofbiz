{
  Map result=ServiceUtil.returnSuccess();
  GenericDelegator delegator=dctx.getDelegator();
  String serviceName=(String)context.get("serviceName");
  String jobId=(String)context.get("jobId");
  String jobName=(String)context.get("jobName");
  int viewIndex=0;
  try {
    viewIndex=Integer.parseInt((String)context.get("VIEW_INDEX"));
  }
 catch (  Exception e) {
    viewIndex=0;
  }
  result.put("viewIndex",new Integer(viewIndex));
  int viewSize=20;
  try {
    viewSize=Integer.parseInt((String)context.get("VIEW_SIZE"));
  }
 catch (  Exception e) {
    viewSize=20;
  }
  result.put("viewSize",new Integer(viewSize));
  String lookupFlag=(String)context.get("lookupFlag");
  List paramList=FastList.newInstance();
  List conditions=FastList.newInstance();
  List jobList=null;
  int jobListSize=0;
  int lowIndex=0;
  int highIndex=0;
  EntityListIterator eli=null;
  if ("Y".equals(lookupFlag)) {
    String showAll=(context.get("showAll") != null ? (String)context.get("showAll") : "N");
    paramList.add("showAll=" + showAll);
    paramList.add("lookupFlag=" + lookupFlag);
    if (UtilValidate.isNotEmpty(serviceName)) {
      paramList.add("serviceName=" + serviceName);
      conditions.add(new EntityExpr("serviceName",true,EntityOperator.LIKE,"%" + serviceName + "%",true));
    }
    if (UtilValidate.isNotEmpty(jobId)) {
      paramList.add("jobId=" + jobId);
      conditions.add(new EntityExpr("jobId",true,EntityOperator.LIKE,"%" + jobId + "%",true));
    }
    if (UtilValidate.isNotEmpty(jobName)) {
      paramList.add("jobName=" + jobName);
      conditions.add(new EntityExpr("jobName",true,EntityOperator.LIKE,"%" + jobName + "%",true));
    }
    List filterExprs=FastList.newInstance();
    String filterJobPending=(String)context.get("filterJobsWithPendingStatus");
    String filterJobRunning=(String)context.get("filterJobsWithRunningStatus");
    String filterJobFinished=(String)context.get("filterJobsWithFinishedStatus");
    if (filterJobPending == null) {
      filterJobPending="N";
    }
    if (filterJobRunning == null) {
      filterJobRunning="N";
    }
    if (filterJobFinished == null) {
      filterJobFinished="N";
    }
    if ("Y".equals(filterJobPending)) {
      paramList.add("filterJobsWithPendingStatus=Y");
      filterExprs.add(new EntityExpr("statusId",EntityOperator.EQUALS,"SERVICE_PENDING"));
      result.put("filterJobsWithPendingStatus",filterJobPending);
    }
    if ("Y".equals(filterJobRunning)) {
      paramList.add("filterJobsWithRunningStatus=Y");
      filterExprs.add(new EntityExpr("statusId",EntityOperator.EQUALS,"SERVICE_RUNNING"));
      result.put("filterJobsWithRunningStatus",filterJobRunning);
    }
    if ("Y".equals(filterJobFinished)) {
      paramList.add("filterJobsWithFinishedStatus=Y");
      filterExprs.add(new EntityExpr("statusId",EntityOperator.EQUALS,"SERVICE_FINISHED"));
      result.put("filterJobsWithFinishedStatus",filterJobFinished);
    }
    if (filterExprs.size() > 0) {
      conditions.add(new EntityConditionList(filterExprs,EntityOperator.OR));
    }
    EntityFindOptions findOpts=new EntityFindOptions(true,EntityFindOptions.TYPE_SCROLL_INSENSITIVE,EntityFindOptions.CONCUR_READ_ONLY,true);
    List orderBy=UtilMisc.toList("serviceName");
    EntityCondition cond=null;
    if (conditions.size() > 0) {
      cond=new EntityConditionList(conditions,EntityOperator.AND);
    }
    if (cond != null || "Y".equals(showAll)) {
      try {
        eli=delegator.findListIteratorByCondition("JobSandbox",cond,null,null,orderBy,findOpts);
        lowIndex=viewIndex * viewSize + 1;
        highIndex=(viewIndex + 1) * viewSize;
        jobList=eli.getPartialList(lowIndex,viewSize);
        eli.last();
        jobListSize=eli.currentIndex();
        if (highIndex > jobListSize) {
          highIndex=jobListSize;
        }
        eli.close();
      }
 catch (      GenericEntityException e) {
        String errMsg="Failure in job find operation, rolling back transaction: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
    }
 else {
      jobListSize=0;
    }
  }
  if (jobList == null)   jobList=FastList.newInstance();
  String paramString=StringUtil.join(paramList,"&amp;");
  result.put("paramList",(paramString != null ? paramString : ""));
  result.put("lowIndex",new Integer(lowIndex));
  result.put("highIndex",new Integer(highIndex));
  result.put("jobs",jobList);
  result.put("jobListSize",new Integer(jobListSize));
  return result;
}
