{
  String eomodeldFullPath=(String)context.get("eomodeldFullPath");
  String entityPackageNameOrig=(String)context.get("entityPackageName");
  String entityGroupId=(String)context.get("entityGroupId");
  String datasourceName=(String)context.get("datasourceName");
  String entityNamePrefix=(String)context.get("entityNamePrefix");
  Locale locale=(Locale)context.get("locale");
  if (datasourceName == null)   datasourceName="localderby";
  ModelReader reader=dctx.getDelegator().getModelReader();
  try {
    if (!eomodeldFullPath.endsWith(".eomodeld")) {
      eomodeldFullPath=eomodeldFullPath + ".eomodeld";
    }
    File outdir=new File(eomodeldFullPath);
    if (!outdir.exists()) {
      outdir.mkdir();
    }
    if (!outdir.isDirectory()) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"WebtoolsEomodelFullPathIsNotADirectory",UtilMisc.toMap("eomodeldFullPath",eomodeldFullPath),locale));
    }
    if (!outdir.canWrite()) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"WebtoolsEomodelFullPathIsNotWriteable",UtilMisc.toMap("eomodeldFullPath",eomodeldFullPath),locale));
    }
    Set<String> entityNames=new TreeSet<String>();
    if (UtilValidate.isNotEmpty(entityPackageNameOrig)) {
      Set<String> entityPackageNameSet=new HashSet<String>();
      entityPackageNameSet.addAll(StringUtil.split(entityPackageNameOrig,","));
      Debug.logInfo("Exporting with entityPackageNameSet: " + entityPackageNameSet,module);
      Map<String,TreeSet<String>> entitiesByPackage=reader.getEntitiesByPackage(entityPackageNameSet,null);
      for (      Map.Entry<String,TreeSet<String>> entitiesByPackageMapEntry : entitiesByPackage.entrySet()) {
        entityNames.addAll(entitiesByPackageMapEntry.getValue());
      }
    }
 else     if (UtilValidate.isNotEmpty(entityGroupId)) {
      Debug.logInfo("Exporting entites from the Group: " + entityGroupId,module);
      entityNames.addAll(EntityGroupUtil.getEntityNamesByGroup(entityGroupId,dctx.getDelegator(),false));
    }
 else {
      entityNames.addAll(reader.getEntityNames());
    }
    Debug.logInfo("Exporting the following entities: " + entityNames,module);
    Iterator<String> filterEntityNameIter=entityNames.iterator();
    while (filterEntityNameIter.hasNext()) {
      String entityName=filterEntityNameIter.next();
      ModelEntity modelEntity=reader.getModelEntity(entityName);
      if (modelEntity instanceof ModelViewEntity) {
        filterEntityNameIter.remove();
      }
    }
    Map<String,Object> topLevelMap=new HashMap<String,Object>();
    topLevelMap.put("EOModelVersion","\"2.1\"");
    List<Map<String,Object>> entitiesMapList=new LinkedList<Map<String,Object>>();
    topLevelMap.put("entities",entitiesMapList);
    for (    String entityName : entityNames) {
      Map<String,Object> entitiesMap=new HashMap<String,Object>();
      entitiesMapList.add(entitiesMap);
      entitiesMap.put("className","EOGenericRecord");
      entitiesMap.put("name",entityName);
    }
    UtilPlist.writePlistFile(topLevelMap,eomodeldFullPath,"index.eomodeld",true);
    for (    String curEntityName : entityNames) {
      ModelEntity modelEntity=reader.getModelEntity(curEntityName);
      UtilPlist.writePlistFile(modelEntity.createEoModelMap(entityNamePrefix,datasourceName,entityNames,reader),eomodeldFullPath,curEntityName + ".plist",true);
    }
    Integer entityNamesSize=new Integer(entityNames.size());
    return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"WebtoolsEomodelExported",UtilMisc.toMap("entityNamesSize",entityNamesSize.toString(),"eomodeldFullPath",eomodeldFullPath),locale));
  }
 catch (  UnsupportedEncodingException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"WebtoolsEomodelSavingFileError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
catch (  FileNotFoundException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"WebtoolsEomodelFileOrDirectoryNotFound",UtilMisc.toMap("errorString",e.toString()),locale));
  }
catch (  GenericEntityException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"WebtoolsEomodelErrorGettingEntityNames",UtilMisc.toMap("errorString",e.toString()),locale));
  }
}
