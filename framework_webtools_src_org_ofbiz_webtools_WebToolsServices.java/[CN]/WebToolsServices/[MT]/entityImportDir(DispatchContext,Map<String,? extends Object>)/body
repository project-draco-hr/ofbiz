{
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  LocalDispatcher dispatcher=dctx.getDispatcher();
  List<String> messages=FastList.newInstance();
  String path=(String)context.get("path");
  String mostlyInserts=(String)context.get("mostlyInserts");
  String maintainTimeStamps=(String)context.get("maintainTimeStamps");
  String createDummyFks=(String)context.get("createDummyFks");
  boolean deleteFiles=(String)context.get("deleteFiles") != null;
  String checkDataOnly=(String)context.get("checkDataOnly");
  Integer txTimeout=(Integer)context.get("txTimeout");
  Long filePause=(Long)context.get("filePause");
  if (txTimeout == null) {
    txTimeout=Integer.valueOf(7200);
  }
  if (filePause == null) {
    filePause=Long.valueOf(0);
  }
  if (UtilValidate.isNotEmpty(path)) {
    long pauseLong=filePause != null ? filePause.longValue() : 0;
    File baseDir=new File(path);
    if (baseDir.isDirectory() && baseDir.canRead()) {
      File[] fileArray=baseDir.listFiles();
      FastList<File> files=FastList.newInstance();
      for (      File file : fileArray) {
        if (file.getName().toUpperCase().endsWith("XML")) {
          files.add(file);
        }
      }
      int passes=0;
      int initialListSize=files.size();
      int lastUnprocessedFilesCount=0;
      FastList<File> unprocessedFiles=FastList.newInstance();
      while (files.size() > 0 && files.size() != lastUnprocessedFilesCount) {
        lastUnprocessedFilesCount=files.size();
        unprocessedFiles=FastList.newInstance();
        for (        File f : files) {
          Map<String,Object> parseEntityXmlFileArgs=UtilMisc.toMap("mostlyInserts",mostlyInserts,"createDummyFks",createDummyFks,"checkDataOnly",checkDataOnly,"maintainTimeStamps",maintainTimeStamps,"txTimeout",txTimeout,"userLogin",userLogin);
          try {
            URL furl=f.toURI().toURL();
            parseEntityXmlFileArgs.put("url",furl);
            Map<String,Object> outputMap=dispatcher.runSync("parseEntityXmlFile",parseEntityXmlFileArgs);
            Long numberRead=(Long)outputMap.get("rowProcessed");
            messages.add("Got " + numberRead.longValue() + " entities from "+ f);
            if (deleteFiles) {
              messages.add("Deleting " + f);
              f.delete();
            }
          }
 catch (          Exception e) {
            unprocessedFiles.add(f);
            messages.add("Failed " + f + " adding to retry list for next pass");
          }
          if (pauseLong > 0) {
            Debug.log("Pausing for [" + pauseLong + "] seconds - "+ UtilDateTime.nowTimestamp());
            try {
              Thread.sleep((pauseLong * 1000));
            }
 catch (            InterruptedException ie) {
              Debug.log("Pause finished - " + UtilDateTime.nowTimestamp());
            }
          }
        }
        files=unprocessedFiles;
        passes++;
        messages.add("Pass " + passes + " complete");
        Debug.logInfo("Pass " + passes + " complete",module);
      }
      lastUnprocessedFilesCount=unprocessedFiles.size();
      messages.add("---------------------------------------");
      messages.add("Succeeded: " + (initialListSize - lastUnprocessedFilesCount) + " of "+ initialListSize);
      messages.add("Failed:    " + lastUnprocessedFilesCount + " of "+ initialListSize);
      messages.add("---------------------------------------");
      messages.add("Failed Files:");
      for (      File file : unprocessedFiles) {
        messages.add(file.toString());
      }
    }
 else {
      messages.add("path not found or can't be read");
    }
  }
 else {
    messages.add("No path specified, doing nothing.");
  }
  Map<String,Object> resp=UtilMisc.toMap("messages",(Object)messages);
  return resp;
}
