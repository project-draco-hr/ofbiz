{
  if (UtilValidate.isEmpty(formalParameters))   return;
  Iterator formalParametersIter=formalParameters.iterator();
  long index=1;
  while (formalParametersIter.hasNext()) {
    Element formalParameterElement=(Element)formalParametersIter.next();
    GenericValue formalParameterValue=delegator.makeValue("WorkflowFormalParam");
    values.add(formalParameterValue);
    String formalParamId=formalParameterElement.getAttribute("Id");
    formalParameterValue.set("packageId",packageId);
    formalParameterValue.set("packageVersion",packageVersion);
    formalParameterValue.set("processId",processId);
    formalParameterValue.set("processVersion",processVersion);
    formalParameterValue.set("applicationId",applicationId);
    formalParameterValue.set("formalParamId",formalParamId);
    formalParameterValue.set("modeEnumId","WPM_" + formalParameterElement.getAttribute("Mode"));
    String indexStr=formalParameterElement.getAttribute("Index");
    if (indexStr != null && indexStr.length() > 0) {
      try {
        formalParameterValue.set("indexNumber",Long.valueOf(indexStr));
      }
 catch (      NumberFormatException e) {
        throw new DefinitionParserException("Invalid decimal number format in FormalParameter->Index: " + indexStr,e);
      }
    }
 else     formalParameterValue.set("indexNumber",new Long(index));
    index++;
    Element dataTypeElement=UtilXml.firstChildElement(formalParameterElement,"DataType");
    if (dataTypeElement != null) {
      readType(dataTypeElement,formalParameterValue);
    }
    formalParameterValue.set("description",UtilXml.childElementValue(formalParameterElement,"Description"));
  }
}
