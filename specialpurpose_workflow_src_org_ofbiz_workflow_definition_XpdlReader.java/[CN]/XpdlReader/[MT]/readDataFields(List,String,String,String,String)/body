{
  if (UtilValidate.isEmpty(dataFields))   return;
  Iterator dataFieldsIter=dataFields.iterator();
  while (dataFieldsIter.hasNext()) {
    Element dataFieldElement=(Element)dataFieldsIter.next();
    GenericValue dataFieldValue=delegator.makeValue("WorkflowDataField");
    values.add(dataFieldValue);
    String dataFieldId=dataFieldElement.getAttribute("Id");
    String dataFieldName=dataFieldElement.getAttribute("Name");
    if (UtilValidate.isEmpty(dataFieldName))     dataFieldName=dataFieldId;
    dataFieldValue.set("packageId",packageId);
    dataFieldValue.set("packageVersion",packageVersion);
    dataFieldValue.set("processId",processId);
    dataFieldValue.set("processVersion",processVersion);
    dataFieldValue.set("dataFieldId",dataFieldId);
    dataFieldValue.set("dataFieldName",dataFieldName);
    dataFieldValue.set("isArray",("TRUE".equals(dataFieldElement.getAttribute("IsArray")) ? "Y" : "N"));
    Element dataTypeElement=UtilXml.firstChildElement(dataFieldElement,"DataType");
    if (dataTypeElement != null) {
      readType(dataTypeElement,dataFieldValue);
    }
    dataFieldValue.set("initialValue",UtilXml.childElementValue(dataFieldElement,"InitialValue"));
    String lengthStr=UtilXml.childElementValue(dataFieldElement,"Length");
    if (lengthStr != null && lengthStr.length() > 0) {
      try {
        dataFieldValue.set("lengthBytes",Long.valueOf(lengthStr));
      }
 catch (      NumberFormatException e) {
        throw new DefinitionParserException("Invalid whole number format in DataField->Length: " + lengthStr,e);
      }
    }
    dataFieldValue.set("description",UtilXml.childElementValue(dataFieldElement,"Description"));
  }
}
