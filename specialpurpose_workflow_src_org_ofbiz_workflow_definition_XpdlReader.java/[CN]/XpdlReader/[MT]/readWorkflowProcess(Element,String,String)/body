{
  GenericValue workflowProcessValue=delegator.makeValue("WorkflowProcess");
  values.add(workflowProcessValue);
  String processId=workflowProcessElement.getAttribute("Id");
  workflowProcessValue.set("packageId",packageId);
  workflowProcessValue.set("packageVersion",packageVersion);
  workflowProcessValue.set("processId",processId);
  workflowProcessValue.set("objectName",workflowProcessElement.getAttribute("Name"));
  Element processHeaderElement=UtilXml.firstChildElement(workflowProcessElement,"ProcessHeader");
  if (processHeaderElement != null) {
    workflowProcessValue.set("durationUomId",processHeaderElement.getAttribute("DurationUnit"));
    String createdStr=UtilXml.childElementValue(processHeaderElement,"Created");
    if (createdStr != null) {
      try {
        workflowProcessValue.set("creationDateTime",java.sql.Timestamp.valueOf(createdStr));
      }
 catch (      IllegalArgumentException e) {
        throw new DefinitionParserException("Invalid Date-Time format in WorkflowProcess->ProcessHeader->Created: " + createdStr,e);
      }
    }
    workflowProcessValue.set("description",UtilXml.childElementValue(processHeaderElement,"Description"));
    String priorityStr=UtilXml.childElementValue(processHeaderElement,"Priority");
    if (priorityStr != null) {
      try {
        workflowProcessValue.set("objectPriority",Long.valueOf(priorityStr));
      }
 catch (      NumberFormatException e) {
        throw new DefinitionParserException("Invalid whole number format in WorkflowProcess->ProcessHeader->Priority: " + priorityStr,e);
      }
    }
    String limitStr=UtilXml.childElementValue(processHeaderElement,"Limit");
    if (limitStr != null) {
      try {
        workflowProcessValue.set("timeLimit",Double.valueOf(limitStr));
      }
 catch (      NumberFormatException e) {
        throw new DefinitionParserException("Invalid decimal number format in WorkflowProcess->ProcessHeader->Limit: " + limitStr,e);
      }
    }
    String validFromStr=UtilXml.childElementValue(processHeaderElement,"ValidFrom");
    if (validFromStr != null) {
      try {
        workflowProcessValue.set("validFromDate",java.sql.Timestamp.valueOf(validFromStr));
      }
 catch (      IllegalArgumentException e) {
        throw new DefinitionParserException("Invalid Date-Time format in WorkflowProcess->ProcessHeader->ValidFrom: " + validFromStr,e);
      }
    }
    String validToStr=UtilXml.childElementValue(processHeaderElement,"ValidTo");
    if (validToStr != null) {
      try {
        workflowProcessValue.set("validToDate",java.sql.Timestamp.valueOf(validToStr));
      }
 catch (      IllegalArgumentException e) {
        throw new DefinitionParserException("Invalid Date-Time format in WorkflowProcess->ProcessHeader->ValidTo: " + validToStr,e);
      }
    }
    Element timeEstimationElement=UtilXml.firstChildElement(processHeaderElement,"TimeEstimation");
    if (timeEstimationElement != null) {
      String waitingTimeStr=UtilXml.childElementValue(timeEstimationElement,"WaitingTime");
      if (waitingTimeStr != null) {
        try {
          workflowProcessValue.set("waitingTime",Double.valueOf(waitingTimeStr));
        }
 catch (        NumberFormatException e) {
          throw new DefinitionParserException("Invalid decimal number format in WorkflowProcess->ProcessHeader->TimeEstimation->WaitingTime: " + waitingTimeStr,e);
        }
      }
      String workingTimeStr=UtilXml.childElementValue(timeEstimationElement,"WorkingTime");
      if (workingTimeStr != null) {
        try {
          workflowProcessValue.set("waitingTime",Double.valueOf(workingTimeStr));
        }
 catch (        NumberFormatException e) {
          throw new DefinitionParserException("Invalid decimal number format in WorkflowProcess->ProcessHeader->TimeEstimation->WorkingTime: " + workingTimeStr,e);
        }
      }
      String durationStr=UtilXml.childElementValue(timeEstimationElement,"Duration");
      if (durationStr != null) {
        try {
          workflowProcessValue.set("duration",Double.valueOf(durationStr));
        }
 catch (        NumberFormatException e) {
          throw new DefinitionParserException("Invalid decimal number format in WorkflowProcess->ProcessHeader->TimeEstimation->Duration: " + durationStr,e);
        }
      }
    }
  }
  Element redefinableHeaderElement=UtilXml.firstChildElement(workflowProcessElement,"RedefinableHeader");
  boolean processOk=readRedefinableHeader(redefinableHeaderElement,workflowProcessValue,"process");
  String processVersion=workflowProcessValue.getString("processVersion");
  if (!processOk) {
    values.remove(workflowProcessValue);
    return;
  }
  Element formalParametersElement=UtilXml.firstChildElement(workflowProcessElement,"FormalParameters");
  List<? extends Element> formalParameters=UtilXml.childElementList(formalParametersElement,"FormalParameter");
  readFormalParameters(formalParameters,packageId,packageVersion,processId,processVersion,"_NA_");
  Element dataFieldsElement=UtilXml.firstChildElement(workflowProcessElement,"DataFields");
  List<? extends Element> dataFields=UtilXml.childElementList(dataFieldsElement,"DataField");
  readDataFields(dataFields,packageId,packageVersion,processId,processVersion);
  Element participantsElement=UtilXml.firstChildElement(workflowProcessElement,"Participants");
  List<? extends Element> participants=UtilXml.childElementList(participantsElement,"Participant");
  readParticipants(participants,packageId,packageVersion,processId,processVersion,workflowProcessValue);
  Element applicationsElement=UtilXml.firstChildElement(workflowProcessElement,"Applications");
  List<? extends Element> applications=UtilXml.childElementList(applicationsElement,"Application");
  readApplications(applications,packageId,packageVersion,processId,processVersion);
  Element activitiesElement=UtilXml.firstChildElement(workflowProcessElement,"Activities");
  List<? extends Element> activities=UtilXml.childElementList(activitiesElement,"Activity");
  readActivities(activities,packageId,packageVersion,processId,processVersion,workflowProcessValue);
  Element transitionsElement=UtilXml.firstChildElement(workflowProcessElement,"Transitions");
  List<? extends Element> transitions=UtilXml.childElementList(transitionsElement,"Transition");
  readTransitions(transitions,packageId,packageVersion,processId,processVersion);
  workflowProcessValue.set("defaultStartActivityId",getExtendedAttributeValue(workflowProcessElement,"defaultStartActivityId",workflowProcessValue.getString("defaultStartActivityId")));
  workflowProcessValue.set("sourceReferenceField",getExtendedAttributeValue(workflowProcessElement,"sourceReferenceField","sourceReferenceId"));
}
