{
  if (activityElement == null)   return;
  GenericValue activityValue=delegator.makeValue("WorkflowActivity");
  values.add(activityValue);
  String activityId=activityElement.getAttribute("Id");
  activityValue.set("packageId",packageId);
  activityValue.set("packageVersion",packageVersion);
  activityValue.set("processId",processId);
  activityValue.set("processVersion",processVersion);
  activityValue.set("activityId",activityId);
  activityValue.set("objectName",activityElement.getAttribute("Name"));
  activityValue.set("description",UtilXml.childElementValue(activityElement,"Description"));
  String limitStr=UtilXml.childElementValue(activityElement,"Limit");
  if (limitStr != null) {
    try {
      activityValue.set("timeLimit",Double.valueOf(limitStr));
    }
 catch (    NumberFormatException e) {
      throw new DefinitionParserException("Invalid decimal number format in Activity->Limit: " + limitStr,e);
    }
  }
  Element routeElement=UtilXml.firstChildElement(activityElement,"Route");
  Element implementationElement=UtilXml.firstChildElement(activityElement,"Implementation");
  if (routeElement != null) {
    activityValue.set("activityTypeEnumId","WAT_ROUTE");
  }
 else   if (implementationElement != null) {
    Element noElement=UtilXml.firstChildElement(implementationElement,"No");
    Element subFlowElement=UtilXml.firstChildElement(implementationElement,"SubFlow");
    Element loopElement=UtilXml.firstChildElement(implementationElement,"Loop");
    List<? extends Element> tools=UtilXml.childElementList(implementationElement,"Tool");
    if (noElement != null) {
      activityValue.set("activityTypeEnumId","WAT_NO");
    }
 else     if (subFlowElement != null) {
      activityValue.set("activityTypeEnumId","WAT_SUBFLOW");
      readSubFlow(subFlowElement,packageId,packageVersion,processId,processVersion,activityId);
    }
 else     if (loopElement != null) {
      activityValue.set("activityTypeEnumId","WAT_LOOP");
      readLoop(loopElement,packageId,packageVersion,processId,processVersion,activityId);
    }
 else     if (UtilValidate.isNotEmpty(tools)) {
      activityValue.set("activityTypeEnumId","WAT_TOOL");
      readTools(tools,packageId,packageVersion,processId,processVersion,activityId);
    }
 else {
      throw new DefinitionParserException("No, SubFlow, Loop or one or more Tool elements must exist under the Implementation element of Activity with ID " + activityId + " in Process with ID "+ processId);
    }
  }
 else {
    throw new DefinitionParserException("Route or Implementation must exist for Activity with ID " + activityId + " in Process with ID "+ processId);
  }
  activityValue.set("performerParticipantId",UtilXml.childElementValue(activityElement,"Performer"));
  Element startModeElement=UtilXml.firstChildElement(activityElement,"StartMode");
  if (startModeElement != null) {
    if (UtilXml.firstChildElement(startModeElement,"Automatic") != null)     activityValue.set("startModeEnumId","WAM_AUTOMATIC");
 else     if (UtilXml.firstChildElement(startModeElement,"Manual") != null)     activityValue.set("startModeEnumId","WAM_MANUAL");
 else     throw new DefinitionParserException("Could not find Mode under StartMode");
  }
  Element finishModeElement=UtilXml.firstChildElement(activityElement,"FinishMode");
  if (finishModeElement != null) {
    if (UtilXml.firstChildElement(finishModeElement,"Automatic") != null)     activityValue.set("finishModeEnumId","WAM_AUTOMATIC");
 else     if (UtilXml.firstChildElement(finishModeElement,"Manual") != null)     activityValue.set("finishModeEnumId","WAM_MANUAL");
 else     throw new DefinitionParserException("Could not find Mode under FinishMode");
  }
  String priorityStr=UtilXml.childElementValue(activityElement,"Priority");
  if (priorityStr != null) {
    try {
      activityValue.set("objectPriority",Long.valueOf(priorityStr));
    }
 catch (    NumberFormatException e) {
      throw new DefinitionParserException("Invalid whole number format in Activity->Priority: " + priorityStr,e);
    }
  }
  Element simulationInformationElement=UtilXml.firstChildElement(activityElement,"SimulationInformation");
  if (simulationInformationElement != null) {
    if (simulationInformationElement.getAttribute("Instantiation") != null)     activityValue.set("instantiationLimitEnumId","WFI_" + simulationInformationElement.getAttribute("Instantiation"));
    String costStr=UtilXml.childElementValue(simulationInformationElement,"Cost");
    if (costStr != null) {
      try {
        activityValue.set("cost",Double.valueOf(costStr));
      }
 catch (      NumberFormatException e) {
        throw new DefinitionParserException("Invalid decimal number format in Activity->SimulationInformation->Cost: " + costStr,e);
      }
    }
    Element timeEstimationElement=UtilXml.firstChildElement(simulationInformationElement,"TimeEstimation");
    if (timeEstimationElement != null) {
      String waitingTimeStr=UtilXml.childElementValue(timeEstimationElement,"WaitingTime");
      if (waitingTimeStr != null) {
        try {
          activityValue.set("waitingTime",Double.valueOf(waitingTimeStr));
        }
 catch (        NumberFormatException e) {
          throw new DefinitionParserException("Invalid decimal number format in Activity->SimulationInformation->TimeEstimation->WaitingTime: " + waitingTimeStr,e);
        }
      }
      String workingTimeStr=UtilXml.childElementValue(timeEstimationElement,"WorkingTime");
      if (workingTimeStr != null) {
        try {
          activityValue.set("waitingTime",Double.valueOf(workingTimeStr));
        }
 catch (        NumberFormatException e) {
          throw new DefinitionParserException("Invalid decimal number format in Activity->SimulationInformation->TimeEstimation->WorkingTime: " + workingTimeStr,e);
        }
      }
      String durationStr=UtilXml.childElementValue(timeEstimationElement,"Duration");
      if (durationStr != null) {
        try {
          activityValue.set("duration",Double.valueOf(durationStr));
        }
 catch (        NumberFormatException e) {
          throw new DefinitionParserException("Invalid decimal number format in Activity->SimulationInformation->TimeEstimation->Duration: " + durationStr,e);
        }
      }
    }
  }
  activityValue.set("iconUrl",UtilXml.childElementValue(activityElement,"Icon"));
  activityValue.set("documentationUrl",UtilXml.childElementValue(activityElement,"Documentation"));
  Element transitionRestrictionsElement=UtilXml.firstChildElement(activityElement,"TransitionRestrictions");
  List<? extends Element> transitionRestrictions=UtilXml.childElementList(transitionRestrictionsElement,"TransitionRestriction");
  readTransitionRestrictions(transitionRestrictions,activityValue);
  activityValue.set("acceptAllAssignments",getExtendedAttributeValue(activityElement,"acceptAllAssignments","N"));
  activityValue.set("completeAllAssignments",getExtendedAttributeValue(activityElement,"completeAllAssignments","N"));
  activityValue.set("limitService",getExtendedAttributeValue(activityElement,"limitService",null),false);
  activityValue.set("limitAfterStart",getExtendedAttributeValue(activityElement,"limitAfterStart","Y"));
  activityValue.set("restartOnDelegate",getExtendedAttributeValue(activityElement,"restartOnDelegate","N"));
  activityValue.set("delegateAfterStart",getExtendedAttributeValue(activityElement,"delegateAfterStart","Y"));
  activityValue.set("inheritPriority",getExtendedAttributeValue(activityElement,"inheritPriority","N"));
  activityValue.set("canStart",getExtendedAttributeValue(activityElement,"canStart","Y"));
}
