{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  Address workAddress=null;
  String email=null;
  String phone=null;
  ByteBuffer byteBuffer=(ByteBuffer)context.get("infile");
  byte[] inputByteArray=byteBuffer.array();
  InputStream in=new ByteArrayInputStream(inputByteArray);
  String partyType=(String)context.get("partyType");
  Boolean isGroup="PartyGroup".equals(partyType);
  Map<String,Object> serviceCtx=FastMap.newInstance();
  try {
    ContactIOFactory ciof=Pim.getContactIOFactory();
    ContactUnmarshaller unmarshaller=ciof.createContactUnmarshaller();
    Contact[] contacts=unmarshaller.unmarshallContacts(in);
    for (    Contact contact : contacts) {
      PersonalIdentity pid=contact.getPersonalIdentity();
      if (!isGroup) {
        serviceCtx.put("firstName",pid.getFirstname());
        serviceCtx.put("lastName",pid.getLastname());
      }
      for (Iterator<?> iter=contact.getAddresses(); iter.hasNext(); ) {
        Address address=(AddressImpl)iter.next();
        if (contact.isPreferredAddress(address)) {
          workAddress=address;
          break;
        }
 else         if (address.isWork()) {
          workAddress=address;
          break;
        }
 else {
          continue;
        }
      }
      if (UtilValidate.isNotEmpty(workAddress)) {
        serviceCtx.put("address1",workAddress.getStreet());
        serviceCtx.put("city",workAddress.getCity());
        serviceCtx.put("postalCode",workAddress.getPostalCode());
        List<GenericValue> countryGeoList=null;
        List<GenericValue> stateGeoList=null;
        EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("geoTypeId",EntityOperator.EQUALS,"COUNTRY"),EntityCondition.makeCondition("geoName",EntityOperator.LIKE,workAddress.getCountry())),EntityOperator.AND);
        countryGeoList=delegator.findList("Geo",cond,null,null,null,true);
        if (!countryGeoList.isEmpty()) {
          GenericValue countryGeo=EntityUtil.getFirst(countryGeoList);
          serviceCtx.put("countryGeoId",countryGeo.get("geoId"));
        }
        EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("geoTypeId",EntityOperator.EQUALS,"STATE"),EntityCondition.makeCondition("geoName",EntityOperator.LIKE,workAddress.getRegion())),EntityOperator.AND);
        stateGeoList=delegator.findList("Geo",condition,null,null,null,true);
        if (!stateGeoList.isEmpty()) {
          GenericValue stateGeo=EntityUtil.getFirst(stateGeoList);
          serviceCtx.put("stateProvinceGeoId",stateGeo.get("geoId"));
        }
      }
      if (!isGroup) {
        Communications communications=contact.getCommunications();
        if (UtilValidate.isNotEmpty(communications)) {
          for (Iterator<?> iter=communications.getEmailAddresses(); iter.hasNext(); ) {
            EmailAddress emailAddress=(EmailAddressImpl)iter.next();
            if (communications.isPreferredEmailAddress(emailAddress)) {
              email=emailAddress.getAddress();
              break;
            }
 else {
              email=emailAddress.getAddress();
              break;
            }
          }
          if (UtilValidate.isNotEmpty(email)) {
            serviceCtx.put("emailAddress",email);
          }
          for (Iterator<?> iter=communications.getPhoneNumbers(); iter.hasNext(); ) {
            PhoneNumber phoneNumber=(PhoneNumberImpl)iter.next();
            if (phoneNumber.isPreferred()) {
              phone=phoneNumber.getNumber();
              break;
            }
 else             if (phoneNumber.isWork()) {
              phone=phoneNumber.getNumber();
              break;
            }
 else {
              continue;
            }
          }
          if (UtilValidate.isNotEmpty(phone)) {
            String[] numberParts=phone.split("\\D");
            StringBuilder telNumber=new StringBuilder("");
            for (            String number : numberParts) {
              if (number != "") {
                telNumber.append(number);
              }
            }
            serviceCtx.put("areaCode",telNumber.substring(0,3));
            serviceCtx.put("contactNumber",telNumber.substring(3));
          }
        }
      }
      OrganizationalIdentity oid=contact.getOrganizationalIdentity();
      if (!isGroup) {
        serviceCtx.put("personalTitle",oid.getTitle());
      }
      if (isGroup) {
        if (oid.hasOrganization()) {
          Organization org=oid.getOrganization();
          serviceCtx.put("groupName",org.getName());
        }
      }
      GenericValue userLogin=(GenericValue)context.get("userLogin");
      serviceCtx.put("userLogin",userLogin);
      String serviceName=(String)context.get("serviceName");
      Map<String,Object> serviceContext=UtilGenerics.cast(context.get("serviceContext"));
      if (UtilValidate.isNotEmpty(serviceContext)) {
        for (        Map.Entry<String,Object> entry : serviceContext.entrySet()) {
          serviceCtx.put(entry.getKey(),entry.getValue());
        }
      }
      Map<String,Object> resp=dispatcher.runSync(serviceName,serviceCtx);
      result.put("partyId",resp.get("partyId"));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"SfaImportVCardError",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"SfaImportVCardError",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  return result;
}
