{
  try {
    if (crypted.startsWith("{")) {
      int typeEnd=crypted.indexOf("}");
      String hashType=crypted.substring(1,typeEnd);
      String hashed=crypted.substring(typeEnd + 1);
      MessageDigest messagedigest=MessageDigest.getInstance(hashType);
      messagedigest.update(password.getBytes());
      byte[] digestBytes=messagedigest.digest();
      char[] digestChars=Hex.encodeHex(digestBytes);
      if (hashed.equals(new String(digestChars))) {
        return true;
      }
      int k=0;
      digestChars=new char[digestBytes.length * 2];
      for (int l=0; l < digestBytes.length; l++) {
        int i1=digestBytes[l];
        if (i1 < 0) {
          i1=127 + i1 * -1;
        }
        StringUtil.encodeInt(i1,k,digestChars);
        k+=2;
      }
      if (hashed.equals(new String(digestChars))) {
        Debug.logWarning("Warning: detected oldFunnyHex password prefixed with a hashType; this is not valid",module);
        return true;
      }
      return false;
    }
 else     if (crypted.startsWith("$")) {
      int typeEnd=crypted.indexOf("$",1);
      int saltEnd=crypted.indexOf("$",typeEnd + 1);
      String hashType=crypted.substring(1,typeEnd);
      String salt=crypted.substring(typeEnd + 1,saltEnd);
      String hashed=crypted.substring(saltEnd + 1);
      return hashed.equals(getCrypted(hashType,salt,password));
    }
 else {
      String hashType=defaultCrypt;
      String hashed=crypted;
      MessageDigest messagedigest=MessageDigest.getInstance(hashType);
      messagedigest.update(password.getBytes());
      char[] digestChars=Hex.encodeHex(messagedigest.digest());
      return hashed.equals(new String(digestChars));
    }
  }
 catch (  NoSuchAlgorithmException e) {
    throw new GeneralRuntimeException("Error while comparing password",e);
  }
}
