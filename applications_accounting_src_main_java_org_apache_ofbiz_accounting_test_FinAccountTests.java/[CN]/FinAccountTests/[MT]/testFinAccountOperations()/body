{
  GenericValue userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
  Map<String,Object> ctx=new HashMap<String,Object>();
  ctx.put("finAccountId","TESTACCOUNT1");
  ctx.put("finAccountName","Test Financial Account");
  ctx.put("finAccountTypeId","BANK_ACCOUNT");
  ctx.put("userLogin",userLogin);
  Map<String,Object> resp=dispatcher.runSync("createFinAccount",ctx);
  assertTrue("Service 'createFinAccount' result success",ServiceUtil.isSuccess(resp));
  ctx.clear();
  ctx.put("finAccountId","TESTACCOUNT1");
  ctx.put("amount",new BigDecimal("100.00"));
  ctx.put("userLogin",userLogin);
  resp=dispatcher.runSync("finAccountDeposit",ctx);
  assertTrue("Service 'finAccountDeposit' result success",ServiceUtil.isSuccess(resp));
  BigDecimal balance=(BigDecimal)resp.get("balance");
  assertEquals(balance.toPlainString(),"100.00");
  ctx.clear();
  ctx.put("finAccountId","TESTACCOUNT1");
  ctx.put("amount",new BigDecimal("50.00"));
  ctx.put("userLogin",userLogin);
  resp=dispatcher.runSync("finAccountWithdraw",ctx);
  assertTrue("Service 'finAccountWithdraw' result success",ServiceUtil.isSuccess(resp));
  BigDecimal previousBalance=(BigDecimal)resp.get("previousBalance");
  balance=((BigDecimal)resp.get("balance"));
  assertEquals(balance.add(new BigDecimal("50.00")).toPlainString(),previousBalance.toPlainString());
}
