{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Timestamp now=UtilDateTime.nowTimestamp();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productionRunId=(String)context.get("productionRunId");
  String productId=(String)context.get("productId");
  BigDecimal quantity=(BigDecimal)context.get("estimatedQuantity");
  String workEffortId=(String)context.get("workEffortId");
  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);
  List<GenericValue> tasks=productionRun.getProductionRunRoutingTasks();
  if (UtilValidate.isEmpty(tasks)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunTaskNotExists",locale));
  }
  if (!"PRUN_CREATED".equals(productionRun.getGenericValue().getString("currentStatusId")) && !"PRUN_SCHEDULED".equals(productionRun.getGenericValue().getString("currentStatusId"))) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunPrinted",locale));
  }
  if (workEffortId != null) {
    boolean found=false;
    for (int i=0; i < tasks.size(); i++) {
      GenericValue oneTask=tasks.get(i);
      if (oneTask.getString("workEffortId").equals(workEffortId)) {
        found=true;
        break;
      }
    }
    if (!found) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunTaskNotExists",locale));
    }
  }
 else {
    workEffortId=EntityUtil.getFirst(tasks).getString("workEffortId");
  }
  try {
    GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();
    if (product == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductNotExist",locale));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Map<String,Object> serviceContext=new HashMap<String,Object>();
  serviceContext.clear();
  serviceContext.put("workEffortId",workEffortId);
  serviceContext.put("productId",productId);
  serviceContext.put("workEffortGoodStdTypeId","PRUNT_PROD_NEEDED");
  serviceContext.put("statusId","WEGS_CREATED");
  serviceContext.put("fromDate",now);
  serviceContext.put("estimatedQuantity",quantity);
  serviceContext.put("userLogin",userLogin);
  try {
    dispatcher.runSync("createWorkEffortGoodStandard",serviceContext);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Problem calling the createWorkEffortGoodStandard service",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunComponentNotAdded",locale));
  }
  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunComponentAdded",UtilMisc.toMap("productionRunId",productionRunId),locale));
  return result;
}
