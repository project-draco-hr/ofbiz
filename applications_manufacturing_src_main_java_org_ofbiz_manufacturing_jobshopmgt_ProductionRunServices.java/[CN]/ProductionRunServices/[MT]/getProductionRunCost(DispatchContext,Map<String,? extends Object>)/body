{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String workEffortId=(String)context.get("workEffortId");
  Locale locale=(Locale)context.get("locale");
  try {
    List<GenericValue> tasks=EntityQuery.use(delegator).from("WorkEffort").where("workEffortParentId",workEffortId).orderBy("workEffortId").queryList();
    BigDecimal totalCost=ZERO;
    Map<String,Object> outputMap=dispatcher.runSync("getWorkEffortCosts",UtilMisc.<String,Object>toMap("userLogin",userLogin,"workEffortId",workEffortId));
    BigDecimal productionRunHeaderCost=(BigDecimal)outputMap.get("totalCost");
    totalCost=totalCost.add(productionRunHeaderCost);
    for (    GenericValue task : tasks) {
      outputMap=dispatcher.runSync("getWorkEffortCosts",UtilMisc.<String,Object>toMap("userLogin",userLogin,"workEffortId",task.getString("workEffortId")));
      BigDecimal taskCost=(BigDecimal)outputMap.get("totalCost");
      totalCost=totalCost.add(taskCost);
    }
    result.put("totalCost",totalCost);
  }
 catch (  Exception exc) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunUnableToFindCosts",locale) + " " + workEffortId+ " "+ exc.getMessage());
  }
  return result;
}
