{
  String cacheKey=helperInfo.getHelperFullName();
  ManagedDataSource mds=dsCache.get(cacheKey);
  if (mds != null) {
    return TransactionFactory.getCursorConnection(helperInfo,mds.getConnection());
  }
  if (!(abstractJdbc instanceof InlineJdbc)) {
    throw new GenericEntityConfException("DBCP requires an <inline-jdbc> child element in the <datasource> element");
  }
  InlineJdbc jdbcElement=(InlineJdbc)abstractJdbc;
  TransactionManager txMgr=TransactionFactory.getTransactionManager();
  String driverName=jdbcElement.getJdbcDriver();
  String jdbcUri=helperInfo.getOverrideJdbcUri(jdbcElement.getJdbcUri());
  String jdbcUsername=helperInfo.getOverrideUsername(jdbcElement.getJdbcUsername());
  String jdbcPassword=helperInfo.getOverridePassword(EntityConfigUtil.getJdbcPassword(jdbcElement));
  int maxSize=jdbcElement.getPoolMaxsize();
  int minSize=jdbcElement.getPoolMinsize();
  int timeBetweenEvictionRunsMillis=jdbcElement.getTimeBetweenEvictionRunsMillis();
  int maxIdle=jdbcElement.getIdleMaxsize();
  maxIdle=maxIdle > minSize ? maxIdle : minSize;
  Driver jdbcDriver;
synchronized (DBCPConnectionFactory.class) {
    try {
      jdbcDriver=(Driver)Class.forName(driverName,true,Thread.currentThread().getContextClassLoader()).newInstance();
    }
 catch (    Exception e) {
      Debug.logError(e,module);
      throw new GenericEntityException(e.getMessage(),e);
    }
  }
  Properties cfProps=new Properties();
  cfProps.put("user",jdbcUsername);
  cfProps.put("password",jdbcPassword);
  ConnectionFactory cf=new DriverConnectionFactory(jdbcDriver,jdbcUri,cfProps);
  XAConnectionFactory xacf=new LocalXAConnectionFactory(txMgr,cf);
  PoolableConnectionFactory factory=new PoolableManagedConnectionFactory(xacf,null);
  factory.setValidationQuery("select 1 from entity_key_store where key_name = ''");
  factory.setDefaultReadOnly(false);
  String transIso=jdbcElement.getIsolationLevel();
  if (!transIso.isEmpty()) {
    if ("Serializable".equals(transIso)) {
      factory.setDefaultTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
    }
 else     if ("RepeatableRead".equals(transIso)) {
      factory.setDefaultTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
    }
 else     if ("ReadUncommitted".equals(transIso)) {
      factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
    }
 else     if ("ReadCommitted".equals(transIso)) {
      factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    }
 else     if ("None".equals(transIso)) {
      factory.setDefaultTransactionIsolation(Connection.TRANSACTION_NONE);
    }
  }
  GenericObjectPoolConfig poolConfig=new GenericObjectPoolConfig();
  poolConfig.setMaxWaitMillis(120000);
  poolConfig.setMaxTotal(maxSize);
  poolConfig.setMaxIdle(maxIdle);
  poolConfig.setMinIdle(minSize);
  poolConfig.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
  GenericObjectPool pool=new GenericObjectPool(factory,poolConfig);
  mds=new DebugManagedDataSource(pool,xacf.getTransactionRegistry());
  mds.setAccessToUnderlyingConnectionAllowed(true);
  dsCache.putIfAbsent(cacheKey,mds);
  mds=dsCache.get(cacheKey);
  return TransactionFactory.getCursorConnection(helperInfo,mds.getConnection());
}
