{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Debug.logInfo("=========== type:" + (String)context.get("dataresourceTypeId"),module);
  Boolean bDisplayFailCond=(Boolean)context.get("displayFailCond");
  String mapKey=(String)context.get("mapKey");
  String deactivateString=(String)context.get("deactivateExisting");
  boolean deactivateExisting="true".equalsIgnoreCase(deactivateString);
  if (Debug.infoOn())   Debug.logInfo("in persist... mapKey(0):" + mapKey,null);
  List contentPurposeList=(List)context.get("contentPurposeList");
  if (contentPurposeList == null)   contentPurposeList=new ArrayList();
  String contentPurposeString=(String)context.get("contentPurposeString");
  if (UtilValidate.isNotEmpty(contentPurposeString)) {
    List tmpPurposes=StringUtil.split(contentPurposeString,"|");
    contentPurposeList.addAll(tmpPurposes);
  }
  if (contentPurposeList != null) {
    context.put("contentPurposeList",contentPurposeList);
    context.put("contentPurposeString",null);
  }
  if (Debug.infoOn())   Debug.logInfo("in persist... contentPurposeList(0):" + contentPurposeList,null);
  if (Debug.infoOn())   Debug.logInfo("in persist... textData(0):" + context.get("textData"),null);
  GenericValue content=delegator.makeValue("Content",null);
  content.setPKFields(context);
  content.setNonPKFields(context);
  String contentId=(String)content.get("contentId");
  String contentTypeId=(String)content.get("contentTypeId");
  String origContentId=(String)content.get("contentId");
  String origDataResourceId=(String)content.get("dataResourceId");
  if (Debug.infoOn())   Debug.logInfo("in persist... contentId(0):" + contentId,null);
  GenericValue dataResource=delegator.makeValue("DataResource",null);
  dataResource.setPKFields(context);
  dataResource.setNonPKFields(context);
  dataResource.setAllFields(context,false,"dr",null);
  context.putAll(dataResource);
  String dataResourceId=(String)dataResource.get("dataResourceId");
  String dataResourceTypeId=(String)dataResource.get("dataResourceTypeId");
  if (Debug.infoOn())   Debug.logInfo("in persist... dataResourceId(0):" + dataResourceId,null);
  GenericValue contentAssoc=delegator.makeValue("ContentAssoc",null);
  contentAssoc.setAllFields(context,false,"ca",null);
  context.putAll(contentAssoc);
  GenericValue electronicText=delegator.makeValue("ElectronicText",null);
  electronicText.setPKFields(context);
  electronicText.setNonPKFields(context);
  Map results=ServiceUtil.returnSuccess();
  results.put("contentId",content.get("contentId"));
  results.put("dataResourceId",dataResource.get("dataResourceId"));
  results.put("drDataResourceId",dataResource.get("dataResourceId"));
  results.put("drDataResourceId",dataResource.get("dataResourceId"));
  results.put("caContentIdTo",contentAssoc.get("contentIdTo"));
  results.put("caContentId",contentAssoc.get("contentId"));
  results.put("caFromDate",contentAssoc.get("fromDate"));
  results.put("caContentAssocTypeId",contentAssoc.get("contentAssocTypeId"));
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  boolean dataResourceExists=true;
  if (Debug.infoOn())   Debug.logInfo("in persist... dataResourceTypeId(0):" + dataResourceTypeId,null);
  if (UtilValidate.isNotEmpty(dataResourceTypeId)) {
    Map dataResourceResult=new HashMap();
    try {
      dataResourceResult=persistDataResourceAndDataMethod(dctx,context);
    }
 catch (    GenericServiceException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
catch (    Exception e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    String errorMsg=ServiceUtil.getErrorMessage(dataResourceResult);
    if (UtilValidate.isNotEmpty(errorMsg)) {
      return ServiceUtil.returnError(errorMsg);
    }
    dataResourceId=(String)dataResourceResult.get("dataResourceId");
    results.put("dataResourceId",dataResourceId);
    results.put("drDataResourceId",dataResourceId);
    context.put("dataResourceId",dataResourceId);
    content.put("dataResourceId",dataResourceId);
    context.put("drDataResourceId",dataResourceId);
  }
  context.put("skipPermissionCheck",null);
  boolean contentExists=true;
  if (Debug.infoOn())   Debug.logInfo("in persist... contentTypeId:" + contentTypeId + " dataResourceTypeId:"+ dataResourceTypeId+ " contentId:"+ contentId+ " dataResourceId:"+ dataResourceId,null);
  if (UtilValidate.isNotEmpty(contentTypeId)) {
    if (UtilValidate.isEmpty(contentId)) {
      contentExists=false;
    }
 else {
      try {
        GenericValue val=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentId));
        if (val == null)         contentExists=false;
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
    }
    context.putAll(content);
    if (contentExists) {
      Map contentContext=new HashMap();
      ModelService contentModel=dispatcher.getDispatchContext().getModelService("updateContent");
      contentContext.putAll(contentModel.makeValid(context,"IN"));
      contentContext.put("userLogin",userLogin);
      contentContext.put("displayFailCond",bDisplayFailCond);
      contentContext.put("skipPermissionCheck",context.get("skipPermissionCheck"));
      Map thisResult=dispatcher.runSync("updateContent",contentContext);
      if (ServiceUtil.isError(thisResult) || ServiceUtil.isFailure(thisResult)) {
        return ServiceUtil.returnError("Error updating content (updateContent) in persistContentAndAssoc",null,null,thisResult);
      }
    }
 else {
      Map contentContext=new HashMap();
      ModelService contentModel=dispatcher.getDispatchContext().getModelService("createContent");
      contentContext.putAll(contentModel.makeValid(context,"IN"));
      contentContext.put("userLogin",userLogin);
      contentContext.put("displayFailCond",bDisplayFailCond);
      contentContext.put("skipPermissionCheck",context.get("skipPermissionCheck"));
      Debug.logInfo("In persistContentAndAssoc calling createContent with content: " + contentContext,module);
      Map thisResult=dispatcher.runSync("createContent",contentContext);
      if (ServiceUtil.isError(thisResult) || ServiceUtil.isFailure(thisResult)) {
        return ServiceUtil.returnError("Error creating content (createContent) in persistContentAndAssoc",null,null,thisResult);
      }
      contentId=(String)thisResult.get("contentId");
    }
    results.put("contentId",contentId);
    context.put("contentId",contentId);
    context.put("caContentIdTo",contentId);
    contentAssoc.put("contentIdTo",contentId);
    if (contentId != null && !contentExists) {
      try {
        if (contentPurposeList != null) {
          HashSet contentPurposeSet=new HashSet(contentPurposeList);
          Iterator iter=contentPurposeSet.iterator();
          while (iter.hasNext()) {
            String contentPurposeTypeId=(String)iter.next();
            GenericValue contentPurpose=delegator.makeValue("ContentPurpose",UtilMisc.toMap("contentId",contentId,"contentPurposeTypeId",contentPurposeTypeId));
            contentPurpose.create();
          }
        }
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
    }
  }
 else   if (UtilValidate.isNotEmpty(dataResourceTypeId) && UtilValidate.isNotEmpty(contentId)) {
    if (UtilValidate.isNotEmpty(dataResourceId) && !dataResourceExists) {
      Map map=new HashMap();
      map.put("userLogin",userLogin);
      map.put("dataResourceId",dataResourceId);
      map.put("contentId",contentId);
      if (Debug.infoOn())       Debug.logInfo("in persist... context:" + context,module);
      Map r=ContentServices.updateContentMethod(dctx,map);
      boolean isError=ModelService.RESPOND_ERROR.equals(r.get(ModelService.RESPONSE_MESSAGE));
      if (isError)       return ServiceUtil.returnError((String)r.get(ModelService.ERROR_MESSAGE));
    }
  }
  String contentAssocTypeId=(String)context.get("contentAssocTypeId");
  if (UtilValidate.isEmpty(contentAssocTypeId))   contentAssocTypeId=(String)context.get("caContentAssocTypeId");
  if (Debug.infoOn())   Debug.logInfo("CREATING contentASSOC contentAssocTypeId:" + contentAssocTypeId,null);
  if (contentAssocTypeId != null && contentAssocTypeId.length() > 0 && contentAssoc.get("contentId") != null && contentAssoc.get("contentIdTo") != null) {
    if (Debug.infoOn())     Debug.logInfo("in persistContentAndAssoc, deactivateExisting:" + deactivateExisting,null);
    Map contentAssocContext=new HashMap();
    contentAssocContext.put("userLogin",userLogin);
    contentAssocContext.put("displayFailCond",bDisplayFailCond);
    contentAssocContext.put("skipPermissionCheck",context.get("skipPermissionCheck"));
    Map thisResult=null;
    try {
      GenericValue contentAssocExisting=delegator.findByPrimaryKey("ContentAssoc",contentAssoc.getPrimaryKey());
      if (contentAssocExisting == null) {
        ModelService contentAssocModel=dispatcher.getDispatchContext().getModelService("createContentAssoc");
        Map ctx=contentAssocModel.makeValid(contentAssoc,"IN");
        contentAssocContext.putAll(ctx);
        thisResult=dispatcher.runSync("createContentAssoc",contentAssocContext);
        String errMsg=ServiceUtil.getErrorMessage(thisResult);
        if (ServiceUtil.isError(thisResult) || ServiceUtil.isFailure(thisResult) || UtilValidate.isNotEmpty(errMsg)) {
          return ServiceUtil.returnError(errMsg);
        }
        results.put("caContentIdTo",thisResult.get("contentIdTo"));
        results.put("caContentId",thisResult.get("contentIdFrom"));
        results.put("caContentAssocTypeId",thisResult.get("contentAssocTypeId"));
        results.put("caFromDate",thisResult.get("fromDate"));
        results.put("caSequenceNum",thisResult.get("sequenceNum"));
      }
 else {
        if (deactivateExisting) {
          contentAssoc.put("thruDate",UtilDateTime.nowTimestamp());
        }
        ModelService contentAssocModel=dispatcher.getDispatchContext().getModelService("updateContentAssoc");
        Map ctx=contentAssocModel.makeValid(contentAssoc,"IN");
        contentAssocContext.putAll(ctx);
        thisResult=dispatcher.runSync("updateContentAssoc",contentAssocContext);
        String errMsg=ServiceUtil.getErrorMessage(thisResult);
        if (ServiceUtil.isError(thisResult) || ServiceUtil.isFailure(thisResult) || UtilValidate.isNotEmpty(errMsg)) {
          return ServiceUtil.returnError(errMsg);
        }
      }
    }
 catch (    GenericEntityException e) {
      throw new GenericServiceException(e.getMessage());
    }
catch (    Exception e2) {
      throw new GenericServiceException(e2.getMessage());
    }
    String errMsg=ServiceUtil.getErrorMessage(thisResult);
    if (UtilValidate.isNotEmpty(errMsg)) {
      return ServiceUtil.returnError(errMsg);
    }
  }
  context.remove("skipPermissionCheck");
  context.put("contentId",origContentId);
  context.put("dataResourceId",origDataResourceId);
  context.remove("dataResource");
  Debug.logInfo("results:" + results,module);
  return results;
}
