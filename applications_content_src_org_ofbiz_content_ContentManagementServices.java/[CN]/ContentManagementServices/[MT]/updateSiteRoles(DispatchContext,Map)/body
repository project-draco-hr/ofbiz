{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Map results=new HashMap();
  String siteContentId=(String)context.get("contentId");
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(siteContentId) || UtilValidate.isEmpty(partyId))   return results;
  List siteRoles=null;
  try {
    siteRoles=delegator.findByAndCache("RoleType",UtilMisc.toMap("parentTypeId","BLOG"));
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  Iterator siteRoleIter=siteRoles.iterator();
  while (siteRoleIter.hasNext()) {
    Map serviceContext=new HashMap();
    serviceContext.put("partyId",partyId);
    serviceContext.put("contentId",siteContentId);
    serviceContext.put("userLogin",userLogin);
    Debug.logInfo("updateSiteRoles, serviceContext(0):" + serviceContext,module);
    GenericValue roleType=(GenericValue)siteRoleIter.next();
    String siteRole=(String)roleType.get("roleTypeId");
    String cappedSiteRole=ModelUtil.dbNameToVarName(siteRole);
    if (Debug.infoOn())     Debug.logInfo("updateSiteRoles, cappediteRole(1):" + cappedSiteRole,module);
    String siteRoleVal=(String)context.get(cappedSiteRole);
    if (Debug.infoOn())     Debug.logInfo("updateSiteRoles, siteRoleVal(1):" + siteRoleVal,module);
    if (Debug.infoOn())     Debug.logInfo("updateSiteRoles, context(1):" + context,module);
    Object fromDate=context.get(cappedSiteRole + "FromDate");
    if (Debug.infoOn())     Debug.logInfo("updateSiteRoles, fromDate(1):" + fromDate,module);
    serviceContext.put("roleTypeId",siteRole);
    if (siteRoleVal != null && siteRoleVal.equalsIgnoreCase("Y")) {
      if (fromDate == null) {
        try {
          Map newContext=new HashMap();
          newContext.put("contentId",serviceContext.get("contentId"));
          newContext.put("partyId",serviceContext.get("partyId"));
          newContext.put("roleTypeId",serviceContext.get("roleTypeId"));
          newContext.put("userLogin",userLogin);
          Map permResults=dispatcher.runSync("deactivateAllContentRoles",newContext);
          serviceContext.put("fromDate",UtilDateTime.nowTimestamp());
          if (Debug.infoOn())           Debug.logInfo("updateSiteRoles, serviceContext(1):" + serviceContext,module);
          permResults=dispatcher.runSync("createContentRole",serviceContext);
          String errMsg=ServiceUtil.getErrorMessage(permResults);
          if (UtilValidate.isNotEmpty(errMsg))           return ServiceUtil.returnError(errMsg);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,e.getMessage(),module);
          return ServiceUtil.returnError(e.getMessage());
        }
catch (        Exception e2) {
          Debug.logError(e2,e2.getMessage(),module);
          return ServiceUtil.returnError(e2.getMessage());
        }
      }
    }
 else {
      if (fromDate != null) {
        try {
          Debug.logInfo("updateSiteRoles, serviceContext(2):" + serviceContext,module);
          Map newContext=new HashMap();
          newContext.put("contentId",serviceContext.get("contentId"));
          newContext.put("partyId",serviceContext.get("partyId"));
          newContext.put("roleTypeId",serviceContext.get("roleTypeId"));
          newContext.put("userLogin",userLogin);
          Map permResults=dispatcher.runSync("deactivateAllContentRoles",newContext);
          String errMsg=ServiceUtil.getErrorMessage(permResults);
          if (UtilValidate.isNotEmpty(errMsg))           return ServiceUtil.returnError(errMsg);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,e.getMessage(),module);
          return ServiceUtil.returnError(e.getMessage());
        }
catch (        Exception e2) {
          Debug.logError(e2,e2.getMessage(),module);
          return ServiceUtil.returnError(e2.getMessage());
        }
      }
    }
  }
  return results;
}
