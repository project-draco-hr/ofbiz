{
  String contentId=content.getString("contentId");
  Set visitedSet=(Set)context.get("visitedSet");
  if (visitedSet == null) {
    visitedSet=new HashSet();
    context.put("visitedSet",visitedSet);
  }
 else {
    if (visitedSet.contains(contentId)) {
      Debug.logWarning("visitedSet already contains:" + contentId,module);
      return;
    }
 else {
      visitedSet.add(contentId);
    }
  }
  String contentTypeId=content.getString("contentTypeId");
  String newContentTypeId=contentTypeId;
  String dataResourceId=content.getString("dataResourceId");
  Long branchCount=(Long)content.get("childBranchCount");
  if (forceOutline) {
    newContentTypeId="OUTLINE_NODE";
  }
 else   if (contentTypeId == null || contentTypeId.equals("DOCUMENT")) {
    if (UtilValidate.isEmpty(dataResourceId) || (branchCount != null && branchCount.intValue() > 0))     newContentTypeId="OUTLINE_NODE";
 else     newContentTypeId="PAGE_NODE";
  }
 else   if (contentTypeId.equals("SUBPAGE_NODE")) {
    newContentTypeId="PAGE_NODE";
  }
  content.put("contentTypeId",newContentTypeId);
  content.store();
  if (contentTypeId == null || contentTypeId.equals("DOCUMENT") || contentTypeId.equals("OUTLINE_NODE")) {
    List kids=ContentWorker.getAssociatedContent(content,"from",UtilMisc.toList("SUB_CONTENT"),null,null,null);
    Iterator iter=kids.iterator();
    while (iter.hasNext()) {
      GenericValue kidContent=(GenericValue)iter.next();
      updateOutlineNodeChildren(kidContent,forceOutline,context);
    }
  }
}
