{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String contentId=(String)context.get("contentId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String userLoginId=userLogin.getString("userLoginId");
  Locale locale=(Locale)context.get("locale");
  try {
    GenericValue content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();
    if (content == null) {
      Debug.logError("content was null",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentNoContentFound",UtilMisc.toMap("contentId",""),locale));
    }
    String dataResourceId=content.getString("dataResourceId");
    content.set("dataResourceId",null);
    content.set("lastModifiedDate",UtilDateTime.nowTimestamp());
    content.set("lastModifiedByUserLogin",userLoginId);
    content.store();
    if (UtilValidate.isNotEmpty(dataResourceId)) {
      GenericValue contentClone=(GenericValue)content.clone();
      contentClone.set("dataResourceId",dataResourceId);
      content.set("lastModifiedDate",UtilDateTime.nowTimestamp());
      content.set("lastModifiedByUserLogin",userLoginId);
      content.set("createdDate",UtilDateTime.nowTimestamp());
      content.set("createdByUserLogin",userLoginId);
      contentClone.set("contentId",null);
      ModelService modelService=dctx.getModelService("persistContentAndAssoc");
      Map<String,Object> serviceIn=modelService.makeValid(contentClone,"IN");
      serviceIn.put("userLogin",userLogin);
      serviceIn.put("contentIdTo",contentId);
      serviceIn.put("contentAssocTypeId","SUB_CONTENT");
      serviceIn.put("sequenceNum",Long.valueOf(50));
      try {
        dispatcher.runSync("persistContentAndAssoc",serviceIn);
      }
 catch (      ServiceAuthException e) {
        return ServiceUtil.returnError(e.toString());
      }
      List<String> typeList=UtilMisc.toList("SUB_CONTENT");
      ContentManagementWorker.updateStatsTopDown(delegator,contentId,typeList);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.toString());
  }
  return result;
}
