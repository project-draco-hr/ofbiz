{
  Map<String,Object> result=null;
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Security security=dctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  if (!security.hasEntityPermission("CONTENTMGR","_ADMIN",userLogin)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPermissionNotGranted",locale));
  }
  String contentId=(String)context.get("contentId");
  String serviceName=(String)context.get("serviceName");
  String contentAssocTypeId=(String)context.get("contentAssocTypeId");
  List<String> contentAssocTypeIdList=FastList.newInstance();
  if (UtilValidate.isNotEmpty(contentAssocTypeId)) {
    contentAssocTypeIdList=StringUtil.split(contentAssocTypeId,"|");
  }
  if (contentAssocTypeIdList.size() == 0) {
    contentAssocTypeIdList.add("SUB_CONTENT");
  }
  Map<String,Object> ctx=FastMap.newInstance();
  ctx.put("userLogin",userLogin);
  ctx.put("contentAssocTypeIdList",contentAssocTypeIdList);
  try {
    GenericValue content=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentId));
    result=followNodeChildrenMethod(content,dispatcher,serviceName,ctx);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e.toString(),module);
    return ServiceUtil.returnError(e.toString());
  }
  return result;
}
