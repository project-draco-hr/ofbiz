{
  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String orderId=(String)context.get("orderId");
  Debug.logInfo("In updateContentSubscriptionByOrder service with orderId: " + orderId,module);
  GenericValue orderHeader=null;
  try {
    List<GenericValue> orderRoleList=delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","END_USER_CUSTOMER"),null,false);
    if (orderRoleList.size() > 0) {
      GenericValue orderRole=orderRoleList.get(0);
      String partyId=(String)orderRole.get("partyId");
      context.put("partyId",partyId);
    }
 else {
      String msg="No OrderRole found for orderId:" + orderId;
      return ServiceUtil.returnFailure(msg);
    }
    orderHeader=delegator.findOne("OrderHeader",UtilMisc.toMap("orderId",orderId),false);
    if (orderHeader == null) {
      String msg="No OrderHeader found for orderId:" + orderId;
      return ServiceUtil.returnError(msg);
    }
    Timestamp orderCreatedDate=(Timestamp)orderHeader.get("orderDate");
    context.put("orderCreatedDate",orderCreatedDate);
    List<GenericValue> orderItemList=orderHeader.getRelated("OrderItem",null,null,false);
    ModelService subscriptionModel=dispatcher.getDispatchContext().getModelService("updateContentSubscriptionByProduct");
    for (    GenericValue orderItem : orderItemList) {
      BigDecimal qty=orderItem.getBigDecimal("quantity");
      String productId=(String)orderItem.get("productId");
      List<GenericValue> productContentList=delegator.findByAnd("ProductContent",UtilMisc.toMap("productId",productId,"productContentTypeId","ONLINE_ACCESS"),null,false);
      List<GenericValue> productContentListFiltered=EntityUtil.filterByDate(productContentList);
      if (productContentListFiltered.size() > 0) {
        context.put("productId",productId);
        context.put("quantity",Integer.valueOf(qty.intValue()));
        Map<String,Object> ctx=subscriptionModel.makeValid(context,"IN");
        dispatcher.runSync("updateContentSubscriptionByProduct",ctx);
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e.toString(),module);
    return ServiceUtil.returnError(e.toString());
  }
  return result;
}
