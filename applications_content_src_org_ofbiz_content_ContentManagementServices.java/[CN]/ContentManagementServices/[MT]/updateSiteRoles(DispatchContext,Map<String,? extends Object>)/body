{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Map<String,Object> results=FastMap.newInstance();
  String siteContentId=(String)context.get("contentId");
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(siteContentId) || UtilValidate.isEmpty(partyId))   return results;
  List<GenericValue> siteRoles=null;
  try {
    siteRoles=EntityQuery.use(delegator).from("RoleType").where("parentTypeId","BLOG").cache().queryList();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.toString());
  }
  for (  GenericValue roleType : siteRoles) {
    Map<String,Object> serviceContext=FastMap.newInstance();
    serviceContext.put("partyId",partyId);
    serviceContext.put("contentId",siteContentId);
    serviceContext.put("userLogin",userLogin);
    Debug.logInfo("updateSiteRoles, serviceContext(0):" + serviceContext,module);
    String siteRole=(String)roleType.get("roleTypeId");
    String cappedSiteRole=ModelUtil.dbNameToVarName(siteRole);
    if (Debug.infoOn()) {
      Debug.logInfo("updateSiteRoles, cappediteRole(1):" + cappedSiteRole,module);
    }
    String siteRoleVal=(String)context.get(cappedSiteRole);
    if (Debug.infoOn()) {
      Debug.logInfo("updateSiteRoles, siteRoleVal(1):" + siteRoleVal,module);
      Debug.logInfo("updateSiteRoles, context(1):" + context,module);
    }
    Object fromDate=context.get(cappedSiteRole + "FromDate");
    if (Debug.infoOn()) {
      Debug.logInfo("updateSiteRoles, fromDate(1):" + fromDate,module);
    }
    serviceContext.put("roleTypeId",siteRole);
    if (siteRoleVal != null && siteRoleVal.equalsIgnoreCase("Y")) {
      if (fromDate == null) {
        try {
          Map<String,Object> newContext=FastMap.newInstance();
          newContext.put("contentId",serviceContext.get("contentId"));
          newContext.put("partyId",serviceContext.get("partyId"));
          newContext.put("roleTypeId",serviceContext.get("roleTypeId"));
          newContext.put("userLogin",userLogin);
          Map<String,Object> permResults=dispatcher.runSync("deactivateAllContentRoles",newContext);
          serviceContext.put("fromDate",UtilDateTime.nowTimestamp());
          if (Debug.infoOn())           Debug.logInfo("updateSiteRoles, serviceContext(1):" + serviceContext,module);
          permResults=dispatcher.runSync("createContentRole",serviceContext);
          String errMsg=ServiceUtil.getErrorMessage(permResults);
          if (UtilValidate.isNotEmpty(errMsg)) {
            return ServiceUtil.returnError(errMsg);
          }
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,e.toString(),module);
          return ServiceUtil.returnError(e.toString());
        }
catch (        Exception e2) {
          Debug.logError(e2,e2.toString(),module);
          return ServiceUtil.returnError(e2.toString());
        }
      }
    }
 else {
      if (fromDate != null) {
        try {
          Debug.logInfo("updateSiteRoles, serviceContext(2):" + serviceContext,module);
          Map<String,Object> newContext=FastMap.newInstance();
          newContext.put("contentId",serviceContext.get("contentId"));
          newContext.put("partyId",serviceContext.get("partyId"));
          newContext.put("roleTypeId",serviceContext.get("roleTypeId"));
          newContext.put("userLogin",userLogin);
          Map<String,Object> permResults=dispatcher.runSync("deactivateAllContentRoles",newContext);
          String errMsg=ServiceUtil.getErrorMessage(permResults);
          if (UtilValidate.isNotEmpty(errMsg))           return ServiceUtil.returnError(errMsg);
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,e.toString(),module);
          return ServiceUtil.returnError(e.toString());
        }
catch (        Exception e2) {
          Debug.logError(e2,e2.toString(),module);
          return ServiceUtil.returnError(e2.toString());
        }
      }
    }
  }
  return results;
}
