{
  Map result=FastMap.newInstance();
  GenericDelegator delegator=dctx.getDelegator();
  String contentIdTo=(String)context.get("contentIdTo");
  Integer seqInc=(Integer)context.get("seqInc");
  if (seqInc == null)   seqInc=Integer.valueOf(100);
  int seqIncrement=seqInc.intValue();
  List typeList=(List)context.get("typeList");
  if (typeList == null)   typeList=FastList.newInstance();
  String contentAssocTypeId=(String)context.get("contentAssocTypeId");
  if (UtilValidate.isNotEmpty(contentAssocTypeId))   typeList.add(contentAssocTypeId);
  if (UtilValidate.isEmpty(typeList))   typeList=UtilMisc.toList("PUBLISH_LINK","SUB_CONTENT");
  List condList=FastList.newInstance();
  Iterator iterType=typeList.iterator();
  while (iterType.hasNext()) {
    String type=(String)iterType.next();
    condList.add(EntityCondition.makeCondition("contentAssocTypeId",EntityOperator.EQUALS,type));
  }
  EntityCondition conditionType=EntityCondition.makeCondition(condList,EntityOperator.OR);
  EntityCondition conditionMain=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("contentIdTo",EntityOperator.EQUALS,contentIdTo),conditionType),EntityOperator.AND);
  try {
    List listAll=delegator.findList("ContentAssoc",conditionMain,null,UtilMisc.toList("sequenceNum","fromDate","createdDate"),null,false);
    List listFiltered=EntityUtil.filterByDate(listAll);
    String contentId=(String)context.get("contentId");
    String dir=(String)context.get("dir");
    int seqNum=seqIncrement;
    String thisContentId=null;
    for (int i=0; i < listFiltered.size(); i++) {
      GenericValue contentAssoc=(GenericValue)listFiltered.get(i);
      if (UtilValidate.isNotEmpty(contentId) && UtilValidate.isNotEmpty(dir)) {
        thisContentId=contentAssoc.getString("contentId");
        if (contentId.equals(thisContentId)) {
          if (dir.startsWith("up")) {
            if (i > 0) {
              try {
                GenericValue prevValue=(GenericValue)listFiltered.get(i - 1);
                Long prevSeqNum=(Long)prevValue.get("sequenceNum");
                prevValue.put("sequenceNum",Long.valueOf(seqNum));
                prevValue.store();
                contentAssoc.put("sequenceNum",prevSeqNum);
                contentAssoc.store();
              }
 catch (              Exception e) {
                return ServiceUtil.returnError(e.toString());
              }
            }
          }
 else {
            if (i < listFiltered.size()) {
              GenericValue nextValue=(GenericValue)listFiltered.get(i + 1);
              nextValue.put("sequenceNum",Long.valueOf(seqNum));
              nextValue.store();
              seqNum+=seqIncrement;
              contentAssoc.put("sequenceNum",Long.valueOf(seqNum));
              contentAssoc.store();
              i++;
            }
          }
        }
 else {
          contentAssoc.put("sequenceNum",Long.valueOf(seqNum));
          contentAssoc.store();
        }
      }
 else {
        contentAssoc.put("sequenceNum",Long.valueOf(seqNum));
        contentAssoc.store();
      }
      seqNum+=seqIncrement;
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.toString());
  }
  return result;
}
