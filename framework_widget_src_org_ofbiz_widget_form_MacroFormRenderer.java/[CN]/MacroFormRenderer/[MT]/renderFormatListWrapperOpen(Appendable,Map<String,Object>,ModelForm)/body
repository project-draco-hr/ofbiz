{
  Map<String,Object> inputFields=UtilGenerics.checkMap(context.get("requestParameters"));
  Map<String,Object> queryStringMap=UtilGenerics.toMap(context.get("queryStringMap"));
  if (UtilValidate.isNotEmpty(queryStringMap)) {
    inputFields.putAll(queryStringMap);
  }
  if (modelForm.getType().equals("multi")) {
    inputFields=UtilHttp.removeMultiFormParameters(inputFields);
  }
  String queryString=UtilHttp.urlEncodeArgs(inputFields);
  context.put("_QBESTRING_",queryString);
  renderBeginningBoundaryComment(writer,"Form Widget",modelForm);
  if (this.renderPagination) {
    this.renderNextPrev(writer,context,modelForm);
  }
  List<ModelFormField> childFieldList=modelForm.getFieldList();
  List<String> columnStyleList=FastList.newInstance();
  for (  ModelFormField childField : childFieldList) {
    int childFieldType=childField.getFieldInfo().getFieldType();
    if (childFieldType == ModelFormField.FieldInfo.HIDDEN || childFieldType == ModelFormField.FieldInfo.IGNORED) {
      continue;
    }
    String areaStyle=childField.getTitleAreaStyle();
    if (UtilValidate.isEmpty(areaStyle)) {
      areaStyle="";
    }
    columnStyleList.add(areaStyle);
  }
  columnStyleList=StringUtil.quoteStrList(columnStyleList);
  String columnStyleListString=StringUtil.join(columnStyleList,", ");
  StringWriter sr=new StringWriter();
  sr.append("<@renderFormatListWrapperOpen ");
  sr.append(" formName=\"");
  sr.append(modelForm.getName());
  sr.append("\" style=\"");
  sr.append(modelForm.getDefaultTableStyle());
  sr.append("\" columnStyles=[");
  sr.append(columnStyleListString);
  sr.append("] />");
  executeMacro(writer,sr.toString());
}
