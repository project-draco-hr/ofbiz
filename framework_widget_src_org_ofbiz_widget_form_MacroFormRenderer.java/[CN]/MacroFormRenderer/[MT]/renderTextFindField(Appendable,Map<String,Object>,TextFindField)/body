{
  ModelFormField modelFormField=textFindField.getModelFormField();
  String defaultOption=textFindField.getDefaultOption();
  String className="";
  String alert="false";
  String opEquals="";
  String opBeginsWith="";
  String opContains="";
  String opIsEmpty="";
  String opNotEqual="";
  String name=modelFormField.getParameterName(context);
  String size=Integer.toString(textFindField.getSize());
  String maxlength="";
  String autocomplete="";
  if (UtilValidate.isNotEmpty(modelFormField.getWidgetStyle())) {
    className=modelFormField.getWidgetStyle();
    if (modelFormField.shouldBeRed(context)) {
      alert="true";
    }
  }
  Locale locale=(Locale)context.get("locale");
  if (!textFindField.getHideOptions()) {
    opEquals=UtilProperties.getMessage("conditional","equals",locale);
    opBeginsWith=UtilProperties.getMessage("conditional","begins_with",locale);
    opContains=UtilProperties.getMessage("conditional","contains",locale);
    opIsEmpty=UtilProperties.getMessage("conditional","is_empty",locale);
    opNotEqual=UtilProperties.getMessage("conditional","not_equal",locale);
  }
  String value=modelFormField.getEntry(context,textFindField.getDefaultValue(context));
  if (value == null) {
    value="";
  }
  if (textFindField.getMaxlength() != null) {
    maxlength=textFindField.getMaxlength().toString();
  }
  if (!textFindField.getClientAutocompleteField()) {
    autocomplete="off";
  }
  String titleStyle="";
  if (UtilValidate.isNotEmpty(modelFormField.getTitleStyle())) {
    titleStyle=modelFormField.getTitleStyle();
  }
  String ignoreCase=UtilProperties.getMessage("conditional","ignore_case",locale);
  boolean ignCase=textFindField.getIgnoreCase();
  boolean hideIgnoreCase=textFindField.getHideIgnoreCase();
  StringWriter sr=new StringWriter();
  sr.append("<@renderTextFindField ");
  sr.append(" name=\"");
  sr.append(name);
  sr.append("\" value=\"");
  sr.append(value);
  sr.append("\" defaultOption=\"");
  sr.append(defaultOption);
  sr.append("\" opEquals=\"");
  sr.append(opEquals);
  sr.append("\" opBeginsWith=\"");
  sr.append(opBeginsWith);
  sr.append("\" opContains=\"");
  sr.append(opContains);
  sr.append("\" opIsEmpty=\"");
  sr.append(opIsEmpty);
  sr.append("\" opNotEqual=\"");
  sr.append(opNotEqual);
  sr.append("\" className=\"");
  sr.append(className);
  sr.append("\" alert=\"");
  sr.append(alert);
  sr.append("\" size=\"");
  sr.append(size);
  sr.append("\" maxlength=\"");
  sr.append(maxlength);
  sr.append("\" autocomplete=\"");
  sr.append(autocomplete);
  sr.append("\" titleStyle=\"");
  sr.append(titleStyle);
  sr.append("\" hideIgnoreCase=");
  sr.append(Boolean.toString(hideIgnoreCase));
  sr.append(" ignCase=");
  sr.append(Boolean.toString(ignCase));
  sr.append(" ignoreCase=\"");
  sr.append(ignoreCase);
  sr.append("\" />");
  executeMacro(sr.toString());
  this.appendTooltip(writer,context,modelFormField);
}
