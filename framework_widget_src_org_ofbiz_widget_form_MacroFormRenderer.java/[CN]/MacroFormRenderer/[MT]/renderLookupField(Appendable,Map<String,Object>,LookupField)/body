{
  ModelFormField modelFormField=lookupField.getModelFormField();
  String lookupFieldFormName=lookupField.getFormName(context);
  String className="";
  String alert="false";
  if (UtilValidate.isNotEmpty(modelFormField.getWidgetStyle())) {
    className=modelFormField.getWidgetStyle();
    if (modelFormField.shouldBeRed(context)) {
      alert="true";
    }
  }
  if ("single".equals(modelFormField.getModelForm().getType()) && modelFormField.getRequiredField()) {
    String requiredStyle=modelFormField.getRequiredFieldStyle();
    if (UtilValidate.isEmpty(requiredStyle))     requiredStyle="required";
    if (UtilValidate.isEmpty(className))     className=requiredStyle;
 else     className=requiredStyle + " " + className;
  }
  String name=modelFormField.getParameterName(context);
  String value=modelFormField.getEntry(context,lookupField.getDefaultValue(context));
  if (value == null) {
    value="";
  }
  String size=Integer.toString(lookupField.getSize());
  Integer maxlength=lookupField.getMaxlength();
  String id=modelFormField.getCurrentContainerId(context);
  List<ModelForm.UpdateArea> updateAreas=modelFormField.getOnChangeUpdateAreas();
  if (UtilValidate.isEmpty(updateAreas) && UtilValidate.isNotEmpty(lookupFieldFormName)) {
    String autoCompleterTarget=null;
    if (lookupFieldFormName.indexOf('?') == -1) {
      autoCompleterTarget=lookupFieldFormName + "?";
    }
 else {
      autoCompleterTarget=lookupFieldFormName + "&amp;amp;";
    }
    autoCompleterTarget=autoCompleterTarget + "ajaxLookup=Y";
    updateAreas=new LinkedList<ModelForm.UpdateArea>();
    updateAreas.add(new ModelForm.UpdateArea("change",id,autoCompleterTarget));
  }
  boolean ajaxEnabled=updateAreas != null && this.javaScriptEnabled;
  String autocomplete="";
  if (!lookupField.getClientAutocompleteField() || !ajaxEnabled) {
    autocomplete="off";
  }
  String event=modelFormField.getEvent();
  String action=modelFormField.getAction(context);
  boolean readonly=lookupField.readonly;
  String descriptionFieldName=lookupField.getDescriptionFieldName();
  String formName=modelFormField.getModelForm().getCurrentFormName(context);
  StringBuilder targetParameterIter=new StringBuilder();
  StringBuilder imgSrc=new StringBuilder();
  List<String> targetParameterList=lookupField.getTargetParameterList();
  targetParameterIter.append("[");
  for (  String targetParameter : targetParameterList) {
    if (targetParameterIter.length() > 1) {
      targetParameterIter.append(",");
    }
    targetParameterIter.append("'");
    targetParameterIter.append(targetParameter);
    targetParameterIter.append("'");
  }
  targetParameterIter.append("]");
  this.appendContentUrl(imgSrc,"/images/fieldlookup.gif");
  String ajaxUrl="";
  if (ajaxEnabled) {
    ajaxUrl=createAjaxParamsFromUpdateAreas(updateAreas,"",context);
  }
  String lookupPresentation=lookupField.getLookupPresentation();
  if (UtilValidate.isEmpty(lookupPresentation)) {
    lookupPresentation="";
  }
  String lookupHeight=lookupField.getLookupHeight();
  if (UtilValidate.isEmpty(lookupHeight)) {
    lookupHeight="";
  }
  String lookupWidth=lookupField.getLookupWidth();
  if (UtilValidate.isEmpty(lookupWidth)) {
    lookupWidth="";
  }
  String lookupPosition=lookupField.getLookupPosition();
  if (UtilValidate.isEmpty(lookupPosition)) {
    lookupPosition="";
  }
  String fadeBackground=lookupField.getFadeBackground();
  if (UtilValidate.isEmpty(fadeBackground)) {
    fadeBackground="false";
  }
  Boolean isInitiallyCollapsed=lookupField.getInitiallyCollapsed();
  String clearText="";
  Map<String,Object> uiLabelMap=UtilGenerics.checkMap(context.get("uiLabelMap"));
  if (uiLabelMap != null) {
    clearText=(String)uiLabelMap.get("CommonClear");
  }
 else {
    Debug.logWarning("Could not find uiLabelMap in context",module);
  }
  Boolean showDescription=lookupField.getShowDescription();
  if (showDescription == null) {
    showDescription="Y".equals(UtilProperties.getPropertyValue("widget","widget.lookup.showDescription","Y"));
  }
  String lastViewName=request.getParameter("_LAST_VIEW_NAME_");
  if (UtilValidate.isEmpty(lastViewName)) {
    lastViewName=(String)request.getSession().getAttribute("_LAST_VIEW_NAME_");
  }
  if (UtilValidate.isEmpty(lastViewName)) {
    lastViewName="";
  }
  StringWriter sr=new StringWriter();
  sr.append("<@renderLookupField ");
  sr.append(" className=\"");
  sr.append(className);
  sr.append("\" alert=\"");
  sr.append(alert);
  sr.append("\" name=\"");
  sr.append(name);
  sr.append("\" value=\"");
  sr.append(value);
  sr.append("\" size=\"");
  sr.append(size);
  sr.append("\" maxlength=\"");
  sr.append((maxlength != null ? Integer.toString(maxlength) : ""));
  sr.append("\" id=\"");
  sr.append(id);
  sr.append("\" event=\"");
  if (event != null) {
    sr.append(event);
  }
  sr.append("\" action=\"");
  if (action != null) {
    sr.append(action);
  }
  sr.append("\" readonly=");
  sr.append(Boolean.toString(readonly));
  sr.append(" autocomplete=\"");
  sr.append(autocomplete);
  sr.append("\" descriptionFieldName=\"");
  sr.append(descriptionFieldName);
  sr.append("\" formName=\"");
  sr.append(formName);
  sr.append("\" fieldFormName=\"");
  sr.append(lookupFieldFormName);
  sr.append("\" targetParameterIter=");
  sr.append(targetParameterIter.toString());
  sr.append(" imgSrc=\"");
  sr.append(imgSrc.toString());
  sr.append("\" ajaxUrl=\"");
  sr.append(ajaxUrl);
  sr.append("\" ajaxEnabled=");
  sr.append(Boolean.toString(ajaxEnabled));
  sr.append(" presentation=\"");
  sr.append(lookupPresentation);
  sr.append("\" height=\"");
  sr.append(lookupHeight);
  sr.append("\" width=\"");
  sr.append(lookupWidth);
  sr.append("\" position=\"");
  sr.append(lookupPosition);
  sr.append("\" fadeBackground=\"");
  sr.append(fadeBackground);
  sr.append("\" clearText=\"");
  sr.append(clearText);
  sr.append("\" showDescription=\"");
  sr.append(Boolean.toString(showDescription));
  sr.append("\" initiallyCollapsed=\"");
  sr.append(Boolean.toString(isInitiallyCollapsed));
  sr.append("\" lastViewName=\"");
  sr.append(lastViewName);
  sr.append("\" />");
  executeMacro(writer,sr.toString());
  this.addAsterisks(writer,context,modelFormField);
  this.makeHyperlinkString(writer,lookupField.getSubHyperlink(),context);
  this.appendTooltip(writer,context,modelFormField);
}
