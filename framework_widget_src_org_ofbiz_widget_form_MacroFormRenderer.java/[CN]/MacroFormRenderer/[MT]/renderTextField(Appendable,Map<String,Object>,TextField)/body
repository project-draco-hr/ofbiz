{
  ModelFormField modelFormField=textField.getModelFormField();
  String name=modelFormField.getParameterName(context);
  String className="";
  String alert="false";
  String mask="";
  String placeholder=textField.getPlaceholder(context);
  if (UtilValidate.isNotEmpty(modelFormField.getWidgetStyle())) {
    className=modelFormField.getWidgetStyle();
    if (modelFormField.shouldBeRed(context)) {
      alert="true";
    }
  }
  String value=modelFormField.getEntry(context,textField.getDefaultValue(context));
  String textSize=Integer.toString(textField.getSize());
  String maxlength="";
  if (textField.getMaxlength() != null) {
    maxlength=Integer.toString(textField.getMaxlength());
  }
  String event=modelFormField.getEvent();
  String action=modelFormField.getAction(context);
  String id=modelFormField.getCurrentContainerId(context);
  String clientAutocomplete="false";
  if ("single".equals(modelFormField.getModelForm().getType()) && modelFormField.getRequiredField()) {
    String requiredStyle=modelFormField.getRequiredFieldStyle();
    if (UtilValidate.isEmpty(requiredStyle))     requiredStyle="required";
    if (UtilValidate.isEmpty(className))     className=requiredStyle;
 else     className=requiredStyle + " " + className;
  }
  List<ModelForm.UpdateArea> updateAreas=modelFormField.getOnChangeUpdateAreas();
  boolean ajaxEnabled=updateAreas != null && this.javaScriptEnabled;
  if (textField.getClientAutocompleteField() || ajaxEnabled) {
    clientAutocomplete="true";
  }
  if (UtilValidate.isNotEmpty(textField.getMask())) {
    mask=textField.getMask();
  }
  String ajaxUrl=createAjaxParamsFromUpdateAreas(updateAreas,"",context);
  boolean disabled=textField.disabled;
  StringWriter sr=new StringWriter();
  sr.append("<@renderTextField ");
  sr.append("name=\"");
  sr.append(name);
  sr.append("\" className=\"");
  sr.append(className);
  sr.append("\" alert=\"");
  sr.append(alert);
  sr.append("\" value=\"");
  sr.append(value);
  sr.append("\" textSize=\"");
  sr.append(textSize);
  sr.append("\" maxlength=\"");
  sr.append(maxlength);
  sr.append("\" id=\"");
  sr.append(id);
  sr.append("\" event=\"");
  if (event != null) {
    sr.append(event);
  }
  sr.append("\" action=\"");
  if (action != null) {
    sr.append(action);
  }
  sr.append("\" disabled=");
  sr.append(Boolean.toString(disabled));
  sr.append(" clientAutocomplete=\"");
  sr.append(clientAutocomplete);
  sr.append("\" ajaxUrl=\"");
  sr.append(ajaxUrl);
  sr.append("\" ajaxEnabled=");
  sr.append(Boolean.toString(ajaxEnabled));
  sr.append(" mask=\"");
  sr.append(mask);
  sr.append("\" placeholder=\"");
  sr.append(placeholder);
  sr.append("\" />");
  executeMacro(writer,sr.toString());
  ModelFormField.SubHyperlink subHyperlink=textField.getSubHyperlink();
  if (subHyperlink != null && subHyperlink.shouldUse(context)) {
    makeHyperlinkString(writer,subHyperlink,context);
  }
  this.addAsterisks(writer,context,modelFormField);
  this.appendTooltip(writer,context,modelFormField);
}
