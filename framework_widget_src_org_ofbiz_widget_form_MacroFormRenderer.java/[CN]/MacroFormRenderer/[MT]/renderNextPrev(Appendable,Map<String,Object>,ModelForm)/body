{
  boolean ajaxEnabled=false;
  List<ModelForm.UpdateArea> updateAreas=modelForm.getOnPaginateUpdateAreas();
  String targetService=modelForm.getPaginateTarget(context);
  if (this.javaScriptEnabled) {
    if (UtilValidate.isNotEmpty(updateAreas)) {
      ajaxEnabled=true;
    }
  }
  if (targetService == null) {
    targetService="${targetService}";
  }
  if (UtilValidate.isEmpty(targetService) && updateAreas == null) {
    Debug.logWarning("Cannot paginate because TargetService is empty for the form: " + modelForm.getName(),module);
    return;
  }
  int paginatorNumber=WidgetWorker.getPaginatorNumber(context);
  String viewIndexParam=modelForm.getMultiPaginateIndexField(context);
  String viewSizeParam=modelForm.getMultiPaginateSizeField(context);
  int viewIndex=modelForm.getViewIndex(context);
  int viewSize=modelForm.getViewSize(context);
  int listSize=modelForm.getListSize(context);
  int lowIndex=modelForm.getLowIndex(context);
  int highIndex=modelForm.getHighIndex(context);
  int actualPageSize=modelForm.getActualPageSize(context);
  Map<String,String> uiLabelMap=UtilGenerics.checkMap(context.get("uiLabelMap"));
  String pageLabel="";
  String commonDisplaying="";
  if (uiLabelMap == null) {
    Debug.logWarning("Could not find uiLabelMap in context",module);
  }
 else {
    pageLabel=uiLabelMap.get("CommonPage");
    Map<String,Integer> messageMap=UtilMisc.toMap("lowCount",Integer.valueOf(lowIndex + 1),"highCount",Integer.valueOf(lowIndex + actualPageSize),"total",Integer.valueOf(listSize));
    commonDisplaying=UtilProperties.getMessage("CommonUiLabels","CommonDisplaying",messageMap,(Locale)context.get("locale"));
  }
  if (viewIndexParam.equals("viewIndex" + "_" + paginatorNumber))   viewIndexParam="VIEW_INDEX" + "_" + paginatorNumber;
  if (viewSizeParam.equals("viewSize" + "_" + paginatorNumber))   viewSizeParam="VIEW_SIZE" + "_" + paginatorNumber;
  String str=(String)context.get("_QBESTRING_");
  String queryString=UtilHttp.stripViewParamsFromQueryString(str,"" + paginatorNumber);
  HashSet<String> paramNames=new HashSet<String>();
  paramNames.add(viewIndexParam);
  paramNames.add(viewSizeParam);
  queryString=UtilHttp.stripNamedParamsFromQueryString(queryString,paramNames);
  String anchor="";
  String paginateAnchor=modelForm.getPaginateTargetAnchor();
  if (UtilValidate.isNotEmpty(paginateAnchor))   anchor="#" + paginateAnchor;
  String urlPath=UtilHttp.removeQueryStringFromTarget(targetService);
  String prepLinkText=UtilHttp.getQueryStringFromTarget(targetService);
  String prepLinkSizeText;
  if (UtilValidate.isNotEmpty(queryString)) {
    queryString=UtilHttp.encodeAmpersands(queryString);
  }
  if (prepLinkText == null) {
    prepLinkText="";
  }
  if (prepLinkText.indexOf("?") < 0) {
    prepLinkText+="?";
  }
 else   if (!prepLinkText.endsWith("?")) {
    prepLinkText+="&amp;";
  }
  if (!UtilValidate.isEmpty(queryString) && !queryString.equals("null")) {
    prepLinkText+=queryString + "&amp;";
  }
  prepLinkSizeText=prepLinkText + viewSizeParam + "='+this.value+'"+ "&amp;"+ viewIndexParam+ "=0";
  prepLinkText+=viewSizeParam + "=" + viewSize+ "&amp;"+ viewIndexParam+ "=";
  if (ajaxEnabled) {
    prepLinkText=prepLinkText.replace("?","");
    prepLinkText=prepLinkText.replace("&amp;","&");
  }
  String linkText;
  String paginateStyle=modelForm.getPaginateStyle();
  String paginateFirstStyle=modelForm.getPaginateFirstStyle();
  String paginateFirstLabel=modelForm.getPaginateFirstLabel(context);
  String firstUrl="";
  String ajaxFirstUrl="";
  String paginatePreviousStyle=modelForm.getPaginatePreviousStyle();
  String paginatePreviousLabel=modelForm.getPaginatePreviousLabel(context);
  String previousUrl="";
  String ajaxPreviousUrl="";
  String selectUrl="";
  String ajaxSelectUrl="";
  String paginateViewSizeLabel=modelForm.getPaginateViewSizeLabel(context);
  String selectSizeUrl="";
  String ajaxSelectSizeUrl="";
  String paginateNextStyle=modelForm.getPaginateNextStyle();
  String paginateNextLabel=modelForm.getPaginateNextLabel(context);
  String nextUrl="";
  String ajaxNextUrl="";
  String paginateLastStyle=modelForm.getPaginateLastStyle();
  String paginateLastLabel=modelForm.getPaginateLastLabel(context);
  String lastUrl="";
  String ajaxLastUrl="";
  if (viewIndex > 0) {
    if (ajaxEnabled) {
      ajaxFirstUrl=createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + 0 + anchor,context);
    }
 else {
      linkText=prepLinkText + 0 + anchor;
      firstUrl=rh.makeLink(this.request,this.response,urlPath + linkText);
    }
  }
  if (viewIndex > 0) {
    if (ajaxEnabled) {
      ajaxPreviousUrl=createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + (viewIndex - 1) + anchor,context);
    }
 else {
      linkText=prepLinkText + (viewIndex - 1) + anchor;
      previousUrl=rh.makeLink(this.request,this.response,urlPath + linkText);
    }
  }
  if (listSize > 0 && this.javaScriptEnabled) {
    if (ajaxEnabled) {
      ajaxSelectUrl=createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + "' + this.value + '",context);
    }
 else {
      linkText=prepLinkText;
      if (linkText.startsWith("/")) {
        linkText=linkText.substring(1);
      }
      selectUrl=rh.makeLink(this.request,this.response,urlPath + linkText);
    }
  }
  if (highIndex < listSize) {
    if (ajaxEnabled) {
      ajaxNextUrl=createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + (viewIndex + 1) + anchor,context);
    }
 else {
      linkText=prepLinkText + (viewIndex + 1) + anchor;
      nextUrl=rh.makeLink(this.request,this.response,urlPath + linkText);
    }
  }
  if (highIndex < listSize) {
    if (ajaxEnabled) {
      ajaxLastUrl=createAjaxParamsFromUpdateAreas(updateAreas,prepLinkText + (listSize / viewSize) + anchor,context);
    }
 else {
      linkText=prepLinkText + (listSize / viewSize) + anchor;
      lastUrl=rh.makeLink(this.request,this.response,urlPath + linkText);
    }
  }
  if (listSize > 0 && this.javaScriptEnabled) {
    if (ajaxEnabled) {
      ajaxSelectSizeUrl=createAjaxParamsFromUpdateAreas(updateAreas,prepLinkSizeText + anchor,context);
    }
 else {
      linkText=prepLinkSizeText;
      if (linkText.startsWith("/")) {
        linkText=linkText.substring(1);
      }
      selectSizeUrl=rh.makeLink(this.request,this.response,urlPath + linkText);
    }
  }
  StringWriter sr=new StringWriter();
  sr.append("<@renderNextPrev ");
  sr.append(" paginateStyle=\"");
  sr.append(paginateStyle);
  sr.append("\" paginateFirstStyle=\"");
  sr.append(paginateFirstStyle);
  sr.append("\" viewIndex=");
  sr.append(Integer.toString(viewIndex));
  sr.append(" highIndex=");
  sr.append(Integer.toString(highIndex));
  sr.append(" listSize=");
  sr.append(Integer.toString(listSize));
  sr.append(" viewSize=");
  sr.append(Integer.toString(viewSize));
  sr.append(" ajaxEnabled=");
  sr.append(Boolean.toString(ajaxEnabled));
  sr.append(" javaScriptEnabled=");
  sr.append(Boolean.toString(javaScriptEnabled));
  sr.append(" ajaxFirstUrl=\"");
  sr.append(ajaxFirstUrl);
  sr.append("\" ajaxFirstUrl=\"");
  sr.append(ajaxFirstUrl);
  sr.append("\" ajaxFirstUrl=\"");
  sr.append(ajaxFirstUrl);
  sr.append("\" firstUrl=\"");
  sr.append(firstUrl);
  sr.append("\" paginateFirstLabel=\"");
  sr.append(paginateFirstLabel);
  sr.append("\" paginatePreviousStyle=\"");
  sr.append(paginatePreviousStyle);
  sr.append("\" ajaxPreviousUrl=\"");
  sr.append(ajaxPreviousUrl);
  sr.append("\" previousUrl=\"");
  sr.append(previousUrl);
  sr.append("\" paginatePreviousLabel=\"");
  sr.append(paginatePreviousLabel);
  sr.append("\" pageLabel=\"");
  sr.append(pageLabel);
  sr.append("\" ajaxSelectUrl=\"");
  sr.append(ajaxSelectUrl);
  sr.append("\" selectUrl=\"");
  sr.append(selectUrl);
  sr.append("\" ajaxSelectSizeUrl=\"");
  sr.append(ajaxSelectSizeUrl);
  sr.append("\" selectSizeUrl=\"");
  sr.append(selectSizeUrl);
  sr.append("\" commonDisplaying=\"");
  sr.append(commonDisplaying);
  sr.append("\" paginateNextStyle=\"");
  sr.append(paginateNextStyle);
  sr.append("\" ajaxNextUrl=\"");
  sr.append(ajaxNextUrl);
  sr.append("\" nextUrl=\"");
  sr.append(nextUrl);
  sr.append("\" paginateNextLabel=\"");
  sr.append(paginateNextLabel);
  sr.append("\" paginateLastStyle=\"");
  sr.append(paginateLastStyle);
  sr.append("\" ajaxLastUrl=\"");
  sr.append(ajaxLastUrl);
  sr.append("\" lastUrl=\"");
  sr.append(lastUrl);
  sr.append("\" paginateLastLabel=\"");
  sr.append(paginateLastLabel);
  sr.append("\" paginateViewSizeLabel=\"");
  sr.append(paginateViewSizeLabel);
  sr.append("\" />");
  executeMacro(writer,sr.toString());
}
