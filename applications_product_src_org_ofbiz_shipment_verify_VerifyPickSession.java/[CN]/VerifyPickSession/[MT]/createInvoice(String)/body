{
  GenericDelegator delegator=this.getDelegator();
  Map createInvoiceContext=FastMap.newInstance();
  GenericValue orderHeader=delegator.findOne("OrderHeader",UtilMisc.toMap("orderId",orderId),false);
  GenericValue billingAccount=orderHeader.getRelatedOne("BillingAccount");
  String billingAccountId=billingAccount != null ? billingAccount.getString("billingAccountId") : null;
  createInvoiceContext.put("partyId",(EntityUtil.getFirst(delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","BILL_TO_CUSTOMER")))).getString("partyId"));
  createInvoiceContext.put("partyIdFrom",(EntityUtil.getFirst(delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","BILL_FROM_VENDOR")))).getString("partyId"));
  createInvoiceContext.put("billingAccountId",billingAccountId);
  createInvoiceContext.put("invoiceTypeId","SALES_INVOICE");
  createInvoiceContext.put("statusId","INVOICE_IN_PROCESS");
  createInvoiceContext.put("currencyUomId",orderHeader.getString("currencyUom"));
  createInvoiceContext.put("userLogin",this.getUserLogin());
  Map createInvoiceResult=this.getDispatcher().runSync("createInvoice",createInvoiceContext);
  if (ServiceUtil.isError(createInvoiceResult)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(createInvoiceResult));
  }
  String invoiceId=(String)createInvoiceResult.get("invoiceId");
  return invoiceId;
}
