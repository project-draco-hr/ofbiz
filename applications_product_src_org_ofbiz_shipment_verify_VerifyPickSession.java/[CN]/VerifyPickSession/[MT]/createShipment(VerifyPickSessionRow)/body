{
  Delegator delegator=this.getDelegator();
  String orderId=line.getOrderId();
  Map<String,Object> newShipment=FastMap.newInstance();
  newShipment.put("originFacilityId",facilityId);
  newShipment.put("primaryShipGroupSeqId",line.getShipGroupSeqId());
  newShipment.put("primaryOrderId",orderId);
  newShipment.put("shipmentTypeId","OUTGOING_SHIPMENT");
  newShipment.put("statusId","SHIPMENT_SCHEDULED");
  newShipment.put("userLogin",this.getUserLogin());
  GenericValue orderRoleShipTo=EntityUtil.getFirst(delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","SHIP_TO_CUSTOMER"),null,false));
  if (UtilValidate.isNotEmpty(orderRoleShipTo)) {
    newShipment.put("partyIdTo",orderRoleShipTo.getString("partyId"));
  }
  String partyIdFrom=null;
  GenericValue orderItemShipGroup=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGroup",UtilMisc.toMap("orderId",orderId,"shipGroupSeqId",line.getShipGroupSeqId()),null,false));
  if (UtilValidate.isNotEmpty(orderItemShipGroup.getString("vendorPartyId"))) {
    partyIdFrom=orderItemShipGroup.getString("vendorPartyId");
  }
 else   if (UtilValidate.isNotEmpty(orderItemShipGroup.getString("facilityId"))) {
    GenericValue facility=delegator.findOne("Facility",UtilMisc.toMap("facilityId",orderItemShipGroup.getString("facilityId")),false);
    if (UtilValidate.isNotEmpty(facility.getString("ownerPartyId"))) {
      partyIdFrom=facility.getString("ownerPartyId");
    }
  }
  if (UtilValidate.isEmpty(partyIdFrom)) {
    GenericValue orderRoleShipFrom=EntityUtil.getFirst(delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","SHIP_FROM_VENDOR"),null,false));
    if (UtilValidate.isNotEmpty(orderRoleShipFrom)) {
      partyIdFrom=orderRoleShipFrom.getString("partyId");
    }
 else {
      orderRoleShipFrom=EntityUtil.getFirst(delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","BILL_FROM_VENDOR"),null,false));
      partyIdFrom=orderRoleShipFrom.getString("partyId");
    }
  }
  newShipment.put("partyIdFrom",partyIdFrom);
  Map<String,Object> newShipResp=this.getDispatcher().runSync("createShipment",newShipment);
  if (ServiceUtil.isError(newShipResp)) {
    throw new GeneralException(ServiceUtil.getErrorMessage(newShipResp));
  }
  String shipmentId=(String)newShipResp.get("shipmentId");
  return shipmentId;
}
