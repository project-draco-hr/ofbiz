{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productCategoryId=(String)context.get("productCategoryId");
  String productStoreId=(String)context.get("productStoreId");
  String currencyUomId=(String)context.get("currencyUomId");
  String partyId=(String)context.get("partyId");
  String productId=(String)context.get("productId");
  Integer numberOfProductsPerOrder=(Integer)context.get("numberOfProductsPerOrder");
  String salesChannel=(String)context.get("salesChannel");
  if (UtilValidate.isEmpty(salesChannel)) {
    salesChannel="WEB_SALES_CHANNEL";
  }
  List<String> productsList=FastList.newInstance();
  try {
    if (UtilValidate.isNotEmpty(productId)) {
      productsList.add(productId);
      numberOfProductsPerOrder=Integer.valueOf(1);
    }
 else {
      Map<String,Object> result=dispatcher.runSync("getProductCategoryMembers",UtilMisc.toMap("categoryId",productCategoryId));
      if (result.get("categoryMembers") != null) {
        List<GenericValue> productCategoryMembers=UtilGenerics.checkList(result.get("categoryMembers"));
        if (productCategoryMembers != null) {
          Iterator<GenericValue> i=productCategoryMembers.iterator();
          while (i.hasNext()) {
            GenericValue prodCatMemb=i.next();
            if (prodCatMemb != null) {
              productsList.add(prodCatMemb.getString("productId"));
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  if (productsList.size() == 0) {
    return ServiceUtil.returnError(UtilProperties.getMessage("OrderUiLabels","OrderCreateTestSalesOrderSingleError",UtilMisc.toMap("productCategoryId",productCategoryId),locale));
  }
  Random r=new Random();
  ShoppingCart cart=new ShoppingCart(delegator,productStoreId,locale,currencyUomId);
  cart.setOrderType("SALES_ORDER");
  cart.setChannelType(salesChannel);
  cart.setProductStoreId(productStoreId);
  cart.setBillToCustomerPartyId(partyId);
  cart.setPlacingCustomerPartyId(partyId);
  cart.setShipToCustomerPartyId(partyId);
  cart.setEndUserCustomerPartyId(partyId);
  try {
    cart.setUserLogin(userLogin,dispatcher);
  }
 catch (  Exception exc) {
    Debug.logWarning("Error setting userLogin in the cart: " + exc.getMessage(),module);
  }
  int numberOfProductsPerOrderInt=numberOfProductsPerOrder.intValue();
  for (int j=1; j <= numberOfProductsPerOrderInt; j++) {
    int k=r.nextInt(productsList.size());
    try {
      cart.addOrIncreaseItem(productsList.get(k),null,BigDecimal.ONE,null,null,null,null,null,null,null,null,null,null,null,null,dispatcher);
    }
 catch (    Exception exc) {
      Debug.logWarning("Error adding product with id " + productsList.get(k) + " to the cart: "+ exc.getMessage(),module);
    }
  }
  cart.setDefaultCheckoutOptions(dispatcher);
  CheckOutHelper checkout=new CheckOutHelper(dispatcher,delegator,cart);
  Map<String,Object> orderCreateResult=checkout.createOrder(userLogin);
  String orderId=(String)orderCreateResult.get("orderId");
  Map<String,Object> resultMap=ServiceUtil.returnSuccess();
  if (UtilValidate.isNotEmpty(orderId)) {
    Debug.logInfo("Created test order with id: " + orderId,module);
    boolean approved=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);
    Debug.logInfo("Test order with id: " + orderId + " has been approved: "+ approved,module);
    resultMap.put("orderId",orderId);
  }
  Boolean shipOrder=(Boolean)context.get("shipOrder");
  if (shipOrder.booleanValue() && UtilValidate.isNotEmpty(orderId)) {
    try {
      dispatcher.runSync("quickShipEntireOrder",UtilMisc.toMap("orderId",orderId,"userLogin",userLogin));
      Debug.logInfo("Test sales order with id [" + orderId + "] has been shipped",module);
    }
 catch (    Exception exc) {
      Debug.logWarning("Unable to quick ship test sales order with id [" + orderId + "] with error: "+ exc.getMessage(),module);
    }
  }
  return resultMap;
}
