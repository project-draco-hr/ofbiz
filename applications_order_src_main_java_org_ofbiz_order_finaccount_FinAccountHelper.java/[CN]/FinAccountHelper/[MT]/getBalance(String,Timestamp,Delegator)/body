{
  if (asOfDateTime == null)   asOfDateTime=UtilDateTime.nowTimestamp();
  BigDecimal incrementTotal=ZERO;
  BigDecimal decrementTotal=ZERO;
  List<GenericValue> transSums=EntityQuery.use(delegator).select("amount").from("FinAccountTransSum").where(EntityCondition.makeCondition("finAccountId",EntityOperator.EQUALS,finAccountId),EntityCondition.makeCondition("transactionDate",EntityOperator.LESS_THAN_EQUAL_TO,asOfDateTime),EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"DEPOSIT"),EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"ADJUSTMENT")),EntityOperator.OR)).queryList();
  incrementTotal=addFirstEntryAmount(incrementTotal,transSums,"amount",(decimals + 1),rounding);
  transSums=EntityQuery.use(delegator).select("amount").from("FinAccountTransSum").where(EntityCondition.makeCondition("finAccountId",EntityOperator.EQUALS,finAccountId),EntityCondition.makeCondition("transactionDate",EntityOperator.LESS_THAN_EQUAL_TO,asOfDateTime),EntityCondition.makeCondition("finAccountTransTypeId",EntityOperator.EQUALS,"WITHDRAWAL")).queryList();
  decrementTotal=addFirstEntryAmount(decrementTotal,transSums,"amount",(decimals + 1),rounding);
  return incrementTotal.subtract(decrementTotal).setScale(decimals,rounding);
}
