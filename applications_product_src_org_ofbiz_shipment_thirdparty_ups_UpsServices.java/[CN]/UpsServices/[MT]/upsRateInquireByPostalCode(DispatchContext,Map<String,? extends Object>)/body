{
  GenericDelegator delegator=dctx.getDelegator();
  String serviceConfigProps=(String)context.get("serviceConfigProps");
  String upsRateInquireMode=(String)context.get("upsRateInquireMode");
  String productStoreId=(String)context.get("productStoreId");
  String carrierRoleTypeId=(String)context.get("carrierRoleTypeId");
  String carrierPartyId=(String)context.get("carrierPartyId");
  String shipmentMethodTypeId=(String)context.get("shipmentMethodTypeId");
  String shippingPostalCode=(String)context.get("shippingPostalCode");
  String shippingCountryCode=(String)context.get("shippingCountryCode");
  List<Double> packageWeights=UtilGenerics.checkList(context.get("packageWeights"));
  List<Map<String,Object>> shippableItemInfo=UtilGenerics.checkList(context.get("shippableItemInfo"));
  Double shippableTotal=(Double)context.get("shippableTotal");
  Double shippableQuantity=(Double)context.get("shippableQuantity");
  Double shippableWeight=(Double)context.get("shippableWeight");
  String isResidentialAddress=(String)context.get("isResidentialAddress");
  if (UtilValidate.isEmpty(shippingPostalCode)) {
    return ServiceUtil.returnFailure("Cannot estimate UPS Rate because postal code is missing");
  }
  if (shippableTotal == null) {
    shippableTotal=Double.valueOf(0.00);
  }
  if (shippableQuantity == null) {
    shippableQuantity=Double.valueOf(0.00);
  }
  if (shippableWeight == null) {
    shippableWeight=Double.valueOf(0.00);
  }
  if (serviceConfigProps == null) {
    serviceConfigProps="shipment.properties";
  }
  if (upsRateInquireMode == null || !"Shop".equals(upsRateInquireMode)) {
    Debug.logWarning("No upsRateInquireMode set, defaulting to 'Rate'",module);
    upsRateInquireMode="Rate";
  }
  String pickupType=UtilProperties.getPropertyValue(serviceConfigProps,"shipment.ups.shipper.pickup.type","01");
  GenericValue shipFromAddress=(GenericValue)context.get("shipFromAddress");
  if (shipFromAddress == null) {
    GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);
    if (productStore != null && productStore.get("inventoryFacilityId") != null) {
      GenericValue facilityContactMech=ContactMechWorker.getFacilityContactMechByPurpose(delegator,productStore.getString("inventoryFacilityId"),UtilMisc.toList("SHIP_ORIG_LOCATION","PRIMARY_LOCATION"));
      if (facilityContactMech != null) {
        try {
          shipFromAddress=delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",facilityContactMech.getString("contactMechId")));
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
      }
    }
  }
  if (shipFromAddress == null) {
    return ServiceUtil.returnError("Unable to determine ship-from address");
  }
  String serviceCode=null;
  if (!"Shop".equals(upsRateInquireMode)) {
    GenericValue carrierShipmentMethod=null;
    try {
      carrierShipmentMethod=delegator.findByPrimaryKey("CarrierShipmentMethod",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId,"partyId",carrierPartyId,"roleTypeId",carrierRoleTypeId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    if (carrierShipmentMethod == null) {
      return ServiceUtil.returnError("Unable to locate the shipping method requested");
    }
    serviceCode=carrierShipmentMethod.getString("carrierServiceCode");
  }
  Document rateRequestDoc=UtilXml.makeEmptyXmlDocument("RatingServiceSelectionRequest");
  Element rateRequestElement=rateRequestDoc.getDocumentElement();
  rateRequestElement.setAttribute("xml:lang","en-US");
  Element requestElement=UtilXml.addChildElement(rateRequestElement,"Request",rateRequestDoc);
  Element transactionReferenceElement=UtilXml.addChildElement(requestElement,"TransactionReference",rateRequestDoc);
  UtilXml.addChildElementValue(transactionReferenceElement,"CustomerContext","Rating and Service",rateRequestDoc);
  UtilXml.addChildElementValue(transactionReferenceElement,"XpciVersion","1.0001",rateRequestDoc);
  UtilXml.addChildElementValue(requestElement,"RequestAction","Rate",rateRequestDoc);
  UtilXml.addChildElementValue(requestElement,"RequestOption",upsRateInquireMode,rateRequestDoc);
  Element pickupElement=UtilXml.addChildElement(rateRequestElement,"PickupType",rateRequestDoc);
  UtilXml.addChildElementValue(pickupElement,"Code",pickupType,rateRequestDoc);
  Element shipmentElement=UtilXml.addChildElement(rateRequestElement,"Shipment",rateRequestDoc);
  Element shipperElement=UtilXml.addChildElement(shipmentElement,"Shipper",rateRequestDoc);
  Element shipperAddrElement=UtilXml.addChildElement(shipperElement,"Address",rateRequestDoc);
  UtilXml.addChildElementValue(shipperAddrElement,"PostalCode",shipFromAddress.getString("postalCode"),rateRequestDoc);
  Element shiptoElement=UtilXml.addChildElement(shipmentElement,"ShipTo",rateRequestDoc);
  Element shiptoAddrElement=UtilXml.addChildElement(shiptoElement,"Address",rateRequestDoc);
  UtilXml.addChildElementValue(shiptoAddrElement,"PostalCode",shippingPostalCode,rateRequestDoc);
  if (shippingCountryCode != null && !shippingCountryCode.equals("")) {
    UtilXml.addChildElementValue(shiptoAddrElement,"CountryCode",shippingCountryCode,rateRequestDoc);
  }
  if (isResidentialAddress != null && isResidentialAddress.equals("Y")) {
    UtilXml.addChildElement(shiptoAddrElement,"ResidentialAddress",rateRequestDoc);
  }
  if (serviceCode != null) {
    Element serviceElement=UtilXml.addChildElement(shipmentElement,"Service",rateRequestDoc);
    UtilXml.addChildElementValue(serviceElement,"Code",serviceCode,rateRequestDoc);
  }
  String maxWeightStr=UtilProperties.getPropertyValue(serviceConfigProps,"shipment.ups.max.estimate.weight","99");
  double maxWeight=99;
  try {
    maxWeight=Double.parseDouble(maxWeightStr);
  }
 catch (  NumberFormatException e) {
    maxWeight=99;
  }
  String minWeightStr=UtilProperties.getPropertyValue(serviceConfigProps,"shipment.ups.min.estimate.weight",".1");
  double minWeight=.1;
  try {
    minWeight=Double.parseDouble(minWeightStr);
  }
 catch (  NumberFormatException e) {
    minWeight=.1;
  }
  if (UtilValidate.isEmpty(packageWeights)) {
    splitEstimatePackages(rateRequestDoc,shipmentElement,shippableItemInfo,maxWeight,minWeight);
  }
 else {
    for (    Double packageWeight : packageWeights) {
      addPackageElement(rateRequestDoc,shipmentElement,packageWeight);
    }
  }
  UtilXml.addChildElement(shipmentElement,"ShipmentServiceOptions",rateRequestDoc);
  String rateRequestString=null;
  try {
    rateRequestString=UtilXml.writeXmlDocument(rateRequestDoc);
  }
 catch (  IOException e) {
    String ioeErrMsg="Error writing the RatingServiceSelectionRequest XML Document to a String: " + e.toString();
    Debug.logError(e,ioeErrMsg,module);
    return ServiceUtil.returnFailure(ioeErrMsg);
  }
  Document accessRequestDocument=createAccessRequestDocument(serviceConfigProps);
  String accessRequestString=null;
  try {
    accessRequestString=UtilXml.writeXmlDocument(accessRequestDocument);
  }
 catch (  IOException e) {
    String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
    Debug.logError(e,ioeErrMsg,module);
    return ServiceUtil.returnFailure(ioeErrMsg);
  }
  StringBuilder xmlString=new StringBuilder();
  xmlString.append(accessRequestString);
  xmlString.append(rateRequestString);
  if (Debug.verboseOn())   Debug.logVerbose(xmlString.toString(),module);
  String rateResponseString=null;
  try {
    rateResponseString=sendUpsRequest("Rate",xmlString.toString());
  }
 catch (  UpsConnectException e) {
    String uceErrMsg="Error sending UPS request for UPS Service Rate: " + e.toString();
    Debug.logError(e,uceErrMsg,module);
    return ServiceUtil.returnFailure(uceErrMsg);
  }
  Debug.logVerbose(rateResponseString,module);
  Document rateResponseDocument=null;
  try {
    rateResponseDocument=UtilXml.readXmlDocument(rateResponseString,false);
  }
 catch (  SAXException e2) {
    String excErrMsg="Error parsing the RatingServiceSelectionResponse: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnFailure(excErrMsg);
  }
catch (  ParserConfigurationException e2) {
    String excErrMsg="Error parsing the RatingServiceSelectionResponse: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnFailure(excErrMsg);
  }
catch (  IOException e2) {
    String excErrMsg="Error parsing the RatingServiceSelectionResponse: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnFailure(excErrMsg);
  }
  return handleUpsRateInquireResponse(rateResponseDocument);
}
