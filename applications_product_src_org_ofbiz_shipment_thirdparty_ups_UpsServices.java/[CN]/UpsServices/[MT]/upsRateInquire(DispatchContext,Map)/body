{
  GenericDelegator delegator=dctx.getDelegator();
  String shippingContactMechId=(String)context.get("shippingContactMechId");
  GenericValue shipToAddress=null;
  if (shippingContactMechId != null) {
    try {
      shipToAddress=delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",shippingContactMechId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
  }
  if (shipToAddress == null) {
    return ServiceUtil.returnError("Unable to determine ship-to address");
  }
  GenericValue destCountryGeo=null;
  try {
    destCountryGeo=shipToAddress.getRelatedOne("CountryGeo");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (UtilValidate.isEmpty(destCountryGeo)) {
    return ServiceUtil.returnError("Destination CountryGeo not found for ship-to address");
  }
  Map cxt=UtilMisc.toMap("serviceConfigProps",context.get("serviceConfigProps"),"upsRateInquireMode",context.get("upsRateInquireMode"),"productStoreId",context.get("productStoreId"),"carrierRoleTypeId",context.get("carrierRoleTypeId"));
  cxt.put("carrierPartyId",context.get("carrierPartyId"));
  cxt.put("shipmentMethodTypeId",context.get("shipmentMethodTypeId"));
  cxt.put("shippingPostalCode",shipToAddress.getString("postalCode"));
  cxt.put("shippingCountryCode",destCountryGeo.getString("geoCode"));
  cxt.put("packageWeights",context.get("packageWeights"));
  cxt.put("shippableItemInfo",context.get("shippableItemInfo"));
  cxt.put("shippableTotal",context.get("shippableTotal"));
  cxt.put("shippableQuantity",context.get("shippableQuantity"));
  cxt.put("shippableWeight",context.get("shippableWeight"));
  cxt.put("isResidentialAddress",context.get("isResidentialAddress"));
  try {
    return dctx.getDispatcher().runSync("upsRateEstimateByPostalCode",cxt);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
}
