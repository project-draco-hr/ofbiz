{
  Delegator delegator=dctx.getDelegator();
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);
  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");
  String resource=(String)shipmentGatewayConfig.get("configProps");
  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsGatewayNotAvailable",locale));
  }
  boolean shipmentUpsSaveCertificationInfo="true".equals(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertInfo",resource,"shipment.ups.save.certification.info","true"));
  String shipmentUpsSaveCertificationPath=FlexibleStringExpander.expandString(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertPath",resource,"shipment.ups.save.certification.path",""),context);
  File shipmentUpsSaveCertificationFile=null;
  if (shipmentUpsSaveCertificationInfo) {
    shipmentUpsSaveCertificationFile=new File(shipmentUpsSaveCertificationPath);
    if (!shipmentUpsSaveCertificationFile.exists()) {
      shipmentUpsSaveCertificationFile.mkdirs();
    }
  }
  String shipmentAcceptResponseString=null;
  try {
    GenericValue shipmentRouteSegment=delegator.findByPrimaryKey("ShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId));
    if (!"UPS".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
    }
    if (!"SHRSCS_CONFIRMED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentStatusNotConfirmed",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId,"shipmentRouteSegmentStatus",shipmentRouteSegment.getString("carrierServiceStatusId")),locale));
    }
    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"));
    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (UtilValidate.isEmpty(shipmentRouteSegment.getString("trackingDigest"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsTrackingDigestWasNotSet",locale));
    }
    Document shipmentAcceptRequestDoc=UtilXml.makeEmptyXmlDocument("ShipmentAcceptRequest");
    Element shipmentAcceptRequestElement=shipmentAcceptRequestDoc.getDocumentElement();
    shipmentAcceptRequestElement.setAttribute("xml:lang","en-US");
    Element requestElement=UtilXml.addChildElement(shipmentAcceptRequestElement,"Request",shipmentAcceptRequestDoc);
    Element transactionReferenceElement=UtilXml.addChildElement(requestElement,"TransactionReference",shipmentAcceptRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"CustomerContext","ShipAccept / 01",shipmentAcceptRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"XpciVersion","1.0001",shipmentAcceptRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestAction","ShipAccept",shipmentAcceptRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestOption","01",shipmentAcceptRequestDoc);
    UtilXml.addChildElementValue(shipmentAcceptRequestElement,"ShipmentDigest",shipmentRouteSegment.getString("trackingDigest"),shipmentAcceptRequestDoc);
    String shipmentAcceptRequestString=null;
    try {
      shipmentAcceptRequestString=UtilXml.writeXmlDocument(shipmentAcceptRequestDoc);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the ShipmentAcceptRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorShipmentAcceptRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    Document accessRequestDocument=createAccessRequestDocument(delegator,shipmentGatewayConfigId,resource);
    String accessRequestString=null;
    try {
      accessRequestString=UtilXml.writeXmlDocument(accessRequestDocument);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorAccessRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    StringBuilder xmlString=new StringBuilder();
    xmlString.append(accessRequestString);
    xmlString.append(shipmentAcceptRequestString);
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentAcceptRequest" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(xmlString.toString().getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.logInfo(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    try {
      shipmentAcceptResponseString=sendUpsRequest("ShipAccept",xmlString.toString(),shipmentGatewayConfigId,resource,delegator,locale);
    }
 catch (    UpsConnectException e) {
      String uceErrMsg="Error sending UPS request for UPS Service ShipAccept: " + e.toString();
      Debug.logError(e,uceErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorSendingShipAccept",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentAcceptResponse" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(shipmentAcceptResponseString.getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.logInfo(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    Document shipmentAcceptResponseDocument=null;
    try {
      shipmentAcceptResponseDocument=UtilXml.readXmlDocument(shipmentAcceptResponseString,false);
    }
 catch (    SAXException e2) {
      String excErrMsg="Error parsing the ShipmentAcceptResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingShipmentAcceptResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    ParserConfigurationException e2) {
      String excErrMsg="Error parsing the ShipmentAcceptResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingShipmentAcceptResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    IOException e2) {
      String excErrMsg="Error parsing the ShipmentAcceptResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingShipmentAcceptResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
    return handleUpsShipmentAcceptResponse(shipmentAcceptResponseDocument,shipmentRouteSegment,shipmentPackageRouteSegs,delegator,shipmentGatewayConfigId,resource,context,locale);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorDataShipmentAccept",UtilMisc.toMap("errorString",e.toString()),locale));
  }
}
