{
  Delegator delegator=dctx.getDelegator();
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);
  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");
  String resource=(String)shipmentGatewayConfig.get("configProps");
  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsGatewayNotAvailable",locale));
  }
  boolean shipmentUpsSaveCertificationInfo="true".equals(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertInfo",resource,"shipment.ups.save.certification.info","true"));
  String shipmentUpsSaveCertificationPath=FlexibleStringExpander.expandString(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertPath",resource,"shipment.ups.save.certification.path",""),context);
  File shipmentUpsSaveCertificationFile=null;
  if (shipmentUpsSaveCertificationInfo) {
    shipmentUpsSaveCertificationFile=new File(shipmentUpsSaveCertificationPath);
    if (!shipmentUpsSaveCertificationFile.exists()) {
      shipmentUpsSaveCertificationFile.mkdirs();
    }
  }
  String trackResponseString=null;
  try {
    GenericValue shipmentRouteSegment=delegator.findByPrimaryKey("ShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId));
    if (!"UPS".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
    }
    if (!"SHRSCS_ACCEPTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentStatusNotAccepted",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId,"shipmentRouteSegmentStatus",shipmentRouteSegment.getString("carrierServiceStatusId")),locale));
    }
    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"));
    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (UtilValidate.isEmpty(shipmentRouteSegment.getString("trackingIdNumber"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsTrackingIdNumberWasNotSet",locale));
    }
    Document trackRequestDoc=UtilXml.makeEmptyXmlDocument("TrackRequest");
    Element trackRequestElement=trackRequestDoc.getDocumentElement();
    trackRequestElement.setAttribute("xml:lang","en-US");
    Element requestElement=UtilXml.addChildElement(trackRequestElement,"Request",trackRequestDoc);
    Element transactionReferenceElement=UtilXml.addChildElement(requestElement,"TransactionReference",trackRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"CustomerContext","Track",trackRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"XpciVersion","1.0001",trackRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestAction","Track",trackRequestDoc);
    UtilXml.addChildElementValue(trackRequestElement,"ShipmentIdentificationNumber",shipmentRouteSegment.getString("trackingIdNumber"),trackRequestDoc);
    String trackRequestString=null;
    try {
      trackRequestString=UtilXml.writeXmlDocument(trackRequestDoc);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the TrackRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorTrackRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    Document accessRequestDocument=createAccessRequestDocument(delegator,shipmentGatewayConfigId,resource);
    String accessRequestString=null;
    try {
      accessRequestString=UtilXml.writeXmlDocument(accessRequestDocument);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorAccessRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    StringBuilder xmlString=new StringBuilder();
    xmlString.append(accessRequestString);
    xmlString.append(trackRequestString);
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsTrackRequest" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(xmlString.toString().getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.logInfo(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    try {
      trackResponseString=sendUpsRequest("Track",xmlString.toString(),shipmentGatewayConfigId,resource,delegator,locale);
    }
 catch (    UpsConnectException e) {
      String uceErrMsg="Error sending UPS request for UPS Service Track: " + e.toString();
      Debug.logError(e,uceErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorSendingTrack",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsTrackResponseString" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(trackResponseString.getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.logInfo(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    Document trackResponseDocument=null;
    try {
      trackResponseDocument=UtilXml.readXmlDocument(trackResponseString,false);
    }
 catch (    SAXException e2) {
      String excErrMsg="Error parsing the TrackResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingTrackResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    ParserConfigurationException e2) {
      String excErrMsg="Error parsing the TrackResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingTrackResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    IOException e2) {
      String excErrMsg="Error parsing the TrackResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingTrackResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
    return handleUpsTrackShipmentResponse(trackResponseDocument,shipmentRouteSegment,shipmentPackageRouteSegs,locale);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorDataShipmentTrack",UtilMisc.toMap("errorString",e.toString()),locale));
  }
}
