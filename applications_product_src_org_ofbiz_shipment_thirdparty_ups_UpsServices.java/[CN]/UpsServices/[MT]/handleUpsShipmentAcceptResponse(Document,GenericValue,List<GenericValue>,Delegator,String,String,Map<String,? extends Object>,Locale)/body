{
  boolean shipmentUpsSaveCertificationInfo="true".equals(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertInfo",resource,"shipment.ups.save.certification.info","true"));
  String shipmentUpsSaveCertificationPath=FlexibleStringExpander.expandString(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertPath",resource,"shipment.ups.save.certification.path",""),context);
  File shipmentUpsSaveCertificationFile=null;
  if (shipmentUpsSaveCertificationInfo) {
    shipmentUpsSaveCertificationFile=new File(shipmentUpsSaveCertificationPath);
    if (!shipmentUpsSaveCertificationFile.exists()) {
      shipmentUpsSaveCertificationFile.mkdirs();
    }
  }
  Element shipmentAcceptResponseElement=shipmentAcceptResponseDocument.getDocumentElement();
  Element responseElement=UtilXml.firstChildElement(shipmentAcceptResponseElement,"Response");
  String responseStatusCode=UtilXml.childElementValue(responseElement,"ResponseStatusCode");
  List<Object> errorList=FastList.newInstance();
  UpsServices.handleErrors(responseElement,errorList,locale);
  if ("1".equals(responseStatusCode)) {
    Element shipmentResultsElement=UtilXml.firstChildElement(shipmentAcceptResponseElement,"ShipmentResults");
    Element shipmentChargesElement=UtilXml.firstChildElement(shipmentResultsElement,"ShipmentCharges");
    Element transportationChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"TransportationCharges");
    String transportationMonetaryValue=UtilXml.childElementValue(transportationChargesElement,"MonetaryValue");
    Element serviceOptionsChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"ServiceOptionsCharges");
    String serviceOptionsMonetaryValue=UtilXml.childElementValue(serviceOptionsChargesElement,"MonetaryValue");
    Element totalChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"TotalCharges");
    String totalCurrencyCode=UtilXml.childElementValue(totalChargesElement,"CurrencyCode");
    String totalMonetaryValue=UtilXml.childElementValue(totalChargesElement,"MonetaryValue");
    if (UtilValidate.isNotEmpty(totalCurrencyCode)) {
      if (UtilValidate.isEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
        shipmentRouteSegment.set("currencyUomId",totalCurrencyCode);
      }
 else       if (!totalCurrencyCode.equals(shipmentRouteSegment.getString("currencyUomId"))) {
        shipmentRouteSegment.set("currencyUomId",totalCurrencyCode);
        errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsCurrencyDoesNotMatch",UtilMisc.toMap("currency1",totalCurrencyCode,"currency2",shipmentRouteSegment.getString("currencyUomId")),locale));
      }
    }
    try {
      shipmentRouteSegment.set("actualTransportCost",new BigDecimal(transportationMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the transportationMonetaryValue [" + transportationMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingTransportationMonetaryValue",UtilMisc.toMap("transportationMonetaryValue",transportationMonetaryValue,"errorString",e.toString()),locale));
    }
    try {
      shipmentRouteSegment.set("actualServiceCost",new BigDecimal(serviceOptionsMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the serviceOptionsMonetaryValue [" + serviceOptionsMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingServiceOptionsMonetaryValue",UtilMisc.toMap("serviceOptionsMonetaryValue",serviceOptionsMonetaryValue,"errorString",e.toString()),locale));
    }
    try {
      shipmentRouteSegment.set("actualCost",new BigDecimal(totalMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the totalMonetaryValue [" + totalMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingTotalMonetaryValue",UtilMisc.toMap("totalMonetaryValue",totalMonetaryValue,"errorString",e.toString()),locale));
    }
    Element billingWeightElement=UtilXml.firstChildElement(shipmentResultsElement,"BillingWeight");
    Element billingWeightUnitOfMeasurementElement=UtilXml.firstChildElement(billingWeightElement,"UnitOfMeasurement");
    String billingWeightUnitOfMeasurement=UtilXml.childElementValue(billingWeightUnitOfMeasurementElement,"Code");
    String billingWeight=UtilXml.childElementValue(billingWeightElement,"Weight");
    try {
      shipmentRouteSegment.set("billingWeight",new BigDecimal(billingWeight));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the billingWeight [" + billingWeight + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingBillingWeight",UtilMisc.toMap("billingWeight",billingWeight,"errorString",e.toString()),locale));
    }
    shipmentRouteSegment.set("billingWeightUomId",unitsUpsToOfbiz.get(billingWeightUnitOfMeasurement));
    String shipmentIdentificationNumber=UtilXml.childElementValue(shipmentResultsElement,"ShipmentIdentificationNumber");
    shipmentRouteSegment.set("trackingIdNumber",shipmentIdentificationNumber);
    shipmentRouteSegment.put("carrierServiceStatusId","SHRSCS_ACCEPTED");
    shipmentRouteSegment.store();
    List<? extends Element> packageResultsElements=UtilXml.childElementList(shipmentResultsElement,"PackageResults");
    Iterator<GenericValue> shipmentPackageRouteSegIter=shipmentPackageRouteSegs.iterator();
    for (    Element packageResultsElement : packageResultsElements) {
      String trackingNumber=UtilXml.childElementValue(packageResultsElement,"TrackingNumber");
      Element packageServiceOptionsChargesElement=UtilXml.firstChildElement(packageResultsElement,"ServiceOptionsCharges");
      String packageServiceOptionsCurrencyCode=UtilXml.childElementValue(packageServiceOptionsChargesElement,"CurrencyCode");
      String packageServiceOptionsMonetaryValue=UtilXml.childElementValue(packageServiceOptionsChargesElement,"MonetaryValue");
      Element packageLabelImageElement=UtilXml.firstChildElement(packageResultsElement,"LabelImage");
      String packageLabelGraphicImageString=UtilXml.childElementValue(packageLabelImageElement,"GraphicImage");
      String packageLabelInternationalSignatureGraphicImageString=UtilXml.childElementValue(packageLabelImageElement,"InternationalSignatureGraphicImage");
      String packageLabelHTMLImageString=UtilXml.childElementValue(packageLabelImageElement,"HTMLImage");
      if (!shipmentPackageRouteSegIter.hasNext()) {
        errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorMorePackageResultsWereReturned",UtilMisc.toMap("trackingNumber",trackingNumber,"ServiceOptionsCharges",packageServiceOptionsMonetaryValue + packageServiceOptionsCurrencyCode),locale));
        continue;
      }
      GenericValue shipmentPackageRouteSeg=shipmentPackageRouteSegIter.next();
      shipmentPackageRouteSeg.set("trackingCode",trackingNumber);
      shipmentPackageRouteSeg.set("boxNumber","");
      shipmentPackageRouteSeg.set("currencyUomId",packageServiceOptionsCurrencyCode);
      try {
        shipmentPackageRouteSeg.set("packageServiceCost",new BigDecimal(packageServiceOptionsMonetaryValue));
      }
 catch (      NumberFormatException e) {
        String excErrMsg="Error parsing the packageServiceOptionsMonetaryValue [" + packageServiceOptionsMonetaryValue + "] for Package ["+ shipmentPackageRouteSeg.getString("shipmentPackageSeqId")+ "]: "+ e.toString();
        Debug.logError(e,excErrMsg,module);
        errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingServiceOptionsMonetaryValue",UtilMisc.toMap("serviceOptionsMonetaryValue",serviceOptionsMonetaryValue,"errorString",e.toString()),locale));
      }
      byte[] labelImageBytes=null;
      if (packageLabelGraphicImageString != null) {
        labelImageBytes=Base64.base64Decode(packageLabelGraphicImageString.getBytes());
        shipmentPackageRouteSeg.setBytes("labelImage",labelImageBytes);
      }
      byte[] labelInternationalSignatureGraphicImageBytes=null;
      if (packageLabelInternationalSignatureGraphicImageString != null) {
        labelInternationalSignatureGraphicImageBytes=Base64.base64Decode(packageLabelInternationalSignatureGraphicImageString.getBytes());
        shipmentPackageRouteSeg.set("labelIntlSignImage",labelInternationalSignatureGraphicImageBytes);
      }
      String packageLabelHTMLImageStringDecoded=Base64.base64Decode(packageLabelHTMLImageString);
      shipmentPackageRouteSeg.set("labelHtml",packageLabelHTMLImageStringDecoded);
      if (shipmentUpsSaveCertificationInfo) {
        if (labelImageBytes != null) {
          String outFileName=shipmentUpsSaveCertificationPath + "/label" + trackingNumber+ ".gif";
          try {
            FileOutputStream fileOut=new FileOutputStream(outFileName);
            fileOut.write(labelImageBytes);
            fileOut.flush();
            fileOut.close();
          }
 catch (          IOException e) {
            Debug.log(e,"Could not save UPS LabelImage GIF file: [[[" + packageLabelGraphicImageString + "]]] to file: "+ outFileName,module);
          }
        }
        if (labelInternationalSignatureGraphicImageBytes != null) {
          String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentLabelIntlSignImage" + "label"+ trackingNumber+ ".gif";
          try {
            FileOutputStream fileOut=new FileOutputStream(outFileName);
            fileOut.write(labelInternationalSignatureGraphicImageBytes);
            fileOut.flush();
            fileOut.close();
          }
 catch (          IOException e) {
            Debug.log(e,"Could not save UPS IntlSign LabelImage GIF file: [[[" + packageLabelInternationalSignatureGraphicImageString + "]]] to file: "+ outFileName,module);
          }
        }
        if (packageLabelHTMLImageStringDecoded != null) {
          String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentLabelHTMLImage" + shipmentRouteSegment.getString("shipmentId")+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ "_"+ shipmentPackageRouteSeg.getString("shipmentPackageSeqId")+ ".html";
          try {
            FileOutputStream fileOut=new FileOutputStream(outFileName);
            fileOut.write(packageLabelHTMLImageStringDecoded.getBytes());
            fileOut.flush();
            fileOut.close();
          }
 catch (          IOException e) {
            Debug.log(e,"Could not save UPS LabelImage HTML file: [[[" + packageLabelHTMLImageStringDecoded + "]]] to file: "+ outFileName,module);
          }
        }
      }
      shipmentPackageRouteSeg.store();
    }
    if (shipmentPackageRouteSegIter.hasNext()) {
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorMorePackageOnThisShipment",locale));
      while (shipmentPackageRouteSegIter.hasNext()) {
        GenericValue shipmentPackageRouteSeg=shipmentPackageRouteSegIter.next();
        errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorNoPackageResultsWereReturned",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackageRouteSeg.getString("shipmentPackageSeqId")),locale));
      }
    }
    Element controlLogReceiptElement=UtilXml.firstChildElement(shipmentResultsElement,"ControlLogReceipt");
    if (controlLogReceiptElement != null) {
      String fileString=UtilXml.childElementValue(controlLogReceiptElement,"GraphicImage");
      String fileStringDecoded=Base64.base64Decode(fileString);
      if (fileStringDecoded != null) {
        shipmentRouteSegment.set("upsHighValueReport",fileStringDecoded);
        shipmentRouteSegment.store();
        String outFileName=shipmentUpsSaveCertificationPath + "/HighValueReport" + shipmentRouteSegment.getString("shipmentId")+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".html";
        try {
          FileOutputStream fileOut=new FileOutputStream(outFileName);
          fileOut.write(fileStringDecoded.getBytes());
          fileOut.flush();
          fileOut.close();
        }
 catch (        IOException e) {
          Debug.log(e,"Could not save UPS High Value Report data: [[[" + fileStringDecoded + "]]] to file: "+ outFileName,module);
        }
      }
    }
    StringBuilder successString=new StringBuilder(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentAcceptSucceeded",locale));
    if (errorList.size() > 0) {
      successString.append(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentAcceptError",locale));
      Iterator<Object> errorListIter=errorList.iterator();
      while (errorListIter.hasNext()) {
        successString.append(errorListIter.next());
        if (errorListIter.hasNext()) {
          successString.append(", ");
        }
      }
    }
    return ServiceUtil.returnSuccess(successString.toString());
  }
 else {
    errorList.add(0,UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentAcceptFailed",locale));
    return ServiceUtil.returnError(errorList);
  }
}
