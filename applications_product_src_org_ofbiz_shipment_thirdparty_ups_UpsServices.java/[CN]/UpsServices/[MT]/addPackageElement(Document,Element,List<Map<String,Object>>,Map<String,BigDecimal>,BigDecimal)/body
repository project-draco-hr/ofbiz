{
  BigDecimal packageWeight=checkForDefaultPackageWeight(calcPackageWeight(packageMap,shippableItemInfo,BigDecimal.ZERO),minWeight);
  Element packageElement=UtilXml.addChildElement(shipmentElement,"Package",requestDoc);
  Element packagingTypeElement=UtilXml.addChildElement(packageElement,"PackagingType",requestDoc);
  UtilXml.addChildElementValue(packagingTypeElement,"Code","00",requestDoc);
  UtilXml.addChildElementValue(packagingTypeElement,"Description","Unknown PackagingType",requestDoc);
  UtilXml.addChildElementValue(packageElement,"Description","Package Description",requestDoc);
  Element packageWeightElement=UtilXml.addChildElement(packageElement,"PackageWeight",requestDoc);
  UtilXml.addChildElementValue(packageWeightElement,"Weight",packageWeight.toPlainString(),requestDoc);
  if (packageMap.size() == 1) {
    Iterator<String> i=packageMap.keySet().iterator();
    String productId=i.next();
    Map<String,Object> productInfo=getProductItemInfo(shippableItemInfo,productId);
    if (productInfo.get("inShippingBox") != null && ((String)productInfo.get("inShippingBox")).equalsIgnoreCase("Y") && productInfo.get("shippingDepth") != null && productInfo.get("shippingWidth") != null && productInfo.get("shippingHeight") != null) {
      Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",requestDoc);
      UtilXml.addChildElementValue(dimensionsElement,"Length",productInfo.get("shippingDepth").toString(),requestDoc);
      UtilXml.addChildElementValue(dimensionsElement,"Width",productInfo.get("shippingWidth").toString(),requestDoc);
      UtilXml.addChildElementValue(dimensionsElement,"Height",productInfo.get("shippingHeight").toString(),requestDoc);
    }
  }
}
