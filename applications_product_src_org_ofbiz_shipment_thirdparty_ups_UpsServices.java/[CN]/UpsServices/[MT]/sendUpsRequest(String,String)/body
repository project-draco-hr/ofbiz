{
  String conStr=UtilProperties.getPropertyValue("shipment.properties","shipment.ups.connect.url");
  if (conStr == null) {
    throw new UpsConnectException("Incomplete connection URL; check your UPS configuration");
  }
  if (upsService == null) {
    throw new UpsConnectException("UPS service name cannot be null");
  }
  if (xmlString == null) {
    throw new UpsConnectException("XML message cannot be null");
  }
  conStr=conStr.trim();
  if (!conStr.endsWith("/")) {
    conStr=conStr + "/";
  }
  conStr=conStr + upsService;
  String timeOutStr=UtilProperties.getPropertyValue("shipment.properties","shipment.ups.connect.timeout","60");
  int timeout=60;
  try {
    timeout=Integer.parseInt(timeOutStr);
  }
 catch (  NumberFormatException e) {
    Debug.logError(e,"Unable to set timeout to " + timeOutStr + " using default "+ timeout);
  }
  HttpClient http=new HttpClient(conStr);
  http.setTimeout(timeout * 1000);
  http.setAllowUntrusted(true);
  String response=null;
  try {
    response=http.post(xmlString);
  }
 catch (  HttpClientException e) {
    Debug.logError(e,"Problem connecting with UPS server [" + conStr + "]",module);
    throw new UpsConnectException("URL Connection problem",e);
  }
  if (response == null) {
    throw new UpsConnectException("Received a null response");
  }
  if (Debug.verboseOn())   Debug.logVerbose("UPS Response : " + response,module);
  return response;
}
