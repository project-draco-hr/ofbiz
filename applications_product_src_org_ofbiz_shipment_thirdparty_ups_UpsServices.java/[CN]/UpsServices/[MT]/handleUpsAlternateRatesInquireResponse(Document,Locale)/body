{
  Element rateResponseElement=rateResponseDocument.getDocumentElement();
  Element responseElement=UtilXml.firstChildElement(rateResponseElement,"Response");
  String responseStatusCode=UtilXml.childElementValue(responseElement,"ResponseStatusCode");
  List<Object> errorList=FastList.newInstance();
  UpsServices.handleErrors(responseElement,errorList,locale);
  String totalRates=null;
  if ("1".equals(responseStatusCode)) {
    List<? extends Element> rates=UtilXml.childElementList(rateResponseElement,"RatedShipment");
    Map<String,BigDecimal> rateMap=FastMap.newInstance();
    if (UtilValidate.isEmpty(rates)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsNoRateAvailable",locale));
    }
 else {
      for (      Element element : rates) {
        Element service=UtilXml.firstChildElement(element,"Service");
        String serviceCode=UtilXml.childElementValue(service,"Code");
        Element negotiatedRates=UtilXml.firstChildElement(element,"NegotiatedRates");
        if (negotiatedRates != null) {
          Element netSummaryCharges=UtilXml.firstChildElement(negotiatedRates,"NetSummaryCharges");
          Element grandTotal=UtilXml.firstChildElement(netSummaryCharges,"GrandTotal");
          totalRates=UtilXml.childElementValue(grandTotal,"MonetaryValue");
        }
 else {
          Element totalCharges=UtilXml.firstChildElement(element,"TotalCharges");
          totalRates=UtilXml.childElementValue(totalCharges,"MonetaryValue");
        }
        rateMap.put(serviceCode,new BigDecimal(totalRates));
      }
    }
    Debug.logInfo("UPS Rate Map : " + rateMap,module);
    Map<String,Object> resp=ServiceUtil.returnSuccess();
    resp.put("upsRateCodeMap",rateMap);
    return resp;
  }
 else {
    errorList.add(ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorStatusCode",UtilMisc.toMap("responseStatusCode",responseStatusCode),locale)));
    return ServiceUtil.returnFailure(errorList);
  }
}
