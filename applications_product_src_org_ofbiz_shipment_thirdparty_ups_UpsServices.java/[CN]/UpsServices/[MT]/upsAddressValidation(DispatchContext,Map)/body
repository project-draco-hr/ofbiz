{
  String city=(String)context.get("city");
  String stateProvinceGeoId=(String)context.get("stateProvinceGeoId");
  String postalCode=(String)context.get("postalCode");
  if (UtilValidate.isEmpty(city) && UtilValidate.isEmpty(postalCode)) {
    return ServiceUtil.returnError("Address Validation requires either a city or postalCode");
  }
  Document avRequestDoc=UtilXml.makeEmptyXmlDocument("AddressValidationRequest");
  Element avRequestElement=avRequestDoc.getDocumentElement();
  avRequestElement.setAttribute("xml:lang","en-US");
  Element requestElement=UtilXml.addChildElement(avRequestElement,"Request",avRequestDoc);
  Element transactionReferenceElement=UtilXml.addChildElement(requestElement,"TransactionReference",avRequestDoc);
  UtilXml.addChildElementValue(transactionReferenceElement,"CustomerContext","Rating and Service",avRequestDoc);
  UtilXml.addChildElementValue(transactionReferenceElement,"XpciVersion","1.0001",avRequestDoc);
  UtilXml.addChildElementValue(requestElement,"RequestAction","AV",avRequestDoc);
  Element addressElement=UtilXml.addChildElement(avRequestElement,"Address",avRequestDoc);
  if (UtilValidate.isNotEmpty(city)) {
    UtilXml.addChildElementValue(addressElement,"City",city,avRequestDoc);
  }
  if (UtilValidate.isNotEmpty(stateProvinceGeoId)) {
    UtilXml.addChildElementValue(addressElement,"StateProvinceCode",stateProvinceGeoId,avRequestDoc);
  }
  if (UtilValidate.isNotEmpty(postalCode)) {
    UtilXml.addChildElementValue(addressElement,"PostalCode",postalCode,avRequestDoc);
  }
  String avRequestString=null;
  try {
    avRequestString=UtilXml.writeXmlDocument(avRequestDoc);
  }
 catch (  IOException e) {
    String ioeErrMsg="Error writing the AddressValidationRequest XML Document to a String: " + e.toString();
    Debug.logError(e,ioeErrMsg,module);
    return ServiceUtil.returnError(ioeErrMsg);
  }
  Document accessRequestDocument=createAccessRequestDocument();
  String accessRequestString=null;
  try {
    accessRequestString=UtilXml.writeXmlDocument(accessRequestDocument);
  }
 catch (  IOException e) {
    String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
    Debug.logError(e,ioeErrMsg,module);
    return ServiceUtil.returnError(ioeErrMsg);
  }
  StringBuffer xmlString=new StringBuffer();
  xmlString.append(accessRequestString);
  xmlString.append(avRequestString);
  Debug.logInfo(xmlString.toString(),module);
  String avResponseString=null;
  try {
    avResponseString=sendUpsRequest("AV",xmlString.toString());
  }
 catch (  UpsConnectException e) {
    String uceErrMsg="Error sending UPS request: " + e.toString();
    Debug.logError(e,uceErrMsg,module);
    return ServiceUtil.returnError(uceErrMsg);
  }
  Debug.logInfo(avResponseString,module);
  Document avResponseDocument=null;
  try {
    avResponseDocument=UtilXml.readXmlDocument(avResponseString,false);
  }
 catch (  SAXException e2) {
    String excErrMsg="Error parsing the UPS response: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnError(excErrMsg);
  }
catch (  ParserConfigurationException e2) {
    String excErrMsg="Error parsing the UPS response: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnError(excErrMsg);
  }
catch (  IOException e2) {
    String excErrMsg="Error parsing the UPS response: " + e2.toString();
    Debug.logError(e2,excErrMsg,module);
    return ServiceUtil.returnError(excErrMsg);
  }
  return handleUpsAddressValidationResponse(avResponseDocument);
}
