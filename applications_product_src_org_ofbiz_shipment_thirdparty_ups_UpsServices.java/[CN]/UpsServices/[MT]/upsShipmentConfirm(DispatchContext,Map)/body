{
  Map result=new HashMap();
  GenericDelegator delegator=dctx.getDelegator();
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  boolean shipmentUpsSaveCertificationInfo="true".equals(UtilProperties.getPropertyValue("shipment","shipment.ups.save.certification.info"));
  String shipmentUpsSaveCertificationPath=UtilProperties.getPropertyValue("shipment","shipment.ups.save.certification.path");
  File shipmentUpsSaveCertificationFile=null;
  if (shipmentUpsSaveCertificationInfo) {
    shipmentUpsSaveCertificationFile=new File(shipmentUpsSaveCertificationPath);
    if (!shipmentUpsSaveCertificationFile.exists()) {
      shipmentUpsSaveCertificationFile.mkdirs();
    }
  }
  String shipmentConfirmResponseString=null;
  try {
    GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
    if (shipment == null) {
      return ServiceUtil.returnError("Shipment not found with ID " + shipmentId);
    }
    GenericValue shipmentRouteSegment=delegator.findByPrimaryKey("ShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId));
    if (shipmentRouteSegment == null) {
      return ServiceUtil.returnError("ShipmentRouteSegment not found with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    if (!"UPS".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError("ERROR: The Carrier for ShipmentRouteSegment " + shipmentRouteSegmentId + " of Shipment "+ shipmentId+ ", is not UPS.");
    }
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("carrierServiceStatusId")) && !"SHRSCS_NOT_STARTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {
      return ServiceUtil.returnError("ERROR: The Carrier Service Status for ShipmentRouteSegment " + shipmentRouteSegmentId + " of Shipment "+ shipmentId+ ", is ["+ shipmentRouteSegment.getString("carrierServiceStatusId")+ "], but must be not-set or [SHRSCS_NOT_STARTED] to perform the UPS Shipment Confirm operation.");
    }
    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress");
    if (originPostalAddress == null) {
      return ServiceUtil.returnError("OriginPostalAddress not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber");
    if (originTelecomNumber == null) {
      return ServiceUtil.returnError("OriginTelecomNumber not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    String originPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !"001".equals(originTelecomNumber.getString("countryCode"))) {
      originPhoneNumber=originTelecomNumber.getString("countryCode") + originPhoneNumber;
    }
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber,"-","");
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber," ","");
    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo");
    if (originCountryGeo == null) {
      return ServiceUtil.returnError("OriginCountryGeo not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    GenericValue destPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress");
    if (destPostalAddress == null) {
      return ServiceUtil.returnError("DestPostalAddress not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    GenericValue destTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber");
    if (destTelecomNumber == null) {
      String missingErrMsg="DestTelecomNumber not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId;
      Debug.logError(missingErrMsg,module);
    }
    String destPhoneNumber=null;
    if (destTelecomNumber != null) {
      destPhoneNumber=destTelecomNumber.getString("areaCode") + destTelecomNumber.getString("contactNumber");
      if (UtilValidate.isNotEmpty(destTelecomNumber.getString("countryCode")) && !"001".equals(destTelecomNumber.getString("countryCode"))) {
        destPhoneNumber=destTelecomNumber.getString("countryCode") + destPhoneNumber;
      }
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber,"-","");
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber," ","");
    }
    GenericValue destCountryGeo=destPostalAddress.getRelatedOne("CountryGeo");
    if (destCountryGeo == null) {
      return ServiceUtil.returnError("DestCountryGeo not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    Map findCarrierShipmentMethodMap=UtilMisc.toMap("partyId",shipmentRouteSegment.get("carrierPartyId"),"roleTypeId","CARRIER","shipmentMethodTypeId",shipmentRouteSegment.get("shipmentMethodTypeId"));
    GenericValue carrierShipmentMethod=delegator.findByPrimaryKey("CarrierShipmentMethod",findCarrierShipmentMethodMap);
    if (carrierShipmentMethod == null) {
      return ServiceUtil.returnError("CarrierShipmentMethod not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId+ "; partyId is "+ shipmentRouteSegment.get("carrierPartyId")+ " and shipmentMethodTypeId is "+ shipmentRouteSegment.get("shipmentMethodTypeId"));
    }
    List shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"));
    if (shipmentPackageRouteSegs == null || shipmentPackageRouteSegs.size() == 0) {
      return ServiceUtil.returnError("No ShipmentPackageRouteSegs (ie No Packages) found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId);
    }
    List itemIssuances=shipment.getRelated("ItemIssuance");
    Set orderIdSet=new TreeSet();
    Iterator itemIssuanceIter=itemIssuances.iterator();
    while (itemIssuanceIter.hasNext()) {
      GenericValue itemIssuance=(GenericValue)itemIssuanceIter.next();
      orderIdSet.add(itemIssuance.get("orderId"));
    }
    String ordersDescription="";
    if (orderIdSet.size() > 1) {
      StringBuffer odBuf=new StringBuffer("Orders ");
      Iterator orderIdIter=orderIdSet.iterator();
      while (orderIdIter.hasNext()) {
        String orderId=(String)orderIdIter.next();
        odBuf.append(orderId);
        if (orderIdIter.hasNext()) {
          odBuf.append(", ");
        }
      }
      ordersDescription=odBuf.toString();
    }
 else     if (orderIdSet.size() > 0) {
      ordersDescription="Order " + (String)orderIdSet.iterator().next();
    }
    Document shipmentConfirmRequestDoc=UtilXml.makeEmptyXmlDocument("ShipmentConfirmRequest");
    Element shipmentConfirmRequestElement=shipmentConfirmRequestDoc.getDocumentElement();
    shipmentConfirmRequestElement.setAttribute("xml:lang","en-US");
    Element requestElement=UtilXml.addChildElement(shipmentConfirmRequestElement,"Request",shipmentConfirmRequestDoc);
    Element transactionReferenceElement=UtilXml.addChildElement(requestElement,"TransactionReference",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"CustomerContext","Ship Confirm / nonvalidate",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"XpciVersion","1.0001",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestAction","ShipConfirm",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestOption","nonvalidate",shipmentConfirmRequestDoc);
    Element labelSpecificationElement=UtilXml.addChildElement(shipmentConfirmRequestElement,"LabelSpecification",shipmentConfirmRequestDoc);
    Element labelPrintMethodElement=UtilXml.addChildElement(labelSpecificationElement,"LabelPrintMethod",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(labelPrintMethodElement,"Code","GIF",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(labelSpecificationElement,"HTTPUserAgent","Mozilla/5.0",shipmentConfirmRequestDoc);
    Element labelImageFormatElement=UtilXml.addChildElement(labelSpecificationElement,"LabelImageFormat",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(labelImageFormatElement,"Code","GIF",shipmentConfirmRequestDoc);
    Element shipmentElement=UtilXml.addChildElement(shipmentConfirmRequestElement,"Shipment",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipmentElement,"Description","Goods for Shipment " + shipment.get("shipmentId") + " from "+ ordersDescription,shipmentConfirmRequestDoc);
    Element shipperElement=UtilXml.addChildElement(shipmentElement,"Shipper",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"Name",originPostalAddress.getString("toName"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"AttentionName",originPostalAddress.getString("attnName"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"PhoneNumber",originPhoneNumber,shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"ShipperNumber",UtilProperties.getPropertyValue("shipment","shipment.ups.shipper.number"),shipmentConfirmRequestDoc);
    Element shipperAddressElement=UtilXml.addChildElement(shipperElement,"Address",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"AddressLine1",originPostalAddress.getString("address1"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipperAddressElement,"AddressLine2",originPostalAddress.getString("address2"),shipmentConfirmRequestDoc);
    }
    UtilXml.addChildElementValue(shipperAddressElement,"City",originPostalAddress.getString("city"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"StateProvinceCode",originPostalAddress.getString("stateProvinceGeoId"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"PostalCode",originPostalAddress.getString("postalCode"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"CountryCode",originCountryGeo.getString("geoCode"),shipmentConfirmRequestDoc);
    Element shipToElement=UtilXml.addChildElement(shipmentElement,"ShipTo",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToElement,"CompanyName",destPostalAddress.getString("toName"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToElement,"AttentionName",destPostalAddress.getString("attnName"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(destPhoneNumber)) {
      UtilXml.addChildElementValue(shipToElement,"PhoneNumber",destPhoneNumber,shipmentConfirmRequestDoc);
    }
    Element shipToAddressElement=UtilXml.addChildElement(shipToElement,"Address",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"AddressLine1",destPostalAddress.getString("address1"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(destPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipToAddressElement,"AddressLine2",destPostalAddress.getString("address2"),shipmentConfirmRequestDoc);
    }
    UtilXml.addChildElementValue(shipToAddressElement,"City",destPostalAddress.getString("city"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"StateProvinceCode",destPostalAddress.getString("stateProvinceGeoId"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"PostalCode",destPostalAddress.getString("postalCode"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"CountryCode",destCountryGeo.getString("geoCode"),shipmentConfirmRequestDoc);
    Element shipFromElement=UtilXml.addChildElement(shipmentElement,"ShipFrom",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"CompanyName",originPostalAddress.getString("toName"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"AttentionName",originPostalAddress.getString("attnName"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"PhoneNumber",originPhoneNumber,shipmentConfirmRequestDoc);
    Element shipFromAddressElement=UtilXml.addChildElement(shipFromElement,"Address",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"AddressLine1",originPostalAddress.getString("address1"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipFromAddressElement,"AddressLine2",originPostalAddress.getString("address2"),shipmentConfirmRequestDoc);
    }
    UtilXml.addChildElementValue(shipFromAddressElement,"City",originPostalAddress.getString("city"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"StateProvinceCode",originPostalAddress.getString("stateProvinceGeoId"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"PostalCode",originPostalAddress.getString("postalCode"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"CountryCode",originCountryGeo.getString("geoCode"),shipmentConfirmRequestDoc);
    Element paymentInformationElement=UtilXml.addChildElement(shipmentElement,"PaymentInformation",shipmentConfirmRequestDoc);
    Element prepaidElement=UtilXml.addChildElement(paymentInformationElement,"Prepaid",shipmentConfirmRequestDoc);
    Element billShipperElement=UtilXml.addChildElement(prepaidElement,"BillShipper",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(billShipperElement,"AccountNumber",UtilProperties.getPropertyValue("shipment","shipment.ups.bill.shipper.account.number"),shipmentConfirmRequestDoc);
    Element serviceElement=UtilXml.addChildElement(shipmentElement,"Service",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(serviceElement,"Code",carrierShipmentMethod.getString("carrierServiceCode"),shipmentConfirmRequestDoc);
    Iterator shipmentPackageRouteSegIter=shipmentPackageRouteSegs.iterator();
    while (shipmentPackageRouteSegIter.hasNext()) {
      GenericValue shipmentPackageRouteSeg=(GenericValue)shipmentPackageRouteSegIter.next();
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage");
      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType");
      List carrierShipmentBoxTypes=shipmentPackage.getRelated("CarrierShipmentBoxType",UtilMisc.toMap("partyId","UPS"),null);
      GenericValue carrierShipmentBoxType=null;
      if (carrierShipmentBoxTypes.size() > 0) {
        carrierShipmentBoxType=(GenericValue)carrierShipmentBoxTypes.get(0);
      }
      Element packageElement=UtilXml.addChildElement(shipmentElement,"Package",shipmentConfirmRequestDoc);
      Element packagingTypeElement=UtilXml.addChildElement(packageElement,"PackagingType",shipmentConfirmRequestDoc);
      if (carrierShipmentBoxType != null && carrierShipmentBoxType.get("packagingTypeCode") != null) {
        UtilXml.addChildElementValue(packagingTypeElement,"Code",carrierShipmentBoxType.getString("packagingTypeCode"),shipmentConfirmRequestDoc);
      }
 else {
        UtilXml.addChildElementValue(packagingTypeElement,"Code","02",shipmentConfirmRequestDoc);
      }
      if (shipmentBoxType != null) {
        Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",shipmentConfirmRequestDoc);
        Element unitOfMeasurementElement=UtilXml.addChildElement(dimensionsElement,"UnitOfMeasurement",shipmentConfirmRequestDoc);
        GenericValue dimensionUom=shipmentBoxType.getRelatedOne("DimensionUom");
        if (dimensionUom != null) {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code",dimensionUom.getString("abbreviation"),shipmentConfirmRequestDoc);
        }
 else {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code","IN",shipmentConfirmRequestDoc);
        }
        UtilXml.addChildElementValue(dimensionsElement,"Length",shipmentBoxType.get("boxLength").toString(),shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Width",shipmentBoxType.get("boxWidth").toString(),shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Height",shipmentBoxType.get("boxHeight").toString(),shipmentConfirmRequestDoc);
      }
      Element packageWeightElement=UtilXml.addChildElement(packageElement,"PackageWeight",shipmentConfirmRequestDoc);
      Element packageWeightUnitOfMeasurementElement=UtilXml.addChildElement(packageElement,"UnitOfMeasurement",shipmentConfirmRequestDoc);
      String weightUomUps=(String)unitsOfbizToUps.get(shipmentPackage.get("weightUomId"));
      if (weightUomUps != null) {
        UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code",weightUomUps,shipmentConfirmRequestDoc);
      }
 else {
        UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code","LBS",shipmentConfirmRequestDoc);
      }
      if (shipmentPackage.getString("weight") == null) {
        return ServiceUtil.returnError("Weight value not found for ShipmentRouteSegment with shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId+ ", and shipmentPackageSeqId "+ shipmentPackage.getString("shipmentPackageSeqId"));
      }
      UtilXml.addChildElementValue(packageWeightElement,"Weight",shipmentPackage.getString("weight"),shipmentConfirmRequestDoc);
      Element referenceNumberElement=UtilXml.addChildElement(packageElement,"ReferenceNumber",shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(referenceNumberElement,"Code","MK",shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(referenceNumberElement,"Value",shipmentPackage.getString("shipmentPackageSeqId"),shipmentConfirmRequestDoc);
      if (carrierShipmentBoxType != null && carrierShipmentBoxType.get("oversizeCode") != null) {
        UtilXml.addChildElementValue(packageElement,"OversizePackage",carrierShipmentBoxType.getString("oversizeCode"),shipmentConfirmRequestDoc);
      }
    }
    String shipmentConfirmRequestString=null;
    try {
      shipmentConfirmRequestString=UtilXml.writeXmlDocument(shipmentConfirmRequestDoc);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the ShipmentConfirmRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(ioeErrMsg);
    }
    Document accessRequestDocument=createAccessRequestDocument();
    String accessRequestString=null;
    try {
      accessRequestString=UtilXml.writeXmlDocument(accessRequestDocument);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(ioeErrMsg);
    }
    StringBuffer xmlString=new StringBuffer();
    xmlString.append(accessRequestString);
    xmlString.append(shipmentConfirmRequestString);
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentConfirmRequest" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(xmlString.toString().getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.log(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    try {
      shipmentConfirmResponseString=sendUpsRequest("ShipConfirm",xmlString.toString());
    }
 catch (    UpsConnectException e) {
      String uceErrMsg="Error sending UPS request for UPS Service ShipConfirm: " + e.toString();
      Debug.logError(e,uceErrMsg,module);
      return ServiceUtil.returnError(uceErrMsg);
    }
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentConfirmResponse" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(shipmentConfirmResponseString.getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.log(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    Document shipmentConfirmResponseDocument=null;
    try {
      shipmentConfirmResponseDocument=UtilXml.readXmlDocument(shipmentConfirmResponseString,false);
    }
 catch (    SAXException e2) {
      String excErrMsg="Error parsing the ShipmentConfirmResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(excErrMsg);
    }
catch (    ParserConfigurationException e2) {
      String excErrMsg="Error parsing the ShipmentConfirmResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(excErrMsg);
    }
catch (    IOException e2) {
      String excErrMsg="Error parsing the ShipmentConfirmResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(excErrMsg);
    }
    return handleUpsShipmentConfirmResponse(shipmentConfirmResponseDocument,shipmentRouteSegment);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    if (shipmentConfirmResponseString != null) {
      Debug.logError("Got XML ShipmentConfirmRespose: " + shipmentConfirmResponseString,module);
      return ServiceUtil.returnError(UtilMisc.toList("Error reading or writing Shipment data for UPS Shipment Confirm: " + e.toString(),"A ShipmentConfirmRespose was received: " + shipmentConfirmResponseString));
    }
 else {
      return ServiceUtil.returnError("Error reading or writing Shipment data for UPS Shipment Confirm: " + e.toString());
    }
  }
}
