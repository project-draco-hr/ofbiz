{
  Delegator delegator=dctx.getDelegator();
  String upsRateInquireMode=(String)context.get("upsRateInquireMode");
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  Locale locale=(Locale)context.get("locale");
  String rateResponseString=null;
  String productStoreId=(String)context.get("productStoreId");
  List<Map<String,Object>> shippingRates=FastList.newInstance();
  GenericValue shipmentRouteSegment=null;
  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId);
  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");
  String resource=(String)shipmentGatewayConfig.get("configProps");
  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsGatewayNotAvailable",locale));
  }
  try {
    if (shipmentRouteSegmentId != null) {
      shipmentRouteSegment=delegator.findOne("ShipmentRouteSegment",false,UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId));
    }
 else {
      List<GenericValue> shipmentRouteSegments=delegator.findList("ShipmentRouteSegment",EntityCondition.makeCondition("shipmentId",EntityOperator.EQUALS,shipmentId),null,null,null,false);
      shipmentRouteSegment=EntityUtil.getFirst(shipmentRouteSegments);
    }
    if (shipmentRouteSegment == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentRouteSegmentNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    shipmentRouteSegmentId=shipmentRouteSegment.getString("shipmentRouteSegmentId");
    if (!"UPS".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
    }
    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress");
    if (originPostalAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentOriginPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber");
    if (originTelecomNumber == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentOriginTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String originPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !"001".equals(originTelecomNumber.getString("countryCode"))) {
      originPhoneNumber=originTelecomNumber.getString("countryCode") + originPhoneNumber;
    }
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber,"-","");
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber," ","");
    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo");
    if (originCountryGeo == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentOriginCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress");
    if (destPostalAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentDestPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber");
    if (destTelecomNumber == null) {
      String missingErrMsg="DestTelecomNumber not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId;
      Debug.logError(missingErrMsg,module);
    }
    String destPhoneNumber=null;
    if (destTelecomNumber != null) {
      destPhoneNumber=destTelecomNumber.getString("areaCode") + destTelecomNumber.getString("contactNumber");
      if (UtilValidate.isNotEmpty(destTelecomNumber.getString("countryCode")) && !"001".equals(destTelecomNumber.getString("countryCode"))) {
        destPhoneNumber=destTelecomNumber.getString("countryCode") + destPhoneNumber;
      }
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber,"-","");
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber," ","");
    }
    GenericValue destCountryGeo=destPostalAddress.getRelatedOne("CountryGeo");
    if (destCountryGeo == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentDestCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String pickupType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"shipperPickupType",resource,"shipment.ups.shipper.pickup.type","01");
    String customerClassification=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"customerClassification",resource,"shipment.ups.customerclassification","01");
    upsRateInquireMode="Shop";
    Document rateRequestDoc=UtilXml.makeEmptyXmlDocument("RatingServiceSelectionRequest");
    Element rateRequestElement=rateRequestDoc.getDocumentElement();
    rateRequestElement.setAttribute("xml:lang","en-US");
    Element requestElement=UtilXml.addChildElement(rateRequestElement,"Request",rateRequestDoc);
    Element transactionReferenceElement=UtilXml.addChildElement(requestElement,"TransactionReference",rateRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"CustomerContext","Rating and Service",rateRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"XpciVersion","1.0001",rateRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestAction","Rate",rateRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestOption",upsRateInquireMode,rateRequestDoc);
    Element pickupElement=UtilXml.addChildElement(rateRequestElement,"PickupType",rateRequestDoc);
    UtilXml.addChildElementValue(pickupElement,"Code",pickupType,rateRequestDoc);
    Element customerClassificationElement=UtilXml.addChildElement(rateRequestElement,"CustomerClassification",rateRequestDoc);
    UtilXml.addChildElementValue(customerClassificationElement,"Code",customerClassification,rateRequestDoc);
    Element shipmentElement=UtilXml.addChildElement(rateRequestElement,"Shipment",rateRequestDoc);
    Element shipperElement=UtilXml.addChildElement(shipmentElement,"Shipper",rateRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"Name",UtilValidate.isNotEmpty(originPostalAddress.getString("toName")) ? originPostalAddress.getString("toName") : "",rateRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"AttentionName",UtilValidate.isNotEmpty(originPostalAddress.getString("attnName")) ? originPostalAddress.getString("attnName") : "",rateRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"PhoneNumber",originPhoneNumber,rateRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"ShipperNumber",UtilProperties.getPropertyValue("shipment","shipment.ups.shipper.number"),rateRequestDoc);
    Element shipperAddressElement=UtilXml.addChildElement(shipperElement,"Address",rateRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"AddressLine1",originPostalAddress.getString("address1"),rateRequestDoc);
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipperAddressElement,"AddressLine2",originPostalAddress.getString("address2"),rateRequestDoc);
    }
    UtilXml.addChildElementValue(shipperAddressElement,"City",originPostalAddress.getString("city"),rateRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"StateProvinceCode",originPostalAddress.getString("stateProvinceGeoId"),rateRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"PostalCode",originPostalAddress.getString("postalCode"),rateRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"CountryCode",originCountryGeo.getString("geoCode"),rateRequestDoc);
    Element shipToElement=UtilXml.addChildElement(shipmentElement,"ShipTo",rateRequestDoc);
    UtilXml.addChildElementValue(shipToElement,"CompanyName",UtilValidate.isNotEmpty(destPostalAddress.getString("toName")) ? destPostalAddress.getString("toName") : "",rateRequestDoc);
    UtilXml.addChildElementValue(shipToElement,"AttentionName",UtilValidate.isNotEmpty(destPostalAddress.getString("attnName")) ? destPostalAddress.getString("attnName") : "",rateRequestDoc);
    if (UtilValidate.isNotEmpty(destPhoneNumber)) {
      UtilXml.addChildElementValue(shipToElement,"PhoneNumber",destPhoneNumber,rateRequestDoc);
    }
    Element shipToAddressElement=UtilXml.addChildElement(shipToElement,"Address",rateRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"AddressLine1",destPostalAddress.getString("address1"),rateRequestDoc);
    if (UtilValidate.isNotEmpty(destPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipToAddressElement,"AddressLine2",destPostalAddress.getString("address2"),rateRequestDoc);
    }
    UtilXml.addChildElementValue(shipToAddressElement,"City",destPostalAddress.getString("city"),rateRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"StateProvinceCode",destPostalAddress.getString("stateProvinceGeoId"),rateRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"PostalCode",destPostalAddress.getString("postalCode"),rateRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"CountryCode",destCountryGeo.getString("geoCode"),rateRequestDoc);
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("homeDeliveryType"))) {
      UtilXml.addChildElement(shipToAddressElement,"ResidentialAddress",rateRequestDoc);
    }
    Element shipFromElement=UtilXml.addChildElement(shipmentElement,"ShipFrom",rateRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"CompanyName",UtilValidate.isNotEmpty(originPostalAddress.getString("toName")) ? originPostalAddress.getString("toName") : "",rateRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"AttentionName",UtilValidate.isNotEmpty(originPostalAddress.getString("attnName")) ? originPostalAddress.getString("attnName") : "",rateRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"PhoneNumber",originPhoneNumber,rateRequestDoc);
    Element shipFromAddressElement=UtilXml.addChildElement(shipFromElement,"Address",rateRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"AddressLine1",originPostalAddress.getString("address1"),rateRequestDoc);
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipFromAddressElement,"AddressLine2",originPostalAddress.getString("address2"),rateRequestDoc);
    }
    UtilXml.addChildElementValue(shipFromAddressElement,"City",originPostalAddress.getString("city"),rateRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"StateProvinceCode",originPostalAddress.getString("stateProvinceGeoId"),rateRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"PostalCode",originPostalAddress.getString("postalCode"),rateRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"CountryCode",originCountryGeo.getString("geoCode"),rateRequestDoc);
    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"));
    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage");
      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType");
      List<GenericValue> carrierShipmentBoxTypes=shipmentPackage.getRelated("CarrierShipmentBoxType",UtilMisc.toMap("partyId","UPS"),null);
      GenericValue carrierShipmentBoxType=null;
      if (carrierShipmentBoxTypes.size() > 0) {
        carrierShipmentBoxType=carrierShipmentBoxTypes.get(0);
      }
      Element packageElement=UtilXml.addChildElement(shipmentElement,"Package",rateRequestDoc);
      Element packagingTypeElement=UtilXml.addChildElement(packageElement,"PackagingType",rateRequestDoc);
      if (carrierShipmentBoxType != null && carrierShipmentBoxType.get("packagingTypeCode") != null) {
        UtilXml.addChildElementValue(packagingTypeElement,"Code",carrierShipmentBoxType.getString("packagingTypeCode"),rateRequestDoc);
      }
 else {
        UtilXml.addChildElementValue(packagingTypeElement,"Code","02",rateRequestDoc);
      }
      if (shipmentBoxType != null) {
        Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",rateRequestDoc);
        Element unitOfMeasurementElement=UtilXml.addChildElement(dimensionsElement,"UnitOfMeasurement",rateRequestDoc);
        GenericValue dimensionUom=shipmentBoxType.getRelatedOne("DimensionUom");
        if (dimensionUom != null) {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code",dimensionUom.getString("abbreviation").toUpperCase(),rateRequestDoc);
        }
 else {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code","IN",rateRequestDoc);
        }
        BigDecimal boxLength=shipmentBoxType.getBigDecimal("boxLength");
        BigDecimal boxWidth=shipmentBoxType.getBigDecimal("boxWidth");
        BigDecimal boxHeight=shipmentBoxType.getBigDecimal("boxHeight");
        UtilXml.addChildElementValue(dimensionsElement,"Length",UtilValidate.isNotEmpty(boxLength) ? "" + boxLength.intValue() : "",rateRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Width",UtilValidate.isNotEmpty(boxWidth) ? "" + boxWidth.intValue() : "",rateRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Height",UtilValidate.isNotEmpty(boxHeight) ? "" + boxHeight.intValue() : "",rateRequestDoc);
      }
 else       if (UtilValidate.isNotEmpty(shipmentPackage.get("boxLength")) && UtilValidate.isNotEmpty(shipmentPackage.get("boxWidth")) && UtilValidate.isNotEmpty(shipmentPackage.get("boxHeight"))) {
        Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",rateRequestDoc);
        Element unitOfMeasurementElement=UtilXml.addChildElement(dimensionsElement,"UnitOfMeasurement",rateRequestDoc);
        UtilXml.addChildElementValue(unitOfMeasurementElement,"Code","IN",rateRequestDoc);
        BigDecimal length=(BigDecimal)shipmentPackage.get("boxLength");
        BigDecimal width=(BigDecimal)shipmentPackage.get("boxWidth");
        BigDecimal height=(BigDecimal)shipmentPackage.get("boxHeight");
        UtilXml.addChildElementValue(dimensionsElement,"Length",length.setScale(decimals,rounding).toString(),rateRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Width",width.setScale(decimals,rounding).toString(),rateRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Height",height.setScale(decimals,rounding).toString(),rateRequestDoc);
      }
      Element packageWeightElement=UtilXml.addChildElement(packageElement,"PackageWeight",rateRequestDoc);
      Element packageWeightUnitOfMeasurementElement=UtilXml.addChildElement(packageElement,"UnitOfMeasurement",rateRequestDoc);
      String weightUomUps=unitsOfbizToUps.get(shipmentPackage.get("weightUomId"));
      if (weightUomUps != null) {
        UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code",weightUomUps,rateRequestDoc);
      }
 else {
        UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code","LBS",rateRequestDoc);
      }
      if (shipmentPackage.getString("weight") == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsWeightValueNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId")),locale));
      }
      BigDecimal boxWeight=shipmentPackage.getBigDecimal("weight");
      UtilXml.addChildElementValue(packageWeightElement,"Weight",UtilValidate.isNotEmpty(boxWeight) ? "" + boxWeight.intValue() : "",rateRequestDoc);
    }
    UtilXml.addChildElement(shipmentElement,"ShipmentServiceOptions",rateRequestDoc);
    String rateRequestString=null;
    try {
      rateRequestString=UtilXml.writeXmlDocument(rateRequestDoc);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the RatingServiceSelectionRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorRatingServiceSelectionRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    Document accessRequestDocument=createAccessRequestDocument(delegator,shipmentGatewayConfigId,resource);
    String accessRequestString=null;
    try {
      accessRequestString=UtilXml.writeXmlDocument(accessRequestDocument);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorAccessRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    StringBuilder xmlString=new StringBuilder();
    xmlString.append(accessRequestString);
    xmlString.append(rateRequestString);
    if (Debug.verboseOn())     Debug.logVerbose(xmlString.toString(),module);
    try {
      rateResponseString=sendUpsRequest("Rate",xmlString.toString(),shipmentGatewayConfigId,resource,delegator,locale);
    }
 catch (    UpsConnectException e) {
      String uceErrMsg="Error sending UPS request for UPS Service Rate: " + e.toString();
      Debug.logError(e,uceErrMsg,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorSendingRate",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    Debug.logVerbose(rateResponseString,module);
    Document rateResponseDocument=null;
    try {
      rateResponseDocument=UtilXml.readXmlDocument(rateResponseString,false);
    }
 catch (    SAXException e2) {
      String excErrMsg="Error parsing the RatingServiceSelectionResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingRatingServiceSelectionResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    ParserConfigurationException e2) {
      String excErrMsg="Error parsing the RatingServiceSelectionResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingRatingServiceSelectionResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    IOException e2) {
      String excErrMsg="Error parsing the RatingServiceSelectionResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnFailure(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingRatingServiceSelectionResponse",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
    Map<String,Object> upsResponse=handleUpsAlternateRatesInquireResponse(rateResponseDocument,locale);
    Map<String,BigDecimal> upsRateCodeMap=UtilGenerics.cast(upsResponse.get("upsRateCodeMap"));
    GenericValue carrierShipmentMethod=null;
    try {
      List<GenericValue> productStoreShipmentMethods=delegator.findByAnd("ProductStoreShipmentMethView",UtilMisc.toMap("productStoreId",productStoreId));
      for (      GenericValue productStoreShipmentMethod : productStoreShipmentMethods) {
        if ("UPS".equals(productStoreShipmentMethod.get("partyId"))) {
          Map<String,Object> thisUpsRateCodeMap=FastMap.newInstance();
          carrierShipmentMethod=delegator.findOne("CarrierShipmentMethod",false,UtilMisc.toMap("shipmentMethodTypeId",productStoreShipmentMethod.getString("shipmentMethodTypeId"),"partyId",productStoreShipmentMethod.getString("partyId"),"roleTypeId",productStoreShipmentMethod.getString("roleTypeId")));
          String serviceCode=carrierShipmentMethod.getString("carrierServiceCode");
          for (          String thisServiceCode : upsRateCodeMap.keySet()) {
            if (serviceCode.equals(thisServiceCode)) {
              BigDecimal newRate=upsRateCodeMap.get(serviceCode);
              thisUpsRateCodeMap.put(serviceCode,newRate);
              shippingRates.add(thisUpsRateCodeMap);
            }
          }
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    return UtilMisc.toMap("shippingRates",shippingRates,ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    if (rateResponseString != null) {
      Debug.logError("Got XML ShipmentAlternateRatesInquiryResponse: " + rateResponseString,module);
      return ServiceUtil.returnError(UtilMisc.toList(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorDataShipmentAccept",UtilMisc.toMap("errorString",e.toString()),locale),UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentAlternateRatesInquiryResponse",UtilMisc.toMap("rateResponseString",rateResponseString),locale)));
    }
 else {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorDataShipmentAlternateRate",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
}
