{
  Element shipmentConfirmResponseElement=shipmentConfirmResponseDocument.getDocumentElement();
  Element responseElement=UtilXml.firstChildElement(shipmentConfirmResponseElement,"Response");
  Element responseTransactionReferenceElement=UtilXml.firstChildElement(responseElement,"TransactionReference");
  String responseTransactionReferenceCustomerContext=UtilXml.childElementValue(responseTransactionReferenceElement,"CustomerContext");
  String responseTransactionReferenceXpciVersion=UtilXml.childElementValue(responseTransactionReferenceElement,"XpciVersion");
  String responseStatusCode=UtilXml.childElementValue(responseElement,"ResponseStatusCode");
  String responseStatusDescription=UtilXml.childElementValue(responseElement,"ResponseStatusDescription");
  List errorList=new LinkedList();
  UpsServices.handleErrors(responseElement,errorList);
  if ("1".equals(responseStatusCode)) {
    Element shipmentChargesElement=UtilXml.firstChildElement(shipmentConfirmResponseElement,"ShipmentCharges");
    Element transportationChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"TransportationCharges");
    String transportationCurrencyCode=UtilXml.childElementValue(transportationChargesElement,"CurrencyCode");
    String transportationMonetaryValue=UtilXml.childElementValue(transportationChargesElement,"MonetaryValue");
    Element serviceOptionsChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"ServiceOptionsCharges");
    String serviceOptionsCurrencyCode=UtilXml.childElementValue(serviceOptionsChargesElement,"CurrencyCode");
    String serviceOptionsMonetaryValue=UtilXml.childElementValue(serviceOptionsChargesElement,"MonetaryValue");
    Element totalChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"TotalCharges");
    String totalCurrencyCode=UtilXml.childElementValue(totalChargesElement,"CurrencyCode");
    String totalMonetaryValue=UtilXml.childElementValue(totalChargesElement,"MonetaryValue");
    if (UtilValidate.isNotEmpty(totalCurrencyCode)) {
      if (UtilValidate.isEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
        shipmentRouteSegment.set("currencyUomId",totalCurrencyCode);
      }
 else       if (!totalCurrencyCode.equals(shipmentRouteSegment.getString("currencyUomId"))) {
        errorList.add("The Currency Unit of Measure returned [" + totalCurrencyCode + "] is not the same as the original ["+ shipmentRouteSegment.getString("currencyUomId")+ "], setting to the new one.");
        shipmentRouteSegment.set("currencyUomId",totalCurrencyCode);
      }
    }
    try {
      shipmentRouteSegment.set("actualTransportCost",Double.valueOf(transportationMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the transportationMonetaryValue [" + transportationMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(excErrMsg);
    }
    try {
      shipmentRouteSegment.set("actualServiceCost",Double.valueOf(serviceOptionsMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the serviceOptionsMonetaryValue [" + serviceOptionsMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(excErrMsg);
    }
    try {
      shipmentRouteSegment.set("actualCost",Double.valueOf(totalMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the totalMonetaryValue [" + totalMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(excErrMsg);
    }
    Element billingWeightElement=UtilXml.firstChildElement(shipmentConfirmResponseElement,"BillingWeight");
    Element billingWeightUnitOfMeasurementElement=UtilXml.firstChildElement(billingWeightElement,"UnitOfMeasurement");
    String billingWeightUnitOfMeasurement=UtilXml.childElementValue(billingWeightUnitOfMeasurementElement,"Code");
    String billingWeight=UtilXml.childElementValue(billingWeightElement,"Weight");
    try {
      shipmentRouteSegment.set("billingWeight",Double.valueOf(billingWeight));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the billingWeight [" + billingWeight + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(excErrMsg);
    }
    shipmentRouteSegment.set("billingWeightUomId",unitsUpsToOfbiz.get(billingWeightUnitOfMeasurement));
    String shipmentIdentificationNumber=UtilXml.childElementValue(shipmentConfirmResponseElement,"ShipmentIdentificationNumber");
    String shipmentDigest=UtilXml.childElementValue(shipmentConfirmResponseElement,"ShipmentDigest");
    shipmentRouteSegment.set("trackingIdNumber",shipmentIdentificationNumber);
    shipmentRouteSegment.set("trackingDigest",shipmentDigest);
    shipmentRouteSegment.put("carrierServiceStatusId","SHRSCS_CONFIRMED");
    shipmentRouteSegment.store();
    StringBuffer successString=new StringBuffer("The UPS ShipmentConfirm succeeded");
    if (errorList.size() > 0) {
      successString.append(", but the following occurred: ");
      Iterator errorListIter=errorList.iterator();
      while (errorListIter.hasNext()) {
        String errorMsg=(String)errorListIter.next();
        successString.append(errorMsg);
        if (errorListIter.hasNext()) {
          successString.append(", ");
        }
      }
    }
    return ServiceUtil.returnSuccess(successString.toString());
  }
 else {
    errorList.add(0,"The UPS ShipmentConfirm failed");
    return ServiceUtil.returnError(errorList);
  }
}
