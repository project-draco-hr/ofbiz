{
  GenericValue shipmentBoxType=null;
  List<GenericValue> carrierShipmentBoxTypes=null;
  try {
    if (UtilValidate.isNotEmpty(packageInfoMap.get("shipmentBoxType"))) {
      shipmentBoxType=(GenericValue)packageInfoMap.get("shipmentBoxType");
      carrierShipmentBoxTypes=shipmentBoxType.getRelated("CarrierShipmentBoxType",UtilMisc.toMap("partyId","UPS"),null);
    }
    Element packageElement=UtilXml.addChildElement(shipmentElement,"Package",requestDoc);
    Element packagingTypeElement=UtilXml.addChildElement(packageElement,"PackagingType",requestDoc);
    if (UtilValidate.isNotEmpty(carrierShipmentBoxTypes)) {
      GenericValue carrierShipmentBoxType=carrierShipmentBoxTypes.get(0);
      if (UtilValidate.isNotEmpty(carrierShipmentBoxType.getString("packagingTypeCode"))) {
        UtilXml.addChildElementValue(packagingTypeElement,"Code",carrierShipmentBoxType.getString("packagingTypeCode"),requestDoc);
      }
 else {
        UtilXml.addChildElementValue(packagingTypeElement,"Code","02",requestDoc);
      }
    }
 else {
      UtilXml.addChildElementValue(packagingTypeElement,"Code","00",requestDoc);
    }
    UtilXml.addChildElementValue(packagingTypeElement,"Description","Unknown PackagingType",requestDoc);
    if (UtilValidate.isNotEmpty(shipmentBoxType) && UtilValidate.isNotEmpty(shipmentBoxType.getString("description"))) {
      UtilXml.addChildElementValue(packageElement,"Description",shipmentBoxType.getString("description"),requestDoc);
    }
 else {
      UtilXml.addChildElementValue(packageElement,"Description","Package Description",requestDoc);
    }
    Element packageWeightElement=UtilXml.addChildElement(packageElement,"PackageWeight",requestDoc);
    Element packageWeightUnitOfMeasurementElement=UtilXml.addChildElement(packageWeightElement,"UnitOfMeasurement",requestDoc);
    if (UtilValidate.isNotEmpty(shipmentBoxType) && UtilValidate.isNotEmpty(shipmentBoxType.getString("weightUomId"))) {
      String weightUomUps=unitsOfbizToUps.get(shipmentBoxType.getString("weightUomId"));
      UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code",weightUomUps,requestDoc);
    }
 else {
      UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code","LBS",requestDoc);
    }
    BigDecimal packageWeight=BigDecimal.ONE;
    if (UtilValidate.isNotEmpty(packageInfoMap.get("packageWeight"))) {
      packageWeight=(BigDecimal)packageInfoMap.get("packageWeight");
    }
 else {
      String totalWeightStr=UtilProperties.getPropertyValue("shipment","shipment.ups.min.estimate.weight","1");
      try {
        packageWeight=new BigDecimal(totalWeightStr);
      }
 catch (      NumberFormatException e) {
        Debug.logError(e,module);
      }
    }
    UtilXml.addChildElementValue(packageWeightElement,"Weight",packageWeight.toString(),requestDoc);
    if (UtilValidate.isNotEmpty(packageInfoMap.get("packageLength")) && UtilValidate.isNotEmpty(packageInfoMap.get("packageWidth")) && UtilValidate.isNotEmpty(packageInfoMap.get("packageHeight"))) {
      Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",requestDoc);
      Element unitOfMeasurementElement=UtilXml.addChildElement(dimensionsElement,"UnitOfMeasurement",requestDoc);
      UtilXml.addChildElementValue(unitOfMeasurementElement,"Code","IN",requestDoc);
      BigDecimal length=(BigDecimal)packageInfoMap.get("packageLength");
      BigDecimal width=(BigDecimal)packageInfoMap.get("packageWidth");
      BigDecimal height=(BigDecimal)packageInfoMap.get("packageHeight");
      UtilXml.addChildElementValue(dimensionsElement,"Length",length.setScale(decimals,rounding).toString(),requestDoc);
      UtilXml.addChildElementValue(dimensionsElement,"Width",width.setScale(decimals,rounding).toString(),requestDoc);
      UtilXml.addChildElementValue(dimensionsElement,"Height",height.setScale(decimals,rounding).toString(),requestDoc);
    }
 else     if (UtilValidate.isNotEmpty(shipmentBoxType) && UtilValidate.isNotEmpty(shipmentBoxType.getBigDecimal("boxLength")) && UtilValidate.isNotEmpty(shipmentBoxType.getBigDecimal("boxWidth"))&& UtilValidate.isNotEmpty(shipmentBoxType.getBigDecimal("boxHeight"))) {
      Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",requestDoc);
      Element unitOfMeasurementElement=UtilXml.addChildElement(dimensionsElement,"UnitOfMeasurement",requestDoc);
      GenericValue dimensionUom=shipmentBoxType.getRelatedOne("DimensionUom");
      if (dimensionUom != null) {
        UtilXml.addChildElementValue(unitOfMeasurementElement,"Code",dimensionUom.getString("abbreviation").toUpperCase(),requestDoc);
      }
 else {
        UtilXml.addChildElementValue(unitOfMeasurementElement,"Code","IN",requestDoc);
      }
      UtilXml.addChildElementValue(dimensionsElement,"Length",shipmentBoxType.getBigDecimal("boxLength").setScale(decimals,rounding).toString(),requestDoc);
      UtilXml.addChildElementValue(dimensionsElement,"Width",shipmentBoxType.getBigDecimal("boxWidth").setScale(decimals,rounding).toString(),requestDoc);
      UtilXml.addChildElementValue(dimensionsElement,"Height",shipmentBoxType.getBigDecimal("boxHeight").setScale(decimals,rounding).toString(),requestDoc);
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
