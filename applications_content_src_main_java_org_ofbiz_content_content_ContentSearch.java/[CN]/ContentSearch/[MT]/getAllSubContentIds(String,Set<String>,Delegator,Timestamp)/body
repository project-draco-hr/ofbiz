{
  if (nowTimestamp == null) {
    nowTimestamp=UtilDateTime.nowTimestamp();
  }
  contentIdSet.add(contentId);
  try {
    List<GenericValue> contentAssocList=EntityQuery.use(delegator).from("ContentAssoc").where("contentIdFrom",contentId).cache().queryList();
    for (    GenericValue contentAssoc : contentAssocList) {
      String subContentId=contentAssoc.getString("contentIdTo");
      if (contentIdSet.contains(subContentId)) {
        continue;
      }
      if (EntityUtil.isValueActive(contentAssoc,nowTimestamp)) {
        getAllSubContentIds(subContentId,contentIdSet,delegator,nowTimestamp);
      }
    }
    List<GenericValue> childContentList=EntityQuery.use(delegator).select("contentId","contentParentId").from("Content").where("contentParentId",contentId).cache().queryList();
    for (    GenericValue childContent : childContentList) {
      String subContentId=childContent.getString("contentId");
      if (contentIdSet.contains(subContentId)) {
        continue;
      }
      getAllSubContentIds(subContentId,contentIdSet,delegator,nowTimestamp);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error finding sub-categories for content search",module);
  }
}
