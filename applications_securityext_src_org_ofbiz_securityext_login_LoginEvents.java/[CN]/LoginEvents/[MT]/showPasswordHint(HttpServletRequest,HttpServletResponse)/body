{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String userLoginId=request.getParameter("USERNAME");
  String errMsg=null;
  if ((userLoginId != null) && ("true".equals(UtilProperties.getPropertyValue("security.properties","username.lowercase")))) {
    userLoginId=userLoginId.toLowerCase();
  }
  if (!UtilValidate.isNotEmpty(userLoginId)) {
    errMsg=UtilProperties.getMessage(resource,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  GenericValue supposedUserLogin=null;
  try {
    supposedUserLogin=delegator.findOne("UserLogin",false,"userLoginId",userLoginId);
  }
 catch (  GenericEntityException gee) {
    Debug.logWarning(gee,"",module);
  }
  if (supposedUserLogin == null) {
    errMsg=UtilProperties.getMessage(resource,"loginevents.username_not_found_reenter",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  String passwordHint=supposedUserLogin.getString("passwordHint");
  if (!UtilValidate.isNotEmpty(passwordHint)) {
    errMsg=UtilProperties.getMessage(resource,"loginevents.no_password_hint_specified_try_password_emailed",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  Map<String,String> messageMap=UtilMisc.toMap("passwordHint",passwordHint);
  errMsg=UtilProperties.getMessage(resource,"loginevents.password_hint_is",messageMap,UtilHttp.getLocale(request));
  request.setAttribute("_EVENT_MESSAGE_",errMsg);
  return "success";
}
