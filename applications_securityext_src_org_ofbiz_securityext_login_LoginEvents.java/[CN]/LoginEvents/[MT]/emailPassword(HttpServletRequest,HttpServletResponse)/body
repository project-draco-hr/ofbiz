{
  String defaultScreenLocation="component://securityext/widget/EmailSecurityScreens.xml#PasswordEmail";
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  String productStoreId=ProductStoreWorker.getProductStoreId(request);
  String errMsg=null;
  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security","password.encrypt",delegator));
  String userLoginId=request.getParameter("USERNAME");
  if ((userLoginId != null) && ("true".equals(EntityUtilProperties.getPropertyValue("security","username.lowercase",delegator)))) {
    userLoginId=userLoginId.toLowerCase();
  }
  if (!UtilValidate.isNotEmpty(userLoginId)) {
    errMsg=UtilProperties.getMessage(resource,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  GenericValue supposedUserLogin=null;
  String passwordToSend=null;
  String autoPassword=null;
  try {
    supposedUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();
    if (supposedUserLogin == null) {
      errMsg=UtilProperties.getMessage(resource,"loginevents.username_not_found_reenter",UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    if (useEncryption) {
      passwordToSend=RandomStringUtils.randomAlphanumeric(Integer.parseInt(EntityUtilProperties.getPropertyValue("security","password.length.min","5",delegator)));
      if ("true".equals(EntityUtilProperties.getPropertyValue("security","password.lowercase",delegator))) {
        passwordToSend=passwordToSend.toLowerCase();
      }
      autoPassword=RandomStringUtils.randomAlphanumeric(Integer.parseInt(EntityUtilProperties.getPropertyValue("security","password.length.min","5",delegator)));
      EntityCrypto entityCrypto=new EntityCrypto(delegator,null);
      try {
        passwordToSend=entityCrypto.encrypt(keyValue,EncryptMethod.TRUE,(Object)autoPassword);
      }
 catch (      GeneralException e) {
        Debug.logWarning(e,"Problem in encryption",module);
      }
      supposedUserLogin.set("currentPassword",HashCrypt.cryptUTF8(LoginServices.getHashType(),null,autoPassword));
      supposedUserLogin.set("passwordHint","Auto-Generated Password");
      if ("true".equals(EntityUtilProperties.getPropertyValue("security","password.email_password.require_password_change",delegator))) {
        supposedUserLogin.set("requirePasswordChange","Y");
      }
    }
 else {
      passwordToSend=supposedUserLogin.getString("currentPassword");
    }
    passwordToSend=URLEncoder.encode(passwordToSend,"UTF-8");
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.toString());
    errMsg=UtilProperties.getMessage(resource,"loginevents.error_accessing_password",messageMap,UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  StringBuilder emails=new StringBuilder();
  GenericValue party=null;
  try {
    party=supposedUserLogin.getRelatedOne("Party",false);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"",module);
    party=null;
  }
  if (party != null) {
    Iterator<GenericValue> emailIter=UtilMisc.toIterator(ContactHelper.getContactMechByPurpose(party,"PRIMARY_EMAIL",false));
    while (emailIter != null && emailIter.hasNext()) {
      GenericValue email=emailIter.next();
      emails.append(emails.length() > 0 ? "," : "").append(email.getString("infoString"));
    }
  }
  if (!UtilValidate.isNotEmpty(emails.toString())) {
    errMsg=UtilProperties.getMessage(resource,"loginevents.no_primary_email_address_set_contact_customer_service",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  GenericValue productStoreEmail=null;
  try {
    productStoreEmail=EntityQuery.use(delegator).from("ProductStoreEmailSetting").where("productStoreId",productStoreId,"emailType","PRDS_PWD_RETRIEVE").queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting ProductStoreEmailSetting",module);
  }
  String bodyScreenLocation=null;
  if (productStoreEmail != null) {
    bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
  }
  if (UtilValidate.isEmpty(bodyScreenLocation)) {
    bodyScreenLocation=defaultScreenLocation;
  }
  Map<String,Object> bodyParameters=new HashMap<String,Object>();
  bodyParameters.put("useEncryption",Boolean.valueOf(useEncryption));
  bodyParameters.put("password",UtilFormatOut.checkNull(passwordToSend));
  bodyParameters.put("locale",UtilHttp.getLocale(request));
  bodyParameters.put("userLogin",supposedUserLogin);
  bodyParameters.put("productStoreId",productStoreId);
  Map<String,Object> serviceContext=new HashMap<String,Object>();
  serviceContext.put("bodyScreenUri",bodyScreenLocation);
  serviceContext.put("bodyParameters",bodyParameters);
  if (productStoreEmail != null) {
    serviceContext.put("subject",productStoreEmail.getString("subject"));
    serviceContext.put("sendFrom",productStoreEmail.get("fromAddress"));
    serviceContext.put("sendCc",productStoreEmail.get("ccAddress"));
    serviceContext.put("sendBcc",productStoreEmail.get("bccAddress"));
    serviceContext.put("contentType",productStoreEmail.get("contentType"));
  }
 else {
    GenericValue emailTemplateSetting=null;
    try {
      emailTemplateSetting=EntityQuery.use(delegator).from("EmailTemplateSetting").where("emailTemplateSettingId","EMAIL_PASSWORD").cache().queryOne();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    if (emailTemplateSetting != null) {
      String subject=emailTemplateSetting.getString("subject");
      subject=FlexibleStringExpander.expandString(subject,UtilMisc.toMap("userLoginId",userLoginId));
      serviceContext.put("subject",subject);
      serviceContext.put("sendFrom",emailTemplateSetting.get("fromAddress"));
    }
 else {
      serviceContext.put("subject",UtilProperties.getMessage(resource,"loginservices.password_reminder_subject",UtilMisc.toMap("userLoginId",userLoginId),UtilHttp.getLocale(request)));
      serviceContext.put("sendFrom",EntityUtilProperties.getPropertyValue("general","defaultFromEmailAddress",delegator));
    }
  }
  serviceContext.put("sendTo",emails.toString());
  serviceContext.put("partyId",party.getString("partyId"));
  try {
    Map<String,Object> result=dispatcher.runSync("sendMailHiddenInLogFromScreen",serviceContext);
    if (ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE))) {
      Map<String,Object> messageMap=UtilMisc.toMap("errorMessage",result.get(ModelService.ERROR_MESSAGE));
      errMsg=UtilProperties.getMessage(resource,"loginevents.error_unable_email_password_contact_customer_service_errorwas",messageMap,UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
 catch (  GenericServiceException e) {
    Debug.logWarning(e,"",module);
    errMsg=UtilProperties.getMessage(resource,"loginevents.error_unable_email_password_contact_customer_service",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  if (useEncryption) {
    try {
      supposedUserLogin.store();
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,"",module);
      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.toString());
      errMsg=UtilProperties.getMessage(resource,"loginevents.error_saving_new_password_email_not_correct_password",messageMap,UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
  if (useEncryption) {
    errMsg=UtilProperties.getMessage(resource,"loginevents.new_password_createdandsent_check_email",UtilHttp.getLocale(request));
    request.setAttribute("_EVENT_MESSAGE_",errMsg);
  }
 else {
    errMsg=UtilProperties.getMessage(resource,"loginevents.new_password_sent_check_email",UtilHttp.getLocale(request));
    request.setAttribute("_EVENT_MESSAGE_",errMsg);
  }
  return "success";
}
