{
  final Delegator delegator=(Delegator)request.getAttribute("delegator");
  final String contentIdTo=request.getParameter("contentIdTo");
  final String contentIdFrom=request.getParameter("contentIdFrom");
  final String contentIdFromNew=request.getParameter("contentIdFromNew");
  final String contentAssocTypeId=request.getParameter("contentAssocTypeId");
  final Timestamp fromDate=Timestamp.valueOf(request.getParameter("fromDate"));
  final Timestamp now=UtilDateTime.nowTimestamp();
  GenericValue assoc=TransactionUtil.inTransaction(new Callable<GenericValue>(){
    @Override public GenericValue call() throws Exception {
      GenericValue oldAssoc=delegator.findOne("ContentAssoc",UtilMisc.toMap("contentIdTo",contentIdTo,"contentId",contentIdFrom,"contentAssocTypeId",contentAssocTypeId,"fromDate",fromDate),false);
      if (oldAssoc == null) {
        throw new GenericEntityNotFoundException("Could not find ContentAssoc by primary key [contentIdTo: $contentIdTo, contentId: $contentIdFrom, contentAssocTypeId: $contentAssocTypeId, fromDate: $fromDate]");
      }
      GenericValue newAssoc=(GenericValue)oldAssoc.clone();
      oldAssoc.set("thruDate",now);
      oldAssoc.store();
      newAssoc.set("contentId",contentIdFromNew);
      newAssoc.set("fromDate",now);
      newAssoc.set("thruDate",null);
      delegator.clearCacheLine(delegator.create(newAssoc));
      return newAssoc;
    }
  }
,String.format("move content [%s] from [%s] to [%s]",contentIdTo,contentIdFrom,contentIdFromNew),0,true).call();
  IOUtils.write(JSON.from(getTreeNode(assoc)).toString(),response.getOutputStream());
  return "success";
}
