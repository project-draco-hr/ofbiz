{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  final Delegator delegator=(Delegator)request.getAttribute("delegator");
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  Map<String,Object> ctx=UtilHttp.getParameterMap(request);
  String acctgTransId;
  String acctgTransEntrySeqId;
  String glAccountId=null;
  String organizationPartyId=null;
  BigDecimal reconciledBalance=BigDecimal.ZERO;
  boolean isSelected;
  String debitCreditFlag;
  int rowCount=UtilHttp.getMultiFormRowCount(ctx);
  for (int i=0; i < rowCount; i++) {
    String suffix=UtilHttp.getMultiRowDelimiter() + i;
    isSelected=(ctx.containsKey("_rowSubmit" + suffix) && "Y".equalsIgnoreCase((String)ctx.get("_rowSubmit" + suffix)));
    if (!isSelected) {
      continue;
    }
    acctgTransId=(String)ctx.get("acctgTransId" + suffix);
    acctgTransEntrySeqId=(String)ctx.get("acctgTransEntrySeqId" + suffix);
    organizationPartyId=(String)ctx.get("organizationPartyId" + suffix);
    glAccountId=(String)ctx.get("glAccountId" + suffix);
    try {
      GenericValue acctgTransEntry=EntityQuery.use(delegator).from("AcctgTransEntry").where("acctgTransId",acctgTransId,"acctgTransEntrySeqId",acctgTransEntrySeqId).queryOne();
      if (UtilValidate.isNotEmpty(acctgTransEntry)) {
        debitCreditFlag=acctgTransEntry.getString("debitCreditFlag");
        if ("D".equalsIgnoreCase(debitCreditFlag)) {
          reconciledBalance=reconciledBalance.add(acctgTransEntry.getBigDecimal("amount"));
        }
 else {
          reconciledBalance=reconciledBalance.subtract(acctgTransEntry.getBigDecimal("amount"));
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return "error";
    }
  }
  Map<String,Object> fieldMap=UtilMisc.toMap("glReconciliationName","Reconciliation at date " + UtilDateTime.nowTimestamp(),"glAccountId",glAccountId,"organizationPartyId",organizationPartyId,"reconciledDate",UtilDateTime.nowTimestamp(),"reconciledBalance",reconciledBalance,"userLogin",userLogin);
  Map<String,Object> glReconResult=null;
  try {
    glReconResult=dispatcher.runSync("createGlReconciliation",fieldMap);
    if (ServiceUtil.isError(glReconResult)) {
      return "error";
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return "error";
  }
  String glReconciliationId=(String)glReconResult.get("glReconciliationId");
  String reconciledAmount;
  for (int i=0; i < rowCount; i++) {
    String suffix=UtilHttp.getMultiRowDelimiter() + i;
    isSelected=(ctx.containsKey("_rowSubmit" + suffix) && "Y".equalsIgnoreCase((String)ctx.get("_rowSubmit" + suffix)));
    if (!isSelected) {
      continue;
    }
    acctgTransId=(String)ctx.get("acctgTransId" + suffix);
    acctgTransEntrySeqId=(String)ctx.get("acctgTransEntrySeqId" + suffix);
    try {
      GenericValue acctgTransEntry=EntityQuery.use(delegator).from("AcctgTransEntry").where("acctgTransId",acctgTransId,"acctgTransEntrySeqId",acctgTransEntrySeqId).queryOne();
      if (UtilValidate.isNotEmpty(acctgTransEntry)) {
        reconciledAmount=acctgTransEntry.getString("amount");
        acctgTransId=acctgTransEntry.getString("acctgTransId");
        acctgTransEntrySeqId=acctgTransEntry.getString("acctgTransEntrySeqId");
        Map<String,Object> glReconEntryMap=UtilMisc.toMap("glReconciliationId",glReconciliationId,"acctgTransId",acctgTransId,"acctgTransEntrySeqId",acctgTransEntrySeqId,"reconciledAmount",reconciledAmount,"userLogin",userLogin);
        Map<String,Object> glReconEntryResult=null;
        try {
          glReconEntryResult=dispatcher.runSync("createGlReconciliationEntry",glReconEntryMap);
          if (ServiceUtil.isError(glReconEntryResult)) {
            return "error";
          }
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,module);
          return "error";
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return "error";
    }
  }
  ctx.put("glReconciliationId",glReconciliationId);
  request.setAttribute("glReconciliationId",glReconciliationId);
  return "success";
}
