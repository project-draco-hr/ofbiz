{
  Locale locale=UtilHttp.getLocale(request);
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  String orderId=(String)request.getAttribute("orderId");
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot get the order header for order: " + orderId,module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingOrderHeader",locale));
    return "error";
  }
  String orderTotal=orderHeader.getBigDecimal("grandTotal").toPlainString();
  GenericValue productStore=ProductStoreWorker.getProductStore(request);
  if (productStore == null) {
    Debug.logError("ProductStore is null",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));
    return "error";
  }
  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_PAYPAL",null,true);
  String configString=null;
  String paymentGatewayConfigId=null;
  if (paymentConfig != null) {
    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");
    configString=paymentConfig.getString("paymentPropertiesPath");
  }
  if (configString == null) {
    configString="payment.properties";
  }
  String company=UtilFormatOut.checkEmpty(productStore.getString("companyName"),"");
  String itemName=UtilProperties.getMessage(resource,"AccountingOrderNr",locale) + orderId + " "+ (company != null ? UtilProperties.getMessage(commonResource,"CommonFrom",locale) + " " + company : "");
  String itemNumber="0";
  String redirectUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"redirectUrl",configString,"payment.paypal.redirect");
  String notifyUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"notifyUrl",configString,"payment.paypal.notify");
  String returnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"returnUrl",configString,"payment.paypal.return");
  String cancelReturnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"cancelReturnUrl",configString,"payment.paypal.cancelReturn");
  String imageUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"imageUrl",configString,"payment.paypal.image");
  String payPalAccount=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"businessEmail",configString,"payment.paypal.business");
  if (UtilValidate.isEmpty(redirectUrl) || UtilValidate.isEmpty(notifyUrl) || UtilValidate.isEmpty(returnUrl)|| UtilValidate.isEmpty(cancelReturnUrl)|| UtilValidate.isEmpty(imageUrl)|| UtilValidate.isEmpty(payPalAccount)) {
    Debug.logError("Payment properties is not configured properly, some notify URL from PayPal is not correctly defined!",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));
    return "error";
  }
  Map<String,Object> parameters=new LinkedHashMap<String,Object>();
  parameters.put("cmd","_xclick");
  parameters.put("business",payPalAccount);
  parameters.put("item_name",itemName);
  parameters.put("item_number",itemNumber);
  parameters.put("invoice",orderId);
  parameters.put("custom",userLogin.getString("userLoginId"));
  parameters.put("amount",orderTotal);
  parameters.put("return",returnUrl);
  parameters.put("cancel_return",cancelReturnUrl);
  parameters.put("notify_url",notifyUrl);
  parameters.put("image_url",imageUrl);
  parameters.put("no_note","1");
  parameters.put("no_shipping","1");
  String encodedParameters=UtilHttp.urlEncodeArgs(parameters,false);
  String redirectString=redirectUrl + "?" + encodedParameters;
  request.getSession().setAttribute("PAYPAL_ORDER",orderId);
  try {
    response.sendRedirect(redirectString);
  }
 catch (  IOException e) {
    Debug.logError(e,"Problems redirecting to PayPal",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsConnectingWithPayPal",locale));
    return "error";
  }
  return "success";
}
