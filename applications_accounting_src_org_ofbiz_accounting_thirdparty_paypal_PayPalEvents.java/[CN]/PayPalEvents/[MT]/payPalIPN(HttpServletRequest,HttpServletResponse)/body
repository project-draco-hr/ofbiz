{
  Locale locale=UtilHttp.getLocale(request);
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericValue productStore=ProductStoreWorker.getProductStore(request);
  if (productStore == null) {
    Debug.logError("ProductStore is null",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource,"payPalEvents.problemsGettingMerchantConfiguration",locale));
    return "error";
  }
  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_PAYPAL",null,true);
  String configString=null;
  if (paymentConfig != null) {
    configString=paymentConfig.getString("paymentPropertiesPath");
  }
  if (configString == null) {
    configString="payment.properties";
  }
  String confirmUrl=UtilProperties.getPropertyValue(configString,"payment.paypal.confirm");
  String redirectUrl=UtilProperties.getPropertyValue(configString,"payment.paypal.redirect");
  if (confirmUrl == null || redirectUrl == null) {
    Debug.logError("Payment properties is not configured properly, no confirm URL defined!",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource,"payPalEvents.problemsGettingMerchantConfiguration",locale));
    return "error";
  }
  Map<String,Object> parametersMap=UtilHttp.getParameterMap(request);
  parametersMap.put("cmd","_notify-validate");
  String confirmResp=null;
  try {
    String str=UtilHttp.urlEncodeArgs(parametersMap);
    URL u=new URL(redirectUrl);
    URLConnection uc=u.openConnection();
    uc.setDoOutput(true);
    uc.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
    PrintWriter pw=new PrintWriter(uc.getOutputStream());
    pw.println(str);
    pw.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(uc.getInputStream()));
    confirmResp=in.readLine();
    in.close();
    Debug.logError("PayPal Verification Response: " + confirmResp,module);
  }
 catch (  IOException e) {
    Debug.logError(e,"Problems sending verification message",module);
  }
  if (confirmResp.trim().equals("VERIFIED")) {
    Debug.logInfo("Got verification from PayPal, processing..",module);
  }
 else {
    Debug.logError("###### PayPal did not verify this request, need investigation!",module);
    Set<String> keySet=parametersMap.keySet();
    Iterator<String> i=keySet.iterator();
    while (i.hasNext()) {
      String name=(String)i.next();
      String value=request.getParameter(name);
      Debug.logError("### Param: " + name + " => "+ value,module);
    }
  }
  GenericValue userLogin=null;
  String userLoginId=request.getParameter("custom");
  if (userLoginId == null)   userLoginId="admin";
  try {
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot get UserLogin for: " + userLoginId + "; cannot continue",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource,"payPalEvents.problemsGettingAuthenticationUser",locale));
    return "error";
  }
  String orderId=request.getParameter("invoice");
  GenericValue orderHeader=null;
  if (UtilValidate.isNotEmpty(orderId)) {
    try {
      orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Cannot get the order header for order: " + orderId,module);
      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource,"payPalEvents.problemsGettingOrderHeader",locale));
      return "error";
    }
  }
 else {
    Debug.logError("PayPal did not callback with a valid orderId!",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource,"payPalEvents.noValidOrderIdReturned",locale));
    return "error";
  }
  if (orderHeader == null) {
    Debug.logError("Cannot get the order header for order: " + orderId,module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource,"payPalEvents.problemsGettingOrderHeader",locale));
    return "error";
  }
  String paymentStatus=request.getParameter("payment_status");
  boolean okay=true;
  boolean beganTransaction=false;
  try {
    beganTransaction=TransactionUtil.begin();
    if (paymentStatus.equals("Completed")) {
      okay=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);
    }
 else     if (paymentStatus.equals("Failed") || paymentStatus.equals("Denied")) {
      okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);
    }
    if (okay) {
      okay=setPaymentPreferences(delegator,dispatcher,userLogin,orderId,request);
    }
  }
 catch (  Exception e) {
    String errMsg="Error handling PayPal notification";
    Debug.logError(e,errMsg,module);
    try {
      TransactionUtil.rollback(beganTransaction,errMsg,e);
    }
 catch (    GenericTransactionException gte2) {
      Debug.logError(gte2,"Unable to rollback transaction",module);
    }
  }
 finally {
    if (!okay) {
      try {
        TransactionUtil.rollback(beganTransaction,"Failure in processing PayPal callback",null);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to rollback transaction",module);
      }
    }
 else {
      try {
        TransactionUtil.commit(beganTransaction);
      }
 catch (      GenericTransactionException gte) {
        Debug.logError(gte,"Unable to commit transaction",module);
      }
    }
  }
  if (okay) {
    OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);
    Map<String,String> emailContext=UtilMisc.toMap("orderId",orderId);
    try {
      dispatcher.runSync("sendOrderConfirmation",emailContext);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Problems sending email confirmation",module);
    }
  }
  return "success";
}
