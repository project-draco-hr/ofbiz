{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Timestamp now=UtilDateTime.nowTimestamp();
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_UPDATE");
  if (result.size() > 0)   return result;
  List toBeStored=new LinkedList();
  boolean isModified=false;
  GenericValue paymentMethod=null;
  GenericValue newPm=null;
  GenericValue giftCard=null;
  GenericValue newGc=null;
  String paymentMethodId=(String)context.get("paymentMethodId");
  try {
    giftCard=delegator.findByPrimaryKey("GiftCard",UtilMisc.toMap("paymentMethodId",paymentMethodId));
    paymentMethod=delegator.findByPrimaryKey("PaymentMethod",UtilMisc.toMap("paymentMethodId",paymentMethodId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError("ERROR: Could not get GiftCard to update (read error): " + e.getMessage());
  }
  if (giftCard == null || paymentMethod == null) {
    return ServiceUtil.returnError("ERROR: Could not find GiftCard to update with id " + paymentMethodId);
  }
  if (!paymentMethod.getString("partyId").equals(partyId) && !security.hasEntityPermission("PAY_INFO","_UPDATE",userLogin)) {
    return ServiceUtil.returnError("Party Id [" + partyId + "] is not the owner of payment method ["+ paymentMethodId+ "] and does not have permission to change it.");
  }
  String cardNumber=StringUtil.removeSpaces((String)context.get("cardNumber"));
  if (cardNumber.startsWith("*")) {
    String origCardNumber=giftCard.getString("cardNumber");
    String origMaskedNumber="";
    int cardLength=origCardNumber.length() - 4;
    if (cardLength > 0) {
      for (int i=0; i < cardLength; i++) {
        origMaskedNumber=origMaskedNumber + "*";
      }
      origMaskedNumber=origMaskedNumber + origCardNumber.substring(cardLength);
    }
 else {
      origMaskedNumber=origCardNumber;
    }
    if (cardNumber.equals(origMaskedNumber)) {
      cardNumber=origCardNumber;
    }
  }
  context.put("cardNumber",cardNumber);
  newPm=GenericValue.create(paymentMethod);
  toBeStored.add(newPm);
  newGc=GenericValue.create(giftCard);
  toBeStored.add(newGc);
  String newPmId=null;
  try {
    newPmId=delegator.getNextSeqId("PaymentMethod");
  }
 catch (  IllegalArgumentException e) {
    return ServiceUtil.returnError("ERROR: Could not update GiftCard info (id generation failure)");
  }
  newPm.set("partyId",partyId);
  newPm.set("fromDate",context.get("fromDate"),false);
  newPm.set("thruDate",context.get("thruDate"));
  newGc.set("cardNumber",context.get("cardNumber"));
  newGc.set("pinNumber",context.get("pinNumber"));
  newGc.set("expireDate",context.get("expireDate"));
  if (!newGc.equals(giftCard) || !newPm.equals(paymentMethod)) {
    newPm.set("paymentMethodId",newPmId);
    newGc.set("paymentMethodId",newPmId);
    newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));
    isModified=true;
  }
  if (isModified) {
    paymentMethod.set("thruDate",now);
    toBeStored.add(paymentMethod);
    try {
      delegator.storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      return ServiceUtil.returnError("ERROR: Could not update EFT Account (write failure): " + e.getMessage());
    }
  }
 else {
    result.put("paymentMethodId",paymentMethodId);
    result.put("oldPaymentMethodId",paymentMethodId);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put(ModelService.SUCCESS_MESSAGE,"No changes made, not updating EFT Account");
    return result;
  }
  result.put("paymentMethodId",newGc.getString("paymentMethodId"));
  result.put("oldPaymentMethodId",paymentMethodId);
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
