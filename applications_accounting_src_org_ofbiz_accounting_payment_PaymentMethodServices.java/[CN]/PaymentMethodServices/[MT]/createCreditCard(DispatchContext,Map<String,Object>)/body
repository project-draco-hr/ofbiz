{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Timestamp now=UtilDateTime.nowTimestamp();
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_CREATE");
  if (result.size() > 0)   return result;
  List<String> messages=new LinkedList<String>();
  context.put("cardNumber",StringUtil.removeSpaces((String)context.get("cardNumber")));
  if (!UtilValidate.isCardMatch((String)context.get("cardType"),(String)context.get("cardNumber")))   messages.add((String)context.get("cardNumber") + UtilValidate.isCreditCardPrefixMsg + (String)context.get("cardType")+ UtilValidate.isCreditCardSuffixMsg+ " (It appears to be a "+ UtilValidate.getCardType((String)context.get("cardNumber"))+ " credit card number)");
  if (!UtilValidate.isDateAfterToday((String)context.get("expireDate")))   messages.add("The expiration date " + (String)context.get("expireDate") + " is before today.");
  if (messages.size() > 0) {
    return ServiceUtil.returnError(messages);
  }
  List<GenericValue> toBeStored=new LinkedList<GenericValue>();
  GenericValue newPm=delegator.makeValue("PaymentMethod");
  toBeStored.add(newPm);
  GenericValue newCc=delegator.makeValue("CreditCard");
  toBeStored.add(newCc);
  String newPmId=(String)context.get("paymentMethodId");
  if (UtilValidate.isEmpty(newPmId)) {
    try {
      newPmId=delegator.getNextSeqId("PaymentMethod");
    }
 catch (    IllegalArgumentException e) {
      return ServiceUtil.returnError("ERROR: Could not create credit card (id generation failure)");
    }
  }
  newPm.set("partyId",partyId);
  newPm.set("description",context.get("description"));
  newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));
  newPm.set("thruDate",context.get("thruDate"));
  newCc.set("companyNameOnCard",context.get("companyNameOnCard"));
  newCc.set("titleOnCard",context.get("titleOnCard"));
  newCc.set("firstNameOnCard",context.get("firstNameOnCard"));
  newCc.set("middleNameOnCard",context.get("middleNameOnCard"));
  newCc.set("lastNameOnCard",context.get("lastNameOnCard"));
  newCc.set("suffixOnCard",context.get("suffixOnCard"));
  newCc.set("cardType",context.get("cardType"));
  newCc.set("cardNumber",context.get("cardNumber"));
  newCc.set("expireDate",context.get("expireDate"));
  newPm.set("paymentMethodId",newPmId);
  newPm.set("paymentMethodTypeId","CREDIT_CARD");
  newCc.set("paymentMethodId",newPmId);
  GenericValue newPartyContactMechPurpose=null;
  String contactMechId=(String)context.get("contactMechId");
  if (contactMechId != null && contactMechId.length() > 0 && !contactMechId.equals("_NEW_")) {
    newCc.set("contactMechId",context.get("contactMechId"));
    String contactMechPurposeTypeId="BILLING_LOCATION";
    GenericValue tempVal=null;
    try {
      List<GenericValue> allPCMPs=EntityUtil.filterByDate(delegator.findByAnd("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId),null),true);
      tempVal=EntityUtil.getFirst(allPCMPs);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      tempVal=null;
    }
    if (tempVal == null) {
      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));
    }
  }
  if (newPartyContactMechPurpose != null)   toBeStored.add(newPartyContactMechPurpose);
  try {
    delegator.storeAll(toBeStored);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError("ERROR: Could not create credit card (write failure): " + e.getMessage());
  }
  result.put("paymentMethodId",newCc.getString("paymentMethodId"));
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
