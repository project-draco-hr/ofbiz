{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Timestamp now=UtilDateTime.nowTimestamp();
  String paymentMethodId=(String)context.get("paymentMethodId");
  GenericValue paymentMethod=null;
  try {
    paymentMethod=delegator.findByPrimaryKey("PaymentMethod",UtilMisc.toMap("paymentMethodId",paymentMethodId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.toString(),module);
    return ServiceUtil.returnError("ERROR: Could not find Payment Method to delete (read failure: " + e.getMessage() + ")");
  }
  if (paymentMethod == null) {
    return ServiceUtil.returnError("ERROR: Could not find Payment Method to delete (read failure)");
  }
  if (paymentMethod.get("partyId") == null || !paymentMethod.getString("partyId").equals(userLogin.getString("partyId"))) {
    if (!security.hasEntityPermission("PAY_INFO","_DELETE",userLogin)) {
      return ServiceUtil.returnError("You do not have permission to delete Payment Method for this partyId");
    }
  }
  paymentMethod.set("thruDate",now);
  try {
    paymentMethod.store();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.toString(),module);
    return ServiceUtil.returnError("ERROR: Could not delete Payment Method (write failure): " + e.getMessage());
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
