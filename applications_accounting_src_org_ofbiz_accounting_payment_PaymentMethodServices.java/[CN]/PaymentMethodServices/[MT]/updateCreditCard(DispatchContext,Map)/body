{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Timestamp now=UtilDateTime.nowTimestamp();
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_UPDATE");
  if (result.size() > 0)   return result;
  List toBeStored=new LinkedList();
  boolean isModified=false;
  GenericValue paymentMethod=null;
  GenericValue newPm=null;
  GenericValue creditCard=null;
  GenericValue newCc=null;
  String paymentMethodId=(String)context.get("paymentMethodId");
  try {
    creditCard=delegator.findByPrimaryKey("CreditCard",UtilMisc.toMap("paymentMethodId",paymentMethodId));
    paymentMethod=delegator.findByPrimaryKey("PaymentMethod",UtilMisc.toMap("paymentMethodId",paymentMethodId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError("ERROR: Could not get credit card to update (read error): " + e.getMessage());
  }
  if (creditCard == null || paymentMethod == null) {
    return ServiceUtil.returnError("ERROR: Could not find credit card to update with payment method id " + paymentMethodId);
  }
  if (!paymentMethod.getString("partyId").equals(partyId) && !security.hasEntityPermission("PAY_INFO","_UPDATE",userLogin)) {
    return ServiceUtil.returnError("Party Id [" + partyId + "] is not the owner of payment method ["+ paymentMethodId+ "] and does not have permission to change it.");
  }
  List messages=new LinkedList();
  String updatedCardNumber=StringUtil.removeSpaces((String)context.get("cardNumber"));
  if (updatedCardNumber.startsWith("*")) {
    String origCardNumber=creditCard.getString("cardNumber");
    Debug.log("CCInfo: " + creditCard.toString(),module);
    String origMaskedNumber="";
    int cardLength=origCardNumber.length() - 4;
    for (int i=0; i < cardLength; i++) {
      origMaskedNumber=origMaskedNumber + "*";
    }
    origMaskedNumber=origMaskedNumber + origCardNumber.substring(cardLength);
    Debug.log(origMaskedNumber);
    if (updatedCardNumber.equals(origMaskedNumber)) {
      updatedCardNumber=origCardNumber;
    }
  }
  context.put("cardNumber",updatedCardNumber);
  if (!UtilValidate.isCardMatch((String)context.get("cardType"),(String)context.get("cardNumber")))   messages.add((String)context.get("cardNumber") + UtilValidate.isCreditCardPrefixMsg + (String)context.get("cardType")+ UtilValidate.isCreditCardSuffixMsg+ " (It appears to be a "+ UtilValidate.getCardType((String)context.get("cardNumber"))+ " credit card number)");
  if (!UtilValidate.isDateAfterToday((String)context.get("expireDate")))   messages.add("The expiration date " + (String)context.get("expireDate") + " is before today.");
  if (messages.size() > 0) {
    return ServiceUtil.returnError(messages);
  }
  newPm=GenericValue.create(paymentMethod);
  toBeStored.add(newPm);
  newCc=GenericValue.create(creditCard);
  toBeStored.add(newCc);
  String newPmId=null;
  try {
    newPmId=delegator.getNextSeqId("PaymentMethod");
  }
 catch (  IllegalArgumentException e) {
    return ServiceUtil.returnError("ERROR: Could not update credit card info (id generation failure)");
  }
  newPm.set("partyId",partyId);
  newPm.set("fromDate",context.get("fromDate"),false);
  newPm.set("description",context.get("description"));
  if (newPm.get("thruDate") == null) {
    newPm.set("thruDate",context.get("thruDate"));
  }
  newCc.set("companyNameOnCard",context.get("companyNameOnCard"));
  newCc.set("titleOnCard",context.get("titleOnCard"));
  newCc.set("firstNameOnCard",context.get("firstNameOnCard"));
  newCc.set("middleNameOnCard",context.get("middleNameOnCard"));
  newCc.set("lastNameOnCard",context.get("lastNameOnCard"));
  newCc.set("suffixOnCard",context.get("suffixOnCard"));
  newCc.set("cardType",context.get("cardType"));
  newCc.set("cardNumber",context.get("cardNumber"));
  newCc.set("expireDate",context.get("expireDate"));
  GenericValue newPartyContactMechPurpose=null;
  String contactMechId=(String)context.get("contactMechId");
  if (contactMechId != null && contactMechId.length() > 0 && !contactMechId.equals("_NEW_")) {
    newCc.set("contactMechId",contactMechId);
  }
  if (!newCc.equals(creditCard) || !newPm.equals(paymentMethod)) {
    newPm.set("paymentMethodId",newPmId);
    newCc.set("paymentMethodId",newPmId);
    newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));
    isModified=true;
  }
  if (contactMechId != null && contactMechId.length() > 0 && !contactMechId.equals("_NEW_")) {
    String contactMechPurposeTypeId="BILLING_LOCATION";
    GenericValue tempVal=null;
    try {
      List allPCMPs=EntityUtil.filterByDate(delegator.findByAnd("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId),null),true);
      tempVal=EntityUtil.getFirst(allPCMPs);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      tempVal=null;
    }
    if (tempVal == null) {
      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));
    }
  }
  if (isModified) {
    if (newPartyContactMechPurpose != null)     toBeStored.add(newPartyContactMechPurpose);
    paymentMethod.set("thruDate",now);
    toBeStored.add(paymentMethod);
    try {
      delegator.storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      return ServiceUtil.returnError("ERROR: Could not update credit card (write failure): " + e.getMessage());
    }
  }
 else {
    result.put("paymentMethodId",paymentMethodId);
    result.put("oldPaymentMethodId",paymentMethodId);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    if (contactMechId == null || !contactMechId.equals("_NEW_")) {
      result.put(ModelService.SUCCESS_MESSAGE,"No changes made, not updating credit card");
    }
    return result;
  }
  result.put("oldPaymentMethodId",paymentMethodId);
  result.put("paymentMethodId",newCc.getString("paymentMethodId"));
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
