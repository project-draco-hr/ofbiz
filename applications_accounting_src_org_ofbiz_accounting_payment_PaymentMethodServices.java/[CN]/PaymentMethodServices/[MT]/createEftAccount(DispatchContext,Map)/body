{
  Map result=new HashMap();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Timestamp now=UtilDateTime.nowTimestamp();
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_CREATE");
  if (result.size() > 0)   return result;
  List toBeStored=new LinkedList();
  GenericValue newPm=delegator.makeValue("PaymentMethod",null);
  toBeStored.add(newPm);
  GenericValue newEa=delegator.makeValue("EftAccount",null);
  toBeStored.add(newEa);
  String newPmId=(String)context.get("paymentMethodId");
  if (UtilValidate.isEmpty(newPmId)) {
    try {
      newPmId=delegator.getNextSeqId("PaymentMethod");
    }
 catch (    IllegalArgumentException e) {
      return ServiceUtil.returnError("ERROR: Could not create payment method Id (id generation failure)");
    }
  }
  newPm.set("partyId",partyId);
  newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));
  newPm.set("thruDate",context.get("thruDate"));
  newPm.set("description",context.get("description"));
  newEa.set("bankName",context.get("bankName"));
  newEa.set("routingNumber",context.get("routingNumber"));
  newEa.set("accountType",context.get("accountType"));
  newEa.set("accountNumber",context.get("accountNumber"));
  newEa.set("nameOnAccount",context.get("nameOnAccount"));
  newEa.set("companyNameOnAccount",context.get("companyNameOnAccount"));
  newEa.set("contactMechId",context.get("contactMechId"));
  newPm.set("paymentMethodId",newPmId);
  newPm.set("paymentMethodTypeId","EFT_ACCOUNT");
  newEa.set("paymentMethodId",newPmId);
  GenericValue newPartyContactMechPurpose=null;
  String contactMechId=(String)context.get("contactMechId");
  if (contactMechId != null && contactMechId.length() > 0) {
    String contactMechPurposeTypeId="BILLING_LOCATION";
    GenericValue tempVal=null;
    try {
      List allPCMPs=EntityUtil.filterByDate(delegator.findByAnd("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId),null),true);
      tempVal=EntityUtil.getFirst(allPCMPs);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      tempVal=null;
    }
    if (tempVal == null) {
      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));
    }
  }
  if (newPartyContactMechPurpose != null)   toBeStored.add(newPartyContactMechPurpose);
  try {
    delegator.storeAll(toBeStored);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError("ERROR: Could not create credit card (write failure): " + e.getMessage());
  }
  result.put("paymentMethodId",newEa.getString("paymentMethodId"));
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
