{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Timestamp now=UtilDateTime.nowTimestamp();
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_UPDATE","ACCOUNTING","_UPDATE");
  if (result.size() > 0)   return result;
  List<GenericValue> toBeStored=FastList.newInstance();
  boolean isModified=false;
  GenericValue paymentMethod=null;
  GenericValue newPm=null;
  GenericValue eftAccount=null;
  GenericValue newEa=null;
  String paymentMethodId=(String)context.get("paymentMethodId");
  try {
    eftAccount=EntityQuery.use(delegator).from("EftAccount").where("paymentMethodId",paymentMethodId).queryOne();
    paymentMethod=EntityQuery.use(delegator).from("PaymentMethod").where("paymentMethodId",paymentMethodId).queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdatedReadFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  if (eftAccount == null || paymentMethod == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("errorString",paymentMethodId),locale));
  }
  if (!paymentMethod.getString("partyId").equals(partyId) && !security.hasEntityPermission("PAY_INFO","_UPDATE",userLogin) && !security.hasEntityPermission("ACCOUNTING","_UPDATE",userLogin)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("partyId",partyId,"paymentMethodId",paymentMethodId),locale));
  }
  newPm=GenericValue.create(paymentMethod);
  toBeStored.add(newPm);
  newEa=GenericValue.create(eftAccount);
  toBeStored.add(newEa);
  String newPmId=null;
  try {
    newPmId=delegator.getNextSeqId("PaymentMethod");
  }
 catch (  IllegalArgumentException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeCreated",locale));
  }
  newPm.set("partyId",partyId);
  newPm.set("fromDate",context.get("fromDate"),false);
  newPm.set("thruDate",context.get("thruDate"));
  newPm.set("description",context.get("description"));
  newEa.set("bankName",context.get("bankName"));
  newEa.set("routingNumber",context.get("routingNumber"));
  newEa.set("accountType",context.get("accountType"));
  newEa.set("accountNumber",context.get("accountNumber"));
  newEa.set("nameOnAccount",context.get("nameOnAccount"));
  newEa.set("companyNameOnAccount",context.get("companyNameOnAccount"));
  newEa.set("contactMechId",context.get("contactMechId"));
  if (!newEa.equals(eftAccount) || !newPm.equals(paymentMethod)) {
    newPm.set("paymentMethodId",newPmId);
    newEa.set("paymentMethodId",newPmId);
    newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));
    isModified=true;
  }
  GenericValue newPartyContactMechPurpose=null;
  String contactMechId=(String)context.get("contactMechId");
  if (UtilValidate.isNotEmpty(contactMechId)) {
    String contactMechPurposeTypeId="BILLING_LOCATION";
    GenericValue tempVal=null;
    try {
      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();
      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);
      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);
      tempVal=EntityUtil.getFirst(allPCWPs);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      tempVal=null;
    }
    if (tempVal == null) {
      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));
    }
  }
  if (isModified) {
    if (newPartyContactMechPurpose != null)     toBeStored.add(newPartyContactMechPurpose);
    paymentMethod.set("thruDate",now);
    toBeStored.add(paymentMethod);
    try {
      delegator.storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("errorString",e.getMessage()),locale));
    }
  }
 else {
    result.put("paymentMethodId",paymentMethodId);
    result.put("oldPaymentMethodId",paymentMethodId);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"AccountingNoChangesMadeNotUpdatingEftAccount",locale));
    return result;
  }
  result.put("paymentMethodId",newEa.getString("paymentMethodId"));
  result.put("oldPaymentMethodId",paymentMethodId);
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
