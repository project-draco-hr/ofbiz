{
  if (UtilValidate.isNotEmpty(connectorConfig.getProperty("host"))) {
    connector.setHost(connectorConfig.getProperty("host").value);
  }
  if (UtilValidate.isNotEmpty(connectorConfig.getProperty("port"))) {
    String portPropertyValue=connectorConfig.getProperty("port").value;
    try {
      connector.setPort(Integer.parseInt(portPropertyValue));
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"invalid value for port: " + portPropertyValue,module);
    }
  }
  if (UtilValidate.isNotEmpty(connectorConfig.getProperty("request-buffer-size"))) {
    String requestBufferSizePropertyValue=connectorConfig.getProperty("request-buffer-size").value;
    try {
      connector.setRequestBufferSize(Integer.parseInt(requestBufferSizePropertyValue));
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"invalid value for request-buffer-size: " + requestBufferSizePropertyValue,module);
    }
  }
  if (UtilValidate.isNotEmpty(connectorConfig.getProperty("request-header-size"))) {
    String requestHeaderSizePropertyValue=connectorConfig.getProperty("request-header-size").value;
    try {
      connector.setRequestHeaderSize(Integer.parseInt(requestHeaderSizePropertyValue));
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"invalid value for request-header-size: " + requestHeaderSizePropertyValue,module);
    }
  }
  if (UtilValidate.isNotEmpty(connectorConfig.getProperty("response-buffer-size"))) {
    String responseBufferSizePropertyValue=connectorConfig.getProperty("response-buffer-size").value;
    try {
      connector.setResponseBufferSize(Integer.parseInt(responseBufferSizePropertyValue));
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"invalid value for response-buffer-size: " + responseBufferSizePropertyValue,module);
    }
  }
  if (UtilValidate.isNotEmpty(connectorConfig.getProperty("response-header-size"))) {
    String responseHeaderSizePropertyValue=connectorConfig.getProperty("response-header-size").value;
    try {
      connector.setResponseHeaderSize(Integer.parseInt(responseHeaderSizePropertyValue));
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"invalid value for response-header-size: " + responseHeaderSizePropertyValue,module);
    }
  }
  if (UtilValidate.isNotEmpty(connectorConfig.getProperty("low-resource-max-idle-time"))) {
    String lowResourceMaxIdleTimePropertyValue=connectorConfig.getProperty("low-resource-max-idle-time").value;
    try {
      connector.setLowResourceMaxIdleTime(Integer.parseInt(lowResourceMaxIdleTimePropertyValue));
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"invalid value for low-resource-max-idle-time: " + lowResourceMaxIdleTimePropertyValue,module);
    }
  }
  if (connector instanceof SslConnector) {
    SslContextFactory cf=((SslConnector)connector).getSslContextFactory();
    if (UtilValidate.isNotEmpty(connectorConfig.getProperty("keystore"))) {
      cf.setKeyStorePath(connectorConfig.getProperty("keystore").value);
    }
    if (connectorConfig.getProperty("password") != null) {
      cf.setKeyStorePassword(connectorConfig.getProperty("password").value);
    }
    if (connectorConfig.getProperty("key-password") != null) {
      cf.setKeyManagerPassword(connectorConfig.getProperty("key-password").value);
    }
    if (UtilValidate.isNotEmpty(connectorConfig.getProperty("client-auth"))) {
      if ("need".equals(connectorConfig.getProperty("client-auth").value)) {
        cf.setNeedClientAuth(true);
      }
 else       if ("want".equals(connectorConfig.getProperty("client-auth").value)) {
        cf.setWantClientAuth(true);
      }
    }
  }
}
