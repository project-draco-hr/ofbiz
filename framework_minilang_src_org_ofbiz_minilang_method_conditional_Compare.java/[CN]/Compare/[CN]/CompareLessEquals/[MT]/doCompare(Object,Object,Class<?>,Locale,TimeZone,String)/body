{
  Object convertedLvalue=MiniLangUtil.convertType(lValue,type,locale,timeZone,format);
  Object convertedRvalue=MiniLangUtil.convertType(rValue,type,locale,timeZone,format);
  assertValuesNotNull(convertedLvalue,convertedRvalue);
  try {
    BigDecimal lBigDecimal=(BigDecimal)convertedLvalue;
    BigDecimal rBigDecimal=(BigDecimal)convertedRvalue;
    return compareBigDecimals(lBigDecimal,rBigDecimal) <= 0;
  }
 catch (  ClassCastException e) {
  }
  try {
    Comparable comparable=(Comparable)convertedLvalue;
    return comparable.compareTo(convertedRvalue) <= 0;
  }
 catch (  ClassCastException e) {
  }
  throw new IllegalArgumentException("Cannot compare: l-value is not a comparable type");
}
