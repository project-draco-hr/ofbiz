{
  Delegator delegator=dctx.getDelegator();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  Locale locale=(Locale)context.get("locale");
  String errMsg=null;
  try {
    EntityCondition conditionOne=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("isVariant",EntityOperator.EQUALS,"Y"),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp)),EntityOperator.AND);
    EntityListIterator eliOne=delegator.find("Product",conditionOne,null,null,null,null);
    GenericValue productOne=null;
    int numSoFarOne=0;
    while ((productOne=eliOne.next()) != null) {
      String virtualProductId=ProductWorker.getVariantVirtualId(productOne);
      GenericValue virtualProduct=delegator.findOne("Product",UtilMisc.toMap("productId",virtualProductId),false);
      if (virtualProduct == null) {
        continue;
      }
      List<GenericValue> passocList=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",virtualProductId,"productIdTo",productOne.get("productId"),"productAssocTypeId","PRODUCT_VARIANT"),null,false);
      passocList=EntityUtil.filterByDate(passocList);
      if (passocList.size() > 0) {
        for (        GenericValue passoc : passocList) {
          passoc.set("thruDate",nowTimestamp);
          passoc.store();
        }
        numSoFarOne++;
        if (numSoFarOne % 500 == 0) {
          Debug.logInfo("Expired variant ProductAssocs for " + numSoFarOne + " sales discontinued variant products.",module);
        }
      }
    }
    eliOne.close();
    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("isVirtual",EntityOperator.EQUALS,"Y"),EntityCondition.makeCondition(EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);
    EntityListIterator eli=delegator.find("Product",condition,null,null,null,null);
    GenericValue product=null;
    int numSoFar=0;
    while ((product=eli.next()) != null) {
      List<GenericValue> passocList=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",product.get("productId"),"productAssocTypeId","PRODUCT_VARIANT"),null,false);
      passocList=EntityUtil.filterByDate(passocList);
      if (passocList.size() == 0) {
        product.set("salesDiscontinuationDate",nowTimestamp);
        delegator.store(product);
        numSoFar++;
        if (numSoFar % 500 == 0) {
          Debug.logInfo("Sales discontinued " + numSoFar + " virtual products that have no valid variants.",module);
        }
      }
    }
    eli.close();
  }
 catch (  GenericEntityException e) {
    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());
    errMsg=UtilProperties.getMessage(resourceError,"productutilservices.entity_error_running_discVirtualsWithDiscVariants",messageMap,locale);
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  return ServiceUtil.returnSuccess();
}
