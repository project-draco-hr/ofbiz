{
  labels=new TreeMap<String,LabelInfo>();
  fileNamesFound=new TreeMap<String,String>();
  fileComponent=new TreeMap<String,String>();
  localesFound=new TreeSet<String>();
  componentNamesFound=new TreeSet<String>();
  references=null;
  int duplicatedLocales=0;
  try {
    Collection<ComponentConfig> componentConfigs=ComponentConfig.getAllComponents();
    for (    ComponentConfig componentConfig : componentConfigs) {
      String componentName=componentConfig.getComponentName();
      List<File> resourceFiles=FileUtil.findXmlFiles(componentConfig.getRootLocation(),null,"resource",null);
      for (      File resourceFile : resourceFiles) {
        String fileName=resourceFile.getName();
        Document resourceDocument=UtilXml.readXmlDocument(resourceFile.toURI().toURL());
        Element resourceElem=resourceDocument.getDocumentElement();
        String labelKeyComment="";
        for (        Node propertyNode : UtilXml.childNodeList(resourceElem.getFirstChild())) {
          if (propertyNode instanceof Element) {
            Element propertyElem=(Element)propertyNode;
            String labelKey=StringUtil.htmlSpecialChars(propertyElem.getAttribute("key"),true,true,false);
            String labelComment="";
            for (            Node valueNode : UtilXml.childNodeList(propertyElem.getFirstChild())) {
              if (valueNode instanceof Element) {
                Element valueElem=(Element)valueNode;
                String localeName=valueElem.getAttribute("xml:lang");
                String labelValue=StringUtil.htmlSpecialChars(UtilXml.nodeValue(valueElem.getFirstChild()),true,true,false);
                LabelInfo label=(LabelInfo)labels.get(labelKey + keySeparator + fileName);
                if (UtilValidate.isEmpty(label)) {
                  label=new LabelInfo(labelKey,labelKeyComment,fileName,componentName,localeName,labelValue,labelComment);
                  labels.put(labelKey + keySeparator + fileName,label);
                }
 else {
                  if (label.setLabelValue(localeName,labelValue,labelComment,false)) {
                    duplicatedLocales++;
                  }
                }
                localesFound.add(localeName);
                componentNamesFound.add(componentName);
                fileNamesFound.put(fileName,resourceFile.toURI().toString());
                fileComponent.put(fileName,componentName);
                labelComment="";
              }
 else               if (valueNode instanceof Comment) {
                labelComment=labelComment + StringUtil.htmlSpecialChars(valueNode.getNodeValue(),true,true,false);
              }
            }
            labelKeyComment="";
          }
 else           if (propertyNode instanceof Comment) {
            labelKeyComment=labelKeyComment + StringUtil.htmlSpecialChars(propertyNode.getNodeValue(),true,true,false);
          }
        }
      }
    }
    references=LabelReferences.getLabelReferences();
  }
 catch (  IOException ioe) {
    throw new GeneralException(ioe.getMessage());
  }
catch (  Exception e) {
    throw new GeneralException(e.getMessage());
  }
  duplicatedLocalesLabels=duplicatedLocales;
}
