{
  Delegator delegator=billingAccount.getDelegator();
  String billingAccountId=billingAccount.getString("billingAccountId");
  BigDecimal balance=ZERO;
  BigDecimal accountLimit=getAccountLimit(billingAccount);
  balance=balance.add(accountLimit);
  List<GenericValue> orderPaymentPreferenceSums=EntityQuery.use(delegator).select("maxAmount").from("OrderPurchasePaymentSummary").where(EntityCondition.makeCondition("billingAccountId",EntityOperator.EQUALS,billingAccountId),EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"EXT_BILLACT"),EntityCondition.makeCondition("statusId",EntityOperator.NOT_IN,UtilMisc.toList("ORDER_CANCELLED","ORDER_REJECTED")),EntityCondition.makeCondition("preferenceStatusId",EntityOperator.NOT_IN,UtilMisc.toList("PAYMENT_SETTLED","PAYMENT_RECEIVED","PAYMENT_DECLINED","PAYMENT_CANCELLED"))).queryList();
  for (  GenericValue orderPaymentPreferenceSum : orderPaymentPreferenceSums) {
    BigDecimal maxAmount=orderPaymentPreferenceSum.getBigDecimal("maxAmount");
    balance=maxAmount != null ? balance.subtract(maxAmount) : balance;
  }
  List<GenericValue> paymentAppls=EntityQuery.use(delegator).from("PaymentApplication").where("billingAccountId",billingAccountId).queryList();
  for (  GenericValue paymentAppl : paymentAppls) {
    if (paymentAppl.getString("invoiceId") == null) {
      BigDecimal amountApplied=paymentAppl.getBigDecimal("amountApplied");
      balance=balance.add(amountApplied);
    }
  }
  balance=balance.setScale(scale,rounding);
  return balance;
}
