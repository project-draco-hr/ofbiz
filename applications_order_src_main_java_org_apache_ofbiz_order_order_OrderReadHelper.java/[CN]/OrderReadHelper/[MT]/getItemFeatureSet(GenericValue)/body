{
  Set<String> featureSet=new LinkedHashSet<String>();
  List<GenericValue> featureAppls=null;
  if (item.get("productId") != null) {
    try {
      featureAppls=item.getDelegator().findByAnd("ProductFeatureAppl",UtilMisc.toMap("productId",item.getString("productId")),null,true);
      List<EntityExpr> filterExprs=UtilMisc.toList(EntityCondition.makeCondition("productFeatureApplTypeId",EntityOperator.EQUALS,"STANDARD_FEATURE"));
      filterExprs.add(EntityCondition.makeCondition("productFeatureApplTypeId",EntityOperator.EQUALS,"REQUIRED_FEATURE"));
      featureAppls=EntityUtil.filterByOr(featureAppls,filterExprs);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Unable to get ProductFeatureAppl for item : " + item,module);
    }
    if (featureAppls != null) {
      for (      GenericValue appl : featureAppls) {
        featureSet.add(appl.getString("productFeatureId"));
      }
    }
  }
  List<GenericValue> additionalFeatures=null;
  try {
    additionalFeatures=item.getRelated("OrderAdjustment",UtilMisc.toMap("orderAdjustmentTypeId","ADDITIONAL_FEATURE"),null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Unable to get OrderAdjustment from item : " + item,module);
  }
  if (additionalFeatures != null) {
    for (    GenericValue adj : additionalFeatures) {
      String featureId=adj.getString("productFeatureId");
      if (featureId != null) {
        featureSet.add(featureId);
      }
    }
  }
  return featureSet;
}
