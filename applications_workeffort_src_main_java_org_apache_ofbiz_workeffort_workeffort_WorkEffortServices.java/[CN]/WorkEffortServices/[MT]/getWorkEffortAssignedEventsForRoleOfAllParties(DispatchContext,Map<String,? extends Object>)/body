{
  Delegator delegator=ctx.getDelegator();
  String roleTypeId=(String)context.get("roleTypeId");
  Locale locale=(Locale)context.get("locale");
  List<GenericValue> validWorkEfforts=null;
  try {
    List<EntityExpr> conditionList=new LinkedList<EntityExpr>();
    conditionList.add(EntityCondition.makeCondition("roleTypeId",EntityOperator.EQUALS,roleTypeId));
    conditionList.add(EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"EVENT"));
    conditionList.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DECLINED"));
    conditionList.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DELEGATED"));
    conditionList.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_COMPLETED"));
    conditionList.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_CANCELLED"));
    EntityConditionList<EntityExpr> ecl=EntityCondition.makeCondition(conditionList,EntityOperator.AND);
    validWorkEfforts=EntityQuery.use(delegator).from("WorkEffortAndPartyAssign").where(ecl).orderBy("estimatedStartDate","priority").filterByDate().queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"WorkEffortNotFound",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  Map<String,Object> result=new HashMap<String,Object>();
  if (validWorkEfforts == null) {
    validWorkEfforts=new LinkedList<GenericValue>();
  }
  result.put("events",validWorkEfforts);
  return result;
}
