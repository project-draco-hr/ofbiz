{
  TreeMap<DateRange,List<Map<String,Object>>> calendarEntriesByDateRange=new TreeMap<DateRange,List<Map<String,Object>>>();
  TreeSet<Date> dateBoundaries=new TreeSet<Date>();
  if (inDateRange != null) {
    dateBoundaries.add(inDateRange.start());
    dateBoundaries.add(inDateRange.end());
  }
  for (  Map<String,Object> calendarEntry : calendarEntries) {
    DateRange calEntryRange=(DateRange)calendarEntry.get("calEntryRange");
    dateBoundaries.add(calEntryRange.start());
    dateBoundaries.add(calEntryRange.end());
  }
  Date prevDateBoundary=null;
  for (  Date dateBoundary : dateBoundaries) {
    if (prevDateBoundary != null) {
      DateRange dateRange=new DateRange(prevDateBoundary,dateBoundary);
      for (      Map<String,Object> calendarEntry : calendarEntries) {
        DateRange calEntryRange=(DateRange)calendarEntry.get("calEntryRange");
        if (calEntryRange.intersectsRange(dateRange) && !(calEntryRange.end().equals(dateRange.start()) || calEntryRange.start().equals(dateRange.end()))) {
          List<Map<String,Object>> calendarEntryByDateRangeList=calendarEntriesByDateRange.get(dateRange);
          if (calendarEntryByDateRangeList == null) {
            calendarEntryByDateRangeList=new LinkedList();
          }
          calendarEntryByDateRangeList.add(calendarEntry);
          calendarEntriesByDateRange.put(dateRange,calendarEntryByDateRangeList);
        }
      }
    }
    prevDateBoundary=dateBoundary;
  }
  return calendarEntriesByDateRange;
}
