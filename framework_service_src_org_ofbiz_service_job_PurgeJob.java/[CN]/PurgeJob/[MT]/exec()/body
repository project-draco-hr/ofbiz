{
  if (currentState != State.QUEUED) {
    throw new InvalidJobException("Illegal state change");
  }
  currentState=State.RUNNING;
  try {
    jobValue.remove();
    GenericValue relatedValue=jobValue.getRelatedOne("RecurrenceInfo",false);
    if (relatedValue != null) {
      List<GenericValue> valueList=relatedValue.getRelated("JobSandbox",null,null,false);
      if (valueList.isEmpty()) {
        relatedValue.removeRelated("RecurrenceRule");
        relatedValue.remove();
      }
    }
    relatedValue=jobValue.getRelatedOne("RuntimeData",false);
    if (relatedValue != null) {
      List<GenericValue> valueList=relatedValue.getRelated("JobSandbox",null,null,false);
      if (valueList.isEmpty()) {
        relatedValue.remove();
      }
    }
    Debug.logInfo("Purged job " + getJobId(),module);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Exception thrown while purging job: ",module);
  }
}
