{
  String pathString=buildPathString(node.getModelTree(),depth);
  String currentNodeTrailPiped=null;
  List currentNodeTrail=node.getModelTree().getCurrentNodeTrail();
  String staticNodeTrailPiped=StringUtil.join(currentNodeTrail,"|");
  context.put("staticNodeTrailPiped",staticNodeTrailPiped);
  context.put("nodePathString",pathString);
  context.put("depth",Integer.toString(depth));
  if (node.isRootNode()) {
    appendWhitespace(writer);
    writer.write("<ul class=\"basic-tree\">");
  }
  appendWhitespace(writer);
  writer.write("<li>");
  String pkName=node.getPkName();
  String entityId=null;
  String entryName=node.getEntryName();
  if (UtilValidate.isNotEmpty(entryName)) {
    Map map=(Map)context.get(entryName);
    entityId=(String)map.get(pkName);
  }
 else {
    entityId=(String)context.get(pkName);
  }
  boolean hasChildren=node.hasChildren(context);
  if (hasChildren && node.isExpandCollapse()) {
    String targetEntityId=null;
    List targetNodeTrail=node.getModelTree().getTrailList();
    if (depth < targetNodeTrail.size()) {
      targetEntityId=(String)targetNodeTrail.get(depth);
    }
    ModelTree.ModelNode.Image expandCollapseImage=new ModelTree.ModelNode.Image();
    expandCollapseImage.setBorder("0");
    ModelTree.ModelNode.Link expandCollapseLink=new ModelTree.ModelNode.Link();
    int openDepth=node.getModelTree().getOpenDepth();
    if (depth >= openDepth && (targetEntityId == null || !targetEntityId.equals(entityId))) {
      if (node.showPeers(depth)) {
        context.put("processChildren",Boolean.FALSE);
        currentNodeTrailPiped=StringUtil.join(currentNodeTrail,"|");
        context.put("currentNodeTrailPiped",currentNodeTrailPiped);
        expandCollapseLink.setStyle("collapsed");
        expandCollapseLink.setText("&nbsp;");
        String target=node.getModelTree().getExpandCollapseRequest(context);
        String trailName=node.getModelTree().getTrailName(context);
        if (target.indexOf("?") < 0) {
          target+="?";
        }
 else {
          target+="&";
        }
        target+=trailName + "=" + currentNodeTrailPiped;
        target+="#" + staticNodeTrailPiped;
        expandCollapseLink.setTarget(target);
      }
    }
 else {
      context.put("processChildren",Boolean.TRUE);
      String lastContentId=(String)currentNodeTrail.remove(currentNodeTrail.size() - 1);
      currentNodeTrailPiped=StringUtil.join(currentNodeTrail,"|");
      if (currentNodeTrailPiped == null) {
        currentNodeTrailPiped="";
      }
      context.put("currentNodeTrailPiped",currentNodeTrailPiped);
      expandCollapseLink.setStyle("expanded");
      expandCollapseLink.setText("&nbsp;");
      String target=node.getModelTree().getExpandCollapseRequest(context);
      String trailName=node.getModelTree().getTrailName(context);
      if (target.indexOf("?") < 0)       target+="?";
 else       target+="&";
      target+=trailName + "=" + currentNodeTrailPiped;
      target+="#" + staticNodeTrailPiped;
      expandCollapseLink.setTarget(target);
      currentNodeTrail.add(lastContentId);
      currentNodeTrailPiped=StringUtil.join(currentNodeTrail,"|");
      if (currentNodeTrailPiped == null) {
        currentNodeTrailPiped="";
      }
      context.put("currentNodeTrailPiped",currentNodeTrailPiped);
    }
    renderLink(writer,context,expandCollapseLink);
  }
 else   if (!hasChildren) {
    context.put("processChildren",Boolean.FALSE);
  }
}
