{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  try {
    Map checkOrderResp=dispatcher.runSync("checkOrderIsOnBackOrder",UtilMisc.toMap("orderId",orderId));
    if (((Boolean)checkOrderResp.get("isBackOrder")).booleanValue()) {
      Debug.logWarning("Order [" + orderId + "] is on back order, cannot Process Shipment",module);
      return ServiceUtil.returnSuccess();
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  String sendToUrl=(String)context.get("sendToUrl");
  if (UtilValidate.isEmpty(sendToUrl)) {
    sendToUrl=UtilProperties.getPropertyValue("oagis.properties","url.send.processShipment");
  }
  String saveToFilename=(String)context.get("saveToFilename");
  if (UtilValidate.isEmpty(saveToFilename)) {
    String saveToFilenameBase=UtilProperties.getPropertyValue("oagis.properties","test.save.outgoing.filename.base","");
    if (UtilValidate.isNotEmpty(saveToFilenameBase)) {
      saveToFilename=saveToFilenameBase + "ProcessShipment" + orderId+ ".xml";
    }
  }
  String saveToDirectory=(String)context.get("saveToDirectory");
  if (UtilValidate.isEmpty(saveToDirectory)) {
    saveToDirectory=UtilProperties.getPropertyValue("oagis.properties","test.save.outgoing.directory");
  }
  OutputStream out=(OutputStream)context.get("outputStream");
  if (Debug.infoOn())   Debug.logInfo("Call to oagisProcessShipment for orderId [" + orderId + "], sendToUrl=["+ sendToUrl+ "], saveToDirectory=["+ saveToDirectory+ "], saveToFilename=["+ saveToFilename+ "]",module);
  Map result=ServiceUtil.returnSuccess();
  MapStack bodyParameters=MapStack.create();
  GenericValue userLogin=null;
  try {
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting userLogin",module);
  }
  Map serviceContext=FastMap.newInstance();
  serviceContext.put("orderId",orderId);
  serviceContext.put("userLogin",userLogin);
  serviceContext.put("reAuth",new Boolean("true"));
  Map authResult=null;
  try {
    authResult=dispatcher.runSync("authOrderPayments",serviceContext);
    if (!authResult.get("processResult").equals("APPROVED")) {
      return ServiceUtil.returnError("No valid payment available, cannot process Shipment");
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error authorizing payment: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  GenericValue orderHeader=null;
  GenericValue orderItemShipGroup=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (orderHeader != null) {
    String orderStatusId=orderHeader.getString("statusId");
    if (orderStatusId.equals("ORDER_APPROVED")) {
      OrderReadHelper orderReadHelper=new OrderReadHelper(orderHeader);
      try {
        if (!orderReadHelper.hasPhysicalProductItems()) {
          return ServiceUtil.returnSuccess();
        }
      }
 catch (      GenericEntityException e) {
        String errMsg="Error checking order: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      if (!orderReadHelper.hasShippingAddress()) {
        return ServiceUtil.returnError("Cannot send Process Shipment for order [" + orderId + "], it has no shipping address.");
      }
      String logicalId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID");
      bodyParameters.put("logicalId",logicalId);
      Map comiCtx=UtilMisc.toMap("logicalId",logicalId);
      String authId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID");
      bodyParameters.put("authId",authId);
      comiCtx.put("authId",authId);
      String referenceId=delegator.getNextSeqId("OagisMessageInfo");
      bodyParameters.put("referenceId",referenceId);
      comiCtx.put("referenceId",referenceId);
      Timestamp timestamp=UtilDateTime.nowTimestamp();
      String sentDate=OagisServices.isoDateFormat.format(timestamp);
      bodyParameters.put("sentDate",sentDate);
      comiCtx.put("sentDate",timestamp);
      comiCtx.put("processingStatusId","OAGMP_TRIGGERED");
      comiCtx.put("component","INVENTORY");
      comiCtx.put("task","SHIPREQUES");
      comiCtx.put("outgoingMessage","Y");
      comiCtx.put("confirmation","1");
      comiCtx.put("bsrVerb","PROCESS");
      comiCtx.put("bsrNoun","SHIPMENT");
      comiCtx.put("bsrRevision","001");
      comiCtx.put("orderId",orderId);
      comiCtx.put("userLogin",userLogin);
      try {
        dispatcher.runSync("createOagisMessageInfo",comiCtx,60,true);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
        Debug.logError(e,errMsg,module);
      }
      if (Debug.infoOn())       Debug.logInfo("Saved OagisMessageInfo for oagisProcessShipment message for orderId [" + orderId + "]",module);
      String shipmentId=null;
      try {
        EntityCondition findShipmentCondition=new EntityConditionList(UtilMisc.toList(new EntityExpr("primaryOrderId",EntityOperator.EQUALS,orderId),new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_CANCELLED")),EntityOperator.AND);
        List shipmentList=delegator.findByCondition("Shipment",findShipmentCondition,null,null);
        GenericValue shipment=EntityUtil.getFirst(shipmentList);
        if (shipment != null) {
          String statusId=shipment.getString("statusId");
          if ("SHIPMENT_PICKED".equals(statusId) || "SHIPMENT_PACKED".equals(statusId) || "SHIPMENT_SHIPPED".equals(statusId)|| "SHIPMENT_DELIVERED".equals(statusId)) {
            return ServiceUtil.returnError("Not sending Process Shipment message because found Shipment that is already being processed, is in status [" + statusId + "]");
          }
          shipmentId=shipment.getString("shipmentId");
        }
 else {
          Map cospResult=dispatcher.runSync("createOrderShipmentPlan",UtilMisc.toMap("orderId",orderId,"userLogin",userLogin));
          shipmentId=(String)cospResult.get("shipmentId");
          shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
        }
        bodyParameters.put("shipment",shipment);
        List shipmentItems=delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId));
        bodyParameters.put("shipmentItems",shipmentItems);
        GenericValue address=EntityUtil.getFirst(orderReadHelper.getShippingLocations());
        bodyParameters.put("address",address);
        String emailString=orderReadHelper.getOrderEmailString();
        bodyParameters.put("emailString",emailString);
        String contactMechId=shipment.getString("destinationTelecomNumberId");
        GenericValue telecomNumber=delegator.findByPrimaryKey("TelecomNumber",UtilMisc.toMap("contactMechId",contactMechId));
        bodyParameters.put("telecomNumber",telecomNumber);
        orderItemShipGroup=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGroup",UtilMisc.toMap("orderId",orderId)));
        bodyParameters.put("orderItemShipGroup",orderItemShipGroup);
        Set correspondingPoIdSet=FastSet.newInstance();
        List orderItems=orderReadHelper.getOrderItems();
        Iterator oiIter=orderItems.iterator();
        while (oiIter.hasNext()) {
          GenericValue orderItem=(GenericValue)oiIter.next();
          String correspondingPoId=orderItem.getString("correspondingPoId");
          if (correspondingPoId != null) {
            correspondingPoIdSet.add(correspondingPoId);
          }
        }
        bodyParameters.put("correspondingPoIdSet",correspondingPoIdSet);
        if (orderHeader.get("externalId") != null) {
          Set externalIdSet=FastSet.newInstance();
          externalIdSet.add(orderHeader.getString("externalId"));
          bodyParameters.put("externalIdSet",externalIdSet);
        }
        GenericValue returnItemResponse=EntityUtil.getFirst(delegator.findByAnd("ReturnItemResponse",UtilMisc.toMap("replacementOrderId",orderId)));
        if (returnItemResponse != null) {
          bodyParameters.put("shipnotes","RETURNLABEL");
          String returnItemResponseId=returnItemResponse.getString("returnItemResponseId");
          GenericValue returnItem=EntityUtil.getFirst(delegator.findByAnd("ReturnItem",UtilMisc.toMap("returnItemResponseId",returnItemResponseId)));
          bodyParameters.put("replacementReturnId",returnItem.getString("returnId"));
        }
        String partyId=shipment.getString("partyIdTo");
        bodyParameters.put("partyNameView",delegator.findByPrimaryKey("PartyNameView",UtilMisc.toMap("partyId",partyId)));
        List partyCarrierAccounts=delegator.findByAnd("PartyCarrierAccount",UtilMisc.toMap("partyId",partyId));
        partyCarrierAccounts=EntityUtil.filterByDate(partyCarrierAccounts);
        if (partyCarrierAccounts != null) {
          Iterator pcaIter=partyCarrierAccounts.iterator();
          while (pcaIter.hasNext()) {
            GenericValue partyCarrierAccount=(GenericValue)pcaIter.next();
            String carrierPartyId=partyCarrierAccount.getString("carrierPartyId");
            if (carrierPartyId.equals(orderItemShipGroup.getString("carrierPartyId"))) {
              String accountNumber=partyCarrierAccount.getString("accountNumber");
              bodyParameters.put("shipperId",accountNumber);
            }
          }
        }
      }
 catch (      GenericServiceException e) {
        String errMsg="Error preparing data for OAGIS Process Shipment message: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
catch (      GenericEntityException e) {
        String errMsg="Error preparing data for OAGIS Process Shipment message: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      bodyParameters.put("shipmentId",shipmentId);
      bodyParameters.put("orderId",orderId);
      bodyParameters.put("userLogin",userLogin);
      String bodyScreenUri=UtilProperties.getPropertyValue("oagis.properties","Oagis.Template.ProcessShipment");
      String outText=null;
      try {
        Writer writer=new StringWriter();
        ScreenRenderer screens=new ScreenRenderer(writer,bodyParameters,htmlScreenRenderer);
        screens.render(bodyScreenUri);
        writer.close();
        outText=writer.toString();
      }
 catch (      Exception e) {
        String errMsg="Error rendering message: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      if (Debug.infoOn())       Debug.logInfo("Finished rendering oagisProcessShipment message for orderId [" + orderId + "]",module);
      comiCtx.put("processingStatusId","OAGMP_OGEN_SUCCESS");
      comiCtx.put("shipmentId",shipmentId);
      if (OagisServices.debugSaveXmlOut) {
        comiCtx.put("fullMessageXml",outText);
      }
      try {
        dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
        Debug.logError(e,errMsg,module);
      }
      Map sendMessageReturn=OagisServices.sendMessageText(outText,out,sendToUrl,saveToDirectory,saveToFilename);
      if (sendMessageReturn != null) {
        return sendMessageReturn;
      }
      if (Debug.infoOn())       Debug.logInfo("Message send done for oagisProcessShipment for orderId [" + orderId + "], sendToUrl=["+ sendToUrl+ "], saveToDirectory=["+ saveToDirectory+ "], saveToFilename=["+ saveToFilename+ "]",module);
      comiCtx.put("processingStatusId","OAGMP_SENT");
      try {
        dispatcher.runSync("updateOagisMessageInfo",comiCtx,60,true);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
        Debug.logError(e,errMsg,module);
      }
    }
  }
  return result;
}
