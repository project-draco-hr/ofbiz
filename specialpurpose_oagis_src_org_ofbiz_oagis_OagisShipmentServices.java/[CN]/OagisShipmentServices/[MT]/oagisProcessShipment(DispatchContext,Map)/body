{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String sendToUrl=(String)context.get("sendToUrl");
  String saveToFilename=(String)context.get("saveToFilename");
  String saveToDirectory=(String)context.get("saveToDirectory");
  OutputStream out=(OutputStream)context.get("outputStream");
  Map result=ServiceUtil.returnSuccess();
  MapStack bodyParameters=MapStack.create();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting userLogin",module);
    }
  }
  GenericValue orderHeader=null;
  GenericValue orderItemShipGroup=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (orderHeader != null) {
    String orderStatusId=orderHeader.getString("statusId");
    if (orderStatusId.equals("ORDER_APPROVED")) {
      try {
        EntityCondition findShipmentCondition=new EntityConditionList(UtilMisc.toList(new EntityExpr("primaryOrderId",EntityOperator.EQUALS,orderId),new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_CANCELLED")),EntityOperator.AND);
        List shipmentList=delegator.findByCondition("Shipment",findShipmentCondition,null,null);
        GenericValue shipment=EntityUtil.getFirst(shipmentList);
        if (shipment != null) {
          String statusId=shipment.getString("statusId");
          if ("SHIPMENT_PICKED".equals(statusId) || "SHIPMENT_PACKED".equals(statusId) || "SHIPMENT_SHIPPED".equals(statusId)|| "SHIPMENT_DELIVERED".equals(statusId)) {
            return ServiceUtil.returnError("Not sending Process Shipment message because found Shipment that is already being processed, is in status [" + statusId + "]");
          }
          shipmentId=shipment.getString("shipmentId");
        }
 else {
          Map cospResult=dispatcher.runSync("createOrderShipmentPlan",UtilMisc.toMap("orderId",orderId,"userLogin",userLogin));
          shipmentId=(String)cospResult.get("shipmentId");
          shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
        }
        bodyParameters.put("shipment",shipment);
        OrderReadHelper orderReadHelper=new OrderReadHelper(orderHeader);
        if (orderReadHelper.hasShippingAddress()) {
          GenericValue address=EntityUtil.getFirst(orderReadHelper.getShippingLocations());
          bodyParameters.put("address",address);
        }
        String emailString=orderReadHelper.getOrderEmailString();
        bodyParameters.put("emailString",emailString);
        String contactMechId=shipment.getString("destinationTelecomNumberId");
        GenericValue telecomNumber=delegator.findByPrimaryKey("TelecomNumber",UtilMisc.toMap("contactMechId",contactMechId));
        bodyParameters.put("telecomNumber",telecomNumber);
        List shipmentItems=delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId));
        bodyParameters.put("shipmentItems",shipmentItems);
        orderItemShipGroup=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGroup",UtilMisc.toMap("orderId",orderId)));
        bodyParameters.put("orderItemShipGroup",orderItemShipGroup);
        Set correspondingPoIdSet=FastSet.newInstance();
        List orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId));
        Iterator oiIter=orderItems.iterator();
        while (oiIter.hasNext()) {
          GenericValue orderItem=(GenericValue)oiIter.next();
          String correspondingPoId=orderItem.getString("correspondingPoId");
          if (correspondingPoId != null) {
            correspondingPoIdSet.add(correspondingPoId);
          }
        }
        bodyParameters.put("correspondingPoIdSet",correspondingPoIdSet);
        if (orderHeader.get("externalId") != null) {
          Set externalIdSet=FastSet.newInstance();
          externalIdSet.add(orderHeader.getString("externalId"));
          bodyParameters.put("externalIdSet",externalIdSet);
        }
        GenericValue returnItemResponse=EntityUtil.getFirst(delegator.findByAnd("ReturnItemResponse",UtilMisc.toMap("replacementOrderId",orderId)));
        if (returnItemResponse != null) {
          bodyParameters.put("shipnotes","RETURNLABEL");
          String returnItemResponseId=returnItemResponse.getString("returnItemResponseId");
          GenericValue returnItem=EntityUtil.getFirst(delegator.findByAnd("ReturnItem",UtilMisc.toMap("returnItemResponseId",returnItemResponseId)));
          bodyParameters.put("replacementReturnId",returnItem.getString("returnId"));
        }
        String partyId=shipment.getString("partyIdTo");
        bodyParameters.put("partyNameView",delegator.findByPrimaryKey("PartyNameView",UtilMisc.toMap("partyId",partyId)));
        List partyCarrierAccounts=delegator.findByAnd("PartyCarrierAccount",UtilMisc.toMap("partyId",partyId));
        partyCarrierAccounts=EntityUtil.filterByDate(partyCarrierAccounts);
        if (partyCarrierAccounts != null) {
          Iterator pcaIter=partyCarrierAccounts.iterator();
          while (pcaIter.hasNext()) {
            GenericValue partyCarrierAccount=(GenericValue)pcaIter.next();
            String carrierPartyId=partyCarrierAccount.getString("carrierPartyId");
            if (carrierPartyId.equals(orderItemShipGroup.getString("carrierPartyId"))) {
              String accountNumber=partyCarrierAccount.getString("accountNumber");
              bodyParameters.put("shipperId",accountNumber);
            }
          }
        }
      }
 catch (      GenericServiceException e) {
        String errMsg="Error preparing data for OAGIS Process Shipment message: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
catch (      GenericEntityException e) {
        String errMsg="Error preparing data for OAGIS Process Shipment message: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      String logicalId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID");
      bodyParameters.put("logicalId",logicalId);
      result.put("logicalId",logicalId);
      String authId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID");
      bodyParameters.put("authId",authId);
      result.put("authId",authId);
      String referenceId=delegator.getNextSeqId("OagisMessageInfo");
      bodyParameters.put("referenceId",referenceId);
      result.put("referenceId",referenceId);
      DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSS'Z'Z");
      Timestamp timestamp=UtilDateTime.nowTimestamp();
      String sentDate=dateFormat.format(timestamp);
      bodyParameters.put("sentDate",sentDate);
      result.put("sentDate",timestamp);
      bodyParameters.put("shipmentId",shipmentId);
      bodyParameters.put("orderId",orderId);
      bodyParameters.put("userLogin",userLogin);
      String bodyScreenUri=UtilProperties.getPropertyValue("oagis.properties","Oagis.Template.ProcessShipment");
      Writer writer=null;
      if (out != null) {
        writer=new OutputStreamWriter(out);
      }
 else       if (UtilValidate.isNotEmpty(saveToFilename)) {
        try {
          File outdir=new File(saveToDirectory);
          if (!outdir.exists()) {
            outdir.mkdir();
          }
          writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(outdir,saveToFilename)),"UTF-8")));
        }
 catch (        Exception e) {
          String errMsg="Error opening file to save message to [" + saveToFilename + "]: "+ e.toString();
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
      }
 else       if (UtilValidate.isNotEmpty(sendToUrl)) {
        writer=new StringWriter();
      }
      ScreenRenderer screens=new ScreenRenderer(writer,bodyParameters,new HtmlScreenRenderer());
      try {
        screens.render(bodyScreenUri);
        writer.close();
      }
 catch (      Exception e) {
        String errMsg="Error rendering message: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      if (UtilValidate.isNotEmpty(sendToUrl)) {
        HttpClient http=new HttpClient(sendToUrl);
        http.setHostVerificationLevel(SSLUtil.HOSTCERT_NO_CHECK);
        http.setAllowUntrusted(true);
        http.setDebug(true);
        if (UtilValidate.isNotEmpty(certAlias)) {
          http.setClientCertificateAlias(certAlias);
        }
        if (UtilValidate.isNotEmpty(basicAuthUsername)) {
          http.setBasicAuthInfo(basicAuthUsername,basicAuthPassword);
        }
        http.setContentType("text/xml");
        http.setKeepAlive(true);
        try {
          String resp=http.post(writer.toString());
        }
 catch (        Exception e) {
          String errMsg="Error posting message to server with UTL [" + sendToUrl + "]: "+ e.toString();
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
      }
      result.put("component","INVENTORY");
      result.put("task","SHIPREQUES");
      result.put("outgoingMessage","Y");
      result.put("confirmation","1");
      result.put("bsrVerb","PROCESS");
      result.put("bsrNoun","SHIPMENT");
      result.put("bsrRevision","001");
      result.put("processingStatusId",orderStatusId);
      result.put("orderId",orderId);
      result.put("shipmentId",shipmentId);
      result.put("userLogin",userLogin);
    }
  }
  return result;
}
