{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  Map csResult=null;
  Map psmMap=new HashMap();
  GenericValue orderItemShipGroup=null;
  GenericValue productStore=null;
  String orderStatusId=null;
  if (orderHeader != null) {
    orderStatusId=orderHeader.getString("statusId");
    if (orderStatusId.equals("ORDER_APPROVED")) {
      try {
        orderItemShipGroup=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGroup",UtilMisc.toMap("orderId",orderId),UtilMisc.toList("shipGroupSeqId")));
        String productStoreId=orderHeader.getString("productStoreId");
        productStore=delegator.findByPrimaryKey("ProductStore",UtilMisc.toMap("productStoreId",productStoreId));
        String originFacilityId=productStore.getString("inventoryFacilityId");
        String statusId="SHIPMENT_INPUT";
        csResult=dispatcher.runSync("createShipment",UtilMisc.toMap("primaryOrderId",orderId,"primaryShipGroupSeqId",orderItemShipGroup.get("shipGroupSeqId"),"statusId",statusId,"originFacilityId",originFacilityId,"userLogin",userLogin));
        shipmentId=(String)csResult.get("shipmentId");
        List orderItems=new ArrayList();
        Map orderItemCtx=new HashMap();
        orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId));
        Iterator oiIter=orderItems.iterator();
        while (oiIter.hasNext()) {
          GenericValue orderItem=(GenericValue)oiIter.next();
          orderItemCtx.put("orderId",orderItem.get("orderId"));
          orderItemCtx.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
          orderItemCtx.put("shipmentId",shipmentId);
          orderItemCtx.put("quantity",orderItem.get("quantity"));
          orderItemCtx.put("userLogin",userLogin);
          dispatcher.runSync("addOrderShipmentToShipment",orderItemCtx);
        }
        String logicalId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID");
        String authId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID");
        String referenceId=delegator.getNextSeqId("OagisMessageInfo");
        Timestamp timestamp=null;
        timestamp=UtilDateTime.nowTimestamp();
        psmMap.put("logicalId",logicalId);
        psmMap.put("authId",authId);
        psmMap.put("referenceId",referenceId);
        psmMap.put("sentDate",timestamp);
        psmMap.put("shipmentId",shipmentId);
        psmMap.put("userLogin",userLogin);
        dispatcher.runSync("sendProcessShipmentMsg",psmMap);
      }
 catch (      Exception e) {
        Debug.logError("Error in processing" + e.getMessage(),module);
      }
    }
  }
  psmMap.put("component","INVENTORY");
  psmMap.put("task","SHIPREQUES");
  psmMap.put("outgoingMessage","Y");
  psmMap.put("confirmation","1");
  psmMap.put("bsrVerb","PROCESS");
  psmMap.put("bsrNoun","SHIPMENT");
  psmMap.put("bsrRevision","001");
  psmMap.put("processingStatusId",orderStatusId);
  psmMap.put("orderId",orderId);
  try {
    dispatcher.runSync("createOagisMessageInfo",psmMap);
  }
 catch (  Exception e) {
    return ServiceUtil.returnError("error in creating message info" + e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
