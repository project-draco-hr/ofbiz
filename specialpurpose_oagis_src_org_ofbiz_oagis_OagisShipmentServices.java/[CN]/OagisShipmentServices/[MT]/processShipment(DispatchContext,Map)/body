{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Map result=ServiceUtil.returnSuccess();
  MapStack bodyParameters=MapStack.create();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","admin"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting userLogin",module);
    }
  }
  GenericValue orderHeader=null;
  GenericValue orderItemShipGroup=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  GenericValue shipment=null;
  if (orderHeader != null) {
    String orderStatusId=orderHeader.getString("statusId");
    if (orderStatusId.equals("ORDER_APPROVED")) {
      try {
        Map cospResult=dispatcher.runSync("createOrderShipmentPlan",UtilMisc.toMap("orderId",orderId,"userLogin",userLogin));
        shipmentId=(String)cospResult.get("shipmentId");
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      try {
        shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
        bodyParameters.put("shipment",shipment);
        OrderReadHelper orderReadHelper=new OrderReadHelper(orderHeader);
        if (orderReadHelper.hasShippingAddress()) {
          GenericValue address=EntityUtil.getFirst(orderReadHelper.getShippingLocations());
          bodyParameters.put("address",address);
        }
        String emailString=orderReadHelper.getOrderEmailString();
        bodyParameters.put("emailString",emailString);
        String contactMechId=shipment.getString("destinationTelecomNumberId");
        GenericValue telecomNumber=delegator.findByPrimaryKey("TelecomNumber",UtilMisc.toMap("contactMechId",contactMechId));
        bodyParameters.put("telecomNumber",telecomNumber);
        List shipmentItems=delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId));
        bodyParameters.put("shipmentItems",shipmentItems);
        orderItemShipGroup=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGroup",UtilMisc.toMap("orderId",orderId)));
        bodyParameters.put("orderItemShipGroup",orderItemShipGroup);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      Set correspondingPoIdSet=new TreeSet();
      try {
        List orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",shipment.getString("primaryOrderId")));
        Iterator oiIter=orderItems.iterator();
        while (oiIter.hasNext()) {
          GenericValue orderItem=(GenericValue)oiIter.next();
          String correspondingPoId=orderItem.getString("correspondingPoId");
          correspondingPoIdSet.add(correspondingPoId);
          bodyParameters.put("correspondingPoIdSet",correspondingPoIdSet);
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      Set externalIdSet=new TreeSet();
      try {
        GenericValue primaryOrderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",shipment.getString("primaryOrderId")));
        externalIdSet.add(primaryOrderHeader.getString("externalId"));
        bodyParameters.put("externalIdSet",externalIdSet);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      List returnItemResponses=null;
      List returnItemRespExprs=UtilMisc.toList(new EntityExpr("replacementOrderId",EntityOperator.NOT_EQUAL,null));
      EntityCondition returnItemRespCond=new EntityConditionList(returnItemRespExprs,EntityOperator.AND);
      List fieldsToSelect=FastList.newInstance();
      fieldsToSelect.add("replacementOrderId");
      try {
        returnItemResponses=delegator.findByCondition("ReturnItemResponse",returnItemRespCond,fieldsToSelect,null);
        Iterator rirIter=returnItemResponses.iterator();
        while (rirIter.hasNext()) {
          if (rirIter.next().equals(shipment.getString("primaryOrderId"))) {
            bodyParameters.put("shipnotes","RETURNLABEL");
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      String logicalId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID");
      bodyParameters.put("logicalId",logicalId);
      result.put("logicalId",logicalId);
      String authId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID");
      bodyParameters.put("authId",authId);
      result.put("authId",authId);
      String referenceId=delegator.getNextSeqId("OagisMessageInfo");
      bodyParameters.put("referenceId",referenceId);
      result.put("referenceId",referenceId);
      DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSS'Z'Z");
      Timestamp timestamp=UtilDateTime.nowTimestamp();
      String sentDate=dateFormat.format(timestamp);
      bodyParameters.put("sentDate",sentDate);
      result.put("sentDate",timestamp);
      String partyId=shipment.getString("partyIdTo");
      List partyCarrierAccounts=new ArrayList();
      try {
        partyCarrierAccounts=delegator.findByAnd("PartyCarrierAccount",UtilMisc.toMap("partyId",partyId));
        partyCarrierAccounts=EntityUtil.filterByDate(partyCarrierAccounts);
        if (partyCarrierAccounts != null) {
          Iterator pcaIter=partyCarrierAccounts.iterator();
          while (pcaIter.hasNext()) {
            GenericValue partyCarrierAccount=(GenericValue)pcaIter.next();
            String carrierPartyId=partyCarrierAccount.getString("carrierPartyId");
            if (carrierPartyId.equals(orderItemShipGroup.getString("carrierPartyId"))) {
              String accountNumber=partyCarrierAccount.getString("accountNumber");
              bodyParameters.put("shipperId",accountNumber);
            }
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      bodyParameters.put("shipmentId",shipmentId);
      bodyParameters.put("orderId",orderId);
      bodyParameters.put("userLogin",userLogin);
      String bodyScreenUri=UtilProperties.getPropertyValue("oagis.properties","Oagis.Template.ProcessShipment");
      OutputStream out=(OutputStream)context.get("outputStream");
      Writer writer=new OutputStreamWriter(out);
      ScreenRenderer screens=new ScreenRenderer(writer,bodyParameters,new HtmlScreenRenderer());
      try {
        screens.render(bodyScreenUri);
      }
 catch (      Exception e) {
        Debug.logError(e,"Error rendering [text/xml]: ",module);
      }
      result.put("component","INVENTORY");
      result.put("task","SHIPREQUES");
      result.put("outgoingMessage","Y");
      result.put("confirmation","1");
      result.put("bsrVerb","PROCESS");
      result.put("bsrNoun","SHIPMENT");
      result.put("bsrRevision","001");
      result.put("processingStatusId",orderStatusId);
      result.put("orderId",orderId);
      result.put("shipmentId",shipmentId);
      result.put("userLogin",userLogin);
    }
  }
  return result;
}
