{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  String shipmentId=(String)context.get("shipmentId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  GenericValue orderItemShipGroup=null;
  GenericValue productStore=null;
  GenericValue shipment=null;
  if (orderHeader != null) {
    String orderStatusId=orderHeader.getString("statusId");
    if (orderStatusId.equals("ORDER_APPROVED")) {
      try {
        orderItemShipGroup=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGroup",UtilMisc.toMap("orderId",orderId),UtilMisc.toList("shipGroupSeqId")));
        String productStoreId=orderHeader.getString("productStoreId");
        productStore=delegator.findByPrimaryKey("ProductStore",UtilMisc.toMap("productStoreId",productStoreId));
        String originFacilityId=productStore.getString("inventoryFacilityId");
        String statusId="SHIPMENT_INPUT";
        Map result=dispatcher.runSync("createShipment",UtilMisc.toMap("primaryOrderId",orderId,"primaryShipGroupSeqId",orderItemShipGroup.get("shipGroupSeqId"),"statusId",statusId,"originFacilityId",originFacilityId,"userLogin",userLogin));
        shipmentId=(String)result.get("shipmentId");
        shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
        List orderItems=new ArrayList();
        Map orderItemCtx=new HashMap();
        orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId));
        Iterator oiIter=orderItems.iterator();
        while (oiIter.hasNext()) {
          GenericValue orderItem=(GenericValue)oiIter.next();
          orderItemCtx.put("orderId",orderId);
          orderItemCtx.put("orderItemSeqId",orderItem.get("orderItemSeqId"));
          orderItemCtx.put("shipmentId",shipmentId);
          orderItemCtx.put("quantity",orderItem.get("quantity"));
          orderItemCtx.put("userLogin",userLogin);
          dispatcher.runSync("addOrderShipmentToShipment",orderItemCtx);
        }
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      Set correspondingPoIdSet=new TreeSet();
      try {
        List orderItems=orderHeader.getRelated("OrderItem");
        Iterator oiIter=orderItems.iterator();
        while (oiIter.hasNext()) {
          GenericValue orderItem=(GenericValue)oiIter.next();
          String correspondingPoId=orderItem.getString("correspondingPoId");
          correspondingPoIdSet.add(correspondingPoId);
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      Set externalIdSet=new TreeSet();
      try {
        GenericValue shipmentOrderHeader=shipment.getRelatedOne("PrimaryOrderHeader");
        externalIdSet.add(shipmentOrderHeader.getString("externalId"));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      String logicalId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID");
      String authId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID");
      MapStack bodyParameters=MapStack.create();
      bodyParameters.put("logicalId",logicalId);
      bodyParameters.put("authId",authId);
      String referenceId=delegator.getNextSeqId("OagisMessageInfo");
      bodyParameters.put("referenceId",referenceId);
      DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSS'Z'Z");
      Timestamp timestamp=UtilDateTime.nowTimestamp();
      String sentDate=dateFormat.format(timestamp);
      bodyParameters.put("sentDate",sentDate);
      String partyId=shipment.getString("partyIdTo");
      List partyCarrierAccounts=new ArrayList();
      try {
        partyCarrierAccounts=delegator.findByAnd("PartyCarrierAccount",UtilMisc.toMap("partyId",partyId));
        partyCarrierAccounts=EntityUtil.filterByDate(partyCarrierAccounts);
        if (partyCarrierAccounts != null) {
          Iterator pcaIter=partyCarrierAccounts.iterator();
          while (pcaIter.hasNext()) {
            GenericValue partyCarrierAccount=(GenericValue)pcaIter.next();
            String carrierPartyId=partyCarrierAccount.getString("carrierPartyId");
            if (carrierPartyId.equals(orderItemShipGroup.getString("carrierPartyId"))) {
              String accountNumber=partyCarrierAccount.getString("accountNumber");
              bodyParameters.put("shipperId",accountNumber);
            }
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      bodyParameters.put("shipmentId",shipmentId);
      bodyParameters.put("orderId",orderId);
      bodyParameters.put("correspondingPoIdSet",correspondingPoIdSet);
      bodyParameters.put("externalIdSet",externalIdSet);
      bodyParameters.put("userLogin",userLogin);
      String bodyScreenUri=UtilProperties.getPropertyValue("oagis.properties","Oagis.Template.ProcessShipment");
      OutputStream out=(OutputStream)context.get("outputStream");
      Writer writer=new OutputStreamWriter(out);
      ScreenRenderer screens=new ScreenRenderer(writer,bodyParameters,new HtmlScreenRenderer());
      try {
        screens.render(bodyScreenUri);
      }
 catch (      Exception e) {
        Debug.logError(e,"Error rendering [text/xml]: ",module);
      }
      Map comiCtx=new HashMap();
      comiCtx.put("logicalId",logicalId);
      comiCtx.put("component","INVENTORY");
      comiCtx.put("task","SHIPREQUES");
      comiCtx.put("referenceId",referenceId);
      comiCtx.put("authId",authId);
      comiCtx.put("outgoingMessage","Y");
      comiCtx.put("sentDate",timestamp);
      comiCtx.put("confirmation","1");
      comiCtx.put("bsrVerb","PROCESS");
      comiCtx.put("bsrNoun","SHIPMENT");
      comiCtx.put("bsrRevision","001");
      comiCtx.put("processingStatusId",orderStatusId);
      comiCtx.put("orderId",orderId);
      comiCtx.put("shipmentId",shipmentId);
      comiCtx.put("userLogin",userLogin);
      try {
        dispatcher.runSync("createOagisMessageInfo",comiCtx);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",locale);
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
    }
  }
  return ServiceUtil.returnSuccess("Service Completed Successfully");
}
