{
  Document doc=(Document)context.get("document");
  boolean isErrorRetry=Boolean.TRUE.equals(context.get("isErrorRetry"));
  Locale locale=(Locale)context.get("locale");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Delegator delegator=ctx.getDelegator();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  List<Map<String,String>> errorMapList=FastList.newInstance();
  GenericValue userLogin=null;
  try {
    userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin with userLoginId system: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element showShipmentElement=doc.getDocumentElement();
  showShipmentElement.normalize();
  Element controlAreaElement=UtilXml.firstChildElement(showShipmentElement,"os:CNTROLAREA");
  Element bsrElement=UtilXml.firstChildElement(controlAreaElement,"os:BSR");
  String bsrVerb=UtilXml.childElementValue(bsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(bsrElement,"of:NOUN");
  String bsrRevision=UtilXml.childElementValue(bsrElement,"of:REVISION");
  Map<String,Object> oagisMsgInfoCtx=UtilMisc.toMap("bsrVerb",(Object)bsrVerb,"bsrNoun",bsrNoun,"bsrRevision",bsrRevision);
  Element senderElement=UtilXml.firstChildElement(controlAreaElement,"os:SENDER");
  String logicalId=UtilXml.childElementValue(senderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(senderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(senderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(senderElement,"of:REFERENCEID");
  String confirmation=UtilXml.childElementValue(senderElement,"of:CONFIRMATION");
  String authId=UtilXml.childElementValue(senderElement,"of:AUTHID");
  String sentDate=UtilXml.childElementValue(controlAreaElement,"os:DATETIMEISO");
  Timestamp sentTimestamp=OagisServices.parseIsoDateString(sentDate,errorMapList);
  Element dataAreaElement=UtilXml.firstChildElement(showShipmentElement,"ns:DATAAREA");
  Element daShowShipmentElement=UtilXml.firstChildElement(dataAreaElement,"ns:SHOW_SHIPMENT");
  Element shipmentElement=UtilXml.firstChildElement(daShowShipmentElement,"ns:SHIPMENT");
  String shipmentId=UtilXml.childElementValue(shipmentElement,"of:DOCUMENTID");
  Map<String,String> omiPkMap=UtilMisc.toMap("logicalId",logicalId,"component",component,"task",task,"referenceId",referenceId);
  Debug.logInfo("Processing oagisReceiveShowShipment for shipmentId [" + shipmentId + "] message ID ["+ omiPkMap+ "]",module);
  GenericValue previousOagisMessageInfo=null;
  try {
    previousOagisMessageInfo=delegator.findOne("OagisMessageInfo",omiPkMap,false);
  }
 catch (  GenericEntityException e) {
    String errMsg="Error getting OagisMessageInfo from database for shipment ID [" + shipmentId + "] message ID ["+ omiPkMap+ "]: "+ e.toString();
    Debug.logInfo(e,errMsg,module);
  }
  if (previousOagisMessageInfo != null && !isErrorRetry) {
    if ("OAGMP_SYS_ERROR".equals(previousOagisMessageInfo.getString("processingStatusId"))) {
      isErrorRetry=true;
    }
 else {
      Debug.logError("Message received for shipmentId [" + shipmentId + "] message ID ["+ omiPkMap+ "] was already partially processed but is not in a system error state, needs manual review; message ID: "+ omiPkMap,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisErrorMessageAlreadyProcessed",UtilMisc.toMap("shipmentId",shipmentId,"omiPkMap",omiPkMap),locale));
    }
  }
  oagisMsgInfoCtx.putAll(omiPkMap);
  oagisMsgInfoCtx.put("confirmation",confirmation);
  oagisMsgInfoCtx.put("authId",authId);
  oagisMsgInfoCtx.put("outgoingMessage","N");
  oagisMsgInfoCtx.put("receivedDate",nowTimestamp);
  oagisMsgInfoCtx.put("sentDate",sentTimestamp);
  oagisMsgInfoCtx.put("shipmentId",shipmentId);
  oagisMsgInfoCtx.put("userLogin",userLogin);
  oagisMsgInfoCtx.put("processingStatusId","OAGMP_RECEIVED");
  if (OagisServices.debugSaveXmlIn) {
    try {
      oagisMsgInfoCtx.put("fullMessageXml",UtilXml.writeXmlDocument(doc));
    }
 catch (    IOException e) {
      String errMsg="Warning: error creating text from XML Document for saving to database: " + e.toString();
      Debug.logWarning(errMsg,module);
    }
  }
  try {
    if (isErrorRetry) {
      dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
 else {
      dispatcher.runSync("createOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  GenericValue shipment=null;
  try {
    shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();
  }
 catch (  GenericEntityException e) {
    String errMsg="Error getting Shipment from database for ID [" + shipmentId + "]: "+ e.toString();
    Debug.logInfo(e,errMsg,module);
    errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","GenericEntityException"));
  }
  if (shipment == null) {
    String errMsg="Could not find Shipment ID [" + shipmentId + "]";
    errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","ShipmentIdNotValid"));
  }
 else {
    if (invalidShipmentStatusSet.contains(shipment.get("statusId"))) {
      String errMsg="Shipment with ID [" + shipmentId + "] is in a status ["+ shipment.get("statusId")+ "] that means it has been or is being shipped, so this Show Shipment message may be a duplicate.";
      errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","ShipmentInBadStatus"));
    }
  }
  List<? extends Element> shipUnitElementList=UtilXml.childElementList(daShowShipmentElement,"ns:SHIPUNIT");
  if (errorMapList.size() == 0 && UtilValidate.isNotEmpty(shipUnitElementList)) {
    try {
      String shipGroupSeqId=shipment.getString("primaryShipGroupSeqId");
      String originFacilityId=shipment.getString("originFacilityId");
      Element shipUnitFirstElement=shipUnitElementList.get(0);
      String trackingNum=UtilXml.childElementValue(shipUnitFirstElement,"of:TRACKINGID");
      String carrierCode=UtilXml.childElementValue(shipUnitFirstElement,"of:CARRIER");
      if (UtilValidate.isNotEmpty(carrierCode)) {
        String carrierPartyId=null;
        if (carrierCode.startsWith("F") || carrierCode.startsWith("f")) {
          carrierPartyId="FEDEX";
        }
 else         if (carrierCode.startsWith("U") || carrierCode.startsWith("u")) {
          carrierPartyId="UPS";
        }
        Map<String,Object> resultMap=dispatcher.runSync("updateShipmentRouteSegment",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"shipmentRouteSegmentId","00001","carrierPartyId",carrierPartyId,"trackingIdNumber",trackingNum,"userLogin",userLogin));
        if (ServiceUtil.isError(resultMap)) {
          String errMsg=ServiceUtil.getErrorMessage(resultMap);
          errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","updateShipmentRouteSegmentError"));
          Debug.logError(errMsg,module);
        }
      }
      for (      Element shipUnitElement : shipUnitElementList) {
        String shipmentPackageSeqId=UtilXml.childElementValue(shipUnitElement,"of:SHPUNITSEQ");
        List<? extends Element> invItemElementList=UtilXml.childElementList(shipUnitElement,"ns:INVITEM");
        if (UtilValidate.isNotEmpty(invItemElementList)) {
          List<Map<String,Object>> invitemMapList=FastList.newInstance();
          boolean foundBadProductId=false;
          for (          Element invItemElement : invItemElementList) {
            String productId=UtilXml.childElementValue(invItemElement,"of:ITEM");
            GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();
            if (product == null) {
              String errMsg="Product with ID [" + productId + "] not found (invalid Product ID).";
              errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","ProductIdNotValid","description",errMsg));
              Debug.logError(errMsg,module);
              foundBadProductId=true;
              continue;
            }
            Map<String,Object> invitemMap=FastMap.newInstance();
            invitemMap.put("productId",productId);
            UtilMisc.addToListInMap(invItemElement,invitemMap,"invItemElementList");
            invitemMapList.add(invitemMap);
          }
          if (foundBadProductId) {
            continue;
          }
          invitemMapList=UtilGenerics.cast(UtilMisc.sortMaps(UtilGenerics.<List<Map<Object,Object>>>cast(invitemMapList),UtilMisc.toList("productId")));
          for (          Map<String,Object> invitemMap : invitemMapList) {
            List<Element> localInvItemElementList=UtilGenerics.checkList(invitemMap.get("invItemElementList"),Element.class);
            for (            Element invItemElement : localInvItemElementList) {
              String productId=UtilXml.childElementValue(invItemElement,"of:ITEM");
              String possibleShipmentItemSeqId=null;
              if (UtilValidate.isNotEmpty(shipmentPackageSeqId)) {
                possibleShipmentItemSeqId=UtilFormatOut.formatPaddedNumber(Long.parseLong(shipmentPackageSeqId),5);
              }
              Element quantityElement=UtilXml.firstChildElement(invItemElement,"os:QUANTITY");
              String quantityValueStr=UtilXml.childElementValue(quantityElement,"of:VALUE");
              Integer messageQuantity=Integer.valueOf(quantityValueStr);
              List<GenericValue> shipmentItemList=null;
              if (invitemMapList.size() == 1 && localInvItemElementList.size() == 1 && UtilValidate.isNotEmpty(possibleShipmentItemSeqId)) {
                GenericValue shipmentItem=EntityQuery.use(delegator).from("ShipmentItem").where("shipmentId",shipmentId,"shipmentItemSeqId",possibleShipmentItemSeqId).queryOne();
                if (shipmentItem != null && !productId.equals(shipmentItem.getString("productId"))) {
                  shipmentItem=null;
                }
                if (shipmentItem != null) {
                  Debug.logInfo("For Shipment [" + shipmentId + "] found ShipmentItem based on Package/Unit ID, possibleShipmentItemSeqId is ["+ possibleShipmentItemSeqId+ "]",module);
                  shipmentItemList=UtilMisc.toList(shipmentItem);
                }
              }
              if (UtilValidate.isEmpty(shipmentItemList)) {
                shipmentItemList=delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId,"productId",productId),null,false);
                if (UtilValidate.isEmpty(shipmentItemList)) {
                  String errMsg="Could not find Shipment Item for Shipment with ID [" + shipmentId + "] and Product with ID ["+ productId+ "].";
                  errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","ShipmentItemForProductNotFound","description",errMsg));
                  Debug.logError(errMsg,module);
                  continue;
                }
                for (                GenericValue shipmentItem : shipmentItemList) {
                  if (messageQuantity.intValue() == shipmentItem.getDouble("quantity").intValue()) {
                    List<GenericValue> itemIssuanceList=delegator.findByAnd("ItemIssuance",UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItem.get("shipmentItemSeqId")),null,false);
                    if (itemIssuanceList.size() == 0) {
                      shipmentItemList=UtilMisc.toList(shipmentItem);
                      break;
                    }
                  }
                }
              }
              if (shipmentItemList.size() > 1) {
                String errMsg="Could not find single Shipment Item for Shipment with ID [" + shipmentId + "] and Product with ID ["+ productId+ "], found ["+ shipmentItemList.size()+ "] and could not narrow down to one.";
                errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","SingleShipmentItemForProductNotFound","description",errMsg));
                Debug.logError(errMsg,module);
                continue;
              }
              GenericValue shipmentItem=shipmentItemList.get(0);
              String shipmentItemSeqId=shipmentItem.getString("shipmentItemSeqId");
              GenericValue orderShipment=EntityUtil.getFirst(delegator.findByAnd("OrderShipment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItemSeqId),null,false));
              if (orderShipment == null) {
                String errMsg="Could not find Order-Shipment record for ShipmentItem with ID [" + shipmentId + "] and Item Seq-ID ["+ shipmentItemSeqId+ "].";
                errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","OrderShipmentNotFound","description",errMsg));
                Debug.logError(errMsg,module);
                continue;
              }
              String orderId=orderShipment.getString("orderId");
              String orderItemSeqId=orderShipment.getString("orderItemSeqId");
              GenericValue product=delegator.findOne("Product",UtilMisc.toMap("productId",productId),false);
              String requireInventory=product.getString("requireInventory");
              if (requireInventory == null) {
                requireInventory="N";
              }
              List<GenericValue> orderItemShipGrpInvReservationList=delegator.findByAnd("OrderItemShipGrpInvRes",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId),null,false);
              int totalReserved=0;
              for (              GenericValue orderItemShipGrpInvReservation : orderItemShipGrpInvReservationList) {
                if (orderItemShipGrpInvReservation.getDouble("quantity") != null) {
                  totalReserved+=orderItemShipGrpInvReservation.getDouble("quantity").doubleValue();
                }
              }
              List<String> serialNumberList=FastList.newInstance();
              List<? extends Element> invDetailElementList=UtilXml.childElementList(invItemElement,"ns:INVDETAIL");
              for (              Element invDetailElement : invDetailElementList) {
                String serialNumber=UtilXml.childElementValue(invDetailElement,"of:SERIALNUM");
                if (UtilValidate.isNotEmpty(serialNumber)) {
                  serialNumberList.add(serialNumber);
                }
              }
              if (UtilValidate.isNotEmpty(serialNumberList)) {
                if (messageQuantity.intValue() != serialNumberList.size()) {
                  String errMsg="Error: the quantity in the message [" + messageQuantity.intValue() + "] did not match the number of serial numbers passed ["+ serialNumberList.size()+ "] for ShipmentItem with ID ["+ shipmentId+ "] and Item Seq-ID ["+ shipmentItemSeqId+ "].";
                  errorMapList.add(UtilMisc.<String,String>toMap("reasonCode","QuantitySerialMismatch","description",errMsg));
                  Debug.logInfo(errMsg,module);
                  continue;
                }
              }
              if (totalReserved < messageQuantity.intValue()) {
                String errMsg="Inventory reservation quantity [" + totalReserved + "] was less than the message quantity ["+ messageQuantity.intValue()+ "] so cannot receive against reservations for ShipmentItem with ID ["+ shipmentId+ ":"+ shipmentItemSeqId+ "], and OrderItem ["+ orderShipment.getString("orderId")+ ":"+ orderShipment.getString("orderItemSeqId")+ "]";
                errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SerialNumbersMissing"));
                Debug.logInfo(errMsg,module);
                continue;
              }
              int quantityLeft;
              int shipmentItemQuantity=shipmentItem.getDouble("quantity").intValue();
              if (shipmentItemQuantity <= messageQuantity.intValue()) {
                quantityLeft=shipmentItemQuantity;
              }
 else {
                quantityLeft=messageQuantity.intValue();
              }
              for (              GenericValue orderItemShipGrpInvReservation : orderItemShipGrpInvReservationList) {
                if (quantityLeft <= 0) {
                  break;
                }
                int currentInvResQuantity=orderItemShipGrpInvReservation.getDouble("quantity").intValue();
                int quantityToUse;
                if (quantityLeft > currentInvResQuantity) {
                  quantityToUse=currentInvResQuantity;
                  quantityLeft-=currentInvResQuantity;
                }
 else {
                  quantityToUse=quantityLeft;
                  quantityLeft=0;
                }
                Map<String,Object> isitspastCtx=UtilMisc.toMap("orderId",(Object)orderId,"shipGroupSeqId",shipGroupSeqId,"orderItemSeqId",orderItemSeqId);
                isitspastCtx.put("productId",productId);
                isitspastCtx.put("reservedDatetime",orderItemShipGrpInvReservation.get("reservedDatetime"));
                isitspastCtx.put("requireInventory",requireInventory);
                isitspastCtx.put("reserveOrderEnumId",orderItemShipGrpInvReservation.get("reserveOrderEnumId"));
                isitspastCtx.put("sequenceId",orderItemShipGrpInvReservation.get("sequenceId"));
                isitspastCtx.put("originFacilityId",originFacilityId);
                isitspastCtx.put("userLogin",userLogin);
                isitspastCtx.put("trackingNum",trackingNum);
                isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
                isitspastCtx.put("shipmentId",shipmentId);
                isitspastCtx.put("shipmentPackageSeqId",shipmentPackageSeqId);
                isitspastCtx.put("promisedDatetime",orderItemShipGrpInvReservation.get("promisedDatetime"));
                if (UtilValidate.isNotEmpty(serialNumberList)) {
                  for (int i=0; i < quantityToUse; i++) {
                    String serialNumber=serialNumberList.get(i);
                    if (OagisServices.requireSerialNumberExist != null) {
                      Set<String> productIdSet=ProductWorker.getRefurbishedProductIdSet(productId,delegator);
                      productIdSet.add(productId);
                      EntityCondition bySerialNumberCondition=EntityCondition.makeCondition(EntityCondition.makeCondition("serialNumber",EntityOperator.EQUALS,serialNumber),EntityOperator.AND,EntityCondition.makeCondition("productId",EntityOperator.IN,productIdSet));
                      List<GenericValue> inventoryItemsBySerialNumber=delegator.findList("InventoryItem",bySerialNumberCondition,null,null,null,false);
                      if (OagisServices.requireSerialNumberExist.booleanValue()) {
                        if (inventoryItemsBySerialNumber.size() == 0) {
                          String errMsg="Referenced serial numbers must already exist, but serial number [" + serialNumber + "] was not found. Product ID(s) considered are: "+ productIdSet;
                          errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SerialNumberRequiredButNotFound"));
                          continue;
                        }
                      }
 else {
                        if (inventoryItemsBySerialNumber.size() > 0) {
                          String errMsg="Referenced serial numbers must NOT already exist, but serial number [" + serialNumber + "] already exists. Product ID(s) considered are: "+ productIdSet;
                          errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SerialNumberRequiredNotExistButFound"));
                          continue;
                        }
                      }
                    }
                    isitspastCtx.put("serialNumber",serialNumber);
                    isitspastCtx.put("quantity",new Double(1));
                    isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
                    isitspastCtx.remove("itemIssuanceId");
                    Map<String,Object> resultMap=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
                    if (ServiceUtil.isError(resultMap)) {
                      String errMsg=ServiceUtil.getErrorMessage(resultMap);
                      errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","IssueSerializedInvServiceError"));
                      Debug.logError(errMsg,module);
                    }
                  }
                }
 else {
                  isitspastCtx.put("quantity",new Double(quantityToUse));
                  Map<String,Object> resultMap=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
                  if (ServiceUtil.isError(resultMap)) {
                    String errMsg=ServiceUtil.getErrorMessage(resultMap);
                    errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","IssueSerializedInvServiceError"));
                    Debug.logError(errMsg,module);
                  }
                }
              }
            }
          }
        }
      }
      if (errorMapList.size() == 0) {
        List<GenericValue> shipmentItemList=delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId),null,false);
        for (        GenericValue shipmentItem : shipmentItemList) {
          int shipmentItemQuantity=shipmentItem.getDouble("quantity").intValue();
          int totalItemIssuanceQuantity=0;
          List<GenericValue> itemIssuanceList=delegator.findByAnd("ItemIssuance",UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItem.get("shipmentItemSeqId")),null,false);
          for (          GenericValue itemIssuance : itemIssuanceList) {
            totalItemIssuanceQuantity+=itemIssuance.getDouble("quantity").intValue();
          }
          if (shipmentItemQuantity > totalItemIssuanceQuantity) {
            String errMsg="ShipmentItem [" + shipmentId + ":"+ shipmentItem.get("shipmentItemSeqId")+ "] was not completely fulfilled; shipment item quantity was ["+ shipmentItemQuantity+ "], but total fulfilled is only ["+ totalItemIssuanceQuantity+ "]";
            errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","ShipmentItemNotCompletelyFulfilled"));
            Debug.logError(errMsg,module);
          }
        }
      }
      if (errorMapList.size() == 0) {
        Map<String,Object> resultMap=dispatcher.runSync("setShipmentStatusPackedAndShipped",UtilMisc.toMap("shipmentId",shipmentId,"userLogin",userLogin));
        if (ServiceUtil.isError(resultMap)) {
          String errMsg=ServiceUtil.getErrorMessage(resultMap);
          errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SetShipmentStatusPackedAndShippedError"));
          Debug.logError(errMsg,module);
        }
      }
    }
 catch (    Throwable t) {
      String errMsg=UtilProperties.getMessage(resource,"OagisErrorMessageShowShipment",UtilMisc.toMap("shipmentId",shipmentId,"omiPkMap",omiPkMap),locale);
      errorMapList.add(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SystemError"));
      try {
        oagisMsgInfoCtx.put("processingStatusId","OAGMP_SYS_ERROR");
        dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
        Map<String,Object> saveErrorMapListCtx=FastMap.newInstance();
        saveErrorMapListCtx.putAll(omiPkMap);
        saveErrorMapListCtx.put("errorMapList",errorMapList);
        saveErrorMapListCtx.put("userLogin",userLogin);
        dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
      }
 catch (      GenericServiceException e) {
        String errMsg2="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
        Debug.logError(e,errMsg2,module);
      }
      Debug.logInfo(t,errMsg,module);
      return ServiceUtil.returnError(errMsg + t.toString());
    }
  }
  Map<String,Object> result=FastMap.newInstance();
  result.putAll(omiPkMap);
  result.put("userLogin",userLogin);
  if (errorMapList.size() > 0) {
    try {
      oagisMsgInfoCtx.put("processingStatusId","OAGMP_PROC_ERROR");
      dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    try {
      Map<String,Object> saveErrorMapListCtx=FastMap.newInstance();
      saveErrorMapListCtx.putAll(omiPkMap);
      saveErrorMapListCtx.put("errorMapList",errorMapList);
      saveErrorMapListCtx.put("userLogin",userLogin);
      dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    try {
      Map<String,Object> sendConfirmBodCtx=FastMap.newInstance();
      sendConfirmBodCtx.putAll(omiPkMap);
      sendConfirmBodCtx.put("errorMapList",errorMapList);
      sendConfirmBodCtx.put("userLogin",userLogin);
      sendConfirmBodCtx.put("origRefId",shipmentId);
      dispatcher.runAsync("oagisSendConfirmBod",sendConfirmBodCtx,null,true,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error sending Confirm BOD: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    String errMsg=UtilProperties.getMessage(resource,"OagisErrorBusinessLevel",UtilMisc.toMap("errorString",""),locale) + errorMapList.get(0).toString();
    result.putAll(ServiceUtil.returnSuccess(errMsg));
    try {
      TransactionUtil.setRollbackOnly(errMsg,null);
    }
 catch (    GenericTransactionException e) {
      Debug.logError(e,"Error setting rollback only ",module);
    }
    return result;
  }
 else {
    try {
      oagisMsgInfoCtx.put("processingStatusId","OAGMP_PROC_SUCCESS");
      dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  result.putAll(ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OagisServiceCompletedSuccessfully",locale)));
  return result;
}
