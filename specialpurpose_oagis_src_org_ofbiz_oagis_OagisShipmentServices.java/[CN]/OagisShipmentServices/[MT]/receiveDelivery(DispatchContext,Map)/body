{
  GenericDelegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Map result=ServiceUtil.returnSuccess();
  MapStack bodyParameters=MapStack.create();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","admin"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting userLogin",module);
    }
  }
  if (returnId != null) {
    GenericValue returnHeader=null;
    String statusId=null;
    try {
      returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
      statusId=returnHeader.getString("statusId");
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    if (statusId.equals("RETURN_ACCEPTED")) {
      try {
        List returnItems=delegator.findByAnd("ReturnItem",UtilMisc.toMap("returnId",returnId));
        bodyParameters.put("returnItems",returnItems);
        String orderId=EntityUtil.getFirst(returnItems).getString("orderId");
        result.put("orderId",orderId);
        GenericValue postalAddress=delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",returnHeader.getString("originContactMechId")));
        bodyParameters.put("postalAddress",postalAddress);
        double itemQty=0.0;
        double totalQty=0.0;
        Iterator riIter=returnItems.iterator();
        while (riIter.hasNext()) {
          GenericValue returnItem=(GenericValue)riIter.next();
          itemQty=returnItem.getDouble("returnQuantity").doubleValue();
          totalQty=totalQty + itemQty;
        }
        bodyParameters.put("totalQty",new Double(totalQty));
        String partyId=returnHeader.getString("fromPartyId");
        List partyContactMechs=delegator.findByAnd("PartyContactMech",UtilMisc.toMap("partyId",partyId));
        Iterator pcmIter=partyContactMechs.iterator();
        while (pcmIter.hasNext()) {
          GenericValue partyContactMech=(GenericValue)pcmIter.next();
          String contactMechId=partyContactMech.getString("contactMechId");
          GenericValue contactMech=delegator.findByPrimaryKey("ContactMech",UtilMisc.toMap("contactMechId",contactMechId));
          String contactMechTypeId=contactMech.getString("contactMechTypeId");
          if (contactMechTypeId.equals("EMAIL_ADDRESS")) {
            String emailString=contactMech.getString("infoString");
            bodyParameters.put("emailString",emailString);
          }
          if (contactMechTypeId.equals("TELECOM_NUMBER")) {
            GenericValue telecomNumber=delegator.findByPrimaryKey("TelecomNumber",UtilMisc.toMap("contactMechId",contactMechId));
            bodyParameters.put("telecomNumber",telecomNumber);
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      String logicalId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID");
      bodyParameters.put("logicalId",logicalId);
      result.put("logicalId",logicalId);
      String authId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID");
      bodyParameters.put("authId",authId);
      result.put("authId",authId);
      String referenceId=delegator.getNextSeqId("OagisMessageInfo");
      bodyParameters.put("referenceId",referenceId);
      result.put("referenceId",referenceId);
      DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSS'Z'Z");
      Timestamp timestamp=UtilDateTime.nowTimestamp();
      String sentDate=dateFormat.format(timestamp);
      bodyParameters.put("sentDate",sentDate);
      result.put("sentDate",timestamp);
      bodyParameters.put("returnId",returnId);
      String bodyScreenUri=UtilProperties.getPropertyValue("oagis.properties","Oagis.Template.ReceiveDelivery");
      OutputStream out=(OutputStream)context.get("outputStream");
      Writer writer=new OutputStreamWriter(out);
      ScreenRenderer screens=new ScreenRenderer(writer,bodyParameters,new HtmlScreenRenderer());
      try {
        screens.render(bodyScreenUri);
      }
 catch (      Exception e) {
        Debug.logError(e,"Error rendering [text/xml]: ",module);
      }
      result.put("component","INVENTORY");
      result.put("task","RMA");
      result.put("outgoingMessage","Y");
      result.put("confirmation","1");
      result.put("bsrVerb","RECEIVE");
      result.put("bsrNoun","DELIVERY");
      result.put("bsrRevision","001");
      result.put("processingStatusId",statusId);
      result.put("returnId",returnId);
      result.put("userLogin",userLogin);
    }
  }
  return result;
}
