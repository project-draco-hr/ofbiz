{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  Locale locale=(Locale)context.get("locale");
  String sendToUrl=(String)context.get("sendToUrl");
  if (UtilValidate.isEmpty(sendToUrl)) {
    sendToUrl=EntityUtilProperties.getPropertyValue("oagis.properties","url.send.receiveDelivery",delegator);
  }
  String saveToFilename=(String)context.get("saveToFilename");
  if (UtilValidate.isEmpty(saveToFilename)) {
    String saveToFilenameBase=EntityUtilProperties.getPropertyValue("oagis.properties","test.save.outgoing.filename.base","",delegator);
    if (UtilValidate.isNotEmpty(saveToFilenameBase)) {
      saveToFilename=saveToFilenameBase + "ReceiveDelivery" + returnId+ ".xml";
    }
  }
  String saveToDirectory=(String)context.get("saveToDirectory");
  if (UtilValidate.isEmpty(saveToDirectory)) {
    saveToDirectory=EntityUtilProperties.getPropertyValue("oagis.properties","test.save.outgoing.directory",delegator);
  }
  GenericValue userLogin=null;
  try {
    userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting system userLogin",module);
  }
  OutputStream out=(OutputStream)context.get("outputStream");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  MapStack<String> bodyParameters=MapStack.create();
  String orderId=null;
  String referenceId=null;
  String task="RMA";
  String component="INVENTORY";
  Map<String,String> omiPkMap=null;
  try {
    List<GenericValue> previousOagisMessageInfoList=EntityQuery.use(delegator).from("OagisMessageInfo").where("returnId",returnId,"task",task,"component",component).queryList();
    if (EntityUtil.filterByAnd(previousOagisMessageInfoList,UtilMisc.toMap("processingStatusId","OAGMP_OGEN_SUCCESS")).size() > 0) {
      return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OagisFoundExistingMessageForReturn",UtilMisc.toMap("returnId",returnId),locale) + EntityUtil.filterByAnd(previousOagisMessageInfoList,UtilMisc.toMap("processingStatusId","OAGMP_OGEN_SUCCESS")));
    }
    if (EntityUtil.filterByAnd(previousOagisMessageInfoList,UtilMisc.toMap("processingStatusId","OAGMP_SENT")).size() > 0) {
      return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OagisFoundExistingMessageForReturnSent",UtilMisc.toMap("returnId",returnId),locale) + EntityUtil.filterByAnd(previousOagisMessageInfoList,UtilMisc.toMap("processingStatusId","OAGMP_SENT")));
    }
    GenericValue returnHeader=EntityQuery.use(delegator).from("ReturnHeader").where("returnId",returnId).queryOne();
    if (returnHeader == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisReturnIdNotFound",UtilMisc.toMap("returnId",returnId),locale));
    }
    String statusId=returnHeader.getString("statusId");
    if (!"RETURN_ACCEPTED".equals(statusId)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisReturnIdNotInAcceptedStatus",UtilMisc.toMap("returnId",returnId),locale));
    }
    List<GenericValue> returnItems=EntityQuery.use(delegator).from("ReturnItem").where("returnId",returnId).queryList();
    bodyParameters.put("returnItems",returnItems);
    orderId=EntityUtil.getFirst(returnItems).getString("orderId");
    String logicalId=EntityUtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID",delegator);
    String authId=EntityUtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID",delegator);
    referenceId=delegator.getNextSeqId("OagisMessageInfo");
    omiPkMap=UtilMisc.toMap("logicalId",logicalId,"component",component,"task",task,"referenceId",referenceId);
    Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
    String sentDate=OagisServices.isoDateFormat.format(nowTimestamp);
    bodyParameters.putAll(omiPkMap);
    bodyParameters.put("authId",authId);
    bodyParameters.put("sentDate",sentDate);
    try {
      Map<String,Object> comiCtx=new HashMap<String,Object>();
      comiCtx.putAll(omiPkMap);
      comiCtx.put("outgoingMessage","Y");
      comiCtx.put("confirmation","1");
      comiCtx.put("bsrVerb","RECEIVE");
      comiCtx.put("bsrNoun","DELIVERY");
      comiCtx.put("bsrRevision","001");
      comiCtx.put("returnId",returnId);
      comiCtx.put("orderId",orderId);
      comiCtx.put("authId",authId);
      comiCtx.put("sentDate",nowTimestamp);
      comiCtx.put("processingStatusId","OAGMP_TRIGGERED");
      comiCtx.put("userLogin",userLogin);
      dispatcher.runSync("createOagisMessageInfo",comiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
      Debug.logError(e,errMsg,module);
    }
    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();
    if (orderHeader == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OagisReturnIdNotValid",UtilMisc.toMap("orderId",orderId),locale));
    }
    String partyId=returnHeader.getString("fromPartyId");
    GenericValue postalAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",returnHeader.getString("originContactMechId")).queryOne();
    bodyParameters.put("postalAddress",postalAddress);
    bodyParameters.put("partyNameView",EntityQuery.use(delegator).from("PartyNameView").where("partyId",partyId).queryOne());
    double totalQty=0.0;
    Map<String,List<String>> serialNumberListByReturnItemSeqIdMap=new HashMap<String,List<String>>();
    bodyParameters.put("serialNumberListByReturnItemSeqIdMap",serialNumberListByReturnItemSeqIdMap);
    for (    GenericValue returnItem : returnItems) {
      double itemQty=returnItem.getDouble("returnQuantity").doubleValue();
      totalQty+=itemQty;
      GenericValue orderItem=returnItem.getRelatedOne("OrderItem",false);
      if (orderItem != null) {
        if (orderItem.getDouble("quantity").doubleValue() == itemQty) {
          List<GenericValue> itemIssuanceAndInventoryItemList=EntityQuery.use(delegator).from("ItemIssuanceAndInventoryItem").where("orderId",orderItem.get("orderId"),"orderItemSeqId",orderItem.get("orderItemSeqId"),"inventoryItemTypeId","SERIALIZED_INV_ITEM").queryList();
          if (itemIssuanceAndInventoryItemList.size() == itemQty) {
            List<String> serialNumberList=new LinkedList<String>();
            serialNumberListByReturnItemSeqIdMap.put(returnItem.getString("returnItemSeqId"),serialNumberList);
            for (            GenericValue itemIssuanceAndInventoryItem : itemIssuanceAndInventoryItemList) {
              serialNumberList.add(itemIssuanceAndInventoryItem.getString("serialNumber"));
            }
          }
 else {
            Debug.logInfo("Number of serial numbers [" + itemIssuanceAndInventoryItemList.size() + "] did not match quantity ["+ itemQty+ "] for return item: "+ returnItem.getPrimaryKey()+ "; may not be a serialized inventory product",module);
          }
        }
 else {
          Debug.logWarning("Could not get matching serial numbers because order item quantity [" + orderItem.getDouble("quantity") + "] did not match quantity ["+ itemQty+ "] for return item: "+ returnItem.getPrimaryKey(),module);
        }
      }
    }
    bodyParameters.put("totalQty",new Double(totalQty));
    String emailString=PartyWorker.findPartyLatestContactMech(partyId,"EMAIL_ADDRESS",delegator).getString("infoString");
    bodyParameters.put("emailString",emailString);
    GenericValue telecomNumber=PartyWorker.findPartyLatestTelecomNumber(partyId,delegator);
    bodyParameters.put("telecomNumber",telecomNumber);
    String entryDate=OagisServices.isoDateFormat.format(returnHeader.getTimestamp("entryDate"));
    bodyParameters.put("entryDate",entryDate);
    bodyParameters.put("returnId",returnId);
    String bodyScreenUri=EntityUtilProperties.getPropertyValue("oagis.properties","Oagis.Template.ReceiveDelivery",delegator);
    Writer writer=new StringWriter();
    ScreenRenderer screens=new ScreenRenderer(writer,bodyParameters,htmlScreenRenderer);
    screens.render(bodyScreenUri);
    writer.close();
    String outText=writer.toString();
    try {
      Map<String,Object> uomiCtx=new HashMap<String,Object>();
      uomiCtx.putAll(omiPkMap);
      uomiCtx.put("processingStatusId","OAGMP_OGEN_SUCCESS");
      uomiCtx.put("userLogin",userLogin);
      if (OagisServices.debugSaveXmlOut) {
        uomiCtx.put("fullMessageXml",outText);
      }
      dispatcher.runSync("updateOagisMessageInfo",uomiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
      Debug.logError(e,errMsg,module);
    }
    Map<String,Object> sendMessageReturn=OagisServices.sendMessageText(outText,out,sendToUrl,saveToDirectory,saveToFilename,locale,delegator);
    if (sendMessageReturn != null && ServiceUtil.isError(sendMessageReturn)) {
      try {
        Map<String,Object> uomiCtx=new HashMap<String,Object>();
        uomiCtx.putAll(omiPkMap);
        uomiCtx.put("processingStatusId","OAGMP_SEND_ERROR");
        uomiCtx.put("userLogin",userLogin);
        dispatcher.runSync("updateOagisMessageInfo",uomiCtx,60,true);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
        Debug.logError(e,errMsg,module);
      }
      return sendMessageReturn;
    }
    try {
      Map<String,Object> uomiCtx=new HashMap<String,Object>();
      uomiCtx.putAll(omiPkMap);
      uomiCtx.put("processingStatusId","OAGMP_SENT");
      uomiCtx.put("userLogin",userLogin);
      dispatcher.runSync("updateOagisMessageInfo",uomiCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
      Debug.logError(e,errMsg,module);
    }
  }
 catch (  Throwable t) {
    String errMsg=UtilProperties.getMessage(resource,"OagisErrorReceivingDeliveryMessageReturn",UtilMisc.toMap("returnId",returnId,"orderId",orderId,"omiPkMap",omiPkMap),locale);
    Debug.logError(t,errMsg,module);
    if (omiPkMap != null) {
      try {
        if (EntityQuery.use(delegator).from("OagisMessageInfo").where(omiPkMap).queryOne() == null) {
          return ServiceUtil.returnError(errMsg);
        }
        Map<String,Object> uomiCtx=new HashMap<String,Object>();
        uomiCtx.putAll(omiPkMap);
        uomiCtx.put("processingStatusId","OAGMP_SYS_ERROR");
        uomiCtx.put("bsrVerb","RECEIVE");
        uomiCtx.put("bsrNoun","DELIVERY");
        uomiCtx.put("returnId",returnId);
        uomiCtx.put("orderId",orderId);
        uomiCtx.put("userLogin",userLogin);
        dispatcher.runSync("updateOagisMessageInfo",uomiCtx,60,true);
        List<Map<String,String>> errorMapList=UtilMisc.toList(UtilMisc.<String,String>toMap("description",errMsg,"reasonCode","SystemError"));
        Map<String,Object> saveErrorMapListCtx=new HashMap<String,Object>();
        saveErrorMapListCtx.putAll(omiPkMap);
        saveErrorMapListCtx.put("errorMapList",errorMapList);
        saveErrorMapListCtx.put("userLogin",userLogin);
        dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
      }
 catch (      GeneralException e) {
        String errMsg2="Error saving message error info: " + e.toString();
        Debug.logError(e,errMsg2,module);
      }
    }
    return ServiceUtil.returnError(errMsg + t.toString());
  }
  return result;
}
