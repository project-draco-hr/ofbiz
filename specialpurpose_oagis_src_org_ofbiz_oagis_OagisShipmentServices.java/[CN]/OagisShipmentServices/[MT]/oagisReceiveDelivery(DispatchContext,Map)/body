{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String sendToUrl=(String)context.get("sendToUrl");
  if (UtilValidate.isEmpty(sendToUrl)) {
    sendToUrl=UtilProperties.getPropertyValue("oagis.properties","url.send.receiveDelivery");
  }
  String saveToFilename=(String)context.get("saveToFilename");
  String saveToDirectory=(String)context.get("saveToDirectory");
  OutputStream out=(OutputStream)context.get("outputStream");
  Map result=ServiceUtil.returnSuccess();
  MapStack bodyParameters=MapStack.create();
  if (userLogin == null) {
    try {
      userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting system userLogin",module);
    }
  }
  GenericValue returnHeader=null;
  String statusId=null;
  try {
    returnHeader=delegator.findByPrimaryKey("ReturnHeader",UtilMisc.toMap("returnId",returnId));
    statusId=returnHeader.getString("statusId");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (returnHeader != null) {
    if (statusId.equals("RETURN_ACCEPTED")) {
      List returnItems=null;
      try {
        returnItems=delegator.findByAnd("ReturnItem",UtilMisc.toMap("returnId",returnId));
        bodyParameters.put("returnItems",returnItems);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      GenericValue orderHeader=null;
      String orderId=null;
      try {
        orderId=EntityUtil.getFirst(returnItems).getString("orderId");
        orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
        if (orderHeader == null) {
          return ServiceUtil.returnError("No valid Order with [" + orderId + "] found, cannot process Return");
        }
      }
 catch (      GenericEntityException e) {
        String errMsg="Cannot process Return: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      Map comiCtx=UtilMisc.toMap("orderId",orderId);
      try {
        GenericValue postalAddress=delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",returnHeader.getString("originContactMechId")));
        bodyParameters.put("postalAddress",postalAddress);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
      double itemQty=0.0;
      double totalQty=0.0;
      Iterator riIter=returnItems.iterator();
      while (riIter.hasNext()) {
        GenericValue returnItem=(GenericValue)riIter.next();
        itemQty=returnItem.getDouble("returnQuantity").doubleValue();
        totalQty=totalQty + itemQty;
      }
      bodyParameters.put("totalQty",new Double(totalQty));
      String partyId=returnHeader.getString("fromPartyId");
      String emailString=PartyWorker.findPartyLatestContactMech(partyId,"EMAIL_ADDRESS",delegator).getString("infoString");
      bodyParameters.put("emailString",emailString);
      GenericValue telecomNumber=PartyWorker.findPartyLatestTelecomNumber(partyId,delegator);
      bodyParameters.put("telecomNumber",telecomNumber);
      String logicalId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.LOGICALID");
      bodyParameters.put("logicalId",logicalId);
      comiCtx.put("logicalId",logicalId);
      String authId=UtilProperties.getPropertyValue("oagis.properties","CNTROLAREA.SENDER.AUTHID");
      bodyParameters.put("authId",authId);
      comiCtx.put("authId",authId);
      String referenceId=delegator.getNextSeqId("OagisMessageInfo");
      bodyParameters.put("referenceId",referenceId);
      comiCtx.put("referenceId",referenceId);
      DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSS'Z'Z");
      Timestamp timestamp=UtilDateTime.nowTimestamp();
      String sentDate=dateFormat.format(timestamp);
      bodyParameters.put("sentDate",sentDate);
      comiCtx.put("sentDate",timestamp);
      String entryDate=dateFormat.format(returnHeader.getTimestamp("entryDate"));
      bodyParameters.put("entryDate",entryDate);
      bodyParameters.put("returnId",returnId);
      String bodyScreenUri=UtilProperties.getPropertyValue("oagis.properties","Oagis.Template.ReceiveDelivery");
      Writer writer=null;
      if (out != null) {
        writer=new OutputStreamWriter(out);
      }
 else       if (UtilValidate.isNotEmpty(saveToFilename)) {
        try {
          File outdir=new File(saveToDirectory);
          if (!outdir.exists()) {
            outdir.mkdir();
          }
          writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(outdir,saveToFilename)),"UTF-8")));
        }
 catch (        Exception e) {
          String errMsg="Error opening file to save message to [" + saveToFilename + "]: "+ e.toString();
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
      }
 else       if (UtilValidate.isNotEmpty(sendToUrl)) {
        writer=new StringWriter();
      }
 else {
        return ServiceUtil.returnError("No send to information pass (url, file, or out stream)");
      }
      ScreenRenderer screens=new ScreenRenderer(writer,bodyParameters,new HtmlScreenRenderer());
      try {
        screens.render(bodyScreenUri);
        writer.close();
      }
 catch (      Exception e) {
        String errMsg="Error rendering message: " + e.toString();
        Debug.logError(e,errMsg,module);
        return ServiceUtil.returnError(errMsg);
      }
      comiCtx.put("component","INVENTORY");
      comiCtx.put("task","RMA");
      comiCtx.put("outgoingMessage","Y");
      comiCtx.put("confirmation","1");
      comiCtx.put("bsrVerb","RECEIVE");
      comiCtx.put("bsrNoun","DELIVERY");
      comiCtx.put("bsrRevision","001");
      comiCtx.put("processingStatusId",statusId);
      comiCtx.put("returnId",returnId);
      comiCtx.put("userLogin",userLogin);
      if (OagisServices.debugSaveXmlOut) {
        comiCtx.put("fullMessageXml",writer.toString());
      }
      try {
        dispatcher.runAsync("createOagisMessageInfo",comiCtx,true);
      }
 catch (      GenericServiceException e) {
        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"OagisErrorInCreatingDataForOagisMessageInfoEntity",(Locale)context.get("locale"));
        Debug.logError(e,errMsg,module);
      }
      if (UtilValidate.isNotEmpty(sendToUrl)) {
        HttpClient http=new HttpClient(sendToUrl);
        http.setHostVerificationLevel(SSLUtil.HOSTCERT_NO_CHECK);
        http.setAllowUntrusted(true);
        http.setDebug(true);
        if (UtilValidate.isNotEmpty(certAlias)) {
          http.setClientCertificateAlias(certAlias);
        }
        if (UtilValidate.isNotEmpty(basicAuthUsername)) {
          http.setBasicAuthInfo(basicAuthUsername,basicAuthPassword);
        }
        http.setContentType("text/xml");
        http.setKeepAlive(true);
        try {
          http.post(writer.toString());
        }
 catch (        Exception e) {
          String errMsg="Error posting message to server with UTL [" + sendToUrl + "]: "+ e.toString();
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
      }
    }
  }
  return result;
}
