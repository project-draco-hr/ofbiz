{
  Document doc=(Document)context.get("document");
  boolean isErrorRetry=Boolean.TRUE.equals(context.get("isErrorRetry"));
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  List errorMapList=FastList.newInstance();
  GenericValue userLogin=null;
  try {
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin with userLoginId system: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element showShipmentElement=doc.getDocumentElement();
  showShipmentElement.normalize();
  Element controlAreaElement=UtilXml.firstChildElement(showShipmentElement,"os:CNTROLAREA");
  Element bsrElement=UtilXml.firstChildElement(controlAreaElement,"os:BSR");
  String bsrVerb=UtilXml.childElementValue(bsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(bsrElement,"of:NOUN");
  String bsrRevision=UtilXml.childElementValue(bsrElement,"of:REVISION");
  Map oagisMsgInfoCtx=UtilMisc.toMap("bsrVerb",bsrVerb,"bsrNoun",bsrNoun,"bsrRevision",bsrRevision);
  Element senderElement=UtilXml.firstChildElement(controlAreaElement,"os:SENDER");
  String logicalId=UtilXml.childElementValue(senderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(senderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(senderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(senderElement,"of:REFERENCEID");
  String confirmation=UtilXml.childElementValue(senderElement,"of:CONFIRMATION");
  String authId=UtilXml.childElementValue(senderElement,"of:AUTHID");
  String sentDate=UtilXml.childElementValue(controlAreaElement,"os:DATETIMEISO");
  Timestamp sentTimestamp=OagisServices.parseIsoDateString(sentDate,errorMapList);
  Element dataAreaElement=UtilXml.firstChildElement(showShipmentElement,"ns:DATAAREA");
  Element daShowShipmentElement=UtilXml.firstChildElement(dataAreaElement,"ns:SHOW_SHIPMENT");
  Element shipmentElement=UtilXml.firstChildElement(daShowShipmentElement,"ns:SHIPMENT");
  String shipmentId=UtilXml.childElementValue(shipmentElement,"of:DOCUMENTID");
  oagisMsgInfoCtx.put("logicalId",logicalId);
  oagisMsgInfoCtx.put("component",component);
  oagisMsgInfoCtx.put("task",task);
  oagisMsgInfoCtx.put("referenceId",referenceId);
  oagisMsgInfoCtx.put("confirmation",confirmation);
  oagisMsgInfoCtx.put("authId",authId);
  oagisMsgInfoCtx.put("outgoingMessage","N");
  oagisMsgInfoCtx.put("receivedDate",nowTimestamp);
  oagisMsgInfoCtx.put("sentDate",sentTimestamp);
  oagisMsgInfoCtx.put("shipmentId",shipmentId);
  oagisMsgInfoCtx.put("userLogin",userLogin);
  oagisMsgInfoCtx.put("processingStatusId","OAGMP_RECEIVED");
  if (OagisServices.debugSaveXmlIn) {
    try {
      oagisMsgInfoCtx.put("fullMessageXml",UtilXml.writeXmlDocument(doc));
    }
 catch (    IOException e) {
      String errMsg="Warning: error creating text from XML Document for saving to database: " + e.toString();
      Debug.logWarning(errMsg,module);
    }
  }
  try {
    if (isErrorRetry) {
      dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
 else {
      dispatcher.runSync("createOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  GenericValue shipment=null;
  try {
    shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error getting Shipment from database: " + e.toString();
    Debug.logInfo(e,errMsg,module);
    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericEntityException"));
  }
  if (shipment == null) {
    String errMsg="Could not find Shipment ID [" + shipmentId + "]";
    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","ShipmentIdNotValid"));
  }
  List shipUnitElementList=UtilXml.childElementList(daShowShipmentElement,"ns:SHIPUNIT");
  if (errorMapList.size() == 0 && UtilValidate.isNotEmpty(shipUnitElementList)) {
    try {
      String shipGroupSeqId=shipment.getString("primaryShipGroupSeqId");
      String originFacilityId=shipment.getString("originFacilityId");
      Element shipUnitElement=(Element)shipUnitElementList.get(0);
      String trackingNum=UtilXml.childElementValue(shipUnitElement,"of:TRACKINGID");
      String carrierCode=UtilXml.childElementValue(shipUnitElement,"of:CARRIER");
      if (UtilValidate.isNotEmpty(carrierCode)) {
        String carrierPartyId=null;
        if (carrierCode.startsWith("F") || carrierCode.startsWith("f")) {
          carrierPartyId="FEDEX";
        }
 else         if (carrierCode.startsWith("U") || carrierCode.startsWith("u")) {
          carrierPartyId="UPS";
        }
        Map resultMap=dispatcher.runSync("updateShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId","00001","carrierPartyId",carrierPartyId,"trackingIdNumber",trackingNum,"userLogin",userLogin));
        if (ServiceUtil.isError(resultMap)) {
          String errMsg=ServiceUtil.getErrorMessage(resultMap);
          errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","updateShipmentRouteSegmentError"));
          Debug.logError(errMsg,module);
        }
      }
      Iterator shipUnitElementItr=shipUnitElementList.iterator();
      while (shipUnitElementItr.hasNext()) {
        shipUnitElement=(Element)shipUnitElementItr.next();
        String shipmentPackageSeqId=UtilXml.childElementValue(shipUnitElement,"of:SHPUNITSEQ");
        List invItemElementList=UtilXml.childElementList(shipUnitElement,"ns:INVITEM");
        if (UtilValidate.isNotEmpty(invItemElementList)) {
          List invitemMapList=FastList.newInstance();
          Iterator invItemElementIter=invItemElementList.iterator();
          boolean foundBadProductId=false;
          while (invItemElementIter.hasNext()) {
            Element invItemElement=(Element)invItemElementIter.next();
            String productId=UtilXml.childElementValue(invItemElement,"of:ITEM");
            GenericValue product=delegator.findByPrimaryKeyCache("Product",UtilMisc.toMap("productId",productId));
            if (product == null) {
              String errMsg="Product with ID [" + productId + "] not found (invalid Product ID).";
              errorMapList.add(UtilMisc.toMap("reasonCode","ProductIdNotValid","description",errMsg));
              Debug.logError(errMsg,module);
              foundBadProductId=true;
              continue;
            }
            Map invitemMap=FastMap.newInstance();
            invitemMap.put("productId",productId);
            invitemMap.put("invItemElement",invItemElement);
            invitemMapList.add(invitemMap);
          }
          if (foundBadProductId) {
            continue;
          }
          UtilMisc.sortMaps(invitemMapList,UtilMisc.toList("productId"));
          Iterator invitemMapIter=invitemMapList.iterator();
          while (invitemMapIter.hasNext()) {
            Map invitemMap=(Map)invitemMapIter.next();
            Element invItemElement=(Element)invitemMap.get("invItemElement");
            String productId=UtilXml.childElementValue(invItemElement,"of:ITEM");
            Element quantityElement=UtilXml.firstChildElement(invItemElement,"os:QUANTITY");
            String quantityValueStr=UtilXml.childElementValue(quantityElement,"of:VALUE");
            Integer messageQuantity=Integer.valueOf(quantityValueStr);
            GenericValue shipmentItem=EntityUtil.getFirst(delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId,"productId",productId)));
            if (shipmentItem == null) {
              String errMsg="Could not find Shipment Item for Shipment with ID [" + shipmentId + "] and Product with ID ["+ productId+ "].";
              errorMapList.add(UtilMisc.toMap("reasonCode","ShipmentItemForProductNotFound","description",errMsg));
              Debug.logError(errMsg,module);
              continue;
            }
            String shipmentItemSeqId=shipmentItem.getString("shipmentItemSeqId");
            GenericValue orderShipment=EntityUtil.getFirst(delegator.findByAnd("OrderShipment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItemSeqId)));
            if (orderShipment == null) {
              String errMsg="Could not find Order-Shipment record for Shipment with ID [" + shipmentId + "] and Item Seq-ID ["+ shipmentItemSeqId+ "].";
              errorMapList.add(UtilMisc.toMap("reasonCode","OrderShipmentNotFound","description",errMsg));
              Debug.logError(errMsg,module);
              continue;
            }
            String orderId=orderShipment.getString("orderId");
            String orderItemSeqId=orderShipment.getString("orderItemSeqId");
            GenericValue product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
            String requireInventory=product.getString("requireInventory");
            if (requireInventory == null) {
              requireInventory="N";
            }
            List orderItemShipGrpInvReservationList=delegator.findByAnd("OrderItemShipGrpInvRes",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId));
            int totalReserved=0;
            Iterator orderItemShipGrpInvReservationCountIter=orderItemShipGrpInvReservationList.iterator();
            while (orderItemShipGrpInvReservationCountIter.hasNext()) {
              GenericValue orderItemShipGrpInvReservation=(GenericValue)orderItemShipGrpInvReservationCountIter.next();
              if (orderItemShipGrpInvReservation.getDouble("quantity") != null) {
                totalReserved+=orderItemShipGrpInvReservation.getDouble("quantity").doubleValue();
              }
            }
            List serialNumberList=FastList.newInstance();
            List invDetailElementList=UtilXml.childElementList(invItemElement,"ns:INVDETAIL");
            Iterator invDetailElementItr=invDetailElementList.iterator();
            while (invDetailElementItr.hasNext()) {
              Element invDetailElement=(Element)invDetailElementItr.next();
              String serialNumber=UtilXml.childElementValue(invDetailElement,"of:SERIALNUM");
              if (UtilValidate.isNotEmpty(serialNumber)) {
                serialNumberList.add(serialNumber);
              }
            }
            boolean continueLoop=false;
            if (UtilValidate.isNotEmpty(serialNumberList)) {
              if (messageQuantity.intValue() != serialNumberList.size()) {
                String errMsg="Error: the quantity in the message [" + messageQuantity.intValue() + "] did not match the number of serial numbers passed ["+ serialNumberList.size()+ "].";
                errorMapList.add(UtilMisc.toMap("reasonCode","QuantitySerialMismatch","description",errMsg));
                Debug.logInfo(errMsg,module);
                continueLoop=true;
              }
            }
            if ((int)totalReserved != messageQuantity.intValue()) {
              String errMsg="Not enough serial numbers [" + serialNumberList.size() + "] for the quantity ["+ messageQuantity.intValue()+ "].";
              errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","SerialNumbersMissing"));
              Debug.logInfo(errMsg,module);
              continueLoop=true;
            }
            if (continueLoop) {
              continue;
            }
            Iterator serialNumberIter=serialNumberList.iterator();
            Iterator orderItemShipGrpInvReservationIter=orderItemShipGrpInvReservationList.iterator();
            while (orderItemShipGrpInvReservationIter.hasNext()) {
              GenericValue orderItemShipGrpInvReservation=(GenericValue)orderItemShipGrpInvReservationIter.next();
              int currentResQuantity=orderItemShipGrpInvReservation.getDouble("quantity").intValue();
              Map isitspastCtx=UtilMisc.toMap("orderId",orderId,"shipGroupSeqId",shipGroupSeqId,"orderItemSeqId",orderItemSeqId);
              isitspastCtx.put("productId",productId);
              isitspastCtx.put("reservedDatetime",orderItemShipGrpInvReservation.get("reservedDatetime"));
              isitspastCtx.put("requireInventory",requireInventory);
              isitspastCtx.put("reserveOrderEnumId",orderItemShipGrpInvReservation.get("reserveOrderEnumId"));
              isitspastCtx.put("sequenceId",orderItemShipGrpInvReservation.get("sequenceId"));
              isitspastCtx.put("originFacilityId",originFacilityId);
              isitspastCtx.put("userLogin",userLogin);
              isitspastCtx.put("trackingNum",trackingNum);
              isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
              isitspastCtx.put("shipmentId",shipmentId);
              isitspastCtx.put("shipmentPackageSeqId",shipmentPackageSeqId);
              isitspastCtx.put("promisedDatetime",orderItemShipGrpInvReservation.get("promisedDatetime"));
              if (UtilValidate.isNotEmpty(serialNumberList)) {
                for (int i=0; i < currentResQuantity; i++) {
                  String serialNumber=(String)serialNumberIter.next();
                  if (OagisServices.requireSerialNumberExist != null) {
                    Set productIdSet=ProductWorker.getRefurbishedProductIdSet(productId,delegator);
                    productIdSet.add(productId);
                    EntityCondition bySerialNumberCondition=new EntityExpr(new EntityExpr("serialNumber",EntityOperator.EQUALS,serialNumber),EntityOperator.AND,new EntityExpr("productId",EntityOperator.IN,productIdSet));
                    List inventoryItemsBySerialNumber=delegator.findByCondition("InventoryItem",bySerialNumberCondition,null,null);
                    if (OagisServices.requireSerialNumberExist.booleanValue()) {
                      if (inventoryItemsBySerialNumber.size() == 0) {
                        String errMsg="Referenced serial numbers must already exist, but serial number [" + serialNumber + "] was not found. Product ID(s) considered are: "+ productIdSet;
                        errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","SerialNumberRequiredButNotFound"));
                        continue;
                      }
                    }
 else {
                      if (inventoryItemsBySerialNumber.size() > 0) {
                        String errMsg="Referenced serial numbers must NOT already exist, but serial number [" + serialNumber + "] already exists. Product ID(s) considered are: "+ productIdSet;
                        errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","SerialNumberRequiredNotExistButFound"));
                        continue;
                      }
                    }
                  }
                  isitspastCtx.put("serialNumber",serialNumber);
                  isitspastCtx.put("quantity",new Double(1));
                  isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
                  isitspastCtx.remove("itemIssuanceId");
                  Map resultMap=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
                  if (ServiceUtil.isError(resultMap)) {
                    String errMsg=ServiceUtil.getErrorMessage(resultMap);
                    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","IssueSerializedInvServiceError"));
                    Debug.logError(errMsg,module);
                  }
                }
              }
 else {
                isitspastCtx.put("quantity",new Double(currentResQuantity));
                Map resultMap=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
                if (ServiceUtil.isError(resultMap)) {
                  String errMsg=ServiceUtil.getErrorMessage(resultMap);
                  errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","IssueSerializedInvServiceError"));
                  Debug.logError(errMsg,module);
                }
              }
            }
          }
        }
      }
      if (errorMapList.size() == 0) {
        Map resultMap=dispatcher.runSync("setShipmentStatusPackedAndShipped",UtilMisc.toMap("shipmentId",shipmentId,"userLogin",userLogin));
        if (ServiceUtil.isError(resultMap)) {
          String errMsg=ServiceUtil.getErrorMessage(resultMap);
          errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","SetShipmentStatusPackedAndShippedError"));
          Debug.logError(errMsg,module);
        }
      }
    }
 catch (    Throwable t) {
      String errMsg="System Error processing Show Shipment message: " + t.toString();
      Debug.logInfo(t,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
  Map result=FastMap.newInstance();
  result.put("logicalId",logicalId);
  result.put("component",component);
  result.put("task",task);
  result.put("referenceId",referenceId);
  result.put("userLogin",userLogin);
  if (errorMapList.size() > 0) {
    try {
      oagisMsgInfoCtx.put("processingStatusId","OAGMP_PROC_ERROR");
      dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    Map saveErrorMapListCtx=FastMap.newInstance();
    saveErrorMapListCtx.put("logicalId",logicalId);
    saveErrorMapListCtx.put("component",component);
    saveErrorMapListCtx.put("task",task);
    saveErrorMapListCtx.put("referenceId",referenceId);
    saveErrorMapListCtx.put("errorMapList",errorMapList);
    saveErrorMapListCtx.put("userLogin",userLogin);
    try {
      dispatcher.runSync("createOagisMsgErrInfosFromErrMapList",saveErrorMapListCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    try {
      Map sendConfirmBodCtx=FastMap.newInstance();
      sendConfirmBodCtx.putAll(saveErrorMapListCtx);
      sendConfirmBodCtx.put("origRefId",shipmentId);
      dispatcher.runAsync("oagisSendConfirmBod",sendConfirmBodCtx,null,true,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error sending Confirm BOD: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
    result.putAll(ServiceUtil.returnSuccess("Errors found processing message; information saved and return error sent back"));
    return result;
  }
 else {
    try {
      oagisMsgInfoCtx.put("processingStatusId","OAGMP_PROC_SUCCESS");
      dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
    }
 catch (    GenericServiceException e) {
      String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
      Debug.logError(e,errMsg,module);
    }
  }
  result.putAll(ServiceUtil.returnSuccess("Service Completed Successfully"));
  return result;
}
