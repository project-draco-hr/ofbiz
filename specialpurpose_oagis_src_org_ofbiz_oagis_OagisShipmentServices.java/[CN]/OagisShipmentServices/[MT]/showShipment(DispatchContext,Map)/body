{
  InputStream in=(InputStream)context.get("inputStream");
  OutputStream out=(OutputStream)context.get("outputStream");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  GenericValue userLogin=null;
  try {
    Document doc=UtilXml.readXmlDocument(in,true,"ShowShipment");
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","admin"));
    Element shipmentElement=doc.getDocumentElement();
    shipmentElement.normalize();
    Element dataAreaElement=UtilXml.firstChildElement(shipmentElement,"n:DATAAREA");
    Element showShipmentElement=UtilXml.firstChildElement(dataAreaElement,"n:SHOW_SHIPMENT");
    Element shipment_N_Element=UtilXml.firstChildElement(showShipmentElement,"n:SHIPMENT");
    String documentId=UtilXml.childElementValue(shipment_N_Element,"N2:DOCUMENTID");
    String description=UtilXml.childElementValue(shipment_N_Element,"N2:DESCRIPTN");
    Element shipUnitElement=UtilXml.firstChildElement(showShipmentElement,"n:SHIPUNIT");
    String shipUnitTrackingId=UtilXml.childElementValue(shipUnitElement,"N2:TRACKINGID");
    Element invItem=UtilXml.firstChildElement(shipUnitElement,"n:INVITEM");
    String invItemItem=UtilXml.childElementValue(invItem,"N2:ITEM");
    Element invDetail=UtilXml.firstChildElement(invItem,"n:INVDETAIL");
    String invDetailSerialNum=UtilXml.childElementValue(invDetail,"N1:SERIALNUM");
    List orderItemShipGrpInvReservations=FastList.newInstance();
    try {
      GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",documentId));
      String shipGroupSeqId=shipment.getString("primaryShipGroupSeqId");
      String originFacilityId=shipment.getString("originFacilityId");
      List shipmentItems=delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",documentId,"productId",invItemItem));
      GenericValue shipmentItem=EntityUtil.getFirst(shipmentItems);
      String shipmentItemSeqId=shipmentItem.getString("shipmentItemSeqId");
      List orderShipments=delegator.findByAnd("OrderShipment",UtilMisc.toMap("shipmentId",documentId,"shipmentItemSeqId",shipmentItemSeqId));
      GenericValue orderShipment=EntityUtil.getFirst(orderShipments);
      String orderId=orderShipment.getString("orderId");
      String orderItemSeqId=orderShipment.getString("orderItemSeqId");
      GenericValue product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",invItemItem));
      String requireInventory=product.getString("requireInventory");
      if (requireInventory == null) {
        requireInventory="N";
      }
      orderItemShipGrpInvReservations=delegator.findByAnd("OrderItemShipGrpInvRes",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId));
      GenericValue orderItemShipGrpInvReservation=EntityUtil.getFirst(orderItemShipGrpInvReservations);
      GenericValue inventoryItem=delegator.findByPrimaryKey("InventoryItem",UtilMisc.toMap("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId")));
      String serialNumber=inventoryItem.getString("serialNumber");
      Map isitspastCtx=UtilMisc.toMap("orderId",orderId,"shipGroupSeqId",shipGroupSeqId,"orderItemSeqId",orderItemSeqId,"quantity",shipmentItem.get("quantity"),"quantityNotReserved",shipmentItem.get("quantity"));
      isitspastCtx.put("productId",invItemItem);
      isitspastCtx.put("reservedDatetime",orderItemShipGrpInvReservation.get("reservedDatetime"));
      isitspastCtx.put("requireInventory",requireInventory);
      isitspastCtx.put("reserveOrderEnumId",orderItemShipGrpInvReservation.get("reserveOrderEnumId"));
      isitspastCtx.put("sequenceId",orderItemShipGrpInvReservation.get("sequenceId"));
      isitspastCtx.put("originFacilityId",originFacilityId);
      isitspastCtx.put("userLogin",userLogin);
      isitspastCtx.put("serialNumber",invDetailSerialNum);
      isitspastCtx.put("trackingNum",shipUnitTrackingId);
      isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
      isitspastCtx.put("shipmentId",documentId);
      try {
        Map result=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
      }
 catch (      Exception e) {
        Debug.logInfo("========In catch =========",module);
        return ServiceUtil.returnError("return error" + e);
      }
    }
 catch (    Exception e) {
      return ServiceUtil.returnError("return error" + e);
    }
  }
 catch (  Exception e) {
    Debug.logError(e,module);
  }
  Map result=ServiceUtil.returnSuccess("Action performed successfuly");
  result.put("contentType","text/plain");
  return result;
}
