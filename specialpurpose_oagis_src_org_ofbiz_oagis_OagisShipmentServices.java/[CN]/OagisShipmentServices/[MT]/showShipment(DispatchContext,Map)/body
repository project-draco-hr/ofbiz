{
  InputStream in=(InputStream)context.get("inputStream");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  List errorList=new LinkedList();
  Document doc=null;
  try {
    doc=UtilXml.readXmlDocument(in,true,"ShowShipment");
  }
 catch (  Exception e) {
    String errMsg="Error parsing the ShowShipmentResponse";
    errorList.add(errMsg);
    Debug.logError(e,errMsg,module);
  }
  GenericValue userLogin=null;
  try {
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin with userLoginId system ";
    errorList.add(errMsg);
    Debug.logError(e,errMsg,module);
  }
  Element showShipmentElement=doc.getDocumentElement();
  showShipmentElement.normalize();
  Element controlAreaElement=UtilXml.firstChildElement(showShipmentElement,"N1:CNTROLAREA");
  Element bsrElement=UtilXml.firstChildElement(controlAreaElement,"N1:BSR");
  String bsrVerb=UtilXml.childElementValue(bsrElement,"N2:VERB");
  String bsrNoun=UtilXml.childElementValue(bsrElement,"N2:NOUN");
  String bsrRevision=UtilXml.childElementValue(bsrElement,"N2:REVISION");
  Map oagisMsgInfoCtx=UtilMisc.toMap("bsrVerb",bsrVerb,"bsrNoun",bsrNoun,"bsrRevision",bsrRevision);
  Element senderElement=UtilXml.firstChildElement(controlAreaElement,"N1:SENDER");
  String logicalId=UtilXml.childElementValue(senderElement,"N2:LOGICALID");
  String component=UtilXml.childElementValue(senderElement,"N2:COMPONENT");
  String task=UtilXml.childElementValue(senderElement,"N2:TASK");
  String referenceId=UtilXml.childElementValue(senderElement,"N2:REFERENCEID");
  String confirmation=UtilXml.childElementValue(senderElement,"N2:CONFIRMATION");
  String authId=UtilXml.childElementValue(senderElement,"N2:AUTHID");
  oagisMsgInfoCtx.put("logicalId",logicalId);
  oagisMsgInfoCtx.put("component",component);
  oagisMsgInfoCtx.put("task",task);
  oagisMsgInfoCtx.put("referenceId",referenceId);
  oagisMsgInfoCtx.put("confirmation",confirmation);
  oagisMsgInfoCtx.put("authId",authId);
  oagisMsgInfoCtx.put("outgoingMessage","N");
  oagisMsgInfoCtx.put("userLogin",userLogin);
  try {
    Map oagisMsgInfoResult=dispatcher.runSync("createOagisMessageInfo",oagisMsgInfoCtx);
    if (ServiceUtil.isError(oagisMsgInfoResult)) {
      String errMsg="Error creating OagisMessageInfo for the Incoming Message";
      errorList.add(errMsg);
      Debug.logError(errMsg,module);
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message";
    errorList.add(errMsg);
    Debug.logError(e,errMsg,module);
  }
  Element dataAreaElement=UtilXml.firstChildElement(showShipmentElement,"n:DATAAREA");
  Element daShowShipmentElement=UtilXml.firstChildElement(dataAreaElement,"n:SHOW_SHIPMENT");
  Element shipmentElement=UtilXml.firstChildElement(daShowShipmentElement,"n:SHIPMENT");
  String shipmentId=UtilXml.childElementValue(shipmentElement,"N2:DOCUMENTID");
  Element shipUnitElement=UtilXml.firstChildElement(daShowShipmentElement,"n:SHIPUNIT");
  String trackingNum=UtilXml.childElementValue(shipUnitElement,"N2:TRACKINGID");
  Element invItem=UtilXml.firstChildElement(shipUnitElement,"n:INVITEM");
  String productId=UtilXml.childElementValue(invItem,"N2:ITEM");
  Element invDetail=UtilXml.firstChildElement(invItem,"n:INVDETAIL");
  String serialNumber=UtilXml.childElementValue(invDetail,"N1:SERIALNUM");
  try {
    GenericValue shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
    String shipGroupSeqId=shipment.getString("primaryShipGroupSeqId");
    String originFacilityId=shipment.getString("originFacilityId");
    GenericValue shipmentItem=EntityUtil.getFirst(delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId,"productId",productId)));
    String shipmentItemSeqId=shipmentItem.getString("shipmentItemSeqId");
    GenericValue orderShipment=EntityUtil.getFirst(delegator.findByAnd("OrderShipment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItemSeqId)));
    String orderId=orderShipment.getString("orderId");
    String orderItemSeqId=orderShipment.getString("orderItemSeqId");
    GenericValue product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
    String requireInventory=product.getString("requireInventory");
    if (requireInventory == null) {
      requireInventory="N";
    }
    GenericValue orderItemShipGrpInvReservation=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGrpInvRes",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId)));
    Map isitspastCtx=UtilMisc.toMap("orderId",orderId,"shipGroupSeqId",shipGroupSeqId,"orderItemSeqId",orderItemSeqId,"quantity",shipmentItem.get("quantity"),"quantityNotReserved",shipmentItem.get("quantity"));
    isitspastCtx.put("productId",productId);
    isitspastCtx.put("reservedDatetime",orderItemShipGrpInvReservation.get("reservedDatetime"));
    isitspastCtx.put("requireInventory",requireInventory);
    isitspastCtx.put("reserveOrderEnumId",orderItemShipGrpInvReservation.get("reserveOrderEnumId"));
    isitspastCtx.put("sequenceId",orderItemShipGrpInvReservation.get("sequenceId"));
    isitspastCtx.put("originFacilityId",originFacilityId);
    isitspastCtx.put("userLogin",userLogin);
    isitspastCtx.put("serialNumber",serialNumber);
    isitspastCtx.put("trackingNum",trackingNum);
    isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
    isitspastCtx.put("shipmentId",shipmentId);
    try {
      Map resultMap=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
      if (ServiceUtil.isError(resultMap)) {
        String errMsg="Error executing issueSerializedInvToShipmentPackageAndSetTracking Service";
        errorList.add(errMsg);
        Debug.logError(errMsg,module);
      }
    }
 catch (    GenericServiceException e) {
      Debug.logInfo(e,module);
      errorList.add(e.getMessage());
    }
  }
 catch (  GenericEntityException e) {
    Debug.logInfo(e,module);
    errorList.add(e.getMessage());
  }
  Map result=new HashMap();
  result.put("contentType","text/plain");
  if (errorList.size() > 0) {
    result.putAll(oagisMsgInfoCtx);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE_LIST,errorList);
    result.put("reasonCode","1000");
    result.put("description","processing message failed");
  }
 else {
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  }
  return result;
}
