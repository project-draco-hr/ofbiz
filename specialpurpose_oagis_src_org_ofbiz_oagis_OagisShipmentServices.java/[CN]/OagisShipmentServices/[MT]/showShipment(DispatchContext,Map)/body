{
  Document doc=(Document)context.get("document");
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericDelegator delegator=ctx.getDelegator();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  List errorMapList=FastList.newInstance();
  GenericValue userLogin=null;
  try {
    userLogin=delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system"));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error Getting UserLogin with userLoginId system: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  Element showShipmentElement=doc.getDocumentElement();
  showShipmentElement.normalize();
  Element controlAreaElement=UtilXml.firstChildElement(showShipmentElement,"os:CNTROLAREA");
  Element bsrElement=UtilXml.firstChildElement(controlAreaElement,"os:BSR");
  String bsrVerb=UtilXml.childElementValue(bsrElement,"of:VERB");
  String bsrNoun=UtilXml.childElementValue(bsrElement,"of:NOUN");
  String bsrRevision=UtilXml.childElementValue(bsrElement,"of:REVISION");
  Map oagisMsgInfoCtx=UtilMisc.toMap("bsrVerb",bsrVerb,"bsrNoun",bsrNoun,"bsrRevision",bsrRevision);
  Element senderElement=UtilXml.firstChildElement(controlAreaElement,"os:SENDER");
  String logicalId=UtilXml.childElementValue(senderElement,"of:LOGICALID");
  String component=UtilXml.childElementValue(senderElement,"of:COMPONENT");
  String task=UtilXml.childElementValue(senderElement,"of:TASK");
  String referenceId=UtilXml.childElementValue(senderElement,"of:REFERENCEID");
  String confirmation=UtilXml.childElementValue(senderElement,"of:CONFIRMATION");
  String authId=UtilXml.childElementValue(senderElement,"of:AUTHID");
  String sentDate=UtilXml.childElementValue(controlAreaElement,"os:DATETIMEISO");
  Timestamp sentTimestamp=OagisServices.parseIsoDateString(sentDate,errorMapList);
  Element dataAreaElement=UtilXml.firstChildElement(showShipmentElement,"ns:DATAAREA");
  Element daShowShipmentElement=UtilXml.firstChildElement(dataAreaElement,"ns:SHOW_SHIPMENT");
  Element shipmentElement=UtilXml.firstChildElement(daShowShipmentElement,"ns:SHIPMENT");
  String shipmentId=UtilXml.childElementValue(shipmentElement,"of:DOCUMENTID");
  Map result=FastMap.newInstance();
  result.put("logicalId",logicalId);
  result.put("component",component);
  result.put("task",task);
  result.put("referenceId",referenceId);
  result.put("userLogin",userLogin);
  oagisMsgInfoCtx.put("logicalId",logicalId);
  oagisMsgInfoCtx.put("component",component);
  oagisMsgInfoCtx.put("task",task);
  oagisMsgInfoCtx.put("referenceId",referenceId);
  oagisMsgInfoCtx.put("confirmation",confirmation);
  oagisMsgInfoCtx.put("authId",authId);
  oagisMsgInfoCtx.put("outgoingMessage","N");
  oagisMsgInfoCtx.put("receivedDate",nowTimestamp);
  oagisMsgInfoCtx.put("sentDate",sentTimestamp);
  oagisMsgInfoCtx.put("shipmentId",shipmentId);
  oagisMsgInfoCtx.put("userLogin",userLogin);
  oagisMsgInfoCtx.put("processingStatusId","OAGMP_RECEIVED");
  if (OagisServices.debugSaveXmlIn) {
    try {
      oagisMsgInfoCtx.put("fullMessageXml",UtilXml.writeXmlDocument(doc));
    }
 catch (    IOException e) {
      String errMsg="Warning: error creating text from XML Document for saving to database: " + e.toString();
      Debug.logWarning(errMsg,module);
    }
  }
  try {
    dispatcher.runSync("createOagisMessageInfo",oagisMsgInfoCtx,60,true);
  }
 catch (  GenericServiceException e) {
    String errMsg="Error creating OagisMessageInfo for the Incoming Message: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  GenericValue shipment=null;
  try {
    shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
  }
 catch (  GenericEntityException e) {
    String errMsg="Error getting Shipment from database: " + e.toString();
    Debug.logInfo(e,errMsg,module);
    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericEntityException"));
  }
  if (shipment == null) {
    String errMsg="Could not find Shipment id ID [" + shipmentId + "]";
    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","ShipmentIdNotValid"));
  }
  if (errorMapList.size() > 0) {
    result.putAll(ServiceUtil.returnError("Errors found getting shipment information for incoming Show Shipment message"));
    result.put("errorMapList",errorMapList);
    return result;
  }
  String shipGroupSeqId=shipment.getString("primaryShipGroupSeqId");
  String originFacilityId=shipment.getString("originFacilityId");
  List shipUnitElementList=UtilXml.childElementList(daShowShipmentElement,"ns:SHIPUNIT");
  if (UtilValidate.isNotEmpty(shipUnitElementList)) {
    Element shipUnitElement=(Element)shipUnitElementList.get(0);
    String trackingNum=UtilXml.childElementValue(shipUnitElement,"of:TRACKINGID");
    String carrierCode=UtilXml.childElementValue(shipUnitElement,"of:CARRIER");
    if (UtilValidate.isNotEmpty(carrierCode)) {
      String carrierPartyId=null;
      if (carrierCode.startsWith("F")) {
        carrierPartyId="FEDEX";
      }
 else       if (carrierCode.startsWith("U")) {
        carrierPartyId="UPS";
      }
      try {
        Map resultMap=dispatcher.runSync("updateShipmentRouteSegment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId","00001","carrierPartyId",carrierPartyId,"trackingIdNumber",trackingNum,"userLogin",userLogin));
        if (ServiceUtil.isError(resultMap)) {
          String errMsg=ServiceUtil.getErrorMessage(resultMap);
          errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","updateShipmentRouteSegmentError"));
          Debug.logError(errMsg,module);
        }
      }
 catch (      GenericServiceException e) {
        Debug.logInfo(e,module);
        String errMsg="Error executing updateShipmentRouteSegment Service: " + e.toString();
        errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
      }
    }
    Iterator shipUnitElementItr=shipUnitElementList.iterator();
    while (shipUnitElementItr.hasNext()) {
      shipUnitElement=(Element)shipUnitElementItr.next();
      String shipmentPackageSeqId=UtilXml.childElementValue(shipUnitElement,"of:SHPUNITSEQ");
      List invItemElementList=UtilXml.childElementList(shipUnitElement,"ns:INVITEM");
      if (UtilValidate.isNotEmpty(invItemElementList)) {
        Iterator invItemElementItr=invItemElementList.iterator();
        while (invItemElementItr.hasNext()) {
          Element invItemElement=(Element)invItemElementItr.next();
          String productId=UtilXml.childElementValue(invItemElement,"of:ITEM");
          try {
            GenericValue shipmentItem=EntityUtil.getFirst(delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId,"productId",productId)));
            String shipmentItemSeqId=shipmentItem.getString("shipmentItemSeqId");
            GenericValue orderShipment=EntityUtil.getFirst(delegator.findByAnd("OrderShipment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItemSeqId)));
            String orderId=orderShipment.getString("orderId");
            String orderItemSeqId=orderShipment.getString("orderItemSeqId");
            GenericValue product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
            String requireInventory=product.getString("requireInventory");
            if (requireInventory == null) {
              requireInventory="N";
            }
            GenericValue orderItemShipGrpInvReservation=EntityUtil.getFirst(delegator.findByAnd("OrderItemShipGrpInvRes",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId)));
            Map isitspastCtx=UtilMisc.toMap("orderId",orderId,"shipGroupSeqId",shipGroupSeqId,"orderItemSeqId",orderItemSeqId);
            isitspastCtx.put("productId",productId);
            isitspastCtx.put("reservedDatetime",orderItemShipGrpInvReservation.get("reservedDatetime"));
            isitspastCtx.put("requireInventory",requireInventory);
            isitspastCtx.put("reserveOrderEnumId",orderItemShipGrpInvReservation.get("reserveOrderEnumId"));
            isitspastCtx.put("sequenceId",orderItemShipGrpInvReservation.get("sequenceId"));
            isitspastCtx.put("originFacilityId",originFacilityId);
            isitspastCtx.put("userLogin",userLogin);
            isitspastCtx.put("trackingNum",trackingNum);
            isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
            isitspastCtx.put("shipmentId",shipmentId);
            isitspastCtx.put("shipmentPackageSeqId",shipmentPackageSeqId);
            isitspastCtx.put("promisedDatetime",orderItemShipGrpInvReservation.get("promisedDatetime"));
            List invDetailElementList=UtilXml.childElementList(invItemElement,"ns:INVDETAIL");
            if (UtilValidate.isNotEmpty(invDetailElementList)) {
              Iterator invDetailElementItr=invDetailElementList.iterator();
              while (invDetailElementItr.hasNext()) {
                Element invDetailElement=(Element)invDetailElementItr.next();
                String serialNumber=UtilXml.childElementValue(invDetailElement,"of:SERIALNUM");
                isitspastCtx.put("serialNumber",serialNumber);
                isitspastCtx.put("quantity",new Double(1));
                isitspastCtx.put("inventoryItemId",orderItemShipGrpInvReservation.get("inventoryItemId"));
                isitspastCtx.remove("itemIssuanceId");
                try {
                  Map resultMap=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
                  if (ServiceUtil.isError(resultMap)) {
                    String errMsg=ServiceUtil.getErrorMessage(resultMap);
                    errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","IssueSerializedInvServiceError"));
                    Debug.logError(errMsg,module);
                  }
                }
 catch (                GenericServiceException e) {
                  Debug.logInfo(e,module);
                  String errMsg="Error executing issueSerializedInvToShipmentPackageAndSetTracking Service: " + e.toString();
                  errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
                }
              }
            }
 else {
              try {
                isitspastCtx.put("quantity",orderItemShipGrpInvReservation.get("quantity"));
                Map resultMap=dispatcher.runSync("issueSerializedInvToShipmentPackageAndSetTracking",isitspastCtx);
                if (ServiceUtil.isError(resultMap)) {
                  String errMsg=ServiceUtil.getErrorMessage(resultMap);
                  errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","IssueSerializedInvServiceError"));
                  Debug.logError(errMsg,module);
                }
              }
 catch (              GenericServiceException e) {
                Debug.logInfo(e,module);
                String errMsg="Error executing issueSerializedInvToShipmentPackageAndSetTracking Service: " + e.toString();
                errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
              }
            }
          }
 catch (          GenericEntityException e) {
            String errMsg="Error executing issueSerializedInvToShipmentPackageAndSetTracking Service: " + e.toString();
            errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericEntityException"));
            Debug.logInfo(e,module);
          }
        }
      }
    }
    try {
      Map resultMap=dispatcher.runSync("setShipmentStatusPackedAndShipped",UtilMisc.toMap("shipmentId",shipmentId,"userLogin",userLogin));
      if (ServiceUtil.isError(resultMap)) {
        String errMsg=ServiceUtil.getErrorMessage(resultMap);
        errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","SetShipmentStatusPackedAndShippedError"));
        Debug.logError(errMsg,module);
      }
    }
 catch (    GenericServiceException e) {
      Debug.logInfo(e,module);
      String errMsg="Error executing setShipmentStatusPackedAndShipped Service: " + e.toString();
      errorMapList.add(UtilMisc.toMap("description",errMsg,"reasonCode","GenericServiceException"));
    }
  }
  oagisMsgInfoCtx.put("processingStatusId","OAGMP_RECEIVED");
  try {
    dispatcher.runSync("updateOagisMessageInfo",oagisMsgInfoCtx,60,true);
  }
 catch (  GenericServiceException e) {
    String errMsg="Error updating OagisMessageInfo for the Incoming Message: " + e.toString();
    Debug.logError(e,errMsg,module);
  }
  if (errorMapList.size() > 0) {
    result.put("errorMapList",errorMapList);
    return result;
  }
  result.putAll(ServiceUtil.returnSuccess("Service Completed Successfully"));
  return result;
}
