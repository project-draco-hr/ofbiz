{
  Map result=new HashMap();
  GenericDelegator delegator=dctx.getDelegator();
  String productId=(String)context.get("productId");
  String fromDateStr=(String)context.get("fromDate");
  String bomType=(String)context.get("bomType");
  Date fromDate=null;
  if (UtilValidate.isNotEmpty(fromDateStr)) {
    try {
      fromDate=Timestamp.valueOf(fromDateStr);
    }
 catch (    Exception e) {
    }
  }
  if (fromDate == null) {
    fromDate=new Date();
  }
  List bomTypes=new ArrayList();
  if (bomType == null) {
    try {
      List bomTypesValues=delegator.findByAnd("ProductAssocType",UtilMisc.toMap("parentTypeId","PRODUCT_COMPONENT"));
      Iterator bomTypesValuesIt=bomTypesValues.iterator();
      while (bomTypesValuesIt.hasNext()) {
        bomTypes.add(((GenericValue)bomTypesValuesIt.next()).getString("productAssocTypeId"));
      }
    }
 catch (    GenericEntityException gee) {
      return ServiceUtil.returnError("Error running max depth algorithm: " + gee.getMessage());
    }
  }
 else {
    bomTypes.add(bomType);
  }
  int depth=0;
  int maxDepth=0;
  Iterator bomTypesIt=bomTypes.iterator();
  try {
    while (bomTypesIt.hasNext()) {
      String oneBomType=(String)bomTypesIt.next();
      depth=BOMHelper.getMaxDepth(productId,oneBomType,fromDate,delegator);
      if (depth > maxDepth) {
        maxDepth=depth;
      }
    }
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError("Error running max depth algorithm: " + gee.getMessage());
  }
  result.put("depth",new Integer(maxDepth));
  return result;
}
