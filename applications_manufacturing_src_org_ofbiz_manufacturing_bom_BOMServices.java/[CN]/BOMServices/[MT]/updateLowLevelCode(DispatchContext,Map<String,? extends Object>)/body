{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String productId=(String)context.get("productIdTo");
  Boolean alsoComponents=(Boolean)context.get("alsoComponents");
  Locale locale=(Locale)context.get("locale");
  if (alsoComponents == null) {
    alsoComponents=Boolean.TRUE;
  }
  Boolean alsoVariants=(Boolean)context.get("alsoVariants");
  if (alsoVariants == null) {
    alsoVariants=Boolean.TRUE;
  }
  Long llc=null;
  try {
    GenericValue product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
    Map<String,Object> depthResult=dispatcher.runSync("getMaxDepth",UtilMisc.toMap("productId",productId,"bomType","MANUF_COMPONENT"));
    llc=(Long)depthResult.get("depth");
    List<GenericValue> virtualProducts=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productIdTo",productId,"productAssocTypeId","PRODUCT_VARIANT"));
    virtualProducts=EntityUtil.filterByDate(virtualProducts);
    int virtualMaxDepth=0;
    Iterator<GenericValue> virtualProductsIt=virtualProducts.iterator();
    while (virtualProductsIt.hasNext()) {
      int virtualDepth=0;
      GenericValue oneVirtualProductAssoc=virtualProductsIt.next();
      GenericValue virtualProduct=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",oneVirtualProductAssoc.getString("productId")));
      if (virtualProduct.get("billOfMaterialLevel") != null) {
        virtualDepth=virtualProduct.getLong("billOfMaterialLevel").intValue();
      }
 else {
        virtualDepth=0;
      }
      if (virtualDepth > virtualMaxDepth) {
        virtualMaxDepth=virtualDepth;
      }
    }
    if (virtualMaxDepth > llc.intValue()) {
      llc=Long.valueOf(virtualMaxDepth);
    }
    product.set("billOfMaterialLevel",llc);
    product.store();
    if (alsoComponents.booleanValue()) {
      Map<String,Object> treeResult=dispatcher.runSync("getBOMTree",UtilMisc.toMap("productId",productId,"bomType","MANUF_COMPONENT"));
      BOMTree tree=(BOMTree)treeResult.get("tree");
      List<BOMNode> products=FastList.newInstance();
      tree.print(products,llc.intValue());
      for (int i=0; i < products.size(); i++) {
        BOMNode oneNode=products.get(i);
        GenericValue oneProduct=oneNode.getProduct();
        int lev=0;
        if (oneProduct.get("billOfMaterialLevel") != null) {
          lev=oneProduct.getLong("billOfMaterialLevel").intValue();
        }
        if (lev < oneNode.getDepth()) {
          oneProduct.set("billOfMaterialLevel",Long.valueOf(oneNode.getDepth()));
          oneProduct.store();
        }
      }
    }
    if (alsoVariants.booleanValue()) {
      List<GenericValue> variantProducts=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",productId,"productAssocTypeId","PRODUCT_VARIANT"));
      variantProducts=EntityUtil.filterByDate(variantProducts,true);
      Iterator<GenericValue> variantProductsIt=variantProducts.iterator();
      while (variantProductsIt.hasNext()) {
        GenericValue oneVariantProductAssoc=variantProductsIt.next();
        GenericValue variantProduct=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",oneVariantProductAssoc.getString("productId")));
        variantProduct.set("billOfMaterialLevel",llc);
        variantProduct.store();
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningUpdateLowLevelCode",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  result.put("lowLevelCode",llc);
  return result;
}
