{
  Map result=new HashMap();
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String shipmentId=(String)context.get("shipmentId");
  try {
    List packages=delegator.findByAnd("ShipmentPackage",UtilMisc.toMap("shipmentId",shipmentId));
    if (!UtilValidate.isEmpty(packages)) {
      return ServiceUtil.returnError("Packages already found.");
    }
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError("Error loading the ShipmentPackages");
  }
  List shipmentItems=null;
  try {
    shipmentItems=delegator.findByAnd("ShipmentItem",UtilMisc.toMap("shipmentId",shipmentId));
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError("Error loading the ShipmentItems");
  }
  Iterator shipmentItemsIt=shipmentItems.iterator();
  HashMap orderReadHelpers=new HashMap();
  HashMap partyOrderShipments=new HashMap();
  while (shipmentItemsIt.hasNext()) {
    GenericValue shipmentItem=(GenericValue)shipmentItemsIt.next();
    List orderShipments=null;
    try {
      orderShipments=delegator.findByAnd("OrderShipment",UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItem.getString("shipmentItemSeqId")));
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
    }
    GenericValue orderShipment=org.ofbiz.entity.util.EntityUtil.getFirst(orderShipments);
    if (orderShipment != null && !orderReadHelpers.containsKey(orderShipment.getString("orderId"))) {
      orderReadHelpers.put(orderShipment.getString("orderId"),new OrderReadHelper(delegator,orderShipment.getString("orderId")));
    }
    OrderReadHelper orderReadHelper=(OrderReadHelper)orderReadHelpers.get(orderShipment.getString("orderId"));
    if (orderReadHelper != null) {
      Map orderShipmentReadMap=UtilMisc.toMap("orderShipment",orderShipment,"orderReadHelper",orderReadHelper);
      String partyId=(orderReadHelper.getPlacingParty() != null ? orderReadHelper.getPlacingParty().getString("partyId") : null);
      if (partyId != null) {
        if (!partyOrderShipments.containsKey(partyId)) {
          ArrayList orderShipmentReadMapList=new ArrayList();
          partyOrderShipments.put(partyId,orderShipmentReadMapList);
        }
        ArrayList orderShipmentReadMapList=(ArrayList)partyOrderShipments.get(partyId);
        orderShipmentReadMapList.add(orderShipmentReadMap);
      }
    }
  }
  Iterator partyOrderShipmentsIt=partyOrderShipments.entrySet().iterator();
  while (partyOrderShipmentsIt.hasNext()) {
    Map.Entry partyOrderShipment=(Map.Entry)partyOrderShipmentsIt.next();
    String partyId=(String)partyOrderShipment.getKey();
    List orderShipmentReadMapList=(List)partyOrderShipment.getValue();
    for (int i=0; i < orderShipmentReadMapList.size(); i++) {
      Map orderShipmentReadMap=(Map)orderShipmentReadMapList.get(i);
      GenericValue orderShipment=(GenericValue)orderShipmentReadMap.get("orderShipment");
      OrderReadHelper orderReadHelper=(OrderReadHelper)orderShipmentReadMap.get("orderReadHelper");
      GenericValue orderItem=orderReadHelper.getOrderItem(orderShipment.getString("orderItemSeqId"));
      Map serviceContext=new HashMap();
      serviceContext.put("productId",orderItem.getString("productId"));
      serviceContext.put("quantity",orderShipment.getBigDecimal("quantity"));
      Map resultService=null;
      try {
        resultService=dispatcher.runSync("getProductsInPackages",serviceContext);
      }
 catch (      GenericServiceException e) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
      }
      List productsInPackages=(List)resultService.get("productsInPackages");
      if (productsInPackages.size() == 1) {
        BOMNode root=(BOMNode)productsInPackages.get(0);
        String rootProductId=(root.getSubstitutedNode() != null ? root.getSubstitutedNode().getProduct().getString("productId") : root.getProduct().getString("productId"));
        if (orderItem.getString("productId").equals(rootProductId)) {
          productsInPackages=null;
        }
      }
      if (productsInPackages != null && productsInPackages.size() == 0) {
        productsInPackages=null;
      }
      if (UtilValidate.isNotEmpty(productsInPackages)) {
        orderShipmentReadMap.put("productsInPackages",productsInPackages);
      }
    }
  }
  HashMap boxTypes=new HashMap();
  partyOrderShipmentsIt=partyOrderShipments.entrySet().iterator();
  while (partyOrderShipmentsIt.hasNext()) {
    HashMap boxTypeContent=new HashMap();
    Map.Entry partyOrderShipment=(Map.Entry)partyOrderShipmentsIt.next();
    String partyId=(String)partyOrderShipment.getKey();
    List orderShipmentReadMapList=(List)partyOrderShipment.getValue();
    for (int i=0; i < orderShipmentReadMapList.size(); i++) {
      Map orderShipmentReadMap=(Map)orderShipmentReadMapList.get(i);
      GenericValue orderShipment=(GenericValue)orderShipmentReadMap.get("orderShipment");
      OrderReadHelper orderReadHelper=(OrderReadHelper)orderShipmentReadMap.get("orderReadHelper");
      List productsInPackages=(List)orderShipmentReadMap.get("productsInPackages");
      if (productsInPackages != null) {
        for (int j=0; j < productsInPackages.size(); j++) {
          BOMNode component=(BOMNode)productsInPackages.get(j);
          HashMap boxTypeContentMap=new HashMap();
          boxTypeContentMap.put("content",orderShipmentReadMap);
          boxTypeContentMap.put("componentIndex",Integer.valueOf(j));
          GenericValue product=component.getProduct();
          String boxTypeId=product.getString("shipmentBoxTypeId");
          if (boxTypeId != null) {
            if (!boxTypes.containsKey(boxTypeId)) {
              GenericValue boxType=null;
              try {
                boxType=delegator.findByPrimaryKey("ShipmentBoxType",UtilMisc.toMap("shipmentBoxTypeId",boxTypeId));
              }
 catch (              GenericEntityException e) {
                return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
              }
              boxTypes.put(boxTypeId,boxType);
              boxTypeContent.put(boxTypeId,new ArrayList());
            }
            GenericValue boxType=(GenericValue)boxTypes.get(boxTypeId);
            List boxTypeContentList=(List)boxTypeContent.get(boxTypeId);
            boxTypeContentList.add(boxTypeContentMap);
          }
        }
      }
 else {
        HashMap boxTypeContentMap=new HashMap();
        boxTypeContentMap.put("content",orderShipmentReadMap);
        GenericValue orderItem=orderReadHelper.getOrderItem(orderShipment.getString("orderItemSeqId"));
        GenericValue product=null;
        try {
          product=orderItem.getRelatedOne("Product");
        }
 catch (        GenericEntityException e) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
        }
        String boxTypeId=product.getString("shipmentBoxTypeId");
        if (boxTypeId != null) {
          if (!boxTypes.containsKey(boxTypeId)) {
            GenericValue boxType=null;
            try {
              boxType=delegator.findByPrimaryKey("ShipmentBoxType",UtilMisc.toMap("shipmentBoxTypeId",boxTypeId));
            }
 catch (            GenericEntityException e) {
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
            }
            boxTypes.put(boxTypeId,boxType);
            boxTypeContent.put(boxTypeId,new ArrayList());
          }
          GenericValue boxType=(GenericValue)boxTypes.get(boxTypeId);
          List boxTypeContentList=(List)boxTypeContent.get(boxTypeId);
          boxTypeContentList.add(boxTypeContentMap);
        }
      }
    }
    Iterator boxTypeContentIt=boxTypeContent.entrySet().iterator();
    while (boxTypeContentIt.hasNext()) {
      Map.Entry boxTypeContentEntry=(Map.Entry)boxTypeContentIt.next();
      String boxTypeId=(String)boxTypeContentEntry.getKey();
      List contentList=(List)boxTypeContentEntry.getValue();
      GenericValue boxType=(GenericValue)boxTypes.get(boxTypeId);
      BigDecimal boxWidth=boxType.getBigDecimal("boxLength");
      BigDecimal totalWidth=BigDecimal.ZERO;
      if (boxWidth == null) {
        boxWidth=BigDecimal.ZERO;
      }
      String shipmentPackageSeqId=null;
      for (int i=0; i < contentList.size(); i++) {
        Map contentMap=(Map)contentList.get(i);
        Map content=(Map)contentMap.get("content");
        OrderReadHelper orderReadHelper=(OrderReadHelper)content.get("orderReadHelper");
        List productsInPackages=(List)content.get("productsInPackages");
        GenericValue orderShipment=(GenericValue)content.get("orderShipment");
        GenericValue product=null;
        BigDecimal quantity=BigDecimal.ZERO;
        boolean subProduct=contentMap.containsKey("componentIndex");
        if (subProduct) {
          Integer index=(Integer)contentMap.get("componentIndex");
          BOMNode component=(BOMNode)productsInPackages.get(index.intValue());
          product=component.getProduct();
          quantity=component.getQuantity();
        }
 else {
          GenericValue orderItem=orderReadHelper.getOrderItem(orderShipment.getString("orderItemSeqId"));
          try {
            product=orderItem.getRelatedOne("Product");
          }
 catch (          GenericEntityException e) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
          }
          quantity=orderShipment.getBigDecimal("quantity");
        }
        BigDecimal productDepth=product.getBigDecimal("shippingDepth");
        if (productDepth == null) {
          productDepth=product.getBigDecimal("productDepth");
        }
        if (productDepth == null) {
          productDepth=BigDecimal.ONE;
        }
        BigDecimal firstMaxNumOfProducts=boxWidth.subtract(totalWidth).divide(productDepth,0,BigDecimal.ROUND_FLOOR);
        if (firstMaxNumOfProducts.compareTo(BigDecimal.ZERO) == 0)         firstMaxNumOfProducts=BigDecimal.ONE;
        BigDecimal maxNumOfProducts=boxWidth.divide(productDepth,0,BigDecimal.ROUND_FLOOR);
        if (maxNumOfProducts.compareTo(BigDecimal.ZERO) == 0)         maxNumOfProducts=BigDecimal.ONE;
        BigDecimal remQuantity=quantity;
        boolean isFirst=true;
        while (remQuantity.compareTo(BigDecimal.ZERO) > 0) {
          BigDecimal maxQuantity=BigDecimal.ZERO;
          if (isFirst) {
            maxQuantity=firstMaxNumOfProducts;
            isFirst=false;
          }
 else {
            maxQuantity=maxNumOfProducts;
          }
          BigDecimal qty=(remQuantity.compareTo(maxQuantity) < 0 ? remQuantity : maxQuantity);
          if (shipmentPackageSeqId == null) {
            try {
              Map resultService=dispatcher.runSync("createShipmentPackage",UtilMisc.<String,Object>toMap("shipmentId",orderShipment.getString("shipmentId"),"shipmentBoxTypeId",boxTypeId,"userLogin",userLogin));
              shipmentPackageSeqId=(String)resultService.get("shipmentPackageSeqId");
            }
 catch (            GenericServiceException e) {
              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
            }
            totalWidth=BigDecimal.ZERO;
          }
          try {
            Map inputMap=null;
            if (subProduct) {
              inputMap=UtilMisc.toMap("shipmentId",orderShipment.getString("shipmentId"),"shipmentPackageSeqId",shipmentPackageSeqId,"shipmentItemSeqId",orderShipment.getString("shipmentItemSeqId"),"subProductId",product.getString("productId"),"userLogin",userLogin,"subProductQuantity",qty);
            }
 else {
              inputMap=UtilMisc.toMap("shipmentId",orderShipment.getString("shipmentId"),"shipmentPackageSeqId",shipmentPackageSeqId,"shipmentItemSeqId",orderShipment.getString("shipmentItemSeqId"),"userLogin",userLogin,"quantity",qty);
            }
            Map resultService=dispatcher.runSync("createShipmentPackageContent",inputMap);
          }
 catch (          GenericServiceException e) {
            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingPackageConfiguratorError",locale));
          }
          totalWidth=totalWidth.add(qty.multiply(productDepth));
          if (qty.compareTo(maxQuantity) == 0)           shipmentPackageSeqId=null;
          remQuantity=remQuantity.subtract(qty);
        }
      }
    }
  }
  return result;
}
