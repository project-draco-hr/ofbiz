{
  Map result=new HashMap();
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String productId=(String)context.get("productId");
  Double quantity=(Double)context.get("quantity");
  String fromDateStr=(String)context.get("fromDate");
  if (quantity == null) {
    quantity=new Double(1);
  }
  Date fromDate=null;
  if (UtilValidate.isNotEmpty(fromDateStr)) {
    try {
      fromDate=Timestamp.valueOf(fromDateStr);
    }
 catch (    Exception e) {
    }
  }
  if (fromDate == null) {
    fromDate=new Date();
  }
  BOMTree tree=null;
  ArrayList components=new ArrayList();
  try {
    tree=new BOMTree(productId,"MANUF_COMPONENT",fromDate,BOMTree.EXPLOSION_MANUFACTURING,delegator,dispatcher,userLogin);
    tree.setRootQuantity(quantity.doubleValue());
    tree.getProductsInPackages(components);
  }
 catch (  GenericEntityException gee) {
    return ServiceUtil.returnError("Error creating bill of materials tree: " + gee.getMessage());
  }
  result.put("productsInPackages",components);
  return result;
}
