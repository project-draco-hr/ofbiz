{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  try {
    List<GenericValue> products=delegator.findList("Product",null,null,UtilMisc.toList("isVirtual DESC"),null,false);
    Iterator<GenericValue> productsIt=products.iterator();
    Long zero=Long.valueOf(0);
    List<GenericValue> allProducts=FastList.newInstance();
    while (productsIt.hasNext()) {
      GenericValue product=(GenericValue)productsIt.next();
      product.set("billOfMaterialLevel",zero);
      allProducts.add(product);
    }
    delegator.storeAll(allProducts);
    Debug.logInfo("Low Level Code set to 0 for all the products",module);
    productsIt=products.iterator();
    while (productsIt.hasNext()) {
      GenericValue product=(GenericValue)productsIt.next();
      try {
        Map<String,Object> depthResult=dispatcher.runSync("updateLowLevelCode",UtilMisc.<String,Object>toMap("productIdTo",product.getString("productId"),"alsoComponents",Boolean.valueOf(false),"alsoVariants",Boolean.valueOf(false)));
        Debug.logInfo("Product [" + product.getString("productId") + "] Low Level Code ["+ depthResult.get("lowLevelCode")+ "]",module);
      }
 catch (      Exception exc) {
        Debug.logWarning(exc.getMessage(),module);
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningInitLowLevelCode",UtilMisc.toMap("errorString",e.getMessage()),locale));
  }
  return result;
}
