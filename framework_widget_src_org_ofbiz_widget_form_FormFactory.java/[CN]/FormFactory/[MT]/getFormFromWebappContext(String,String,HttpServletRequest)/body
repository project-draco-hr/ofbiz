{
  String webappName=UtilHttp.getApplicationName(request);
  String cacheKey=webappName + "::" + resourceName;
  Map<String,ModelForm> modelFormMap=formWebappCache.get(cacheKey);
  if (modelFormMap == null) {
synchronized (FormFactory.class) {
      modelFormMap=formWebappCache.get(cacheKey);
      if (modelFormMap == null) {
        ServletContext servletContext=(ServletContext)request.getAttribute("servletContext");
        GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
        LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
        URL formFileUrl=servletContext.getResource(resourceName);
        Document formFileDoc=UtilXml.readXmlDocument(formFileUrl,true);
        modelFormMap=readFormDocument(formFileDoc,delegator.getModelReader(),dispatcher.getDispatchContext(),cacheKey);
        formWebappCache.put(cacheKey,modelFormMap);
      }
    }
  }
  ModelForm modelForm=(ModelForm)modelFormMap.get(formName);
  if (modelForm == null) {
    throw new IllegalArgumentException("Could not find form with name [" + formName + "] in webapp resource ["+ resourceName+ "] in the webapp ["+ webappName+ "]");
  }
  return modelForm;
}
