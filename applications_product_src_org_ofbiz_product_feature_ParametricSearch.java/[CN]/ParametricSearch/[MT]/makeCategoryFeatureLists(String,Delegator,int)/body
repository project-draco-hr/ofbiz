{
  Map<String,Map<String,GenericValue>> productFeaturesByTypeMap=FastMap.newInstance();
  try {
    List<GenericValue> productFeatureCategoryAppls=delegator.findByAndCache("ProductFeatureCategoryAppl",UtilMisc.toMap("productCategoryId",productCategoryId));
    productFeatureCategoryAppls=EntityUtil.filterByDate(productFeatureCategoryAppls,true);
    if (productFeatureCategoryAppls != null) {
      for (      GenericValue productFeatureCategoryAppl : productFeatureCategoryAppls) {
        List<GenericValue> productFeatures=delegator.findByAndCache("ProductFeature",UtilMisc.toMap("productFeatureCategoryId",productFeatureCategoryAppl.get("productFeatureCategoryId")));
        for (        GenericValue productFeature : productFeatures) {
          String productFeatureTypeId=productFeature.getString("productFeatureTypeId");
          Map<String,GenericValue> featuresByType=productFeaturesByTypeMap.get(productFeatureTypeId);
          if (featuresByType == null) {
            featuresByType=FastMap.newInstance();
            productFeaturesByTypeMap.put(productFeatureTypeId,featuresByType);
          }
          if (featuresByType.size() < perTypeMaxSize) {
            featuresByType.put(productFeature.getString("productFeatureId"),productFeature);
          }
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting feature categories associated with the category with ID: " + productCategoryId,module);
  }
  try {
    List<GenericValue> productFeatureCatGrpAppls=delegator.findByAndCache("ProductFeatureCatGrpAppl",UtilMisc.toMap("productCategoryId",productCategoryId));
    productFeatureCatGrpAppls=EntityUtil.filterByDate(productFeatureCatGrpAppls,true);
    if (productFeatureCatGrpAppls != null) {
      for (      GenericValue productFeatureCatGrpAppl : productFeatureCatGrpAppls) {
        List<GenericValue> productFeatureGroupAppls=delegator.findByAndCache("ProductFeatureGroupAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureCatGrpAppl.get("productFeatureGroupId")));
        for (        GenericValue productFeatureGroupAppl : productFeatureGroupAppls) {
          GenericValue productFeature=delegator.findOne("ProductFeature",UtilMisc.toMap("productFeatureId",productFeatureGroupAppl.get("productFeatureId")),true);
          String productFeatureTypeId=productFeature.getString("productFeatureTypeId");
          Map<String,GenericValue> featuresByType=productFeaturesByTypeMap.get(productFeatureTypeId);
          if (featuresByType == null) {
            featuresByType=FastMap.newInstance();
            productFeaturesByTypeMap.put(productFeatureTypeId,featuresByType);
          }
          if (featuresByType.size() < perTypeMaxSize) {
            featuresByType.put(productFeature.getString("productFeatureId"),productFeature);
          }
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting feature groups associated with the category with ID: " + productCategoryId,module);
  }
  Map<String,List<GenericValue>> productFeaturesByTypeMapSorted=FastMap.newInstance();
  for (  Map.Entry<String,Map<String,GenericValue>> entry : productFeaturesByTypeMap.entrySet()) {
    List<GenericValue> sortedFeatures=EntityUtil.orderBy(entry.getValue().values(),UtilMisc.toList("description","defaultSequenceNum"));
    productFeaturesByTypeMapSorted.put(entry.getKey(),sortedFeatures);
  }
  return productFeaturesByTypeMapSorted;
}
