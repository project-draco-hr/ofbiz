{
  Map<String,List<GenericValue>> productFeaturesByTypeMap=FastMap.newInstance();
  try {
    Set<String> typesWithOverflowMessages=FastSet.newInstance();
    EntityListIterator productFeatureEli=delegator.find("ProductFeature",null,null,null,UtilMisc.toList("description"),null);
    GenericValue productFeature=null;
    while ((productFeature=productFeatureEli.next()) != null) {
      String productFeatureTypeId=productFeature.getString("productFeatureTypeId");
      List<GenericValue> featuresByType=productFeaturesByTypeMap.get(productFeatureTypeId);
      if (featuresByType == null) {
        featuresByType=FastList.newInstance();
        productFeaturesByTypeMap.put(productFeatureTypeId,featuresByType);
      }
      if (featuresByType.size() > perTypeMaxSize) {
        if (!typesWithOverflowMessages.contains(productFeatureTypeId)) {
          typesWithOverflowMessages.add(productFeatureTypeId);
        }
      }
 else {
        featuresByType.add(productFeature);
      }
    }
    productFeatureEli.close();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting all features",module);
  }
  return productFeaturesByTypeMap;
}
