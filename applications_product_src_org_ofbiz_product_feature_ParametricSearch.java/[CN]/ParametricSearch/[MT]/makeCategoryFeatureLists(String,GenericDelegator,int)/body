{
  Map<String,Map<String,GenericValue>> productFeaturesByTypeMap=FastMap.newInstance();
  try {
    List<GenericValue> productFeatureCategoryAppls=delegator.findByAndCache("ProductFeatureCategoryAppl",UtilMisc.toMap("productCategoryId",productCategoryId));
    productFeatureCategoryAppls=EntityUtil.filterByDate(productFeatureCategoryAppls,true);
    if (productFeatureCategoryAppls != null) {
      Iterator<GenericValue> pfcasIter=productFeatureCategoryAppls.iterator();
      while (pfcasIter.hasNext()) {
        GenericValue productFeatureCategoryAppl=pfcasIter.next();
        List<GenericValue> productFeatures=delegator.findByAndCache("ProductFeature",UtilMisc.toMap("productFeatureCategoryId",productFeatureCategoryAppl.get("productFeatureCategoryId")));
        Iterator<GenericValue> pfsIter=productFeatures.iterator();
        while (pfsIter.hasNext()) {
          GenericValue productFeature=pfsIter.next();
          String productFeatureTypeId=productFeature.getString("productFeatureTypeId");
          Map<String,GenericValue> featuresByType=productFeaturesByTypeMap.get(productFeatureTypeId);
          if (featuresByType == null) {
            featuresByType=FastMap.newInstance();
            productFeaturesByTypeMap.put(productFeatureTypeId,featuresByType);
          }
          if (featuresByType.size() < perTypeMaxSize) {
            featuresByType.put(productFeature.getString("productFeatureId"),productFeature);
          }
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting feature categories associated with the category with ID: " + productCategoryId,module);
  }
  try {
    List<GenericValue> productFeatureCatGrpAppls=delegator.findByAndCache("ProductFeatureCatGrpAppl",UtilMisc.toMap("productCategoryId",productCategoryId));
    productFeatureCatGrpAppls=EntityUtil.filterByDate(productFeatureCatGrpAppls,true);
    if (productFeatureCatGrpAppls != null) {
      Iterator<GenericValue> pfcgasIter=productFeatureCatGrpAppls.iterator();
      while (pfcgasIter.hasNext()) {
        GenericValue productFeatureCatGrpAppl=pfcgasIter.next();
        List<GenericValue> productFeatureGroupAppls=delegator.findByAndCache("ProductFeatureGroupAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureCatGrpAppl.get("productFeatureGroupId")));
        Iterator<GenericValue> pfgaasIter=productFeatureGroupAppls.iterator();
        while (pfgaasIter.hasNext()) {
          GenericValue productFeatureGroupAppl=pfgaasIter.next();
          GenericValue productFeature=delegator.findByPrimaryKeyCache("ProductFeature",UtilMisc.toMap("productFeatureId",productFeatureGroupAppl.get("productFeatureId")));
          String productFeatureTypeId=productFeature.getString("productFeatureTypeId");
          Map<String,GenericValue> featuresByType=productFeaturesByTypeMap.get(productFeatureTypeId);
          if (featuresByType == null) {
            featuresByType=FastMap.newInstance();
            productFeaturesByTypeMap.put(productFeatureTypeId,featuresByType);
          }
          if (featuresByType.size() < perTypeMaxSize) {
            featuresByType.put(productFeature.getString("productFeatureId"),productFeature);
          }
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting feature groups associated with the category with ID: " + productCategoryId,module);
  }
  Map<String,List<GenericValue>> productFeaturesByTypeMapSorted=FastMap.newInstance();
  Iterator<Map.Entry<String,Map<String,GenericValue>>> productFeatureTypeEntries=productFeaturesByTypeMap.entrySet().iterator();
  while (productFeatureTypeEntries.hasNext()) {
    Map.Entry<String,Map<String,GenericValue>> entry=productFeatureTypeEntries.next();
    List<GenericValue> sortedFeatures=EntityUtil.orderBy(entry.getValue().values(),UtilMisc.toList("description"));
    productFeaturesByTypeMapSorted.put(entry.getKey(),sortedFeatures);
  }
  return productFeaturesByTypeMapSorted;
}
