{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_DELETE");
  if (result.size() > 0)   return result;
  String contactMechId=(String)context.get("contactMechId");
  GenericValue partyContactMech=null;
  try {
    partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));
  }
  if (partyContactMech == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_no_contact_found",locale));
  }
  partyContactMech.set("thruDate",UtilDateTime.nowTimestamp());
  try {
    partyContactMech.store();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_write",locale));
  }
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
