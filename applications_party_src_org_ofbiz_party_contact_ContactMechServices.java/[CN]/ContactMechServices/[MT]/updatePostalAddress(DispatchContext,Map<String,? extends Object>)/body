{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Timestamp now=UtilDateTime.nowTimestamp();
  List<GenericValue> toBeStored=FastList.newInstance();
  boolean isModified=false;
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");
  if (result.size() > 0) {
    return result;
  }
  String newCmId=null;
  try {
    newCmId=delegator.getNextSeqId("ContactMech");
  }
 catch (  IllegalArgumentException e) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));
  }
  String contactMechId=(String)context.get("contactMechId");
  GenericValue contactMech=null;
  GenericValue partyContactMech=null;
  try {
    contactMech=delegator.findByPrimaryKey("ContactMech",UtilMisc.toMap("contactMechId",contactMechId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.getMessage(),module);
    contactMech=null;
  }
  if (!partyId.equals("_NA_")) {
    try {
      List<GenericValue> partyContactMechs=EntityUtil.filterByDate(delegator.findByAnd("PartyContactMech",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId),UtilMisc.toList("fromDate")),true);
      partyContactMech=EntityUtil.getFirst(partyContactMechs);
      if (partyContactMech == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));
      }
 else {
        toBeStored.add(partyContactMech);
      }
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      contactMech=null;
    }
  }
  if (contactMech == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));
  }
  GenericValue newContactMech=GenericValue.create(contactMech);
  GenericValue newPartyContactMech=null;
  if (partyContactMech != null)   newPartyContactMech=GenericValue.create(partyContactMech);
  GenericValue relatedEntityToSet=null;
  if ("POSTAL_ADDRESS".equals(contactMech.getString("contactMechTypeId"))) {
    GenericValue addr=null;
    try {
      addr=delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",contactMechId));
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.toString(),module);
      addr=null;
    }
    relatedEntityToSet=GenericValue.create(addr);
    relatedEntityToSet.set("toName",context.get("toName"));
    relatedEntityToSet.set("attnName",context.get("attnName"));
    relatedEntityToSet.set("address1",context.get("address1"));
    relatedEntityToSet.set("address2",context.get("address2"));
    relatedEntityToSet.set("directions",context.get("directions"));
    relatedEntityToSet.set("city",context.get("city"));
    relatedEntityToSet.set("postalCode",context.get("postalCode"));
    relatedEntityToSet.set("postalCodeExt",context.get("postalCodeExt"));
    relatedEntityToSet.set("stateProvinceGeoId",context.get("stateProvinceGeoId"));
    relatedEntityToSet.set("countryGeoId",context.get("countryGeoId"));
    relatedEntityToSet.set("postalCodeGeoId",context.get("postalCodeGeoId"));
    if (addr == null || !relatedEntityToSet.equals(addr)) {
      isModified=true;
    }
    relatedEntityToSet.set("contactMechId",newCmId);
  }
 else {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_update_contact_as_POSTAL_ADDRESS_specified",UtilMisc.toMap("contactMechTypeId",contactMech.getString("contactMechTypeId")),locale));
  }
  if (newPartyContactMech != null) {
    newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));
    newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));
  }
  if (!newContactMech.equals(contactMech))   isModified=true;
  if (newPartyContactMech != null && !newPartyContactMech.equals(partyContactMech))   isModified=true;
  toBeStored.add(newContactMech);
  if (newPartyContactMech != null)   toBeStored.add(newPartyContactMech);
  if (isModified) {
    if (relatedEntityToSet != null)     toBeStored.add(relatedEntityToSet);
    newContactMech.set("contactMechId",newCmId);
    if (newPartyContactMech != null) {
      newPartyContactMech.set("contactMechId",newCmId);
      newPartyContactMech.set("fromDate",now);
      newPartyContactMech.set("thruDate",null);
      try {
        Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose"));
        while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {
          GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());
          tempVal.set("contactMechId",newCmId);
          toBeStored.add(tempVal);
        }
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e.toString(),module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));
      }
      partyContactMech.set("thruDate",now);
    }
    try {
      delegator.storeAll(toBeStored);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));
    }
  }
 else {
    result.put("newContactMechId",contactMechId);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));
    return result;
  }
  result.put("newContactMechId",newCmId);
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
