{
  this.nextLine=null;
  this.nextRecord=null;
  boolean isFixedRecord=ModelDataFile.SEP_FIXED_RECORD.equals(modelDataFile.separatorStyle);
  boolean isFixedLength=ModelDataFile.SEP_FIXED_LENGTH.equals(modelDataFile.separatorStyle);
  boolean isDelimited=ModelDataFile.SEP_DELIMITED.equals(modelDataFile.separatorStyle);
  if (isFixedRecord) {
    if (modelDataFile.recordLength <= 0) {
      throw new DataFileException("Cannot read a fixed record length file if no record length is specified");
    }
    try {
      char[] charData=new char[modelDataFile.recordLength + 1];
      if (br.read(charData,0,modelDataFile.recordLength) == -1) {
        nextLine=null;
      }
 else {
        nextLine=new String(charData);
      }
    }
 catch (    IOException e) {
      throw new DataFileException("Error reading line #" + nextLineNum + " (index "+ (nextLineNum - 1) * modelDataFile.recordLength + " length " + modelDataFile.recordLength + ") from location: " + locationInfo,e);
    }
  }
 else {
    try {
      nextLine=br.readLine();
    }
 catch (    IOException e) {
      throw new DataFileException("Error reading line #" + nextLineNum + " from location: "+ locationInfo,e);
    }
  }
  if (nextLine != null && !(eof.equals(nextLine.substring(0,1)) && 1 == nextLine.length())) {
    nextLineNum++;
    ModelRecord modelRecord=findModelForLine(nextLine,nextLineNum,modelDataFile);
    if (isDelimited) {
      this.nextRecord=Record.createDelimitedRecord(nextLine,nextLineNum,modelRecord,modelDataFile.delimiter);
    }
 else {
      this.nextRecord=Record.createRecord(nextLine,nextLineNum,modelRecord);
    }
    return true;
  }
 else {
    this.close();
    return false;
  }
}
