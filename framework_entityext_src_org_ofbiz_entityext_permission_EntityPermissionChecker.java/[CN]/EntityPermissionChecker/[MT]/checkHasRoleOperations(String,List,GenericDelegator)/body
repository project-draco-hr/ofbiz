{
  if (targetOperations == null)   return false;
  if (partyId != null && targetOperations.contains("HAS_USER_ROLE"))   return true;
  boolean hasRoleOperation=false;
  Iterator targOpIter=targetOperations.iterator();
  boolean hasNeed=false;
  List newHasRoleList=new ArrayList();
  while (targOpIter.hasNext()) {
    String roleOp=(String)targOpIter.next();
    int idx1=roleOp.indexOf("HAS_");
    if (idx1 == 0) {
      String roleOp1=roleOp.substring(4);
      int idx2=roleOp1.indexOf("_ROLE");
      if (idx2 == (roleOp1.length() - 5)) {
        String roleOp2=roleOp1.substring(0,roleOp1.indexOf("_ROLE") - 1);
        newHasRoleList.add(roleOp2);
        hasNeed=true;
      }
    }
  }
  if (hasNeed) {
    GenericValue uLogin=null;
    try {
      if (UtilValidate.isNotEmpty(partyId)) {
        List partyRoleList=delegator.findByAndCache("PartyRole",UtilMisc.toMap("partyId",partyId));
        Iterator partyRoleIter=partyRoleList.iterator();
        while (partyRoleIter.hasNext()) {
          GenericValue partyRole=(GenericValue)partyRoleIter.next();
          String roleTypeId=partyRole.getString("roleTypeId");
          targOpIter=newHasRoleList.iterator();
          while (targOpIter.hasNext()) {
            String thisRole=(String)targOpIter.next();
            if (roleTypeId.indexOf(thisRole) >= 0) {
              hasRoleOperation=true;
              break;
            }
          }
          if (hasRoleOperation)           break;
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return hasRoleOperation;
    }
  }
  return hasRoleOperation;
}
