{
  boolean passed=false;
  String idString=entityIdExdr.expandString(context);
  List entityIdList=null;
  if (UtilValidate.isNotEmpty(idString)) {
    entityIdList=StringUtil.split(idString,"|");
  }
 else {
    entityIdList=new ArrayList();
  }
  String entityName=entityNameExdr.expandString(context);
  HttpServletRequest request=(HttpServletRequest)context.get("request");
  GenericValue userLogin=null;
  String userLoginId=null;
  String partyId=null;
  GenericDelegator delegator=null;
  if (request != null) {
    HttpSession session=request.getSession();
    userLogin=(GenericValue)session.getAttribute("userLogin");
    if (userLogin != null) {
      userLoginId=userLogin.getString("userLoginId");
      partyId=userLogin.getString("partyId");
    }
    delegator=(GenericDelegator)request.getAttribute("delegator");
  }
  if (auxiliaryValueGetter != null)   auxiliaryValueGetter.clearList();
  if (relatedRoleGetter != null)   relatedRoleGetter.clearList();
  try {
    permissionConditionGetter.init(delegator);
    passed=checkPermissionMethod(delegator,partyId,entityName,entityIdList,auxiliaryValueGetter,relatedRoleGetter,permissionConditionGetter);
    if (!passed && displayFailCond) {
      String errMsg="Permission is denied. \nThese are the conditions of which one must be met:\n" + permissionConditionGetter.dumpAsText();
      List errorMessageList=(List)context.get("errorMessageList");
      errorMessageList.add(errMsg);
    }
  }
 catch (  GenericEntityException e) {
    throw new RuntimeException(e.getMessage());
  }
  return passed;
}
