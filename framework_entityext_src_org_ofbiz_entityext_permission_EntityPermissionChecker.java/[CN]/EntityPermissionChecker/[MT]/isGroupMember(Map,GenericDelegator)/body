{
  boolean isMember=false;
  String partyIdFrom=(String)partyRelationshipValues.get("partyIdFrom");
  String partyIdTo=(String)partyRelationshipValues.get("partyIdTo");
  String roleTypeIdFrom="PERMISSION_GROUP_MBR";
  String roleTypeIdTo="PERMISSION_GROUP";
  Timestamp fromDate=UtilDateTime.nowTimestamp();
  Timestamp thruDate=UtilDateTime.getDayStart(UtilDateTime.nowTimestamp(),1);
  if (partyRelationshipValues.get("roleTypeIdFrom") != null) {
    roleTypeIdFrom=(String)partyRelationshipValues.get("roleTypeIdFrom");
  }
  if (partyRelationshipValues.get("roleTypeIdTo") != null) {
    roleTypeIdTo=(String)partyRelationshipValues.get("roleTypeIdTo");
  }
  if (partyRelationshipValues.get("fromDate") != null) {
    fromDate=(Timestamp)partyRelationshipValues.get("fromDate");
  }
  if (partyRelationshipValues.get("thruDate") != null) {
    thruDate=(Timestamp)partyRelationshipValues.get("thruDate");
  }
  EntityExpr partyFromExpr=new EntityExpr("partyIdFrom",EntityOperator.EQUALS,partyIdFrom);
  EntityExpr partyToExpr=new EntityExpr("partyIdTo",EntityOperator.EQUALS,partyIdTo);
  EntityExpr relationExpr=new EntityExpr("partyRelationshipTypeId",EntityOperator.EQUALS,"CONTENT_PERMISSION");
  EntityExpr fromExpr=new EntityExpr("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,fromDate);
  EntityCondition thruCond=EntityCondition.makeCondition(UtilMisc.toList(new EntityExpr("thruDate",EntityOperator.EQUALS,null),new EntityExpr("thruDate",EntityOperator.GREATER_THAN,thruDate)),EntityOperator.OR);
  List joinList=UtilMisc.toList(partyFromExpr,partyToExpr);
  EntityCondition condition=EntityCondition.makeCondition(joinList);
  List partyRelationships=null;
  try {
    partyRelationships=delegator.findList("PartyRelationship",condition,null,null,null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem finding PartyRelationships. ",module);
    return false;
  }
  if (partyRelationships.size() > 0) {
    isMember=true;
  }
  return isMember;
}
