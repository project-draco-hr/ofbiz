{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  Boolean skipInventoryChecks=(Boolean)context.get("skipInventoryChecks");
  Boolean skipProductChecks=(Boolean)context.get("skipProductChecks");
  Locale locale=(Locale)context.get("locale");
  if (UtilValidate.isEmpty(skipInventoryChecks)) {
    skipInventoryChecks=Boolean.FALSE;
  }
  if (UtilValidate.isEmpty(skipProductChecks)) {
    skipProductChecks=Boolean.FALSE;
  }
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  String productStoreId=orh.getProductStoreId();
  String orderTypeId=orh.getOrderTypeId();
  String currency=orh.getCurrency();
  String website=orh.getWebSiteId();
  String currentStatusString=orh.getCurrentStatusString();
  ShoppingCart cart=new ShoppingCart(delegator,productStoreId,website,locale,currency);
  cart.setOrderType(orderTypeId);
  cart.setChannelType(orderHeader.getString("salesChannelEnumId"));
  cart.setInternalCode(orderHeader.getString("internalCode"));
  cart.setOrderDate(orderHeader.getTimestamp("orderDate"));
  cart.setOrderId(orderHeader.getString("orderId"));
  cart.setOrderName(orderHeader.getString("orderName"));
  cart.setOrderStatusId(orderHeader.getString("statusId"));
  cart.setOrderStatusString(currentStatusString);
  try {
    cart.setUserLogin(userLogin,dispatcher);
  }
 catch (  CartItemModifyException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  String orderName=orh.getOrderName();
  if (orderName != null) {
    cart.setOrderName(orderName);
  }
  GenericValue placingParty=orh.getPlacingParty();
  if (placingParty != null) {
    cart.setPlacingCustomerPartyId(placingParty.getString("partyId"));
  }
  GenericValue billFromParty=orh.getBillFromParty();
  if (billFromParty != null) {
    cart.setBillFromVendorPartyId(billFromParty.getString("partyId"));
  }
  GenericValue billToParty=orh.getBillToParty();
  if (billToParty != null) {
    cart.setBillToCustomerPartyId(billToParty.getString("partyId"));
  }
  GenericValue shipToParty=orh.getShipToParty();
  if (shipToParty != null) {
    cart.setShipToCustomerPartyId(shipToParty.getString("partyId"));
  }
  GenericValue endUserParty=orh.getEndUserParty();
  if (endUserParty != null) {
    cart.setEndUserCustomerPartyId(endUserParty.getString("partyId"));
    cart.setOrderPartyId(endUserParty.getString("partyId"));
  }
  List<GenericValue> orderAttributesList=null;
  try {
    orderAttributesList=delegator.findByAnd("OrderAttribute",UtilMisc.toMap("orderId",orderId));
    if (UtilValidate.isNotEmpty(orderAttributesList)) {
      for (      GenericValue orderAttr : orderAttributesList) {
        String name=orderAttr.getString("attrName");
        String value=orderAttr.getString("attrValue");
        cart.setOrderAttribute(name,value);
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  List<GenericValue> orderPaymentPrefs=null;
  try {
    List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition("orderId",EntityOperator.EQUALS,orderId));
    exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PAYMENT_RECEIVED"));
    exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PAYMENT_CANCELLED"));
    exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PAYMENT_DECLINED"));
    exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"PAYMENT_SETTLED"));
    EntityCondition cond=EntityCondition.makeCondition(exprs,EntityOperator.AND);
    orderPaymentPrefs=delegator.findList("OrderPaymentPreference",cond,null,null,null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (UtilValidate.isNotEmpty(orderPaymentPrefs)) {
    Iterator<GenericValue> oppi=orderPaymentPrefs.iterator();
    while (oppi.hasNext()) {
      GenericValue opp=(GenericValue)oppi.next();
      String paymentId=opp.getString("paymentMethodId");
      if (paymentId == null) {
        paymentId=opp.getString("paymentMethodTypeId");
      }
      BigDecimal maxAmount=opp.getBigDecimal("maxAmount");
      String overflow=opp.getString("overflowFlag");
      ShoppingCart.CartPaymentInfo cpi=null;
      if ((overflow == null || !"Y".equals(overflow)) && oppi.hasNext()) {
        cpi=cart.addPaymentAmount(paymentId,maxAmount);
        Debug.log("Added Payment: " + paymentId + " / "+ maxAmount,module);
      }
 else {
        cpi=cart.addPayment(paymentId);
        Debug.log("Added Payment: " + paymentId + " / [no max]",module);
      }
      if ("FIN_ACCOUNT".equals(paymentId)) {
        cpi.finAccountId=opp.getString("finAccountId");
      }
      cart.setBillingAccount(orderHeader.getString("billingAccountId"),orh.getBillingAccountMaxAmount());
    }
  }
 else {
    Debug.log("No payment preferences found for order #" + orderId,module);
  }
  List<GenericValue> orderItemShipGroupList=orh.getOrderItemShipGroups();
  for (  GenericValue orderItemShipGroup : orderItemShipGroupList) {
    int newShipInfoIndex=cart.addShipInfo();
    String cartShipGroupIndexStr=orderItemShipGroup.getString("shipGroupSeqId");
    int cartShipGroupIndex=NumberUtils.toInt(cartShipGroupIndexStr);
    if (newShipInfoIndex != (cartShipGroupIndex - 1)) {
      int groupDiff=cartShipGroupIndex - cart.getShipGroupSize();
      for (int i=0; i < groupDiff; i++) {
        newShipInfoIndex=cart.addShipInfo();
      }
    }
    CartShipInfo cartShipInfo=cart.getShipInfo(newShipInfoIndex);
    cartShipInfo.shipAfterDate=orderItemShipGroup.getTimestamp("shipAfterDate");
    cartShipInfo.shipBeforeDate=orderItemShipGroup.getTimestamp("shipByDate");
    cartShipInfo.shipmentMethodTypeId=orderItemShipGroup.getString("shipmentMethodTypeId");
    cartShipInfo.carrierPartyId=orderItemShipGroup.getString("carrierPartyId");
    cartShipInfo.supplierPartyId=orderItemShipGroup.getString("supplierPartyId");
    cartShipInfo.setMaySplit(orderItemShipGroup.getBoolean("maySplit"));
    cartShipInfo.giftMessage=orderItemShipGroup.getString("giftMessage");
    cartShipInfo.setContactMechId(orderItemShipGroup.getString("contactMechId"));
    cartShipInfo.shippingInstructions=orderItemShipGroup.getString("shippingInstructions");
    cartShipInfo.setFacilityId(orderItemShipGroup.getString("facilityId"));
    cartShipInfo.setVendorPartyId(orderItemShipGroup.getString("vendorPartyId"));
    cartShipInfo.setShipGroupSeqId(orderItemShipGroup.getString("shipGroupSeqId"));
  }
  List<GenericValue> orderItems=orh.getValidOrderItems();
  long nextItemSeq=0;
  if (UtilValidate.isNotEmpty(orderItems)) {
    for (    GenericValue item : orderItems) {
      String orderItemSeqId=item.getString("orderItemSeqId");
      orderItemSeqId=orderItemSeqId.replaceAll("\\P{Digit}","");
      String productId=item.getString("productId");
      GenericValue product=null;
      Map surveyResponseResult=null;
      try {
        product=delegator.findOne("Product",UtilMisc.toMap("productId",productId),false);
        if ("DIGITAL_GOOD".equals(product.getString("productTypeId"))) {
          Map<String,Object> surveyResponseMap=FastMap.newInstance();
          Map<String,Object> answers=FastMap.newInstance();
          List<GenericValue> surveyResponseAndAnswers=delegator.findByAnd("SurveyResponseAndAnswer",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
          if (UtilValidate.isNotEmpty(surveyResponseAndAnswers)) {
            String surveyId=EntityUtil.getFirst(surveyResponseAndAnswers).getString("surveyId");
            for (            GenericValue surveyResponseAndAnswer : surveyResponseAndAnswers) {
              answers.put((surveyResponseAndAnswer.get("surveyQuestionId").toString()),surveyResponseAndAnswer.get("textResponse"));
            }
            surveyResponseMap.put("answers",answers);
            surveyResponseMap.put("surveyId",surveyId);
            surveyResponseResult=dispatcher.runSync("createSurveyResponse",surveyResponseMap);
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
catch (      GenericServiceException e) {
        Debug.logError(e.toString(),module);
        return ServiceUtil.returnError(e.toString());
      }
      try {
        long seq=Long.parseLong(orderItemSeqId);
        if (seq > nextItemSeq) {
          nextItemSeq=seq;
        }
      }
 catch (      NumberFormatException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      if (item.get("isPromo") != null && "Y".equals(item.getString("isPromo"))) {
        continue;
      }
      BigDecimal amount=item.getBigDecimal("selectedAmount");
      if (amount == null) {
        amount=BigDecimal.ZERO;
      }
      BigDecimal quantity=item.getBigDecimal("quantity");
      if (quantity == null) {
        quantity=BigDecimal.ZERO;
      }
      BigDecimal unitPrice=null;
      if ("Y".equals(item.getString("isModifiedPrice"))) {
        unitPrice=item.getBigDecimal("unitPrice");
      }
      int itemIndex=-1;
      if (item.get("productId") == null) {
        String itemType=item.getString("orderItemTypeId");
        String desc=item.getString("itemDescription");
        try {
          itemIndex=cart.addNonProductItem(itemType,desc,null,unitPrice,quantity,null,null,null,dispatcher);
        }
 catch (        CartItemModifyException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
 else {
        String prodCatalogId=item.getString("prodCatalogId");
        Timestamp reservStart=null;
        BigDecimal reservLength=null;
        BigDecimal reservPersons=null;
        String accommodationMapId=null;
        String accommodationSpotId=null;
        GenericValue workEffort=null;
        String workEffortId=orh.getCurrentOrderItemWorkEffort(item);
        if (workEffortId != null) {
          try {
            workEffort=delegator.findByPrimaryKey("WorkEffort",UtilMisc.toMap("workEffortId",workEffortId));
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
          }
        }
        if (workEffort != null && "ASSET_USAGE".equals(workEffort.getString("workEffortTypeId"))) {
          reservStart=workEffort.getTimestamp("estimatedStartDate");
          reservLength=OrderReadHelper.getWorkEffortRentalLength(workEffort);
          reservPersons=workEffort.getBigDecimal("reservPersons");
          accommodationMapId=workEffort.getString("accommodationMapId");
          accommodationSpotId=workEffort.getString("accommodationSpotId");
        }
        ProductConfigWrapper configWrapper=null;
        String configId=null;
        try {
          product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
          if ("AGGREGATED_CONF".equals(product.getString("productTypeId"))) {
            List<GenericValue> productAssocs=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productAssocTypeId","PRODUCT_CONF","productIdTo",product.getString("productId")));
            productAssocs=EntityUtil.filterByDate(productAssocs);
            if (UtilValidate.isNotEmpty(productAssocs)) {
              productId=EntityUtil.getFirst(productAssocs).getString("productId");
              configId=product.getString("configId");
            }
          }
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
        if (UtilValidate.isNotEmpty(configId)) {
          configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,configId,productId,productStoreId,prodCatalogId,website,currency,locale,userLogin);
        }
        try {
          itemIndex=cart.addItemToEnd(productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,null,null,prodCatalogId,configWrapper,item.getString("orderItemTypeId"),dispatcher,null,unitPrice == null ? null : false,skipInventoryChecks,skipProductChecks);
        }
 catch (        ItemNotFoundException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
catch (        CartItemModifyException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
      ShoppingCartItem cartItem=cart.findCartItem(itemIndex);
      cartItem.setOrderItemSeqId(item.getString("orderItemSeqId"));
      if (UtilValidate.isNotEmpty(surveyResponseResult)) {
        cartItem.setAttribute("surveyResponseId",surveyResponseResult.get("surveyResponseId"));
      }
      cartItem.setStatusId(item.getString("statusId"));
      cartItem.setItemType(item.getString("orderItemTypeId"));
      cartItem.setItemComment(item.getString("comments"));
      cartItem.setQuoteId(item.getString("quoteId"));
      cartItem.setQuoteItemSeqId(item.getString("quoteItemSeqId"));
      cartItem.setProductCategoryId(item.getString("productCategoryId"));
      cartItem.setDesiredDeliveryDate(item.getTimestamp("estimatedDeliveryDate"));
      cartItem.setShipBeforeDate(item.getTimestamp("shipBeforeDate"));
      cartItem.setShipAfterDate(item.getTimestamp("shipAfterDate"));
      cartItem.setShoppingList(item.getString("shoppingListId"),item.getString("shoppingListItemSeqId"));
      cartItem.setIsModifiedPrice("Y".equals(item.getString("isModifiedPrice")));
      cartItem.setName(item.getString("itemDescription"));
      List<GenericValue> orderItemAttributesList=null;
      try {
        orderItemAttributesList=delegator.findByAnd("OrderItemAttribute",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
        if (UtilValidate.isNotEmpty(orderAttributesList)) {
          for (          GenericValue orderItemAttr : orderItemAttributesList) {
            String name=orderItemAttr.getString("attrName");
            String value=orderItemAttr.getString("attrValue");
            cartItem.setOrderItemAttribute(name,value);
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      List<GenericValue> orderItemContactMechList=null;
      try {
        orderItemContactMechList=delegator.findByAnd("OrderItemContactMech",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
        if (UtilValidate.isNotEmpty(orderItemContactMechList)) {
          for (          GenericValue orderItemContactMech : orderItemContactMechList) {
            String contactMechPurposeTypeId=orderItemContactMech.getString("contactMechPurposeTypeId");
            String contactMechId=orderItemContactMech.getString("contactMechId");
            cartItem.addContactMech(contactMechPurposeTypeId,contactMechId);
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      cart.setPoNumber(item.getString("correspondingPoId"));
      List<GenericValue> itemAdjustments=orh.getOrderItemAdjustments(item);
      if (itemAdjustments != null) {
        for (        GenericValue itemAdjustment : itemAdjustments) {
          cartItem.addAdjustment(itemAdjustment);
        }
      }
    }
    if (UtilValidate.isNotEmpty(orderItems)) {
      int itemIndex=0;
      for (      GenericValue item : orderItems) {
        List<GenericValue> shipGroupAssocs=orh.getOrderItemShipGroupAssocs(item);
        for (int g=0; g < shipGroupAssocs.size(); g++) {
          GenericValue sgAssoc=(GenericValue)shipGroupAssocs.get(g);
          BigDecimal shipGroupQty=OrderReadHelper.getOrderItemShipGroupQuantity(sgAssoc);
          if (shipGroupQty == null) {
            shipGroupQty=BigDecimal.ZERO;
          }
          String cartShipGroupIndexStr=sgAssoc.getString("shipGroupSeqId");
          int cartShipGroupIndex=NumberUtils.toInt(cartShipGroupIndexStr);
          cartShipGroupIndex=cartShipGroupIndex - 1;
          if (cartShipGroupIndex > 0) {
            cart.positionItemToGroup(itemIndex,shipGroupQty,0,cartShipGroupIndex,false);
          }
          cart.setItemShipGroupQty(itemIndex,shipGroupQty,cartShipGroupIndex);
        }
        itemIndex++;
      }
    }
    if (nextItemSeq > 0) {
      try {
        cart.setNextItemSeq(nextItemSeq);
      }
 catch (      GeneralException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
    }
  }
  List adjustments=orh.getOrderHeaderAdjustments();
  if (!adjustments.isEmpty()) {
    cart.getAdjustments().addAll(adjustments);
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("shoppingCart",cart);
  return result;
}
