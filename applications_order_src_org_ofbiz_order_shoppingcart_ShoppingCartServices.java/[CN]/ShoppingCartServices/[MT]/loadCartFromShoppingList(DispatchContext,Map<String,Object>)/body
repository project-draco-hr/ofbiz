{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String shoppingListId=(String)context.get("shoppingListId");
  Locale locale=(Locale)context.get("locale");
  GenericValue shoppingList=null;
  try {
    shoppingList=delegator.findByPrimaryKey("ShoppingList",UtilMisc.toMap("shoppingListId",shoppingListId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  String productStoreId=shoppingList.getString("productStoreId");
  String currency=shoppingList.getString("currencyUom");
  if (currency == null) {
    try {
      GenericValue productStore=shoppingList.getRelatedOne("ProductStore");
      if (productStore != null) {
        currency=productStore.getString("defaultCurrencyUomId");
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  if (currency == null) {
    currency=UtilProperties.getPropertyValue("general","currency.uom.id.default","USD");
  }
  ShoppingCart cart=new ShoppingCart(delegator,productStoreId,locale,currency);
  try {
    cart.setUserLogin(userLogin,dispatcher);
  }
 catch (  CartItemModifyException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  cart.setOrderPartyId(shoppingList.getString("partyId"));
  List<GenericValue> shoppingListItems=null;
  try {
    shoppingListItems=shoppingList.getRelated("ShoppingListItem");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  long nextItemSeq=0;
  if (UtilValidate.isNotEmpty(shoppingListItems)) {
    for (    GenericValue shoppingListItem : shoppingListItems) {
      String orderItemSeqId=shoppingListItem.getString("shoppingListItemSeqId");
      try {
        long seq=Long.parseLong(orderItemSeqId);
        if (seq > nextItemSeq) {
          nextItemSeq=seq;
        }
      }
 catch (      NumberFormatException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      Double quantity=shoppingListItem.getDouble("quantity");
      if (quantity == null) {
        quantity=new Double(0);
      }
      int itemIndex=-1;
      if (shoppingListItem.get("productId") != null) {
        String productId=shoppingListItem.getString("productId");
        ProductConfigWrapper configWrapper=null;
        if (UtilValidate.isNotEmpty(shoppingListItem.getString("configId"))) {
          configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,shoppingListItem.getString("configId"),productId,productStoreId,null,null,currency,locale,userLogin);
        }
        try {
          itemIndex=cart.addItemToEnd(productId,null,quantity.doubleValue(),null,null,null,null,null,configWrapper,dispatcher,Boolean.TRUE,Boolean.TRUE);
        }
 catch (        ItemNotFoundException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
catch (        CartItemModifyException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
      ShoppingCartItem cartItem=cart.findCartItem(itemIndex);
      cartItem.setOrderItemSeqId(orderItemSeqId);
      cartItem.setShoppingList(shoppingListItem.getString("shoppingListId"),shoppingListItem.getString("shoppingListItemSeqId"));
    }
  }
  if (nextItemSeq > 0) {
    try {
      cart.setNextItemSeq(nextItemSeq);
    }
 catch (    GeneralException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("shoppingCart",cart);
  return result;
}
