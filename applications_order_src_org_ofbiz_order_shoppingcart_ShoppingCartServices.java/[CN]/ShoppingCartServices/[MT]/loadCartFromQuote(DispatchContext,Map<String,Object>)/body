{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String quoteId=(String)context.get("quoteId");
  String applyQuoteAdjustmentsString=(String)context.get("applyQuoteAdjustments");
  Locale locale=(Locale)context.get("locale");
  boolean applyQuoteAdjustments=applyQuoteAdjustmentsString == null || "true".equals(applyQuoteAdjustmentsString);
  GenericValue quote=null;
  try {
    quote=EntityQuery.use(delegator).from("Quote").where("quoteId",quoteId).queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  String productStoreId=quote.getString("productStoreId");
  String currency=quote.getString("currencyUomId");
  ShoppingCart cart=new ShoppingCart(delegator,productStoreId,locale,currency);
  if ("PURCHASE_QUOTE".equals(quote.getString("quoteTypeId"))) {
    cart.setOrderType("PURCHASE_ORDER");
    cart.setBillFromVendorPartyId(quote.getString("partyId"));
  }
  try {
    cart.setUserLogin(userLogin,dispatcher);
  }
 catch (  CartItemModifyException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  cart.setQuoteId(quoteId);
  cart.setOrderName(quote.getString("quoteName"));
  cart.setChannelType(quote.getString("salesChannelEnumId"));
  List<GenericValue> quoteItems=null;
  List<GenericValue> quoteAdjs=null;
  List<GenericValue> quoteRoles=null;
  List<GenericValue> quoteAttributes=null;
  List<GenericValue> quoteTerms=null;
  try {
    quoteItems=quote.getRelated("QuoteItem",null,UtilMisc.toList("quoteItemSeqId"),false);
    quoteAdjs=quote.getRelated("QuoteAdjustment",null,null,false);
    quoteRoles=quote.getRelated("QuoteRole",null,null,false);
    quoteAttributes=quote.getRelated("QuoteAttribute",null,null,false);
    quoteTerms=quote.getRelated("QuoteTerm",null,null,false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  cart.setOrderPartyId(quote.getString("partyId"));
  if (UtilValidate.isNotEmpty(quoteRoles)) {
    for (    GenericValue quoteRole : quoteRoles) {
      String quoteRoleTypeId=quoteRole.getString("roleTypeId");
      String quoteRolePartyId=quoteRole.getString("partyId");
      if ("PLACING_CUSTOMER".equals(quoteRoleTypeId)) {
        cart.setPlacingCustomerPartyId(quoteRolePartyId);
      }
 else       if ("BILL_TO_CUSTOMER".equals(quoteRoleTypeId)) {
        cart.setBillToCustomerPartyId(quoteRolePartyId);
      }
 else       if ("SHIP_TO_CUSTOMER".equals(quoteRoleTypeId)) {
        cart.setShipToCustomerPartyId(quoteRolePartyId);
      }
 else       if ("END_USER_CUSTOMER".equals(quoteRoleTypeId)) {
        cart.setEndUserCustomerPartyId(quoteRolePartyId);
      }
 else       if ("BILL_FROM_VENDOR".equals(quoteRoleTypeId)) {
        cart.setBillFromVendorPartyId(quoteRolePartyId);
      }
 else {
        cart.addAdditionalPartyRole(quoteRolePartyId,quoteRoleTypeId);
      }
    }
  }
  if (UtilValidate.isNotEmpty(quoteTerms)) {
    for (    GenericValue quoteTerm : quoteTerms) {
      BigDecimal termValue=BigDecimal.ZERO;
      if (UtilValidate.isNotEmpty(quoteTerm.getString("termValue"))) {
        termValue=new BigDecimal(quoteTerm.getString("termValue"));
      }
      long termDays=0;
      if (UtilValidate.isNotEmpty(quoteTerm.getString("termDays"))) {
        termDays=Long.parseLong(quoteTerm.getString("termDays").trim());
      }
      String orderItemSeqId=quoteTerm.getString("quoteItemSeqId");
      cart.addOrderTerm(quoteTerm.getString("termTypeId"),orderItemSeqId,termValue,termDays,quoteTerm.getString("textValue"),quoteTerm.getString("description"));
    }
  }
  if (UtilValidate.isNotEmpty(quoteAttributes)) {
    for (    GenericValue quoteAttribute : quoteAttributes) {
      cart.setOrderAttribute(quoteAttribute.getString("attrName"),quoteAttribute.getString("attrValue"));
    }
  }
  Map<String,List<GenericValue>> orderAdjsMap=new HashMap<String,List<GenericValue>>();
  for (  GenericValue quoteAdj : quoteAdjs) {
    List<GenericValue> orderAdjs=orderAdjsMap.get(UtilValidate.isNotEmpty(quoteAdj.getString("quoteItemSeqId")) ? quoteAdj.getString("quoteItemSeqId") : quoteId);
    if (orderAdjs == null) {
      orderAdjs=new LinkedList<GenericValue>();
      orderAdjsMap.put(UtilValidate.isNotEmpty(quoteAdj.getString("quoteItemSeqId")) ? quoteAdj.getString("quoteItemSeqId") : quoteId,orderAdjs);
    }
    GenericValue orderAdj=delegator.makeValue("OrderAdjustment");
    orderAdj.put("orderAdjustmentId",quoteAdj.get("quoteAdjustmentId"));
    orderAdj.put("orderAdjustmentTypeId",quoteAdj.get("quoteAdjustmentTypeId"));
    orderAdj.put("orderItemSeqId",quoteAdj.get("quoteItemSeqId"));
    orderAdj.put("comments",quoteAdj.get("comments"));
    orderAdj.put("description",quoteAdj.get("description"));
    orderAdj.put("amount",quoteAdj.get("amount"));
    orderAdj.put("productPromoId",quoteAdj.get("productPromoId"));
    orderAdj.put("productPromoRuleId",quoteAdj.get("productPromoRuleId"));
    orderAdj.put("productPromoActionSeqId",quoteAdj.get("productPromoActionSeqId"));
    orderAdj.put("productFeatureId",quoteAdj.get("productFeatureId"));
    orderAdj.put("correspondingProductId",quoteAdj.get("correspondingProductId"));
    orderAdj.put("sourceReferenceId",quoteAdj.get("sourceReferenceId"));
    orderAdj.put("sourcePercentage",quoteAdj.get("sourcePercentage"));
    orderAdj.put("customerReferenceId",quoteAdj.get("customerReferenceId"));
    orderAdj.put("primaryGeoId",quoteAdj.get("primaryGeoId"));
    orderAdj.put("secondaryGeoId",quoteAdj.get("secondaryGeoId"));
    orderAdj.put("exemptAmount",quoteAdj.get("exemptAmount"));
    orderAdj.put("taxAuthGeoId",quoteAdj.get("taxAuthGeoId"));
    orderAdj.put("taxAuthPartyId",quoteAdj.get("taxAuthPartyId"));
    orderAdj.put("overrideGlAccountId",quoteAdj.get("overrideGlAccountId"));
    orderAdj.put("includeInTax",quoteAdj.get("includeInTax"));
    orderAdj.put("includeInShipping",quoteAdj.get("includeInShipping"));
    orderAdj.put("createdDate",quoteAdj.get("createdDate"));
    orderAdj.put("createdByUserLogin",quoteAdj.get("createdByUserLogin"));
    orderAdjs.add(orderAdj);
  }
  long nextItemSeq=0;
  if (UtilValidate.isNotEmpty(quoteItems)) {
    for (    GenericValue quoteItem : quoteItems) {
      String orderItemSeqId=quoteItem.getString("quoteItemSeqId");
      orderItemSeqId=orderItemSeqId.replaceAll("\\P{Digit}","");
      try {
        long seq=Long.parseLong(orderItemSeqId);
        if (seq > nextItemSeq) {
          nextItemSeq=seq;
        }
      }
 catch (      NumberFormatException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      boolean isPromo=quoteItem.get("isPromo") != null && "Y".equals(quoteItem.getString("isPromo"));
      if (isPromo && !applyQuoteAdjustments) {
        continue;
      }
      BigDecimal amount=quoteItem.getBigDecimal("selectedAmount");
      if (amount == null) {
        amount=BigDecimal.ZERO;
      }
      BigDecimal quantity=quoteItem.getBigDecimal("quantity");
      if (quantity == null) {
        quantity=BigDecimal.ZERO;
      }
      BigDecimal quoteUnitPrice=quoteItem.getBigDecimal("quoteUnitPrice");
      if (quoteUnitPrice == null) {
        quoteUnitPrice=BigDecimal.ZERO;
      }
      if (amount.compareTo(BigDecimal.ZERO) > 0) {
        quoteUnitPrice=quoteUnitPrice.divide(amount,generalRounding);
      }
      Timestamp reservStart=quoteItem.getTimestamp("reservStart");
      BigDecimal reservLength=quoteItem.getBigDecimal("reservLength");
      BigDecimal reservPersons=quoteItem.getBigDecimal("reservPersons");
      int itemIndex=-1;
      if (quoteItem.get("productId") == null) {
        String desc=quoteItem.getString("comments");
        try {
          itemIndex=cart.addNonProductItem(null,desc,null,null,quantity,null,null,null,dispatcher);
        }
 catch (        CartItemModifyException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
 else {
        String productId=quoteItem.getString("productId");
        ProductConfigWrapper configWrapper=null;
        if (UtilValidate.isNotEmpty(quoteItem.getString("configId"))) {
          configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,quoteItem.getString("configId"),productId,productStoreId,null,null,currency,locale,userLogin);
        }
        try {
          itemIndex=cart.addItemToEnd(productId,amount,quantity,quoteUnitPrice,reservStart,reservLength,reservPersons,null,null,null,null,null,configWrapper,null,dispatcher,new Boolean(!applyQuoteAdjustments),new Boolean(quoteUnitPrice.compareTo(BigDecimal.ZERO) == 0),Boolean.FALSE,Boolean.FALSE);
        }
 catch (        ItemNotFoundException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
catch (        CartItemModifyException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
      ShoppingCartItem cartItem=cart.findCartItem(itemIndex);
      cartItem.setOrderItemSeqId(orderItemSeqId);
      cartItem.setItemComment(quoteItem.getString("comments"));
      cartItem.setQuoteId(quoteItem.getString("quoteId"));
      cartItem.setQuoteItemSeqId(quoteItem.getString("quoteItemSeqId"));
      cartItem.setIsPromo(isPromo);
    }
  }
  if (applyQuoteAdjustments) {
    List<GenericValue> cartAdjs=cart.getAdjustments();
    CartShipInfo shipInfo=cart.getShipInfo(0);
    List<GenericValue> adjs=orderAdjsMap.get(quoteId);
    if (adjs != null) {
      for (      GenericValue adj : adjs) {
        if (isTaxAdjustment(adj))         shipInfo.shipTaxAdj.add(adj);
 else         cartAdjs.add(adj);
      }
    }
    if (quoteItems != null) {
      for (      ShoppingCartItem item : cart) {
        String orderItemSeqId=item.getOrderItemSeqId();
        if (orderItemSeqId != null) {
          adjs=orderAdjsMap.get(orderItemSeqId);
        }
 else {
          adjs=null;
        }
        if (adjs != null) {
          for (          GenericValue adj : adjs) {
            if (isTaxAdjustment(adj)) {
              CartShipItemInfo csii=shipInfo.getShipItemInfo(item);
              if (csii.itemTaxAdj == null)               shipInfo.setItemInfo(item,UtilMisc.toList(adj));
 else               csii.itemTaxAdj.add(adj);
            }
 else             item.addAdjustment(adj);
          }
        }
      }
    }
  }
  if (nextItemSeq > 0) {
    try {
      cart.setNextItemSeq(nextItemSeq + 1);
    }
 catch (    GeneralException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  Map<String,Object> result=ServiceUtil.returnSuccess();
  result.put("shoppingCart",cart);
  return result;
}
