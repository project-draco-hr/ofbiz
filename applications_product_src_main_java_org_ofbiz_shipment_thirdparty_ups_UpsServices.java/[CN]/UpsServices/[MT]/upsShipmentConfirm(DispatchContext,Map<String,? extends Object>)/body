{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String shipmentId=(String)context.get("shipmentId");
  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");
  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);
  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");
  String resource=(String)shipmentGatewayConfig.get("configProps");
  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsGatewayNotAvailable",locale));
  }
  boolean shipmentUpsSaveCertificationInfo="true".equals(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertInfo",resource,"shipment.ups.save.certification.info","true"));
  String shipmentUpsSaveCertificationPath=FlexibleStringExpander.expandString(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"saveCertPath",resource,"shipment.ups.save.certification.path",""),context);
  File shipmentUpsSaveCertificationFile=null;
  if (shipmentUpsSaveCertificationInfo) {
    shipmentUpsSaveCertificationFile=new File(shipmentUpsSaveCertificationPath);
    if (!shipmentUpsSaveCertificationFile.exists()) {
      shipmentUpsSaveCertificationFile.mkdirs();
    }
  }
  String shipmentConfirmResponseString=null;
  try {
    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();
    if (shipment == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentNotFoundId",locale) + " " + shipmentId);
    }
    GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId).queryOne();
    if (shipmentRouteSegment == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentRouteSegmentNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    if (!"UPS".equals(shipmentRouteSegment.getString("carrierPartyId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));
    }
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("carrierServiceStatusId")) && !"SHRSCS_NOT_STARTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentStatusNotStarted",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId,"shipmentRouteSegmentStatus",shipmentRouteSegment.getString("carrierServiceStatusId")),locale));
    }
    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress",false);
    if (originPostalAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber",false);
    if (originTelecomNumber == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    String originPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");
    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !"001".equals(originTelecomNumber.getString("countryCode"))) {
      originPhoneNumber=originTelecomNumber.getString("countryCode") + originPhoneNumber;
    }
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber,"-","");
    originPhoneNumber=StringUtil.replaceString(originPhoneNumber," ","");
    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo",false);
    if (originCountryGeo == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress",false);
    if (destPostalAddress == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue destTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber",false);
    if (destTelecomNumber == null) {
      String missingErrMsg="DestTelecomNumber not found for ShipmentRouteSegment with shipmentId " + shipmentId + " and shipmentRouteSegmentId "+ shipmentRouteSegmentId;
      Debug.logError(missingErrMsg,module);
    }
    String destPhoneNumber=null;
    if (destTelecomNumber != null) {
      destPhoneNumber=destTelecomNumber.getString("areaCode") + destTelecomNumber.getString("contactNumber");
      if (UtilValidate.isNotEmpty(destTelecomNumber.getString("countryCode")) && !"001".equals(destTelecomNumber.getString("countryCode"))) {
        destPhoneNumber=destTelecomNumber.getString("countryCode") + destPhoneNumber;
      }
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber,"-","");
      destPhoneNumber=StringUtil.replaceString(destPhoneNumber," ","");
    }
    GenericValue destCountryGeo=destPostalAddress.getRelatedOne("CountryGeo",false);
    if (destCountryGeo == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    GenericValue carrierShipmentMethod=EntityQuery.use(delegator).from("CarrierShipmentMethod").where("partyId",shipmentRouteSegment.get("carrierPartyId"),"roleTypeId","CARRIER","shipmentMethodTypeId",shipmentRouteSegment.get("shipmentMethodTypeId")).queryOne();
    if (carrierShipmentMethod == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentCarrierShipmentMethodNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"carrierPartyId",shipmentRouteSegment.get("carrierPartyId"),"shipmentMethodTypeId",shipmentRouteSegment.get("shipmentMethodTypeId")),locale));
    }
    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"),false);
    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
    }
    List<GenericValue> itemIssuances=shipment.getRelated("ItemIssuance",null,null,false);
    Set<String> orderIdSet=new TreeSet<String>();
    for (    GenericValue itemIssuance : itemIssuances) {
      orderIdSet.add(itemIssuance.getString("orderId"));
    }
    String ordersDescription="";
    if (orderIdSet.size() > 1) {
      StringBuilder odBuf=new StringBuilder(UtilProperties.getMessage(resourceOrder,"OrderOrders",locale) + " ");
      for (      String orderId : orderIdSet) {
        if (odBuf.length() > 0) {
          odBuf.append(", ");
        }
        odBuf.append(orderId);
      }
      ordersDescription=odBuf.toString();
    }
 else     if (orderIdSet.size() > 0) {
      ordersDescription=UtilProperties.getMessage(resourceOrder,"OrderOrder",locale) + " " + orderIdSet.iterator().next();
    }
    boolean allowCOD="true".equalsIgnoreCase(getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"codAllowCod",resource,"shipment.ups.cod.allowCOD","true"));
    if (allowCOD) {
      List<GenericValue> opps=EntityQuery.use(delegator).from("OrderPaymentPreference").where(EntityCondition.makeCondition("orderId",EntityOperator.IN,orderIdSet)).queryList();
      List<String> paymentMethodTypeIds=EntityUtil.getFieldListFromEntityList(opps,"paymentMethodTypeId",true);
      if (paymentMethodTypeIds.size() > 1 || !paymentMethodTypeIds.contains("EXT_COD")) {
        allowCOD=false;
      }
    }
    String codSurchargeAmount=null;
    String codSurchargeCurrencyUomId=null;
    String codFundsCode=null;
    boolean codSurchargeApplyToFirstPackage=false;
    boolean codSurchargeApplyToAllPackages=false;
    boolean codSurchargeSplitBetweenPackages=false;
    boolean codSurchargeApplyToNoPackages=false;
    BigDecimal codSurchargePackageAmount=null;
    if (allowCOD) {
      codSurchargeAmount=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"codSurchargeAmount",resource,"shipment.ups.cod.surcharge.amount","");
      if (UtilValidate.isEmpty(codSurchargeAmount)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsSurchargeAmountIsNotConfigurated",locale));
      }
      codSurchargeCurrencyUomId=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"codSurchargeCurrencyUomId",resource,"shipment.ups.cod.surcharge.currencyUomId","");
      if (UtilValidate.isEmpty(codSurchargeCurrencyUomId)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsSurchargeCurrencyIsNotConfigurated",locale));
      }
      String codSurchargeApplyToPackages=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"codSurchargeApplyToPackage",resource,"shipment.ups.cod.surcharge.applyToPackages","");
      if (UtilValidate.isEmpty(codSurchargeApplyToPackages)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsApplyToPackagesIsNotConfigured",locale));
      }
      codFundsCode=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"codFundsCode",resource,"shipment.ups.cod.codFundsCode","");
      if (UtilValidate.isEmpty(codFundsCode)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsCodFundsCodeIsNotConfigured",locale));
      }
      codSurchargeApplyToFirstPackage="first".equalsIgnoreCase(codSurchargeApplyToPackages);
      codSurchargeApplyToAllPackages="all".equalsIgnoreCase(codSurchargeApplyToPackages);
      codSurchargeSplitBetweenPackages="split".equalsIgnoreCase(codSurchargeApplyToPackages);
      codSurchargeApplyToNoPackages="none".equalsIgnoreCase(codSurchargeApplyToPackages);
      if (codSurchargeApplyToNoPackages) {
        codSurchargeAmount="0";
      }
      codSurchargePackageAmount=new BigDecimal(codSurchargeAmount).setScale(decimals,rounding);
      if (codSurchargeSplitBetweenPackages) {
        codSurchargePackageAmount=codSurchargePackageAmount.divide(new BigDecimal(shipmentPackageRouteSegs.size()),decimals,rounding);
      }
      if (UtilValidate.isEmpty(destTelecomNumber)) {
        Debug.logInfo("Voice notification service will not be requested for COD shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId+ " - missing destination phone number",module);
      }
      if (UtilValidate.isEmpty(shipmentRouteSegment.get("homeDeliveryType"))) {
        Debug.logInfo("Voice notification service will not be requested for COD shipmentId " + shipmentId + ", shipmentRouteSegmentId "+ shipmentRouteSegmentId+ " - destination address is not residential",module);
      }
    }
    String currencyCode=null;
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
      currencyCode=shipmentRouteSegment.getString("currencyUomId");
    }
 else     if (UtilValidate.isNotEmpty(shipment.getString("currencyUomId"))) {
      currencyCode=shipment.getString("currencyUomId");
    }
 else {
      currencyCode=EntityUtilProperties.getPropertyValue("general","currency.uom.id.default","USD",delegator);
    }
    Document shipmentConfirmRequestDoc=UtilXml.makeEmptyXmlDocument("ShipmentConfirmRequest");
    Element shipmentConfirmRequestElement=shipmentConfirmRequestDoc.getDocumentElement();
    shipmentConfirmRequestElement.setAttribute("xml:lang","en-US");
    Element requestElement=UtilXml.addChildElement(shipmentConfirmRequestElement,"Request",shipmentConfirmRequestDoc);
    Element transactionReferenceElement=UtilXml.addChildElement(requestElement,"TransactionReference",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"CustomerContext","Ship Confirm / nonvalidate",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(transactionReferenceElement,"XpciVersion","1.0001",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestAction","ShipConfirm",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(requestElement,"RequestOption","nonvalidate",shipmentConfirmRequestDoc);
    Element labelSpecificationElement=UtilXml.addChildElement(shipmentConfirmRequestElement,"LabelSpecification",shipmentConfirmRequestDoc);
    Element labelPrintMethodElement=UtilXml.addChildElement(labelSpecificationElement,"LabelPrintMethod",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(labelPrintMethodElement,"Code","GIF",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(labelSpecificationElement,"HTTPUserAgent","Mozilla/5.0",shipmentConfirmRequestDoc);
    Element labelImageFormatElement=UtilXml.addChildElement(labelSpecificationElement,"LabelImageFormat",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(labelImageFormatElement,"Code","GIF",shipmentConfirmRequestDoc);
    Element shipmentElement=UtilXml.addChildElement(shipmentConfirmRequestElement,"Shipment",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipmentElement,"Description","Goods for Shipment " + shipment.get("shipmentId") + " from "+ ordersDescription,shipmentConfirmRequestDoc);
    String shipperNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"shipperNumber",resource,"shipment.ups.shipper.number","");
    Element shipperElement=UtilXml.addChildElement(shipmentElement,"Shipper",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"Name",UtilValidate.isNotEmpty(originPostalAddress.getString("toName")) ? originPostalAddress.getString("toName") : "",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"AttentionName",UtilValidate.isNotEmpty(originPostalAddress.getString("attnName")) ? originPostalAddress.getString("attnName") : "",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"PhoneNumber",originPhoneNumber,shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperElement,"ShipperNumber",shipperNumber,shipmentConfirmRequestDoc);
    Element shipperAddressElement=UtilXml.addChildElement(shipperElement,"Address",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"AddressLine1",originPostalAddress.getString("address1"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipperAddressElement,"AddressLine2",originPostalAddress.getString("address2"),shipmentConfirmRequestDoc);
    }
    UtilXml.addChildElementValue(shipperAddressElement,"City",originPostalAddress.getString("city"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"StateProvinceCode",originPostalAddress.getString("stateProvinceGeoId"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"PostalCode",originPostalAddress.getString("postalCode"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipperAddressElement,"CountryCode",originCountryGeo.getString("geoCode"),shipmentConfirmRequestDoc);
    Element shipToElement=UtilXml.addChildElement(shipmentElement,"ShipTo",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToElement,"CompanyName",UtilValidate.isNotEmpty(destPostalAddress.getString("toName")) ? destPostalAddress.getString("toName") : "",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToElement,"AttentionName",UtilValidate.isNotEmpty(destPostalAddress.getString("attnName")) ? destPostalAddress.getString("attnName") : "",shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(destPhoneNumber)) {
      UtilXml.addChildElementValue(shipToElement,"PhoneNumber",destPhoneNumber,shipmentConfirmRequestDoc);
    }
    Element shipToAddressElement=UtilXml.addChildElement(shipToElement,"Address",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"AddressLine1",destPostalAddress.getString("address1"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(destPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipToAddressElement,"AddressLine2",destPostalAddress.getString("address2"),shipmentConfirmRequestDoc);
    }
    UtilXml.addChildElementValue(shipToAddressElement,"City",destPostalAddress.getString("city"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"StateProvinceCode",destPostalAddress.getString("stateProvinceGeoId"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"PostalCode",destPostalAddress.getString("postalCode"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipToAddressElement,"CountryCode",destCountryGeo.getString("geoCode"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("homeDeliveryType"))) {
      UtilXml.addChildElement(shipToAddressElement,"ResidentialAddress",shipmentConfirmRequestDoc);
    }
    Element shipFromElement=UtilXml.addChildElement(shipmentElement,"ShipFrom",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"CompanyName",originPostalAddress.getString("toName"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"AttentionName",originPostalAddress.getString("attnName"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromElement,"PhoneNumber",originPhoneNumber,shipmentConfirmRequestDoc);
    Element shipFromAddressElement=UtilXml.addChildElement(shipFromElement,"Address",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"AddressLine1",originPostalAddress.getString("address1"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(shipFromAddressElement,"AddressLine2",originPostalAddress.getString("address2"),shipmentConfirmRequestDoc);
    }
    UtilXml.addChildElementValue(shipFromAddressElement,"City",originPostalAddress.getString("city"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"StateProvinceCode",originPostalAddress.getString("stateProvinceGeoId"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"PostalCode",originPostalAddress.getString("postalCode"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(shipFromAddressElement,"CountryCode",originCountryGeo.getString("geoCode"),shipmentConfirmRequestDoc);
    Element soldToElement=UtilXml.addChildElement(shipmentElement,"SoldTo",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(soldToElement,"CompanyName",UtilValidate.isNotEmpty(destPostalAddress.getString("toName")) ? destPostalAddress.getString("toName") : "",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(soldToElement,"AttentionName",UtilValidate.isNotEmpty(destPostalAddress.getString("attnName")) ? destPostalAddress.getString("attnName") : "",shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(destPhoneNumber)) {
      UtilXml.addChildElementValue(soldToElement,"PhoneNumber",destPhoneNumber,shipmentConfirmRequestDoc);
    }
    Element soldToAddressElement=UtilXml.addChildElement(soldToElement,"Address",shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(soldToAddressElement,"AddressLine1",destPostalAddress.getString("address1"),shipmentConfirmRequestDoc);
    if (UtilValidate.isNotEmpty(destPostalAddress.getString("address2"))) {
      UtilXml.addChildElementValue(soldToAddressElement,"AddressLine2",destPostalAddress.getString("address2"),shipmentConfirmRequestDoc);
    }
    UtilXml.addChildElementValue(soldToAddressElement,"City",destPostalAddress.getString("city"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(soldToAddressElement,"StateProvinceCode",destPostalAddress.getString("stateProvinceGeoId"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(soldToAddressElement,"PostalCode",destPostalAddress.getString("postalCode"),shipmentConfirmRequestDoc);
    UtilXml.addChildElementValue(soldToAddressElement,"CountryCode",destCountryGeo.getString("geoCode"),shipmentConfirmRequestDoc);
    Element paymentInformationElement=UtilXml.addChildElement(shipmentElement,"PaymentInformation",shipmentConfirmRequestDoc);
    String thirdPartyAccountNumber=shipmentRouteSegment.getString("thirdPartyAccountNumber");
    if (UtilValidate.isEmpty(thirdPartyAccountNumber)) {
      Element prepaidElement=UtilXml.addChildElement(paymentInformationElement,"Prepaid",shipmentConfirmRequestDoc);
      Element billShipperElement=UtilXml.addChildElement(prepaidElement,"BillShipper",shipmentConfirmRequestDoc);
      String billShipperAccountNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"billShipperAccountNumber",resource,"shipment.ups.bill.shipper.account.number","");
      UtilXml.addChildElementValue(billShipperElement,"AccountNumber",billShipperAccountNumber,shipmentConfirmRequestDoc);
    }
 else {
      String thirdPartyPostalCode=shipmentRouteSegment.getString("thirdPartyPostalCode");
      if (UtilValidate.isEmpty(thirdPartyPostalCode)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentThirdPartyPostalCodeNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
      }
      String thirdPartyCountryGeoCode=shipmentRouteSegment.getString("thirdPartyCountryGeoCode");
      if (UtilValidate.isEmpty(thirdPartyCountryGeoCode)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsRouteSegmentThirdPartyCountryNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));
      }
      Element billThirdPartyElement=UtilXml.addChildElement(paymentInformationElement,"BillThirdParty",shipmentConfirmRequestDoc);
      Element billThirdPartyShipperElement=UtilXml.addChildElement(billThirdPartyElement,"BillThirdPartyShipper",shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(billThirdPartyShipperElement,"AccountNumber",thirdPartyAccountNumber,shipmentConfirmRequestDoc);
      Element thirdPartyElement=UtilXml.addChildElement(billThirdPartyShipperElement,"ThirdParty",shipmentConfirmRequestDoc);
      Element addressElement=UtilXml.addChildElement(thirdPartyElement,"Address",shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(addressElement,"PostalCode",thirdPartyPostalCode,shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(addressElement,"CountryCode",thirdPartyCountryGeoCode,shipmentConfirmRequestDoc);
    }
    Element serviceElement=UtilXml.addChildElement(shipmentElement,"Service",shipmentConfirmRequestDoc);
    String carrierServiceCode=carrierShipmentMethod.getString("carrierServiceCode");
    UtilXml.addChildElementValue(serviceElement,"Code",carrierServiceCode,shipmentConfirmRequestDoc);
    List<String> internationalServiceCodes=UtilMisc.toList("07","08","54","65");
    if (internationalServiceCodes.contains(carrierServiceCode)) {
      Element shipmentServiceOptionsElement=UtilXml.addChildElement(shipmentElement,"ShipmentServiceOptions",shipmentConfirmRequestDoc);
      Element internationalFormsElement=UtilXml.addChildElement(shipmentServiceOptionsElement,"InternationalForms",shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(internationalFormsElement,"FormType","01",shipmentConfirmRequestDoc);
      List<GenericValue> shipmentItems=shipment.getRelated("ShipmentItem",null,null,false);
      for (      GenericValue shipmentItem : shipmentItems) {
        Element productElement=UtilXml.addChildElement(internationalFormsElement,"Product",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(productElement,"Description","Product Description",shipmentConfirmRequestDoc);
        Element unitElement=UtilXml.addChildElement(productElement,"Unit",shipmentConfirmRequestDoc);
        BigDecimal productQuantity=shipmentItem.getBigDecimal("quantity").setScale(decimals,rounding);
        UtilXml.addChildElementValue(unitElement,"Number",String.valueOf(productQuantity.intValue()),shipmentConfirmRequestDoc);
        List<GenericValue> shipmentItemIssuances=shipmentItem.getRelated("ItemIssuance",null,null,false);
        GenericValue orderItem=EntityUtil.getFirst(shipmentItemIssuances).getRelatedOne("OrderItem",false);
        UtilXml.addChildElementValue(unitElement,"Value",orderItem.getBigDecimal("unitPrice").toString(),shipmentConfirmRequestDoc);
        Element unitOfMeasurElement=UtilXml.addChildElement(unitElement,"UnitOfMeasurement",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(unitOfMeasurElement,"Code","EA",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(productElement,"OriginCountryCode","US",shipmentConfirmRequestDoc);
      }
      SimpleDateFormat formatter=new SimpleDateFormat(dateFormatString);
      String invoiceDate=formatter.format(shipment.getTimestamp("createdDate"));
      UtilXml.addChildElementValue(internationalFormsElement,"InvoiceDate",invoiceDate,shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(internationalFormsElement,"ReasonForExport","SALE",shipmentConfirmRequestDoc);
      UtilXml.addChildElementValue(internationalFormsElement,"CurrencyCode",currencyCode,shipmentConfirmRequestDoc);
    }
    ListIterator<GenericValue> shipmentPackageRouteSegIter=shipmentPackageRouteSegs.listIterator();
    while (shipmentPackageRouteSegIter.hasNext()) {
      GenericValue shipmentPackageRouteSeg=shipmentPackageRouteSegIter.next();
      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage",false);
      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType",false);
      List<GenericValue> carrierShipmentBoxTypes=shipmentPackage.getRelated("CarrierShipmentBoxType",UtilMisc.toMap("partyId","UPS"),null,false);
      GenericValue carrierShipmentBoxType=null;
      if (carrierShipmentBoxTypes.size() > 0) {
        carrierShipmentBoxType=carrierShipmentBoxTypes.get(0);
      }
      Element packageElement=UtilXml.addChildElement(shipmentElement,"Package",shipmentConfirmRequestDoc);
      Element packagingTypeElement=UtilXml.addChildElement(packageElement,"PackagingType",shipmentConfirmRequestDoc);
      if (carrierShipmentBoxType != null && carrierShipmentBoxType.get("packagingTypeCode") != null) {
        UtilXml.addChildElementValue(packagingTypeElement,"Code",carrierShipmentBoxType.getString("packagingTypeCode"),shipmentConfirmRequestDoc);
      }
 else {
        UtilXml.addChildElementValue(packagingTypeElement,"Code","02",shipmentConfirmRequestDoc);
      }
      if (shipmentBoxType != null) {
        Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",shipmentConfirmRequestDoc);
        Element unitOfMeasurementElement=UtilXml.addChildElement(dimensionsElement,"UnitOfMeasurement",shipmentConfirmRequestDoc);
        GenericValue dimensionUom=shipmentBoxType.getRelatedOne("DimensionUom",false);
        if (dimensionUom != null) {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code",dimensionUom.getString("abbreviation").toUpperCase(),shipmentConfirmRequestDoc);
        }
 else {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code","IN",shipmentConfirmRequestDoc);
        }
        BigDecimal boxLength=shipmentBoxType.getBigDecimal("boxLength");
        BigDecimal boxWidth=shipmentBoxType.getBigDecimal("boxWidth");
        BigDecimal boxHeight=shipmentBoxType.getBigDecimal("boxHeight");
        UtilXml.addChildElementValue(dimensionsElement,"Length",UtilValidate.isNotEmpty(boxLength) ? "" + boxLength.intValue() : "",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Width",UtilValidate.isNotEmpty(boxWidth) ? "" + boxWidth.intValue() : "",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Height",UtilValidate.isNotEmpty(boxHeight) ? "" + boxHeight.intValue() : "",shipmentConfirmRequestDoc);
      }
 else       if (UtilValidate.isNotEmpty(shipmentPackage) && UtilValidate.isNotEmpty(shipmentPackage.getBigDecimal("boxLength")) && UtilValidate.isNotEmpty(shipmentPackage.getBigDecimal("boxWidth"))&& UtilValidate.isNotEmpty(shipmentPackage.getBigDecimal("boxHeight"))) {
        Element dimensionsElement=UtilXml.addChildElement(packageElement,"Dimensions",shipmentConfirmRequestDoc);
        Element unitOfMeasurementElement=UtilXml.addChildElement(dimensionsElement,"UnitOfMeasurement",shipmentConfirmRequestDoc);
        GenericValue dimensionUom=shipmentPackage.getRelatedOne("DimensionUom",false);
        if (UtilValidate.isNotEmpty(dimensionUom)) {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code",dimensionUom.getString("abbreviation").toUpperCase(),shipmentConfirmRequestDoc);
        }
 else {
          UtilXml.addChildElementValue(unitOfMeasurementElement,"Code","IN",shipmentConfirmRequestDoc);
        }
        UtilXml.addChildElementValue(dimensionsElement,"Length","" + shipmentPackage.getBigDecimal("boxLength").intValue(),shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Width","" + shipmentPackage.getBigDecimal("boxWidth").intValue(),shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(dimensionsElement,"Height","" + shipmentPackage.getBigDecimal("boxHeight").intValue(),shipmentConfirmRequestDoc);
      }
      Element packageWeightElement=UtilXml.addChildElement(packageElement,"PackageWeight",shipmentConfirmRequestDoc);
      Element packageWeightUnitOfMeasurementElement=UtilXml.addChildElement(packageElement,"UnitOfMeasurement",shipmentConfirmRequestDoc);
      String weightUomUps=null;
      if (shipmentPackage.get("weightUomId") != null) {
        weightUomUps=unitsOfbizToUps.get(shipmentPackage.get("weightUomId"));
      }
      if (weightUomUps != null) {
        UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code",weightUomUps,shipmentConfirmRequestDoc);
      }
 else {
        UtilXml.addChildElementValue(packageWeightUnitOfMeasurementElement,"Code","LBS",shipmentConfirmRequestDoc);
      }
      if (shipmentPackage.getString("weight") == null) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsWeightValueNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId")),locale));
      }
      BigDecimal boxWeight=shipmentPackage.getBigDecimal("weight");
      UtilXml.addChildElementValue(packageWeightElement,"Weight",UtilValidate.isNotEmpty(boxWeight) ? "" + boxWeight.setScale(0,BigDecimal.ROUND_CEILING) : "",shipmentConfirmRequestDoc);
      if (!internationalServiceCodes.contains(carrierServiceCode)) {
        Element referenceNumberElement=UtilXml.addChildElement(packageElement,"ReferenceNumber",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(referenceNumberElement,"Code","MK",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(referenceNumberElement,"Value",shipmentPackage.getString("shipmentPackageSeqId"),shipmentConfirmRequestDoc);
      }
      if (carrierShipmentBoxType != null && carrierShipmentBoxType.get("oversizeCode") != null) {
        UtilXml.addChildElementValue(packageElement,"OversizePackage",carrierShipmentBoxType.getString("oversizeCode"),shipmentConfirmRequestDoc);
      }
      Element packageServiceOptionsElement=UtilXml.addChildElement(packageElement,"PackageServiceOptions",shipmentConfirmRequestDoc);
      BigDecimal insuredValue=shipmentPackage.getBigDecimal("insuredValue");
      if (!UtilValidate.isEmpty(insuredValue)) {
        Element insuredValueElement=UtilXml.addChildElement(packageServiceOptionsElement,"InsuredValue",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(insuredValueElement,"MonetaryValue",insuredValue.setScale(2,BigDecimal.ROUND_HALF_UP).toString(),shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(insuredValueElement,"CurrencyCode",currencyCode,shipmentConfirmRequestDoc);
      }
      if (allowCOD) {
        Element codElement=UtilXml.addChildElement(packageServiceOptionsElement,"COD",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(codElement,"CODCode","3",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(codElement,"CODFundsCode",codFundsCode,shipmentConfirmRequestDoc);
        Element codAmountElement=UtilXml.addChildElement(codElement,"CODAmount",shipmentConfirmRequestDoc);
        UtilXml.addChildElementValue(codAmountElement,"CurrencyCode",currencyCode,shipmentConfirmRequestDoc);
        Map<String,Object> getPackageValueResult=dispatcher.runSync("getShipmentPackageValueFromOrders",UtilMisc.toMap("shipmentId",shipmentId,"shipmentPackageSeqId",shipmentPackage.get("shipmentPackageSeqId"),"currencyUomId",currencyCode,"userLogin",userLogin,"locale",locale));
        if (ServiceUtil.isError(getPackageValueResult))         return getPackageValueResult;
        BigDecimal packageValue=(BigDecimal)getPackageValueResult.get("packageValue");
        Map<String,Object> convertUomResult=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",codSurchargeCurrencyUomId,"uomIdTo",currencyCode,"originalValue",codSurchargePackageAmount));
        if (ServiceUtil.isError(convertUomResult))         return convertUomResult;
        if (convertUomResult.containsKey("convertedValue")) {
          codSurchargePackageAmount=((BigDecimal)convertUomResult.get("convertedValue")).setScale(decimals,rounding);
        }
        if (codSurchargeApplyToAllPackages || codSurchargeSplitBetweenPackages || (codSurchargeApplyToFirstPackage && shipmentPackageRouteSegIter.previousIndex() <= 0)) {
          packageValue=packageValue.add(codSurchargePackageAmount);
        }
        UtilXml.addChildElementValue(codAmountElement,"MonetaryValue",packageValue.setScale(decimals,rounding).toString(),shipmentConfirmRequestDoc);
      }
    }
    String shipmentConfirmRequestString=null;
    try {
      shipmentConfirmRequestString=UtilXml.writeXmlDocument(shipmentConfirmRequestDoc);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the ShipmentConfirmRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorShipmentConfirmRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    Document accessRequestDocument=createAccessRequestDocument(delegator,shipmentGatewayConfigId,resource);
    String accessRequestString=null;
    try {
      accessRequestString=UtilXml.writeXmlDocument(accessRequestDocument);
    }
 catch (    IOException e) {
      String ioeErrMsg="Error writing the AccessRequest XML Document to a String: " + e.toString();
      Debug.logError(e,ioeErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorAccessRequestXmlToString",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    StringBuilder xmlString=new StringBuilder();
    xmlString.append(accessRequestString);
    xmlString.append(shipmentConfirmRequestString);
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentConfirmRequest" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(xmlString.toString().getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.logInfo(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    try {
      shipmentConfirmResponseString=sendUpsRequest("ShipConfirm",xmlString.toString(),shipmentGatewayConfigId,resource,delegator,locale);
    }
 catch (    UpsConnectException e) {
      String uceErrMsg="Error sending UPS request for UPS Service ShipConfirm: " + e.toString();
      Debug.logError(e,uceErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorSendingShipConfirm",UtilMisc.toMap("errorString",e.toString()),locale));
    }
    if (shipmentUpsSaveCertificationInfo) {
      String outFileName=shipmentUpsSaveCertificationPath + "/UpsShipmentConfirmResponse" + shipmentId+ "_"+ shipmentRouteSegment.getString("shipmentRouteSegmentId")+ ".xml";
      try {
        FileOutputStream fileOut=new FileOutputStream(outFileName);
        fileOut.write(shipmentConfirmResponseString.getBytes());
        fileOut.flush();
        fileOut.close();
      }
 catch (      IOException e) {
        Debug.logInfo(e,"Could not save UPS XML file: [[[" + xmlString.toString() + "]]] to file: "+ outFileName,module);
      }
    }
    Document shipmentConfirmResponseDocument=null;
    try {
      shipmentConfirmResponseDocument=UtilXml.readXmlDocument(shipmentConfirmResponseString,false);
    }
 catch (    SAXException e2) {
      String excErrMsg="Error parsing the ShipmentConfirmResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingShipmentConfirm",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    ParserConfigurationException e2) {
      String excErrMsg="Error parsing the ShipmentConfirmResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingShipmentConfirm",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
catch (    IOException e2) {
      String excErrMsg="Error parsing the ShipmentConfirmResponse: " + e2.toString();
      Debug.logError(e2,excErrMsg,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingShipmentConfirm",UtilMisc.toMap("errorString",e2.toString()),locale));
    }
    return handleUpsShipmentConfirmResponse(shipmentConfirmResponseDocument,shipmentRouteSegment,locale);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorDataShipmentConfirm",UtilMisc.toMap("errorString",e.toString()),locale));
  }
catch (  GenericEntityException e) {
    Debug.logError(e,module);
    if (shipmentConfirmResponseString != null) {
      Debug.logError("Got XML ShipmentConfirmRespose: " + shipmentConfirmResponseString,module);
      return ServiceUtil.returnError(UtilMisc.toList(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorDataShipmentConfirm",UtilMisc.toMap("errorString",e.toString()),locale),UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentConfirmResposeWasReceived",UtilMisc.toMap("shipmentConfirmResponseString",shipmentConfirmResponseString),locale)));
    }
 else {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorDataShipmentConfirm",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
}
