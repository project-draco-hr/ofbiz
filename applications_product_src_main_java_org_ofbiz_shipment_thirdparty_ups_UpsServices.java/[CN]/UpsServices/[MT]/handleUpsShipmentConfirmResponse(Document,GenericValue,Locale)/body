{
  Element shipmentConfirmResponseElement=shipmentConfirmResponseDocument.getDocumentElement();
  Element responseElement=UtilXml.firstChildElement(shipmentConfirmResponseElement,"Response");
  String responseStatusCode=UtilXml.childElementValue(responseElement,"ResponseStatusCode");
  List<Object> errorList=new LinkedList<Object>();
  UpsServices.handleErrors(responseElement,errorList,locale);
  if ("1".equals(responseStatusCode)) {
    Element shipmentChargesElement=UtilXml.firstChildElement(shipmentConfirmResponseElement,"ShipmentCharges");
    Element transportationChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"TransportationCharges");
    String transportationMonetaryValue=UtilXml.childElementValue(transportationChargesElement,"MonetaryValue");
    Element serviceOptionsChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"ServiceOptionsCharges");
    String serviceOptionsMonetaryValue=UtilXml.childElementValue(serviceOptionsChargesElement,"MonetaryValue");
    Element totalChargesElement=UtilXml.firstChildElement(shipmentChargesElement,"TotalCharges");
    String totalCurrencyCode=UtilXml.childElementValue(totalChargesElement,"CurrencyCode");
    String totalMonetaryValue=UtilXml.childElementValue(totalChargesElement,"MonetaryValue");
    if (UtilValidate.isNotEmpty(totalCurrencyCode)) {
      if (UtilValidate.isEmpty(shipmentRouteSegment.getString("currencyUomId"))) {
        shipmentRouteSegment.set("currencyUomId",totalCurrencyCode);
      }
 else       if (!totalCurrencyCode.equals(shipmentRouteSegment.getString("currencyUomId"))) {
        shipmentRouteSegment.set("currencyUomId",totalCurrencyCode);
        errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsCurrencyDoesNotMatch",UtilMisc.toMap("currency1",totalCurrencyCode,"currency2",shipmentRouteSegment.getString("currencyUomId")),locale));
      }
    }
    try {
      shipmentRouteSegment.set("actualTransportCost",new BigDecimal(transportationMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the transportationMonetaryValue [" + transportationMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingTransportationMonetaryValue",UtilMisc.toMap("transportationMonetaryValue",transportationMonetaryValue,"errorString",e.toString()),locale));
    }
    try {
      shipmentRouteSegment.set("actualServiceCost",new BigDecimal(serviceOptionsMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the serviceOptionsMonetaryValue [" + serviceOptionsMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingServiceOptionsMonetaryValue",UtilMisc.toMap("serviceOptionsMonetaryValue",serviceOptionsMonetaryValue,"errorString",e.toString()),locale));
    }
    try {
      shipmentRouteSegment.set("actualCost",new BigDecimal(totalMonetaryValue));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the totalMonetaryValue [" + totalMonetaryValue + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingTotalMonetaryValue",UtilMisc.toMap("totalMonetaryValue",totalMonetaryValue,"errorString",e.toString()),locale));
    }
    Element billingWeightElement=UtilXml.firstChildElement(shipmentConfirmResponseElement,"BillingWeight");
    Element billingWeightUnitOfMeasurementElement=UtilXml.firstChildElement(billingWeightElement,"UnitOfMeasurement");
    String billingWeightUnitOfMeasurement=UtilXml.childElementValue(billingWeightUnitOfMeasurementElement,"Code");
    String billingWeight=UtilXml.childElementValue(billingWeightElement,"Weight");
    try {
      shipmentRouteSegment.set("billingWeight",new BigDecimal(billingWeight));
    }
 catch (    NumberFormatException e) {
      String excErrMsg="Error parsing the billingWeight [" + billingWeight + "]: "+ e.toString();
      Debug.logError(e,excErrMsg,module);
      errorList.add(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsErrorParsingBillingWeight",UtilMisc.toMap("billingWeight",billingWeight,"errorString",e.toString()),locale));
    }
    shipmentRouteSegment.set("billingWeightUomId",unitsUpsToOfbiz.get(billingWeightUnitOfMeasurement));
    String shipmentIdentificationNumber=UtilXml.childElementValue(shipmentConfirmResponseElement,"ShipmentIdentificationNumber");
    String shipmentDigest=UtilXml.childElementValue(shipmentConfirmResponseElement,"ShipmentDigest");
    shipmentRouteSegment.set("trackingIdNumber",shipmentIdentificationNumber);
    shipmentRouteSegment.set("trackingDigest",shipmentDigest);
    shipmentRouteSegment.put("carrierServiceStatusId","SHRSCS_CONFIRMED");
    shipmentRouteSegment.store();
    StringBuilder successString=new StringBuilder(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentConfirmSucceeded",locale));
    if (errorList.size() > 0) {
      successString.append(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentConfirmError",locale));
      Iterator<Object> errorListIter=errorList.iterator();
      while (errorListIter.hasNext()) {
        successString.append(errorListIter.next());
        if (errorListIter.hasNext()) {
          successString.append(", ");
        }
      }
    }
    return ServiceUtil.returnSuccess(successString.toString());
  }
 else {
    errorList.add(0,UtilProperties.getMessage(resourceError,"FacilityShipmentUpsShipmentConfirmFailed",locale));
    return ServiceUtil.returnError(errorList);
  }
}
