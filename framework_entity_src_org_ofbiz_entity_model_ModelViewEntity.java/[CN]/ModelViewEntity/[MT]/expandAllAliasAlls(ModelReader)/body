{
  for (  ModelAliasAll aliasAll : aliasAlls) {
    String entityAlias=aliasAll.getEntityAlias();
    String prefix=aliasAll.getPrefix();
    String function=aliasAll.getFunction();
    boolean groupBy=aliasAll.getGroupBy();
    String aliasAllFieldSet=aliasAll.getFieldSet();
    ModelMemberEntity modelMemberEntity=memberModelMemberEntities.get(entityAlias);
    if (modelMemberEntity == null) {
      Debug.logError("[" + this.getEntityName() + "]: Member entity referred to in alias-all not found, ignoring: "+ entityAlias,module);
      continue;
    }
    String aliasedEntityName=modelMemberEntity.getEntityName();
    ModelEntity aliasedEntity=modelReader.getModelEntityNoCheck(aliasedEntityName);
    if (aliasedEntity == null) {
      Debug.logError("[" + this.getEntityName() + "]: Entity referred to in member-entity "+ entityAlias+ " not found, ignoring: "+ aliasedEntityName,module);
      continue;
    }
    List<String> entFieldList=aliasedEntity.getAllFieldNames();
    if (entFieldList == null) {
      Debug.logError("[" + this.getEntityName() + "]: Entity referred to in member-entity "+ entityAlias+ " has no fields, ignoring: "+ aliasedEntityName,module);
      continue;
    }
    for (    String fieldName : entFieldList) {
      String aliasName=fieldName;
      ModelField modelField=aliasedEntity.getField(fieldName);
      if (modelField.getIsAutoCreatedInternal()) {
        continue;
      }
      if (aliasAll.shouldExclude(fieldName)) {
        continue;
      }
      if (UtilValidate.isNotEmpty(prefix)) {
        StringBuilder newAliasBuffer=new StringBuilder(prefix);
        newAliasBuffer.append(Character.toUpperCase(aliasName.charAt(0)));
        newAliasBuffer.append(aliasName.substring(1));
        aliasName=newAliasBuffer.toString();
      }
      String fieldSet;
      if (UtilValidate.isEmpty(aliasAllFieldSet)) {
        String aliasedFieldSet=modelField.getFieldSet();
        if (UtilValidate.isNotEmpty(aliasedFieldSet)) {
          StringBuilder fieldSetBuffer=new StringBuilder(entityAlias);
          if (UtilValidate.isNotEmpty(prefix)) {
            fieldSetBuffer.append(Character.toUpperCase(prefix.charAt(0)));
            fieldSetBuffer.append(prefix.substring(1));
          }
          fieldSetBuffer.append(Character.toUpperCase(aliasedFieldSet.charAt(0)));
          fieldSetBuffer.append(aliasedFieldSet.substring(1));
          fieldSet=fieldSetBuffer.toString();
        }
 else {
          fieldSet="";
        }
      }
 else {
        fieldSet=aliasAllFieldSet;
      }
      if (UtilValidate.isNotEmpty(fieldSet)) {
        Debug.logInfo("[" + this.getEntityName() + "]: set field-set on ["+ aliasName+ "]: "+ fieldSet,module);
      }
      ModelAlias existingAlias=this.getAlias(aliasName);
      if (existingAlias != null) {
        boolean isInViewLink=false;
        Iterator<ModelViewLink> viewLinkIter=this.getViewLinksIterator();
        while (viewLinkIter.hasNext() && !isInViewLink) {
          ModelViewLink modelViewLink=viewLinkIter.next();
          boolean isRel=false;
          if (modelViewLink.getRelEntityAlias().equals(aliasAll.getEntityAlias())) {
            isRel=true;
          }
 else           if (!modelViewLink.getEntityAlias().equals(aliasAll.getEntityAlias())) {
            continue;
          }
          Iterator<ModelKeyMap> keyMapIter=modelViewLink.getKeyMapsIterator();
          while (keyMapIter.hasNext() && !isInViewLink) {
            ModelKeyMap modelKeyMap=keyMapIter.next();
            if (!isRel && modelKeyMap.getFieldName().equals(fieldName)) {
              isInViewLink=true;
            }
 else             if (isRel && modelKeyMap.getRelFieldName().equals(fieldName)) {
              isInViewLink=true;
            }
          }
        }
        String warnMsg="[" + this.getEntityName() + "]: Throwing out field alias in view entity because one already exists with the alias name ["+ aliasName+ "] and field name ["+ modelMemberEntity.getEntityAlias()+ "("+ aliasedEntity.getEntityName()+ ")."+ fieldName+ "], existing field name is ["+ existingAlias.getEntityAlias()+ "."+ existingAlias.getField()+ "]";
        if (isInViewLink) {
          Debug.logVerbose(warnMsg,module);
        }
 else {
          Debug.logInfo(warnMsg,module);
        }
        continue;
      }
      ModelAlias expandedAlias=new ModelAlias(aliasAll.getEntityAlias(),aliasName,fieldName,ModelUtil.javaNameToDbName(UtilXml.checkEmpty(aliasName)),null,groupBy,function,fieldSet,true);
      expandedAlias.setDescription(modelField.getDescription());
      aliases.add(expandedAlias);
    }
  }
}
