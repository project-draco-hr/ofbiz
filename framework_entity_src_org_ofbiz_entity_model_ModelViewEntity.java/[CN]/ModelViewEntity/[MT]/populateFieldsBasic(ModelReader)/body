{
  for (  Map.Entry<String,ModelMemberEntity> entry : memberModelMemberEntities.entrySet()) {
    ModelMemberEntity modelMemberEntity=entry.getValue();
    String aliasedEntityName=modelMemberEntity.getEntityName();
    ModelEntity aliasedEntity=modelReader.getModelEntityNoCheck(aliasedEntityName);
    if (aliasedEntity == null) {
      continue;
    }
    memberModelEntities.put(entry.getKey(),aliasedEntityName);
    Iterator<ModelField> aliasedFieldIterator=aliasedEntity.getFieldsIterator();
    while (aliasedFieldIterator.hasNext()) {
      ModelField aliasedModelField=aliasedFieldIterator.next();
      ModelField newModelField=new ModelField();
      for (int i=0; i < aliasedModelField.getValidatorsSize(); i++) {
        newModelField.addValidator(aliasedModelField.getValidator(i));
      }
      newModelField.setColName(modelMemberEntity.getEntityAlias() + "." + aliasedModelField.getColName());
      newModelField.setName(modelMemberEntity.getEntityAlias() + "." + aliasedModelField.getName());
      newModelField.setType(aliasedModelField.getType());
      newModelField.setDescription(aliasedModelField.getDescription());
      newModelField.setIsPk(false);
      aliasedModelEntity.addField(newModelField);
    }
  }
  expandAllAliasAlls(modelReader);
  for (  ModelAlias alias : aliases) {
    ModelField field=new ModelField();
    field.setModelEntity(this);
    field.name=alias.name;
    field.description=alias.description;
    if (alias.groupBy || groupByFields.contains(alias.name)) {
      this.groupBys.add(field);
    }
    if (UtilValidate.isNotEmpty(alias.function) && alias.groupBy) {
      Debug.logWarning("[" + this.getEntityName() + "]: The view-entity alias with name="+ alias.name+ " has a function value and is specified as a group-by field; this may be an error, but is not necessarily.",module);
    }
    if (alias.isComplexAlias()) {
      StringBuilder colNameBuffer=new StringBuilder();
      StringBuilder fieldTypeBuffer=new StringBuilder();
      alias.makeAliasColName(colNameBuffer,fieldTypeBuffer,this,modelReader);
      field.colValue=colNameBuffer.toString();
      field.colName=ModelUtil.javaNameToDbName(alias.name);
      field.type=fieldTypeBuffer.toString();
      field.isPk=false;
    }
 else {
      ModelEntity aliasedEntity=getAliasedEntity(alias.entityAlias,modelReader);
      ModelField aliasedField=getAliasedField(aliasedEntity,alias.field,modelReader);
      if (aliasedField == null) {
        Debug.logError("[" + this.getEntityName() + "]: [populateFields] ERROR: could not find ModelField for field name \""+ alias.field+ "\" on entity with name: "+ aliasedEntity.getEntityName(),module);
        continue;
      }
      if (alias.isPk != null) {
        field.isPk=alias.isPk.booleanValue();
      }
 else {
        field.isPk=aliasedField.isPk;
      }
      field.encrypt=aliasedField.encrypt;
      field.type=aliasedField.type;
      field.validators=aliasedField.validators;
      field.colValue=alias.entityAlias + "." + SqlJdbcUtil.filterColName(aliasedField.colName);
      field.colName=SqlJdbcUtil.filterColName(field.colValue);
      if (UtilValidate.isEmpty(field.description)) {
        field.description=aliasedField.description;
      }
    }
    this.fields.add(field);
    if (field.isPk) {
      this.pks.add(field);
    }
 else {
      this.nopks.add(field);
    }
    if ("count".equals(alias.function) || "count-distinct".equals(alias.function)) {
      field.type="numeric";
    }
    if (UtilValidate.isNotEmpty(alias.function)) {
      String prefix=functionPrefixMap.get(alias.function);
      if (prefix == null) {
        Debug.logWarning("[" + this.getEntityName() + "]: Specified alias function ["+ alias.function+ "] not valid; must be: min, max, sum, avg, count or count-distinct; using a column name with no function function",module);
      }
 else {
        field.colValue=prefix + field.getColValue() + ")";
      }
    }
  }
}
