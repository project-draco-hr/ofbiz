{
  Map<String,List<String>> containedModelFields=FastMap.newInstance();
  Iterator<ModelAlias> it=getAliasesIterator();
  while (it.hasNext()) {
    ModelViewEntity.ModelAlias alias=it.next();
    if (alias.isComplexAlias()) {
      Debug.logWarning("[" + this.getEntityName() + "]: Conversion for complex-alias needs to be implemented for cache and in-memory eval stuff to work correctly, will not work for alias: "+ alias.getName(),module);
    }
 else {
      ModelConversion conversion=getOrCreateModelConversion(alias.getEntityAlias());
      conversion.addConversion(alias.getField(),alias.getName());
    }
    List<String> aliases=containedModelFields.get(alias.getField());
    if (aliases == null) {
      aliases=FastList.newInstance();
      containedModelFields.put(alias.getField(),aliases);
    }
    aliases.add(alias.getName());
  }
  Iterator<ModelViewLink> it2=getViewLinksIterator();
  while (it2.hasNext()) {
    ModelViewEntity.ModelViewLink link=it2.next();
    String leftAlias=link.getEntityAlias();
    String rightAlias=link.getRelEntityAlias();
    ModelConversion leftConversion=getOrCreateModelConversion(leftAlias);
    ModelConversion rightConversion=getOrCreateModelConversion(rightAlias);
    Iterator<ModelKeyMap> it3=link.getKeyMapsIterator();
    Debug.logVerbose(leftAlias + "<->" + rightAlias,module);
    while (it3.hasNext()) {
      ModelKeyMap mkm=it3.next();
      String leftFieldName=mkm.getFieldName();
      String rightFieldName=mkm.getRelFieldName();
      rightConversion.addAllAliasConversions(containedModelFields.get(leftFieldName),rightFieldName);
      leftConversion.addAllAliasConversions(containedModelFields.get(rightFieldName),leftFieldName);
    }
  }
  int[] currentIndex=new int[conversions.size()];
  int[] maxIndex=new int[conversions.size()];
  ModelConversion[][] allConversions=new ModelConversion[conversions.size()][];
  int i=0;
  for (  Map<String,ModelConversion> aliasConversions : conversions.values()) {
    currentIndex[i]=0;
    maxIndex[i]=aliasConversions.size();
    allConversions[i]=new ModelConversion[aliasConversions.size()];
    int j=0;
    for (    ModelConversion conversion : aliasConversions.values()) {
      allConversions[i][j]=conversion;
      j++;
    }
    i++;
  }
  int ptr=0;
  ModelConversion[] currentConversions=new ModelConversion[conversions.size()];
  for (int j=0, k; j < currentIndex.length; j++) {
    for (int l=0; l < maxIndex[j]; l++) {
      while (true) {
        for (i=0, k=0; i < currentIndex.length; i++) {
          if (i == j && currentIndex[i] == l)           continue;
          currentConversions[k++]=allConversions[i][currentIndex[i]];
        }
        Debug.logVerbose(j + "," + l+ ":"+ Arrays.asList(currentConversions),module);
        while (ptr < currentIndex.length && ++currentIndex[ptr] == maxIndex[ptr]) {
          currentIndex[ptr]=0;
          ptr++;
        }
        if (ptr == currentIndex.length)         break;
        ptr=0;
      }
    }
  }
  Debug.logVerbose(this + ":" + conversions,module);
}
