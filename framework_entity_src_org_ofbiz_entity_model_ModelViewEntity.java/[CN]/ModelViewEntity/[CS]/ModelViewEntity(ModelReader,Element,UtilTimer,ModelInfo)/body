{
  super(reader,entityElement,def);
  if (utilTimer != null)   utilTimer.timerString("  createModelViewEntity: before general/basic info");
  this.populateBasicInfo(entityElement);
  if (utilTimer != null)   utilTimer.timerString("  createModelViewEntity: before \"member-entity\"s");
  for (  Element memberEntityElement : UtilXml.childElementList(entityElement,"member-entity")) {
    String alias=UtilXml.checkEmpty(memberEntityElement.getAttribute("entity-alias")).intern();
    String name=UtilXml.checkEmpty(memberEntityElement.getAttribute("entity-name")).intern();
    if (name.length() <= 0 || alias.length() <= 0) {
      Debug.logError("[new ModelViewEntity] entity-alias or entity-name missing on member-entity element of the view-entity " + this.entityName,module);
    }
 else {
      ModelMemberEntity modelMemberEntity=new ModelMemberEntity(alias,name);
      this.addMemberModelMemberEntity(modelMemberEntity);
    }
  }
  for (  Element aliasElement : UtilXml.childElementList(entityElement,"alias-all")) {
    ModelViewEntity.ModelAliasAll aliasAll=new ModelAliasAll(aliasElement);
    this.aliasAlls.add(aliasAll);
  }
  if (utilTimer != null)   utilTimer.timerString("  createModelViewEntity: before aliases");
  for (  Element aliasElement : UtilXml.childElementList(entityElement,"alias")) {
    ModelViewEntity.ModelAlias alias=new ModelAlias(aliasElement);
    this.aliases.add(alias);
  }
  for (  Element viewLinkElement : UtilXml.childElementList(entityElement,"view-link")) {
    ModelViewLink viewLink=new ModelViewLink(this,viewLinkElement);
    this.addViewLink(viewLink);
  }
  if (utilTimer != null)   utilTimer.timerString("  createModelEntity: before relations");
  this.populateRelated(reader,entityElement);
  Element entityConditionElement=UtilXml.firstChildElement(entityElement,"entity-condition");
  if (entityConditionElement != null) {
    this.viewEntityCondition=new ViewEntityCondition(this,null,entityConditionElement);
  }
  this.tableName=null;
}
