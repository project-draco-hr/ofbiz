{
  Object value=this.value;
  if ((this.operator == EntityOperator.IN || this.operator == EntityOperator.BETWEEN) && value instanceof String) {
    String delim=null;
    if (((String)value).indexOf("|") >= 0) {
      delim="|";
    }
 else     if (((String)value).indexOf(",") >= 0) {
      delim=",";
    }
    if (UtilValidate.isNotEmpty(delim)) {
      value=StringUtil.split((String)value,delim);
    }
  }
  EntityConditionValue lhs=EntityFieldValue.makeFieldValue(this.fieldName,this.entityAlias,entityAliasStack,this.viewEntityCondition.modelViewEntity);
  ModelField lhsField=lhs.getModelField(this.viewEntityCondition.modelViewEntity);
  if (lhsField == null) {
    throw new IllegalArgumentException("[" + this.viewEntityCondition.modelViewEntity.getEntityName() + "]: Error in Entity Find: could not find field ["+ fieldName+ "]");
  }
  if (!((this.operator == EntityOperator.IN || this.operator == EntityOperator.BETWEEN) && value instanceof Collection<?>)) {
    value=this.viewEntityCondition.modelViewEntity.convertFieldValue(lhsField,value,modelFieldTypeReader,FastMap.<String,Object>newInstance());
  }
  if (Debug.verboseOn())   Debug.logVerbose("[" + this.viewEntityCondition.modelViewEntity.getEntityName() + "]: Got value for fieldName ["+ fieldName+ "]: "+ value,module);
  Object rhs=null;
  if (value != null) {
    rhs=value;
  }
 else {
    rhs=EntityFieldValue.makeFieldValue(this.relFieldName,this.relEntityAlias,entityAliasStack,this.viewEntityCondition.modelViewEntity);
  }
  if (this.operator == EntityOperator.NOT_EQUAL && value != null) {
    if (ignoreCase) {
      return EntityCondition.makeCondition(EntityCondition.makeCondition(EntityFunction.UPPER(lhs),this.operator,EntityFunction.UPPER(rhs)),EntityOperator.OR,EntityCondition.makeCondition(lhs,EntityOperator.EQUALS,null));
    }
 else {
      return EntityCondition.makeCondition(EntityCondition.makeCondition(lhs,this.operator,rhs),EntityOperator.OR,EntityCondition.makeCondition(lhs,EntityOperator.EQUALS,null));
    }
  }
 else   if (value == null && this.relFieldName == null && (this.operator == EntityOperator.EQUALS || this.operator == EntityOperator.NOT_EQUAL)) {
    return EntityCondition.makeCondition(lhs,this.operator,null);
  }
 else {
    if (ignoreCase) {
      return EntityCondition.makeCondition(EntityFunction.UPPER(lhs),this.operator,EntityFunction.UPPER(rhs));
    }
 else {
      return EntityCondition.makeCondition(lhs,this.operator,rhs);
    }
  }
}
