{
  this.modelViewEntity=modelViewEntity;
  this.modelViewLink=modelViewLink;
  this.filterByDate="true".equals(element.getAttribute("filter-by-date"));
  this.distinct="true".equals(element.getAttribute("distinct"));
  List<? extends Element> orderByElementList=UtilXml.childElementList(element,"order-by");
  if (orderByElementList.size() > 0) {
    orderByList=FastList.newInstance();
    for (    Element orderByElement : orderByElementList) {
      orderByList.add(orderByElement.getAttribute("field-name"));
    }
  }
 else {
    orderByList=null;
  }
  Element conditionExprElement=UtilXml.firstChildElement(element,"condition-expr");
  Element conditionListElement=UtilXml.firstChildElement(element,"condition-list");
  if (conditionExprElement != null) {
    this.whereCondition=new ViewConditionExpr(this,conditionExprElement);
  }
 else   if (conditionListElement != null) {
    this.whereCondition=new ViewConditionList(this,conditionListElement);
  }
 else {
    this.whereCondition=null;
  }
  Element havingConditionListElement=UtilXml.firstChildElement(element,"having-condition-list");
  if (havingConditionListElement != null) {
    this.havingCondition=new ViewConditionList(this,havingConditionListElement);
  }
 else {
    this.havingCondition=null;
  }
}
