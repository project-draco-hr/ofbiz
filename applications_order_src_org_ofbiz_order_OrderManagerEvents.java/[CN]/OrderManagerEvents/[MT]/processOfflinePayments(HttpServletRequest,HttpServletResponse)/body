{
  HttpSession session=request.getSession();
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  Locale locale=UtilHttp.getLocale(request);
  if (session.getAttribute("OFFLINE_PAYMENTS") != null) {
    String orderId=(String)request.getAttribute("orderId");
    List<GenericValue> toBeStored=FastList.newInstance();
    List<GenericValue> paymentPrefs=null;
    GenericValue placingCustomer=null;
    try {
      paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderId",orderId).queryList();
      placingCustomer=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"roleTypeId","PLACING_CUSTOMER").queryFirst();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problems looking up order payment preferences",module);
      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderErrorProcessingOfflinePayments",locale));
      return "error";
    }
    if (paymentPrefs != null) {
      for (      GenericValue ppref : paymentPrefs) {
        ppref.set("statusId","PAYMENT_RECEIVED");
        ppref.set("authDate",UtilDateTime.nowTimestamp());
        toBeStored.add(ppref);
        Map<String,Object> results=null;
        try {
          results=dispatcher.runSync("createPaymentFromPreference",UtilMisc.toMap("orderPaymentPreferenceId",ppref.get("orderPaymentPreferenceId"),"paymentFromId",placingCustomer.getString("partyId"),"comments","Payment received offline and manually entered."));
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Failed to execute service createPaymentFromPreference",module);
          request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
          return "error";
        }
        if ((results == null) || (results.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))) {
          Debug.logError((String)results.get(ModelService.ERROR_MESSAGE),module);
          request.setAttribute("_ERROR_MESSAGE_",results.get(ModelService.ERROR_MESSAGE));
          return "error";
        }
      }
      try {
        delegator.storeAll(toBeStored);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problems storing payment information",module);
        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemStoringReceivedPaymentInformation",locale));
        return "error";
      }
      OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);
    }
  }
  return "success";
}
