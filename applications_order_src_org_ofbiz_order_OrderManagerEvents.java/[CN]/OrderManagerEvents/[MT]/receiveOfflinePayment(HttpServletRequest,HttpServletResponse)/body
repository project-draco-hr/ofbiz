{
  HttpSession session=request.getSession();
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  Locale locale=UtilHttp.getLocale(request);
  String orderId=request.getParameter("orderId");
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems reading order header from datasource.",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemsReadingOrderHeaderInformation",locale));
    return "error";
  }
  Double grandTotal=new Double(0.00);
  if (orderHeader != null) {
    grandTotal=orderHeader.getDouble("grandTotal");
  }
  List paymentMethodTypes=null;
  try {
    List pmtFields=UtilMisc.toList(new EntityExpr("paymentMethodTypeId",EntityOperator.NOT_EQUAL,"EXT_OFFLINE"));
    paymentMethodTypes=delegator.findByAnd("PaymentMethodType",pmtFields);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems getting payment types",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemsWithPaymentTypeLookup",locale));
    return "error";
  }
  if (paymentMethodTypes == null) {
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemsWithPaymentTypeLookup",locale));
    return "error";
  }
  List toBeStored=new LinkedList();
  GenericValue placingCustomer=null;
  try {
    List pRoles=delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","PLACING_CUSTOMER"));
    if (pRoles != null && pRoles.size() > 0)     placingCustomer=EntityUtil.getFirst(pRoles);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems looking up order payment preferences",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderErrorProcessingOfflinePayments",locale));
    return "error";
  }
  Iterator pmti=paymentMethodTypes.iterator();
  while (pmti.hasNext()) {
    GenericValue paymentMethodType=(GenericValue)pmti.next();
    String paymentMethodTypeId=paymentMethodType.getString("paymentMethodTypeId");
    String amountStr=request.getParameter(paymentMethodTypeId + "_amount");
    String paymentReference=request.getParameter(paymentMethodTypeId + "_reference");
    if (!UtilValidate.isEmpty(amountStr)) {
      double paymentTypeAmount=0.00;
      try {
        paymentTypeAmount=NumberFormat.getNumberInstance(locale).parse(amountStr).doubleValue();
      }
 catch (      java.text.ParseException pe) {
        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemsPaymentParsingAmount",locale));
        return "error";
      }
      if (paymentTypeAmount > 0.00) {
        Map prefFields=UtilMisc.toMap("orderPaymentPreferenceId",delegator.getNextSeqId("OrderPaymentPreference"));
        GenericValue paymentPreference=delegator.makeValue("OrderPaymentPreference",prefFields);
        paymentPreference.set("paymentMethodTypeId",paymentMethodType.getString("paymentMethodTypeId"));
        paymentPreference.set("maxAmount",new Double(paymentTypeAmount));
        paymentPreference.set("statusId","PAYMENT_RECEIVED");
        paymentPreference.set("orderId",orderId);
        paymentPreference.set("createdDate",UtilDateTime.nowTimestamp());
        if (userLogin != null) {
          paymentPreference.set("createdByUserLogin",userLogin.getString("userLoginId"));
        }
        try {
          delegator.create(paymentPreference);
        }
 catch (        GenericEntityException ex) {
          Debug.logError(ex,"Cannot create a new OrderPaymentPreference",module);
          request.setAttribute("_ERROR_MESSAGE_",ex.getMessage());
          return "error";
        }
        Map results=null;
        try {
          results=dispatcher.runSync("createPaymentFromPreference",UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreferenceId",paymentPreference.get("orderPaymentPreferenceId"),"paymentRefNum",paymentReference,"paymentFromId",placingCustomer.getString("partyId"),"comments","Payment received offline and manually entered."));
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Failed to execute service createPaymentFromPreference",module);
          request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
          return "error";
        }
        if ((results == null) || (results.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))) {
          Debug.logError((String)results.get(ModelService.ERROR_MESSAGE),module);
          request.setAttribute("_ERROR_MESSAGE_",(String)results.get(ModelService.ERROR_MESSAGE));
          return "error";
        }
      }
    }
  }
  GenericValue offlineValue=null;
  List currentPrefs=null;
  double paymentTally=0.00;
  try {
    List oppFields=UtilMisc.toList(new EntityExpr("orderId",EntityOperator.EQUALS,orderId),new EntityExpr("statusId",EntityOperator.NOT_EQUAL,"PAYMENT_CANCELLED"));
    currentPrefs=delegator.findByAnd("OrderPaymentPreference",oppFields);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"ERROR: Unable to get existing payment preferences from order",module);
  }
  if (currentPrefs != null && currentPrefs.size() > 0) {
    Iterator cpi=currentPrefs.iterator();
    while (cpi.hasNext()) {
      GenericValue cp=(GenericValue)cpi.next();
      String paymentMethodType=cp.getString("paymentMethodTypeId");
      if ("EXT_OFFLINE".equals(paymentMethodType)) {
        offlineValue=cp;
      }
 else {
        Double cpAmt=cp.getDouble("maxAmount");
        if (cpAmt != null) {
          paymentTally+=cpAmt.doubleValue();
        }
      }
    }
  }
  boolean okayToApprove=false;
  if (paymentTally >= grandTotal.doubleValue()) {
    okayToApprove=true;
    if (offlineValue != null) {
      offlineValue.set("statusId","PAYMENT_CANCELLED");
      toBeStored.add(offlineValue);
    }
  }
  try {
    delegator.storeAll(toBeStored);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problems storing payment information",module);
    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemStoringReceivedPaymentInformation",locale));
    return "error";
  }
  if (okayToApprove) {
    OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);
  }
  return "success";
}
