{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dispatcher.getDelegator();
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String imageServerPath=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.management.path",delegator),context);
  String imageServerUrl=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.management.url",delegator),context);
  String productId=(String)context.get("productId");
  String contentId=(String)context.get("contentId");
  String dataResourceName=(String)context.get("dataResourceName");
  String width=(String)context.get("sizeWidth");
  String imageType=".jpg";
  int resizeWidth=Integer.parseInt(width);
  int resizeHeight=resizeWidth;
  try {
    BufferedImage bufImg=ImageIO.read(new File(imageServerPath + "/" + productId+ "/"+ dataResourceName));
    double imgHeight=bufImg.getHeight();
    double imgWidth=bufImg.getWidth();
    if (dataResourceName.lastIndexOf(".") > 0 && dataResourceName.lastIndexOf(".") < dataResourceName.length()) {
      imageType=dataResourceName.substring(dataResourceName.lastIndexOf("."));
    }
    String filenameToUse=dataResourceName.substring(0,dataResourceName.length() - 4) + "-" + resizeWidth+ imageType;
    if (dataResourceName.length() > 3) {
      String mimeType=dataResourceName.substring(dataResourceName.length() - 3,dataResourceName.length());
      Map<String,Object> resultResize=resizeImage(bufImg,imgHeight,imgWidth,resizeHeight,resizeWidth);
      ImageIO.write((RenderedImage)resultResize.get("bufferedImage"),mimeType,new File(imageServerPath + "/" + productId+ "/"+ filenameToUse));
      Map<String,Object> contentThumb=new HashMap<String,Object>();
      contentThumb.put("contentTypeId","DOCUMENT");
      contentThumb.put("userLogin",userLogin);
      Map<String,Object> contentThumbResult=new HashMap<String,Object>();
      try {
        contentThumbResult=dispatcher.runSync("createContent",contentThumb);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      String contentIdThumb=(String)contentThumbResult.get("contentId");
      String imageUrlThumb=imageServerUrl + "/" + productId+ "/"+ filenameToUse;
      createContentAndDataResource(dctx,userLogin,filenameToUse,imageUrlThumb,contentIdThumb,"image/jpeg");
      Map<String,Object> createContentAssocMap=new HashMap<String,Object>();
      createContentAssocMap.put("contentAssocTypeId","IMAGE_THUMBNAIL");
      createContentAssocMap.put("contentId",contentId);
      createContentAssocMap.put("contentIdTo",contentIdThumb);
      createContentAssocMap.put("userLogin",userLogin);
      createContentAssocMap.put("mapKey",width);
      try {
        dispatcher.runSync("createContentAssoc",createContentAssocMap);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
    }
  }
 catch (  Exception e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  String successMsg=UtilProperties.getMessage(resource,"ProductCreateNewThumbnailSizeSuccessful",locale);
  return ServiceUtil.returnSuccess(successMsg);
}
