{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  OrderReadHelper orh=null;
  try {
    GenericValue orderHeader=paymentPreference.getRelatedOne("OrderHeader");
    if (orderHeader != null)     orh=new OrderReadHelper(orderHeader);
  }
 catch (  GenericEntityException e) {
    throw new GeneralException("Problems getting OrderHeader; cannot re-auth the payment",e);
  }
  if (orh == null) {
    throw new GeneralException("No order found for payment preference #" + paymentPreference.get("orderPaymentPreferenceId"));
  }
  if (amount == null) {
    amount=ZERO;
  }
  if (amount.compareTo(ZERO) == 0) {
    amount=paymentPreference.getBigDecimal("maxAmount");
    Debug.logInfo("resetting payment amount from 0.00 to correctMax amount",module);
  }
  Debug.logInfo("reauth with amount: " + amount,module);
  Map<String,Object> authPayRes=authPayment(dispatcher,userLogin,orh,paymentPreference,amount,true,null);
  if (authPayRes == null) {
    throw new GeneralException("Null result returned from payment re-authorization");
  }
  Boolean authResp=(Boolean)authPayRes.get("authResult");
  Boolean capResp=(Boolean)authPayRes.get("captureResult");
  if (authResp != null && Boolean.TRUE.equals(authResp)) {
    GenericValue authTrans=processAuthRetryResult(dctx,authPayRes,userLogin,paymentPreference);
    if (capResp != null && capResp.booleanValue()) {
      processCaptureResult(dctx,result,userLogin,paymentPreference,locale);
    }
 else {
      Map<String,Object> capPayRes=capturePayment(dctx,userLogin,orh,paymentPreference,amount,authTrans,locale);
      if (capPayRes == null) {
        throw new GeneralException("Problems trying to capture payment (null result)");
      }
      Boolean capPayResp=(Boolean)capPayRes.get("captureResult");
      if (capPayResp != null && capPayResp.booleanValue()) {
        processCaptureResult(dctx,capPayRes,userLogin,paymentPreference,locale);
      }
 else {
        throw new GeneralException("Capture of authorized payment failed");
      }
    }
  }
 else {
    throw new GeneralException("Payment re-authorization failed");
  }
}
