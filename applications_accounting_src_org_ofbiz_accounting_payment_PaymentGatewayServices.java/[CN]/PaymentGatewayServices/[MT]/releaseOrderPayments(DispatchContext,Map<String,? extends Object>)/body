{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  GenericValue paymentPref=null;
  try {
    paymentPref=delegator.findOne("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId),false);
  }
 catch (  GenericEntityException e) {
    String errMsg="Problem getting OrderPaymentPreference for orderPaymentPreferenceId " + orderPaymentPreferenceId;
    Debug.logWarning(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (paymentPref == null) {
    String errMsg="Could not find OrderPaymentPreference with orderPaymentPreferenceId: " + orderPaymentPreferenceId;
    Debug.logWarning(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  String orderId=paymentPref.getString("orderId");
  List<GenericValue> paymentPrefs=null;
  try {
    List<EntityExpr> othExpr=UtilMisc.toList(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"EFT_ACCOUNT"));
    othExpr.add(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"GIFT_CARD"));
    othExpr.add(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"FIN_ACCOUNT"));
    EntityCondition con1=EntityCondition.makeCondition(othExpr,EntityJoinOperator.OR);
    EntityCondition statExpr=EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_SETTLED");
    EntityCondition con2=EntityCondition.makeCondition(UtilMisc.toList(con1,statExpr),EntityOperator.AND);
    EntityCondition authExpr=EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_AUTHORIZED");
    EntityCondition con3=EntityCondition.makeCondition(UtilMisc.toList(con2,authExpr),EntityOperator.OR);
    EntityExpr orderExpr=EntityCondition.makeCondition("orderId",EntityOperator.EQUALS,orderId);
    EntityCondition con4=EntityCondition.makeCondition(UtilMisc.toList(con3,orderExpr),EntityOperator.AND);
    paymentPrefs=delegator.findList("OrderPaymentPreference",con4,null,null,null,false);
  }
 catch (  GenericEntityException gee) {
    Debug.logError(gee,"Problems getting entity record(s), see stack trace",module);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not get order information (" + gee.toString() + ").");
    return result;
  }
  if (paymentPrefs.size() == 0) {
    Debug.logWarning("No OrderPaymentPreference records available for release",module);
    result.put("processResult","COMPLETE");
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    return result;
  }
  List<GenericValue> finished=FastList.newInstance();
  Iterator<GenericValue> payments=paymentPrefs.iterator();
  while (payments.hasNext()) {
    paymentPref=(GenericValue)payments.next();
    Map<String,Object> releaseContext=UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreferenceId",paymentPref.getString("orderPaymentPreferenceId"));
    Map<String,Object> releaseResult=null;
    try {
      releaseResult=dispatcher.runSync("releaseOrderPaymentPreference",releaseContext);
    }
 catch (    GenericServiceException e) {
      String errMsg="Problem calling releaseOrderPaymentPreference service for orderPaymentPreferenceId" + paymentPref.getString("orderPaymentPreferenceId");
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
    if (ServiceUtil.isError(releaseResult)) {
      Debug.logError(ServiceUtil.getErrorMessage(releaseResult),module);
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));
    }
 else     if (!ServiceUtil.isFailure(releaseResult)) {
      finished.add(paymentPref);
    }
  }
  result=ServiceUtil.returnSuccess();
  if (finished.size() == paymentPrefs.size()) {
    result.put("processResult","COMPLETE");
  }
 else {
    result.put("processResult","FAILED");
  }
  return result;
}
