{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  BigDecimal amount=(BigDecimal)context.get("amount");
  Locale locale=(Locale)context.get("locale");
  GenericValue orderPaymentPreference=null;
  try {
    orderPaymentPreference=delegator.findOne("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId),false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);
  }
  Map<String,Object> refundResponse=null;
  try {
    Map<String,Object> serviceContext=FastMap.newInstance();
    serviceContext.put("orderPaymentPreference",orderPaymentPreference);
    serviceContext.put("refundAmount",amount);
    serviceContext.put("userLogin",userLogin);
    refundResponse=dispatcher.runSync("refundPayment",serviceContext,TX_TIME,true);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Problem refunding payment through processor",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentRefundError",locale));
  }
  refundResponse.putAll(ServiceUtil.returnSuccess("Payment #" + refundResponse.get("paymentId") + " is refunded successfully with amount "+ refundResponse.get("refundAmount")+ " for manual transaction."));
  return refundResponse;
}
