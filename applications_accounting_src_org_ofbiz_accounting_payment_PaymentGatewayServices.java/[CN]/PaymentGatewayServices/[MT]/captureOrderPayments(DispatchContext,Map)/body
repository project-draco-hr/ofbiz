{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  String invoiceId=(String)context.get("invoiceId");
  String billingAccountId=(String)context.get("billingAccountId");
  Double captureAmount=(Double)context.get("captureAmount");
  BigDecimal amountToCapture=new BigDecimal(captureAmount.doubleValue());
  amountToCapture=amountToCapture.setScale(2,BigDecimal.ROUND_HALF_UP);
  GenericValue orderHeader=null;
  List paymentPrefs=null;
  List paymentPrefsBa=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
    Map lookupMap=UtilMisc.toMap("orderId",orderId,"statusId","PAYMENT_AUTHORIZED");
    List orderList=UtilMisc.toList("-maxAmount");
    paymentPrefs=delegator.findByAnd("OrderPaymentPreference",lookupMap,orderList);
    if (UtilValidate.isNotEmpty(billingAccountId)) {
      lookupMap=UtilMisc.toMap("orderId",orderId,"paymentMethodTypeId","EXT_BILLACT","statusId","PAYMENT_NOT_RECEIVED");
      paymentPrefsBa=delegator.findByAnd("OrderPaymentPreference",lookupMap,orderList);
    }
  }
 catch (  GenericEntityException gee) {
    Debug.logError(gee,"Problems getting entity record(s), see stack trace",module);
    return ServiceUtil.returnError("ERROR: Could not get order information (" + gee.toString() + ").");
  }
  if (orderHeader == null) {
    return ServiceUtil.returnError("Could not find OrderHeader with orderId: " + orderId + "; not processing payments.");
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  BigDecimal orderGrandTotal=orh.getOrderGrandTotalBd();
  orderGrandTotal=orderGrandTotal.setScale(2,BigDecimal.ROUND_HALF_UP);
  BigDecimal totalPayments=PaymentWorker.getPaymentsTotal(orh.getOrderPayments());
  totalPayments=totalPayments.setScale(2,BigDecimal.ROUND_HALF_UP);
  BigDecimal remainingTotalBd=orderGrandTotal.subtract(totalPayments);
  if (Debug.infoOn())   Debug.logInfo("The Remaining Total for order: " + orderId + " is: "+ remainingTotalBd,module);
  amountToCapture=amountToCapture.min(remainingTotalBd);
  if (Debug.infoOn())   Debug.logInfo("Actual Expected Capture Amount : " + amountToCapture,module);
  if (UtilValidate.isNotEmpty(paymentPrefsBa)) {
    Iterator paymentsBa=paymentPrefsBa.iterator();
    while (paymentsBa.hasNext()) {
      GenericValue paymentPref=(GenericValue)paymentsBa.next();
      BigDecimal authAmount=paymentPref.getBigDecimal("maxAmount");
      if (authAmount == null)       authAmount=new BigDecimal(0.00);
      authAmount=authAmount.setScale(2,BigDecimal.ROUND_HALF_UP);
      if (authAmount.compareTo(ZERO) == 0) {
        Debug.logInfo("Nothing to capture; authAmount = 0",module);
        continue;
      }
      BigDecimal amountThisCapture=amountToCapture.min(authAmount);
      amountToCapture=amountToCapture.subtract(amountThisCapture);
      if (UtilValidate.isNotEmpty(invoiceId)) {
        Map captureResult=null;
        try {
          captureResult=dispatcher.runSync("captureBillingAccountPayments",UtilMisc.toMap("invoiceId",invoiceId,"billingAccountId",billingAccountId,"captureAmount",new Double(amountThisCapture.doubleValue()),"orderId",orderId,"userLogin",userLogin));
          if (ServiceUtil.isError(captureResult)) {
            return captureResult;
          }
        }
 catch (        GenericServiceException ex) {
          return ServiceUtil.returnError(ex.getMessage());
        }
        if (captureResult != null) {
          Double amountCaptured=(Double)captureResult.get("captureAmount");
          Debug.logInfo("Amount captured for order [" + orderId + "] from unapplied payments associated to billing account ["+ billingAccountId+ "] is: "+ amountCaptured,module);
          BigDecimal amountCapturedBd=new BigDecimal(amountCaptured.doubleValue());
          amountCapturedBd=amountCapturedBd.setScale(2,BigDecimal.ROUND_HALF_UP);
          if (amountCapturedBd.compareTo(BigDecimal.ZERO) == 0) {
            continue;
          }
          captureResult.put("invoiceId",invoiceId);
          captureResult.put("captureResult",Boolean.TRUE);
          captureResult.put("orderPaymentPreference",paymentPref);
          captureResult.put("captureRefNum","");
          try {
            processResult(dctx,captureResult,userLogin,paymentPref);
          }
 catch (          GeneralException e) {
            Debug.logError(e,"Trouble processing the result; captureResult: " + captureResult,module);
            return ServiceUtil.returnError("Trouble processing the capture results");
          }
          if (authAmount.compareTo(amountCapturedBd) == 1) {
            BigDecimal splitAmount=authAmount.subtract(amountCapturedBd);
            try {
              Map splitCtx=UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreference",paymentPref,"splitAmount",splitAmount);
              dispatcher.addCommitService("processCaptureSplitPayment",splitCtx,true);
            }
 catch (            GenericServiceException e) {
              Debug.logWarning(e,"Problem processing the capture split payment",module);
            }
            Debug.logInfo("Captured: " + amountThisCapture + " Remaining (re-auth): "+ splitAmount,module);
          }
        }
 else {
          Debug.logError("Payment not captured for order [" + orderId + "] from billing account ["+ billingAccountId+ "]",module);
        }
      }
    }
  }
  if (UtilValidate.isNotEmpty(paymentPrefs)) {
    Iterator payments=paymentPrefs.iterator();
    while (payments.hasNext()) {
      GenericValue paymentPref=(GenericValue)payments.next();
      GenericValue authTrans=getAuthTransaction(paymentPref);
      if (authTrans == null) {
        continue;
      }
      GenericValue captureTrans=getCaptureTransaction(paymentPref);
      if (captureTrans != null) {
        Debug.logWarning("Attempt to capture and already captured preference: " + captureTrans,module);
        continue;
      }
      BigDecimal authAmount=authTrans.getBigDecimal("amount");
      if (authAmount == null)       authAmount=new BigDecimal(0.00);
      authAmount=authAmount.setScale(2,BigDecimal.ROUND_HALF_UP);
      if (authAmount.compareTo(ZERO) == 0) {
        Debug.logInfo("Nothing to capture; authAmount = 0",module);
        continue;
      }
      BigDecimal amountThisCapture;
      if (authAmount.compareTo(amountToCapture) >= 0) {
        amountThisCapture=amountToCapture;
      }
 else       if (payments.hasNext()) {
        amountThisCapture=authAmount;
      }
 else {
        Debug.logError("The amount to capture was more then what was authorized; we only captured the authorized amount : " + paymentPref,module);
        amountThisCapture=authAmount;
      }
      Map captureResult=capturePayment(dctx,userLogin,orh,paymentPref,amountThisCapture.doubleValue());
      if (captureResult != null && !ServiceUtil.isError(captureResult)) {
        Double amountCaptured=(Double)captureResult.get("captureAmount");
        if (amountCaptured == null) {
          amountCaptured=(Double)captureResult.get("processAmount");
        }
        BigDecimal amountCapturedBd=new BigDecimal(amountCaptured.doubleValue());
        amountCapturedBd=amountCapturedBd.setScale(2,BigDecimal.ROUND_HALF_UP);
        amountToCapture=amountToCapture.subtract(amountCapturedBd);
        captureResult.put("invoiceId",invoiceId);
        try {
          processResult(dctx,captureResult,userLogin,paymentPref);
        }
 catch (        GeneralException e) {
          Debug.logError(e,"Trouble processing the result; captureResult: " + captureResult,module);
          return ServiceUtil.returnError("Trouble processing the capture results");
        }
        if (authAmount.compareTo(amountCapturedBd) == 1) {
          BigDecimal splitAmount=authAmount.subtract(amountCapturedBd);
          try {
            Map splitCtx=UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreference",paymentPref,"splitAmount",splitAmount);
            dispatcher.addCommitService("processCaptureSplitPayment",splitCtx,true);
          }
 catch (          GenericServiceException e) {
            Debug.logWarning(e,"Problem processing the capture split payment",module);
          }
          Debug.logInfo("Captured: " + amountThisCapture + " Remaining (re-auth): "+ splitAmount,module);
        }
      }
 else {
        Debug.logError("Payment not captured",module);
      }
    }
  }
  if (amountToCapture.compareTo(ZERO) == 1) {
    GenericValue productStore=orh.getProductStore();
    if (!UtilValidate.isEmpty(productStore)) {
      boolean shipIfCaptureFails=UtilValidate.isEmpty(productStore.get("shipIfCaptureFails")) || "Y".equalsIgnoreCase(productStore.getString("shipIfCaptureFails"));
      if (!shipIfCaptureFails) {
        return ServiceUtil.returnError("Cannot ship order because credit card captures were unsuccessful");
      }
    }
    Map result=ServiceUtil.returnSuccess();
    result.put("processResult","FAILED");
    return result;
  }
 else {
    Map result=ServiceUtil.returnSuccess();
    result.put("processResult","COMPLETE");
    return result;
  }
}
