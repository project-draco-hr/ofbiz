{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  Map result=ServiceUtil.returnSuccess();
  GenericValue paymentPref=null;
  try {
    paymentPref=delegator.findByPrimaryKey("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId));
  }
 catch (  GenericEntityException e) {
    String errMsg="Problem getting OrderPaymentPreference for orderPaymentPreferenceId " + orderPaymentPreferenceId;
    Debug.logWarning(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (paymentPref == null) {
    String errMsg="Could not find OrderPaymentPreference with orderPaymentPreferenceId: " + orderPaymentPreferenceId;
    Debug.logWarning(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  GenericValue orderHeader=null;
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",paymentPref.getString("orderId")));
  }
 catch (  GenericEntityException e) {
    String errMsg="Problem getting OrderHeader for orderId " + paymentPref.getString("orderId");
    Debug.logWarning(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (orderHeader == null) {
    String errMsg="Could not find OrderHeader with orderId: " + paymentPref.getString("orderId") + "; not processing payments.";
    Debug.logWarning(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  String currency=orh.getCurrency();
  String serviceName=null;
  String paymentConfig=null;
  GenericValue paymentSettings=getPaymentSettings(orderHeader,paymentPref,RELEASE_SERVICE_TYPE,false);
  if (paymentSettings != null) {
    paymentConfig=paymentSettings.getString("paymentPropertiesPath");
    serviceName=paymentSettings.getString("paymentService");
    if (serviceName == null) {
      String errMsg="No payment release service for - " + paymentPref.getString("paymentMethodTypeId");
      Debug.logWarning(errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
  }
 else {
    String errMsg="No payment release settings found for - " + paymentPref.getString("paymentMethodTypeId");
    Debug.logWarning(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (paymentConfig == null || paymentConfig.length() == 0) {
    paymentConfig="payment.properties";
  }
  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(paymentPref);
  Map releaseContext=new HashMap();
  releaseContext.put("orderPaymentPreference",paymentPref);
  releaseContext.put("releaseAmount",authTransaction.getDouble("amount"));
  releaseContext.put("currency",currency);
  releaseContext.put("paymentConfig",paymentConfig);
  releaseContext.put("userLogin",userLogin);
  Map releaseResult=null;
  try {
    releaseResult=dispatcher.runSync(serviceName,releaseContext,TX_TIME,true);
  }
 catch (  GenericServiceException e) {
    String errMsg="Problem releasing payment";
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (releaseResult != null && !ServiceUtil.isError(releaseResult)) {
    Boolean releaseResponse=(Boolean)releaseResult.get("releaseResult");
    String responseId=delegator.getNextSeqId("PaymentGatewayResponse");
    GenericValue pgResponse=delegator.makeValue("PaymentGatewayResponse",null);
    pgResponse.set("paymentGatewayResponseId",responseId);
    pgResponse.set("paymentServiceTypeEnumId",RELEASE_SERVICE_TYPE);
    pgResponse.set("orderPaymentPreferenceId",paymentPref.get("orderPaymentPreferenceId"));
    pgResponse.set("paymentMethodTypeId",paymentPref.get("paymentMethodTypeId"));
    pgResponse.set("paymentMethodId",paymentPref.get("paymentMethodId"));
    pgResponse.set("transCodeEnumId","PGT_RELEASE");
    pgResponse.set("referenceNum",releaseResult.get("releaseRefNum"));
    pgResponse.set("altReference",releaseResult.get("releaseAltRefNum"));
    pgResponse.set("gatewayCode",releaseResult.get("releaseCode"));
    pgResponse.set("gatewayFlag",releaseResult.get("releaseFlag"));
    pgResponse.set("gatewayMessage",releaseResult.get("releaseMessage"));
    pgResponse.set("transactionDate",UtilDateTime.nowTimestamp());
    try {
      pgResponse.create();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problem storing PaymentGatewayResponse entity; authorization was released! : " + pgResponse,module);
    }
    List messages=(List)releaseResult.get("internalRespMsgs");
    if (messages != null && messages.size() > 0) {
      Iterator i=messages.iterator();
      while (i.hasNext()) {
        GenericValue respMsg=delegator.makeValue("PaymentGatewayRespMsg",null);
        String respMsgId=delegator.getNextSeqId("PaymentGatewayRespMsg");
        String message=(String)i.next();
        respMsg.set("paymentGatewayRespMsgId",respMsgId);
        respMsg.set("paymentGatewayResponseId",responseId);
        respMsg.set("pgrMessage",message);
        try {
          delegator.create(respMsg);
        }
 catch (        GenericEntityException e) {
          String errMsg="Unable to create PaymentGatewayRespMsg record";
          Debug.logError(e,errMsg,module);
          return ServiceUtil.returnError(errMsg);
        }
      }
    }
    if (releaseResponse != null && releaseResponse.booleanValue()) {
      paymentPref.set("statusId","PAYMENT_CANCELLED");
      try {
        paymentPref.store();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problem storing updated payment preference; authorization was released!",module);
      }
      List paymentList=null;
      try {
        paymentList=paymentPref.getRelated("Payment");
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Unable to get Payment records from OrderPaymentPreference : " + paymentPref,module);
      }
      if (paymentList != null) {
        Iterator pi=paymentList.iterator();
        while (pi.hasNext()) {
          GenericValue pay=(GenericValue)pi.next();
          pay.set("statusId","PMNT_CANCELLED");
          try {
            pay.store();
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,"Unable to store Payment : " + pay,module);
          }
        }
      }
    }
 else {
      String errMsg="Release failed for pref : " + paymentPref;
      Debug.logError(errMsg,module);
      result=ServiceUtil.returnFailure(errMsg);
    }
  }
 else   if (ServiceUtil.isError(releaseResult)) {
    saveError(dispatcher,userLogin,paymentPref,releaseResult,RELEASE_SERVICE_TYPE,"PGT_RELEASE");
    result=ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));
  }
  return result;
}
