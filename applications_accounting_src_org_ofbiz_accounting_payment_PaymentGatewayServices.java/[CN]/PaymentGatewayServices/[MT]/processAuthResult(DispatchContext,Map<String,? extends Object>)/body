{
  Delegator delegator=dctx.getDelegator();
  GenericValue orderPaymentPreference=(GenericValue)context.get("orderPaymentPreference");
  Boolean authResult=(Boolean)context.get("authResult");
  String authType=(String)context.get("serviceTypeEnum");
  String currencyUomId=(String)context.get("currencyUomId");
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  Locale locale=(Locale)context.get("locale");
  try {
    orderPaymentPreference.refresh();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (UtilValidate.isEmpty(authType)) {
    authType=("PAYMENT_NOT_AUTH".equals(orderPaymentPreference.getString("statusId"))) ? AUTH_SERVICE_TYPE : REAUTH_SERVICE_TYPE;
  }
  try {
    String paymentMethodId=orderPaymentPreference.getString("paymentMethodId");
    GenericValue paymentMethod=delegator.findByPrimaryKey("PaymentMethod",UtilMisc.toMap("paymentMethodId",paymentMethodId));
    GenericValue creditCard=null;
    if (paymentMethod != null && "CREDIT_CARD".equals(paymentMethod.getString("paymentMethodTypeId"))) {
      creditCard=paymentMethod.getRelatedOne("CreditCard");
    }
    String responseId=delegator.getNextSeqId("PaymentGatewayResponse");
    GenericValue response=delegator.makeValue("PaymentGatewayResponse");
    response.set("paymentGatewayResponseId",responseId);
    response.set("paymentServiceTypeEnumId",authType);
    response.set("orderPaymentPreferenceId",orderPaymentPreference.get("orderPaymentPreferenceId"));
    response.set("paymentMethodTypeId",orderPaymentPreference.get("paymentMethodTypeId"));
    response.set("paymentMethodId",orderPaymentPreference.get("paymentMethodId"));
    response.set("transCodeEnumId","PGT_AUTHORIZE");
    response.set("currencyUomId",currencyUomId);
    response.set("gatewayAvsResult",context.get("avsCode"));
    response.set("gatewayCvResult",context.get("cvCode"));
    response.set("gatewayScoreResult",context.get("scoreCode"));
    BigDecimal processAmount=(BigDecimal)context.get("processAmount");
    response.set("amount",processAmount);
    response.set("referenceNum",context.get("authRefNum"));
    response.set("altReference",context.get("authAltRefNum"));
    response.set("gatewayCode",context.get("authCode"));
    response.set("gatewayFlag",context.get("authFlag"));
    response.set("gatewayMessage",context.get("authMessage"));
    response.set("transactionDate",UtilDateTime.nowTimestamp());
    if (Boolean.TRUE.equals(context.get("resultDeclined")))     response.set("resultDeclined","Y");
    if (Boolean.TRUE.equals(context.get("resultNsf")))     response.set("resultNsf","Y");
    if (Boolean.TRUE.equals(context.get("resultBadExpire")))     response.set("resultBadExpire","Y");
    if (Boolean.TRUE.equals(context.get("resultBadCardNumber")))     response.set("resultBadCardNumber","Y");
    List<GenericValue> messageEntities=FastList.newInstance();
    List<String> messages=UtilGenerics.cast(context.get("internalRespMsgs"));
    if (UtilValidate.isNotEmpty(messages)) {
      Iterator<String> i=messages.iterator();
      while (i.hasNext()) {
        GenericValue respMsg=delegator.makeValue("PaymentGatewayRespMsg");
        String respMsgId=delegator.getNextSeqId("PaymentGatewayRespMsg");
        String message=i.next();
        respMsg.set("paymentGatewayRespMsgId",respMsgId);
        respMsg.set("paymentGatewayResponseId",responseId);
        respMsg.set("pgrMessage",message);
        messageEntities.add(respMsg);
      }
    }
    savePgrAndMsgs(dctx,response,messageEntities);
    if (response.getBigDecimal("amount").compareTo((BigDecimal)context.get("processAmount")) != 0) {
      Debug.logWarning("The authorized amount does not match the max amount : Response - " + response + " : result - "+ context,module);
    }
    if (context != null && authResult.booleanValue()) {
      orderPaymentPreference.set("statusId","PAYMENT_AUTHORIZED");
    }
 else     if (context != null && !authResult.booleanValue()) {
      orderPaymentPreference.set("statusId","PAYMENT_DECLINED");
    }
 else {
      orderPaymentPreference.set("statusId","PAYMENT_ERROR");
    }
    orderPaymentPreference.set("securityCode",null);
    orderPaymentPreference.set("track2",null);
    boolean needsNsfRetry=needsNsfRetry(orderPaymentPreference,context,delegator);
    if (needsNsfRetry) {
      orderPaymentPreference.set("needsNsfRetry","Y");
    }
 else {
      orderPaymentPreference.set("needsNsfRetry","N");
    }
    orderPaymentPreference.store();
    if (!authResult.booleanValue()) {
      if (creditCard != null) {
        Long consecutiveFailedAuths=creditCard.getLong("consecutiveFailedAuths");
        if (consecutiveFailedAuths == null) {
          creditCard.set("consecutiveFailedAuths",Long.valueOf(1));
        }
 else {
          creditCard.set("consecutiveFailedAuths",Long.valueOf(consecutiveFailedAuths.longValue() + 1));
        }
        creditCard.set("lastFailedAuthDate",nowTimestamp);
        if (Boolean.TRUE.equals(context.get("resultNsf"))) {
          Long consecutiveFailedNsf=creditCard.getLong("consecutiveFailedNsf");
          if (consecutiveFailedNsf == null) {
            creditCard.set("consecutiveFailedNsf",Long.valueOf(1));
          }
 else {
            creditCard.set("consecutiveFailedNsf",Long.valueOf(consecutiveFailedNsf.longValue() + 1));
          }
          creditCard.set("lastFailedNsfDate",nowTimestamp);
        }
        creditCard.store();
      }
    }
    if (authResult.booleanValue()) {
      if ((creditCard != null) && (creditCard.get("lastFailedAuthDate") != null)) {
        creditCard.set("consecutiveFailedAuths",Long.valueOf(0));
        creditCard.set("lastFailedAuthDate",null);
        creditCard.set("consecutiveFailedNsf",Long.valueOf(0));
        creditCard.set("lastFailedNsfDate",null);
        creditCard.store();
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error updating payment status information: " + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage("AccountingUiLabels","AccountingPaymentStatusUpdatingError",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  return ServiceUtil.returnSuccess();
}
