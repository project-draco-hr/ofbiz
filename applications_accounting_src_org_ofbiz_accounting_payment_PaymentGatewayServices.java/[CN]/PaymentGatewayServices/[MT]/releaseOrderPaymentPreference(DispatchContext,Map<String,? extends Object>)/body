{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  Locale locale=(Locale)context.get("locale");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  GenericValue paymentPref=null;
  try {
    paymentPref=delegator.findByPrimaryKey("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Problem getting OrderPaymentPreference for orderPaymentPreferenceId " + orderPaymentPreferenceId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);
  }
  if (paymentPref == null) {
    Debug.logWarning("Could not find OrderPaymentPreference with orderPaymentPreferenceId: " + orderPaymentPreferenceId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);
  }
  GenericValue orderHeader=null;
  String orderId=paymentPref.getString("orderId");
  try {
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,"Problem getting OrderHeader for orderId " + orderId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));
  }
  if (orderHeader == null) {
    Debug.logWarning("Could not find OrderHeader with orderId: " + orderId + "; not processing payments.",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  String currency=orh.getCurrency();
  String serviceName=null;
  String paymentConfig=null;
  String paymentGatewayConfigId=null;
  GenericValue paymentSettings=getPaymentSettings(orderHeader,paymentPref,RELEASE_SERVICE_TYPE,false);
  if (paymentSettings != null) {
    String customMethodId=paymentSettings.getString("paymentCustomMethodId");
    if (UtilValidate.isNotEmpty(customMethodId)) {
      serviceName=getPaymentCustomMethod(orh.getOrderHeader().getDelegator(),customMethodId);
    }
    if (UtilValidate.isEmpty(serviceName)) {
      serviceName=paymentSettings.getString("paymentService");
    }
    paymentConfig=paymentSettings.getString("paymentPropertiesPath");
    paymentGatewayConfigId=paymentSettings.getString("paymentGatewayConfigId");
    if (serviceName == null) {
      Debug.logWarning("No payment release service for - " + paymentPref.getString("paymentMethodTypeId"),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("paymentMethodTypeId"));
    }
  }
 else {
    Debug.logWarning("No payment release settings found for - " + paymentPref.getString("paymentMethodTypeId"),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("paymentMethodTypeId"));
  }
  if (UtilValidate.isEmpty(paymentConfig)) {
    paymentConfig="payment.properties";
  }
  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(paymentPref);
  Map<String,Object> releaseContext=FastMap.newInstance();
  releaseContext.put("orderPaymentPreference",paymentPref);
  releaseContext.put("releaseAmount",authTransaction.getBigDecimal("amount"));
  releaseContext.put("currency",currency);
  releaseContext.put("paymentConfig",paymentConfig);
  releaseContext.put("paymentGatewayConfigId",paymentGatewayConfigId);
  releaseContext.put("userLogin",userLogin);
  Map<String,Object> releaseResult=null;
  try {
    releaseResult=dispatcher.runSync(serviceName,releaseContext,TX_TIME,true);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Problem releasing payment",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale));
  }
  if (releaseResult != null && !ServiceUtil.isError(releaseResult)) {
    Map<String,Object> releaseResRes;
    try {
      ModelService model=dctx.getModelService("processReleaseResult");
      releaseResult.put("orderPaymentPreference",paymentPref);
      releaseResult.put("userLogin",userLogin);
      Map<String,Object> resCtx=model.makeValid(releaseResult,ModelService.IN_PARAM);
      releaseResRes=dispatcher.runSync(model.name,resCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Trouble processing the release results: " + e.getMessage(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + e.getMessage());
    }
    if (releaseResRes != null && ServiceUtil.isError(releaseResRes)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResRes));
    }
  }
 else   if (ServiceUtil.isError(releaseResult)) {
    saveError(dispatcher,userLogin,paymentPref,releaseResult,RELEASE_SERVICE_TYPE,"PGT_RELEASE");
    result=ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));
  }
  return result;
}
