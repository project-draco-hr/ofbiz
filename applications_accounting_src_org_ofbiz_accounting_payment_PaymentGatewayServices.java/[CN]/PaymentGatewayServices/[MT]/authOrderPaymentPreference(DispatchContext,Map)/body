{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  Double overrideAmount=(Double)context.get("overrideAmount");
  if (overrideAmount != null) {
    if (overrideAmount.doubleValue() < 0)     return ServiceUtil.returnError("Amount entered (" + overrideAmount + ") is negative.");
    if (overrideAmount.doubleValue() == 0)     return ServiceUtil.returnError("Amount entered (" + overrideAmount + ") is zero.");
  }
  GenericValue orderHeader=null;
  GenericValue orderPaymentPreference=null;
  try {
    orderPaymentPreference=delegator.findByPrimaryKey("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId));
    orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Problems getting required information: orderPaymentPreference [" + orderPaymentPreferenceId + "]");
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  BigDecimal orderGrandTotal=orh.getOrderGrandTotalBd();
  orderGrandTotal=orderGrandTotal.setScale(2,BigDecimal.ROUND_HALF_UP);
  double totalRemaining=orderGrandTotal.doubleValue();
  Long procAttempt=orderPaymentPreference.getLong("processAttempt");
  if (procAttempt == null) {
    procAttempt=new Long(0);
  }
  orderPaymentPreference.set("processAttempt",new Long(procAttempt.longValue() + 1));
  try {
    orderPaymentPreference.store();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Unable to update OrderPaymentPreference record!");
  }
  boolean reAuth=false;
  if (orderPaymentPreference.get("statusId") != null && "PAYMENT_AUTHORIZED".equals(orderPaymentPreference.getString("statusId"))) {
    reAuth=true;
  }
  Double transAmount=null;
  if (overrideAmount != null) {
    transAmount=overrideAmount;
  }
 else {
    transAmount=orderPaymentPreference.getDouble("maxAmount");
  }
  Map results=UtilMisc.toMap(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS,"finished",Boolean.FALSE,"errors",Boolean.FALSE);
  if ((transAmount != null) && (transAmount.doubleValue() <= 0)) {
    return results;
  }
  try {
    Map processorResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,overrideAmount);
    if (processorResult != null) {
      if (processorResult.get("customerRespMsgs") != null) {
        results.put("messages",processorResult.get("customerRespMsgs"));
      }
      Double thisAmount=(Double)processorResult.get("processAmount");
      try {
        boolean processResult=processResult(dctx,processorResult,userLogin,orderPaymentPreference);
        if (processResult) {
          results.put("processAmount",thisAmount);
          results.put("finished",Boolean.TRUE);
        }
 else {
        }
      }
 catch (      GeneralException e) {
        String errMsg="Error saving and processing payment authorization results: " + e.toString();
        Debug.logError(e,errMsg + "; processorResult: " + processorResult,module);
        results.put(ModelService.ERROR_MESSAGE,errMsg);
        results.put("errors",Boolean.TRUE);
      }
    }
 else {
      String errMsg="Invalid Order Payment Preference: maxAmount is 0";
      Debug.logInfo(errMsg,module);
      results.put("errors",Boolean.TRUE);
      results.put(ModelService.ERROR_MESSAGE,errMsg);
      orderPaymentPreference.set("statusId","PAYMENT_CANCELLED");
      try {
        orderPaymentPreference.store();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"ERROR: Problem setting OrderPaymentPreference status to CANCELLED",module);
      }
    }
    return results;
  }
 catch (  GeneralException e) {
    String errMsg="Error processing payment authorization: " + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
}
