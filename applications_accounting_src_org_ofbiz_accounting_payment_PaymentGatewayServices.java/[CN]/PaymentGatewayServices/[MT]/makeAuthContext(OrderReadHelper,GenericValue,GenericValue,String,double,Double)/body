{
  Map processContext=new HashMap();
  GenericValue orderHeader=orh.getOrderHeader();
  if (orderHeader != null) {
    String visitId=orderHeader.getString("visitId");
    GenericValue visit=null;
    if (visitId != null) {
      try {
        visit=orderHeader.getDelegator().findByPrimaryKey("Visit",UtilMisc.toMap("visitId",visitId));
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
    }
    if (visit != null && visit.get("clientIpAddress") != null) {
      processContext.put("customerIpAddress",visit.getString("clientIpAddress"));
    }
  }
  processContext.put("userLogin",userLogin);
  processContext.put("orderId",orh.getOrderId());
  processContext.put("orderItems",orh.getOrderItems());
  processContext.put("shippingAddress",EntityUtil.getFirst(orh.getShippingLocations()));
  processContext.put("paymentConfig",paymentConfig);
  processContext.put("currency",orh.getCurrency());
  processContext.put("orderPaymentPreference",paymentPreference);
  if (paymentPreference.get("securityCode") != null) {
    processContext.put("cardSecurityCode",paymentPreference.get("securityCode"));
  }
  getBillingInformation(orh,paymentPreference,processContext);
  double thisAmount=totalRemaining;
  if (overrideAmount != null) {
    thisAmount=overrideAmount.doubleValue();
  }
 else   if (paymentPreference.get("maxAmount") != null) {
    thisAmount=paymentPreference.getDouble("maxAmount").doubleValue();
  }
  if (thisAmount > totalRemaining) {
    thisAmount=totalRemaining;
  }
  String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
  DecimalFormat formatter=new DecimalFormat(currencyFormat);
  String amountString=formatter.format(thisAmount);
  Double processAmount=null;
  try {
    processAmount=new Double(formatter.parse(amountString).doubleValue());
  }
 catch (  ParseException e) {
    Debug.logError(e,"Problems parsing string formatted double to Double",module);
    throw new GeneralException("ParseException in number format",e);
  }
  if (Debug.verboseOn())   Debug.logVerbose("Charging amount: " + processAmount,module);
  processContext.put("processAmount",processAmount);
  return processContext;
}
