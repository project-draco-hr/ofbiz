{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  BigDecimal overrideAmount=(BigDecimal)context.get("overrideAmount");
  if (overrideAmount != null) {
    if (overrideAmount.compareTo(BigDecimal.ZERO) < 0) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentAmountIsNegative",UtilMisc.toMap("overrideAmount",overrideAmount),locale));
    }
    if (overrideAmount.compareTo(BigDecimal.ZERO) == 0) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentAmountIsZero",UtilMisc.toMap("overrideAmount",overrideAmount),locale));
    }
  }
  GenericValue orderHeader=null;
  GenericValue orderPaymentPreference=null;
  try {
    orderPaymentPreference=delegator.findOne("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId),false);
    orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader",false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  BigDecimal totalRemaining=orh.getOrderGrandTotal();
  Long procAttempt=orderPaymentPreference.getLong("processAttempt");
  if (procAttempt == null) {
    procAttempt=Long.valueOf(0);
  }
  orderPaymentPreference.set("processAttempt",Long.valueOf(procAttempt.longValue() + 1));
  try {
    orderPaymentPreference.store();
    orderPaymentPreference.refresh();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale));
  }
  boolean reAuth=false;
  if (orderPaymentPreference.get("statusId") != null && "PAYMENT_AUTHORIZED".equals(orderPaymentPreference.getString("statusId"))) {
    reAuth=true;
  }
  BigDecimal transAmount=null;
  if (overrideAmount != null) {
    transAmount=overrideAmount;
  }
 else {
    transAmount=orderPaymentPreference.getBigDecimal("maxAmount");
  }
  transAmount=transAmount.setScale(decimals,rounding);
  if ((transAmount != null) && (transAmount.compareTo(BigDecimal.ZERO) <= 0)) {
    Map<String,Object> results=ServiceUtil.returnSuccess();
    results.put("finished",Boolean.TRUE);
    results.put("errors",Boolean.FALSE);
    return results;
  }
  try {
    Map<String,Object> authPaymentResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);
    if (authPaymentResult != null) {
      BigDecimal thisAmount=(BigDecimal)authPaymentResult.get("processAmount");
      try {
        boolean processResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);
        if (processResult) {
          Map<String,Object> results=ServiceUtil.returnSuccess();
          results.put("messages",authPaymentResult.get("customerRespMsgs"));
          results.put("processAmount",thisAmount);
          results.put("finished",Boolean.TRUE);
          results.put("errors",Boolean.FALSE);
          results.put("authCode",authPaymentResult.get("authCode"));
          return results;
        }
 else {
          boolean needsNsfRetry=needsNsfRetry(orderPaymentPreference,authPaymentResult,delegator);
          if (needsNsfRetry) {
          }
          if (!needsNsfRetry) {
            if (UtilValidate.isNotEmpty(orderHeader.getString("autoOrderShoppingListId"))) {
              GenericValue productStore=orderHeader.getRelatedOne("ProductStore",false);
              if ("Y".equals(productStore.getString("autoOrderCcTryOtherCards"))) {
                List<GenericValue> otherPaymentMethodAndCreditCardList=null;
                String billToPartyId=null;
                GenericValue billToParty=orh.getBillToParty();
                if (billToParty != null) {
                  billToPartyId=billToParty.getString("partyId");
                }
 else {
                }
                if (UtilValidate.isNotEmpty(billToPartyId)) {
                  otherPaymentMethodAndCreditCardList=delegator.findByAnd("PaymentMethodAndCreditCard",UtilMisc.toMap("partyId",billToPartyId,"paymentMethodTypeId","CREDIT_CARD"),null,false);
                  otherPaymentMethodAndCreditCardList=EntityUtil.filterByDate(otherPaymentMethodAndCreditCardList,true);
                }
                if (UtilValidate.isNotEmpty(otherPaymentMethodAndCreditCardList)) {
                  for (                  GenericValue otherPaymentMethodAndCreditCard : otherPaymentMethodAndCreditCardList) {
                    orderPaymentPreference.set("paymentMethodId",otherPaymentMethodAndCreditCard.getString("paymentMethodId"));
                    Map<String,Object> authRetryResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);
                    try {
                      boolean processRetryResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);
                      if (processRetryResult) {
                        orderPaymentPreference.store();
                        Map<String,Object> results=ServiceUtil.returnSuccess();
                        results.put("messages",authRetryResult.get("customerRespMsgs"));
                        results.put("processAmount",thisAmount);
                        results.put("finished",Boolean.TRUE);
                        results.put("errors",Boolean.FALSE);
                        return results;
                      }
                    }
 catch (                    GeneralException e) {
                      String errMsg="Error saving and processing payment authorization results: " + e.toString();
                      Debug.logError(e,errMsg + "; authRetryResult: " + authRetryResult,module);
                      Map<String,Object> results=ServiceUtil.returnSuccess();
                      results.put(ModelService.ERROR_MESSAGE,errMsg);
                      results.put("finished",Boolean.FALSE);
                      results.put("errors",Boolean.TRUE);
                      return results;
                    }
                  }
                }
              }
            }
          }
          Map<String,Object> results=ServiceUtil.returnSuccess();
          results.put("messages",authPaymentResult.get("customerRespMsgs"));
          results.put("finished",Boolean.FALSE);
          results.put("errors",Boolean.FALSE);
          return results;
        }
      }
 catch (      GeneralException e) {
        String errMsg="Error saving and processing payment authorization results: " + e.toString();
        Debug.logError(e,errMsg + "; authPaymentResult: " + authPaymentResult,module);
        Map<String,Object> results=ServiceUtil.returnSuccess();
        results.put(ModelService.ERROR_MESSAGE,errMsg);
        results.put("finished",Boolean.FALSE);
        results.put("errors",Boolean.TRUE);
        return results;
      }
    }
 else {
      String errMsg="Invalid Order Payment Preference: maxAmount is 0";
      Debug.logInfo(errMsg,module);
      Map<String,Object> results=ServiceUtil.returnSuccess();
      results.put("finished",Boolean.FALSE);
      results.put("errors",Boolean.TRUE);
      results.put(ModelService.ERROR_MESSAGE,errMsg);
      orderPaymentPreference.set("statusId","PAYMENT_CANCELLED");
      try {
        orderPaymentPreference.store();
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"ERROR: Problem setting OrderPaymentPreference status to CANCELLED",module);
      }
      return results;
    }
  }
 catch (  GeneralException e) {
    Debug.logError(e,"Error processing payment authorization",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentCannotBeAuthorized",UtilMisc.toMap("errroString",e.toString()),locale));
  }
}
