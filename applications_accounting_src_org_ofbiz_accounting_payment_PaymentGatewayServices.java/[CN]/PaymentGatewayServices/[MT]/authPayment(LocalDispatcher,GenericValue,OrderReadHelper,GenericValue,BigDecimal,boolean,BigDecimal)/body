{
  String paymentConfig=null;
  String serviceName=null;
  String paymentGatewayConfigId=null;
  String serviceType=AUTH_SERVICE_TYPE;
  if (reauth) {
    serviceType=REAUTH_SERVICE_TYPE;
  }
  GenericValue paymentSettings=getPaymentSettings(orh.getOrderHeader(),paymentPreference,serviceType,false);
  if (paymentSettings != null) {
    String customMethodId=paymentSettings.getString("paymentCustomMethodId");
    if (UtilValidate.isNotEmpty(customMethodId)) {
      serviceName=getPaymentCustomMethod(orh.getOrderHeader().getDelegator(),customMethodId);
    }
    if (UtilValidate.isEmpty(serviceName)) {
      serviceName=paymentSettings.getString("paymentService");
    }
    paymentConfig=paymentSettings.getString("paymentPropertiesPath");
    paymentGatewayConfigId=paymentSettings.getString("paymentGatewayConfigId");
  }
 else {
    throw new GeneralException("Could not find any valid payment settings for order with ID [" + orh.getOrderId() + "], and payment operation (serviceType) ["+ serviceType+ "]");
  }
  if (serviceName == null) {
    throw new GeneralException("Invalid payment processor, serviceName is null: " + paymentSettings);
  }
  Map<String,Object> processContext=FastMap.newInstance();
  GenericValue orderHeader=orh.getOrderHeader();
  String visitId=orderHeader.getString("visitId");
  GenericValue visit=null;
  if (visitId != null) {
    try {
      visit=orderHeader.getDelegator().findByPrimaryKey("Visit",UtilMisc.toMap("visitId",visitId));
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
  }
  if (visit != null && visit.get("clientIpAddress") != null) {
    processContext.put("customerIpAddress",visit.getString("clientIpAddress"));
  }
  GenericValue productStore=orderHeader.getRelatedOne("ProductStore");
  processContext.put("userLogin",userLogin);
  processContext.put("orderId",orh.getOrderId());
  processContext.put("orderItems",orh.getOrderItems());
  processContext.put("shippingAddress",EntityUtil.getFirst(orh.getShippingLocations()));
  processContext.put("paymentConfig",paymentConfig);
  processContext.put("paymentGatewayConfigId",paymentGatewayConfigId);
  processContext.put("currency",orh.getCurrency());
  processContext.put("orderPaymentPreference",paymentPreference);
  if (paymentPreference.get("securityCode") != null) {
    processContext.put("cardSecurityCode",paymentPreference.get("securityCode"));
  }
  getBillingInformation(orh,paymentPreference,processContext);
  BigDecimal processAmount=totalRemaining;
  if (overrideAmount != null) {
    processAmount=overrideAmount;
  }
 else   if (paymentPreference.get("maxAmount") != null) {
    processAmount=paymentPreference.getBigDecimal("maxAmount");
  }
  boolean replacementOrderFlag=isReplacementOrder(orderHeader);
  if (!replacementOrderFlag && processAmount.compareTo(totalRemaining) > 0) {
    processAmount=totalRemaining;
  }
  processAmount=processAmount.setScale(decimals,rounding);
  if (Debug.verboseOn())   Debug.logVerbose("Charging amount: " + processAmount,module);
  processContext.put("processAmount",processAmount);
  Map<String,Object> processorResult=null;
  try {
    GenericValue creditCard=(GenericValue)processContext.get("creditCard");
    boolean tryOtherExpDates="Y".equals(productStore.getString("autoOrderCcTryExp")) && creditCard != null && UtilValidate.isNotEmpty(orderHeader.getString("autoOrderShoppingListId"));
    if (!tryOtherExpDates || UtilValidate.isDateAfterToday(creditCard.getString("expireDate"))) {
      processorResult=dispatcher.runSync(serviceName,processContext,TX_TIME,true);
    }
    if (tryOtherExpDates && (!UtilValidate.isDateAfterToday(creditCard.getString("expireDate")) || (processorResult != null && Boolean.TRUE.equals(processorResult.get("resultBadExpire"))))) {
      String expireDate=creditCard.getString("expireDate");
      int dateSlash1=expireDate.indexOf("/");
      String month=expireDate.substring(0,dateSlash1);
      String year=expireDate.substring(dateSlash1 + 1);
      year=StringUtil.addToNumberString(year,2);
      creditCard.set("expireDate",month + "/" + year);
      processorResult=dispatcher.runSync(serviceName,processContext,TX_TIME,true);
      if (!ServiceUtil.isError(processorResult) && Boolean.TRUE.equals(processorResult.get("resultBadExpire"))) {
        year=StringUtil.addToNumberString(year,1);
        creditCard.set("expireDate",month + "/" + year);
        processorResult=dispatcher.runSync(serviceName,processContext,TX_TIME,true);
      }
      if (!ServiceUtil.isError(processorResult) && Boolean.TRUE.equals(processorResult.get("resultBadExpire"))) {
        year=StringUtil.addToNumberString(year,1);
        creditCard.set("expireDate",month + "/" + year);
        processorResult=dispatcher.runSync(serviceName,processContext,TX_TIME,true);
      }
      if (!ServiceUtil.isError(processorResult) && Boolean.TRUE.equals(processorResult.get("authResult"))) {
        creditCard.store();
      }
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,"Error occurred on: " + serviceName + " => "+ processContext,module);
    throw new GeneralException("Problems invoking payment processor! Will retry later. Order ID is: [" + orh.getOrderId() + "",e);
  }
  if (processorResult != null) {
    if (ServiceUtil.isError(processorResult)) {
      Debug.logError("Processor failed; will retry later: " + processorResult.get(ModelService.ERROR_MESSAGE),module);
      saveError(dispatcher,userLogin,paymentPreference,processorResult,AUTH_SERVICE_TYPE,"PGT_AUTHORIZE");
      return null;
    }
    String payToPartyId=getPayToPartyId(orh.getOrderHeader());
    processorResult.put("payToPartyId",payToPartyId);
    processorResult.put("paymentSettings",paymentSettings);
    processorResult.put("currencyUomId",orh.getCurrency());
  }
  return processorResult;
}
