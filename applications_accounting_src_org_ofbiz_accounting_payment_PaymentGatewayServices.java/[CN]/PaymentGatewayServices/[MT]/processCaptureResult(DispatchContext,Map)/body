{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue paymentPreference=(GenericValue)context.get("orderPaymentPreference");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String invoiceId=(String)context.get("invoiceId");
  String payTo=(String)context.get("payToPartyId");
  Double amount=(Double)context.get("captureAmount");
  String serviceType=(String)context.get("serviceTypeEnum");
  String currencyUomId=(String)context.get("currencyUomId");
  Debug.logInfo("Invoice ID: " + invoiceId,module);
  if (UtilValidate.isEmpty(payTo)) {
    payTo="Company";
  }
  if (UtilValidate.isEmpty(serviceType)) {
    serviceType=CAPTURE_SERVICE_TYPE;
  }
  String responseId=delegator.getNextSeqId("PaymentGatewayResponse");
  GenericValue response=delegator.makeValue("PaymentGatewayResponse",null);
  response.set("paymentGatewayResponseId",responseId);
  response.set("paymentServiceTypeEnumId",serviceType);
  response.set("orderPaymentPreferenceId",paymentPreference.get("orderPaymentPreferenceId"));
  response.set("paymentMethodTypeId",paymentPreference.get("paymentMethodTypeId"));
  response.set("paymentMethodId",paymentPreference.get("paymentMethodId"));
  response.set("transCodeEnumId","PGT_CAPTURE");
  response.set("currencyUomId",currencyUomId);
  if (context.get("authRefNum") != null) {
    response.set("subReference",context.get("authRefNum"));
    response.set("altReference",context.get("authAltRefNum"));
  }
 else {
    response.set("altReference",context.get("captureAltRefNum"));
  }
  response.set("amount",amount);
  response.set("referenceNum",context.get("captureRefNum"));
  response.set("gatewayCode",context.get("captureCode"));
  response.set("gatewayFlag",context.get("captureFlag"));
  response.set("gatewayMessage",context.get("captureMessage"));
  response.set("transactionDate",UtilDateTime.nowTimestamp());
  try {
    delegator.create(response);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Error creating response information");
  }
  List messages=(List)context.get("internalRespMsgs");
  if (messages != null && messages.size() > 0) {
    Iterator i=messages.iterator();
    while (i.hasNext()) {
      GenericValue respMsg=delegator.makeValue("PaymentGatewayRespMsg",null);
      String respMsgId=delegator.getNextSeqId("PaymentGatewayRespMsg");
      String message=(String)i.next();
      respMsg.set("paymentGatewayRespMsgId",respMsgId);
      respMsg.set("paymentGatewayResponseId",responseId);
      respMsg.set("pgrMessage",message);
      try {
        delegator.create(respMsg);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError("Error creating response message information");
      }
    }
  }
  String orderId=paymentPreference.getString("orderId");
  List orl=null;
  try {
    orl=delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","BILL_TO_CUSTOMER"));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  GenericValue orderRole=EntityUtil.getFirst(orl);
  Map paymentCtx=UtilMisc.toMap("paymentTypeId","CUSTOMER_PAYMENT");
  paymentCtx.put("paymentMethodTypeId",paymentPreference.get("paymentMethodTypeId"));
  paymentCtx.put("paymentMethodId",paymentPreference.get("paymentMethodId"));
  paymentCtx.put("paymentGatewayResponseId",responseId);
  paymentCtx.put("partyIdTo",payTo);
  paymentCtx.put("partyIdFrom",orderRole.get("partyId"));
  paymentCtx.put("statusId","PMNT_RECEIVED");
  paymentCtx.put("paymentPreferenceId",paymentPreference.get("orderPaymentPreferenceId"));
  paymentCtx.put("amount",amount);
  paymentCtx.put("currencyUomId",currencyUomId);
  paymentCtx.put("userLogin",userLogin);
  paymentCtx.put("paymentRefNum",context.get("captureRefNum"));
  Map payRes=null;
  try {
    payRes=dispatcher.runSync("createPayment",paymentCtx);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Error creating payment record");
  }
  if (payRes != null && ServiceUtil.isError(payRes)) {
    return ServiceUtil.returnError(ServiceUtil.getErrorMessage(payRes));
  }
  String paymentId=(String)payRes.get("paymentId");
  paymentPreference.set("statusId","PAYMENT_SETTLED");
  try {
    paymentPreference.store();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (invoiceId != null) {
    Debug.logInfo("Processing Invoice #" + invoiceId,module);
    Map paCtx=UtilMisc.toMap("paymentId",paymentId,"invoiceId",invoiceId);
    paCtx.put("amountApplied",context.get("captureAmount"));
    paCtx.put("userLogin",userLogin);
    Map paRes=null;
    try {
      paRes=dispatcher.runSync("createPaymentApplication",paCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError("Error creating invoice application");
    }
    if (paRes != null && ServiceUtil.isError(paRes)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(paRes));
    }
  }
  return ServiceUtil.returnSuccess();
}
