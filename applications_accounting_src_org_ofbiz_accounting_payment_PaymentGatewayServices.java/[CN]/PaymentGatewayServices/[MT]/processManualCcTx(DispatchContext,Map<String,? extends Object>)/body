{
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Security security=dctx.getSecurity();
  if (!security.hasEntityPermission("MANUAL","_PAYMENT",userLogin)) {
    Debug.logWarning("**** Security [" + (new Date()).toString() + "]: "+ userLogin.get("userLoginId")+ " attempt to run manual payment transaction!",module);
    return ServiceUtil.returnError("You do not have permission for this transaction.");
  }
  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");
  String paymentMethodTypeId=(String)context.get("paymentMethodTypeId");
  String productStoreId=(String)context.get("productStoreId");
  String transactionType=(String)context.get("transactionType");
  String referenceCode=(String)context.get("referenceCode");
  if (referenceCode == null) {
    referenceCode=Long.valueOf(System.currentTimeMillis()).toString();
  }
  GenericValue paymentPref=null;
  try {
    paymentPref=delegator.findOne("OrderPaymentPreference",UtilMisc.toMap("orderPaymentPreferenceId",orderPaymentPreferenceId),false);
  }
 catch (  GenericEntityException e) {
    String errMsg="Problem getting OrderPaymentPreference for orderPaymentPreferenceId " + orderPaymentPreferenceId;
    Debug.logWarning(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (paymentPref == null) {
    String errMsg="Could not find OrderPaymentPreference with orderPaymentPreferenceId: " + orderPaymentPreferenceId;
    Debug.logWarning(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  GenericValue orderHeader=null;
  String orderId=paymentPref.getString("orderId");
  try {
    orderHeader=delegator.findOne("OrderHeader",UtilMisc.toMap("orderId",orderId),false);
  }
 catch (  GenericEntityException e) {
    String errMsg="Problem getting OrderHeader for orderId " + orderId;
    Debug.logWarning(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  if (orderHeader == null) {
    String errMsg="Could not find OrderHeader with orderId: " + orderId + "; not processing payments.";
    Debug.logWarning(errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  if (!transactionType.equals(CREDIT_SERVICE_TYPE)) {
    return ServiceUtil.returnError("This transaction type is not yet supported.");
  }
  Map<String,Object> requestContext=FastMap.newInstance();
  String paymentService=null;
  String paymentConfig=null;
  String paymentGatewayConfigId=null;
  GenericValue paymentSettings=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStoreId,paymentMethodTypeId,transactionType,false);
  if (paymentSettings == null) {
    return ServiceUtil.returnError("No valid payment settings found for : " + productStoreId + "/"+ transactionType);
  }
 else {
    paymentGatewayConfigId=paymentSettings.getString("paymentGatewayConfigId");
    String customMethodId=paymentSettings.getString("paymentCustomMethodId");
    if (UtilValidate.isNotEmpty(customMethodId)) {
      paymentService=getPaymentCustomMethod(delegator,customMethodId);
    }
    if (UtilValidate.isEmpty(paymentService)) {
      paymentService=paymentSettings.getString("paymentService");
    }
    paymentConfig=paymentSettings.getString("paymentPropertiesPath");
    if (paymentConfig == null) {
      paymentConfig="payment.properties";
    }
    requestContext.put("paymentConfig",paymentConfig);
    requestContext.put("paymentGatewayConfigId",paymentGatewayConfigId);
  }
  if (paymentService == null || (paymentGatewayConfigId == null && paymentConfig == null)) {
    return ServiceUtil.returnError("Invalid product store payment settings");
  }
  if (paymentMethodTypeId.equals("CREDIT_CARD")) {
    GenericValue creditCard=delegator.makeValue("CreditCard");
    creditCard.setAllFields(context,true,null,null);
    if (creditCard.get("firstNameOnCard") == null || creditCard.get("lastNameOnCard") == null || creditCard.get("cardType") == null || creditCard.get("cardNumber") == null) {
      return ServiceUtil.returnError("Credit card is missing required fields.");
    }
    String expMonth=(String)context.get("expMonth");
    String expYear=(String)context.get("expYear");
    String expDate=expMonth + "/" + expYear;
    creditCard.set("expireDate",expDate);
    requestContext.put("creditCard",creditCard);
    requestContext.put("cardSecurityCode",context.get("cardSecurityCode"));
    GenericValue billingAddress=delegator.makeValue("PostalAddress");
    billingAddress.setAllFields(context,true,null,null);
    if (billingAddress.get("address1") == null || billingAddress.get("city") == null || billingAddress.get("postalCode") == null) {
      return ServiceUtil.returnError("Credit card billing address is missing required fields.");
    }
    requestContext.put("billingAddress",billingAddress);
    GenericValue billToEmail=delegator.makeValue("ContactMech");
    billToEmail.set("infoString",context.get("infoString"));
    if (billToEmail.get("infoString") == null) {
      return ServiceUtil.returnError("Email address field cannot be empty.");
    }
    requestContext.put("billToParty",orh.getBillToParty());
    requestContext.put("billToEmail",billToEmail);
    requestContext.put("referenceCode",referenceCode);
    String currency=UtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD");
    requestContext.put("currency",currency);
    requestContext.put("creditAmount",context.get("amount"));
  }
 else {
    return ServiceUtil.returnError("Payment method type : " + paymentMethodTypeId + " is not yet implemented for manual transactions");
  }
  Map<String,Object> response=null;
  try {
    response=dispatcher.runSync(paymentService,requestContext,TX_TIME,true);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Error calling service : " + paymentService + " / "+ requestContext);
  }
  if (response != null && !ServiceUtil.isError(response)) {
    Map<String,Object> responseRes;
    try {
      ModelService model=dctx.getModelService("processCreditResult");
      response.put("orderPaymentPreference",paymentPref);
      response.put("userLogin",userLogin);
      Map<String,Object> resCtx=model.makeValid(response,ModelService.IN_PARAM);
      responseRes=dispatcher.runSync(model.name,resCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError("Trouble processing the release results: " + e.getMessage());
    }
    if (responseRes != null && ServiceUtil.isError(responseRes)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(responseRes));
    }
  }
 else   if (ServiceUtil.isError(response)) {
    saveError(dispatcher,userLogin,paymentPref,response,CREDIT_SERVICE_TYPE,"PGT_CREDIT");
    return ServiceUtil.returnError(ServiceUtil.getErrorMessage(response));
  }
  if (ServiceUtil.isError(response)) {
    return ServiceUtil.returnError(ServiceUtil.makeErrorMessage(response,null,null,null,null));
  }
  String refNum=(String)response.get("creditRefNum");
  String code=(String)response.get("creditCode");
  String msg=(String)response.get("creditMessage");
  Map<String,Object> returnResults=ServiceUtil.returnSuccess("Transaction result [" + msg + "/"+ code+ "] Ref#: "+ refNum);
  returnResults.put("referenceNum",refNum);
  return returnResults;
}
