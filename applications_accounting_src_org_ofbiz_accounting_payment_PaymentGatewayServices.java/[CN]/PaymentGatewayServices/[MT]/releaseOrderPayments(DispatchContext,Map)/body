{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  Map result=new HashMap();
  List paymentPrefs=null;
  try {
    List othExpr=UtilMisc.toList(new EntityExpr("paymentMethodTypeId",EntityOperator.EQUALS,"EFT_ACCOUNT"));
    othExpr.add(new EntityExpr("paymentMethodTypeId",EntityOperator.EQUALS,"CREDIT_CARD"));
    othExpr.add(new EntityExpr("paymentMethodTypeId",EntityOperator.EQUALS,"GIFT_CARD"));
    EntityCondition con1=new EntityConditionList(othExpr,EntityJoinOperator.OR);
    EntityCondition statExpr=new EntityExpr("statusId",EntityOperator.EQUALS,"PAYMENT_SETTLED");
    EntityCondition con2=new EntityConditionList(UtilMisc.toList(con1,statExpr),EntityOperator.AND);
    EntityCondition authExpr=new EntityExpr("statusId",EntityOperator.EQUALS,"PAYMENT_AUTHORIZED");
    EntityCondition con3=new EntityConditionList(UtilMisc.toList(con2,authExpr),EntityOperator.OR);
    EntityExpr orderExpr=new EntityExpr("orderId",EntityOperator.EQUALS,orderId);
    EntityCondition con4=new EntityConditionList(UtilMisc.toList(con3,orderExpr),EntityOperator.AND);
    paymentPrefs=delegator.findByCondition("OrderPaymentPreference",con4,null,null);
  }
 catch (  GenericEntityException gee) {
    Debug.logError(gee,"Problems getting entity record(s), see stack trace",module);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not get order information (" + gee.toString() + ").");
    return result;
  }
  if (paymentPrefs == null || paymentPrefs.size() == 0) {
    Debug.logWarning("No OrderPaymentPreference records available for release",module);
    result.put("processResult","COMPLETE");
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    return result;
  }
  List finished=new ArrayList();
  Iterator payments=paymentPrefs.iterator();
  while (payments.hasNext()) {
    GenericValue paymentPref=(GenericValue)payments.next();
    Map releaseContext=UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreferenceId",paymentPref.getString("orderPaymentPreferenceId"));
    Map releaseResult=null;
    try {
      releaseResult=dispatcher.runSync("releaseOrderPaymentPreference",releaseContext);
    }
 catch (    GenericServiceException e) {
      String errMsg="Problem calling releaseOrderPaymentPreference service for orderPaymentPreferenceId" + paymentPref.getString("orderPaymentPreferenceId");
      Debug.logError(e,errMsg,module);
      return ServiceUtil.returnError(errMsg);
    }
    if (ServiceUtil.isError(releaseResult)) {
      Debug.logError(ServiceUtil.getErrorMessage(releaseResult),module);
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));
    }
 else     if (!ServiceUtil.isFailure(releaseResult)) {
      finished.add(paymentPref);
    }
  }
  result=ServiceUtil.returnSuccess();
  if (finished.size() == paymentPrefs.size()) {
    result.put("processResult","COMPLETE");
  }
 else {
    result.put("processResult","FAILED");
  }
  return result;
}
