{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericValue paymentPref=(GenericValue)context.get("orderPaymentPreference");
  Double refundAmount=(Double)context.get("refundAmount");
  GenericValue orderHeader=null;
  try {
    orderHeader=paymentPref.getRelatedOne("OrderHeader");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot get OrderHeader from OrderPaymentPreference",module);
    return ServiceUtil.returnError("Problems getting OrderHeader from OrderPaymentPreference: " + e.toString());
  }
  OrderReadHelper orh=new OrderReadHelper(orderHeader);
  GenericValue paymentSettings=null;
  if (orderHeader != null) {
    paymentSettings=getPaymentSettings(orderHeader,paymentPref,REFUND_SERVICE_TYPE,false);
  }
  if (paymentSettings != null) {
    String paymentConfig=paymentSettings.getString("paymentPropertiesPath");
    String serviceName=paymentSettings.getString("paymentService");
    if (serviceName != null) {
      Map serviceContext=new HashMap();
      serviceContext.put("orderPaymentPreference",paymentPref);
      serviceContext.put("paymentConfig",paymentConfig);
      serviceContext.put("currency",orh.getCurrency());
      String payToPartyId=null;
      try {
        payToPartyId=getBillingInformation(orh,paymentPref,new HashMap());
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Problems getting billing information",module);
        return ServiceUtil.returnError("Problems getting billing information");
      }
      String currencyFormat=UtilProperties.getPropertyValue("general.properties","currency.decimal.format","##0.00");
      DecimalFormat formatter=new DecimalFormat(currencyFormat);
      String amountString=formatter.format(refundAmount);
      Double processAmount=null;
      try {
        processAmount=new Double(formatter.parse(amountString).doubleValue());
      }
 catch (      ParseException e) {
        Debug.logError(e,"Problem parsing amount using DecimalFormat",module);
        return ServiceUtil.returnError("Refund processor problems; see logs");
      }
      serviceContext.put("refundAmount",processAmount);
      serviceContext.put("userLogin",userLogin);
      Map refundResponse=null;
      try {
        refundResponse=dispatcher.runSync(serviceName,serviceContext,TX_TIME,true);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Problem refunding payment through processor",module);
        return ServiceUtil.returnError("Refund processor problems; see logs");
      }
      if (ServiceUtil.isError(refundResponse)) {
        saveError(dispatcher,userLogin,paymentPref,refundResponse,REFUND_SERVICE_TYPE,"PGT_REFUND");
        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(refundResponse));
      }
      if (paymentConfig == null || paymentConfig.length() == 0) {
        paymentConfig="payment.properties";
      }
      String payFromPartyId=getPayToPartyId(orderHeader);
      String responseId=delegator.getNextSeqId("PaymentGatewayResponse");
      GenericValue response=delegator.makeValue("PaymentGatewayResponse",null);
      response.set("paymentGatewayResponseId",responseId);
      response.set("paymentServiceTypeEnumId",REFUND_SERVICE_TYPE);
      response.set("orderPaymentPreferenceId",paymentPref.get("orderPaymentPreferenceId"));
      response.set("paymentMethodTypeId",paymentPref.get("paymentMethodTypeId"));
      response.set("paymentMethodId",paymentPref.get("paymentMethodId"));
      response.set("transCodeEnumId","PGT_REFUND");
      response.set("amount",refundResponse.get("refundAmount"));
      response.set("referenceNum",refundResponse.get("refundRefNum"));
      response.set("altReference",refundResponse.get("refundAltRefNum"));
      response.set("gatewayCode",refundResponse.get("refundCode"));
      response.set("gatewayFlag",refundResponse.get("refundFlag"));
      response.set("gatewayMessage",refundResponse.get("refundMessage"));
      response.set("transactionDate",UtilDateTime.nowTimestamp());
      try {
        delegator.create(response);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError("Unable to create PaymentGatewayResponse record");
      }
      List messages=(List)refundResponse.get("internalRespMsgs");
      if (messages != null && messages.size() > 0) {
        Iterator i=messages.iterator();
        while (i.hasNext()) {
          GenericValue respMsg=delegator.makeValue("PaymentGatewayRespMsg",null);
          String respMsgId=delegator.getNextSeqId("PaymentGatewayRespMsg");
          String message=(String)i.next();
          respMsg.set("paymentGatewayRespMsgId",respMsgId);
          respMsg.set("paymentGatewayResponseId",responseId);
          respMsg.set("pgrMessage",message);
          try {
            delegator.create(respMsg);
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError("Unable to create PaymentGatewayRespMsg record");
          }
        }
      }
      Boolean refundResult=(Boolean)refundResponse.get("refundResult");
      if (refundResult != null && refundResult.booleanValue()) {
        Map paymentCtx=UtilMisc.toMap("paymentTypeId","CUSTOMER_REFUND");
        paymentCtx.put("paymentMethodTypeId",paymentPref.get("paymentMethodTypeId"));
        paymentCtx.put("paymentMethodId",paymentPref.get("paymentMethodId"));
        paymentCtx.put("paymentGatewayResponseId",responseId);
        paymentCtx.put("partyIdTo",payToPartyId);
        paymentCtx.put("partyIdFrom",payFromPartyId);
        paymentCtx.put("statusId","PMNT_SENT");
        paymentCtx.put("paymentPreferenceId",paymentPref.get("orderPaymentPreferenceId"));
        paymentCtx.put("currencyUomId",orh.getCurrency());
        paymentCtx.put("amount",refundResponse.get("refundAmount"));
        paymentCtx.put("userLogin",userLogin);
        paymentCtx.put("paymentRefNum",refundResponse.get("refundRefNum"));
        paymentCtx.put("comments","Refund");
        String paymentId=null;
        try {
          Map payRes=dispatcher.runSync("createPayment",paymentCtx);
          if (ModelService.RESPOND_ERROR.equals(payRes.get(ModelService.RESPONSE_MESSAGE))) {
            return ServiceUtil.returnError((String)payRes.get(ModelService.ERROR_MESSAGE));
          }
 else {
            paymentId=(String)payRes.get("paymentId");
          }
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Problem creating Payment",module);
          return ServiceUtil.returnError("Problem creating Payment");
        }
        if (paymentId == null) {
          return ServiceUtil.returnError("Create payment failed");
        }
        Map result=ServiceUtil.returnSuccess();
        result.put("paymentId",paymentId);
        return result;
      }
 else {
        return ServiceUtil.returnFailure("The refund failed");
      }
    }
 else {
      return ServiceUtil.returnError("No refund service defined");
    }
  }
 else {
    return ServiceUtil.returnError("No payment settings found");
  }
}
