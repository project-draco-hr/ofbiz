{
  String name=fieldElement.getAttribute("name");
  this.action=FlexibleStringExpander.getInstance(fieldElement.getAttribute("action"));
  this.attributeName=UtilXml.checkEmpty(fieldElement.getAttribute("attribute-name"),name);
  this.encodeOutput=!"false".equals(fieldElement.getAttribute("encode-output"));
  this.entityName=fieldElement.getAttribute("entity-name");
  this.entryAcsr=FlexibleMapAccessor.getInstance(UtilXml.checkEmpty(fieldElement.getAttribute("entry-name"),name));
  this.event=fieldElement.getAttribute("event");
  this.fieldName=UtilXml.checkEmpty(fieldElement.getAttribute("field-name"),name);
  this.headerLink=fieldElement.getAttribute("header-link");
  this.headerLinkStyle=fieldElement.getAttribute("header-link-style");
  this.idName=fieldElement.getAttribute("id-name");
  this.mapAcsr=FlexibleMapAccessor.getInstance(fieldElement.getAttribute("map-name"));
  this.modelForm=modelForm;
  this.name=name;
  this.parameterName=UtilXml.checkEmpty(fieldElement.getAttribute("parameter-name"),name);
  String positionAtttr=fieldElement.getAttribute("position");
  Integer position=null;
  if (!positionAtttr.isEmpty()) {
    position=Integer.parseInt(positionAtttr);
  }
  this.position=position;
  this.redWhen=fieldElement.getAttribute("red-when");
  String requiredField=fieldElement.getAttribute("required-field");
  this.requiredField=requiredField.isEmpty() ? null : "true".equals(requiredField);
  this.requiredFieldStyle=fieldElement.getAttribute("required-field-style");
  this.separateColumn="true".equals(fieldElement.getAttribute("separate-column"));
  this.serviceName=fieldElement.getAttribute("service-name");
  String sortField=fieldElement.getAttribute("sort-field");
  this.sortField=sortField.isEmpty() ? null : "true".equals(sortField);
  this.sortFieldAscStyle=fieldElement.getAttribute("sort-field-asc-style");
  this.sortFieldDescStyle=fieldElement.getAttribute("sort-field-desc-style");
  this.sortFieldHelpText=fieldElement.getAttribute("sort-field-help-text");
  this.sortFieldStyle=fieldElement.getAttribute("sort-field-style");
  this.title=FlexibleStringExpander.getInstance(fieldElement.getAttribute("title"));
  this.titleAreaStyle=fieldElement.getAttribute("title-area-style");
  this.titleStyle=fieldElement.getAttribute("title-style");
  this.tooltip=FlexibleStringExpander.getInstance(fieldElement.getAttribute("tooltip"));
  this.tooltipStyle=fieldElement.getAttribute("tooltip-style");
  this.useWhen=FlexibleStringExpander.getInstance(fieldElement.getAttribute("use-when"));
  this.widgetAreaStyle=fieldElement.getAttribute("widget-area-style");
  this.widgetStyle=fieldElement.getAttribute("widget-style");
  this.parentFormName=fieldElement.getAttribute("form-name");
  Element childElement=null;
  List<? extends Element> subElements=UtilXml.childElementList(fieldElement);
  for (  Element subElement : subElements) {
    String subElementName=subElement.getTagName();
    if ("on-field-event-update-area".equals(subElementName)) {
      UpdateArea updateArea=new UpdateArea(subElement);
      if ("change".equals(updateArea.getEventType()))       onChangeUpdateAreas.add(updateArea);
 else       if ("click".equals(updateArea.getEventType()))       onClickUpdateAreas.add(updateArea);
    }
 else {
      if (this.fieldType != null) {
        throw new IllegalArgumentException("Multiple field types found: " + this.fieldType + ", "+ subElementName);
      }
      this.fieldType=subElementName;
      childElement=subElement;
    }
  }
  if (UtilValidate.isEmpty(this.fieldType)) {
    this.induceFieldInfo(modelForm,null,entityModelReader,dispatchContext);
  }
 else   if ("display".equals(this.fieldType))   this.fieldInfo=new DisplayField(childElement,null);
 else   if ("display-entity".equals(this.fieldType))   this.fieldInfo=new DisplayEntityField(childElement,null);
 else   if ("hyperlink".equals(this.fieldType))   this.fieldInfo=new HyperlinkField(childElement,null);
 else   if ("text".equals(this.fieldType))   this.fieldInfo=new TextField(childElement,null);
 else   if ("textarea".equals(this.fieldType))   this.fieldInfo=new TextareaField(childElement,null);
 else   if ("date-time".equals(this.fieldType))   this.fieldInfo=new DateTimeField(childElement,null);
 else   if ("drop-down".equals(this.fieldType))   this.fieldInfo=new DropDownField(childElement,null);
 else   if ("check".equals(this.fieldType))   this.fieldInfo=new CheckField(childElement,null);
 else   if ("radio".equals(this.fieldType))   this.fieldInfo=new RadioField(childElement,null);
 else   if ("submit".equals(this.fieldType))   this.fieldInfo=new SubmitField(childElement,null);
 else   if ("reset".equals(this.fieldType))   this.fieldInfo=new ResetField(childElement,null);
 else   if ("hidden".equals(this.fieldType))   this.fieldInfo=new HiddenField(childElement,null);
 else   if ("ignored".equals(this.fieldType))   this.fieldInfo=new IgnoredField(childElement,null);
 else   if ("text-find".equals(this.fieldType))   this.fieldInfo=new TextFindField(childElement,null);
 else   if ("date-find".equals(this.fieldType))   this.fieldInfo=new DateFindField(childElement,null);
 else   if ("range-find".equals(this.fieldType))   this.fieldInfo=new RangeFindField(childElement,null);
 else   if ("lookup".equals(this.fieldType))   this.fieldInfo=new LookupField(childElement,null);
 else   if ("file".equals(this.fieldType))   this.fieldInfo=new FileField(childElement,null);
 else   if ("password".equals(this.fieldType))   this.fieldInfo=new PasswordField(childElement,null);
 else   if ("image".equals(this.fieldType))   this.fieldInfo=new ImageField(childElement,null);
 else   if ("container".equals(this.fieldType))   this.fieldInfo=new ContainerField(childElement,null);
 else   throw new IllegalArgumentException("The field sub-element with name " + this.fieldType + " is not supported");
}
