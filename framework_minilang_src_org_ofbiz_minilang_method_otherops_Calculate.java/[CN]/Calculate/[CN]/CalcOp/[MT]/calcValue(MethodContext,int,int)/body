{
  String operatorStr=operatorFse.expandString(methodContext.getEnvMap());
  int operator=CalcOp.OPERATOR_ADD;
  if ("get".equals(operatorStr)) {
    operator=CalcOp.OPERATOR_ADD;
  }
 else   if ("add".equals(operatorStr)) {
    operator=CalcOp.OPERATOR_ADD;
  }
 else   if ("subtract".equals(operatorStr)) {
    operator=CalcOp.OPERATOR_SUBTRACT;
  }
 else   if ("multiply".equals(operatorStr)) {
    operator=CalcOp.OPERATOR_MULTIPLY;
  }
 else   if ("divide".equals(operatorStr)) {
    operator=CalcOp.OPERATOR_DIVIDE;
  }
 else   if ("negative".equals(operatorStr)) {
    operator=CalcOp.OPERATOR_NEGATIVE;
  }
  BigDecimal resultValue=BigDecimal.ZERO.setScale(scale,roundingMode);
  boolean isFirst=true;
  Object fieldObj=fieldFma.get(methodContext.getEnvMap());
  if (fieldObj != null) {
    if (fieldObj instanceof Double) {
      resultValue=new BigDecimal(((Double)fieldObj).doubleValue());
    }
 else     if (fieldObj instanceof Long) {
      resultValue=BigDecimal.valueOf(((Long)fieldObj).longValue());
    }
 else     if (fieldObj instanceof Float) {
      resultValue=new BigDecimal(((Float)fieldObj).floatValue());
    }
 else     if (fieldObj instanceof Integer) {
      resultValue=BigDecimal.valueOf(((Integer)fieldObj).longValue());
    }
 else     if (fieldObj instanceof String) {
      resultValue=new BigDecimal((String)fieldObj);
    }
 else     if (fieldObj instanceof BigDecimal) {
      resultValue=(BigDecimal)fieldObj;
    }
    if (operator == OPERATOR_NEGATIVE)     resultValue=resultValue.negate();
    isFirst=false;
  }
  for (  SubCalc calcop : calcops) {
    if (isFirst) {
      resultValue=calcop.calcValue(methodContext,scale,roundingMode);
      if (operator == OPERATOR_NEGATIVE)       resultValue=resultValue.negate();
      isFirst=false;
    }
 else {
switch (operator) {
case OPERATOR_ADD:
        resultValue=resultValue.add(calcop.calcValue(methodContext,scale,roundingMode));
      break;
case OPERATOR_SUBTRACT:
case OPERATOR_NEGATIVE:
    resultValue=resultValue.subtract(calcop.calcValue(methodContext,scale,roundingMode));
  break;
case OPERATOR_MULTIPLY:
resultValue=resultValue.multiply(calcop.calcValue(methodContext,scale,roundingMode));
break;
case OPERATOR_DIVIDE:
resultValue=resultValue.divide(calcop.calcValue(methodContext,scale,roundingMode),scale,roundingMode);
break;
}
}
}
return resultValue;
}
