{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.attributeNames(simpleMethod,element,"field","operator");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"field");
    MiniLangValidate.expressionAttributes(simpleMethod,element,"field");
    MiniLangValidate.childElements(simpleMethod,element,"calcop","number");
  }
  this.fieldFma=FlexibleMapAccessor.getInstance(element.getAttribute("field"));
  this.operatorFse=FlexibleStringExpander.getInstance(element.getAttribute("operator"));
  List<? extends Element> calcopElements=UtilXml.childElementList(element);
  calcops=new Calculate.SubCalc[calcopElements.size()];
  int i=0;
  for (  Element calcopElement : calcopElements) {
    if ("calcop".equals(calcopElement.getNodeName())) {
      calcops[i]=new Calculate.CalcOp(calcopElement,simpleMethod);
    }
 else     if ("number".equals(calcopElement.getNodeName())) {
      calcops[i]=new Calculate.NumberOp(calcopElement,simpleMethod);
    }
 else {
      MiniLangValidate.handleError("Invalid calculate sub-element.",simpleMethod,calcopElement);
      calcops[i]=new InvalidOp(calcopElement,simpleMethod);
    }
    i++;
  }
}
