{
  String typeString=typeFse.expandString(methodContext.getEnvMap());
  int type;
  if ("Double".equals(typeString)) {
    type=Calculate.TYPE_DOUBLE;
  }
 else   if ("Float".equals(typeString)) {
    type=Calculate.TYPE_FLOAT;
  }
 else   if ("Long".equals(typeString)) {
    type=Calculate.TYPE_LONG;
  }
 else   if ("Integer".equals(typeString)) {
    type=Calculate.TYPE_INTEGER;
  }
 else   if ("String".equals(typeString)) {
    type=Calculate.TYPE_STRING;
  }
 else   if ("BigDecimal".equals(typeString)) {
    type=Calculate.TYPE_BIG_DECIMAL;
  }
 else {
    type=Calculate.TYPE_BIG_DECIMAL;
  }
  String roundingModeString=roundingModeFse.expandString(methodContext.getEnvMap());
  int roundingMode;
  if ("Ceiling".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_CEILING;
  }
 else   if ("Floor".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_FLOOR;
  }
 else   if ("Up".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_UP;
  }
 else   if ("Down".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_DOWN;
  }
 else   if ("HalfUp".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_HALF_UP;
  }
 else   if ("HalfDown".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_HALF_DOWN;
  }
 else   if ("HalfEven".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_HALF_EVEN;
  }
 else   if ("Unnecessary".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_UNNECESSARY;
  }
 else {
    roundingMode=BigDecimal.ROUND_HALF_EVEN;
  }
  String decimalScaleString=decimalScaleFse.expandString(methodContext.getEnvMap());
  int decimalScale=2;
  if (!decimalScaleString.isEmpty()) {
    decimalScale=Integer.valueOf(decimalScaleString).intValue();
  }
  String decimalFormatString=decimalFormatFse.expandString(methodContext.getEnvMap());
  DecimalFormat df=null;
  if (!decimalFormatString.isEmpty()) {
    df=new DecimalFormat(decimalFormatString);
  }
  BigDecimal resultValue=BigDecimal.ZERO.setScale(decimalScale,roundingMode);
  for (  Calculate.SubCalc calcop : calcops) {
    resultValue=resultValue.add(calcop.calcValue(methodContext,decimalScale,roundingMode));
  }
  resultValue=resultValue.setScale(decimalScale,roundingMode);
  Object resultObj=null;
switch (type) {
case TYPE_DOUBLE:
    resultObj=Double.valueOf(resultValue.doubleValue());
  break;
case TYPE_FLOAT:
resultObj=Float.valueOf(resultValue.floatValue());
break;
case TYPE_LONG:
resultValue=resultValue.setScale(0,roundingMode);
resultObj=Long.valueOf(resultValue.longValue());
break;
case TYPE_INTEGER:
resultValue=resultValue.setScale(0,roundingMode);
resultObj=Integer.valueOf(resultValue.intValue());
break;
case TYPE_STRING:
if (df != null && resultValue.compareTo(BigDecimal.ZERO) > 0) {
resultObj=df.format(resultValue);
}
 else {
resultObj=resultValue.toString();
}
break;
case TYPE_BIG_DECIMAL:
resultObj=resultValue;
break;
}
fieldFma.put(methodContext.getEnvMap(),resultObj);
return true;
}
