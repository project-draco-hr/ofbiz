{
  String typeString=methodContext.expandString(this.typeString);
  int type;
  if ("Double".equals(typeString)) {
    type=Calculate.TYPE_DOUBLE;
  }
 else   if ("Float".equals(typeString)) {
    type=Calculate.TYPE_FLOAT;
  }
 else   if ("Long".equals(typeString)) {
    type=Calculate.TYPE_LONG;
  }
 else   if ("Integer".equals(typeString)) {
    type=Calculate.TYPE_INTEGER;
  }
 else   if ("String".equals(typeString)) {
    type=Calculate.TYPE_STRING;
  }
 else   if ("BigDecimal".equals(typeString)) {
    type=Calculate.TYPE_BIG_DECIMAL;
  }
 else {
    type=Calculate.TYPE_DOUBLE;
  }
  String roundingModeString=methodContext.expandString(this.roundingModeString);
  int roundingMode;
  if ("Ceiling".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_CEILING;
  }
 else   if ("Floor".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_FLOOR;
  }
 else   if ("Up".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_UP;
  }
 else   if ("Down".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_DOWN;
  }
 else   if ("HalfUp".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_HALF_UP;
  }
 else   if ("HalfDown".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_HALF_DOWN;
  }
 else   if ("HalfEven".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_HALF_EVEN;
  }
 else   if ("Unnecessary".equals(roundingModeString)) {
    roundingMode=BigDecimal.ROUND_UNNECESSARY;
  }
 else {
    roundingMode=BigDecimal.ROUND_HALF_EVEN;
  }
  String decimalScaleString=methodContext.expandString(this.decimalScaleString);
  int decimalScale=2;
  if (UtilValidate.isNotEmpty(decimalScaleString)) {
    decimalScale=Integer.valueOf(decimalScaleString).intValue();
  }
  String decimalFormatString=methodContext.expandString(this.decimalFormatString);
  DecimalFormat df=null;
  if (UtilValidate.isNotEmpty(decimalFormatString)) {
    df=new DecimalFormat(decimalFormatString);
  }
  BigDecimal resultValue=ZERO;
  resultValue=resultValue.setScale(decimalScale,roundingMode);
  for (int i=0; i < calcops.length; i++) {
    resultValue=resultValue.add(calcops[i].calcValue(methodContext,decimalScale,roundingMode));
  }
  resultValue=resultValue.setScale(decimalScale,roundingMode);
  Object resultObj=null;
switch (type) {
case TYPE_DOUBLE:
    resultObj=new Double(resultValue.doubleValue());
  break;
case TYPE_FLOAT:
resultObj=new Float(resultValue.floatValue());
break;
case TYPE_LONG:
resultValue=resultValue.setScale(0,roundingMode);
resultObj=new Long(resultValue.longValue());
break;
case TYPE_INTEGER:
resultValue=resultValue.setScale(0,roundingMode);
resultObj=new Integer(resultValue.intValue());
break;
case TYPE_STRING:
if (df != null && resultValue.compareTo(ZERO) > 0) {
resultObj=df.format(resultValue);
}
 else {
resultObj=resultValue.toString();
}
break;
case TYPE_BIG_DECIMAL:
resultObj=resultValue;
break;
}
if (!mapAcsr.isEmpty()) {
Map toMap=(Map)mapAcsr.get(methodContext);
if (toMap == null) {
if (Debug.verboseOn()) Debug.logVerbose("Map not found with name " + mapAcsr + ", creating new map",module);
toMap=new HashMap();
mapAcsr.put(methodContext,toMap);
}
fieldAcsr.put(toMap,resultObj,methodContext);
}
 else {
fieldAcsr.put(methodContext,resultObj);
}
return true;
}
