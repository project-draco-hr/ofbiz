{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.handleError("<calculate> element is deprecated (use <set>)",simpleMethod,element);
    MiniLangValidate.attributeNames(simpleMethod,element,"field","decimal-scale","decimal-format","rounding-mode","type");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"field");
    MiniLangValidate.expressionAttributes(simpleMethod,element,"field");
    MiniLangValidate.childElements(simpleMethod,element,"calcop","number");
  }
  this.fieldFma=FlexibleMapAccessor.getInstance(element.getAttribute("field"));
  this.decimalFormatFse=FlexibleStringExpander.getInstance(element.getAttribute("decimal-format"));
  this.decimalScaleFse=FlexibleStringExpander.getInstance(element.getAttribute("decimal-scale"));
  this.roundingModeFse=FlexibleStringExpander.getInstance(element.getAttribute("rounding-mode"));
  this.typeFse=FlexibleStringExpander.getInstance(element.getAttribute("type"));
  List<? extends Element> calcopElements=UtilXml.childElementList(element);
  calcops=new Calculate.SubCalc[calcopElements.size()];
  int i=0;
  for (  Element calcopElement : calcopElements) {
    String nodeName=calcopElement.getNodeName();
    if ("calcop".equals(nodeName)) {
      calcops[i]=new CalcOp(calcopElement,simpleMethod);
    }
 else     if ("number".equals(nodeName)) {
      calcops[i]=new NumberOp(calcopElement,simpleMethod);
    }
 else {
      MiniLangValidate.handleError("Invalid calculate sub-element.",simpleMethod,calcopElement);
      calcops[i]=new InvalidOp(calcopElement,simpleMethod);
    }
    i++;
  }
}
