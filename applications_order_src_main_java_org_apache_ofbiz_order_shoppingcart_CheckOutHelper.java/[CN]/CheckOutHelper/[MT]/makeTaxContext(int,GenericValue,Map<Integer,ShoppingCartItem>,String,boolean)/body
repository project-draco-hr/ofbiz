{
  ShoppingCart.CartShipInfo csi=cart.getShipInfo(shipGroup);
  int totalItems=csi.shipItemInfo.size();
  List<GenericValue> product=new ArrayList<GenericValue>(totalItems);
  List<BigDecimal> amount=new ArrayList<BigDecimal>(totalItems);
  List<BigDecimal> price=new ArrayList<BigDecimal>(totalItems);
  List<BigDecimal> quantity=new ArrayList<BigDecimal>(totalItems);
  List<BigDecimal> shipAmt=new ArrayList<BigDecimal>(totalItems);
  Iterator<ShoppingCartItem> it=csi.shipItemInfo.keySet().iterator();
  for (int i=0; i < totalItems; i++) {
    ShoppingCartItem cartItem=it.next();
    ShoppingCart.CartShipInfo.CartShipItemInfo itemInfo=csi.getShipItemInfo(cartItem);
    product.add(i,cartItem.getProduct());
    amount.add(i,cartItem.getItemSubTotal(itemInfo.quantity));
    price.add(i,cartItem.getBasePrice());
    quantity.add(i,cartItem.getQuantity());
    shipAmt.add(i,BigDecimal.ZERO);
    shoppingCartItemIndexMap.put(Integer.valueOf(i),cartItem);
  }
  List<GenericValue> allAdjustments=cart.getAdjustments();
  BigDecimal orderPromoAmt=OrderReadHelper.calcOrderPromoAdjustmentsBd(allAdjustments);
  BigDecimal shipAmount=csi.shipEstimate;
  if (shipAddress == null) {
    shipAddress=cart.getShippingAddress(shipGroup);
  }
  if (shipAddress == null && skipEmptyAddresses) {
    return null;
  }
  if (shipAddress == null) {
    for (int i=0; i < cart.selectedPayments(); i++) {
      ShoppingCart.CartPaymentInfo cpi=cart.getPaymentInfo(i);
      GenericValue billAddr=cpi.getBillingAddress(delegator);
      if (billAddr != null) {
        shipAddress=billAddr;
        Debug.logInfo("In makeTaxContext no shipping address, but found address with ID [" + shipAddress.get("contactMechId") + "] from payment method.",module);
        break;
      }
    }
  }
  if (shipAddress == null) {
    if (originFacilityId != null) {
      GenericValue facilityContactMech=ContactMechWorker.getFacilityContactMechByPurpose(delegator,originFacilityId,UtilMisc.toList("SHIP_ORIG_LOCATION","PRIMARY_LOCATION"));
      if (facilityContactMech != null) {
        try {
          shipAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",facilityContactMech.getString("contactMechId")).queryOne();
        }
 catch (        GenericEntityException e) {
          Debug.logError(e,module);
        }
      }
    }
  }
  if (shipAddress == null) {
    Debug.logWarning("Not calculating tax for new order because there is no shipping address, no billing address, and no address on the origin facility [" + originFacilityId + "]",module);
  }
  Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("productStoreId",cart.getProductStoreId());
  serviceContext.put("payToPartyId",cart.getBillFromVendorPartyId());
  serviceContext.put("billToPartyId",cart.getBillToCustomerPartyId());
  serviceContext.put("itemProductList",product);
  serviceContext.put("itemAmountList",amount);
  serviceContext.put("itemPriceList",price);
  serviceContext.put("itemQuantityList",quantity);
  serviceContext.put("itemShippingList",shipAmt);
  serviceContext.put("orderShippingAmount",shipAmount);
  serviceContext.put("shippingAddress",shipAddress);
  serviceContext.put("orderPromotionsAmount",orderPromoAmt);
  return serviceContext;
}
