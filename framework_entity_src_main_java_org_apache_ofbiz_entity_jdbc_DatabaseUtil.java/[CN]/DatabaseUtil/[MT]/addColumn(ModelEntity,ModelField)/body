{
  if (entity == null || field == null)   return "ModelEntity or ModelField where null, cannot add column";
  if (entity instanceof ModelViewEntity) {
    return "ERROR: Cannot add column for a view entity";
  }
  Connection connection=null;
  Statement stmt=null;
  try {
    connection=getConnection();
  }
 catch (  SQLException e) {
    String errMsg="Unable to establish a connection with the database for helperName [" + this.helperInfo.getHelperFullName() + "]... Error was: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return errMsg;
  }
catch (  GenericEntityException e) {
    String errMsg="Unable to establish a connection with the database for helperName [" + this.helperInfo.getHelperFullName() + "]... Error was: "+ e.toString();
    Debug.logError(e,errMsg,module);
    return errMsg;
  }
  ModelFieldType type=modelFieldTypeReader.getModelFieldType(field.getType());
  if (type == null) {
    return "Field type [" + type + "] not found for field ["+ field.getName()+ "] of entity ["+ entity.getEntityName()+ "], not adding column.";
  }
  StringBuilder sqlBuf=new StringBuilder("ALTER TABLE ");
  sqlBuf.append(entity.getTableName(datasourceInfo));
  sqlBuf.append(" ADD ");
  sqlBuf.append(field.getColName());
  sqlBuf.append(" ");
  sqlBuf.append(type.getSqlType());
  if ("String".equals(type.getJavaType()) || "java.lang.String".equals(type.getJavaType())) {
    if (UtilValidate.isNotEmpty(this.datasourceInfo.getCharacterSet())) {
      sqlBuf.append(" CHARACTER SET ");
      sqlBuf.append(this.datasourceInfo.getCharacterSet());
    }
    if (UtilValidate.isNotEmpty(this.datasourceInfo.getCollate())) {
      sqlBuf.append(" COLLATE ");
      sqlBuf.append(this.datasourceInfo.getCollate());
    }
  }
  String sql=sqlBuf.toString();
  if (Debug.infoOn())   Debug.logInfo("[addColumn] sql=" + sql,module);
  try {
    stmt=connection.createStatement();
    stmt.executeUpdate(sql);
  }
 catch (  SQLException e) {
    StringBuilder sql2Buf=new StringBuilder("ALTER TABLE ");
    sql2Buf.append(entity.getTableName(datasourceInfo));
    sql2Buf.append(" ADD COLUMN ");
    sql2Buf.append(field.getColName());
    sql2Buf.append(" ");
    sql2Buf.append(type.getSqlType());
    if ("String".equals(type.getJavaType()) || "java.lang.String".equals(type.getJavaType())) {
      if (UtilValidate.isNotEmpty(this.datasourceInfo.getCharacterSet())) {
        sql2Buf.append(" CHARACTER SET ");
        sql2Buf.append(this.datasourceInfo.getCharacterSet());
      }
      if (UtilValidate.isNotEmpty(this.datasourceInfo.getCollate())) {
        sql2Buf.append(" COLLATE ");
        sql2Buf.append(this.datasourceInfo.getCollate());
      }
    }
    String sql2=sql2Buf.toString();
    if (Debug.infoOn())     Debug.logInfo("[addColumn] sql failed, trying sql2=" + sql2,module);
    try {
      stmt=connection.createStatement();
      stmt.executeUpdate(sql2);
    }
 catch (    SQLException e2) {
      return "SQL Exception while executing the following:\n" + sql + "\nError was: "+ e.toString();
    }
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
    try {
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
  }
  return null;
}
