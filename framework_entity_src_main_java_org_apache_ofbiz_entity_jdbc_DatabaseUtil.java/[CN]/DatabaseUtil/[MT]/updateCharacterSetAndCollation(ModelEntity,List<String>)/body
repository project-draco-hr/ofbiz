{
  if (entity instanceof ModelViewEntity) {
    return;
  }
  if (UtilValidate.isEmpty(this.datasourceInfo.getCharacterSet()) && UtilValidate.isEmpty(this.datasourceInfo.getCollate())) {
    messages.add("Not setting character-set and collate for entity [" + entity.getEntityName() + "], options not specified in the datasource definition in the entityengine.xml file.");
    return;
  }
  Connection connection=null;
  try {
    connection=getConnectionLogged(messages);
    if (connection == null) {
      return;
    }
    StringBuilder sqlTableBuf=new StringBuilder("ALTER TABLE ");
    sqlTableBuf.append(entity.getTableName(this.datasourceInfo));
    if (UtilValidate.isNotEmpty(this.datasourceInfo.getCharacterSet())) {
      sqlTableBuf.append(" DEFAULT CHARACTER SET ");
      sqlTableBuf.append(this.datasourceInfo.getCharacterSet());
    }
    if (UtilValidate.isNotEmpty(this.datasourceInfo.getCollate())) {
      sqlTableBuf.append(" COLLATE ");
      sqlTableBuf.append(this.datasourceInfo.getCollate());
    }
    if (Debug.verboseOn())     Debug.logVerbose("[updateCharacterSetAndCollation] character-set and collate sql=" + sqlTableBuf,module);
    try (Statement stmt=connection.createStatement()){
      stmt.executeUpdate(sqlTableBuf.toString());
    }
 catch (    SQLException e) {
      String errMsg="SQL Exception while executing the following:\n" + sqlTableBuf + "\nError was: "+ e.toString();
      messages.add(errMsg);
      Debug.logError(errMsg,module);
    }
    Iterator<ModelField> fieldIter=entity.getFieldsIterator();
    while (fieldIter.hasNext()) {
      ModelField field=fieldIter.next();
      ModelFieldType type=modelFieldTypeReader.getModelFieldType(field.getType());
      if (type == null) {
        messages.add("Field type [" + type + "] not found for field ["+ field.getName()+ "] of entity ["+ entity.getEntityName()+ "], not creating table.");
        continue;
      }
      if (!"String".equals(type.getJavaType()) && !"java.lang.String".equals(type.getJavaType())) {
        continue;
      }
      StringBuilder sqlBuf=new StringBuilder("ALTER TABLE ");
      sqlBuf.append(entity.getTableName(this.datasourceInfo));
      sqlBuf.append(" MODIFY COLUMN ");
      sqlBuf.append(field.getColName());
      sqlBuf.append(" ");
      sqlBuf.append(type.getSqlType());
      if (UtilValidate.isNotEmpty(this.datasourceInfo.getCharacterSet())) {
        sqlBuf.append(" CHARACTER SET ");
        sqlBuf.append(this.datasourceInfo.getCharacterSet());
      }
      if (UtilValidate.isNotEmpty(this.datasourceInfo.getCollate())) {
        sqlBuf.append(" COLLATE ");
        sqlBuf.append(this.datasourceInfo.getCollate());
      }
      if (field.getIsPk() || field.getIsNotNull()) {
        if (this.datasourceInfo.getAlwaysUseConstraintKeyword()) {
          sqlBuf.append(" CONSTRAINT NOT NULL");
        }
 else {
          sqlBuf.append(" NOT NULL");
        }
      }
      if (Debug.verboseOn())       Debug.logVerbose("[updateCharacterSetAndCollation] character-set and collate sql=" + sqlBuf,module);
      try (Statement stmt=connection.createStatement()){
        stmt.executeUpdate(sqlBuf.toString());
      }
 catch (      SQLException e) {
        String errMsg="SQL Exception while executing the following:\n" + sqlBuf + "\nError was: "+ e.toString();
        messages.add(errMsg);
        Debug.logError(errMsg,module);
      }
    }
  }
  finally {
    try {
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Debug.logError(e,module);
    }
  }
}
