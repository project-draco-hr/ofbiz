{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  Security security=dctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Integer viewIndex=(Integer)context.get("viewIndex");
  Integer viewSize=(Integer)context.get("viewSize");
  String showAll=(String)context.get("showAll");
  String useEntryDate=(String)context.get("useEntryDate");
  if (showAll == null) {
    showAll="N";
  }
  List fieldsToSelect=FastList.newInstance();
  fieldsToSelect.add("orderId");
  fieldsToSelect.add("orderName");
  fieldsToSelect.add("statusId");
  fieldsToSelect.add("orderTypeId");
  fieldsToSelect.add("orderDate");
  fieldsToSelect.add("currencyUom");
  fieldsToSelect.add("grandTotal");
  fieldsToSelect.add("remainingSubTotal");
  List orderBy=UtilMisc.toList("-orderDate","-orderId");
  List paramList=FastList.newInstance();
  List conditions=FastList.newInstance();
  boolean canViewPo=security.hasEntityPermission("ORDERMGR","_PURCHASE_VIEW",userLogin);
  if (!canViewPo) {
    conditions.add(EntityCondition.makeCondition("orderTypeId",EntityOperator.NOT_EQUAL,"PURCHASE_ORDER"));
  }
  DynamicViewEntity dve=new DynamicViewEntity();
  dve.addMemberEntity("OH","OrderHeader");
  dve.addAliasAll("OH","");
  dve.addRelation("one-nofk","","OrderType",UtilMisc.toList(new ModelKeyMap("orderTypeId","orderTypeId")));
  dve.addRelation("one-nofk","","StatusItem",UtilMisc.toList(new ModelKeyMap("statusId","statusId")));
  String orderId=(String)context.get("orderId");
  if (UtilValidate.isNotEmpty(orderId)) {
    paramList.add("orderId=" + orderId);
    conditions.add(makeExpr("orderId",orderId));
  }
  List orderTypeList=(List)context.get("orderTypeId");
  if (orderTypeList != null) {
    Iterator i=orderTypeList.iterator();
    List orExprs=FastList.newInstance();
    while (i.hasNext()) {
      String orderTypeId=(String)i.next();
      paramList.add("orderTypeId=" + orderTypeId);
      if (!"PURCHASE_ORDER".equals(orderTypeId) || ("PURCHASE_ORDER".equals(orderTypeId) && canViewPo)) {
        orExprs.add(EntityCondition.makeCondition("orderTypeId",EntityOperator.EQUALS,orderTypeId));
      }
    }
    conditions.add(EntityCondition.makeCondition(orExprs,EntityOperator.OR));
  }
  String orderName=(String)context.get("orderName");
  if (UtilValidate.isNotEmpty(orderName)) {
    paramList.add("orderName=" + orderName);
    conditions.add(makeExpr("orderName",orderName,true));
  }
  List orderStatusList=(List)context.get("orderStatusId");
  if (orderStatusList != null) {
    Iterator i=orderStatusList.iterator();
    List orExprs=FastList.newInstance();
    while (i.hasNext()) {
      String orderStatusId=(String)i.next();
      paramList.add("orderStatusId=" + orderStatusId);
      if ("PENDING".equals(orderStatusId)) {
        List pendExprs=FastList.newInstance();
        pendExprs.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"ORDER_CREATED"));
        pendExprs.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"ORDER_PROCESSING"));
        pendExprs.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"ORDER_APPROVED"));
        orExprs.add(EntityCondition.makeCondition(pendExprs,EntityOperator.OR));
      }
 else {
        orExprs.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,orderStatusId));
      }
    }
    conditions.add(EntityCondition.makeCondition(orExprs,EntityOperator.OR));
  }
  List productStoreList=(List)context.get("productStoreId");
  if (productStoreList != null) {
    Iterator i=productStoreList.iterator();
    List orExprs=FastList.newInstance();
    while (i.hasNext()) {
      String productStoreId=(String)i.next();
      paramList.add("productStoreId=" + productStoreId);
      orExprs.add(EntityCondition.makeCondition("productStoreId",EntityOperator.EQUALS,productStoreId));
    }
    conditions.add(EntityCondition.makeCondition(orExprs,EntityOperator.OR));
  }
  List webSiteList=(List)context.get("orderWebSiteId");
  if (webSiteList != null) {
    Iterator i=webSiteList.iterator();
    List orExprs=FastList.newInstance();
    while (i.hasNext()) {
      String webSiteId=(String)i.next();
      paramList.add("webSiteId=" + webSiteId);
      orExprs.add(EntityCondition.makeCondition("webSiteId",EntityOperator.EQUALS,webSiteId));
    }
    conditions.add(EntityCondition.makeCondition(orExprs,EntityOperator.OR));
  }
  List saleChannelList=(List)context.get("salesChannelEnumId");
  if (saleChannelList != null) {
    Iterator i=saleChannelList.iterator();
    List orExprs=FastList.newInstance();
    while (i.hasNext()) {
      String salesChannelEnumId=(String)i.next();
      paramList.add("salesChannelEnumId=" + salesChannelEnumId);
      orExprs.add(EntityCondition.makeCondition("salesChannelEnumId",EntityOperator.EQUALS,salesChannelEnumId));
    }
    conditions.add(EntityCondition.makeCondition(orExprs,EntityOperator.OR));
  }
  String createdBy=(String)context.get("createdBy");
  if (UtilValidate.isNotEmpty(createdBy)) {
    paramList.add("createdBy=" + createdBy);
    conditions.add(makeExpr("createdBy",createdBy));
  }
  String terminalId=(String)context.get("terminalId");
  if (UtilValidate.isNotEmpty(terminalId)) {
    paramList.add("terminalId=" + terminalId);
    conditions.add(makeExpr("terminalId",terminalId));
  }
  String transactionId=(String)context.get("transactionId");
  if (UtilValidate.isNotEmpty(transactionId)) {
    paramList.add("transactionId=" + transactionId);
    conditions.add(makeExpr("transactionId",transactionId));
  }
  String externalId=(String)context.get("externalId");
  if (UtilValidate.isNotEmpty(externalId)) {
    paramList.add("externalId=" + externalId);
    conditions.add(makeExpr("externalId",externalId));
  }
  String internalCode=(String)context.get("internalCode");
  if (UtilValidate.isNotEmpty(internalCode)) {
    paramList.add("internalCode=" + internalCode);
    conditions.add(makeExpr("internalCode",internalCode));
  }
  String dateField="Y".equals(useEntryDate) ? "entryDate" : "orderDate";
  String minDate=(String)context.get("minDate");
  if (UtilValidate.isNotEmpty(minDate) && minDate.length() > 8) {
    minDate=minDate.trim();
    if (minDate.length() < 14)     minDate=minDate + " " + "00:00:00.000";
    paramList.add("minDate=" + minDate);
    try {
      Object converted=ObjectType.simpleTypeConvert(minDate,"Timestamp",null,null);
      if (converted != null) {
        conditions.add(EntityCondition.makeCondition(dateField,EntityOperator.GREATER_THAN_EQUAL_TO,converted));
      }
    }
 catch (    GeneralException e) {
      Debug.logWarning(e.getMessage(),module);
    }
  }
  String maxDate=(String)context.get("maxDate");
  if (UtilValidate.isNotEmpty(maxDate) && maxDate.length() > 8) {
    maxDate=maxDate.trim();
    if (maxDate.length() < 14)     maxDate=maxDate + " " + "23:59:59.999";
    paramList.add("maxDate=" + maxDate);
    try {
      Object converted=ObjectType.simpleTypeConvert(maxDate,"Timestamp",null,null);
      if (converted != null) {
        conditions.add(EntityCondition.makeCondition("orderDate",EntityOperator.LESS_THAN_EQUAL_TO,converted));
      }
    }
 catch (    GeneralException e) {
      Debug.logWarning(e.getMessage(),module);
    }
  }
  String userLoginId=(String)context.get("userLoginId");
  String partyId=(String)context.get("partyId");
  List roleTypeList=(List)context.get("roleTypeId");
  if (UtilValidate.isNotEmpty(userLoginId) && UtilValidate.isEmpty(partyId)) {
    GenericValue ul=null;
    try {
      ul=delegator.findByPrimaryKeyCache("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
    }
    if (ul != null) {
      partyId=ul.getString("partyId");
    }
  }
  if (roleTypeList != null || partyId != null) {
    dve.addMemberEntity("OT","OrderRole");
    dve.addAlias("OT","partyId");
    dve.addAlias("OT","roleTypeId");
    dve.addViewLink("OH","OT",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("orderId","orderId")));
  }
  if (UtilValidate.isNotEmpty(partyId)) {
    paramList.add("partyId=" + partyId);
    fieldsToSelect.add("partyId");
    conditions.add(makeExpr("partyId",partyId));
  }
  if (roleTypeList != null) {
    fieldsToSelect.add("roleTypeId");
    Iterator i=roleTypeList.iterator();
    List orExprs=FastList.newInstance();
    while (i.hasNext()) {
      String roleTypeId=(String)i.next();
      paramList.add("roleTypeId=" + roleTypeId);
      orExprs.add(makeExpr("roleTypeId",roleTypeId));
    }
    conditions.add(EntityCondition.makeCondition(orExprs,EntityOperator.OR));
  }
  String correspondingPoId=(String)context.get("correspondingPoId");
  String subscriptionId=(String)context.get("subscriptionId");
  String productId=(String)context.get("productId");
  String budgetId=(String)context.get("budgetId");
  String quoteId=(String)context.get("quoteId");
  if (correspondingPoId != null || subscriptionId != null || productId != null || budgetId != null || quoteId != null) {
    dve.addMemberEntity("OI","OrderItem");
    dve.addAlias("OI","correspondingPoId");
    dve.addAlias("OI","subscriptionId");
    dve.addAlias("OI","productId");
    dve.addAlias("OI","budgetId");
    dve.addAlias("OI","quoteId");
    dve.addViewLink("OH","OI",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("orderId","orderId")));
  }
  if (UtilValidate.isNotEmpty(correspondingPoId)) {
    paramList.add("correspondingPoId=" + correspondingPoId);
    conditions.add(makeExpr("correspondingPoId",correspondingPoId));
  }
  if (UtilValidate.isNotEmpty(subscriptionId)) {
    paramList.add("subscriptionId=" + subscriptionId);
    conditions.add(makeExpr("subscriptionId",subscriptionId));
  }
  if (UtilValidate.isNotEmpty(productId)) {
    paramList.add("productId=" + productId);
    if (productId.startsWith("%") || productId.startsWith("*") || productId.endsWith("%")|| productId.endsWith("*")) {
      conditions.add(makeExpr("productId",productId));
    }
 else {
      GenericValue product=null;
      try {
        product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e.getMessage(),module);
      }
      if (product != null) {
        String isVirtual=product.getString("isVirtual");
        if (isVirtual != null && "Y".equals(isVirtual)) {
          List orExprs=FastList.newInstance();
          orExprs.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));
          Map varLookup=null;
          try {
            varLookup=dispatcher.runSync("getAllProductVariants",UtilMisc.toMap("productId",productId));
          }
 catch (          GenericServiceException e) {
            Debug.logWarning(e.getMessage(),module);
          }
          List variants=(List)varLookup.get("assocProducts");
          if (variants != null) {
            Iterator i=variants.iterator();
            while (i.hasNext()) {
              GenericValue v=(GenericValue)i.next();
              orExprs.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,v.getString("productIdTo")));
            }
          }
          conditions.add(EntityCondition.makeCondition(orExprs,EntityOperator.OR));
        }
 else {
          conditions.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));
        }
      }
    }
  }
  if (UtilValidate.isNotEmpty(budgetId)) {
    paramList.add("budgetId=" + budgetId);
    conditions.add(makeExpr("budgetId",budgetId));
  }
  if (UtilValidate.isNotEmpty(quoteId)) {
    paramList.add("quoteId=" + quoteId);
    conditions.add(makeExpr("quoteId",quoteId));
  }
  String billingAccountId=(String)context.get("billingAccountId");
  String finAccountId=(String)context.get("finAccountId");
  String cardNumber=(String)context.get("cardNumber");
  String accountNumber=(String)context.get("accountNumber");
  if (billingAccountId != null || finAccountId != null || cardNumber != null || accountNumber != null) {
    dve.addMemberEntity("OP","OrderPaymentPreference");
    dve.addAlias("OP","billingAccountId");
    dve.addAlias("OP","finAccountId");
    dve.addAlias("OP","paymentMethodId");
    dve.addViewLink("OH","OP",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("orderId","orderId")));
  }
  if (UtilValidate.isNotEmpty(billingAccountId)) {
    paramList.add("billingAccountId=" + billingAccountId);
    conditions.add(makeExpr("billingAccountId",billingAccountId));
  }
  if (UtilValidate.isNotEmpty(finAccountId)) {
    paramList.add("finAccountId=" + finAccountId);
    conditions.add(makeExpr("finAccountId",finAccountId));
  }
  if (UtilValidate.isNotEmpty(cardNumber)) {
    dve.addMemberEntity("CC","CreditCard");
    dve.addAlias("CC","cardNumber");
    dve.addViewLink("OP","CC",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("paymentMethodId","paymentMethodId")));
    paramList.add("cardNumber=" + cardNumber);
    conditions.add(makeExpr("cardNumber",cardNumber));
  }
  if (UtilValidate.isNotEmpty(accountNumber)) {
    dve.addMemberEntity("EF","EftAccount");
    dve.addAlias("EF","accountNumber");
    dve.addViewLink("OP","EF",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("paymentMethodId","paymentMethodId")));
    paramList.add("accountNumber=" + accountNumber);
    conditions.add(makeExpr("accountNumber",accountNumber));
  }
  String inventoryItemId=(String)context.get("inventoryItemId");
  String softIdentifier=(String)context.get("softIdentifier");
  String serialNumber=(String)context.get("serialNumber");
  String shipmentId=(String)context.get("shipmentId");
  if (shipmentId != null || inventoryItemId != null || softIdentifier != null || serialNumber != null) {
    dve.addMemberEntity("II","ItemIssuance");
    dve.addAlias("II","shipmentId");
    dve.addAlias("II","inventoryItemId");
    dve.addViewLink("OH","II",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("orderId","orderId")));
    if (softIdentifier != null || serialNumber != null) {
      dve.addMemberEntity("IV","InventoryItem");
      dve.addAlias("IV","softIdentifier");
      dve.addAlias("IV","serialNumber");
      dve.addViewLink("II","IV",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("inventoryItemId","inventoryItemId")));
    }
  }
  if (UtilValidate.isNotEmpty(inventoryItemId)) {
    paramList.add("inventoryItemId=" + inventoryItemId);
    conditions.add(makeExpr("inventoryItemId",inventoryItemId));
  }
  if (UtilValidate.isNotEmpty(softIdentifier)) {
    paramList.add("softIdentifier=" + softIdentifier);
    conditions.add(makeExpr("softIdentifier",softIdentifier,true));
  }
  if (UtilValidate.isNotEmpty(serialNumber)) {
    paramList.add("serialNumber=" + serialNumber);
    conditions.add(makeExpr("serialNumber",serialNumber,true));
  }
  if (UtilValidate.isNotEmpty(shipmentId)) {
    paramList.add("shipmentId=" + shipmentId);
    conditions.add(makeExpr("shipmentId",shipmentId));
  }
  String hasBackOrders=(String)context.get("hasBackOrders");
  if (UtilValidate.isNotEmpty(hasBackOrders)) {
    dve.addMemberEntity("IR","OrderItemShipGrpInvRes");
    dve.addAlias("IR","quantityNotAvailable");
    dve.addViewLink("OH","IR",Boolean.FALSE,UtilMisc.toList(new ModelKeyMap("orderId","orderId")));
    paramList.add("hasBackOrders=" + hasBackOrders);
    if ("Y".equals(hasBackOrders)) {
      conditions.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.NOT_EQUAL,null));
      conditions.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.GREATER_THAN,BigDecimal.ZERO));
    }
 else     if ("N".equals(hasBackOrders)) {
      List orExpr=FastList.newInstance();
      orExpr.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.EQUALS,null));
      orExpr.add(EntityCondition.makeCondition("quantityNotAvailable",EntityOperator.EQUALS,BigDecimal.ZERO));
      conditions.add(EntityCondition.makeCondition(orExpr,EntityOperator.OR));
    }
  }
  EntityFindOptions findOpts=new EntityFindOptions(true,EntityFindOptions.TYPE_SCROLL_INSENSITIVE,EntityFindOptions.CONCUR_READ_ONLY,true);
  EntityCondition cond=null;
  if (conditions.size() > 0 || showAll.equalsIgnoreCase("Y")) {
    cond=EntityCondition.makeCondition(conditions,EntityOperator.AND);
  }
  if (Debug.verboseOn()) {
    Debug.log("Find order query: " + cond.toString());
  }
  List orderList=FastList.newInstance();
  int orderCount=0;
  int lowIndex=(((viewIndex.intValue() - 1) * viewSize.intValue()) + 1);
  int highIndex=viewIndex.intValue() * viewSize.intValue();
  if (cond != null) {
    EntityListIterator eli=null;
    try {
      eli=delegator.findListIteratorByCondition(dve,cond,null,fieldsToSelect,orderBy,findOpts);
      eli.last();
      orderCount=eli.currentIndex();
      eli.beforeFirst();
      if (orderCount > viewSize.intValue()) {
        orderList=eli.getPartialList(lowIndex,viewSize.intValue());
      }
 else       if (orderCount > 0) {
        orderList=eli.getCompleteList();
      }
      if (highIndex > orderCount) {
        highIndex=orderCount;
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
 finally {
      if (eli != null) {
        try {
          eli.close();
        }
 catch (        GenericEntityException e) {
          Debug.logWarning(e,e.getMessage(),module);
        }
      }
    }
  }
  Map result=ServiceUtil.returnSuccess();
  filterInventoryProblems(context,result,orderList,paramList);
  String paramString=StringUtil.join(paramList,"&amp;");
  result.put("highIndex",Integer.valueOf(highIndex));
  result.put("lowIndex",Integer.valueOf(lowIndex));
  result.put("viewIndex",viewIndex);
  result.put("viewSize",viewSize);
  result.put("showAll",showAll);
  result.put("paramList",(paramString != null ? paramString : ""));
  result.put("orderList",orderList);
  result.put("orderListSize",Integer.valueOf(orderCount));
  return result;
}
