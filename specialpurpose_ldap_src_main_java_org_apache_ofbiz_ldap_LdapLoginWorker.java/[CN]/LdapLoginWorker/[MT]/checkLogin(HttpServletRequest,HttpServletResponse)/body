{
  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");
  if (userLogin != null && "anonymous".equals(userLogin.getString("userLoginId"))) {
    userLogin=null;
  }
  if (userLogin != null) {
    Element rootElement=getRootElement(request);
    boolean hasLdapLoggedOut=false;
    if (rootElement != null) {
      String className=UtilXml.childElementValue(rootElement,"AuthenticationHandler","org.apache.ofbiz.ldap.openldap.OFBizLdapAuthenticationHandler");
      try {
        Class<?> handlerClass=Class.forName(className);
        InterfaceOFBizAuthenticationHandler authenticationHandler=(InterfaceOFBizAuthenticationHandler)handlerClass.newInstance();
        hasLdapLoggedOut=authenticationHandler.hasLdapLoggedOut(request,response,rootElement);
      }
 catch (      ClassNotFoundException e) {
        Debug.logError(e,"Error calling checkLogin service",module);
        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
      }
catch (      InstantiationException e) {
        Debug.logError(e,"Error calling checkLogin service",module);
        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
      }
catch (      IllegalAccessException e) {
        Debug.logError(e,"Error calling checkLogin service",module);
        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
      }
catch (      Exception e) {
        Debug.logError(e,"Error calling checkLogin service",module);
        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());
        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
      }
    }
    if (!hasBasePermission(userLogin,request) || isFlaggedLoggedOut(userLogin,userLogin.getDelegator()) || hasLdapLoggedOut) {
      Debug.logInfo("User does not have permission or is flagged as logged out",module);
      doBasicLogout(userLogin,request,response);
      userLogin=null;
    }
  }
  if (userLogin == null) {
    return login(request,response);
  }
  return "success";
}
