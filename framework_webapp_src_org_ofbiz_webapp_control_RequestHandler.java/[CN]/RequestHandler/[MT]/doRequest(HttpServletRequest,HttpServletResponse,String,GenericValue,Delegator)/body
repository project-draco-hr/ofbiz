{
  HttpSession session=request.getSession();
  ConfigXMLReader.ControllerConfig controllerConfig=this.getControllerConfig();
  Map<String,ConfigXMLReader.RequestMap> requestMapMap=controllerConfig.getRequestMapMap();
  String cname=UtilHttp.getApplicationName(request);
  String defaultRequestUri=RequestHandler.getRequestUri(request.getPathInfo());
  if (request.getAttribute("targetRequestUri") == null) {
    if (request.getSession().getAttribute("_PREVIOUS_REQUEST_") != null) {
      request.setAttribute("targetRequestUri",request.getSession().getAttribute("_PREVIOUS_REQUEST_"));
    }
 else {
      request.setAttribute("targetRequestUri","/" + defaultRequestUri);
    }
  }
  String overrideViewUri=RequestHandler.getOverrideViewUri(request.getPathInfo());
  String requestMissingErrorMessage="Unknown request [" + defaultRequestUri + "]; this request does not exist or cannot be called directly.";
  ConfigXMLReader.RequestMap requestMap=null;
  if (defaultRequestUri != null) {
    requestMap=requestMapMap.get(defaultRequestUri);
  }
  if (requestMap == null) {
    String defaultRequest=controllerConfig.getDefaultRequest();
    if (defaultRequest != null) {
      requestMap=requestMapMap.get(defaultRequest);
    }
  }
  if (requestMap == null) {
    throw new RequestHandlerException(requestMissingErrorMessage);
  }
  String eventReturn=null;
  boolean interruptRequest=false;
  if (chain != null) {
    String chainRequestUri=RequestHandler.getRequestUri(chain);
    requestMap=requestMapMap.get(chainRequestUri);
    if (requestMap == null) {
      throw new RequestHandlerException("Unknown chained request [" + chainRequestUri + "]; this request does not exist");
    }
    if (request.getAttribute("_POST_CHAIN_VIEW_") != null) {
      overrideViewUri=(String)request.getAttribute("_POST_CHAIN_VIEW_");
    }
 else {
      overrideViewUri=RequestHandler.getOverrideViewUri(chain);
    }
    if (overrideViewUri != null) {
      request.setAttribute("_CURRENT_CHAIN_VIEW_",overrideViewUri);
    }
    if (Debug.infoOn())     Debug.logInfo("[RequestHandler]: Chain in place: requestUri=" + chainRequestUri + " overrideViewUri="+ overrideViewUri+ " sessionId="+ UtilHttp.getSessionId(request),module);
  }
 else {
    if (!request.isSecure() && requestMap.securityCert) {
      throw new RequestHandlerException(requestMissingErrorMessage);
    }
    if (!requestMap.securityDirectRequest) {
      String defaultRequest=controllerConfig.getDefaultRequest();
      if (defaultRequest == null || !requestMapMap.get(defaultRequest).securityDirectRequest) {
        throw new RequestHandlerException(requestMissingErrorMessage);
      }
 else {
        requestMap=requestMapMap.get(defaultRequest);
      }
    }
    boolean forceHttpSession="true".equals(context.getInitParameter("forceHttpSession"));
    if (!request.isSecure() && requestMap.securityHttps) {
      if (request.getMethod().equalsIgnoreCase("POST")) {
        Locale locale=UtilHttp.getLocale(request);
        String errMsg=UtilProperties.getMessage("WebappUiLabels","requestHandler.InsecureFormPostToSecureRequest",locale);
        Debug.logError("Got a insecure (non-https) form POST to a secure (http) request [" + requestMap.uri + "], returning error",module);
        Boolean enableHttps=null;
        String webSiteId=WebSiteWorker.getWebSiteId(request);
        if (webSiteId != null) {
          try {
            GenericValue webSite=delegator.findByPrimaryKeyCache("WebSite",UtilMisc.toMap("webSiteId",webSiteId));
            if (webSite != null)             enableHttps=webSite.getBoolean("enableHttps");
          }
 catch (          GenericEntityException e) {
            Debug.logWarning(e,"Problems with WebSite entity; using global defaults",module);
          }
        }
        if (enableHttps == null) {
          enableHttps=UtilProperties.propertyValueEqualsIgnoreCase("url.properties","port.https.enabled","Y");
        }
        if (Boolean.FALSE.equals(enableHttps)) {
          Debug.logWarning("HTTPS is disabled for this site, so we can't tell if this was encrypted or not which means if a form was POSTed and it was not over HTTPS we don't know, but it would be vulnerable to an XSRF and other attacks: " + errMsg,module);
        }
 else {
          throw new RequestHandlerException(errMsg);
        }
      }
 else {
        StringBuilder urlBuf=new StringBuilder();
        urlBuf.append(request.getPathInfo());
        if (request.getQueryString() != null) {
          urlBuf.append("?").append(request.getQueryString());
        }
        String newUrl=RequestHandler.makeUrl(request,response,urlBuf.toString());
        if (newUrl.toUpperCase().startsWith("HTTPS")) {
          callRedirect(newUrl,response,request);
          return;
        }
      }
    }
 else     if (forceHttpSession && request.isSecure() && session.isNew()&& !requestMap.securityHttps) {
      StringBuilder urlBuf=new StringBuilder();
      urlBuf.append(request.getPathInfo());
      if (request.getQueryString() != null) {
        urlBuf.append("?").append(request.getQueryString());
      }
      String newUrl=RequestHandler.makeUrl(request,response,urlBuf.toString(),true,false,false);
      if (newUrl.toUpperCase().startsWith("HTTP")) {
        callRedirect(newUrl,response,request);
        return;
      }
    }
    if (request.isSecure() && requestMap.securityCert) {
      X509Certificate[] clientCerts=(X509Certificate[])request.getAttribute("javax.servlet.request.X509Certificate");
      if (clientCerts == null) {
        clientCerts=(X509Certificate[])request.getAttribute("javax.net.ssl.peer_certificates");
      }
      if (clientCerts == null) {
        Debug.logWarning("Received no client certificates from browser",module);
      }
      boolean foundTrustedCert=false;
      if (clientCerts == null) {
        throw new RequestHandlerException(requestMissingErrorMessage);
      }
 else {
        if (Debug.infoOn()) {
          for (int i=0; i < clientCerts.length; i++) {
            Debug.logInfo(clientCerts[i].getSubjectX500Principal().getName(),module);
          }
        }
        if (SSLUtil.isClientTrusted(clientCerts,null)) {
          foundTrustedCert=true;
        }
      }
      if (!foundTrustedCert) {
        Debug.logWarning(requestMissingErrorMessage,module);
        throw new RequestHandlerException(requestMissingErrorMessage);
      }
    }
    if (this.trackVisit(request) && session.getAttribute("_FIRST_VISIT_EVENTS_") == null) {
      if (Debug.infoOn())       Debug.logInfo("This is the first request in this visit." + " sessionId=" + UtilHttp.getSessionId(request),module);
      session.setAttribute("_FIRST_VISIT_EVENTS_","complete");
      for (      ConfigXMLReader.Event event : controllerConfig.getFirstVisitEventList().values()) {
        try {
          String returnString=this.runEvent(request,response,event,null,"firstvisit");
          if (returnString != null && !returnString.equalsIgnoreCase("success")) {
            throw new EventHandlerException("First-Visit event did not return 'success'.");
          }
 else           if (returnString == null) {
            interruptRequest=true;
          }
        }
 catch (        EventHandlerException e) {
          Debug.logError(e,module);
        }
      }
    }
    for (    ConfigXMLReader.Event event : controllerConfig.getPreprocessorEventList().values()) {
      try {
        String returnString=this.runEvent(request,response,event,null,"preprocessor");
        if (returnString != null && !returnString.equalsIgnoreCase("success")) {
          if (!returnString.contains(":_protect_:")) {
            throw new EventHandlerException("Pre-Processor event [" + event.invoke + "] did not return 'success'.");
          }
 else {
            returnString=returnString.replace(":_protect_:","");
            if (returnString.length() > 0) {
              request.setAttribute("_ERROR_MESSAGE_",returnString);
            }
            eventReturn="protect";
            if (!requestMap.requestResponseMap.containsKey("protect")) {
              String protectView=controllerConfig.getProtectView();
              if (protectView != null) {
                overrideViewUri=protectView;
              }
 else {
                overrideViewUri=UtilProperties.getPropertyValue("security.properties","default.error.response.view");
              }
            }
          }
        }
 else         if (returnString == null) {
          interruptRequest=true;
        }
      }
 catch (      EventHandlerException e) {
        Debug.logError(e,module);
      }
    }
  }
  if (interruptRequest) {
    if (Debug.infoOn())     Debug.logInfo("[Pre-Processor Interrupted Request, not running: [" + requestMap.uri + "], sessionId="+ UtilHttp.getSessionId(request),module);
    return;
  }
  if (Debug.verboseOn())   Debug.logVerbose("[Processing Request]: " + requestMap.uri + " sessionId="+ UtilHttp.getSessionId(request),module);
  request.setAttribute("thisRequestUri",requestMap.uri);
  if (requestMap.securityAuth) {
    if (Debug.verboseOn())     Debug.logVerbose("[RequestHandler]: AuthRequired. Running security check. sessionId=" + UtilHttp.getSessionId(request),module);
    ConfigXMLReader.Event checkLoginEvent=requestMapMap.get("checkLogin").event;
    String checkLoginReturnString=null;
    try {
      checkLoginReturnString=this.runEvent(request,response,checkLoginEvent,null,"security-auth");
    }
 catch (    EventHandlerException e) {
      throw new RequestHandlerException(e.getMessage(),e);
    }
    if (!"success".equalsIgnoreCase(checkLoginReturnString)) {
      eventReturn=checkLoginReturnString;
      requestMap=requestMapMap.get("checkLogin");
    }
  }
  if (request.getSession().getAttribute("_PREVIOUS_PARAM_MAP_FORM_") != null && request.getSession().getAttribute("_PREVIOUS_REQUEST_") == null) {
    Map<String,Object> previousParamMap=UtilGenerics.checkMap(request.getSession().getAttribute("_PREVIOUS_PARAM_MAP_FORM_"),String.class,Object.class);
    for (    Map.Entry<String,Object> previousParamEntry : previousParamMap.entrySet()) {
      request.setAttribute(previousParamEntry.getKey(),previousParamEntry.getValue());
    }
    request.getSession().removeAttribute("_PREVIOUS_PARAM_MAP_FORM_");
  }
  ConfigXMLReader.RequestResponse nextRequestResponse=null;
  if (eventReturn == null && requestMap.event != null) {
    if (requestMap.event.type != null && requestMap.event.path != null && requestMap.event.invoke != null) {
      try {
        long eventStartTime=System.currentTimeMillis();
        eventReturn=this.runEvent(request,response,requestMap.event,requestMap,"request");
        if (this.trackStats(request)) {
          ServerHitBin.countEvent(cname + "." + requestMap.event.invoke,request,eventStartTime,System.currentTimeMillis() - eventStartTime,userLogin);
        }
        if (eventReturn == null) {
          nextRequestResponse=ConfigXMLReader.emptyNoneRequestResponse;
        }
      }
 catch (      EventHandlerException e) {
        if (requestMap.requestResponseMap.containsKey("error")) {
          eventReturn="error";
          Locale locale=UtilHttp.getLocale(request);
          String errMsg=UtilProperties.getMessage("WebappUiLabels","requestHandler.error_call_event",locale);
          request.setAttribute("_ERROR_MESSAGE_",errMsg + ": " + e.toString());
        }
 else {
          throw new RequestHandlerException("Error calling event and no error response was specified",e);
        }
      }
    }
  }
  ConfigXMLReader.RequestResponse eventReturnBasedRequestResponse=eventReturn == null ? null : requestMap.requestResponseMap.get(eventReturn);
  if (eventReturnBasedRequestResponse != null) {
    if (Debug.verboseOn())     Debug.logVerbose("[Response Qualified]: " + eventReturnBasedRequestResponse.name + ", "+ eventReturnBasedRequestResponse.type+ ":"+ eventReturnBasedRequestResponse.value+ " sessionId="+ UtilHttp.getSessionId(request),module);
    if ("error".equals(eventReturnBasedRequestResponse.name)) {
      if (Debug.errorOn()) {
        String errorMessageHeader="Request " + requestMap.uri + " caused an error with the following message: ";
        if (request.getAttribute("_ERROR_MESSAGE_") != null) {
          Debug.logError(errorMessageHeader + request.getAttribute("_ERROR_MESSAGE_"),module);
        }
        if (request.getAttribute("_ERROR_MESSAGE_LIST_") != null) {
          Debug.logError(errorMessageHeader + request.getAttribute("_ERROR_MESSAGE_LIST_"),module);
        }
      }
    }
  }
 else   if (eventReturn != null) {
    Debug.logWarning("Could not find response in request [" + requestMap.uri + "] for event return ["+ eventReturn+ "]",module);
  }
  if (eventReturnBasedRequestResponse != null && (!"success".equals(eventReturnBasedRequestResponse.name) || "none".equals(eventReturnBasedRequestResponse.type)))   nextRequestResponse=eventReturnBasedRequestResponse;
  String previousRequest=(String)request.getSession().getAttribute("_PREVIOUS_REQUEST_");
  String loginPass=(String)request.getAttribute("_LOGIN_PASSED_");
  String preReqAttStr=(String)request.getSession().getAttribute("_REQ_ATTR_MAP_");
  Map<String,Object> previousRequestAttrMap=null;
  if (preReqAttStr != null) {
    previousRequestAttrMap=FastMap.newInstance();
    request.getSession().removeAttribute("_REQ_ATTR_MAP_");
    byte[] reqAttrMapBytes=StringUtil.fromHexString(preReqAttStr);
    Map<String,Object> preRequestMap=checkMap(UtilObject.getObject(reqAttrMapBytes),String.class,Object.class);
    if (UtilValidate.isNotEmpty(preRequestMap)) {
      for (      Map.Entry<String,Object> entry : preRequestMap.entrySet()) {
        String key=entry.getKey();
        if ("_ERROR_MESSAGE_LIST_".equals(key) || "_ERROR_MESSAGE_MAP_".equals(key) || "_ERROR_MESSAGE_".equals(key)|| "_EVENT_MESSAGE_LIST_".equals(key)|| "_EVENT_MESSAGE_".equals(key)) {
          request.setAttribute(key,entry.getValue());
          previousRequestAttrMap.put(key,entry.getValue());
        }
      }
    }
  }
  if (Debug.verboseOn())   Debug.logVerbose("[RequestHandler]: previousRequest - " + previousRequest + " ("+ loginPass+ ")"+ " sessionId="+ UtilHttp.getSessionId(request),module);
  if (previousRequest != null && loginPass != null && loginPass.equalsIgnoreCase("TRUE")) {
    request.getSession().removeAttribute("_PREVIOUS_REQUEST_");
    if ("logout".equals(previousRequest) || "/logout".equals(previousRequest) || "login".equals(previousRequest)|| "/login".equals(previousRequest)|| "checkLogin".equals(previousRequest)|| "/checkLogin".equals(previousRequest)|| "/checkLogin/login".equals(previousRequest)) {
      Debug.logWarning("Found special _PREVIOUS_REQUEST_ of [" + previousRequest + "], setting to null to avoid problems, not running request again",module);
    }
 else {
      if (Debug.infoOn())       Debug.logInfo("[Doing Previous Request]: " + previousRequest + " sessionId="+ UtilHttp.getSessionId(request),module);
      Map<String,Object> previousParamMap=UtilGenerics.checkMap(request.getSession().getAttribute("_PREVIOUS_PARAM_MAP_URL_"),String.class,Object.class);
      String queryString=UtilHttp.urlEncodeArgs(previousParamMap,false);
      String redirectTarget=previousRequest;
      if (UtilValidate.isNotEmpty(queryString)) {
        redirectTarget+="?" + queryString;
      }
      callRedirect(makeLink(request,response,redirectTarget),response,request);
      return;
    }
  }
  ConfigXMLReader.RequestResponse successResponse=requestMap.requestResponseMap.get("success");
  if ((eventReturn == null || "success".equals(eventReturn)) && successResponse != null && "request".equals(successResponse.type)) {
    if (UtilValidate.isNotEmpty(overrideViewUri)) {
      request.setAttribute("_POST_CHAIN_VIEW_",overrideViewUri);
    }
    nextRequestResponse=successResponse;
  }
  if (nextRequestResponse == null)   nextRequestResponse=successResponse;
  if (nextRequestResponse == null) {
    throw new RequestHandlerException("Illegal response; handler could not process request [" + requestMap.uri + "] and event return ["+ eventReturn+ "].");
  }
  if (Debug.verboseOn())   Debug.logVerbose("[Event Response Selected]  type=" + nextRequestResponse.type + ", value="+ nextRequestResponse.value+ ", sessionId="+ UtilHttp.getSessionId(request),module);
  if (nextRequestResponse.saveLastView) {
    String lastViewName=(String)session.getAttribute("_LAST_VIEW_NAME_");
    if (!(!nextRequestResponse.saveCurrentView && "view".equals(nextRequestResponse.type) && nextRequestResponse.value.equals(lastViewName))) {
      session.setAttribute("_SAVED_VIEW_NAME_",session.getAttribute("_LAST_VIEW_NAME_"));
      session.setAttribute("_SAVED_VIEW_PARAMS_",session.getAttribute("_LAST_VIEW_PARAMS_"));
    }
  }
  String saveName=null;
  if (nextRequestResponse.saveCurrentView) {
    saveName="SAVED";
  }
  if (nextRequestResponse.saveHomeView) {
    saveName="HOME";
  }
  if ("request".equals(nextRequestResponse.type)) {
    Debug.logInfo("[RequestHandler.doRequest]: Response is a chained request." + " sessionId=" + UtilHttp.getSessionId(request),module);
    doRequest(request,response,nextRequestResponse.value,userLogin,delegator);
  }
 else {
    for (    ConfigXMLReader.Event event : controllerConfig.getPostprocessorEventList().values()) {
      try {
        String returnString=this.runEvent(request,response,event,requestMap,"postprocessor");
        if (returnString != null && !returnString.equalsIgnoreCase("success")) {
          throw new EventHandlerException("Post-Processor event did not return 'success'.");
        }
      }
 catch (      EventHandlerException e) {
        Debug.logError(e,module);
      }
    }
    if ("url".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a URL redirect." + " sessionId=" + UtilHttp.getSessionId(request),module);
      callRedirect(nextRequestResponse.value,response,request);
    }
 else     if ("cross-redirect".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a Cross-Application redirect." + " sessionId=" + UtilHttp.getSessionId(request),module);
      String url=nextRequestResponse.value.startsWith("/") ? nextRequestResponse.value : "/" + nextRequestResponse.value;
      callRedirect(url + this.makeQueryString(request,nextRequestResponse),response,request);
    }
 else     if ("request-redirect".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a Request redirect." + " sessionId=" + UtilHttp.getSessionId(request),module);
      callRedirect(makeLinkWithQueryString(request,response,"/" + nextRequestResponse.value,nextRequestResponse),response,request);
    }
 else     if ("request-redirect-noparam".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a Request redirect with no parameters." + " sessionId=" + UtilHttp.getSessionId(request),module);
      callRedirect(makeLink(request,response,nextRequestResponse.value),response,request);
    }
 else     if ("view".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a view." + " sessionId=" + UtilHttp.getSessionId(request),module);
      String viewName=(UtilValidate.isNotEmpty(overrideViewUri) && (eventReturn == null || "success".equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value;
      renderView(viewName,requestMap.securityExternalView,request,response,saveName);
    }
 else     if ("view-last".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a view." + " sessionId=" + UtilHttp.getSessionId(request),module);
      String viewName=(UtilValidate.isNotEmpty(overrideViewUri) && (eventReturn == null || "success".equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value;
      Map<String,Object> urlParams=null;
      if (session.getAttribute("_SAVED_VIEW_NAME_") != null) {
        viewName=(String)session.getAttribute("_SAVED_VIEW_NAME_");
        urlParams=UtilGenerics.<String,Object>checkMap(session.getAttribute("_SAVED_VIEW_PARAMS_"));
      }
 else       if (session.getAttribute("_HOME_VIEW_NAME_") != null) {
        viewName=(String)session.getAttribute("_HOME_VIEW_NAME_");
        urlParams=UtilGenerics.<String,Object>checkMap(session.getAttribute("_HOME_VIEW_PARAMS_"));
      }
 else       if (session.getAttribute("_LAST_VIEW_NAME_") != null) {
        viewName=(String)session.getAttribute("_LAST_VIEW_NAME_");
        urlParams=UtilGenerics.<String,Object>checkMap(session.getAttribute("_LAST_VIEW_PARAMS_"));
      }
 else       if (UtilValidate.isNotEmpty(nextRequestResponse.value)) {
        viewName=nextRequestResponse.value;
      }
      if (urlParams != null) {
        for (        Map.Entry<String,Object> urlParamEntry : urlParams.entrySet()) {
          String key=urlParamEntry.getKey();
          if (!("_EVENT_MESSAGE_".equals(key) || "_ERROR_MESSAGE_".equals(key) || "_EVENT_MESSAGE_LIST_".equals(key)|| "_ERROR_MESSAGE_LIST_".equals(key))) {
            request.setAttribute(key,urlParamEntry.getValue());
          }
        }
      }
      renderView(viewName,requestMap.securityExternalView,request,response,null);
    }
 else     if ("view-last-noparam".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a view." + " sessionId=" + UtilHttp.getSessionId(request),module);
      String viewName=(UtilValidate.isNotEmpty(overrideViewUri) && (eventReturn == null || "success".equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value;
      if (session.getAttribute("_SAVED_VIEW_NAME_") != null) {
        viewName=(String)session.getAttribute("_SAVED_VIEW_NAME_");
      }
 else       if (session.getAttribute("_HOME_VIEW_NAME_") != null) {
        viewName=(String)session.getAttribute("_HOME_VIEW_NAME_");
      }
 else       if (session.getAttribute("_LAST_VIEW_NAME_") != null) {
        viewName=(String)session.getAttribute("_LAST_VIEW_NAME_");
      }
 else       if (UtilValidate.isNotEmpty(nextRequestResponse.value)) {
        viewName=nextRequestResponse.value;
      }
      renderView(viewName,requestMap.securityExternalView,request,response,null);
    }
 else     if ("view-home".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is a view." + " sessionId=" + UtilHttp.getSessionId(request),module);
      String viewName=(UtilValidate.isNotEmpty(overrideViewUri) && (eventReturn == null || "success".equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value;
      Map<String,Object> urlParams=null;
      if (session.getAttribute("_HOME_VIEW_NAME_") != null) {
        viewName=(String)session.getAttribute("_HOME_VIEW_NAME_");
        urlParams=UtilGenerics.<String,Object>checkMap(session.getAttribute("_HOME_VIEW_PARAMS_"));
      }
      if (urlParams != null) {
        for (        Map.Entry<String,Object> urlParamEntry : urlParams.entrySet()) {
          request.setAttribute(urlParamEntry.getKey(),urlParamEntry.getValue());
        }
      }
      renderView(viewName,requestMap.securityExternalView,request,response,null);
    }
 else     if ("none".equals(nextRequestResponse.type)) {
      if (Debug.verboseOn())       Debug.logVerbose("[RequestHandler.doRequest]: Response is handled by the event." + " sessionId=" + UtilHttp.getSessionId(request),module);
    }
  }
}
