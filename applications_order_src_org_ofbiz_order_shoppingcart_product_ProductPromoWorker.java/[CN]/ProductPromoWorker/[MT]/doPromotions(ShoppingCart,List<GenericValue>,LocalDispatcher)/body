{
  if (!cart.getDoPromotions()) {
    return;
  }
  Delegator delegator=cart.getDelegator();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  cart.clearAllPromotionInformation();
  try {
    if (productPromoList == null) {
      if (cart.getOrderType().equals("SALES_ORDER")) {
        productPromoList=ProductPromoWorker.getProductStorePromotions(cart,nowTimestamp,dispatcher);
      }
 else {
        productPromoList=ProductPromoWorker.getAgreementPromotions(cart,nowTimestamp,dispatcher);
      }
    }
    runProductPromos(productPromoList,cart,delegator,dispatcher,nowTimestamp,true);
    Iterator<ProductPromoUseInfo> promoUses=cart.getProductPromoUseInfoIter();
    List<ProductPromoUseInfo> sortedPromoUses=new ArrayList<ProductPromoUseInfo>();
    while (promoUses.hasNext()) {
      ProductPromoUseInfo promoUse=promoUses.next();
      sortedPromoUses.add(promoUse);
    }
    Collections.sort(sortedPromoUses);
    List<GenericValue> sortedExplodedProductPromoList=new ArrayList<GenericValue>(sortedPromoUses.size());
    Map<String,Long> usesPerPromo=new HashMap<String,Long>();
    int indexOfFirstOrderTotalPromo=-1;
    for (    ProductPromoUseInfo promoUse : sortedPromoUses) {
      GenericValue productPromo=delegator.findOne("ProductPromo",UtilMisc.toMap("productPromoId",promoUse.getProductPromoId()),true);
      GenericValue newProductPromo=(GenericValue)productPromo.clone();
      if (!usesPerPromo.containsKey(promoUse.getProductPromoId())) {
        usesPerPromo.put(promoUse.getProductPromoId(),0l);
      }
      long uses=usesPerPromo.get(promoUse.getProductPromoId());
      uses=uses + 1;
      long useLimitPerOrder=(newProductPromo.get("useLimitPerOrder") != null ? newProductPromo.getLong("useLimitPerOrder") : -1);
      if (useLimitPerOrder == -1 || uses < useLimitPerOrder) {
        newProductPromo.set("useLimitPerOrder",uses);
      }
      usesPerPromo.put(promoUse.getProductPromoId(),uses);
      sortedExplodedProductPromoList.add(newProductPromo);
      if (indexOfFirstOrderTotalPromo == -1 && BigDecimal.ZERO.equals(promoUse.getUsageWeight())) {
        indexOfFirstOrderTotalPromo=sortedExplodedProductPromoList.size() - 1;
      }
    }
    if (indexOfFirstOrderTotalPromo == -1) {
      indexOfFirstOrderTotalPromo=sortedExplodedProductPromoList.size() - 1;
    }
    for (    GenericValue productPromo : productPromoList) {
      Map<Object,Object> productPromoDiscountMap=UtilGenerics.checkMap(UtilMisc.toMap("productPromo",productPromo,"totalDiscountAmount",cart.getProductPromoUseTotalDiscount(productPromo.getString("productPromoId"))));
      if (hasOrderTotalCondition(productPromo,delegator)) {
        if (!usesPerPromo.containsKey(productPromo.getString("productPromoId"))) {
          sortedExplodedProductPromoList.add(productPromo);
        }
      }
 else {
        if (!usesPerPromo.containsKey(productPromo.getString("productPromoId"))) {
          if (indexOfFirstOrderTotalPromo != -1) {
            sortedExplodedProductPromoList.add(indexOfFirstOrderTotalPromo,productPromo);
          }
 else {
            sortedExplodedProductPromoList.add(0,productPromo);
          }
        }
      }
    }
    cart.clearAllPromotionInformation();
    runProductPromos(sortedExplodedProductPromoList,cart,delegator,dispatcher,nowTimestamp,false);
  }
 catch (  NumberFormatException e) {
    Debug.logError(e,"Number not formatted correctly in promotion rules, not completed...",module);
  }
catch (  GenericEntityException e) {
    Debug.logError(e,"Error looking up promotion data while doing promotions",module);
  }
catch (  Exception e) {
    Debug.logError(e,"Error running promotions, will ignore: " + e.toString(),module);
  }
}
