{
  List<GenericValue> productPromoList=FastList.newInstance();
  Delegator delegator=cart.getDelegator();
  String agreementId=cart.getAgreementId();
  GenericValue agreement=null;
  try {
    agreement=EntityQuery.use(delegator).from("Agreement").where("agreementId",agreementId).cache().queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error looking up agreement with id " + agreementId,module);
  }
  if (agreement == null) {
    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderNoAgreementFoundWithIdNotDoingPromotions",UtilMisc.toMap("agreementId",agreementId),cart.getLocale()),module);
    return productPromoList;
  }
  GenericValue agreementItem=null;
  try {
    agreementItem=EntityQuery.use(delegator).from("AgreementItem").where("agreementId",agreementId,"agreementItemTypeId","AGREEMENT_PRICING_PR","currencyUomId",cart.getCurrency()).cache(true).queryFirst();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error looking up agreement items for agreement with id " + agreementId,module);
  }
  if (agreementItem == null) {
    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderNoAgreementItemFoundForAgreementWithIdNotDoingPromotions",UtilMisc.toMap("agreementId",agreementId),cart.getLocale()),module);
    return productPromoList;
  }
  try {
    List<GenericValue> agreementPromoApplsList=agreementItem.getRelated("AgreementPromoAppl",null,UtilMisc.toList("sequenceNum"),true);
    agreementPromoApplsList=EntityUtil.filterByDate(agreementPromoApplsList,nowTimestamp);
    if (UtilValidate.isEmpty(agreementPromoApplsList)) {
      if (Debug.verboseOn())       Debug.logVerbose("Not doing promotions, none applied to agreement with ID " + agreementId,module);
    }
    Iterator<GenericValue> agreementPromoAppls=UtilMisc.toIterator(agreementPromoApplsList);
    while (agreementPromoAppls != null && agreementPromoAppls.hasNext()) {
      GenericValue agreementPromoAppl=agreementPromoAppls.next();
      GenericValue productPromo=agreementPromoAppl.getRelatedOne("ProductPromo",true);
      productPromoList.add(productPromo);
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error looking up promotion data while doing promotions",module);
  }
  return productPromoList;
}
