{
  String condValue=productPromoCond.getString("condValue");
  String otherValue=productPromoCond.getString("otherValue");
  String inputParamEnumId=productPromoCond.getString("inputParamEnumId");
  String operatorEnumId=productPromoCond.getString("operatorEnumId");
  String shippingMethod="";
  if (otherValue != null && otherValue.contains("@")) {
    shippingMethod=otherValue.substring(otherValue.indexOf("@") + 1);
    otherValue="";
  }
  String partyId=cart.getPartyId();
  GenericValue userLogin=cart.getUserLogin();
  if (userLogin == null) {
    userLogin=cart.getAutoUserLogin();
  }
  if (Debug.verboseOn())   Debug.logVerbose("Checking promotion condition: " + productPromoCond,module);
  Integer compareBase=null;
  if ("PPIP_SERVICE".equals(inputParamEnumId)) {
    Map<String,Object> serviceCtx=UtilMisc.<String,Object>toMap("productPromoCond",productPromoCond,"shoppingCart",cart,"nowTimestamp",nowTimestamp);
    Map<String,Object> condResult;
    try {
      condResult=dispatcher.runSync(condValue,serviceCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Fatal error calling promo condition check service [" + condValue + "]",module);
      return false;
    }
    if (ServiceUtil.isError(condResult)) {
      Debug.logError("Error calling calling promo condition check service [" + condValue + "]",module);
      return false;
    }
    Boolean directResult=(Boolean)condResult.get("directResult");
    if (directResult != null) {
      return directResult.booleanValue();
    }
    compareBase=(Integer)condResult.get("compareBase");
    if (condResult.containsKey("operatorEnumId")) {
      operatorEnumId=(String)condResult.get("operatorEnumId");
    }
  }
 else   if ("PPIP_PRODUCT_AMOUNT".equals(inputParamEnumId)) {
    operatorEnumId="PPC_EQ";
    BigDecimal amountNeeded=BigDecimal.ZERO;
    if (UtilValidate.isNotEmpty(condValue)) {
      amountNeeded=new BigDecimal(condValue);
    }
    Set productIds=ProductPromoWorker.getPromoRuleCondProductIds(productPromoCond,delegator,nowTimestamp);
    List lineOrderedByBasePriceList=cart.getLineListOrderedByBasePrice(false);
    Iterator lineOrderedByBasePriceIter=lineOrderedByBasePriceList.iterator();
    while (amountNeeded.compareTo(BigDecimal.ZERO) > 0 && lineOrderedByBasePriceIter.hasNext()) {
      ShoppingCartItem cartItem=(ShoppingCartItem)lineOrderedByBasePriceIter.next();
      GenericValue product=cartItem.getProduct();
      String parentProductId=cartItem.getParentProductId();
      boolean passedItemConds=checkConditionsForItem(productPromoCond,cart,cartItem,delegator,dispatcher,nowTimestamp);
      if (passedItemConds && !cartItem.getIsPromo() && (productIds.contains(cartItem.getProductId()) || (parentProductId != null && productIds.contains(parentProductId)))&& (product == null || !"N".equals(product.getString("includeInPromotions")))) {
        BigDecimal basePrice=cartItem.getBasePrice();
        BigDecimal quantityNeeded=amountNeeded.divide(basePrice,generalRounding).setScale(0,BigDecimal.ROUND_CEILING);
        BigDecimal quantity=cartItem.addPromoQuantityCandidateUse(quantityNeeded,productPromoCond,false);
        amountNeeded=amountNeeded.subtract(quantity.multiply(basePrice));
      }
    }
    if (amountNeeded.compareTo(BigDecimal.ZERO) > 0) {
      cart.resetPromoRuleUse(productPromoCond.getString("productPromoId"),productPromoCond.getString("productPromoRuleId"));
      compareBase=Integer.valueOf(-1);
    }
 else {
      compareBase=Integer.valueOf(0);
    }
  }
 else   if ("PPIP_PRODUCT_TOTAL".equals(inputParamEnumId)) {
    if (UtilValidate.isNotEmpty(condValue)) {
      BigDecimal amountNeeded=new BigDecimal(condValue);
      BigDecimal amountAvailable=BigDecimal.ZERO;
      Set productIds=ProductPromoWorker.getPromoRuleCondProductIds(productPromoCond,delegator,nowTimestamp);
      List lineOrderedByBasePriceList=cart.getLineListOrderedByBasePrice(false);
      Iterator lineOrderedByBasePriceIter=lineOrderedByBasePriceList.iterator();
      while (lineOrderedByBasePriceIter.hasNext()) {
        ShoppingCartItem cartItem=(ShoppingCartItem)lineOrderedByBasePriceIter.next();
        GenericValue product=cartItem.getProduct();
        String parentProductId=cartItem.getParentProductId();
        boolean passedItemConds=checkConditionsForItem(productPromoCond,cart,cartItem,delegator,dispatcher,nowTimestamp);
        if (passedItemConds && !cartItem.getIsPromo() && (productIds.contains(cartItem.getProductId()) || (parentProductId != null && productIds.contains(parentProductId)))&& (product == null || !"N".equals(product.getString("includeInPromotions")))) {
          amountAvailable=amountAvailable.add(cartItem.getItemSubTotal());
        }
      }
      compareBase=Integer.valueOf(amountAvailable.compareTo(amountNeeded));
    }
  }
 else   if ("PPIP_PRODUCT_QUANT".equals(inputParamEnumId)) {
    operatorEnumId="PPC_EQ";
    BigDecimal quantityNeeded=BigDecimal.ONE;
    if (UtilValidate.isNotEmpty(condValue)) {
      quantityNeeded=new BigDecimal(condValue);
    }
    Set productIds=ProductPromoWorker.getPromoRuleCondProductIds(productPromoCond,delegator,nowTimestamp);
    List lineOrderedByBasePriceList=cart.getLineListOrderedByBasePrice(false);
    Iterator lineOrderedByBasePriceIter=lineOrderedByBasePriceList.iterator();
    while (quantityNeeded.compareTo(BigDecimal.ZERO) > 0 && lineOrderedByBasePriceIter.hasNext()) {
      ShoppingCartItem cartItem=(ShoppingCartItem)lineOrderedByBasePriceIter.next();
      GenericValue product=cartItem.getProduct();
      String parentProductId=cartItem.getParentProductId();
      boolean passedItemConds=checkConditionsForItem(productPromoCond,cart,cartItem,delegator,dispatcher,nowTimestamp);
      if (passedItemConds && !cartItem.getIsPromo() && (productIds.contains(cartItem.getProductId()) || (parentProductId != null && productIds.contains(parentProductId)))&& (product == null || !"N".equals(product.getString("includeInPromotions")))) {
        quantityNeeded=quantityNeeded.subtract(cartItem.addPromoQuantityCandidateUse(quantityNeeded,productPromoCond,false));
      }
    }
    if (quantityNeeded.compareTo(BigDecimal.ZERO) > 0) {
      cart.resetPromoRuleUse(productPromoCond.getString("productPromoId"),productPromoCond.getString("productPromoRuleId"));
      compareBase=Integer.valueOf(-1);
    }
 else {
      compareBase=Integer.valueOf(0);
    }
  }
 else   if ("PPIP_NEW_ACCT".equals(inputParamEnumId)) {
    if (UtilValidate.isNotEmpty(condValue)) {
      BigDecimal acctDays=cart.getPartyDaysSinceCreated(nowTimestamp);
      if (acctDays == null) {
        return false;
      }
      compareBase=acctDays.compareTo(new BigDecimal(condValue));
    }
  }
 else   if ("PPIP_PARTY_ID".equals(inputParamEnumId)) {
    if (partyId != null && UtilValidate.isNotEmpty(condValue)) {
      compareBase=Integer.valueOf(partyId.compareTo(condValue));
    }
 else {
      compareBase=Integer.valueOf(1);
    }
  }
 else   if ("PPIP_PARTY_GRP_MEM".equals(inputParamEnumId)) {
    if (UtilValidate.isEmpty(partyId) || UtilValidate.isEmpty(condValue)) {
      compareBase=Integer.valueOf(1);
    }
 else {
      String groupPartyId=condValue;
      if (partyId.equals(groupPartyId)) {
        compareBase=Integer.valueOf(0);
      }
 else {
        List<GenericValue> partyRelationshipList=delegator.findByAndCache("PartyRelationship",UtilMisc.toMap("partyIdFrom",groupPartyId,"partyIdTo",partyId,"partyRelationshipTypeId","GROUP_ROLLUP"));
        partyRelationshipList=EntityUtil.filterByDate(partyRelationshipList,true);
        if (UtilValidate.isNotEmpty(partyRelationshipList)) {
          compareBase=Integer.valueOf(0);
        }
 else {
          compareBase=Integer.valueOf(checkConditionPartyHierarchy(delegator,nowTimestamp,groupPartyId,partyId));
        }
      }
    }
  }
 else   if ("PPIP_PARTY_CLASS".equals(inputParamEnumId)) {
    if (UtilValidate.isEmpty(partyId) || UtilValidate.isEmpty(condValue)) {
      compareBase=Integer.valueOf(1);
    }
 else {
      String partyClassificationGroupId=condValue;
      List<GenericValue> partyClassificationList=delegator.findByAndCache("PartyClassification",UtilMisc.toMap("partyId",partyId,"partyClassificationGroupId",partyClassificationGroupId));
      partyClassificationList=EntityUtil.filterByDate(partyClassificationList,true);
      if (UtilValidate.isNotEmpty(partyClassificationList)) {
        compareBase=Integer.valueOf(0);
      }
 else {
        compareBase=Integer.valueOf(1);
      }
    }
  }
 else   if ("PPIP_ROLE_TYPE".equals(inputParamEnumId)) {
    if (partyId != null && UtilValidate.isNotEmpty(condValue)) {
      GenericValue partyRole=delegator.findByPrimaryKeyCache("PartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId",condValue));
      if (partyRole != null) {
        compareBase=Integer.valueOf(0);
      }
 else {
        compareBase=Integer.valueOf(1);
      }
    }
 else {
      compareBase=Integer.valueOf(1);
    }
  }
 else   if ("PPIP_ORDER_TOTAL".equals(inputParamEnumId)) {
    if (UtilValidate.isNotEmpty(condValue)) {
      BigDecimal orderSubTotal=cart.getSubTotalForPromotions();
      if (Debug.verboseOn())       Debug.logVerbose("Doing order total compare: orderSubTotal=" + orderSubTotal,module);
      compareBase=Integer.valueOf(orderSubTotal.compareTo(new BigDecimal(condValue)));
    }
  }
 else   if ("PPIP_ORST_HIST".equals(inputParamEnumId)) {
    if (partyId != null && userLogin != null && UtilValidate.isNotEmpty(condValue)) {
      int monthsToInclude=12;
      if (otherValue != null) {
        monthsToInclude=Integer.parseInt(otherValue);
      }
      Map serviceIn=UtilMisc.toMap("partyId",partyId,"roleTypeId","PLACING_CUSTOMER","orderTypeId","SALES_ORDER","statusId","ORDER_COMPLETED","monthsToInclude",Integer.valueOf(monthsToInclude),"userLogin",userLogin);
      try {
        Map result=dispatcher.runSync("getOrderedSummaryInformation",serviceIn);
        if (ServiceUtil.isError(result)) {
          Debug.logError("Error calling getOrderedSummaryInformation service for the PPIP_ORST_HIST ProductPromo condition input value: " + ServiceUtil.getErrorMessage(result),module);
          return false;
        }
 else {
          BigDecimal orderSubTotal=(BigDecimal)result.get("totalSubRemainingAmount");
          if (Debug.verboseOn())           Debug.logVerbose("Doing order history sub-total compare: orderSubTotal=" + orderSubTotal + ", for the last "+ monthsToInclude+ " months.",module);
          compareBase=Integer.valueOf(orderSubTotal.compareTo(new BigDecimal(condValue)));
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Error getting order history sub-total in the getOrderedSummaryInformation service, evaluating condition to false.",module);
        return false;
      }
    }
 else {
      return false;
    }
  }
 else   if ("PPIP_ORST_YEAR".equals(inputParamEnumId)) {
    if (partyId != null && userLogin != null && UtilValidate.isNotEmpty(condValue)) {
      Calendar calendar=Calendar.getInstance();
      calendar.setTime(nowTimestamp);
      int monthsToInclude=calendar.get(Calendar.MONTH) + 1;
      Map serviceIn=UtilMisc.toMap("partyId",partyId,"roleTypeId","PLACING_CUSTOMER","orderTypeId","SALES_ORDER","statusId","ORDER_COMPLETED","monthsToInclude",Integer.valueOf(monthsToInclude),"userLogin",userLogin);
      try {
        Map result=dispatcher.runSync("getOrderedSummaryInformation",serviceIn);
        if (ServiceUtil.isError(result)) {
          Debug.logError("Error calling getOrderedSummaryInformation service for the PPIP_ORST_YEAR ProductPromo condition input value: " + ServiceUtil.getErrorMessage(result),module);
          return false;
        }
 else {
          BigDecimal orderSubTotal=(BigDecimal)result.get("totalSubRemainingAmount");
          if (Debug.verboseOn())           Debug.logVerbose("Doing order history sub-total compare: orderSubTotal=" + orderSubTotal + ", for the last "+ monthsToInclude+ " months.",module);
          compareBase=Integer.valueOf(orderSubTotal.compareTo(new BigDecimal((condValue))));
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Error getting order history sub-total in the getOrderedSummaryInformation service, evaluating condition to false.",module);
        return false;
      }
    }
  }
 else   if ("PPIP_ORST_LAST_YEAR".equals(inputParamEnumId)) {
    if (partyId != null && userLogin != null && UtilValidate.isNotEmpty(condValue)) {
      Calendar calendar=Calendar.getInstance();
      calendar.setTime(nowTimestamp);
      int lastYear=calendar.get(Calendar.YEAR) - 1;
      Calendar fromDateCalendar=Calendar.getInstance();
      fromDateCalendar.set(lastYear,0,0,0,0);
      Timestamp fromDate=new Timestamp(fromDateCalendar.getTime().getTime());
      Calendar thruDateCalendar=Calendar.getInstance();
      thruDateCalendar.set(lastYear,12,0,0,0);
      Timestamp thruDate=new Timestamp(thruDateCalendar.getTime().getTime());
      Map serviceIn=UtilMisc.toMap("partyId",partyId,"roleTypeId","PLACING_CUSTOMER","orderTypeId","SALES_ORDER","statusId","ORDER_COMPLETED","fromDate",fromDate,"thruDate",thruDate,"userLogin",userLogin);
      try {
        Map result=dispatcher.runSync("getOrderedSummaryInformation",serviceIn);
        if (ServiceUtil.isError(result)) {
          Debug.logError("Error calling getOrderedSummaryInformation service for the PPIP_ORST_LAST_YEAR ProductPromo condition input value: " + ServiceUtil.getErrorMessage(result),module);
          return false;
        }
 else {
          Double orderSubTotal=(Double)result.get("totalSubRemainingAmount");
          if (Debug.verboseOn())           Debug.logVerbose("Doing order history sub-total compare: orderSubTotal=" + orderSubTotal + ", for last year.",module);
          compareBase=Integer.valueOf(orderSubTotal.compareTo(Double.valueOf(condValue)));
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Error getting order history sub-total in the getOrderedSummaryInformation service, evaluating condition to false.",module);
        return false;
      }
    }
 else {
      return false;
    }
  }
 else   if ("PPIP_RECURRENCE".equals(inputParamEnumId)) {
    if (UtilValidate.isNotEmpty(condValue)) {
      compareBase=Integer.valueOf(1);
      GenericValue recurrenceInfo=delegator.findByPrimaryKeyCache("RecurrenceInfo",UtilMisc.toMap("recurrenceInfoId",condValue));
      if (recurrenceInfo != null) {
        RecurrenceInfo recurrence=null;
        try {
          recurrence=new RecurrenceInfo(recurrenceInfo);
        }
 catch (        RecurrenceInfoException e) {
          Debug.logError(e,module);
        }
        if (recurrence != null) {
          if (recurrence.isValidCurrent()) {
            compareBase=Integer.valueOf(0);
          }
        }
      }
    }
  }
 else   if ("PPIP_ORDER_SHIPTOTAL".equals(inputParamEnumId) && shippingMethod.equals(cart.getShipmentMethodTypeId())) {
    if (UtilValidate.isNotEmpty(condValue)) {
      BigDecimal orderTotalShipping=cart.getTotalShipping();
      if (Debug.verboseOn()) {
        Debug.logVerbose("Doing order total Shipping compare: ordertotalShipping=" + orderTotalShipping,module);
      }
      compareBase=orderTotalShipping.compareTo(new BigDecimal(condValue));
    }
  }
 else   if ("PPIP_LPMUP_AMT".equals(inputParamEnumId)) {
    return true;
  }
 else   if ("PPIP_LPMUP_PER".equals(inputParamEnumId)) {
    return true;
  }
 else {
    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderAnUnSupportedProductPromoCondInputParameterLhs",UtilMisc.toMap("inputParamEnumId",productPromoCond.getString("inputParamEnumId")),cart.getLocale()),module);
    return false;
  }
  if (Debug.verboseOn())   Debug.logVerbose("Condition compare done, compareBase=" + compareBase,module);
  if (compareBase != null) {
    int compare=compareBase.intValue();
    if ("PPC_EQ".equals(operatorEnumId)) {
      if (compare == 0)       return true;
    }
 else     if ("PPC_NEQ".equals(operatorEnumId)) {
      if (compare != 0)       return true;
    }
 else     if ("PPC_LT".equals(operatorEnumId)) {
      if (compare < 0)       return true;
    }
 else     if ("PPC_LTE".equals(operatorEnumId)) {
      if (compare <= 0)       return true;
    }
 else     if ("PPC_GT".equals(operatorEnumId)) {
      if (compare > 0)       return true;
    }
 else     if ("PPC_GTE".equals(operatorEnumId)) {
      if (compare >= 0)       return true;
    }
 else {
      Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderAnUnSupportedProductPromoCondCondition",UtilMisc.toMap("operatorEnumId",operatorEnumId),cart.getLocale()),module);
      return false;
    }
  }
  return false;
}
