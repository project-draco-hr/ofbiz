{
  GenericDelegator delegator=cart.getDelegator();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  cart.clearAllPromotionInformation();
  try {
    if (productPromoList == null) {
      if (cart.getOrderType().equals("SALES_ORDER")) {
        productPromoList=ProductPromoWorker.getProductStorePromotions(cart,nowTimestamp,dispatcher);
      }
 else {
        productPromoList=ProductPromoWorker.getAgreementPromotions(cart,nowTimestamp,dispatcher);
      }
    }
    runProductPromos(productPromoList,cart,delegator,dispatcher,nowTimestamp,true);
    List productPromoDiscountMapList=FastList.newInstance();
    List productPromoDiscountMapListOrderTotal=FastList.newInstance();
    Iterator productPromoIter=productPromoList.iterator();
    while (productPromoIter.hasNext()) {
      GenericValue productPromo=(GenericValue)productPromoIter.next();
      Map productPromoDiscountMap=UtilMisc.toMap("productPromo",productPromo,"totalDiscountAmount",cart.getProductPromoUseTotalDiscount(productPromo.getString("productPromoId")));
      if (hasOrderTotalCondition(productPromo,delegator)) {
        productPromoDiscountMapListOrderTotal.add(productPromoDiscountMap);
      }
 else {
        productPromoDiscountMapList.add(productPromoDiscountMap);
      }
    }
    productPromoDiscountMapList=UtilMisc.sortMaps(productPromoDiscountMapList,UtilMisc.toList("+totalDiscountAmount"));
    productPromoDiscountMapListOrderTotal=UtilMisc.sortMaps(productPromoDiscountMapListOrderTotal,UtilMisc.toList("+totalDiscountAmount"));
    productPromoDiscountMapList.addAll(productPromoDiscountMapListOrderTotal);
    List sortedProductPromoList=new ArrayList(productPromoDiscountMapList.size());
    Iterator productPromoDiscountMapIter=productPromoDiscountMapList.iterator();
    while (productPromoDiscountMapIter.hasNext()) {
      Map productPromoDiscountMap=(Map)productPromoDiscountMapIter.next();
      GenericValue productPromo=(GenericValue)productPromoDiscountMap.get("productPromo");
      sortedProductPromoList.add(productPromo);
      if (Debug.verboseOn())       Debug.logVerbose("Sorted Promo [" + productPromo.getString("productPromoId") + "] with total discount: "+ productPromoDiscountMap.get("totalDiscountAmount"),module);
    }
    cart.clearAllPromotionInformation();
    runProductPromos(sortedProductPromoList,cart,delegator,dispatcher,nowTimestamp,false);
  }
 catch (  NumberFormatException e) {
    Debug.logError(e,"Number not formatted correctly in promotion rules, not completed...",module);
  }
catch (  GenericEntityException e) {
    Debug.logError(e,"Error looking up promotion data while doing promotions",module);
  }
catch (  Exception e) {
    Debug.logError(e,"Error running promotions, will ignore: " + e.toString(),module);
  }
}
