{
  String partyId=cart.getPartyId();
  long maxIterations=1000;
  long numberOfIterations=0;
  long maxUseLimit=cart.getTotalQuantity().multiply(BigDecimal.valueOf(2)).setScale(0,BigDecimal.ROUND_CEILING).longValue();
  try {
    boolean cartChanged=true;
    while (cartChanged) {
      cartChanged=false;
      numberOfIterations++;
      if (numberOfIterations > maxIterations) {
        Debug.logError("ERROR: While calculating promotions the promotion rules where run more than " + maxIterations + " times, so the calculation has been ended. This should generally never happen unless you have bad rule definitions.",module);
        break;
      }
      for (      GenericValue productPromo : productPromoList) {
        String productPromoId=productPromo.getString("productPromoId");
        List<GenericValue> productPromoRules=productPromo.getRelated("ProductPromoRule",null,null,true);
        if (UtilValidate.isNotEmpty(productPromoRules)) {
          Long candidateUseLimit=getProductPromoUseLimit(productPromo,partyId,delegator);
          Long useLimit=candidateUseLimit;
          if (Debug.verboseOn())           Debug.logVerbose("Running promotion [" + productPromoId + "], useLimit="+ useLimit+ ", # of rules="+ productPromoRules.size(),module);
          boolean requireCode="Y".equals(productPromo.getString("requireCode"));
          if (requireCode) {
            Set<String> enteredCodes=cart.getProductPromoCodesEntered();
            if (cart.getOrderId() != null) {
              List<GenericValue> orderproductPromoCodes=EntityQuery.use(delegator).from("OrderProductPromoCode").where("orderId",cart.getOrderId()).queryList();
              Iterator<GenericValue> orderproductPromoCodesItr=UtilMisc.toIterator(orderproductPromoCodes);
              while (orderproductPromoCodesItr != null && orderproductPromoCodesItr.hasNext()) {
                GenericValue orderproductPromoCode=orderproductPromoCodesItr.next();
                enteredCodes.add(orderproductPromoCode.getString("productPromoCodeId"));
              }
            }
            if (enteredCodes.size() > 0) {
              EntityCondition codeCondition=EntityCondition.makeCondition(EntityCondition.makeCondition("productPromoId",EntityOperator.EQUALS,productPromoId),EntityOperator.AND,EntityCondition.makeCondition("productPromoCodeId",EntityOperator.IN,enteredCodes));
              List<GenericValue> productPromoCodeList=EntityQuery.use(delegator).from("ProductPromoCode").where(codeCondition).orderBy("productPromoCodeId").queryList();
              Iterator<GenericValue> productPromoCodeIter=productPromoCodeList.iterator();
              while ((useLimit == null || useLimit.longValue() > cart.getProductPromoUseCount(productPromoId)) && productPromoCodeIter.hasNext()) {
                GenericValue productPromoCode=productPromoCodeIter.next();
                String productPromoCodeId=productPromoCode.getString("productPromoCodeId");
                Long codeUseLimit=getProductPromoCodeUseLimit(productPromoCode,partyId,delegator);
                if (runProductPromoRules(cart,useLimit,true,productPromoCodeId,codeUseLimit,maxUseLimit,productPromo,productPromoRules,dispatcher,delegator,nowTimestamp)) {
                  cartChanged=true;
                }
                if (cart.getProductPromoUseCount(productPromoId) > maxUseLimit) {
                  Debug.logError("ERROR: While calculating promotions the promotion [" + productPromoId + "] action was applied more than "+ maxUseLimit+ " times, so the calculation has been ended. This should generally never happen unless you have bad rule definitions.",module);
                  break;
                }
              }
            }
          }
 else {
            try {
              if (runProductPromoRules(cart,useLimit,false,null,null,maxUseLimit,productPromo,productPromoRules,dispatcher,delegator,nowTimestamp)) {
                cartChanged=true;
              }
            }
 catch (            RuntimeException e) {
              throw new GeneralException("Error running promotion with ID [" + productPromoId + "]",e);
            }
          }
        }
        if (isolatedTestRun) {
          cart.clearAllPromotionAdjustments();
          cart.clearCartItemUseInPromoInfo();
        }
      }
      if (isolatedTestRun) {
        cartChanged=false;
      }
    }
  }
 catch (  UseLimitException e) {
    Debug.logError(e,e.toString(),module);
  }
}
