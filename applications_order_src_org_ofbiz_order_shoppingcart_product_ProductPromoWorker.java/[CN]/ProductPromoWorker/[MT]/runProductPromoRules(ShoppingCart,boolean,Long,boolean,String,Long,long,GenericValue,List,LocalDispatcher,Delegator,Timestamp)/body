{
  String productPromoId=productPromo.getString("productPromoId");
  while ((useLimit == null || useLimit.longValue() > cart.getProductPromoUseCount(productPromoId)) && (!requireCode || UtilValidate.isNotEmpty(productPromoCodeId)) && (codeUseLimit == null || codeUseLimit.longValue() > cart.getProductPromoCodeUse(productPromoCodeId))) {
    boolean promoUsed=false;
    BigDecimal totalDiscountAmount=BigDecimal.ZERO;
    BigDecimal quantityLeftInActions=BigDecimal.ZERO;
    Iterator promoRulesIter=productPromoRules.iterator();
    while (promoRulesIter != null && promoRulesIter.hasNext()) {
      GenericValue productPromoRule=(GenericValue)promoRulesIter.next();
      boolean performActions=true;
      List productPromoConds=delegator.findByAndCache("ProductPromoCond",UtilMisc.toMap("productPromoId",productPromo.get("productPromoId")),UtilMisc.toList("productPromoCondSeqId"));
      productPromoConds=EntityUtil.filterByAnd(productPromoConds,UtilMisc.toMap("productPromoRuleId",productPromoRule.get("productPromoRuleId")));
      if (Debug.verboseOn())       Debug.logVerbose("Checking " + productPromoConds.size() + " conditions for rule "+ productPromoRule,module);
      Iterator productPromoCondIter=UtilMisc.toIterator(productPromoConds);
      while (productPromoCondIter != null && productPromoCondIter.hasNext()) {
        GenericValue productPromoCond=(GenericValue)productPromoCondIter.next();
        boolean condResult=checkCondition(productPromoCond,cart,delegator,dispatcher,nowTimestamp);
        if (condResult == false) {
          performActions=false;
          break;
        }
      }
      if (performActions) {
        List productPromoActions=productPromoRule.getRelatedCache("ProductPromoAction",null,UtilMisc.toList("productPromoActionSeqId"));
        Iterator productPromoActionIter=UtilMisc.toIterator(productPromoActions);
        while (productPromoActionIter != null && productPromoActionIter.hasNext()) {
          GenericValue productPromoAction=(GenericValue)productPromoActionIter.next();
          try {
            ActionResultInfo actionResultInfo=performAction(productPromoAction,cart,delegator,dispatcher,nowTimestamp);
            totalDiscountAmount=totalDiscountAmount.add(actionResultInfo.totalDiscountAmount);
            quantityLeftInActions=quantityLeftInActions.add(actionResultInfo.quantityLeftInAction);
            boolean actionChangedCart=actionResultInfo.ranAction;
            if (actionChangedCart) {
              promoUsed=true;
              cartChanged=true;
            }
          }
 catch (          CartItemModifyException e) {
            Debug.logError(e,"Error modifying the cart while performing promotion action [" + productPromoAction.getPrimaryKey() + "]",module);
          }
        }
      }
    }
    if (promoUsed) {
      cart.addProductPromoUse(productPromo.getString("productPromoId"),productPromoCodeId,totalDiscountAmount,quantityLeftInActions);
    }
 else {
      break;
    }
    if (cart.getProductPromoUseCount(productPromoId) > maxUseLimit) {
      throw new UseLimitException("ERROR: While calculating promotions the promotion [" + productPromoId + "] action was applied more than "+ maxUseLimit+ " times, so the calculation has been ended. This should generally never happen unless you have bad rule definitions.");
    }
  }
  return cartChanged;
}
