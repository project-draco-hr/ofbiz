{
  List<GenericValue> productPromoCategoriesAll=EntityQuery.use(delegator).from("ProductPromoCategory").where("productPromoId",productPromoCond.get("productPromoId")).cache(true).queryList();
  List<GenericValue> productPromoCategories=EntityUtil.filterByAnd(productPromoCategoriesAll,UtilMisc.toMap("productPromoRuleId","_NA_","productPromoCondSeqId","_NA_"));
  productPromoCategories.addAll(EntityUtil.filterByAnd(productPromoCategoriesAll,UtilMisc.toMap("productPromoRuleId",productPromoCond.get("productPromoRuleId"),"productPromoCondSeqId",productPromoCond.get("productPromoCondSeqId"))));
  List<GenericValue> productPromoProductsAll=EntityQuery.use(delegator).from("ProductPromoProduct").where("productPromoId",productPromoCond.get("productPromoId")).cache(true).queryList();
  List<GenericValue> productPromoProducts=EntityUtil.filterByAnd(productPromoProductsAll,UtilMisc.toMap("productPromoRuleId","_NA_","productPromoCondSeqId","_NA_"));
  productPromoProducts.addAll(EntityUtil.filterByAnd(productPromoProductsAll,UtilMisc.toMap("productPromoRuleId",productPromoCond.get("productPromoRuleId"),"productPromoCondSeqId",productPromoCond.get("productPromoCondSeqId"))));
  Set<String> productIds=new HashSet<String>();
  makeProductPromoIdSet(productIds,productPromoCategories,productPromoProducts,delegator,nowTimestamp,false);
  return productIds;
}
