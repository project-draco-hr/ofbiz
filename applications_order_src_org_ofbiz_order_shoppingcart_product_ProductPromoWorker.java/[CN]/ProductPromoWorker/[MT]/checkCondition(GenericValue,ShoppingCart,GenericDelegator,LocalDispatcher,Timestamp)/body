{
  String condValue=productPromoCond.getString("condValue");
  String otherValue=productPromoCond.getString("otherValue");
  String inputParamEnumId=productPromoCond.getString("inputParamEnumId");
  String operatorEnumId=productPromoCond.getString("operatorEnumId");
  String partyId=cart.getPartyId();
  GenericValue userLogin=cart.getUserLogin();
  if (userLogin == null) {
    userLogin=cart.getAutoUserLogin();
  }
  if (Debug.verboseOn())   Debug.logVerbose("Checking promotion condition: " + productPromoCond,module);
  Integer compareBase=null;
  if ("PPIP_PRODUCT_AMOUNT".equals(inputParamEnumId)) {
    operatorEnumId="PPC_EQ";
    double amountNeeded=0.0;
    if (UtilValidate.isNotEmpty(condValue)) {
      amountNeeded=Double.parseDouble(condValue);
    }
    Set productIds=ProductPromoWorker.getPromoRuleCondProductIds(productPromoCond,delegator,nowTimestamp);
    List lineOrderedByBasePriceList=cart.getLineListOrderedByBasePrice(false);
    Iterator lineOrderedByBasePriceIter=lineOrderedByBasePriceList.iterator();
    while (amountNeeded > 0 && lineOrderedByBasePriceIter.hasNext()) {
      ShoppingCartItem cartItem=(ShoppingCartItem)lineOrderedByBasePriceIter.next();
      GenericValue product=cartItem.getProduct();
      String parentProductId=cartItem.getParentProductId();
      if (!cartItem.getIsPromo() && (productIds.contains(cartItem.getProductId()) || (parentProductId != null && productIds.contains(parentProductId))) && (product == null || !"N".equals(product.getString("includeInPromotions")))) {
        double basePrice=cartItem.getBasePrice();
        double quantityNeeded=Math.ceil(amountNeeded / basePrice);
        double quantity=cartItem.addPromoQuantityCandidateUse(quantityNeeded,productPromoCond,false);
        amountNeeded-=(quantity * basePrice);
      }
    }
    if (amountNeeded > 0) {
      cart.resetPromoRuleUse(productPromoCond.getString("productPromoId"),productPromoCond.getString("productPromoRuleId"));
      compareBase=new Integer(-1);
    }
 else {
      compareBase=new Integer(0);
    }
  }
 else   if ("PPIP_PRODUCT_TOTAL".equals(inputParamEnumId)) {
    Double amountNeeded=Double.valueOf(condValue);
    double amountAvailable=0;
    Set productIds=ProductPromoWorker.getPromoRuleCondProductIds(productPromoCond,delegator,nowTimestamp);
    List lineOrderedByBasePriceList=cart.getLineListOrderedByBasePrice(false);
    Iterator lineOrderedByBasePriceIter=lineOrderedByBasePriceList.iterator();
    while (lineOrderedByBasePriceIter.hasNext()) {
      ShoppingCartItem cartItem=(ShoppingCartItem)lineOrderedByBasePriceIter.next();
      GenericValue product=cartItem.getProduct();
      String parentProductId=cartItem.getParentProductId();
      if (!cartItem.getIsPromo() && (productIds.contains(cartItem.getProductId()) || (parentProductId != null && productIds.contains(parentProductId))) && (product == null || !"N".equals(product.getString("includeInPromotions")))) {
        amountAvailable+=cartItem.getItemSubTotal();
      }
    }
    compareBase=new Integer(new Double(amountAvailable).compareTo(amountNeeded));
  }
 else   if ("PPIP_PRODUCT_QUANT".equals(inputParamEnumId)) {
    operatorEnumId="PPC_EQ";
    double quantityNeeded=1.0;
    if (UtilValidate.isNotEmpty(condValue)) {
      quantityNeeded=Double.parseDouble(condValue);
    }
    Set productIds=ProductPromoWorker.getPromoRuleCondProductIds(productPromoCond,delegator,nowTimestamp);
    List lineOrderedByBasePriceList=cart.getLineListOrderedByBasePrice(false);
    Iterator lineOrderedByBasePriceIter=lineOrderedByBasePriceList.iterator();
    while (quantityNeeded > 0 && lineOrderedByBasePriceIter.hasNext()) {
      ShoppingCartItem cartItem=(ShoppingCartItem)lineOrderedByBasePriceIter.next();
      GenericValue product=cartItem.getProduct();
      String parentProductId=cartItem.getParentProductId();
      if (!cartItem.getIsPromo() && (productIds.contains(cartItem.getProductId()) || (parentProductId != null && productIds.contains(parentProductId))) && (product == null || !"N".equals(product.getString("includeInPromotions")))) {
        quantityNeeded-=cartItem.addPromoQuantityCandidateUse(quantityNeeded,productPromoCond,false);
      }
    }
    if (quantityNeeded > 0) {
      cart.resetPromoRuleUse(productPromoCond.getString("productPromoId"),productPromoCond.getString("productPromoRuleId"));
      compareBase=new Integer(-1);
    }
 else {
      compareBase=new Integer(0);
    }
  }
 else   if ("PPIP_NEW_ACCT".equals(inputParamEnumId)) {
    Double acctDays=cart.getPartyDaysSinceCreated(nowTimestamp);
    if (acctDays == null) {
      return false;
    }
    compareBase=new Integer(acctDays.compareTo(Double.valueOf(condValue)));
  }
 else   if ("PPIP_PARTY_ID".equals(inputParamEnumId)) {
    if (partyId != null) {
      compareBase=new Integer(partyId.compareTo(condValue));
    }
 else {
      compareBase=new Integer(1);
    }
  }
 else   if ("PPIP_PARTY_GRP_MEM".equals(inputParamEnumId)) {
    if (UtilValidate.isEmpty(partyId)) {
      compareBase=new Integer(1);
    }
 else {
      String groupPartyId=condValue;
      if (partyId.equals(groupPartyId)) {
        compareBase=new Integer(0);
      }
 else {
        List partyRelationshipList=delegator.findByAndCache("PartyRelationship",UtilMisc.toMap("partyIdFrom",groupPartyId,"partyIdTo",partyId,"partyRelationshipTypeId","GROUP_ROLLUP"));
        partyRelationshipList=EntityUtil.filterByDate(partyRelationshipList,true);
        if (partyRelationshipList != null && partyRelationshipList.size() > 0) {
          compareBase=new Integer(0);
        }
 else {
          compareBase=new Integer(1);
        }
      }
    }
  }
 else   if ("PPIP_PARTY_CLASS".equals(inputParamEnumId)) {
    if (UtilValidate.isEmpty(partyId)) {
      compareBase=new Integer(1);
    }
 else {
      String partyClassificationGroupId=condValue;
      List partyClassificationList=delegator.findByAndCache("PartyClassification",UtilMisc.toMap("partyId",partyId,"partyClassificationGroupId",partyClassificationGroupId));
      partyClassificationList=EntityUtil.filterByDate(partyClassificationList,true);
      if (partyClassificationList != null && partyClassificationList.size() > 0) {
        compareBase=new Integer(0);
      }
 else {
        compareBase=new Integer(1);
      }
    }
  }
 else   if ("PPIP_ROLE_TYPE".equals(inputParamEnumId)) {
    if (partyId != null) {
      GenericValue partyRole=delegator.findByPrimaryKeyCache("PartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId",condValue));
      if (partyRole != null) {
        compareBase=new Integer(0);
      }
 else {
        compareBase=new Integer(1);
      }
    }
 else {
      compareBase=new Integer(1);
    }
  }
 else   if ("PPIP_ORDER_TOTAL".equals(inputParamEnumId)) {
    Double orderSubTotal=new Double(cart.getSubTotalForPromotions());
    if (Debug.verboseOn())     Debug.logVerbose("Doing order total compare: orderSubTotal=" + orderSubTotal,module);
    compareBase=new Integer(orderSubTotal.compareTo(Double.valueOf(condValue)));
  }
 else   if ("PPIP_ORST_HIST".equals(inputParamEnumId)) {
    if (partyId != null && userLogin != null) {
      int monthsToInclude=12;
      if (otherValue != null) {
        monthsToInclude=Integer.parseInt(condValue);
      }
      Map serviceIn=UtilMisc.toMap("partyId",partyId,"roleTypeId","PLACING_CUSTOMER","orderTypeId","SALES_ORDER","statusId","ORDER_COMPLETED","monthsToInclude",new Integer(monthsToInclude),"userLogin",userLogin);
      try {
        Map result=dispatcher.runSync("getOrderedSummaryInformation",serviceIn);
        if (ServiceUtil.isError(result)) {
          Debug.logError("Error calling getOrderedSummaryInformation service for the PPIP_ORST_HIST ProductPromo condition input value: " + ServiceUtil.getErrorMessage(result),module);
          return false;
        }
 else {
          Double orderSubTotal=(Double)result.get("totalSubRemainingAmount");
          if (Debug.verboseOn())           Debug.logVerbose("Doing order history sub-total compare: orderSubTotal=" + orderSubTotal + ", for the last "+ monthsToInclude+ " months.",module);
          compareBase=new Integer(orderSubTotal.compareTo(Double.valueOf(condValue)));
        }
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,"Error getting order history sub-total in the getOrderedSummaryInformation service, evaluating condition to false.",module);
        return false;
      }
    }
 else {
      return false;
    }
  }
 else {
    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderAnUnSupportedProductPromoCondInputParameterLhs",UtilMisc.toMap("inputParamEnumId",productPromoCond.getString("inputParamEnumId")),cart.getLocale()),module);
    return false;
  }
  if (Debug.verboseOn())   Debug.logVerbose("Condition compare done, compareBase=" + compareBase,module);
  if (compareBase != null) {
    int compare=compareBase.intValue();
    if ("PPC_EQ".equals(operatorEnumId)) {
      if (compare == 0)       return true;
    }
 else     if ("PPC_NEQ".equals(operatorEnumId)) {
      if (compare != 0)       return true;
    }
 else     if ("PPC_LT".equals(operatorEnumId)) {
      if (compare < 0)       return true;
    }
 else     if ("PPC_LTE".equals(operatorEnumId)) {
      if (compare <= 0)       return true;
    }
 else     if ("PPC_GT".equals(operatorEnumId)) {
      if (compare > 0)       return true;
    }
 else     if ("PPC_GTE".equals(operatorEnumId)) {
      if (compare >= 0)       return true;
    }
 else {
      Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderAnUnSupportedProductPromoCondCondition",UtilMisc.toMap("operatorEnumId",operatorEnumId),cart.getLocale()),module);
      return false;
    }
  }
  return false;
}
