{
  File file;
  try {
    file=new File(url.toURI());
  }
 catch (  URISyntaxException e) {
    file=new File(url.getPath());
  }
  String path=file.getPath();
  if (path.matches(".*/ofbiz[^/]*\\.(jar|zip)")) {
    String prefix=path.substring(0,path.length() - 4);
    int slash=prefix.lastIndexOf("/");
    if (slash != -1)     prefix=prefix.substring(slash + 1);
    prefix+="-";
    File zipTmp=null;
    try {
      zipTmp=File.createTempFile("instrumented-" + prefix,path.substring(path.length() - 4));
      zipTmp.deleteOnExit();
      ZipInputStream zin=new ZipInputStream(new FileInputStream(file));
      ZipOutputStream zout=new ZipOutputStream(new FileOutputStream(zipTmp));
      ZipEntry entry;
      while ((entry=zin.getNextEntry()) != null) {
        InputStream in;
        long size;
        if (entry.getName().endsWith(".class")) {
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          copy(zin,baos);
          byte[] bytes=instrumenter.instrumentClass(baos.toByteArray());
          size=bytes.length;
          in=new ByteArrayInputStream(bytes);
        }
 else {
          in=zin;
          size=entry.getSize();
        }
        ZipEntry newEntry=new ZipEntry(entry);
        newEntry.setSize(size);
        newEntry.setCompressedSize(-1);
        zout.putNextEntry(newEntry);
        copy(in,zout);
        if (entry.getName().endsWith(".class")) {
          in.close();
        }
      }
      zout.close();
      System.out.println("Instrumented file: " + zipTmp.getCanonicalPath());
      super.addURL(zipTmp.toURI().toURL());
    }
 catch (    IOException e) {
      System.err.println("Exception thrown while instrumenting " + file + ": ");
      e.printStackTrace(System.err);
      if (zipTmp != null) {
        zipTmp.delete();
      }
    }
  }
 else {
    super.addURL(url);
  }
}
