{
  Debug.logWarning(new Exception(),"This service has been depricated in favor of [genericContentPermission]",module);
  Security security=dctx.getSecurity();
  Delegator delegator=dctx.getDelegator();
  GenericValue content=(GenericValue)context.get("currentContent");
  Boolean bDisplayFailCond=(Boolean)context.get("displayFailCond");
  boolean displayFailCond=false;
  if (bDisplayFailCond != null && bDisplayFailCond.booleanValue()) {
    displayFailCond=true;
  }
  Debug.logInfo("displayFailCond(0):" + displayFailCond,"");
  Boolean bDisplayPassCond=(Boolean)context.get("displayPassCond");
  boolean displayPassCond=false;
  if (bDisplayPassCond != null && bDisplayPassCond.booleanValue()) {
    displayPassCond=true;
  }
  Debug.logInfo("displayPassCond(0):" + displayPassCond,"");
  Map<String,Object> results=FastMap.newInstance();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId)) {
    String passedUserLoginId=(String)context.get("userLoginId");
    if (UtilValidate.isNotEmpty(passedUserLoginId)) {
      try {
        userLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId",passedUserLoginId),true);
        if (userLogin != null) {
          partyId=userLogin.getString("partyId");
        }
      }
 catch (      GenericEntityException e) {
        return ServiceUtil.returnError(e.getMessage());
      }
    }
  }
  if (UtilValidate.isEmpty(partyId) && userLogin != null) {
    partyId=userLogin.getString("partyId");
  }
  boolean passed=false;
  List<String> passedPurposes=UtilGenerics.checkList(context.get("contentPurposeList"));
  String contentPurposeString=(String)context.get("contentPurposeString");
  if (UtilValidate.isNotEmpty(contentPurposeString)) {
    List<String> purposesFromString=StringUtil.split(contentPurposeString,"|");
    if (passedPurposes == null) {
      passedPurposes=FastList.newInstance();
    }
    passedPurposes.addAll(purposesFromString);
  }
  EntityPermissionChecker.StdAuxiliaryValueGetter auxGetter=new EntityPermissionChecker.StdAuxiliaryValueGetter("ContentPurpose","contentPurposeTypeId","contentId");
  auxGetter.setList(passedPurposes);
  List<String> targetOperations=UtilGenerics.checkList(context.get("targetOperationList"));
  String targetOperationString=(String)context.get("targetOperationString");
  if (UtilValidate.isNotEmpty(targetOperationString)) {
    List<String> operationsFromString=StringUtil.split(targetOperationString,"|");
    if (targetOperations == null) {
      targetOperations=FastList.newInstance();
    }
    targetOperations.addAll(operationsFromString);
  }
  EntityPermissionChecker.StdPermissionConditionGetter permCondGetter=new EntityPermissionChecker.StdPermissionConditionGetter("ContentPurposeOperation","contentOperationId","roleTypeId","statusId","contentPurposeTypeId","privilegeEnumId");
  permCondGetter.setOperationList(targetOperations);
  EntityPermissionChecker.StdRelatedRoleGetter roleGetter=new EntityPermissionChecker.StdRelatedRoleGetter("Content","roleTypeId","contentId","partyId","ownerContentId","ContentRole");
  List<String> passedRoles=UtilGenerics.checkList(context.get("roleTypeList"));
  if (passedRoles == null)   passedRoles=FastList.newInstance();
  String roleTypeString=(String)context.get("roleTypeString");
  if (UtilValidate.isNotEmpty(roleTypeString)) {
    List<String> rolesFromString=StringUtil.split(roleTypeString,"|");
    passedRoles.addAll(rolesFromString);
  }
  roleGetter.setList(passedRoles);
  String entityAction=(String)context.get("entityOperation");
  if (entityAction == null)   entityAction="_ADMIN";
  if (userLogin != null && entityAction != null) {
    passed=security.hasEntityPermission("CONTENTMGR",entityAction,userLogin);
  }
  StringBuilder errBuf=new StringBuilder();
  String permissionStatus=null;
  List<Object> entityIds=FastList.newInstance();
  if (passed) {
    results.put("permissionStatus","granted");
    permissionStatus="granted";
    if (displayPassCond) {
      errBuf.append("\n    hasEntityPermission(" + entityAction + "): PASSED");
    }
  }
 else {
    if (displayFailCond) {
      errBuf.append("\n    hasEntityPermission(" + entityAction + "): FAILED");
    }
    if (content != null)     entityIds.add(content);
    String quickCheckContentId=(String)context.get("quickCheckContentId");
    if (UtilValidate.isNotEmpty(quickCheckContentId)) {
      List<String> quickList=StringUtil.split(quickCheckContentId,"|");
      if (UtilValidate.isNotEmpty(quickList))       entityIds.addAll(quickList);
    }
    try {
      boolean check=EntityPermissionChecker.checkPermissionMethod(delegator,partyId,"Content",entityIds,auxGetter,roleGetter,permCondGetter);
      if (check) {
        results.put("permissionStatus","granted");
      }
 else {
        results.put("permissionStatus","rejected");
      }
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.getMessage());
    }
    permissionStatus=(String)results.get("permissionStatus");
    errBuf.append("\n    permissionStatus:");
    errBuf.append(permissionStatus);
  }
  if ((permissionStatus.equals("granted") && displayPassCond) || (permissionStatus.equals("rejected") && displayFailCond)) {
    if (displayFailCond || displayPassCond) {
      if (!passed) {
        errBuf.append("\n    targetOperations:");
        errBuf.append(targetOperations);
        String errMsg=permCondGetter.dumpAsText();
        errBuf.append("\n");
        errBuf.append(errMsg);
        errBuf.append("\n    partyId:");
        errBuf.append(partyId);
        errBuf.append("\n    entityIds:");
        errBuf.append(entityIds);
        if (auxGetter != null) {
          errBuf.append("\n    auxList:");
          errBuf.append(auxGetter.getList());
        }
        if (roleGetter != null) {
          errBuf.append("\n    roleList:");
          errBuf.append(roleGetter.getList());
        }
      }
    }
  }
  Debug.logInfo("displayPass/FailCond(0), errBuf:" + errBuf.toString(),"");
  results.put(ModelService.ERROR_MESSAGE,errBuf.toString());
  return results;
}
