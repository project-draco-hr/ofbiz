{
  DispatchContext dctx=dispatcher.getLocalContext(localName);
  if (modelService == null) {
    Debug.logError("ERROR: Null Model Service.",module);
  }
  if (dctx == null) {
    Debug.logError("ERROR: Null DispatchContext.",module);
  }
  if (context == null) {
    Debug.logError("ERROR: Null Service Context.",module);
  }
  Object result=null;
  if (modelService.location == null || modelService.invoke == null) {
    throw new GenericServiceException("Service [" + modelService.name + "] is missing location and/or invoke values which are required for execution.");
  }
  ClassLoader cl=null;
  if (dctx == null) {
    cl=this.getClass().getClassLoader();
  }
 else {
    cl=dctx.getClassLoader();
  }
  try {
    Class<?> c=cl.loadClass(this.getLocation(modelService));
    Method m=c.getMethod(modelService.invoke,DispatchContext.class,Map.class);
    result=m.invoke(null,dctx,context);
  }
 catch (  ClassNotFoundException cnfe) {
    throw new GenericServiceException("Cannot find service [" + modelService.name + "] location class",cnfe);
  }
catch (  NoSuchMethodException nsme) {
    throw new GenericServiceException("Service [" + modelService.name + "] specified Java method (invoke attribute) does not exist",nsme);
  }
catch (  SecurityException se) {
    throw new GenericServiceException("Service [" + modelService.name + "] Access denied",se);
  }
catch (  IllegalAccessException iae) {
    throw new GenericServiceException("Service [" + modelService.name + "] Method not accessible",iae);
  }
catch (  IllegalArgumentException iarge) {
    throw new GenericServiceException("Service [" + modelService.name + "] Invalid parameter match",iarge);
  }
catch (  InvocationTargetException ite) {
    throw new GenericServiceException("Service [" + modelService.name + "] target threw an unexpected exception",ite.getTargetException());
  }
catch (  NullPointerException npe) {
    throw new GenericServiceException("Service [" + modelService.name + "] ran into an unexpected null object",npe);
  }
catch (  ExceptionInInitializerError eie) {
    throw new GenericServiceException("Service [" + modelService.name + "] Initialization failed",eie);
  }
catch (  Throwable th) {
    throw new GenericServiceException("Service [" + modelService.name + "] Error or unknown exception",th);
  }
  return result;
}
