{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String jobId=(String)context.get("jobId");
  try {
    GenericValue userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();
    Map<String,Object> serviceMap=new HashMap<String,Object>();
    serviceMap.put("userLogin",userLogin);
    List<GenericValue> productStores=EntityQuery.use(delegator).from("EbayProductStorePref").where("autoPrefJobId",jobId).queryList();
    if (productStores.size() != 0) {
      String productStoreId=productStores.get(0).getString("productStoreId");
      String condition1=productStores.get(0).getString("condition1");
      String condition2=productStores.get(0).getString("condition2");
      Timestamp fromDate=UtilDateTime.toTimestamp(condition1);
      Timestamp thruDate=UtilDateTime.toTimestamp(condition2);
      Timestamp nowTime=UtilDateTime.nowTimestamp();
      if (nowTime.after(fromDate) && nowTime.before(thruDate)) {
        serviceMap.put("productStoreId",productStoreId);
        Map<String,Object> eBayUserLogin=dispatcher.runSync("getEbayStoreUser",serviceMap);
        String eBayUserLoginId=(String)eBayUserLogin.get("userLoginId");
        GenericValue party=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",eBayUserLoginId).queryOne();
        String partyId=party.getString("partyId");
        Map<String,Object> resultService=dispatcher.runSync("getEbaySoldItems",serviceMap);
        List<Map<String,Object>> soldItems=UtilGenerics.checkList(resultService.get("soldItems"));
        if (soldItems.size() != 0) {
          for (int itemCount=0; itemCount < soldItems.size(); itemCount++) {
            Map<String,Object> soldItemMap=soldItems.get(itemCount);
            if (UtilValidate.isNotEmpty(soldItemMap.get("itemId"))) {
              GenericValue productCheck=EntityQuery.use(delegator).from("Product").where("productId",soldItemMap.get("itemId")).queryOne();
              if (productCheck == null) {
                Map<String,Object> inMap=new HashMap<String,Object>();
                inMap.put("productId",soldItemMap.get("itemId"));
                inMap.put("productTypeId","EBAY_ITEM");
                inMap.put("internalName","eBay Item " + soldItemMap.get("title"));
                inMap.put("userLogin",userLogin);
                dispatcher.runSync("createProduct",inMap);
                List<GenericValue> productRole=EntityQuery.use(delegator).from("ProductRole").where("partyId",partyId,"productId",soldItemMap.get("itemId"),"roleTypeId","VENDOR").queryList();
                if (productRole.size() == 0) {
                  Map<String,Object> addRole=new HashMap<String,Object>();
                  addRole.put("productId",soldItemMap.get("itemId"));
                  addRole.put("roleTypeId","VENDOR");
                  addRole.put("partyId",partyId);
                  addRole.put("fromDate",UtilDateTime.nowTimestamp());
                  addRole.put("userLogin",userLogin);
                  dispatcher.runSync("addPartyToProduct",addRole);
                }
              }
            }
          }
        }
        serviceMap=new HashMap<String,Object>();
        serviceMap.put("userLogin",userLogin);
        serviceMap.put("productStoreId",productStoreId);
        resultService=dispatcher.runSync("getEbayActiveItems",serviceMap);
        List<Map<String,Object>> activeItems=UtilGenerics.checkList(resultService.get("activeItems"));
        List<String> activeItemMaps=new LinkedList<String>();
        if (activeItems.size() != 0) {
          for (int itemCount=0; itemCount < activeItems.size(); itemCount++) {
            Map<String,Object> activeItemMap=UtilGenerics.checkMap(activeItems.get(itemCount));
            if (UtilValidate.isNotEmpty(activeItemMap.get("itemId"))) {
              activeItemMaps.add((String)activeItemMap.get("itemId"));
            }
          }
        }
        List<GenericValue> productRoles=EntityQuery.use(delegator).from("ProductRole").where("partyId",partyId,"roleTypeId","VENDOR").queryList();
        List<String> productRoleIds=new LinkedList<String>();
        if (productRoles.size() != 0) {
          for (int itemCount=0; itemCount < productRoles.size(); itemCount++) {
            String productId=productRoles.get(itemCount).getString("productId");
            productRoleIds.add(productId);
          }
        }
        List<EntityCondition> andExpr=new LinkedList<EntityCondition>();
        EntityCondition activeItemCond=EntityCondition.makeCondition("productId",EntityOperator.NOT_IN,activeItemMaps);
        andExpr.add(activeItemCond);
        EntityCondition productTypeCond=EntityCondition.makeCondition("productTypeId",EntityOperator.EQUALS,"EBAY_ITEM");
        andExpr.add(productTypeCond);
        EntityCondition isVirtualCond=EntityCondition.makeCondition("isVirtual",EntityOperator.NOT_EQUAL,"Y");
        andExpr.add(isVirtualCond);
        EntityCondition productRole=EntityCondition.makeCondition("productId",EntityOperator.IN,productRoleIds);
        andExpr.add(productRole);
        List<GenericValue> itemsToRelist=EntityQuery.use(delegator).from("Product").where(andExpr).queryList();
        if (itemsToRelist.size() != 0) {
          ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
          for (int itemRelist=0; itemRelist < itemsToRelist.size(); itemRelist++) {
            RelistItemCall relistItemCall=new RelistItemCall(apiContext);
            ItemType itemToBeRelisted=new ItemType();
            GenericValue product=itemsToRelist.get(itemRelist);
            itemToBeRelisted.setItemID(product.getString("productId"));
            relistItemCall.setItemToBeRelisted(itemToBeRelisted);
            relistItemCall.relistItem();
            GenericValue productStore=EntityQuery.use(delegator).from("Product").where("productId",product.getString("productId")).queryOne();
            productStore.set("isVirtual","Y");
            productStore.store();
            Debug.logInfo("Relisted Item - " + product.getString("productId"),module);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
