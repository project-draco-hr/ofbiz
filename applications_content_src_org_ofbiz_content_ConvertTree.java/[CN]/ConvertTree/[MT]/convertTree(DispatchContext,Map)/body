{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String file=(String)context.get("file");
  String errMsg="", sucMsg="";
  GenericValue Entity=null;
  try {
    BufferedReader input=null;
    try {
      if (!UtilValidate.isEmpty(file)) {
        input=new BufferedReader(new FileReader(file));
        String line=null;
        int size=0;
        if (file != null) {
          int counterLine=0;
          Entity=null;
          Entity=delegator.makeValue("Content");
          Entity.set("contentId","ROOT");
          Entity.set("contentName","ROOT");
          Entity.set("contentTypeId","DOCUMENT");
          Entity.set("createdByUserLogin",userLogin.get("userLoginId"));
          Entity.set("lastModifiedByUserLogin",userLogin.get("userLoginId"));
          Entity.set("createdDate",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedStamp",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedTxStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdTxStamp",UtilDateTime.nowTimestamp());
          delegator.create(Entity);
          Entity=null;
          Entity=delegator.makeValue("Content");
          Entity.set("contentId","HOME_DUCUMENT");
          Entity.set("contentName","Home");
          Entity.set("contentTypeId","DOCUMENT");
          Entity.set("createdByUserLogin",userLogin.get("userLoginId"));
          Entity.set("lastModifiedByUserLogin",userLogin.get("userLoginId"));
          Entity.set("createdDate",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedStamp",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedTxStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdTxStamp",UtilDateTime.nowTimestamp());
          delegator.create(Entity);
          Map<String,Object> contentAssoc=FastMap.newInstance();
          contentAssoc.put("contentId","HOME_DUCUMENT");
          contentAssoc.put("contentAssocTypeId","TREE_CHILD");
          contentAssoc.put("contentIdTo","ROOT");
          contentAssoc.put("userLogin",userLogin);
          dispatcher.runSync("createContentAssoc",contentAssoc);
          int recordCount=0;
          while ((line=input.readLine()) != null) {
            boolean hasFolder=true;
            String rootContent=null, contentId=null;
            counterLine++;
            if (counterLine > 1) {
              size=line.length();
              String check="\\", checkSubContent=",", contentName="", contentNameInprogress="", data=line.substring(3,size);
              size=data.length();
              List<GenericValue> contents=null;
              for (int index=0; index < size; index++) {
                boolean contentNameMatch=false;
                int contentAssocSize=0;
                List<GenericValue> contentAssocs=null;
                if (data.charAt(index) == check.charAt(0) || data.charAt(index) == checkSubContent.charAt(0)) {
                  contentName=contentName + contentNameInprogress;
                  if (contentName.length() > 100) {
                    contentName=contentName.substring(0,100);
                  }
                  contents=delegator.findByAnd("Content",UtilMisc.toMap("contentName",contentName));
                  if (contents.size() > 0) {
                    GenericValue contentResult=contents.get(0);
                    contentId=contentResult.get("contentId").toString();
                  }
                  if (contents.size() > 0 && hasFolder == true) {
                    GenericValue contentResult=contents.get(0);
                    contentId=contentResult.get("contentId").toString();
                    if (rootContent != null) {
                      contentAssocs=delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentId",contentId,"contentIdTo",rootContent));
                      List<GenericValue> contentAssocCheck=delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentIdTo",rootContent));
                      Iterator<GenericValue> contentAssChecks=contentAssocCheck.iterator();
                      while (contentAssChecks.hasNext() && contentNameMatch == false) {
                        GenericValue contentAss=contentAssChecks.next();
                        GenericValue contentcheck=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentAss.get("contentId")));
                        if (contentcheck != null) {
                          if (contentcheck.get("contentName").equals(contentName) && contentNameMatch == false) {
                            contentNameMatch=true;
                            contentId=contentcheck.get("contentId").toString();
                          }
                        }
                      }
                    }
 else {
                      rootContent="HOME_DUCUMENT";
                      contentAssocs=delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentId",contentId,"contentIdTo",rootContent));
                    }
                    contentAssocSize=contentAssocs.size();
                  }
                  if (contentAssocSize == 0 && contentNameMatch == false) {
                    Entity=null;
                    contentId=delegator.getNextSeqId("Content");
                    Entity=delegator.makeValue("Content");
                    Entity.set("contentId",contentId);
                    Entity.set("contentName",contentName);
                    Entity.set("contentTypeId","DOCUMENT");
                    Entity.set("createdByUserLogin",userLogin.get("userLoginId"));
                    Entity.set("lastModifiedByUserLogin",userLogin.get("userLoginId"));
                    Entity.set("createdDate",UtilDateTime.nowTimestamp());
                    Entity.set("lastUpdatedStamp",UtilDateTime.nowTimestamp());
                    Entity.set("lastUpdatedTxStamp",UtilDateTime.nowTimestamp());
                    Entity.set("createdStamp",UtilDateTime.nowTimestamp());
                    Entity.set("createdTxStamp",UtilDateTime.nowTimestamp());
                    delegator.create(Entity);
                    hasFolder=false;
                  }
 else {
                    hasFolder=true;
                  }
                  if (rootContent == null) {
                    rootContent="HOME_DUCUMENT";
                  }
                  contentAssocs=delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentId",contentId,"contentIdTo",rootContent,"contentAssocTypeId","TREE_CHILD"));
                  if (contentAssocs.size() == 0) {
                    contentAssoc=FastMap.newInstance();
                    contentAssoc.put("contentId",contentId);
                    contentAssoc.put("contentAssocTypeId","TREE_CHILD");
                    contentAssoc.put("contentIdTo",rootContent);
                    contentAssoc.put("userLogin",userLogin);
                    dispatcher.runSync("createContentAssoc",contentAssoc);
                    rootContent=contentId;
                  }
 else {
                    rootContent=contentId;
                  }
                  contentName="";
                  contentNameInprogress="";
                }
                if (data.charAt(index) == checkSubContent.charAt(0)) {
                  createSubContent(index,data,rootContent,context,dctx);
                  index=size;
                  continue;
                }
                if ((data.charAt(index)) != check.charAt(0)) {
                  contentNameInprogress=contentNameInprogress.concat(Character.toString(data.charAt(index)));
                  if (contentNameInprogress.length() > 99) {
                    contentName=contentName + contentNameInprogress;
                    contentNameInprogress="";
                  }
                }
              }
              recordCount++;
            }
          }
          sucMsg="Convert Documents Tree Successful.<br/>Total : " + counterLine + " rows";
        }
      }
    }
  finally {
      input.close();
    }
    return ServiceUtil.returnSuccess(sucMsg);
  }
 catch (  IOException e) {
    errMsg="IOException " + UtilMisc.toMap("errMessage",e.toString());
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  GenericServiceException e) {
    errMsg="GenericServiceException " + UtilMisc.toMap("errMessage",e.toString());
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
catch (  GenericEntityException e) {
    errMsg="GenericEntityException " + UtilMisc.toMap("errMessage",e.toString());
    Debug.logError(e,errMsg,module);
    e.printStackTrace();
    return ServiceUtil.returnError(errMsg);
  }
}
