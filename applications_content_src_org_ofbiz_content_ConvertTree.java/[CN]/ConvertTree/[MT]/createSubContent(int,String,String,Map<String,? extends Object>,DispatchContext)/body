{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String subContents=null, check=",", oldChar="\"", newChar="", contentNameInprogress="", contentName="", contentId=null;
  GenericValue Entity=null;
  String errMsg="", sucMsg="";
  subContents=line.substring(index + 1,line.length());
  subContents=subContents.replace(oldChar,newChar);
  int size=subContents.length();
  try {
    for (index=0; index < size; index++) {
      boolean contentNameMatch=false;
      if (subContents.charAt(index) == check.charAt(0)) {
        contentName=contentName + contentNameInprogress;
        if (contentName.length() > 100) {
          contentName=contentName.substring(0,100);
        }
        List<GenericValue> contents=EntityQuery.use(delegator).from("Content").where("contentName",contentName).orderBy("-contentId").queryList();
        if (contents != null) {
          Iterator<GenericValue> contentCheck=contents.iterator();
          while (contentCheck.hasNext() && contentNameMatch == false) {
            GenericValue contentch=contentCheck.next();
            if (contentch != null) {
              List<GenericValue> contentAssocsChecks=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",contentch.get("contentId"),"contentIdTo",rootContent).queryList();
              if (contentAssocsChecks.size() > 0) {
                contentNameMatch=true;
              }
            }
          }
        }
        contentId=null;
        if (contentNameMatch == false) {
          Map<String,Object> data=new HashMap<String,Object>();
          data.put("userLogin",userLogin);
          String dataResourceId=dispatcher.runSync("createDataResource",data).get("dataResourceId").toString();
          contentId=delegator.getNextSeqId("Content");
          Entity=null;
          Entity=delegator.makeValue("Content");
          Entity.set("contentId",contentId);
          Entity.set("contentName",contentName);
          Entity.set("contentTypeId","DOCUMENT");
          Entity.set("dataResourceId",dataResourceId);
          Entity.set("createdByUserLogin",userLogin.get("userLoginId"));
          Entity.set("lastModifiedByUserLogin",userLogin.get("userLoginId"));
          Entity.set("createdDate",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedStamp",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedTxStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdTxStamp",UtilDateTime.nowTimestamp());
          delegator.create(Entity);
          Map<String,Object> contentAssoc=new HashMap<String,Object>();
          contentAssoc.put("contentId",contentId);
          contentAssoc.put("contentAssocTypeId","SUB_CONTENT");
          contentAssoc.put("contentIdTo",rootContent);
          contentAssoc.put("userLogin",userLogin);
          dispatcher.runSync("createContentAssoc",contentAssoc);
        }
        contentName="";
        contentNameInprogress="";
      }
      if ((subContents.charAt(index)) != check.charAt(0)) {
        contentNameInprogress=contentNameInprogress.concat(Character.toString(subContents.charAt(index)));
        if (contentNameInprogress.length() > 99) {
          contentName=contentName + contentNameInprogress;
          contentNameInprogress="";
        }
      }
      if (index == size - 1) {
        contentNameMatch=false;
        List<GenericValue> contents=EntityQuery.use(delegator).from("Content").where("contentName",contentName).queryList();
        if (contents != null) {
          Iterator<GenericValue> contentCheck=contents.iterator();
          while (contentCheck.hasNext() && contentNameMatch == false) {
            GenericValue contentch=contentCheck.next();
            if (contentch != null) {
              long contentAssocCount=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",contentch.get("contentId"),"contentIdTo",rootContent).queryCount();
              if (contentAssocCount > 0) {
                contentNameMatch=true;
              }
            }
          }
        }
        contentId=null;
        if (contentNameMatch == false) {
          Map<String,Object> data=new HashMap<String,Object>();
          data.put("userLogin",userLogin);
          String dataResourceId=dispatcher.runSync("createDataResource",data).get("dataResourceId").toString();
          contentId=delegator.getNextSeqId("Content");
          Entity=null;
          Entity=delegator.makeValue("Content");
          Entity.set("contentId",contentId);
          Entity.set("contentName",contentName);
          Entity.set("contentTypeId","DOCUMENT");
          Entity.set("dataResourceId",dataResourceId);
          Entity.set("createdByUserLogin",userLogin.get("userLoginId"));
          Entity.set("lastModifiedByUserLogin",userLogin.get("userLoginId"));
          Entity.set("createdDate",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedStamp",UtilDateTime.nowTimestamp());
          Entity.set("lastUpdatedTxStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdStamp",UtilDateTime.nowTimestamp());
          Entity.set("createdTxStamp",UtilDateTime.nowTimestamp());
          delegator.create(Entity);
          Map<String,Object> contentAssoc=new HashMap<String,Object>();
          contentAssoc.put("contentId",contentId);
          contentAssoc.put("contentAssocTypeId","SUB_CONTENT");
          contentAssoc.put("contentIdTo",rootContent);
          contentAssoc.put("userLogin",userLogin);
          dispatcher.runSync("createContentAssoc",contentAssoc);
        }
      }
    }
    return ServiceUtil.returnSuccess(sucMsg);
  }
 catch (  GenericEntityException e) {
    errMsg="GenericEntityException " + UtilMisc.toMap("errMessage",e.toString());
    Debug.logError(e,errMsg,module);
    e.printStackTrace();
    return ServiceUtil.returnError(errMsg);
  }
catch (  GenericServiceException e) {
    errMsg="GenericServiceException" + UtilMisc.toMap("errMessage",e.toString());
    Debug.logError(e,errMsg,module);
    e.printStackTrace();
    return ServiceUtil.returnError(errMsg);
  }
}
