{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String shipmentId=(String)context.get("shipmentId");
  Locale locale=(Locale)context.get("locale");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  try {
    EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Trouble getting Shipment entity for shipment " + shipmentId,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTroubleGettingShipmentEntity",UtilMisc.toMap("shipmentId",shipmentId),locale));
  }
  List<GenericValue> itemIssuances=new LinkedList<GenericValue>();
  try {
    itemIssuances=EntityQuery.use(delegator).select("orderId","shipmentId").from("ItemIssuance").orderBy("orderId").distinct().queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting issued items from shipments",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingItemsFromShipments",locale));
  }
  if (itemIssuances.size() == 0) {
    Debug.logInfo("No items issued for shipments",module);
    return ServiceUtil.returnSuccess();
  }
  Map<String,GenericValue> ordersWithInProcessInvoice=new HashMap<String,GenericValue>();
  for (  GenericValue itemIssuance : itemIssuances) {
    String orderId=itemIssuance.getString("orderId");
    Map<String,Object> billFields=new HashMap<String,Object>();
    billFields.put("orderId",orderId);
    GenericValue orderItemBilling=null;
    try {
      orderItemBilling=EntityQuery.use(delegator).from("OrderItemBilling").where(billFields).queryFirst();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Problem looking up OrderItemBilling records for " + billFields,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemLookingUpOrderItemBilling",UtilMisc.toMap("billFields",billFields),locale));
    }
    if (orderItemBilling != null) {
      GenericValue invoice=null;
      try {
        invoice=orderItemBilling.getRelatedOne("Invoice",false);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
        return ServiceUtil.returnError(e.getMessage());
      }
      if (invoice != null) {
        if ("INVOICE_IN_PROCESS".equals(invoice.getString("statusId"))) {
          ordersWithInProcessInvoice.put(orderId,invoice);
        }
      }
    }
  }
  for (  GenericValue invoice : ordersWithInProcessInvoice.values()) {
    String invoiceId=invoice.getString("invoiceId");
    Map<String,Object> setInvoiceStatusResult=new HashMap<String,Object>();
    try {
      setInvoiceStatusResult=dispatcher.runSync("setInvoiceStatus",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"statusId","INVOICE_READY","userLogin",userLogin));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
    if (ServiceUtil.isError(setInvoiceStatusResult)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingErrorCreatingInvoiceFromOrder",locale),null,null,setInvoiceStatusResult);
    }
  }
  return ServiceUtil.returnSuccess();
}
