{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  EntityCondition requirementConditions=(EntityCondition)context.get("requirementConditions");
  String partyId=(String)context.get("partyId");
  String unassignedRequirements=(String)context.get("unassignedRequirements");
  List<String> statusIds=UtilGenerics.checkList(context.get("statusIds"));
  try {
    List<EntityCondition> conditions=UtilMisc.toList(EntityCondition.makeCondition("requirementTypeId",EntityOperator.EQUALS,"PRODUCT_REQUIREMENT"),EntityUtil.getFilterByDateExpr());
    if (UtilValidate.isNotEmpty(statusIds)) {
      conditions.add(EntityCondition.makeCondition("statusId",EntityOperator.IN,statusIds));
    }
 else {
      conditions.add(EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"REQ_APPROVED"));
    }
    if (requirementConditions != null)     conditions.add(requirementConditions);
    if (UtilValidate.isNotEmpty(partyId)) {
      conditions.add(EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));
      conditions.add(EntityCondition.makeCondition("roleTypeId",EntityOperator.EQUALS,"SUPPLIER"));
    }
 else     if (UtilValidate.isNotEmpty(unassignedRequirements)) {
      conditions.add(EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,null));
    }
 else {
      conditions.add(EntityCondition.makeCondition("roleTypeId",EntityOperator.EQUALS,"SUPPLIER"));
    }
    List<GenericValue> requirementAndRoles=EntityQuery.use(delegator).from("RequirementAndRole").where(conditions).orderBy("partyId","requirementId").queryList();
    Map<String,GenericValue> suppliers=FastMap.newInstance();
    Map<String,GenericValue> gids=FastMap.newInstance();
    Map<String,Map<String,Object>> inventories=FastMap.newInstance();
    Map<String,BigDecimal> productsSold=FastMap.newInstance();
    BigDecimal quantity=BigDecimal.ZERO;
    BigDecimal amountTotal=BigDecimal.ZERO;
    Set<String> products=FastSet.newInstance();
    Timestamp timePeriodStart=UtilDateTime.getMonthStart(UtilDateTime.nowTimestamp(),0,-6);
    List<Map<String,Object>> requirements=FastList.newInstance();
    for (    GenericValue requirement : requirementAndRoles) {
      Map<String,Object> union=FastMap.newInstance();
      String productId=requirement.getString("productId");
      partyId=requirement.getString("partyId");
      String facilityId=requirement.getString("facilityId");
      BigDecimal requiredQuantity=requirement.getBigDecimal("quantity");
      String supplierKey=partyId + "^" + productId;
      GenericValue supplierProduct=suppliers.get(supplierKey);
      if (supplierProduct == null) {
        supplierProduct=EntityQuery.use(delegator).from("SupplierProduct").where("partyId",partyId,"productId",productId).orderBy("minimumOrderQuantity","lastPrice").filterByDate("availableFromDate","availableThruDate").queryFirst();
        suppliers.put(supplierKey,supplierProduct);
      }
      if (supplierProduct != null) {
        union.putAll(supplierProduct.getAllFields());
        BigDecimal lastPrice=supplierProduct.getBigDecimal("lastPrice");
        amountTotal=amountTotal.add(lastPrice.multiply(requiredQuantity));
      }
      GenericValue gid=gids.get(productId);
      if (gid == null) {
        gid=EntityQuery.use(delegator).from("GoodIdentification").where("goodIdentificationTypeId","UPCA","productId",requirement.get("productId")).queryOne();
        gids.put(productId,gid);
      }
      if (gid != null)       union.put("idValue",gid.get("idValue"));
      if (UtilValidate.isNotEmpty(facilityId)) {
        String inventoryKey=facilityId + "^" + productId;
        Map<String,Object> inventory=inventories.get(inventoryKey);
        if (inventory == null) {
          inventory=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",facilityId));
          if (ServiceUtil.isError(inventory)) {
            return inventory;
          }
          inventories.put(inventoryKey,inventory);
        }
        if (inventory != null) {
          union.put("qoh",inventory.get("quantityOnHandTotal"));
          union.put("atp",inventory.get("availableToPromiseTotal"));
        }
      }
      BigDecimal sold=productsSold.get(productId);
      if (sold == null) {
        EntityCondition prodConditions=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("orderTypeId",EntityOperator.EQUALS,"SALES_ORDER"),EntityCondition.makeCondition("orderStatusId",EntityOperator.NOT_IN,UtilMisc.toList("ORDER_REJECTED","ORDER_CANCELLED")),EntityCondition.makeCondition("orderItemStatusId",EntityOperator.NOT_IN,UtilMisc.toList("ITEM_REJECTED","ITEM_CANCELLED")),EntityCondition.makeCondition("orderDate",EntityOperator.GREATER_THAN_EQUAL_TO,timePeriodStart)),EntityOperator.AND);
        GenericValue count=EntityQuery.use(delegator).select("quantityOrdered").from("OrderItemQuantityReportGroupByProduct").where(prodConditions).queryFirst();
        if (count != null) {
          sold=count.getBigDecimal("quantityOrdered");
          if (sold != null)           productsSold.put(productId,sold);
        }
      }
      if (sold != null) {
        union.put("qtySold",sold);
      }
      if (requirement.getBigDecimal("quantity") == null)       requirement.put("quantity",BigDecimal.ONE);
      quantity=quantity.add(requiredQuantity);
      products.add(productId);
      union.putAll(requirement.getAllFields());
      requirements.add(union);
    }
    Map<String,Object> results=ServiceUtil.returnSuccess();
    results.put("requirementsForSupplier",requirements);
    results.put("distinctProductCount",Integer.valueOf(products.size()));
    results.put("quantityTotal",quantity);
    results.put("amountTotal",amountTotal);
    return results;
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderServiceExceptionSeeLogs",locale));
  }
catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderEntityExceptionSeeLogs",locale));
  }
}
