{
  Delegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  try {
    GenericValue order=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
    GenericValue productStore=order.getRelatedOneCache("ProductStore");
    if (productStore == null) {
      Debug.logInfo("ProductStore for order ID " + orderId + " not found, requirements not created",module);
      return ServiceUtil.returnSuccess();
    }
    String facilityId=productStore.getString("inventoryFacilityId");
    List<GenericValue> orderItems=order.getRelated("OrderItem");
    for (Iterator<GenericValue> iter=orderItems.iterator(); iter.hasNext(); ) {
      GenericValue item=iter.next();
      GenericValue product=item.getRelatedOne("Product");
      if (product == null)       continue;
      if ((!"PRODRQM_AUTO".equals(product.get("requirementMethodEnumId")) && !"PRODRQM_AUTO".equals(productStore.get("requirementMethodEnumId"))) || (product.get("requirementMethodEnumId") == null && !"PRODRQM_AUTO".equals(productStore.get("requirementMethodEnumId"))))       continue;
      BigDecimal quantity=item.getBigDecimal("quantity");
      BigDecimal cancelQuantity=item.getBigDecimal("cancelQuantity");
      BigDecimal required=quantity.subtract(cancelQuantity == null ? BigDecimal.ZERO : cancelQuantity);
      if (required.compareTo(BigDecimal.ZERO) <= 0)       continue;
      Map<String,Object> input=UtilMisc.toMap("userLogin",userLogin,"facilityId",facilityId,"productId",product.get("productId"),"quantity",required,"requirementTypeId","PRODUCT_REQUIREMENT");
      Map<String,Object> results=dispatcher.runSync("createRequirement",input);
      if (ServiceUtil.isError(results))       return results;
      String requirementId=(String)results.get("requirementId");
      input=UtilMisc.toMap("userLogin",userLogin,"orderId",order.get("orderId"),"orderItemSeqId",item.get("orderItemSeqId"),"requirementId",requirementId,"quantity",required);
      results=dispatcher.runSync("createOrderRequirementCommitment",input);
      if (ServiceUtil.isError(results))       return results;
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
  }
  return ServiceUtil.returnSuccess();
}
