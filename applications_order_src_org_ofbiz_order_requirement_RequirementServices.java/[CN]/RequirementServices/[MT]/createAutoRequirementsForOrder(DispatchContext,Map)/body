{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String orderId=(String)context.get("orderId");
  try {
    GenericValue order=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",orderId));
    GenericValue productStore=order.getRelatedOneCache("ProductStore");
    String facilityId=productStore.getString("inventoryFacilityId");
    List orderItems=order.getRelated("OrderItem");
    for (Iterator iter=orderItems.iterator(); iter.hasNext(); ) {
      GenericValue item=(GenericValue)iter.next();
      GenericValue product=item.getRelatedOne("Product");
      if (product == null)       continue;
      if (!"PRODRQM_AUTO".equals(product.get("requirementMethodEnumId")))       continue;
      Double quantity=item.getDouble("quantity");
      Double cancelQuantity=item.getDouble("cancelQuantity");
      Double required=new Double(quantity.doubleValue() - (cancelQuantity == null ? 0.0 : cancelQuantity.doubleValue()));
      if (required.doubleValue() <= 0.0)       continue;
      Map input=UtilMisc.toMap("userLogin",userLogin,"facilityId",facilityId,"productId",product.get("productId"),"quantity",required,"requirementTypeId","PRODUCT_REQUIREMENT");
      Map results=dispatcher.runSync("createRequirement",input);
      if (ServiceUtil.isError(results))       return results;
      String requirementId=(String)results.get("requirementId");
      input=UtilMisc.toMap("userLogin",userLogin,"orderId",order.get("orderId"),"orderItemSeqId",item.get("orderItemSeqId"),"requirementId",requirementId,"quantity",required);
      results=dispatcher.runSync("createOrderRequirementCommitment",input);
      if (ServiceUtil.isError(results))       return results;
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
catch (  GenericServiceException e) {
    Debug.logError(e,module);
  }
  return ServiceUtil.returnSuccess();
}
