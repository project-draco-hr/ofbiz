{
  GenericDelegator delegator=ctx.getDelegator();
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Locale locale=(Locale)context.get("locale");
  EntityCondition requirementConditions=(EntityCondition)context.get("requirementConditions");
  String partyId=(String)context.get("partyId");
  String unassignedRequirements=(String)context.get("unassignedRequirements");
  String currencyUomId=(String)context.get("currencyUomId");
  try {
    List orderBy=UtilMisc.toList("partyId","requirementId");
    List conditions=UtilMisc.toList(new EntityExpr("requirementTypeId",EntityOperator.EQUALS,"PRODUCT_REQUIREMENT"),new EntityExpr("statusId",EntityOperator.EQUALS,"REQ_APPROVED"),EntityUtil.getFilterByDateExpr());
    if (requirementConditions != null)     conditions.add(requirementConditions);
    if (UtilValidate.isNotEmpty(partyId)) {
      conditions.add(new EntityExpr("partyId",EntityOperator.EQUALS,partyId));
      conditions.add(new EntityExpr("roleTypeId",EntityOperator.EQUALS,"SUPPLIER"));
    }
 else     if (UtilValidate.isNotEmpty(unassignedRequirements)) {
      conditions.add(new EntityExpr("partyId",EntityOperator.EQUALS,null));
    }
 else {
      conditions.add(new EntityExpr("roleTypeId",EntityOperator.EQUALS,"SUPPLIER"));
    }
    List requirementAndRoles=delegator.findByAnd("RequirementAndRole",conditions,orderBy);
    Map suppliers=FastMap.newInstance();
    Map gids=FastMap.newInstance();
    Map inventories=FastMap.newInstance();
    double quantity=0.0;
    Set products=new HashSet();
    List requirements=FastList.newInstance();
    for (Iterator iter=requirementAndRoles.iterator(); iter.hasNext(); ) {
      Map union=FastMap.newInstance();
      GenericValue requirement=(GenericValue)iter.next();
      String productId=requirement.getString("productId");
      partyId=requirement.getString("partyId");
      String facilityId=requirement.getString("facilityId");
      String supplierKey=partyId + "^" + productId;
      GenericValue supplierProduct=(GenericValue)suppliers.get(supplierKey);
      if (supplierProduct == null) {
        conditions=UtilMisc.toList(new EntityExpr("partyId",EntityOperator.EQUALS,partyId),new EntityExpr("productId",EntityOperator.EQUALS,productId),EntityUtil.getFilterByDateExpr("availableFromDate","availableThruDate"));
        supplierProduct=EntityUtil.getFirst(delegator.findByAnd("SupplierProduct",conditions));
        suppliers.put(supplierKey,supplierProduct);
      }
      if (supplierProduct != null)       union.putAll(supplierProduct.getAllFields());
      GenericValue gid=(GenericValue)gids.get(productId);
      if (gid == null) {
        gid=delegator.findByPrimaryKey("GoodIdentification",UtilMisc.toMap("goodIdentificationTypeId","UPCA","productId",requirement.get("productId")));
        gids.put(productId,gid);
      }
      if (gid != null)       union.put("idValue",gid.get("idValue"));
      if (UtilValidate.isNotEmpty(facilityId)) {
        String inventoryKey=facilityId + "^" + productId;
        Map inventory=(Map)inventories.get(inventoryKey);
        if (inventory == null) {
          inventory=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",facilityId));
          if (ServiceUtil.isError(inventory)) {
            return inventory;
          }
          inventories.put(inventoryKey,inventory);
        }
        if (inventory != null) {
          union.put("qoh",inventory.get("quantityOnHandTotal"));
          union.put("atp",inventory.get("availableToPromiseTotal"));
        }
      }
      quantity+=requirement.getDouble("quantity").doubleValue();
      products.add(productId);
      union.putAll(requirement.getAllFields());
      requirements.add(union);
    }
    Map results=ServiceUtil.returnSuccess();
    results.put("requirementsForSupplier",requirements);
    results.put("distinctProductCount",new Integer(products.size()));
    results.put("quantityTotal",new Double(quantity));
    return results;
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderServiceExceptionSeeLogs",locale));
  }
catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderEntityExceptionSeeLogs",locale));
  }
}
