{
  DispatchContext dctx=dispatcher.getLocalContext(localName);
  Locale locale=(Locale)parameters.get("locale");
  Map<String,Object> result=ServiceUtil.returnSuccess();
  if (modelService.invoke == null || !availableInvokeActionNames.contains(modelService.invoke)) {
    throw new GenericServiceException("In Service [" + modelService.name + "] the invoke value must be create, update, or delete for entity-auto engine");
  }
  if (UtilValidate.isEmpty(modelService.defaultEntityName)) {
    throw new GenericServiceException("In Service [" + modelService.name + "] you must specify a default-entity-name for entity-auto engine");
  }
  ModelEntity modelEntity=dctx.getDelegator().getModelEntity(modelService.defaultEntityName);
  if (modelEntity == null) {
    throw new GenericServiceException("In Service [" + modelService.name + "] the specified default-entity-name ["+ modelService.defaultEntityName+ "] is not valid");
  }
  try {
    boolean allPksInOnly=true;
    LinkedList<String> pkFieldNameOutOnly=null;
    for (    ModelField pkField : modelEntity.getPkFieldsUnmodifiable()) {
      ModelParam pkParam=modelService.getParam(pkField.getName());
      boolean pkValueInParameters=pkParam.isIn() && UtilValidate.isNotEmpty(parameters.get(pkParam.getFieldName()));
      if (pkParam.isOut() && !pkValueInParameters) {
        if (pkFieldNameOutOnly == null) {
          pkFieldNameOutOnly=new LinkedList<String>();
          allPksInOnly=false;
        }
        pkFieldNameOutOnly.add(pkField.getName());
      }
    }
switch (modelService.invoke) {
case "create":
      result=invokeCreate(dctx,parameters,modelService,modelEntity,allPksInOnly,pkFieldNameOutOnly);
    result.put("successMessage",UtilProperties.getMessage("ServiceUiLabels","EntityCreatedSuccessfully",UtilMisc.toMap("entityName",modelEntity.getEntityName()),locale));
  break;
case "update":
result=invokeUpdate(dctx,parameters,modelService,modelEntity,allPksInOnly);
result.put("successMessage",UtilProperties.getMessage("ServiceUiLabels","EntityUpdatedSuccessfully",UtilMisc.toMap("entityName",modelEntity.getEntityName()),locale));
break;
case "delete":
result=invokeDelete(dctx,parameters,modelService,modelEntity,allPksInOnly);
result.put("successMessage",UtilProperties.getMessage("ServiceUiLabels","EntityDeletedSuccessfully",UtilMisc.toMap("entityName",modelEntity.getEntityName()),locale));
break;
case "expire":
result=invokeExpire(dctx,parameters,modelService,modelEntity,allPksInOnly);
if (ServiceUtil.isSuccess(result)) {
result=invokeUpdate(dctx,parameters,modelService,modelEntity,allPksInOnly);
}
result.put("successMessage",UtilProperties.getMessage("ServiceUiLabels","EntityExpiredSuccessfully",UtilMisc.toMap("entityName",modelEntity.getEntityName()),locale));
break;
default :
break;
}
GenericValue crudValue=(GenericValue)result.get("crudValue");
if (crudValue != null) {
result.remove("crudValue");
result.putAll(modelService.makeValid(crudValue,"OUT"));
}
}
 catch (GeneralException e) {
Debug.logError(e,"Error doing entity-auto operation for entity [" + modelEntity.getEntityName() + "] in service ["+ modelService.name+ "]: "+ e.toString(),module);
return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceEntityAutoOperation",UtilMisc.toMap("entityName",modelEntity.getEntityName(),"serviceName",modelService.name,"errorString",e.toString()),locale));
}
result.put(ModelService.SUCCESS_MESSAGE,result.get("successMessage"));
return result;
}
