{
  int viewIndex=0;
  int viewSize=20;
  int highIndex=0;
  int lowIndex=0;
  int listSize=0;
  HttpSession session=request.getSession();
  ProductSearchOptions productSearchOptions=getProductSearchOptions(session);
  String addOnTopProdCategoryId=productSearchOptions.getTopProductCategoryId();
  Integer viewIndexInteger=productSearchOptions.getViewIndex();
  if (viewIndexInteger != null)   viewIndex=viewIndexInteger.intValue();
  Integer viewSizeInteger=productSearchOptions.getViewSize();
  if (viewSizeInteger != null)   viewSize=viewSizeInteger.intValue();
  lowIndex=viewIndex * viewSize;
  highIndex=(viewIndex + 1) * viewSize;
  List productIds=FastList.newInstance();
  String visitId=VisitHandler.getVisitId(session);
  List productSearchConstraintList=ProductSearchOptions.getConstraintList(session);
  if (productSearchConstraintList != null && productSearchConstraintList.size() > 0) {
    checkSaveSearchOptionsHistory(session);
    int addOnTopTotalListSize=0;
    int addOnTopListSize=0;
    List addOnTopProductCategoryMembers=FastList.newInstance();
    if (UtilValidate.isNotEmpty(addOnTopProdCategoryId)) {
      Timestamp now=UtilDateTime.nowTimestamp();
      List addOnTopProdCondList=FastList.newInstance();
      addOnTopProdCondList.add(new EntityExpr(new EntityExpr("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,new EntityExpr("thruDate",EntityOperator.GREATER_THAN,now)));
      addOnTopProdCondList.add(new EntityExpr("fromDate",EntityOperator.LESS_THAN,now));
      addOnTopProdCondList.add(new EntityExpr("productCategoryId",EntityOperator.EQUALS,addOnTopProdCategoryId));
      EntityFindOptions findOpts=new EntityFindOptions(true,EntityFindOptions.TYPE_SCROLL_INSENSITIVE,EntityFindOptions.CONCUR_READ_ONLY,true);
      EntityListIterator pli=null;
      try {
        pli=delegator.findListIteratorByCondition("ProductCategoryMember",new EntityConditionList(addOnTopProdCondList,EntityOperator.AND),null,UtilMisc.toList("productId","sequenceNum"),UtilMisc.toList("sequenceNum"),findOpts);
        addOnTopProductCategoryMembers=pli.getPartialList(lowIndex,viewSize);
        addOnTopListSize=addOnTopProductCategoryMembers.size();
        for (int i=0; i < addOnTopProductCategoryMembers.size(); i++) {
          GenericValue alwaysAddProductCategoryMember=(GenericValue)addOnTopProductCategoryMembers.get(i);
          productIds.add(alwaysAddProductCategoryMember.getString("productId"));
        }
        pli.last();
        addOnTopTotalListSize=pli.currentIndex();
        listSize=listSize + addOnTopTotalListSize;
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,module);
      }
 finally {
        if (pli != null) {
          try {
            pli.close();
          }
 catch (          GenericEntityException e) {
            Debug.logError(e,module);
          }
        }
      }
    }
    int resultOffsetInt=lowIndex - addOnTopTotalListSize + 1;
    if (resultOffsetInt < 1) {
      resultOffsetInt=1;
    }
    int maxResultsInt=viewSize - addOnTopListSize;
    Integer resultOffset=new Integer(resultOffsetInt);
    Integer maxResults=new Integer(maxResultsInt);
    ResultSortOrder resultSortOrder=ProductSearchOptions.getResultSortOrder(request);
    ProductSearchContext productSearchContext=new ProductSearchContext(delegator,visitId);
    productSearchContext.addProductSearchConstraints(productSearchConstraintList);
    productSearchContext.setResultSortOrder(resultSortOrder);
    productSearchContext.setResultOffset(resultOffset);
    productSearchContext.setMaxResults(maxResults);
    List foundProductIds=productSearchContext.doSearch();
    if (maxResultsInt > 0) {
      productIds.addAll(foundProductIds);
    }
    Integer totalResults=productSearchContext.getTotalResults();
    if (totalResults != null) {
      listSize=listSize + totalResults.intValue();
    }
  }
  if (listSize < highIndex) {
    highIndex=listSize;
  }
  List searchConstraintStrings=searchGetConstraintStrings(false,session,delegator);
  String searchSortOrderString=searchGetSortOrderString(false,request);
  Map result=new HashMap();
  result.put("productIds",productIds);
  result.put("viewIndex",new Integer(viewIndex));
  result.put("viewSize",new Integer(viewSize));
  result.put("listSize",new Integer(listSize));
  result.put("lowIndex",new Integer(lowIndex));
  result.put("highIndex",new Integer(highIndex));
  result.put("searchConstraintStrings",searchConstraintStrings);
  result.put("searchSortOrderString",searchSortOrderString);
  return result;
}
