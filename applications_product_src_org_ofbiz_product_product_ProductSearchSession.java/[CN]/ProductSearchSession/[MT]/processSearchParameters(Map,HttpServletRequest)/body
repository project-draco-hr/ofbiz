{
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  Boolean alreadyRun=(Boolean)request.getAttribute("processSearchParametersAlreadyRun");
  if (Boolean.TRUE.equals(alreadyRun)) {
    return;
  }
 else {
    request.setAttribute("processSearchParametersAlreadyRun",Boolean.TRUE);
  }
  HttpSession session=request.getSession();
  boolean constraintsChanged=false;
  String clearSearchString=(String)parameters.get("clearSearch");
  if (!"N".equals(clearSearchString)) {
    searchClear(session);
    constraintsChanged=true;
  }
 else {
    String removeConstraint=(String)parameters.get("removeConstraint");
    if (UtilValidate.isNotEmpty(removeConstraint)) {
      try {
        searchRemoveConstraint(Integer.parseInt(removeConstraint),session);
        constraintsChanged=true;
      }
 catch (      Exception e) {
        Debug.logError(e,"Error removing constraint [" + removeConstraint + "]",module);
      }
    }
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_CATEGORY_ID"))) {
    String searchCategoryId=(String)parameters.get("SEARCH_CATEGORY_ID");
    String searchSubCategories=(String)parameters.get("SEARCH_SUB_CATEGORIES");
    searchAddConstraint(new ProductSearch.CategoryConstraint(searchCategoryId,!"N".equals(searchSubCategories)),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_CATEGORY_ID2"))) {
    String searchCategoryId=(String)parameters.get("SEARCH_CATEGORY_ID2");
    String searchSubCategories=(String)parameters.get("SEARCH_SUB_CATEGORIES2");
    searchAddConstraint(new ProductSearch.CategoryConstraint(searchCategoryId,!"N".equals(searchSubCategories)),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_CATEGORY_ID3"))) {
    String searchCategoryId=(String)parameters.get("SEARCH_CATEGORY_ID3");
    String searchSubCategories=(String)parameters.get("SEARCH_SUB_CATEGORIES3");
    searchAddConstraint(new ProductSearch.CategoryConstraint(searchCategoryId,!"N".equals(searchSubCategories)),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isEmpty((String)parameters.get("SEARCH_CATEGORY_ID")) && UtilValidate.isEmpty((String)parameters.get("SEARCH_CATEGORY_ID2")) && UtilValidate.isEmpty((String)parameters.get("SEARCH_CATEGORY_ID3"))) {
    String searchCatalogId=(String)parameters.get("SEARCH_CATALOG_ID");
    if (searchCatalogId != null && !searchCatalogId.equalsIgnoreCase("")) {
      ArrayList categories=CategoryWorker.getRelatedCategoriesRet(request,"topLevelList",CatalogWorker.getCatalogTopCategoryId(request,searchCatalogId),true);
      searchAddConstraint(new ProductSearch.CatalogConstraint(searchCatalogId,categories),session);
      constraintsChanged=true;
    }
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_STRING"))) {
    String keywordString=(String)parameters.get("SEARCH_STRING");
    String searchOperator=(String)parameters.get("SEARCH_OPERATOR");
    boolean anyPrefixSuffix=!"N".equals((String)parameters.get("SEARCH_ANYPRESUF"));
    searchAddConstraint(new ProductSearch.KeywordConstraint(keywordString,anyPrefixSuffix,anyPrefixSuffix,null,"AND".equals(searchOperator)),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_STRING2"))) {
    String keywordString=(String)parameters.get("SEARCH_STRING2");
    String searchOperator=(String)parameters.get("SEARCH_OPERATOR2");
    boolean anyPrefixSuffix=!"N".equals((String)parameters.get("SEARCH_ANYPRESUF2"));
    searchAddConstraint(new ProductSearch.KeywordConstraint(keywordString,anyPrefixSuffix,anyPrefixSuffix,null,"AND".equals(searchOperator)),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_STRING3"))) {
    String keywordString=(String)parameters.get("SEARCH_STRING3");
    String searchOperator=(String)parameters.get("SEARCH_OPERATOR3");
    boolean anyPrefixSuffix=!"N".equals((String)parameters.get("SEARCH_ANYPRESUF3"));
    searchAddConstraint(new ProductSearch.KeywordConstraint(keywordString,anyPrefixSuffix,anyPrefixSuffix,null,"AND".equals(searchOperator)),session);
    constraintsChanged=true;
  }
  List featureIdList=ParametricSearch.makeFeatureIdListFromPrefixed(parameters);
  if (featureIdList.size() > 0) {
    constraintsChanged=true;
    searchAddFeatureIdConstraints(featureIdList,request);
  }
  Map featureIdByType=ParametricSearch.makeFeatureIdByTypeMap(parameters);
  if (featureIdByType.size() > 0) {
    constraintsChanged=true;
    searchAddFeatureIdConstraints(featureIdByType.values(),request);
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_SUPPLIER_ID"))) {
    String supplierPartyId=(String)parameters.get("SEARCH_SUPPLIER_ID");
    searchAddConstraint(new ProductSearch.SupplierConstraint(supplierPartyId),session);
    constraintsChanged=true;
  }
  GenericValue productStore=ProductStoreWorker.getProductStore(request);
  if (productStore != null && !"N".equals(productStore.getString("prodSearchExcludeVariants"))) {
    searchAddConstraint(new ProductSearch.ExcludeVariantsConstraint(),session);
  }
  String prodCatalogId=CatalogWorker.getCurrentCatalogId(request);
  String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,prodCatalogId);
  if (UtilValidate.isNotEmpty(viewProductCategoryId)) {
    ProductSearchConstraint viewAllowConstraint=new CategoryConstraint(viewProductCategoryId,true);
    searchAddConstraint(viewAllowConstraint,session);
  }
  String sortOrder=(String)parameters.get("sortOrder");
  String sortAscending=(String)parameters.get("sortAscending");
  boolean ascending=!"N".equals(sortAscending);
  if (sortOrder != null) {
    if (sortOrder.equals("SortKeywordRelevancy")) {
      searchSetSortOrder(new ProductSearch.SortKeywordRelevancy(),session);
    }
 else     if (sortOrder.startsWith("SortProductField:")) {
      String fieldName=sortOrder.substring("SortProductField:".length());
      searchSetSortOrder(new ProductSearch.SortProductField(fieldName,ascending),session);
    }
 else     if (sortOrder.startsWith("SortProductPrice:")) {
      String priceTypeId=sortOrder.substring("SortProductPrice:".length());
      searchSetSortOrder(new ProductSearch.SortProductPrice(priceTypeId,ascending),session);
    }
  }
  ProductSearchOptions productSearchOptions=getProductSearchOptions(session);
  if (constraintsChanged) {
    productSearchOptions.clearViewInfo();
  }
  String viewIndexStr=(String)parameters.get("VIEW_INDEX");
  if (UtilValidate.isNotEmpty(viewIndexStr)) {
    try {
      productSearchOptions.setViewIndex(Integer.valueOf(viewIndexStr));
    }
 catch (    Exception e) {
      Debug.logError(e,"Error formatting VIEW_INDEX, setting to 0",module);
      productSearchOptions.setViewIndex(new Integer(0));
    }
  }
  String viewSizeStr=(String)parameters.get("VIEW_SIZE");
  if (UtilValidate.isNotEmpty(viewSizeStr)) {
    try {
      productSearchOptions.setViewSize(Integer.valueOf(viewSizeStr));
    }
 catch (    Exception e) {
      Debug.logError(e,"Error formatting VIEW_SIZE, setting to 20",module);
      productSearchOptions.setViewSize(new Integer(20));
    }
  }
}
