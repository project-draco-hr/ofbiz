{
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  Boolean alreadyRun=(Boolean)request.getAttribute("processSearchParametersAlreadyRun");
  if (Boolean.TRUE.equals(alreadyRun)) {
    ProductSearchOptions productSearchOptions=getProductSearchOptions(request.getSession());
    productSearchOptions.setViewIndex((String)parameters.get("VIEW_INDEX"));
    productSearchOptions.setViewSize((String)parameters.get("VIEW_SIZE"));
    return;
  }
 else {
    request.setAttribute("processSearchParametersAlreadyRun",Boolean.TRUE);
  }
  HttpSession session=request.getSession();
  boolean constraintsChanged=false;
  GenericValue productStore=ProductStoreWorker.getProductStore(request);
  String clearSearchString=(String)parameters.get("clearSearch");
  if (!"N".equals(clearSearchString)) {
    searchClear(session);
    constraintsChanged=true;
  }
 else {
    String removeConstraint=(String)parameters.get("removeConstraint");
    if (UtilValidate.isNotEmpty(removeConstraint)) {
      try {
        searchRemoveConstraint(Integer.parseInt(removeConstraint),session);
        constraintsChanged=true;
      }
 catch (      Exception e) {
        Debug.logError(e,"Error removing constraint [" + removeConstraint + "]",module);
      }
    }
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_CATEGORY_ID"))) {
    String searchCategoryId=(String)parameters.get("SEARCH_CATEGORY_ID");
    String searchSubCategories=(String)parameters.get("SEARCH_SUB_CATEGORIES");
    String searchCategoryExc=(String)parameters.get("SEARCH_CATEGORY_EXC");
    Boolean exclude=UtilValidate.isEmpty(searchCategoryExc) ? null : new Boolean(!"N".equals(searchCategoryExc));
    searchAddConstraint(new ProductSearch.CategoryConstraint(searchCategoryId,!"N".equals(searchSubCategories),exclude),session);
    constraintsChanged=true;
  }
  for (int catNum=1; catNum < 10; catNum++) {
    if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_CATEGORY_ID" + catNum))) {
      String searchCategoryId=(String)parameters.get("SEARCH_CATEGORY_ID" + catNum);
      String searchSubCategories=(String)parameters.get("SEARCH_SUB_CATEGORIES" + catNum);
      String searchCategoryExc=(String)parameters.get("SEARCH_CATEGORY_EXC" + catNum);
      Boolean exclude=UtilValidate.isEmpty(searchCategoryExc) ? null : new Boolean(!"N".equals(searchCategoryExc));
      searchAddConstraint(new ProductSearch.CategoryConstraint(searchCategoryId,!"N".equals(searchSubCategories),exclude),session);
      constraintsChanged=true;
    }
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_CATALOG_ID"))) {
    String searchCatalogId=(String)parameters.get("SEARCH_CATALOG_ID");
    if (searchCatalogId != null && !searchCatalogId.equalsIgnoreCase("")) {
      List categories=CategoryWorker.getRelatedCategoriesRet(request,"topLevelList",CatalogWorker.getCatalogTopCategoryId(request,searchCatalogId),true);
      searchAddConstraint(new ProductSearch.CatalogConstraint(searchCatalogId,categories),session);
      constraintsChanged=true;
    }
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_STRING"))) {
    String keywordString=(String)parameters.get("SEARCH_STRING");
    String searchOperator=(String)parameters.get("SEARCH_OPERATOR");
    boolean anyPrefixSuffix=!"N".equals((String)parameters.get("SEARCH_ANYPRESUF"));
    searchAddConstraint(new ProductSearch.KeywordConstraint(keywordString,anyPrefixSuffix,anyPrefixSuffix,null,"AND".equals(searchOperator)),session);
    constraintsChanged=true;
  }
  for (int kwNum=1; kwNum < 10; kwNum++) {
    if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_STRING" + kwNum))) {
      String keywordString=(String)parameters.get("SEARCH_STRING" + kwNum);
      String searchOperator=(String)parameters.get("SEARCH_OPERATOR" + kwNum);
      boolean anyPrefixSuffix=!"N".equals((String)parameters.get("SEARCH_ANYPRESUF" + kwNum));
      searchAddConstraint(new ProductSearch.KeywordConstraint(keywordString,anyPrefixSuffix,anyPrefixSuffix,null,"AND".equals(searchOperator)),session);
      constraintsChanged=true;
    }
  }
  Iterator parameterNameIter=parameters.keySet().iterator();
  while (parameterNameIter.hasNext()) {
    String parameterName=(String)parameterNameIter.next();
    if (parameterName.startsWith("SEARCH_FEAT")) {
      String productFeatureId=(String)parameters.get(parameterName);
      if (productFeatureId != null && productFeatureId.length() > 0) {
        String paramNameExt=parameterName.substring("SEARCH_FEAT".length() + 1);
        String searchCategoryExc=(String)parameters.get("SEARCH_FEAT_EXC" + paramNameExt);
        Boolean exclude=UtilValidate.isEmpty(searchCategoryExc) ? null : new Boolean(!"N".equals(searchCategoryExc));
        searchAddConstraint(new ProductSearch.FeatureConstraint(productFeatureId,exclude),session);
      }
    }
  }
  Map featureIdByType=ParametricSearch.makeFeatureIdByTypeMap(parameters);
  if (featureIdByType.size() > 0) {
    constraintsChanged=true;
    searchAddFeatureIdConstraints(featureIdByType.values(),null,request);
  }
  Iterator parameterProdFeatureCatNameIter=parameters.keySet().iterator();
  while (parameterProdFeatureCatNameIter.hasNext()) {
    String parameterName=(String)parameterProdFeatureCatNameIter.next();
    if (parameterName.startsWith("SEARCH_PROD_FEAT_CAT")) {
      String productFeatureCategoryId=(String)parameters.get(parameterName);
      if (productFeatureCategoryId != null && productFeatureCategoryId.length() > 0) {
        String paramNameExt=parameterName.substring("SEARCH_PROD_FEAT_CAT".length() + 1);
        String searchProdFeatureCategoryExc=(String)parameters.get("SEARCH_PROD_FEAT_CAT_EXC" + paramNameExt);
        Boolean exclude=UtilValidate.isEmpty(searchProdFeatureCategoryExc) ? null : new Boolean(!"N".equals(searchProdFeatureCategoryExc));
        searchAddConstraint(new ProductSearch.ProductFeatureCategoryConstraint(productFeatureCategoryId,exclude),session);
      }
    }
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("SEARCH_SUPPLIER_ID"))) {
    String supplierPartyId=(String)parameters.get("SEARCH_SUPPLIER_ID");
    searchAddConstraint(new ProductSearch.SupplierConstraint(supplierPartyId),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("LIST_PRICE_LOW")) || UtilValidate.isNotEmpty((String)parameters.get("LIST_PRICE_HIGH"))) {
    Double listPriceLow=null;
    Double listPriceHigh=null;
    String listPriceCurrency=UtilHttp.getCurrencyUom(request);
    if (UtilValidate.isNotEmpty((String)parameters.get("LIST_PRICE_LOW"))) {
      try {
        listPriceLow=Double.valueOf((String)parameters.get("LIST_PRICE_LOW"));
      }
 catch (      NumberFormatException e) {
        Debug.logError("Error parsing LIST_PRICE_LOW parameter [" + (String)parameters.get("LIST_PRICE_LOW") + "]: "+ e.toString(),module);
      }
    }
    if (UtilValidate.isNotEmpty((String)parameters.get("LIST_PRICE_HIGH"))) {
      try {
        listPriceHigh=Double.valueOf((String)parameters.get("LIST_PRICE_HIGH"));
      }
 catch (      NumberFormatException e) {
        Debug.logError("Error parsing LIST_PRICE_HIGH parameter [" + (String)parameters.get("LIST_PRICE_HIGH") + "]: "+ e.toString(),module);
      }
    }
    searchAddConstraint(new ProductSearch.ListPriceRangeConstraint(listPriceLow,listPriceHigh,listPriceCurrency),session);
    constraintsChanged=true;
  }
  if (UtilValidate.isNotEmpty((String)parameters.get("LIST_PRICE_RANGE"))) {
    String listPriceRangeStr=(String)parameters.get("LIST_PRICE_RANGE");
    String listPriceLowStr=listPriceRangeStr.substring(0,listPriceRangeStr.indexOf("_"));
    String listPriceHighStr=listPriceRangeStr.substring(listPriceRangeStr.indexOf("_") + 1);
    Double listPriceLow=null;
    Double listPriceHigh=null;
    String listPriceCurrency=UtilHttp.getCurrencyUom(request);
    if (UtilValidate.isNotEmpty(listPriceLowStr)) {
      try {
        listPriceLow=Double.valueOf(listPriceLowStr);
      }
 catch (      NumberFormatException e) {
        Debug.logError("Error parsing low part of LIST_PRICE_RANGE parameter [" + listPriceLowStr + "]: "+ e.toString(),module);
      }
    }
    if (UtilValidate.isNotEmpty(listPriceHighStr)) {
      try {
        listPriceHigh=Double.valueOf(listPriceHighStr);
      }
 catch (      NumberFormatException e) {
        Debug.logError("Error parsing high part of LIST_PRICE_RANGE parameter [" + listPriceHighStr + "]: "+ e.toString(),module);
      }
    }
    searchAddConstraint(new ProductSearch.ListPriceRangeConstraint(listPriceLow,listPriceHigh,listPriceCurrency),session);
    constraintsChanged=true;
  }
  if (productStore != null && !"N".equals(productStore.getString("prodSearchExcludeVariants"))) {
    searchAddConstraint(new ProductSearch.ExcludeVariantsConstraint(),session);
  }
  if ("true".equalsIgnoreCase((String)parameters.get("AVAILABILITY_FILTER"))) {
    searchAddConstraint(new ProductSearch.AvailabilityDateConstraint(),session);
    constraintsChanged=true;
  }
  String prodCatalogId=CatalogWorker.getCurrentCatalogId(request);
  String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,prodCatalogId);
  if (UtilValidate.isNotEmpty(viewProductCategoryId)) {
    ProductSearchConstraint viewAllowConstraint=new CategoryConstraint(viewProductCategoryId,true,null);
    searchAddConstraint(viewAllowConstraint,session);
  }
  String sortOrder=(String)parameters.get("sortOrder");
  String sortAscending=(String)parameters.get("sortAscending");
  boolean ascending=!"N".equals(sortAscending);
  if (sortOrder != null) {
    if (sortOrder.equals("SortKeywordRelevancy")) {
      searchSetSortOrder(new ProductSearch.SortKeywordRelevancy(),session);
    }
 else     if (sortOrder.startsWith("SortProductField:")) {
      String fieldName=sortOrder.substring("SortProductField:".length());
      searchSetSortOrder(new ProductSearch.SortProductField(fieldName,ascending),session);
    }
 else     if (sortOrder.startsWith("SortProductPrice:")) {
      String priceTypeId=sortOrder.substring("SortProductPrice:".length());
      searchSetSortOrder(new ProductSearch.SortProductPrice(priceTypeId,ascending),session);
    }
  }
  ProductSearchOptions productSearchOptions=getProductSearchOptions(session);
  if (constraintsChanged) {
    productSearchOptions.clearViewInfo();
  }
  productSearchOptions.setViewIndex((String)parameters.get("VIEW_INDEX"));
  productSearchOptions.setViewSize((String)parameters.get("VIEW_SIZE"));
}
