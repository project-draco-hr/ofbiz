{
  String visitId=VisitHandler.getVisitId(session);
  ProductSearchContext productSearchContext=new ProductSearchContext(delegator,visitId);
  List<ProductSearchConstraint> productSearchConstraintList=ProductSearchOptions.getConstraintList(session);
  if (UtilValidate.isNotEmpty(productSearchConstraintList)) {
    productSearchContext.addProductSearchConstraints(productSearchConstraintList);
  }
  productSearchContext.finishKeywordConstraints();
  productSearchContext.finishCategoryAndFeatureConstraints();
  DynamicViewEntity dynamicViewEntity=productSearchContext.dynamicViewEntity;
  List<EntityCondition> entityConditionList=productSearchContext.entityConditionList;
  dynamicViewEntity.addMemberEntity("PFAC","ProductFeatureAppl");
  dynamicViewEntity.addAlias("PFAC","pfacProductFeatureId","productFeatureId",null,null,Boolean.TRUE,null);
  dynamicViewEntity.addAlias("PFAC","pfacFromDate","fromDate",null,null,null,null);
  dynamicViewEntity.addAlias("PFAC","pfacThruDate","thruDate",null,null,null,null);
  dynamicViewEntity.addAlias("PFAC","featureCount","productId",null,null,null,"count-distinct");
  dynamicViewEntity.addViewLink("PROD","PFAC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
  entityConditionList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("pfacThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("pfacThruDate",EntityOperator.GREATER_THAN,UtilDateTime.nowTimestamp())));
  entityConditionList.add(EntityCondition.makeCondition("pfacFromDate",EntityOperator.LESS_THAN,UtilDateTime.nowTimestamp()));
  dynamicViewEntity.addMemberEntity("PFC","ProductFeature");
  dynamicViewEntity.addAlias("PFC","pfcProductFeatureTypeId","productFeatureTypeId",null,null,Boolean.TRUE,null);
  dynamicViewEntity.addAlias("PFC","pfcDescription","description",null,null,Boolean.TRUE,null);
  dynamicViewEntity.addViewLink("PFAC","PFC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));
  entityConditionList.add(EntityCondition.makeCondition("pfcProductFeatureTypeId",EntityOperator.EQUALS,productFeatureTypeId));
  EntityListIterator eli=null;
  try {
    eli=EntityQuery.use(delegator).select(UtilMisc.toSet("pfacProductFeatureId","featureCount","pfcDescription","pfcProductFeatureTypeId")).from(dynamicViewEntity).where(entityConditionList).orderBy(productSearchContext.orderByList).cursorScrollInsensitive().queryIterator();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error in product search",module);
    return null;
  }
  List<Map<String,String>> featureCountList=FastList.newInstance();
  GenericValue searchResult=null;
  while ((searchResult=eli.next()) != null) {
    featureCountList.add(UtilMisc.<String,String>toMap("productFeatureId",(String)searchResult.get("pfacProductFeatureId"),"productFeatureTypeId",(String)searchResult.get("pfcProductFeatureTypeId"),"description",(String)searchResult.get("pfcDescription"),"featureCount",Long.toString((Long)searchResult.get("featureCount"))));
  }
  if (eli != null) {
    try {
      eli.close();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error closing ProductSearch EntityListIterator");
    }
  }
  return featureCountList;
}
