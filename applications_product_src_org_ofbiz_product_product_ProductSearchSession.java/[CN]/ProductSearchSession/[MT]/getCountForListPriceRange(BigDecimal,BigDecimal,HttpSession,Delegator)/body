{
  String visitId=VisitHandler.getVisitId(session);
  ProductSearchContext productSearchContext=new ProductSearchContext(delegator,visitId);
  List<ProductSearchConstraint> productSearchConstraintList=ProductSearchOptions.getConstraintList(session);
  if (UtilValidate.isNotEmpty(productSearchConstraintList)) {
    productSearchContext.addProductSearchConstraints(productSearchConstraintList);
  }
  productSearchContext.finishKeywordConstraints();
  productSearchContext.finishCategoryAndFeatureConstraints();
  DynamicViewEntity dynamicViewEntity=productSearchContext.dynamicViewEntity;
  List<EntityCondition> entityConditionList=productSearchContext.entityConditionList;
  List<String> fieldsToSelect=FastList.newInstance();
  dynamicViewEntity.addMemberEntity("PPC","ProductPrice");
  dynamicViewEntity.addAlias("PPC","ppcProductPriceTypeId","productPriceTypeId",null,null,null,null);
  dynamicViewEntity.addAlias("PPC","ppcFromDate","fromDate",null,null,null,null);
  dynamicViewEntity.addAlias("PPC","ppcThruDate","thruDate",null,null,null,null);
  dynamicViewEntity.addAlias("PPC","ppcPrice","price",null,null,null,null);
  dynamicViewEntity.addAlias("PPC","priceRangeCount","productId",null,null,null,"count");
  dynamicViewEntity.addViewLink("PROD","PPC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));
  fieldsToSelect.add("priceRangeCount");
  entityConditionList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("ppcThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("ppcThruDate",EntityOperator.GREATER_THAN,UtilDateTime.nowTimestamp())));
  entityConditionList.add(EntityCondition.makeCondition("ppcFromDate",EntityOperator.LESS_THAN,UtilDateTime.nowTimestamp()));
  entityConditionList.add(EntityCondition.makeCondition("ppcPrice",EntityOperator.GREATER_THAN_EQUAL_TO,priceLow));
  entityConditionList.add(EntityCondition.makeCondition("ppcPrice",EntityOperator.LESS_THAN_EQUAL_TO,priceHigh));
  entityConditionList.add(EntityCondition.makeCondition("ppcProductPriceTypeId",EntityOperator.EQUALS,"LIST_PRICE"));
  EntityCondition whereCondition=EntityCondition.makeCondition(entityConditionList,EntityOperator.AND);
  EntityFindOptions efo=new EntityFindOptions();
  efo.setResultSetType(EntityFindOptions.TYPE_SCROLL_INSENSITIVE);
  EntityListIterator eli=null;
  try {
    eli=delegator.findListIteratorByCondition(dynamicViewEntity,whereCondition,null,fieldsToSelect,productSearchContext.orderByList,efo);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error in product search",module);
    return 0;
  }
  GenericValue searchResult=null;
  Long priceRangeCount=Long.valueOf(0);
  while ((searchResult=(GenericValue)eli.next()) != null) {
    priceRangeCount=searchResult.getLong("priceRangeCount");
  }
  if (eli != null) {
    try {
      eli.close();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error closing ProductSearch EntityListIterator");
    }
  }
  return priceRangeCount;
}
