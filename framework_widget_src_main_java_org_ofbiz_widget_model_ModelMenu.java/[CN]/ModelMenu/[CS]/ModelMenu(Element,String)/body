{
  super(menuElement);
  ArrayList<ModelAction> actions=new ArrayList<ModelAction>();
  String defaultAlign="";
  String defaultAlignStyle="";
  FlexibleStringExpander defaultAssociatedContentId=FlexibleStringExpander.getInstance("");
  String defaultCellWidth="";
  String defaultDisabledTitleStyle="";
  String defaultEntityName="";
  Boolean defaultHideIfSelected=Boolean.FALSE;
  String defaultMenuItemName="";
  String defaultPermissionEntityAction="";
  String defaultPermissionOperation="";
  String defaultSelectedStyle="";
  String defaultTitleStyle="";
  String defaultTooltipStyle="";
  String defaultWidgetStyle="";
  FlexibleStringExpander extraIndex=FlexibleStringExpander.getInstance("");
  String fillStyle="";
  String id="";
  FlexibleStringExpander menuContainerStyleExdr=FlexibleStringExpander.getInstance("");
  ArrayList<ModelMenuItem> menuItemList=new ArrayList<ModelMenuItem>();
  Map<String,ModelMenuItem> menuItemMap=new HashMap<String,ModelMenuItem>();
  String menuWidth="";
  String orientation="horizontal";
  FlexibleMapAccessor<String> selectedMenuItemContextFieldName=FlexibleMapAccessor.getInstance("");
  String target="";
  FlexibleStringExpander title=FlexibleStringExpander.getInstance("");
  String tooltip="";
  String type="";
  ModelMenu parent=null;
  String parentResource=menuElement.getAttribute("extends-resource");
  String parentMenu=menuElement.getAttribute("extends");
  if (!parentMenu.isEmpty()) {
    if (!parentResource.isEmpty()) {
      try {
        parent=MenuFactory.getMenuFromLocation(parentResource,parentMenu);
      }
 catch (      Exception e) {
        Debug.logError(e,"Failed to load parent menu definition '" + parentMenu + "' at resource '"+ parentResource+ "'",module);
      }
    }
 else {
      parentResource=menuLocation;
      Element rootElement=menuElement.getOwnerDocument().getDocumentElement();
      List<? extends Element> menuElements=UtilXml.childElementList(rootElement,"menu");
      for (      Element menuElementEntry : menuElements) {
        if (menuElementEntry.getAttribute("name").equals(parentMenu)) {
          parent=new ModelMenu(menuElementEntry,parentResource);
          break;
        }
      }
      if (parent == null) {
        Debug.logError("Failed to find parent menu definition '" + parentMenu + "' in same document.",module);
      }
    }
    if (parent != null) {
      type=parent.type;
      target=parent.target;
      id=parent.id;
      title=parent.title;
      tooltip=parent.tooltip;
      defaultEntityName=parent.defaultEntityName;
      defaultTitleStyle=parent.defaultTitleStyle;
      defaultSelectedStyle=parent.defaultSelectedStyle;
      defaultWidgetStyle=parent.defaultWidgetStyle;
      defaultTooltipStyle=parent.defaultTooltipStyle;
      defaultMenuItemName=parent.defaultMenuItemName;
      menuItemList.addAll(parent.menuItemList);
      menuItemMap.putAll(parent.menuItemMap);
      defaultPermissionOperation=parent.defaultPermissionOperation;
      defaultPermissionEntityAction=parent.defaultPermissionEntityAction;
      defaultAssociatedContentId=parent.defaultAssociatedContentId;
      defaultHideIfSelected=parent.defaultHideIfSelected;
      orientation=parent.orientation;
      menuWidth=parent.menuWidth;
      defaultCellWidth=parent.defaultCellWidth;
      defaultDisabledTitleStyle=parent.defaultDisabledTitleStyle;
      defaultAlign=parent.defaultAlign;
      defaultAlignStyle=parent.defaultAlignStyle;
      fillStyle=parent.fillStyle;
      extraIndex=parent.extraIndex;
      selectedMenuItemContextFieldName=parent.selectedMenuItemContextFieldName;
      menuContainerStyleExdr=parent.menuContainerStyleExdr;
      if (parent.actions != null) {
        actions.addAll(parent.actions);
      }
    }
  }
  if (!menuElement.getAttribute("type").isEmpty())   type=menuElement.getAttribute("type");
  if (!menuElement.getAttribute("target").isEmpty())   target=menuElement.getAttribute("target");
  if (!menuElement.getAttribute("id").isEmpty())   id=menuElement.getAttribute("id");
  if (!menuElement.getAttribute("title").isEmpty())   title=FlexibleStringExpander.getInstance(menuElement.getAttribute("title"));
  if (!menuElement.getAttribute("tooltip").isEmpty())   tooltip=menuElement.getAttribute("tooltip");
  if (!menuElement.getAttribute("default-entity-name").isEmpty())   defaultEntityName=menuElement.getAttribute("default-entity-name");
  if (!menuElement.getAttribute("default-title-style").isEmpty())   defaultTitleStyle=menuElement.getAttribute("default-title-style");
  if (!menuElement.getAttribute("default-selected-style").isEmpty())   defaultSelectedStyle=menuElement.getAttribute("default-selected-style");
  if (!menuElement.getAttribute("default-widget-style").isEmpty())   defaultWidgetStyle=menuElement.getAttribute("default-widget-style");
  if (!menuElement.getAttribute("default-tooltip-style").isEmpty())   defaultTooltipStyle=menuElement.getAttribute("default-tooltip-style");
  if (!menuElement.getAttribute("default-menu-item-name").isEmpty())   defaultMenuItemName=menuElement.getAttribute("default-menu-item-name");
  if (!menuElement.getAttribute("default-permission-operation").isEmpty())   defaultPermissionOperation=menuElement.getAttribute("default-permission-operation");
  if (!menuElement.getAttribute("default-permission-entity-action").isEmpty())   defaultPermissionEntityAction=menuElement.getAttribute("default-permission-entity-action");
  if (!menuElement.getAttribute("default-associated-content-id").isEmpty())   defaultAssociatedContentId=FlexibleStringExpander.getInstance(menuElement.getAttribute("default-associated-content-id"));
  if (!menuElement.getAttribute("orientation").isEmpty())   orientation=menuElement.getAttribute("orientation");
  if (!menuElement.getAttribute("menu-width").isEmpty())   menuWidth=menuElement.getAttribute("menu-width");
  if (!menuElement.getAttribute("default-cell-width").isEmpty())   defaultCellWidth=menuElement.getAttribute("default-cell-width");
  if (!menuElement.getAttribute("default-hide-if-selected").isEmpty())   defaultHideIfSelected="true".equals(menuElement.getAttribute("default-hide-if-selected").isEmpty());
  if (!menuElement.getAttribute("default-disabled-title-style").isEmpty())   defaultDisabledTitleStyle=menuElement.getAttribute("default-disabled-title-style");
  if (!menuElement.getAttribute("selected-menuitem-context-field-name").isEmpty())   selectedMenuItemContextFieldName=FlexibleMapAccessor.getInstance(menuElement.getAttribute("selected-menuitem-context-field-name"));
  if (!menuElement.getAttribute("menu-container-style").isEmpty())   menuContainerStyleExdr=FlexibleStringExpander.getInstance(menuElement.getAttribute("menu-container-style"));
  if (!menuElement.getAttribute("default-align").isEmpty())   defaultAlign=menuElement.getAttribute("default-align");
  if (!menuElement.getAttribute("default-align-style").isEmpty())   defaultAlignStyle=menuElement.getAttribute("default-align-style");
  if (!menuElement.getAttribute("fill-style").isEmpty())   fillStyle=menuElement.getAttribute("fill-style");
  if (!menuElement.getAttribute("extra-index").isEmpty())   extraIndex=FlexibleStringExpander.getInstance(menuElement.getAttribute("extra-index"));
  Element actionsElement=UtilXml.firstChildElement(menuElement,"actions");
  if (actionsElement != null) {
    actions.addAll(ModelMenuAction.readSubActions(this,actionsElement));
  }
  actions.trimToSize();
  this.actions=Collections.unmodifiableList(actions);
  this.defaultAlign=defaultAlign;
  this.defaultAlignStyle=defaultAlignStyle;
  this.defaultAssociatedContentId=defaultAssociatedContentId;
  this.defaultCellWidth=defaultCellWidth;
  this.defaultDisabledTitleStyle=defaultDisabledTitleStyle;
  this.defaultEntityName=defaultEntityName;
  this.defaultHideIfSelected=defaultHideIfSelected;
  this.defaultMenuItemName=defaultMenuItemName;
  this.defaultPermissionEntityAction=defaultPermissionEntityAction;
  this.defaultPermissionOperation=defaultPermissionOperation;
  this.defaultSelectedStyle=defaultSelectedStyle;
  this.defaultTitleStyle=defaultTitleStyle;
  this.defaultTooltipStyle=defaultTooltipStyle;
  this.defaultWidgetStyle=defaultWidgetStyle;
  this.extraIndex=extraIndex;
  this.fillStyle=fillStyle;
  this.id=id;
  this.menuContainerStyleExdr=menuContainerStyleExdr;
  List<? extends Element> itemElements=UtilXml.childElementList(menuElement,"menu-item");
  for (  Element itemElement : itemElements) {
    ModelMenuItem modelMenuItem=new ModelMenuItem(itemElement,this);
    addUpdateMenuItem(modelMenuItem,menuItemList,menuItemMap);
  }
  menuItemList.trimToSize();
  this.menuItemList=Collections.unmodifiableList(menuItemList);
  this.menuItemMap=Collections.unmodifiableMap(menuItemMap);
  this.menuLocation=menuLocation;
  this.menuWidth=menuWidth;
  this.orientation=orientation;
  this.parentMenu=parent;
  this.selectedMenuItemContextFieldName=selectedMenuItemContextFieldName;
  this.target=target;
  this.title=title;
  this.tooltip=tooltip;
  this.type=type;
}
