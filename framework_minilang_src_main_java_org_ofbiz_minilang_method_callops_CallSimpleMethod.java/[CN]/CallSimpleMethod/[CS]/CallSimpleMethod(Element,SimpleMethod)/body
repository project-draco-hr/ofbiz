{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.attributeNames(simpleMethod,element,"method-name","xml-resource","scope");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"method-name");
    MiniLangValidate.constantAttributes(simpleMethod,element,"method-name","xml-resource","scope");
    MiniLangValidate.childElements(simpleMethod,element,"result-to-field");
  }
  this.methodName=element.getAttribute("method-name");
  String xmlResourceAttribute=element.getAttribute("xml-resource");
  if (xmlResourceAttribute.isEmpty()) {
    xmlResourceAttribute=simpleMethod.getFromLocation();
  }
  this.xmlResource=xmlResourceAttribute;
  URL xmlURL=null;
  try {
    xmlURL=FlexibleLocation.resolveLocation(this.xmlResource);
  }
 catch (  MalformedURLException e) {
    MiniLangValidate.handleError("Could not find SimpleMethod XML document in resource: " + this.xmlResource + "; error was: "+ e.toString(),simpleMethod,element);
  }
  this.xmlURL=xmlURL;
  this.scope=element.getAttribute("scope");
  List<? extends Element> resultToFieldElements=UtilXml.childElementList(element,"result-to-field");
  if (UtilValidate.isNotEmpty(resultToFieldElements)) {
    if (!"function".equals(this.scope)) {
      MiniLangValidate.handleError("Inline scope cannot include <result-to-field> elements.",simpleMethod,element);
    }
    List<ResultToField> resultToFieldList=new ArrayList<ResultToField>(resultToFieldElements.size());
    for (    Element resultToFieldElement : resultToFieldElements) {
      resultToFieldList.add(new ResultToField(resultToFieldElement,simpleMethod));
    }
    this.resultToFieldList=resultToFieldList;
  }
 else {
    this.resultToFieldList=null;
  }
}
