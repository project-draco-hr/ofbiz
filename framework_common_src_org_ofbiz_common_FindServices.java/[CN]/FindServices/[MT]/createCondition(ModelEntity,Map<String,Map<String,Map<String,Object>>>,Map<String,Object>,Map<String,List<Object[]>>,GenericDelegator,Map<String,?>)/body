{
  Map<String,Map<String,Object>> subMap=null;
  Map<String,Object> subMap2=null;
  EntityOperator fieldOp=null;
  Object fieldValue=null;
  EntityExpr cond=null;
  List<EntityCondition> tmpList=FastList.newInstance();
  String opString=null;
  String ignoreCase=null;
  int count=0;
  List<ModelField> fields=modelEntity.getFieldsUnmodifiable();
  for (  ModelField modelField : fields) {
    String fieldName=modelField.getName();
    subMap=normalizedFields.get(fieldName);
    if (subMap == null) {
      continue;
    }
    subMap2=subMap.get("fld0");
    opString=(String)subMap2.get("op");
    ignoreCase=(String)subMap2.get("ic");
    if (opString != null) {
      if (opString.equals("contains")) {
        fieldOp=EntityOperator.LIKE;
      }
 else       if (opString.equals("empty")) {
        fieldOp=EntityOperator.EQUALS;
      }
 else {
        fieldOp=entityOperators.get(opString);
      }
    }
 else {
      fieldOp=EntityOperator.EQUALS;
    }
    fieldValue=subMap2.get("value");
    if (fieldValue == null) {
      continue;
    }
    if (opString != null) {
      if (opString.equals("contains")) {
        fieldOp=EntityOperator.LIKE;
        fieldValue="%" + fieldValue + "%";
      }
 else       if (opString.equals("empty")) {
        fieldOp=EntityOperator.EQUALS;
        fieldValue=null;
        ignoreCase=null;
      }
 else       if (opString.equals("like")) {
        fieldOp=EntityOperator.LIKE;
        fieldValue=fieldValue + "%";
      }
 else       if (opString.equals("greaterThanFromDayStart")) {
        fieldValue=dayStart((String)fieldValue,0);
        fieldOp=EntityOperator.GREATER_THAN;
        ignoreCase=null;
      }
 else       if (opString.equals("sameDay")) {
        String timeStampString=(String)fieldValue;
        fieldValue=dayStart(timeStampString,0);
        fieldOp=EntityOperator.GREATER_THAN_EQUAL_TO;
        ignoreCase=null;
        subMap2=subMap.get("fld1");
        if (subMap2 == null) {
          subMap2=FastMap.newInstance();
          subMap.put("fld1",subMap2);
        }
        String endOfDay=dayStart(timeStampString,1);
        subMap2.put("value",endOfDay);
        subMap2.put("op","lessThan");
      }
 else {
        fieldOp=entityOperators.get(opString);
      }
    }
 else {
      fieldOp=EntityOperator.EQUALS;
    }
    Object fieldObject=null;
    if (fieldOp != EntityOperator.IN || !(fieldValue instanceof Collection)) {
      fieldObject=modelEntity.convertFieldValue(modelField,fieldValue,delegator,context);
    }
 else {
      fieldObject=fieldValue;
    }
    if (ignoreCase != null && ignoreCase.equals("Y") && "java.lang.String".equals(fieldObject.getClass().getName())) {
      cond=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(fieldName),(EntityComparisonOperator)fieldOp,EntityFunction.UPPER(((String)fieldValue).toUpperCase()));
    }
 else {
      cond=EntityCondition.makeCondition(fieldName,(EntityComparisonOperator)fieldOp,fieldObject);
    }
    tmpList.add(cond);
    count++;
    subMap2=subMap.get("fld1");
    if (subMap2 == null) {
      continue;
    }
    opString=(String)subMap2.get("op");
    if (opString != null) {
      if (opString.equals("contains")) {
        fieldOp=EntityOperator.LIKE;
      }
 else       if (opString.equals("empty")) {
        fieldOp=EntityOperator.EQUALS;
      }
 else {
        fieldOp=entityOperators.get(opString);
      }
    }
 else {
      fieldOp=EntityOperator.EQUALS;
    }
    fieldValue=(String)subMap2.get("value");
    if (fieldValue == null) {
      continue;
    }
    if (opString.equals("like")) {
      fieldValue=fieldValue + "%";
    }
 else     if (opString.equals("contains")) {
      fieldValue=fieldValue + "%" + fieldValue+ "%";
    }
 else     if (opString.equals("empty")) {
      fieldOp=EntityOperator.EQUALS;
      fieldValue=null;
    }
 else     if (opString.equals("upToDay")) {
      fieldValue=dayStart((String)fieldValue,0);
      fieldOp=EntityOperator.LESS_THAN;
    }
 else     if (opString.equals("upThruDay")) {
      fieldValue=dayStart((String)fieldValue,1);
      fieldOp=EntityOperator.LESS_THAN;
    }
    fieldObject=modelEntity.convertFieldValue(modelField,fieldValue,delegator,context);
    cond=EntityCondition.makeCondition(fieldName,(EntityComparisonOperator)fieldOp,fieldObject);
    tmpList.add(cond);
    List<Object[]> origList=origValueMap.get(fieldName);
    if (UtilValidate.isNotEmpty(origList)) {
      for (      Object[] arr : origList) {
        queryStringMap.put((String)arr[0],arr[1]);
      }
    }
  }
  return tmpList;
}
