{
  String entityName=(String)context.get("entityName");
  String orderBy=(String)context.get("orderBy");
  Map<String,?> inputFields=checkMap(context.get("inputFields"),String.class,Object.class);
  String noConditionFind=(String)context.get("noConditionFind");
  String distinct=(String)context.get("distinct");
  List<String> fieldList=UtilGenerics.<String>checkList(context.get("fieldList"));
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=dctx.getDelegator();
  if (UtilValidate.isEmpty(noConditionFind)) {
    noConditionFind=(String)inputFields.get("noConditionFind");
  }
  if (UtilValidate.isEmpty(noConditionFind)) {
    noConditionFind=EntityUtilProperties.getPropertyValue("widget","widget.defaultNoConditionFind",delegator);
  }
  String filterByDate=(String)context.get("filterByDate");
  if (UtilValidate.isEmpty(filterByDate)) {
    filterByDate=(String)inputFields.get("filterByDate");
  }
  Timestamp filterByDateValue=(Timestamp)context.get("filterByDateValue");
  Integer viewSize=(Integer)context.get("viewSize");
  Integer viewIndex=(Integer)context.get("viewIndex");
  Integer maxRows=null;
  if (viewSize != null && viewIndex != null) {
    maxRows=viewSize * (viewIndex + 1);
  }
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map<String,Object> prepareResult=null;
  try {
    prepareResult=dispatcher.runSync("prepareFind",UtilMisc.toMap("entityName",entityName,"orderBy",orderBy,"inputFields",inputFields,"filterByDate",filterByDate,"noConditionFind",noConditionFind,"filterByDateValue",filterByDateValue,"userLogin",userLogin,"locale",context.get("locale"),"timeZone",context.get("timeZone")));
  }
 catch (  GenericServiceException gse) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorPreparingConditions",UtilMisc.toMap("errorString",gse.getMessage()),locale));
  }
  EntityConditionList<EntityCondition> exprList=UtilGenerics.cast(prepareResult.get("entityConditionList"));
  List<String> orderByList=checkList(prepareResult.get("orderByList"),String.class);
  Map<String,Object> executeResult=null;
  try {
    executeResult=dispatcher.runSync("executeFind",UtilMisc.toMap("entityName",entityName,"orderByList",orderByList,"fieldList",fieldList,"entityConditionList",exprList,"noConditionFind",noConditionFind,"distinct",distinct,"locale",context.get("locale"),"timeZone",context.get("timeZone"),"maxRows",maxRows));
  }
 catch (  GenericServiceException gse) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorRetrieveIterator",UtilMisc.toMap("errorString",gse.getMessage()),locale));
  }
  if (executeResult.get("listIt") == null) {
    if (Debug.verboseOn())     Debug.logVerbose("No list iterator found for query string + [" + prepareResult.get("queryString") + "]",module);
  }
  Map<String,Object> results=ServiceUtil.returnSuccess();
  results.put("listIt",executeResult.get("listIt"));
  results.put("listSize",executeResult.get("listSize"));
  results.put("queryString",prepareResult.get("queryString"));
  results.put("queryStringMap",prepareResult.get("queryStringMap"));
  return results;
}
