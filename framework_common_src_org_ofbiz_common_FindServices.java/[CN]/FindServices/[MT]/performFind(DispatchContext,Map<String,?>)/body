{
  String entityName=(String)context.get("entityName");
  String orderBy=(String)context.get("orderBy");
  Map<String,?> inputFields=checkMap(context.get("inputFields"),String.class,Object.class);
  String noConditionFind=(String)context.get("noConditionFind");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  if (UtilValidate.isEmpty(noConditionFind)) {
    noConditionFind=(String)inputFields.get("noConditionFind");
  }
  if (UtilValidate.isEmpty(noConditionFind)) {
    noConditionFind=UtilProperties.getPropertyValue("widget","widget.defaultNoConditionFind");
  }
  String filterByDate=(String)context.get("filterByDate");
  if (UtilValidate.isEmpty(filterByDate)) {
    filterByDate=(String)inputFields.get("filterByDate");
  }
  Timestamp filterByDateValue=(Timestamp)context.get("filterByDateValue");
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map<String,Object> prepareResult=null;
  try {
    prepareResult=dispatcher.runSync("prepareFind",UtilMisc.toMap("entityName",entityName,"orderBy",orderBy,"inputFields",inputFields,"filterByDate",filterByDate,"filterByDateValue",filterByDateValue,"userLogin",userLogin,"locale",context.get("locale"),"timeZone",context.get("timeZone")));
  }
 catch (  GenericServiceException gse) {
    return ServiceUtil.returnError("Error preparing conditions: " + gse.getMessage());
  }
  EntityConditionList exprList=(EntityConditionList)prepareResult.get("entityConditionList");
  List<String> orderByList=checkList(prepareResult.get("orderByList"),String.class);
  Map<String,Object> executeResult=null;
  try {
    executeResult=dispatcher.runSync("executeFind",UtilMisc.toMap("entityName",entityName,"orderByList",orderByList,"entityConditionList",exprList,"noConditionFind",noConditionFind,"locale",context.get("locale"),"timeZone",context.get("timeZone")));
  }
 catch (  GenericServiceException gse) {
    return ServiceUtil.returnError("Error finding iterator: " + gse.getMessage());
  }
  if (executeResult.get("listIt") == null) {
    Debug.logInfo("No list iterator found for query string + [" + prepareResult.get("queryString") + "]",module);
  }
  Map<String,Object> results=ServiceUtil.returnSuccess();
  results.put("listIt",executeResult.get("listIt"));
  results.put("queryString",prepareResult.get("queryString"));
  results.put("queryStringMap",prepareResult.get("queryStringMap"));
  return results;
}
