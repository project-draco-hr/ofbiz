{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String shipmentId=(String)context.get("shipmentId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  try {
    List<GenericValue> shipmentReceipts=EntityQuery.use(delegator).from("ShipmentReceipt").where("shipmentId",shipmentId).queryList();
    if (shipmentReceipts.size() == 0)     return ServiceUtil.returnSuccess();
    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();
    if ((!UtilValidate.isEmpty(shipment)) && "PURCH_SHIP_CREATED".equals(shipment.getString("statusId"))) {
      Map<String,Object> updateShipmentMap=dispatcher.runSync("updateShipment",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"statusId","PURCH_SHIP_SHIPPED","userLogin",userLogin));
      if (ServiceUtil.isError(updateShipmentMap)) {
        return updateShipmentMap;
      }
    }
    List<GenericValue> shipmentAndItems=EntityQuery.use(delegator).from("ShipmentAndItem").where("shipmentId",shipmentId,"statusId","PURCH_SHIP_SHIPPED").queryList();
    if (shipmentAndItems.size() == 0) {
      return ServiceUtil.returnSuccess();
    }
    Map<String,BigDecimal> shippedCountMap=FastMap.newInstance();
    for (    GenericValue item : shipmentAndItems) {
      BigDecimal shippedQuantity=item.getBigDecimal("quantity");
      BigDecimal quantity=shippedCountMap.get(item.getString("productId"));
      quantity=quantity == null ? shippedQuantity : shippedQuantity.add(quantity);
      shippedCountMap.put(item.getString("productId"),quantity);
    }
    Map<String,BigDecimal> receivedCountMap=FastMap.newInstance();
    for (    GenericValue item : shipmentReceipts) {
      BigDecimal receivedQuantity=item.getBigDecimal("quantityAccepted");
      BigDecimal quantity=receivedCountMap.get(item.getString("productId"));
      quantity=quantity == null ? receivedQuantity : receivedQuantity.add(quantity);
      receivedCountMap.put(item.getString("productId"),quantity);
    }
    if (!shippedCountMap.equals(receivedCountMap)) {
      return ServiceUtil.returnSuccess();
    }
    dispatcher.runSync("updateShipment",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"statusId","PURCH_SHIP_RECEIVED","userLogin",userLogin));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException se) {
    Debug.logError(se,module);
    return ServiceUtil.returnError(se.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
