{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String shipmentId=(String)context.get("shipmentId");
  String sendTo=(String)context.get("sendTo");
  String screenUri=(String)context.get("screenUri");
  Map<String,Object> sendMap=FastMap.newInstance();
  GenericValue shipment=null;
  GenericValue orderHeader=null;
  try {
    shipment=delegator.findByPrimaryKey("Shipment",UtilMisc.toMap("shipmentId",shipmentId));
    orderHeader=delegator.findByPrimaryKey("OrderHeader",UtilMisc.toMap("orderId",shipment.getString("primaryOrderId")));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting info from database",module);
  }
  GenericValue productStoreEmail=null;
  try {
    productStoreEmail=delegator.findByPrimaryKey("ProductStoreEmailSetting",UtilMisc.toMap("productStoreId",orderHeader.get("productStoreId"),"emailType","PRDS_ODR_SHIP_COMPLT"));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Problem getting the ProductStoreEmailSetting for productStoreId =" + orderHeader.get("productStoreId") + " and emailType = PRDS_ODR_SHIP_COMPLT",module);
  }
  if (productStoreEmail == null) {
    return ServiceUtil.returnFailure("No valid email setting for store with productStoreId =" + orderHeader.get("productStoreId") + " and emailType = PRDS_ODR_SHIP_COMPLT");
  }
  if (UtilValidate.isEmpty(screenUri)) {
    if (productStoreEmail != null) {
      String bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");
      sendMap.put("bodyScreenUri",bodyScreenLocation);
    }
 else {
      sendMap.put("bodyScreenUri","component://ecommerce/widget/EmailOrderScreens.xml#ShipmentCompleteNotice");
    }
  }
 else {
    sendMap.put("bodyScreenUri",screenUri);
  }
  String partyId=shipment.getString("partyIdTo");
  String emailString=null;
  GenericValue email=PartyWorker.findPartyLatestContactMech(partyId,"EMAIL_ADDRESS",delegator);
  if (UtilValidate.isNotEmpty(email)) {
    emailString=email.getString("infoString");
  }
  if (UtilValidate.isEmpty(emailString)) {
    return ServiceUtil.returnError("No sendTo email address found");
  }
  Locale locale=PartyWorker.findPartyLastLocale(partyId,delegator);
  if (locale == null) {
    locale=Locale.getDefault();
  }
  ResourceBundleMapWrapper uiLabelMap=(ResourceBundleMapWrapper)UtilProperties.getResourceBundleMap("EcommerceUiLabels",locale);
  uiLabelMap.addBottomResourceBundle("OrderUiLabels");
  uiLabelMap.addBottomResourceBundle("CommonUiLabels");
  Map<String,Object> bodyParameters=UtilMisc.<String,Object>toMap("partyId",partyId,"shipmentId",shipmentId,"orderId",shipment.getString("primaryOrderId"),"userLogin",userLogin,"uiLabelMap",uiLabelMap,"locale",locale);
  sendMap.put("bodyParameters",bodyParameters);
  sendMap.put("userLogin",userLogin);
  if (productStoreEmail != null) {
    sendMap.put("subject",productStoreEmail.getString("subject"));
    sendMap.put("contentType",productStoreEmail.get("contentType"));
    sendMap.put("sendFrom",productStoreEmail.get("fromAddress"));
    sendMap.put("sendCc",productStoreEmail.get("ccAddress"));
    sendMap.put("sendBcc",productStoreEmail.get("bccAddress"));
  }
 else {
    sendMap.put("subject","Shipment Complete Notification");
    sendMap.put("contentType","text/html");
  }
  if ((sendTo != null) && UtilValidate.isEmail(sendTo)) {
    sendMap.put("sendTo",sendTo);
  }
 else {
    sendMap.put("sendTo",emailString);
  }
  Map<String,Object> sendResp=null;
  try {
    sendResp=dispatcher.runSync("sendMailFromScreen",sendMap);
  }
 catch (  Exception e) {
    Debug.logError(e,"Problem sending mail",module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemSendingEmail",locale));
  }
  if (sendResp != null && ServiceUtil.isError(sendResp)) {
    sendResp.put("emailType","PRDS_ODR_SHIP_COMPLT");
    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemSendingEmail",locale),null,null,sendResp);
  }
  return sendResp;
}
