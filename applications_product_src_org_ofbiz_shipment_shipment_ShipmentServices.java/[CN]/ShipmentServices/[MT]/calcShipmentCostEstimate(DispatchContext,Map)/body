{
  GenericDelegator delegator=dctx.getDelegator();
  String productStoreId=(String)context.get("productStoreId");
  String carrierRoleTypeId=(String)context.get("carrierRoleTypeId");
  String carrierPartyId=(String)context.get("carrierPartyId");
  String shipmentMethodTypeId=(String)context.get("shipmentMethodTypeId");
  String shippingContactMechId=(String)context.get("shippingContactMechId");
  List shippableItemInfo=(List)context.get("shippableItemInfo");
  Double shippableTotal=(Double)context.get("shippableTotal");
  Double shippableQuantity=(Double)context.get("shippableQuantity");
  Double shippableWeight=(Double)context.get("shippableWeight");
  Double initialEstimateAmt=(Double)context.get("initialEstimateAmt");
  if (shippableTotal == null) {
    shippableTotal=new Double(0.00);
  }
  if (shippableQuantity == null) {
    shippableQuantity=new Double(0.00);
  }
  if (shippableWeight == null) {
    shippableWeight=new Double(0.00);
  }
  Map estFields=UtilMisc.toMap("productStoreId",productStoreId,"shipmentMethodTypeId",shipmentMethodTypeId,"carrierPartyId",carrierPartyId,"carrierRoleTypeId",carrierRoleTypeId);
  Collection estimates=null;
  try {
    estimates=delegator.findByAnd("ShipmentCostEstimate",estFields);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Unable to locate estimates from database");
  }
  if (estimates == null || estimates.size() < 1) {
    if (initialEstimateAmt == null || initialEstimateAmt.doubleValue() == 0.00) {
      Debug.logWarning("Using the passed context : " + context,module);
      Debug.logWarning("No shipping estimates found; the shipping amount returned is 0!",module);
    }
    Map respNow=ServiceUtil.returnSuccess();
    respNow.put("shippingEstimateAmount",new Double(0.00));
    return respNow;
  }
  GenericValue shipAddress=null;
  try {
    shipAddress=delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",shippingContactMechId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Cannot get shipping address entity");
  }
  ArrayList estimateList=new ArrayList();
  Iterator i=estimates.iterator();
  while (i.hasNext()) {
    GenericValue thisEstimate=(GenericValue)i.next();
    String toGeo=thisEstimate.getString("geoIdTo");
    List toGeoList=GeoWorker.expandGeoGroup(toGeo,delegator);
    if (toGeoList == null || toGeoList.size() == 0 || GeoWorker.containsGeo(toGeoList,shipAddress.getString("countryGeoId"),delegator) || GeoWorker.containsGeo(toGeoList,shipAddress.getString("stateProvinceGeoId"),delegator) || GeoWorker.containsGeo(toGeoList,shipAddress.getString("postalCodeGeoId"),delegator)) {
      GenericValue wv=null;
      GenericValue qv=null;
      GenericValue pv=null;
      try {
        wv=thisEstimate.getRelatedOne("WeightQuantityBreak");
      }
 catch (      GenericEntityException e) {
      }
      try {
        qv=thisEstimate.getRelatedOne("QuantityQuantityBreak");
      }
 catch (      GenericEntityException e) {
      }
      try {
        pv=thisEstimate.getRelatedOne("PriceQuantityBreak");
      }
 catch (      GenericEntityException e) {
      }
      if (wv == null && qv == null && pv == null) {
        estimateList.add(thisEstimate);
      }
 else {
        boolean useWeight=false;
        boolean weightValid=false;
        boolean useQty=false;
        boolean qtyValid=false;
        boolean usePrice=false;
        boolean priceValid=false;
        if (wv != null) {
          useWeight=true;
          double min=0.0001;
          double max=0.0001;
          try {
            min=wv.getDouble("fromQuantity").doubleValue();
            max=wv.getDouble("thruQuantity").doubleValue();
          }
 catch (          Exception e) {
          }
          if (shippableWeight.doubleValue() >= min && (max == 0 || shippableWeight.doubleValue() <= max))           weightValid=true;
        }
        if (qv != null) {
          useQty=true;
          double min=0.0001;
          double max=0.0001;
          try {
            min=qv.getDouble("fromQuantity").doubleValue();
            max=qv.getDouble("thruQuantity").doubleValue();
          }
 catch (          Exception e) {
          }
          if (shippableQuantity.doubleValue() >= min && (max == 0 || shippableQuantity.doubleValue() <= max))           qtyValid=true;
        }
        if (pv != null) {
          usePrice=true;
          double min=0.0001;
          double max=0.0001;
          try {
            min=pv.getDouble("fromQuantity").doubleValue();
            max=pv.getDouble("thruQuantity").doubleValue();
          }
 catch (          Exception e) {
          }
          if (shippableTotal.doubleValue() >= min && (max == 0 || shippableTotal.doubleValue() <= max))           priceValid=true;
        }
        if ((useWeight && weightValid) || (useQty && qtyValid) || (usePrice && priceValid))         estimateList.add(thisEstimate);
      }
    }
  }
  if (estimateList.size() < 1) {
    return ServiceUtil.returnError("No shipping estimate found for carrier [" + carrierPartyId + "] and shipment method type ["+ shipmentMethodTypeId+ "]");
  }
  List shippableItemSizes=new LinkedList();
  Map shippableFeatureMap=new HashMap();
  if (shippableItemInfo != null) {
    Iterator sii=shippableItemInfo.iterator();
    while (sii.hasNext()) {
      Map itemMap=(Map)sii.next();
      Double itemSize=(Double)itemMap.get("size");
      if (itemSize != null) {
        shippableItemSizes.add(itemSize);
      }
      Double quantity=(Double)itemMap.get("quantity");
      Set featureSet=(Set)itemMap.get("featureSet");
      if (featureSet != null && featureSet.size() > 0) {
        Iterator fi=featureSet.iterator();
        while (fi.hasNext()) {
          String featureId=(String)fi.next();
          Double featureQuantity=(Double)shippableFeatureMap.get(featureId);
          if (featureQuantity == null) {
            featureQuantity=new Double(0.00);
          }
          featureQuantity=new Double(featureQuantity.doubleValue() + quantity.doubleValue());
          shippableFeatureMap.put(featureId,featureQuantity);
        }
      }
    }
  }
  double PRIORITY_PARTY=9;
  double PRIORITY_ROLE=8;
  double PRIORITY_GEO=4;
  double PRIORITY_WEIGHT=1;
  double PRIORITY_QTY=1;
  double PRIORITY_PRICE=1;
  int estimateIndex=0;
  if (estimateList.size() > 1) {
    TreeMap estimatePriority=new TreeMap();
    for (int x=0; x < estimateList.size(); x++) {
      GenericValue currentEstimate=(GenericValue)estimateList.get(x);
      int prioritySum=0;
      if (UtilValidate.isNotEmpty(currentEstimate.getString("partyId")))       prioritySum+=PRIORITY_PARTY;
      if (UtilValidate.isNotEmpty(currentEstimate.getString("roleTypeId")))       prioritySum+=PRIORITY_ROLE;
      if (UtilValidate.isNotEmpty(currentEstimate.getString("geoIdTo")))       prioritySum+=PRIORITY_GEO;
      if (UtilValidate.isNotEmpty(currentEstimate.getString("weightBreakId")))       prioritySum+=PRIORITY_WEIGHT;
      if (UtilValidate.isNotEmpty(currentEstimate.getString("quantityBreakId")))       prioritySum+=PRIORITY_QTY;
      if (UtilValidate.isNotEmpty(currentEstimate.getString("priceBreakId")))       prioritySum+=PRIORITY_PRICE;
      estimatePriority.put(new Integer(prioritySum),currentEstimate);
    }
    Object[] estimateArray=estimatePriority.values().toArray();
    estimateIndex=estimateList.indexOf(estimateArray[estimateArray.length - 1]);
  }
  GenericValue estimate=(GenericValue)estimateList.get(estimateIndex);
  double orderFlat=0.00;
  if (estimate.getDouble("orderFlatPrice") != null)   orderFlat=estimate.getDouble("orderFlatPrice").doubleValue();
  double orderItemFlat=0.00;
  if (estimate.getDouble("orderItemFlatPrice") != null)   orderItemFlat=estimate.getDouble("orderItemFlatPrice").doubleValue();
  double orderPercent=0.00;
  if (estimate.getDouble("orderPricePercent") != null)   orderPercent=estimate.getDouble("orderPricePercent").doubleValue();
  double shippingPricePercent=0.00;
  if (estimate.getDouble("shippingPricePercent") != null)   shippingPricePercent=estimate.getDouble("shippingPricePercent").doubleValue();
  double itemFlatAmount=shippableQuantity.doubleValue() * orderItemFlat;
  double orderPercentage=shippableTotal.doubleValue() * (orderPercent / 100);
  double flatTotal=orderFlat + itemFlatAmount + orderPercentage;
  flatTotal=flatTotal + flatTotal * (shippingPricePercent / 100);
  double weightUnit=0.00;
  if (estimate.getDouble("weightUnitPrice") != null)   weightUnit=estimate.getDouble("weightUnitPrice").doubleValue();
  double qtyUnit=0.00;
  if (estimate.getDouble("quantityUnitPrice") != null)   qtyUnit=estimate.getDouble("quantityUnitPrice").doubleValue();
  double priceUnit=0.00;
  if (estimate.getDouble("priceUnitPrice") != null)   priceUnit=estimate.getDouble("priceUnitPrice").doubleValue();
  double weightAmount=shippableWeight.doubleValue() * weightUnit;
  double quantityAmount=shippableQuantity.doubleValue() * qtyUnit;
  double priceAmount=shippableTotal.doubleValue() * priceUnit;
  double spanTotal=weightAmount + quantityAmount + priceAmount;
  double featureSurcharge=0.00;
  String featureGroupId=estimate.getString("productFeatureGroupId");
  Double featurePercent=estimate.getDouble("featurePercent");
  Double featurePrice=estimate.getDouble("featurePrice");
  if (featurePercent == null) {
    featurePercent=new Double(0);
  }
  if (featurePrice == null) {
    featurePrice=new Double(0.00);
  }
  if (featureGroupId != null && featureGroupId.length() > 0 && shippableFeatureMap != null) {
    Iterator fii=shippableFeatureMap.keySet().iterator();
    while (fii.hasNext()) {
      String featureId=(String)fii.next();
      Double quantity=(Double)shippableFeatureMap.get(featureId);
      GenericValue appl=null;
      Map fields=UtilMisc.toMap("productFeatureGroupId",featureGroupId,"productFeatureId",featureId);
      try {
        List appls=delegator.findByAndCache("ProductFeatureGroupAppl",fields);
        appls=EntityUtil.filterByDate(appls);
        appl=EntityUtil.getFirst(appls);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Unable to lookup feature/group" + fields,module);
      }
      if (appl != null) {
        featureSurcharge+=(shippableTotal.doubleValue() * (featurePercent.doubleValue() / 100) * quantity.doubleValue());
        featureSurcharge+=featurePrice.doubleValue() * quantity.doubleValue();
      }
    }
  }
  double sizeSurcharge=0.00;
  Double sizeUnit=estimate.getDouble("oversizeUnit");
  Double sizePrice=estimate.getDouble("oversizePrice");
  if (sizeUnit != null && sizeUnit.doubleValue() > 0) {
    if (shippableItemSizes != null) {
      Iterator isi=shippableItemSizes.iterator();
      while (isi.hasNext()) {
        Double size=(Double)isi.next();
        if (size != null && size.doubleValue() >= sizeUnit.doubleValue()) {
          sizeSurcharge+=sizePrice.doubleValue();
        }
      }
    }
  }
  double surchargeTotal=featureSurcharge + sizeSurcharge;
  double shippingTotal=spanTotal + flatTotal + surchargeTotal;
  Map responseResult=ServiceUtil.returnSuccess();
  responseResult.put("shippingEstimateAmount",new Double(shippingTotal));
  return responseResult;
}
