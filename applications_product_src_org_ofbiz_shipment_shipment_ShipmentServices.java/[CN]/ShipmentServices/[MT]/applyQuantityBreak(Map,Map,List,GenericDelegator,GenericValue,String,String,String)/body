{
  Double min=(Double)context.get(prefix + "min");
  Double max=(Double)context.get(prefix + "max");
  if (min != null || max != null) {
    if (min != null && max != null) {
      if (min.doubleValue() <= max.doubleValue() || max.doubleValue() == 0) {
        try {
          String newSeqId=delegator.getNextSeqId("QuantityBreak");
          GenericValue weightBreak=delegator.makeValue("QuantityBreak",null);
          weightBreak.set("quantityBreakId",newSeqId);
          weightBreak.set("quantityBreakTypeId","SHIP_" + breakType.toUpperCase());
          weightBreak.set("fromQuantity",min);
          weightBreak.set("thruQuantity",max);
          estimate.set(breakType + "BreakId",newSeqId);
          estimate.set(breakType + "UnitPrice",(Double)context.get(prefix + "price"));
          if (context.containsKey(prefix + "uom")) {
            estimate.set(breakType + "UomId",(String)context.get(prefix + "uom"));
          }
          storeAll.add(0,weightBreak);
        }
 catch (        Exception e) {
          Debug.logError(e,module);
        }
      }
 else {
        result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
        result.put(ModelService.ERROR_MESSAGE,"Max " + breakTypeString + " must not be less than Min "+ breakTypeString+ ".");
        return false;
      }
    }
 else {
      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);
      result.put(ModelService.ERROR_MESSAGE,breakTypeString + " Span Requires BOTH Fields.");
      return false;
    }
  }
  return true;
}
