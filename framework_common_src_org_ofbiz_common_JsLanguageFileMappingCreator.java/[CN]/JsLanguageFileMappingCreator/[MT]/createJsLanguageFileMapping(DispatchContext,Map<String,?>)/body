{
  Map<String,Object> result=ServiceUtil.returnSuccess();
  List<Locale> localeList=UtilMisc.availableLocales();
  Map<String,Object> jQueryLocaleFile=FastMap.newInstance();
  Map<String,String> dateJsLocaleFile=FastMap.newInstance();
  String componentRoot="component://images/webapp";
  String jqueryUiLocaleRelPath="/images/jquery/ui/development-bundle/ui/i18n/";
  String dateJsLocaleRelPath="/images/jquery/plugins/datejs/";
  String jsFilePostFix=".js";
  String dateJsLocalePrefix="date-";
  String jqueryUiLocalePrefix="jquery.ui.datepicker-";
  String defaultLocaleDateJs="en-US";
  String defaultLocaleJquery="en";
  for (  Locale locale : localeList) {
    String displayCountry=locale.toString();
    String modifiedDisplayCountry=null;
    if (displayCountry.indexOf('_') != -1) {
      modifiedDisplayCountry=displayCountry.replace("_","-");
    }
 else {
      modifiedDisplayCountry=displayCountry;
    }
    String strippedLocale=locale.getLanguage();
    File file=null;
    String fileUrl=null;
    String fileName=componentRoot + dateJsLocaleRelPath + dateJsLocalePrefix+ modifiedDisplayCountry+ jsFilePostFix;
    file=FileUtil.getFile(fileName);
    if (file.exists()) {
      fileUrl=dateJsLocaleRelPath + dateJsLocalePrefix + modifiedDisplayCountry+ jsFilePostFix;
    }
    if (fileUrl == null) {
      String tmpLocale=strippedLocale + "-" + strippedLocale.toUpperCase();
      fileName=componentRoot + dateJsLocaleRelPath + dateJsLocalePrefix+ tmpLocale+ jsFilePostFix;
      file=FileUtil.getFile(fileName);
      if (file.exists()) {
        fileUrl=dateJsLocaleRelPath + dateJsLocalePrefix + tmpLocale+ jsFilePostFix;
      }
    }
    if (fileUrl == null) {
      fileUrl=dateJsLocaleRelPath + dateJsLocalePrefix + defaultLocaleDateJs+ jsFilePostFix;
    }
    dateJsLocaleFile.put(displayCountry,fileUrl);
    fileUrl=null;
    file=null;
    fileUrl=null;
    fileName=componentRoot + jqueryUiLocaleRelPath + jqueryUiLocalePrefix+ strippedLocale+ jsFilePostFix;
    file=FileUtil.getFile(fileName);
    if (file.exists()) {
      fileUrl=jqueryUiLocaleRelPath + jqueryUiLocalePrefix + strippedLocale+ jsFilePostFix;
    }
 else {
      fileName=componentRoot + jqueryUiLocaleRelPath + jqueryUiLocalePrefix+ locale+ jsFilePostFix;
      file=FileUtil.getFile(fileName);
      if (file.exists()) {
        fileUrl=jqueryUiLocaleRelPath + jqueryUiLocalePrefix + locale+ jsFilePostFix;
      }
    }
    if (fileUrl == null) {
      fileUrl=jqueryUiLocaleRelPath + jqueryUiLocalePrefix + defaultLocaleJquery+ jsFilePostFix;
    }
    jQueryLocaleFile.put(displayCountry,fileUrl);
  }
  String template="framework/common/template/JsLanguageFilesMapping.ftl";
  String output="framework/common/src/org/ofbiz/common/JsLanguageFilesMapping.java";
  Map<String,Object> mapWrapper=new HashMap<String,Object>();
  mapWrapper.put("datejs",dateJsLocaleFile);
  mapWrapper.put("jquery",jQueryLocaleFile);
  Writer writer=new StringWriter();
  try {
    FreeMarkerWorker.renderTemplateAtLocation(template,mapWrapper,writer);
  }
 catch (  MalformedURLException e) {
    Debug.logError(e,module);
    return result=ServiceUtil.returnError("The Outputfile could not be created: " + e.getMessage());
  }
catch (  TemplateException e) {
    Debug.logError(e,module);
    return result=ServiceUtil.returnError("The Outputfile could not be created: " + e.getMessage());
  }
catch (  IOException e) {
    Debug.logError(e,module);
    return result=ServiceUtil.returnError("The Outputfile could not be created: " + e.getMessage());
  }
catch (  IllegalArgumentException e) {
    Debug.logError(e,module);
    return result=ServiceUtil.returnError("The Outputfile could not be created: " + e.getMessage());
  }
  File file=new File(output);
  try {
    FileUtils.writeStringToFile(file,writer.toString(),"UTF-8");
  }
 catch (  IOException e) {
    Debug.logError(e,module);
    return result=ServiceUtil.returnError("The Outputfile could not be created: " + e.getMessage());
  }
  return result;
}
