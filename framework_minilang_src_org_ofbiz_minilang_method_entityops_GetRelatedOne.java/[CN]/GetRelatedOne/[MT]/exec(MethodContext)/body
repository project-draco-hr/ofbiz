{
  String relationName=methodContext.expandString(this.relationName);
  String useCacheStr=methodContext.expandString(this.useCacheStr);
  boolean useCache="true".equals(useCacheStr);
  Object valueObject=valueAcsr.get(methodContext);
  if (!(valueObject instanceof GenericValue)) {
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [env variable for value-name "+ valueAcsr.toString()+ " is not a GenericValue object; for the relation-name: "+ relationName+ "]";
    Debug.logError(errMsg,module);
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  GenericValue value=(GenericValue)valueObject;
  if (value == null) {
    Debug.logWarning("Value not found with name: " + valueAcsr + ", not getting related...",module);
    return true;
  }
  try {
    toValueAcsr.put(methodContext,value.getRelatedOne(relationName,useCache));
  }
 catch (  GenericEntityException e) {
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [problem getting related one from entity with name "+ value.getEntityName()+ " for the relation-name: "+ relationName+ ": "+ e.getMessage()+ "]";
    Debug.logError(e,errMsg,module);
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  return true;
}
