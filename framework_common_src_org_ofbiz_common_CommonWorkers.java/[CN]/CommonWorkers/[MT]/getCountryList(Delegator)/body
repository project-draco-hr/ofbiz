{
  List<GenericValue> geoList=new LinkedList<GenericValue>();
  String defaultCountry=EntityUtilProperties.getPropertyValue("general.properties","country.geo.id.default",delegator);
  GenericValue defaultGeo=null;
  if (UtilValidate.isNotEmpty(defaultCountry)) {
    try {
      defaultGeo=EntityQuery.use(delegator).from("Geo").where("geoId",defaultCountry).cache().queryOne();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Cannot lookup Geo",module);
    }
  }
  List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition("geoTypeId",EntityOperator.EQUALS,"COUNTRY"));
  List<String> countriesAvailable=StringUtil.split(EntityUtilProperties.getPropertyValue("general.properties","countries.geo.id.available",delegator),",");
  if (UtilValidate.isNotEmpty(countriesAvailable)) {
    exprs.add(EntityCondition.makeCondition("geoId",EntityOperator.IN,countriesAvailable));
  }
  List<GenericValue> countriesList=new LinkedList<GenericValue>();
  try {
    countriesList=EntityQuery.use(delegator).from("Geo").where(exprs).orderBy("geoName").cache(true).queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot lookup Geo",module);
  }
  if (defaultGeo != null) {
    geoList.add(defaultGeo);
    boolean removeDefaultGeo=UtilValidate.isEmpty(countriesList);
    if (!removeDefaultGeo) {
      for (      GenericValue country : countriesList) {
        if (country.get("geoId").equals(defaultGeo.get("geoId"))) {
          removeDefaultGeo=true;
        }
      }
    }
    if (removeDefaultGeo) {
      geoList.remove(0);
    }
    geoList.addAll(countriesList);
  }
 else {
    geoList=countriesList;
  }
  return geoList;
}
