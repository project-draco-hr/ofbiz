{
  this.name=element.getAttribute("name");
  this.helperClass=element.getAttribute("helper-class");
  this.fieldTypeName=element.getAttribute("field-type-name");
  sqlLoadPaths=UtilXml.childElementList(element,"sql-load-path");
  readDatas=UtilXml.childElementList(element,"read-data");
  datasourceElement=element;
  if (datasourceElement == null) {
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for schema-name (none)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for use-schemas (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for check-on-start (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for add-missing-on-start (false)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for check-pks-on-start (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for use-foreign-keys (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default use-foreign-key-indices (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for check-fks-on-start (false)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for check-fk-indices-on-start (false)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for use-pk-constraint-names (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for constraint-name-clip-length (30)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for fk-style (name_constraint)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for use-fk-initially-deferred (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for use-indices (true)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for check-indices-on-start (false)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for join-style (ansi)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for always-use-constraint-keyword (false)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for drop-fk-use-foreign-key-keyword (false)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for use-binary-type-for-blob (false)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for table-type (none)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for character-set (none)",module);
    Debug.logWarning("datasource def not found with name " + this.name + ", using default for collate (none)",module);
  }
 else {
    this.schemaName=datasourceElement.getAttribute("schema-name");
    this.useSchemas=!"false".equals(datasourceElement.getAttribute("use-schemas"));
    this.checkOnStart=!"false".equals(datasourceElement.getAttribute("check-on-start"));
    this.checkPrimaryKeysOnStart=!"false".equals(datasourceElement.getAttribute("check-pks-on-start"));
    this.addMissingOnStart="true".equals(datasourceElement.getAttribute("add-missing-on-start"));
    this.useFks=!"false".equals(datasourceElement.getAttribute("use-foreign-keys"));
    this.useFkIndices=!"false".equals(datasourceElement.getAttribute("use-foreign-key-indices"));
    this.checkForeignKeysOnStart="true".equals(datasourceElement.getAttribute("check-fks-on-start"));
    this.checkFkIndicesOnStart="true".equals(datasourceElement.getAttribute("check-fk-indices-on-start"));
    this.usePkConstraintNames=!"false".equals(datasourceElement.getAttribute("use-pk-constraint-names"));
    try {
      this.constraintNameClipLength=Integer.parseInt(datasourceElement.getAttribute("constraint-name-clip-length"));
    }
 catch (    Exception e) {
      Debug.logError("Could not parse constraint-name-clip-length value for datasource with name " + this.name + ", using default value of 30",module);
    }
    this.useProxyCursor="true".equalsIgnoreCase(datasourceElement.getAttribute("use-proxy-cursor"));
    this.cursorName=datasourceElement.getAttribute("proxy-cursor-name");
    try {
      this.resultFetchSize=Integer.parseInt(datasourceElement.getAttribute("result-fetch-size"));
    }
 catch (    Exception e) {
      Debug.logWarning("Could not parse result-fetch-size value for datasource with name " + this.name + ", using JDBC driver default value",module);
    }
    this.fkStyle=datasourceElement.getAttribute("fk-style");
    this.useFkInitiallyDeferred="true".equals(datasourceElement.getAttribute("use-fk-initially-deferred"));
    this.useIndices=!"false".equals(datasourceElement.getAttribute("use-indices"));
    this.checkIndicesOnStart="true".equals(datasourceElement.getAttribute("check-indices-on-start"));
    this.joinStyle=datasourceElement.getAttribute("join-style");
    this.aliasViews=!"false".equals(datasourceElement.getAttribute("alias-view-columns"));
    this.alwaysUseConstraintKeyword="true".equals(datasourceElement.getAttribute("always-use-constraint-keyword"));
    this.dropFkUseForeignKeyKeyword="true".equals(datasourceElement.getAttribute("drop-fk-use-foreign-key-keyword"));
    this.useBinaryTypeForBlob="true".equals(datasourceElement.getAttribute("use-binary-type-for-blob"));
    this.tableType=datasourceElement.getAttribute("table-type");
    this.characterSet=datasourceElement.getAttribute("character-set");
    this.collate=datasourceElement.getAttribute("collate");
  }
  if (this.fkStyle == null || this.fkStyle.length() == 0)   this.fkStyle="name_constraint";
  if (this.joinStyle == null || this.joinStyle.length() == 0)   this.joinStyle="ansi";
  this.jndiJdbcElement=UtilXml.firstChildElement(datasourceElement,"jndi-jdbc");
  this.tyrexDataSourceElement=UtilXml.firstChildElement(datasourceElement,"tyrex-dataSource");
  this.inlineJdbcElement=UtilXml.firstChildElement(datasourceElement,"inline-jdbc");
}
