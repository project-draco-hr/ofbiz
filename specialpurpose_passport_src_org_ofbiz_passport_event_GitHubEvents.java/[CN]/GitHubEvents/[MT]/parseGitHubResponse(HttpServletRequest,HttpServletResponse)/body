{
  String authorizationCode=request.getParameter(PassportUtil.COMMON_CODE);
  String state=request.getParameter(PassportUtil.COMMON_STATE);
  if (!state.equals(request.getSession().getAttribute(SESSION_GITHUB_STATE))) {
    String errMsg=UtilProperties.getMessage(resource,"GitHubFailedToMatchState",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  if (UtilValidate.isEmpty(authorizationCode)) {
    String error=request.getParameter(PassportUtil.COMMON_ERROR);
    String errorDescpriton=request.getParameter(PassportUtil.COMMON_ERROR_DESCRIPTION);
    String errMsg=null;
    try {
      errMsg=UtilProperties.getMessage(resource,"FailedToGetGitHubAuthorizationCode",UtilMisc.toMap(PassportUtil.COMMON_ERROR,error,PassportUtil.COMMON_ERROR_DESCRIPTION,URLDecoder.decode(errorDescpriton,"UTF-8")),UtilHttp.getLocale(request));
    }
 catch (    UnsupportedEncodingException e) {
      errMsg=UtilProperties.getMessage(resource,"GetGitHubAuthorizationCodeError",UtilHttp.getLocale(request));
    }
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  Debug.logInfo("GitHub authorization code: " + authorizationCode,module);
  GenericValue oauth2GitHub=getOAuth2GitHubConfig(request);
  if (UtilValidate.isEmpty(oauth2GitHub)) {
    String errMsg=UtilProperties.getMessage(resource,"GetOAuth2GitHubConfigError",UtilHttp.getLocale(request));
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  String clientId=oauth2GitHub.getString(PassportUtil.COMMON_CLIENT_ID);
  String secret=oauth2GitHub.getString(PassportUtil.COMMON_CLIENT_SECRET);
  String returnURI=oauth2GitHub.getString(PassportUtil.COMMON_RETURN_RUL);
  String accessToken=null;
  String tokenType=null;
  try {
    URI uri=new URIBuilder().setHost(TokenEndpoint).setPath(TokenServiceUri).setParameter("client_id",clientId).setParameter("client_secret",secret).setParameter("code",authorizationCode).setParameter("redirect_uri",URLEncoder.encode(returnURI,"UTF-8")).build();
    HttpPost postMethod=new HttpPost(uri);
    CloseableHttpClient jsonClient=HttpClients.custom().build();
    postMethod.setConfig(PassportUtil.StandardRequestConfig);
    postMethod.setHeader(PassportUtil.ACCEPT_HEADER,"application/json");
    CloseableHttpResponse postResponse=jsonClient.execute(postMethod);
    String responseString=new BasicResponseHandler().handleResponse(postResponse);
    if (postResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
      JSON jsonObject=JSON.from(responseString);
      JSONToMap jsonMap=new JSONToMap();
      Map<String,Object> userMap=jsonMap.convert(jsonObject);
      accessToken=(String)userMap.get("access_token");
      tokenType=(String)userMap.get("token_type");
    }
 else {
      String errMsg=UtilProperties.getMessage(resource,"GetOAuth2GitHubAccessTokenError",UtilMisc.toMap("error",responseString),UtilHttp.getLocale(request));
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
  }
 catch (  UnsupportedEncodingException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  IOException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  ConversionException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  URISyntaxException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
  HttpGet getMethod=new HttpGet(ApiEndpoint + UserApiUri);
  Map<String,Object> userInfo=null;
  try {
    userInfo=GitHubAuthenticator.getUserInfo(getMethod,accessToken,tokenType,UtilHttp.getLocale(request));
  }
 catch (  AuthenticatorException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
 finally {
    getMethod.releaseConnection();
  }
  return checkLoginGitHubUser(request,userInfo,accessToken);
}
