{
  Map<String,Object> returnMap=FastMap.newInstance();
  Node newNodeParent=this.session.getRootNode();
  String assocContentId=null;
  String parentContentId=null;
  String[] nodes=newNodes.split("/");
  for (  String node : nodes) {
    if (UtilValidate.isEmpty(node)) {
      continue;
    }
 else     if (newNodeParent.hasNode(node)) {
      newNodeParent=newNodeParent.getNode(node);
      continue;
    }
    if (!newNodeParent.getPath().equals("/") && UtilValidate.isEmpty(parentContentId) && UtilValidate.isEmpty(assocContentId)&& (newNodeParent.getParent() != null)) {
      parentContentId=getParentNodeContentId(newNodeParent);
    }
    if (!versionManager.isCheckedOut(newNodeParent.getPath())) {
      checkOutNode(newNodeParent);
    }
    if (UtilValidate.isEmpty(type)) {
      String parentNodeType=newNodeParent.getPrimaryNodeType().getName();
      if (!PROPERTY_FIELDS.REPROOT.getType().equals(parentNodeType)) {
        newNodeParent=newNodeParent.addNode(node,newNodeParent.getPrimaryNodeType().getName());
      }
 else {
        newNodeParent=newNodeParent.addNode(node);
      }
    }
 else {
      newNodeParent=newNodeParent.addNode(node,type);
    }
    GenericValue newContent=nodeContentDatabaseConnection(newNodeParent);
    returnMap.put("content",newContent);
    assocContentId=newContent.getString("contentId");
    newNodeParent.addMixin(PROPERTY_FIELDS.mixInVERSIONING.getType());
    checkedOutNodeStore.add(newNodeParent);
    if (UtilValidate.isNotEmpty(assocContentId) && UtilValidate.isNotEmpty(parentContentId)) {
      nodeContentAssoc(assocContentId,parentContentId);
      parentContentId=assocContentId;
    }
  }
  returnMap.put("node",newNodeParent);
  return returnMap;
}
