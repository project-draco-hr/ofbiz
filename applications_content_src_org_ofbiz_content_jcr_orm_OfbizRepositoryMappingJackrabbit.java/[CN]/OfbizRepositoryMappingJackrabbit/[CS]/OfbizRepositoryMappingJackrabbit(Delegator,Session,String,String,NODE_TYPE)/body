{
  if (session == null) {
    Debug.logWarning("A repository session is needed to create an OfbizContentMapping Object.",module);
    return;
  }
 else   if (UtilValidate.isEmpty(contentId) && UtilValidate.isEmpty(repositoryNode)) {
    Debug.logWarning("There should be either a contentId or a repositoryNode",module);
    return;
  }
  versionManager=session.getWorkspace().getVersionManager();
  this.delegator=delegator;
  this.session=session;
  if (!repositoryNode.startsWith("/")) {
    repositoryNode="/" + repositoryNode;
  }
  if (UtilValidate.isNotEmpty(contentId)) {
    this.content=delegator.findOne("Content",true,UtilMisc.toMap("contentId",contentId));
    this.node=getRepositoryNode(content.getString("repositoryNode"));
  }
 else   if (UtilValidate.isNotEmpty(repositoryNode)) {
    List<GenericValue> contentList=delegator.findByAndCache("Content",UtilMisc.toMap("repositoryNode",repositoryNode));
    if (UtilValidate.isNotEmpty(contentList)) {
      this.content=EntityUtil.getFirst(contentList);
      this.node=getRepositoryNode(repositoryNode);
    }
 else {
      String primType=null;
      if (type == NODE_TYPE.FILE) {
        primType=PROPERTY_FIELDS.FOLDER.getType();
      }
 else {
        primType=PROPERTY_FIELDS.UNSTRUCTURED.getType();
      }
      Map<String,Object> newRepositoryEntry=createNewRepositoryNode(repositoryNode,primType);
      this.node=(Node)newRepositoryEntry.get("node");
      this.content=(GenericValue)newRepositoryEntry.get("content");
      saveSessionAndCheckinNode();
    }
  }
}
