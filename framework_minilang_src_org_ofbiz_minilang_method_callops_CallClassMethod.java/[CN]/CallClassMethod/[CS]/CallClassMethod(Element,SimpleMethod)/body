{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.handleError("<call-class-method> element is deprecated (use <script>)",simpleMethod,element);
    MiniLangValidate.attributeNames(simpleMethod,element,"class-name","method-name","ret-field");
    MiniLangValidate.constantAttributes(simpleMethod,element,"class-name","method-name");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"class-name","method-name");
    MiniLangValidate.childElements(simpleMethod,element,"string","field");
  }
  this.className=element.getAttribute("class-name");
  Class<?> methodClass=null;
  try {
    methodClass=ObjectType.loadClass(this.className);
  }
 catch (  ClassNotFoundException e) {
    MiniLangValidate.handleError("Class not found with name " + this.className,simpleMethod,element);
  }
  this.methodClass=methodClass;
  this.methodName=element.getAttribute("method-name");
  this.retFieldFma=FlexibleMapAccessor.getInstance(element.getAttribute("ret-field"));
  List<? extends Element> parameterElements=UtilXml.childElementList(element);
  if (parameterElements.size() > 0) {
    ArrayList<MethodObject<?>> parameterList=new ArrayList<MethodObject<?>>(parameterElements.size());
    for (    Element parameterElement : parameterElements) {
      if ("string".equals(parameterElement.getNodeName())) {
        parameterList.add(new StringObject(parameterElement,simpleMethod));
      }
 else       if ("field".equals(parameterElement.getNodeName())) {
        parameterList.add(new FieldObject<Object>(parameterElement,simpleMethod));
      }
    }
    parameterList.trimToSize();
    this.parameters=Collections.unmodifiableList(parameterList);
  }
 else {
    this.parameters=null;
  }
}
