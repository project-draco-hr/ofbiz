{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  if (dispatcher == null) {
    throw new EventHandlerException("The local service dispatcher is null");
  }
  DispatchContext dctx=dispatcher.getDispatchContext();
  if (dctx == null) {
    throw new EventHandlerException("Dispatch context cannot be found");
  }
  String mode=SYNC;
  String serviceName=null;
  if (eventPath == null || eventPath.length() == 0) {
    mode=SYNC;
  }
 else {
    mode=eventPath;
  }
  if (!SYNC.equals(mode)) {
    throw new EventHandlerException("Async mode is not supported");
  }
  serviceName=eventMethod;
  if (serviceName == null) {
    throw new EventHandlerException("Service name (eventMethod) cannot be null");
  }
  if (Debug.verboseOn())   Debug.logVerbose("[Set mode/service]: " + mode + "/"+ serviceName,module);
  Locale locale=UtilHttp.getLocale(request);
  TimeZone timeZone=UtilHttp.getTimeZone(request);
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  ModelService modelService=null;
  try {
    modelService=dctx.getModelService(serviceName);
  }
 catch (  GenericServiceException e) {
    throw new EventHandlerException("Problems getting the service model",e);
  }
  if (modelService == null) {
    throw new EventHandlerException("Problems getting the service model");
  }
  if (Debug.verboseOn())   Debug.logVerbose("[Processing]: SERVICE Event",module);
  if (Debug.verboseOn())   Debug.logVerbose("[Using delegator]: " + dispatcher.getDelegator().getDelegatorName(),module);
  boolean checkGlobalScope=request.getParameter("_checkGlobalScope") == null ? true : !"N".equalsIgnoreCase(request.getParameter("_checkGlobalScope"));
  String productId=new String();
  FastList<GenericValue> variantList=FastList.newInstance();
  if (UtilValidate.isNotEmpty(request.getParameter("productId"))) {
    productId=request.getParameter("productId");
    try {
      GenericValue product=(GenericValue)dispatcher.runSync("getProduct",UtilMisc.toMap("productId",productId)).get("product");
      if (!request.getParameterMap().containsKey("modifyVariants") || request.getParameterMap().containsKey("modifyVariants") && request.getParameter("modifyVariants").equals("Y") && product.get("isVirtual").toString().equals("Y")) {
        try {
          Map<String,Object> variantMap=dispatcher.runSync("getAllProductVariants",UtilMisc.toMap("productId",productId));
          if (variantMap.get("responseMessage").equals("success") && variantMap.get("assocProducts") != null) {
            FastList<GenericValue> assocProductsList=(FastList<GenericValue>)variantMap.get("assocProducts");
            variantList.addAll(assocProductsList);
            for (            GenericValue assocProduct : assocProductsList) {
              try {
                GenericValue variant=(GenericValue)dispatcher.runSync("getProduct",UtilMisc.toMap("productId",assocProduct.get("productIdTo"))).get("product");
                if (variant.get("isVirtual").toString().equals("Y")) {
                  try {
                    Map<String,Object> subVariantMap=dispatcher.runSync("getAllProductVariants",UtilMisc.toMap("productId",assocProduct.get("productIdTo")));
                    if (subVariantMap.get("responseMessage").equals("success") && subVariantMap.get("assocProducts") != null) {
                      variantList.addAll((FastList<GenericValue>)subVariantMap.get("assocProducts"));
                    }
                  }
 catch (                  GenericServiceException e) {
                    Debug.logError(e,"Unable to getAllProductVariants for productId (" + assocProduct.get("productIdTo") + "): ",module);
                  }
                }
              }
 catch (              GenericServiceException e) {
                Debug.logError(e,"Unable to getProduct for productId (" + assocProduct.get("productIdTo") + "): ",module);
              }
            }
          }
        }
 catch (        GenericServiceException e) {
          Debug.logError(e,"Unable to getAllProductVariants for productId (" + productId + "): ",module);
        }
      }
      variantList.addFirst(product);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,"Unable to getProduct for productId (" + productId + "): ",module);
    }
  }
  String errorPrefixStr=UtilProperties.getMessage("DefaultMessages","service.error.prefix",locale);
  String errorSuffixStr=UtilProperties.getMessage("DefaultMessages","service.error.suffix",locale);
  String messagePrefixStr=UtilProperties.getMessage("DefaultMessages","service.message.prefix",locale);
  String messageSuffixStr=UtilProperties.getMessage("DefaultMessages","service.message.suffix",locale);
  List<Object> errorMessages=FastList.newInstance();
  List<String> successMessages=FastList.newInstance();
  String requestUri=RequestHandler.getRequestUri(request.getPathInfo());
  ConfigXMLReader.ControllerConfig controllerConfig=ConfigXMLReader.getControllerConfig(ConfigXMLReader.getControllerConfigURL(servletContext));
  boolean eventGlobalTransaction=controllerConfig.requestMapMap.get(requestUri).event.globalTransaction;
  boolean beganTrans=false;
  String returnString=null;
  try {
    if (eventGlobalTransaction && !(serviceName.toLowerCase().contains("update") || serviceName.toLowerCase().contains("delete"))) {
      try {
        beganTrans=TransactionUtil.begin(modelService.transactionTimeout * variantList.size());
      }
 catch (      GenericTransactionException e) {
        throw new EventHandlerException("Problem starting service-variant global transaction",e);
      }
    }
    for (    GenericValue variant : variantList) {
      String currentProductId=new String();
      Map<String,Object> serviceContext=FastMap.newInstance();
      for (      ModelParam modelParam : modelService.getInModelParamList()) {
        String paramName=modelParam.name;
        if ("userLogin".equals(paramName))         continue;
        if ("locale".equals(paramName))         continue;
        if ("timeZone".equals(paramName))         continue;
        Object value=null;
        if ("productId".equals(paramName)) {
          if (variant.getEntityName().equals("ProductAssoc")) {
            value=variant.get("productIdTo");
            currentProductId=(String)value;
          }
 else {
            value=productId;
            currentProductId=(String)value;
          }
        }
 else         if (modelParam.stringMapPrefix != null && modelParam.stringMapPrefix.length() > 0) {
          Map<String,Object> paramMap=UtilHttp.makeParamMapWithPrefix(request,modelParam.stringMapPrefix,null);
          value=paramMap;
        }
 else         if (modelParam.stringListSuffix != null && modelParam.stringListSuffix.length() > 0) {
          List<Object> paramList=UtilHttp.makeParamListWithSuffix(request,modelParam.stringListSuffix,null);
          value=paramList;
        }
 else {
          value=request.getAttribute(paramName);
          if (value == null) {
            String[] paramArr=request.getParameterValues(paramName);
            if (paramArr != null) {
              if (paramArr.length > 1) {
                value=Arrays.asList(paramArr);
              }
 else {
                value=paramArr[0];
              }
            }
          }
          if (value == null) {
            value=session.getAttribute(paramName);
          }
          if (value == null) {
            if (checkGlobalScope) {
              String[] gParamArr=request.getParameterValues(paramName);
              if (gParamArr != null) {
                if (gParamArr.length > 1) {
                  value=Arrays.asList(gParamArr);
                }
 else {
                  value=gParamArr[0];
                }
              }
              if (value == null) {
                value=request.getAttribute(paramName);
              }
              if (value == null) {
                value=session.getAttribute(paramName);
              }
            }
          }
          if (value == null) {
            continue;
          }
          if (value instanceof String && ((String)value).length() == 0) {
            value=null;
          }
        }
        serviceContext.put(paramName,value);
      }
      serviceContext=modelService.makeValid(serviceContext,ModelService.IN_PARAM,true,null,timeZone,locale);
      if (userLogin != null) {
        serviceContext.put("userLogin",userLogin);
      }
      if (locale != null) {
        serviceContext.put("locale",locale);
      }
      if (timeZone != null) {
        serviceContext.put("timeZone",timeZone);
      }
      Map<String,Object> result=null;
      try {
        result=dispatcher.runSync(serviceName,serviceContext);
      }
 catch (      ServiceAuthException e) {
        errorMessages.add(messagePrefixStr + "Service invocation error on productId (" + currentProductId+ "): "+ e.getNonNestedMessage());
      }
catch (      ServiceValidationException e) {
        request.setAttribute("serviceValidationException",e);
        List<String> errors=e.getMessageList();
        if (errors != null) {
          for (          String message : errors) {
            errorMessages.add("Service invocation error on productId (" + currentProductId + "): "+ message);
          }
        }
 else {
          errorMessages.add(messagePrefixStr + "Service invocation error on productId (" + currentProductId+ "): "+ e.getNonNestedMessage());
        }
      }
catch (      GenericServiceException e) {
        Debug.logError(e,"Service invocation error",module);
        errorMessages.add(messagePrefixStr + "Service invocation error on productId (" + currentProductId+ "): "+ e.getNested()+ messageSuffixStr);
      }
      if (result == null) {
        returnString=ModelService.RESPOND_SUCCESS;
      }
 else {
        String errorMessage=ServiceUtil.makeErrorMessage(result,messagePrefixStr,messageSuffixStr,"","");
        if (UtilValidate.isNotEmpty(errorMessage)) {
          errorMessages.add(errorMessage);
        }
        if (!UtilValidate.isEmpty((String)result.get(ModelService.SUCCESS_MESSAGE))) {
          String newSuccessMessage=(String)result.get(ModelService.SUCCESS_MESSAGE);
          if (!successMessages.contains(newSuccessMessage)) {
            successMessages.add(newSuccessMessage);
          }
        }
        if (!UtilValidate.isEmpty((List)result.get(ModelService.SUCCESS_MESSAGE_LIST))) {
          List newSuccessMessages=(List)result.get(ModelService.SUCCESS_MESSAGE_LIST);
          for (int j=0; j < newSuccessMessages.size(); j++) {
            String newSuccessMessage=(String)newSuccessMessages.get(j);
            if (!successMessages.contains(newSuccessMessage)) {
              successMessages.add(newSuccessMessage);
            }
          }
        }
      }
      if ((result != null) && (result.entrySet() != null)) {
        for (        Map.Entry<String,Object> rme : result.entrySet()) {
          String resultKey=rme.getKey();
          Object resultValue=rme.getValue();
          if (resultKey != null && !ModelService.RESPONSE_MESSAGE.equals(resultKey) && !ModelService.ERROR_MESSAGE.equals(resultKey) && !ModelService.ERROR_MESSAGE_LIST.equals(resultKey) && !ModelService.ERROR_MESSAGE_MAP.equals(resultKey) && !ModelService.SUCCESS_MESSAGE.equals(resultKey) && !ModelService.SUCCESS_MESSAGE_LIST.equals(resultKey)) {
            request.setAttribute(resultKey,resultValue);
          }
        }
      }
    }
  }
  finally {
    if (errorMessages.size() > 0) {
      if (eventGlobalTransaction && !(serviceName.toLowerCase().contains("update") || serviceName.toLowerCase().contains("delete"))) {
        try {
          TransactionUtil.rollback(beganTrans,"Error in service-variant event handling: " + errorMessages.toString(),null);
        }
 catch (        GenericTransactionException e) {
          Debug.logError(e,"Could not rollback service-variant global transaction",module);
        }
      }
      errorMessages.add(0,errorPrefixStr);
      errorMessages.add(errorSuffixStr);
      StringBuilder errorBuf=new StringBuilder();
      for (      Object em : errorMessages) {
        errorBuf.append(em + "\n");
      }
      request.setAttribute("_ERROR_MESSAGE_",errorBuf.toString());
      returnString="error";
    }
 else {
      if (eventGlobalTransaction) {
        try {
          TransactionUtil.commit(beganTrans);
        }
 catch (        GenericTransactionException e) {
          Debug.logError(e,"Could not commit service-variant global transaction",module);
          throw new EventHandlerException("Commit service-variant global transaction failed");
        }
      }
      if (successMessages.size() > 0) {
        request.setAttribute("_EVENT_MESSAGE_LIST_",successMessages);
      }
      returnString="success";
    }
  }
  return returnString;
}
