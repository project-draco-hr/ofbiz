{
  Delegator delegator=content.getDelegator();
  String contentId=content.getString("contentId");
  String dataResourceId=content.getString("dataResourceId");
  GenericValue dataResource;
  try {
    dataResource=delegator.findOne("DataResource",UtilMisc.toMap("dataResourceId",dataResourceId),true);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    List<String> badIndexList=UtilGenerics.checkList(context.get("badIndexList"));
    badIndexList.add(contentId + " - " + e.getMessage());
    return false;
  }
  if (dataResource == null) {
    List<String> badIndexList=UtilGenerics.checkList(context.get("badIndexList"));
    badIndexList.add(contentId + " - dataResource is null.");
    return false;
  }
  String mimeTypeId=dataResource.getString("mimeTypeId");
  if (UtilValidate.isEmpty(mimeTypeId)) {
    mimeTypeId="text/html";
  }
  Locale locale=Locale.getDefault();
  String currentLocaleString=dataResource.getString("localeString");
  if (UtilValidate.isNotEmpty(currentLocaleString)) {
    locale=UtilMisc.parseLocale(currentLocaleString);
  }
  String text;
  try {
    text=ContentWorker.renderContentAsText(dispatcher,delegator,contentId,context,locale,mimeTypeId,true);
  }
 catch (  GeneralException e) {
    Debug.logError(e,module);
    List<String> badIndexList=UtilGenerics.checkList(context.get("badIndexList"));
    badIndexList.add(contentId + " - " + e.getMessage());
    return false;
  }
catch (  IOException e2) {
    Debug.logError(e2,module);
    List<String> badIndexList=UtilGenerics.checkList(context.get("badIndexList"));
    badIndexList.add(contentId + " - " + e2.getMessage());
    return false;
  }
  if (UtilValidate.isNotEmpty(text)) {
    Field field=new Field("content",text,Store.NO,Index.ANALYZED,TermVector.NO);
    doc.add(field);
  }
  List<GenericValue> featureDataResourceList;
  try {
    featureDataResourceList=content.getRelatedCache("ProductFeatureDataResource");
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    List<String> badIndexList=UtilGenerics.checkList(context.get("badIndexList"));
    badIndexList.add(contentId + " - " + e.getMessage());
    return false;
  }
  List<String> featureList=FastList.newInstance();
  for (  GenericValue productFeatureDataResource : featureDataResourceList) {
    String feature=productFeatureDataResource.getString("productFeatureId");
    featureList.add(feature);
  }
  String featureString=StringUtil.join(featureList," ");
  if (UtilValidate.isNotEmpty(featureString)) {
    Field field=new Field("feature",featureString,Store.NO,Index.ANALYZED,TermVector.NO);
    doc.add(field);
  }
  return true;
}
