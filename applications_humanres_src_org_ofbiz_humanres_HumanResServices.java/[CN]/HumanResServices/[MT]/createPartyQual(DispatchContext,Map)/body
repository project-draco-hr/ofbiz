{
  Map result=FastMap.newInstance();
  GenericDelegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_QAL_CREATE");
  if (result.size() > 0)   return result;
  String partyQualTypeId=(String)context.get("partyQualTypeId");
  String statusId=(String)context.get("statusId");
  String verifStatusId=(String)context.get("verifStatusId");
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  String errMsg=null;
  try {
    String title=(String)context.get("title");
    String qualificationDesc=(String)context.get("qualificationDesc");
    Timestamp thruDate=(Timestamp)context.get("thruDate");
    if (fromDate == null) {
      errMsg=UtilProperties.getMessage(resource,"HumanResServices.PartyQualFailureMissingParam",locale);
      return ServiceUtil.returnError(errMsg);
    }
    GenericValue partyQual=delegator.makeValue("PartyQual",UtilMisc.toMap(new Object[]{"partyId",partyId,"partyQualTypeId",partyQualTypeId,"title",title,"statusId",statusId,"qualificationDesc",qualificationDesc,"verifStatusId",verifStatusId,"fromDate",fromDate,"thruDate",thruDate}));
    partyQual.setNonPKFields(context);
    partyQual.create();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    Map messageMap=UtilMisc.toMap("errMessage",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"HumanResServices.PartyQualFailureDataSource",messageMap,locale);
    return ServiceUtil.returnError(errMsg);
  }
  return UtilMisc.toMap("partyId",partyId,"partyQualTypeId",partyQualTypeId,"fromDate",fromDate,ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
}
