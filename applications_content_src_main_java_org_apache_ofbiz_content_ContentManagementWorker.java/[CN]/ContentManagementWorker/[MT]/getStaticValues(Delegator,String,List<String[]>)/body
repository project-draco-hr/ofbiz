{
  List<GenericValue> assocValueList=null;
  try {
    assocValueList=EntityQuery.use(delegator).from("Content").where("contentTypeId",parentPlaceholderId).cache().queryList();
  }
 catch (  GenericEntityException e) {
    throw new GeneralException(e.getMessage());
  }
  List<Map<String,Object>> staticValueList=new LinkedList<Map<String,Object>>();
  int counter=0;
  for (  GenericValue content : assocValueList) {
    String contentId=(String)content.get("contentId");
    String contentName=(String)content.get("contentName");
    String description=(String)content.get("description");
    Map<String,Object> map=new HashMap<String,Object>();
    map.put("contentId",contentId);
    map.put("contentName",contentName);
    map.put("description",description);
    for (    String[] publishPointArray : permittedPublishPointList) {
      String publishPointId=publishPointArray[0];
      List<GenericValue> contentAssocList=content.getRelated("ToContentAssoc",UtilMisc.toMap("contentId",publishPointId),null,false);
      List<GenericValue> filteredList=EntityUtil.filterByDate(contentAssocList);
      if (filteredList.size() > 0) {
        map.put(publishPointId,"Y");
        GenericValue assoc=filteredList.get(0);
        Timestamp fromDate=(Timestamp)assoc.get("fromDate");
        map.put(publishPointId + "FromDate",fromDate);
      }
 else {
        map.put(publishPointId,"N");
      }
    }
    staticValueList.add(map);
    counter++;
  }
  return staticValueList;
}
