{
  Map result=new HashMap();
  long total=0;
  boolean beganTransaction=false;
  try {
    beganTransaction=TransactionUtil.begin();
    EntityListIterator eli=this.getEli(question);
    if (eli != null) {
      GenericValue value;
      while (((value=(GenericValue)eli.next()) != null)) {
        String optionId=value.getString("surveyOptionSeqId");
        Long optCount=(Long)result.remove(optionId);
        if (optCount == null) {
          optCount=new Long(1);
        }
 else {
          optCount=new Long(1 + optCount.longValue());
        }
        result.put(optionId,optCount);
        total++;
      }
      eli.close();
    }
  }
 catch (  GenericEntityException e) {
    try {
      TransactionUtil.rollback(beganTransaction,"Error getting survey question responses Option result",e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"Could not rollback transaction: " + e2.toString(),module);
    }
    throw new SurveyWrapperException(e);
  }
 finally {
    try {
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericEntityException e) {
      throw new SurveyWrapperException(e);
    }
  }
  result.put("_total",new Long(total));
  return result;
}
