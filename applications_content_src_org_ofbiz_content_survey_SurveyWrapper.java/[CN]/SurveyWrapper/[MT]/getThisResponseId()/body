{
  if (responseId != null) {
    return responseId;
  }
  if (partyId == null) {
    return null;
  }
  String responseId=null;
  List<GenericValue> responses=null;
  try {
    responses=EntityQuery.use(delegator).from("SurveyResponse").where("surveyId",surveyId,"partyId",partyId).orderBy("-lastModifiedDate").queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (UtilValidate.isNotEmpty(responses)) {
    GenericValue response=EntityUtil.getFirst(responses);
    responseId=response.getString("surveyResponseId");
    if (responses.size() > 1) {
      Debug.logWarning("More then one response found for survey : " + surveyId + " by party : "+ partyId+ " using most current",module);
    }
  }
  return responseId;
}
