{
  List<GenericValue> issued=EntityQuery.use(delegator).from("ItemIssuance").where("shipmentId",shipmentId).queryList();
  if (UtilValidate.isNotEmpty(issued)) {
    try {
      GenericValue googleOrder=null;
      ShipItemsRequest isr=null;
      for (      GenericValue issue : issued) {
        GenericValue orderItem=issue.getRelatedOne("OrderItem",false);
        String shipmentItemSeqId=issue.getString("shipmentItemSeqId");
        String productId=orderItem.getString("productId");
        String orderId=issue.getString("orderId");
        googleOrder=findGoogleOrder(delegator,orderId);
        if (UtilValidate.isNotEmpty(googleOrder)) {
          MerchantInfo mInfo=getMerchantInfo(delegator,getProductStoreFromOrder(googleOrder));
          if (UtilValidate.isEmpty(mInfo)) {
            Debug.logInfo("Cannot find Google MerchantInfo for Order #" + orderId,module);
            continue;
          }
          String externalId=googleOrder.getString("externalId");
          if (UtilValidate.isEmpty(isr)) {
            isr=new ShipItemsRequest(mInfo,externalId);
          }
          GenericValue packageContent=EntityQuery.use(delegator).from("ShipmentPackageContent").where("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItemSeqId).queryFirst();
          String carrier=null;
          if (UtilValidate.isNotEmpty(packageContent)) {
            GenericValue shipPackage=packageContent.getRelatedOne("ShipmentPackage",false);
            if (UtilValidate.isNotEmpty(shipPackage)) {
              List<GenericValue> prs=shipPackage.getRelated("ShipmentPackageRouteSeg",null,null,false);
              GenericValue packageRoute=EntityUtil.getFirst(prs);
              if (UtilValidate.isNotEmpty(packageRoute)) {
                List<GenericValue> srs=packageRoute.getRelated("ShipmentRouteSegment",null,null,false);
                GenericValue route=EntityUtil.getFirst(srs);
                String track=packageRoute.getString("trackingCode");
                if (UtilValidate.isNotEmpty(route)) {
                  carrier=route.getString("carrierPartyId");
                  if (UtilValidate.isEmpty(track)) {
                    track=route.getString("trackingIdNumber");
                  }
                  if (track == null) {
                    track="";
                  }
                  isr.addItemShippingInformation(productId,carrier,track);
                  Debug.logInfo("Sending item shipped notification: " + productId + " / "+ carrier+ " / "+ track,module);
                  Debug.logInfo("Using merchantInfo : " + mInfo.getMerchantId() + " #"+ externalId,module);
                }
              }
            }
          }
        }
      }
      if (UtilValidate.isNotEmpty(googleOrder)) {
        isr.send();
      }
    }
 catch (    CheckoutException e) {
      Debug.logError(e,module);
      throw new GeneralException(e);
    }
  }
}
