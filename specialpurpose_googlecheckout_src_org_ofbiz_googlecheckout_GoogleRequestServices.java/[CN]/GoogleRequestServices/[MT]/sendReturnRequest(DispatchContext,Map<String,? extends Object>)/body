{
  Delegator delegator=dctx.getDelegator();
  String returnId=(String)context.get("returnId");
  Map<String,BigDecimal> toRefund=FastMap.newInstance();
  Map<String,List<String>> toReturn=FastMap.newInstance();
  BigDecimal refundTotal=new BigDecimal(0.0);
  List<GenericValue> returnItems=null;
  try {
    returnItems=delegator.findByAnd("ReturnItem",UtilMisc.toMap("returnId",returnId));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  if (UtilValidate.isNotEmpty(returnItems)) {
    for (    GenericValue returnItem : returnItems) {
      String orderId=returnItem.getString("orderId");
      GenericValue order=findGoogleOrder(delegator,orderId);
      if (order != null) {
        refundTotal=toRefund.get(orderId);
        if (refundTotal == null) {
          refundTotal=new BigDecimal(0.0);
        }
        List<String> items=toReturn.get(orderId);
        if (items == null) {
          items=FastList.newInstance();
        }
        BigDecimal returnQty=returnItem.getBigDecimal("returnQuantity");
        BigDecimal returnPrice=returnItem.getBigDecimal("returnPrice").multiply(returnQty);
        String productId=returnItem.getString("productId");
        if ("RTN_REFUND".equals(returnItem.getString("returnTypeId"))) {
          if (returnPrice.doubleValue() > 0) {
            refundTotal=refundTotal.add(returnPrice).setScale(decimals,rounding);
            Debug.logInfo("Added [" + returnPrice + "] to refund total for order #"+ orderId+ " : "+ refundTotal,module);
          }
        }
        if (productId != null) {
          items.add(productId);
        }
        toRefund.put(orderId,refundTotal);
        toReturn.put(orderId,items);
      }
    }
  }
  for (  String returnOrderId : toReturn.keySet()) {
    GenericValue gOrder=findGoogleOrder(delegator,returnOrderId);
    if (gOrder != null) {
      MerchantInfo mInfo=getMerchantInfo(delegator,getProductStoreFromOrder(gOrder));
      if (mInfo != null) {
        ReturnItemsRequest rir=new ReturnItemsRequest(mInfo,gOrder.getString("externalId"));
        List<String> items=toReturn.get(returnOrderId);
        for (        String item : items) {
          rir.addItem(item);
        }
        try {
          rir.send();
        }
 catch (        CheckoutException e) {
          Debug.logError(e,module);
          return ServiceUtil.returnError(e.getMessage());
        }
      }
    }
  }
  for (  String refundOrderId : toRefund.keySet()) {
    GenericValue gOrder=findGoogleOrder(delegator,refundOrderId);
    if (gOrder != null) {
      MerchantInfo mInfo=getMerchantInfo(delegator,getProductStoreFromOrder(gOrder));
      if (mInfo != null) {
        BigDecimal amount=toRefund.get(refundOrderId).setScale(decimals,rounding);
        String externalId=gOrder.getString("externalId");
        String reason="Item(s) Returned";
        if (amount.floatValue() > 0) {
          try {
            RefundOrderRequest ror=new RefundOrderRequest(mInfo,externalId,reason,amount.floatValue(),"");
            ror.send();
          }
 catch (          CheckoutException e) {
            Debug.logError(e,module);
            return ServiceUtil.returnError(e.getMessage());
          }
        }
 else {
          Debug.logWarning("Refund for order #" + refundOrderId + " was 0, nothing to refund?",module);
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
