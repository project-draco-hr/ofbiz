{
  List<GenericValue> issued=delegator.findByAnd("ItemIssuance",UtilMisc.toMap("shipmentId",shipmentId));
  if (issued != null && issued.size() > 0) {
    for (    GenericValue issue : issued) {
      GenericValue orderItem=issue.getRelatedOne("OrderItem");
      String shipmentItemSeqId=issue.getString("shipmentItemSeqId");
      String productId=orderItem.getString("productId");
      String orderId=issue.getString("orderId");
      GenericValue order=findGoogleOrder(delegator,orderId);
      if (order != null) {
        MerchantInfo mInfo=getMerchantInfo(delegator,getProductStoreFromOrder(order));
        if (mInfo == null) {
          Debug.logInfo("Cannot find Google MerchantInfo for Order #" + orderId,module);
          continue;
        }
        String externalId=order.getString("externalId");
        Map<String,? extends Object> spcLup=UtilMisc.toMap("shipmentId",shipmentId,"shipmentItemSeqId",shipmentItemSeqId);
        List<GenericValue> spc=delegator.findByAnd("ShipmentPackageContent",spcLup);
        GenericValue packageContent=EntityUtil.getFirst(spc);
        String carrier=null;
        if (packageContent != null) {
          GenericValue shipPackage=packageContent.getRelatedOne("ShipmentPackage");
          if (shipPackage != null) {
            List<GenericValue> prs=shipPackage.getRelated("ShipmentPackageRouteSeg");
            GenericValue packageRoute=EntityUtil.getFirst(prs);
            if (packageRoute != null) {
              List<GenericValue> srs=packageRoute.getRelated("ShipmentRouteSegment");
              GenericValue route=EntityUtil.getFirst(srs);
              String track=packageRoute.getString("trackingCode");
              if (route != null) {
                carrier=route.getString("carrierPartyId");
                if (UtilValidate.isEmpty(track)) {
                  track=route.getString("trackingIdNumber");
                }
                try {
                  ShipItemsRequest isr=new ShipItemsRequest(mInfo,externalId);
                  isr.addItemShippingInformation(productId,carrier,track);
                  Debug.logInfo("Sending item shipped notification: " + productId + " / "+ carrier+ " / "+ track,module);
                  Debug.logInfo("Using merchantInfo : " + mInfo.getMerchantId() + " #"+ externalId,module);
                  isr.send();
                }
 catch (                CheckoutException e) {
                  Debug.logError(e,module);
                  throw new GeneralException(e);
                }
              }
            }
          }
        }
      }
    }
  }
}
