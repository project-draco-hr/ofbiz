{
  HttpServletResponse response=(HttpServletResponse)context.get("response");
  HttpServletRequest request=(HttpServletRequest)context.get("request");
  ModelForm modelForm=form.getModelForm(context);
  modelForm.runFormActions(context);
  modelForm.preparePager(context);
  String targetService=modelForm.getPaginateTarget(context);
  if (targetService == null) {
    targetService="${targetService}";
  }
  int paginatorNumber=WidgetWorker.getPaginatorNumber(context);
  String viewIndexParam=modelForm.getMultiPaginateIndexField(context);
  String viewSizeParam=modelForm.getMultiPaginateSizeField(context);
  int viewIndex=modelForm.getViewIndex(context);
  int viewSize=modelForm.getViewSize(context);
  int listSize=modelForm.getListSize(context);
  int highIndex=modelForm.getHighIndex(context);
  int actualPageSize=modelForm.getActualPageSize(context);
  if (actualPageSize >= listSize && listSize >= 0)   return;
  Map<String,String> uiLabelMap=UtilGenerics.cast(context.get("uiLabelMap"));
  String ofLabel="";
  if (uiLabelMap == null) {
    Debug.logWarning("Could not find uiLabelMap in context",module);
  }
 else {
    ofLabel=uiLabelMap.get("CommonOf");
    ofLabel=ofLabel.toLowerCase();
  }
  if (viewIndexParam.equals("viewIndex" + "_" + paginatorNumber))   viewIndexParam="VIEW_INDEX" + "_" + paginatorNumber;
  if (viewSizeParam.equals("viewSize" + "_" + paginatorNumber))   viewSizeParam="VIEW_SIZE" + "_" + paginatorNumber;
  ServletContext ctx=(ServletContext)request.getAttribute("servletContext");
  RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");
  Map<String,Object> inputFields=UtilGenerics.toMap(context.get("requestParameters"));
  if (modelForm.getType().equals("multi")) {
    inputFields=UtilHttp.removeMultiFormParameters(inputFields);
  }
  String queryString=UtilHttp.urlEncodeArgs(inputFields);
  queryString=UtilHttp.stripViewParamsFromQueryString(queryString,"" + paginatorNumber);
  HashSet<String> paramNames=new HashSet<String>();
  paramNames.add(viewIndexParam);
  paramNames.add(viewSizeParam);
  queryString=UtilHttp.stripNamedParamsFromQueryString(queryString,paramNames);
  String anchor="";
  String paginateAnchor=modelForm.getPaginateTargetAnchor();
  if (paginateAnchor != null)   anchor="#" + paginateAnchor;
  String prepLinkText="";
  prepLinkText=targetService;
  if (prepLinkText.indexOf("?") < 0) {
    prepLinkText+="?";
  }
 else   if (!prepLinkText.endsWith("?")) {
    prepLinkText+="&amp;";
  }
  if (!UtilValidate.isEmpty(queryString) && !queryString.equals("null")) {
    prepLinkText+=queryString + "&amp;";
  }
  prepLinkText+=viewSizeParam + "=" + viewSize+ "&amp;"+ viewIndexParam+ "=";
  String linkText;
  String lastLinkUrl="";
  if (highIndex < listSize) {
    int lastIndex=UtilMisc.getViewLastIndex(listSize,viewSize);
    linkText=prepLinkText + lastIndex + anchor;
    lastLinkUrl=rh.makeLink(request,response,linkText);
  }
  String nextLinkUrl="";
  if (highIndex < listSize) {
    linkText=prepLinkText + (viewIndex + 1) + anchor;
    nextLinkUrl=rh.makeLink(request,response,linkText);
  }
  String previousLinkUrl="";
  if (viewIndex > 0) {
    linkText=prepLinkText + (viewIndex - 1) + anchor;
    previousLinkUrl=rh.makeLink(request,response,linkText);
  }
  String firstLinkUrl="";
  if (viewIndex > 0) {
    linkText=prepLinkText + 0 + anchor;
    firstLinkUrl=rh.makeLink(request,response,linkText);
  }
  Map<String,Object> parameters=new HashMap<String,Object>();
  parameters.put("lowIndex",modelForm.getLowIndex(context));
  parameters.put("actualPageSize",actualPageSize);
  parameters.put("ofLabel",ofLabel);
  parameters.put("listSize",listSize);
  parameters.put("paginateLastStyle",modelForm.getPaginateLastStyle());
  parameters.put("lastLinkUrl",lastLinkUrl);
  parameters.put("paginateLastLabel",modelForm.getPaginateLastLabel(context));
  parameters.put("paginateNextStyle",modelForm.getPaginateNextStyle());
  parameters.put("nextLinkUrl",nextLinkUrl);
  parameters.put("paginateNextLabel",modelForm.getPaginateNextLabel(context));
  parameters.put("paginatePreviousStyle",modelForm.getPaginatePreviousStyle());
  parameters.put("paginatePreviousLabel",modelForm.getPaginatePreviousLabel(context));
  parameters.put("previousLinkUrl",previousLinkUrl);
  parameters.put("paginateFirstStyle",modelForm.getPaginateFirstStyle());
  parameters.put("paginateFirstLabel",modelForm.getPaginateFirstLabel(context));
  parameters.put("firstLinkUrl",firstLinkUrl);
  executeMacro(writer,"renderScreenletPaginateMenu",parameters);
}
