{
  try {
    IReportEngine engine=org.ofbiz.birt.BirtFactory.getReportEngine();
    IReportRunnable design=null;
    if (page.startsWith("component://")) {
      InputStream reportInputStream=BirtFactory.getReportInputStreamFromLocation(page);
      design=engine.openReportDesign(reportInputStream);
    }
 else {
      design=engine.openReportDesign(servletContext.getRealPath(page));
    }
    Map<String,Object> appContext=UtilGenerics.cast(engine.getConfig().getAppContext());
    BirtWorker.setWebContextObjects(appContext,request,response);
    Map<String,Object> context=FastMap.newInstance();
    Map<String,Object> parameters=UtilGenerics.cast(request.getAttribute(BirtWorker.BIRT_PARAMETERS));
    if (parameters != null) {
      context.put(BirtWorker.BIRT_PARAMETERS,parameters);
    }
 else {
      context.put(BirtWorker.BIRT_PARAMETERS,UtilHttp.getParameterMap(request));
    }
    Locale locale=(Locale)request.getAttribute(BirtWorker.BIRT_LOCALE);
    if (locale == null) {
      locale=UtilHttp.getLocale(request);
    }
    String outputFileName=(String)request.getAttribute(BirtWorker.BIRT_OUTPUT_FILE_NAME);
    if (UtilValidate.isNotEmpty(outputFileName)) {
      response.setHeader("Content-Disposition","attachment; filename=" + outputFileName);
    }
    String overrideContentType=(String)request.getAttribute(BirtWorker.BIRT_CONTENT_TYPE);
    if (UtilValidate.isNotEmpty(overrideContentType)) {
      contentType=overrideContentType;
    }
    context.put(BirtWorker.BIRT_LOCALE,locale);
    Delegator delegator=(Delegator)request.getAttribute("delegator");
    String birtImageDirectory=EntityUtilProperties.getPropertyValue("birt","birt.html.image.directory",delegator);
    context.put(BirtWorker.BIRT_IMAGE_DIRECTORY,birtImageDirectory);
    BirtWorker.exportReport(design,context,contentType,response.getOutputStream());
  }
 catch (  BirtException e) {
    throw new ViewHandlerException("Birt Error create engine: " + e.toString(),e);
  }
catch (  IOException e) {
    throw new ViewHandlerException("Error in the response writer/output stream: " + e.toString(),e);
  }
catch (  SQLException e) {
    throw new ViewHandlerException("get connection error: " + e.toString(),e);
  }
catch (  GenericEntityException e) {
    throw new ViewHandlerException("generic entity error: " + e.toString(),e);
  }
catch (  GeneralException e) {
    throw new ViewHandlerException("general error: " + e.toString(),e);
  }
catch (  SAXException se) {
    String errMsg="Error SAX rendering " + page + " view handler: "+ se.toString();
    Debug.logError(se,errMsg,module);
    throw new ViewHandlerException(errMsg,se);
  }
catch (  ParserConfigurationException pe) {
    String errMsg="Error parser rendering " + page + " view handler: "+ pe.toString();
    Debug.logError(pe,errMsg,module);
    throw new ViewHandlerException(errMsg,pe);
  }
}
