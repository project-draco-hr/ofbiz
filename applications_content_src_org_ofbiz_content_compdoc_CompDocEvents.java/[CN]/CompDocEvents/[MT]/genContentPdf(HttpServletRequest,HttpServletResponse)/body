{
  String responseStr="success";
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  ServletContext servletContext=session.getServletContext();
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
  String contentId=(String)paramMap.get("contentId");
  Locale locale=UtilHttp.getLocale(request);
  String rootDir=null;
  String webSiteId=WebSiteWorker.getWebSiteId(request);
  String https=null;
  if (UtilValidate.isEmpty(rootDir)) {
    rootDir=servletContext.getRealPath("/");
  }
  if (UtilValidate.isEmpty(https)) {
    https=(String)servletContext.getAttribute("https");
  }
  Map<String,Object> mapIn=new HashMap<String,Object>();
  mapIn.put("contentId",contentId);
  mapIn.put("locale",locale);
  mapIn.put("rootDir",rootDir);
  mapIn.put("webSiteId",webSiteId);
  mapIn.put("https",https);
  mapIn.put("userLogin",userLogin);
  Map<String,Object> results=null;
  try {
    results=dispatcher.runSync("renderContentPdf",mapIn);
  }
 catch (  ServiceAuthException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  GenericServiceException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
catch (  Exception e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
  if (ServiceUtil.isError(results)) {
    request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(results));
    return "error";
  }
  ByteBuffer outByteBuffer=(ByteBuffer)results.get("outByteBuffer");
  String contentType="application/pdf; charset=ISO-8859-1";
  ByteArrayInputStream bais=new ByteArrayInputStream(outByteBuffer.array());
  try {
    UtilHttp.streamContentToBrowser(response,bais,outByteBuffer.limit(),contentType);
  }
 catch (  IOException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.toString());
    return "error";
  }
  return responseStr;
}
