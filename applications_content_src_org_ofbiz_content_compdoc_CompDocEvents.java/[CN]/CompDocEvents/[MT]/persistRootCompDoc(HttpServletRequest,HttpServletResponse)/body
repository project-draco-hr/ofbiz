{
  Map paramMap=UtilHttp.getParameterMap(request);
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Locale locale=UtilHttp.getLocale(request);
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  String contentId=(String)paramMap.get("contentId");
  boolean contentExists=true;
  if (UtilValidate.isEmpty(contentId)) {
    contentExists=false;
  }
 else {
    try {
      GenericValue val=delegator.findByPrimaryKey("Content",UtilMisc.toMap("contentId",contentId));
      if (val == null)       contentExists=false;
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error running serviceName persistContentAndAssoc",module);
      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.error_modelservice_for_srv_name",locale);
      request.setAttribute("_ERROR_MESSAGE_","<li>" + errMsg + " ["+ "persistContentAndAssoc"+ "]: "+ e.toString());
      return "error";
    }
  }
  ModelService modelService=null;
  try {
    modelService=dispatcher.getDispatchContext().getModelService("persistContentAndAssoc");
  }
 catch (  GenericServiceException e) {
    String errMsg="Error getting model service for serviceName, 'persistContentAndAssoc'. " + e.toString();
    Debug.logError(errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_","<li>" + errMsg + "</li>");
    return "error";
  }
  Map persistMap=modelService.makeValid(paramMap,ModelService.IN_PARAM);
  persistMap.put("userLogin",userLogin);
  try {
    Map persistResult=dispatcher.runSync("persistContentAndAssoc",persistMap);
    contentId=(String)persistResult.get("contentId");
    Set keySet=persistResult.keySet();
    Iterator iter=keySet.iterator();
    while (iter.hasNext()) {
      Object obj=iter.next();
      Object val=persistResult.get(obj);
      request.setAttribute(obj.toString(),val);
    }
    Map contentRevisionMap=FastMap.newInstance();
    contentRevisionMap.put("itemContentId",contentId);
    contentRevisionMap.put("contentId",contentId);
    contentRevisionMap.put("userLogin",userLogin);
    Map result=dispatcher.runSync("persistContentRevisionAndItem",contentRevisionMap);
    keySet=result.keySet();
    iter=keySet.iterator();
    while (iter.hasNext()) {
      Object obj=iter.next();
      Object val=persistResult.get(obj);
      request.setAttribute(obj.toString(),val);
    }
    String errorMsg=ServiceUtil.getErrorMessage(result);
    if (UtilValidate.isNotEmpty(errorMsg)) {
      String errMsg="Error running serviceName, 'persistContentRevisionAndItem'. " + errorMsg;
      Debug.logError(errMsg,module);
      request.setAttribute("_ERROR_MESSAGE_","<li>" + errMsg + "</li>");
      return "error";
    }
  }
 catch (  GenericServiceException e) {
    String errMsg="Error running serviceName, 'persistContentAndAssoc'. " + e.toString();
    Debug.logError(errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_","<li>" + errMsg + "</li>");
    return "error";
  }
  return "success";
}
