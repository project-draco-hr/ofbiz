{
  String nanoTime="" + System.nanoTime();
  delegator.removeByAnd("TestingCrypto",UtilMisc.toMap("testingCryptoTypeId","LOOKUP"));
  delegator.create("TestingCrypto",UtilMisc.toMap("testingCryptoId","lookup-null","testingCryptoTypeId","LOOKUP"));
  delegator.create("TestingCrypto",UtilMisc.toMap("testingCryptoId","lookup-value","testingCryptoTypeId","LOOKUP","encryptedValue",nanoTime,"saltedEncryptedValue",nanoTime));
  assertEquals(1,(EntityQuery.use(delegator).from("TestingCrypto").where("testingCryptoTypeId","LOOKUP","encryptedValue",null).queryList()).size());
  assertEquals(1,(EntityQuery.use(delegator).from("TestingCrypto").where("testingCryptoTypeId","LOOKUP","saltedEncryptedValue",null).queryList()).size());
  assertEquals(1,(EntityQuery.use(delegator).from("TestingCrypto").where("testingCryptoTypeId","LOOKUP","encryptedValue",nanoTime).queryList()).size());
  assertEquals(0,(EntityQuery.use(delegator).from("TestingCrypto").where("testingCryptoTypeId","LOOKUP","saltedEncryptedValue",nanoTime).queryList()).size());
  assertEquals(1,EntityQuery.use(delegator).from("TestingCrypto").where("testingCryptoTypeId","LOOKUP","encryptedValue",nanoTime).queryList().size());
}
