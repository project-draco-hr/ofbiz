{
  this.delegatorName=delegatorName;
  this.modelReader=ModelReader.getModelReader(delegatorName);
  this.modelGroupReader=ModelGroupReader.getModelGroupReader(delegatorName);
  cache=new Cache(delegatorName);
  List<String> warningList=FastList.newInstance();
  Debug.logImportant("Doing entity definition check...",module);
  ModelEntityChecker.checkEntities(this,warningList);
  if (warningList.size() > 0) {
    Debug.logWarning("=-=-=-=-= Found " + warningList.size() + " warnings when checking the entity definitions:",module);
    for (    String warning : warningList) {
      Debug.logWarning(warning,module);
    }
  }
  Iterator<String> groups=UtilMisc.toIterator(getModelGroupReader().getGroupNames());
  while (groups != null && groups.hasNext()) {
    String groupName=groups.next();
    String helperName=this.getGroupHelperName(groupName);
    if (Debug.infoOn())     Debug.logInfo("Delegator \"" + delegatorName + "\" initializing helper \""+ helperName+ "\" for entity group \""+ groupName+ "\".",module);
    TreeSet<String> helpersDone=new TreeSet<String>();
    if (helperName != null && helperName.length() > 0) {
      if (helpersDone.contains(helperName)) {
        if (Debug.infoOn())         Debug.logInfo("Helper \"" + helperName + "\" already initialized, not re-initializing.",module);
        continue;
      }
      helpersDone.add(helperName);
      ModelFieldTypeReader.getModelFieldTypeReader(helperName);
      GenericHelper helper=GenericHelperFactory.getHelper(helperName);
      DatasourceInfo datasourceInfo=EntityConfigUtil.getDatasourceInfo(helperName);
      if (datasourceInfo.checkOnStart) {
        if (Debug.infoOn())         Debug.logInfo("Doing database check as requested in entityengine.xml with addMissing=" + datasourceInfo.addMissingOnStart,module);
        try {
          helper.checkDataSource(this.getModelEntityMapByGroup(groupName),null,datasourceInfo.addMissingOnStart);
        }
 catch (        GenericEntityException e) {
          Debug.logWarning(e,e.getMessage(),module);
        }
      }
    }
  }
  this.delegatorCache.put(delegatorName,this);
  this.crypto=new EntityCrypto(this);
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  if (getDelegatorInfo().useDistributedCacheClear) {
    String distributedCacheClearClassName=getDelegatorInfo().distributedCacheClearClassName;
    try {
      Class dccClass=loader.loadClass(distributedCacheClearClassName);
      this.distributedCacheClear=(DistributedCacheClear)dccClass.newInstance();
      this.distributedCacheClear.setDelegator(this,getDelegatorInfo().distributedCacheClearUserLoginId);
    }
 catch (    ClassNotFoundException e) {
      Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " was not found, distributed cache clearing will be disabled",module);
    }
catch (    InstantiationException e) {
      Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " could not be instantiated, distributed cache clearing will be disabled",module);
    }
catch (    IllegalAccessException e) {
      Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " could not be accessed (illegal), distributed cache clearing will be disabled",module);
    }
catch (    ClassCastException e) {
      Debug.logWarning(e,"DistributedCacheClear class with name " + distributedCacheClearClassName + " does not implement the DistributedCacheClear interface, distributed cache clearing will be disabled",module);
    }
  }
 else {
    Debug.logInfo("Distributed Cache Clear System disabled for delegator [" + delegatorName + "]",module);
  }
  if (getDelegatorInfo().useEntityEca) {
    String entityEcaHandlerClassName=getDelegatorInfo().entityEcaHandlerClassName;
    try {
      Class eecahClass=loader.loadClass(entityEcaHandlerClassName);
      this.entityEcaHandler=(EntityEcaHandler)eecahClass.newInstance();
      this.entityEcaHandler.setDelegator(this);
    }
 catch (    ClassNotFoundException e) {
      Debug.logWarning(e,"EntityEcaHandler class with name " + entityEcaHandlerClassName + " was not found, Entity ECA Rules will be disabled",module);
    }
catch (    InstantiationException e) {
      Debug.logWarning(e,"EntityEcaHandler class with name " + entityEcaHandlerClassName + " could not be instantiated, Entity ECA Rules will be disabled",module);
    }
catch (    IllegalAccessException e) {
      Debug.logWarning(e,"EntityEcaHandler class with name " + entityEcaHandlerClassName + " could not be accessed (illegal), Entity ECA Rules will be disabled",module);
    }
catch (    ClassCastException e) {
      Debug.logWarning(e,"EntityEcaHandler class with name " + entityEcaHandlerClassName + " does not implement the EntityEcaHandler interface, Entity ECA Rules will be disabled",module);
    }
  }
 else {
    Debug.logInfo("Entity ECA Handler disabled for delegator [" + delegatorName + "]",module);
  }
}
