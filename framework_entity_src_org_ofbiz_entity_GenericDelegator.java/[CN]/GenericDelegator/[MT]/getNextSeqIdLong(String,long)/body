{
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    SequenceUtil sequencer=this.AtomicRefSequencer.get();
    if (sequencer == null) {
      try {
        ModelEntity seqEntity=this.getModelEntity("SequenceValueItem");
        sequencer=new SequenceUtil(this,this.getEntityHelperInfo("SequenceValueItem"),seqEntity,"seqName","seqId");
        if (!AtomicRefSequencer.compareAndSet(null,sequencer)) {
          sequencer=this.AtomicRefSequencer.get();
        }
      }
 catch (      Exception e) {
        throw new IllegalStateException("Exception thrown while creating AtomicReference<SequenceUtil>: " + e);
      }
    }
    ModelEntity seqModelEntity=this.getModelEntity(seqName);
    Long newSeqId=sequencer == null ? null : sequencer.getNextSeqId(seqName,staggerMax,seqModelEntity);
    TransactionUtil.commit(beganTransaction);
    return newSeqId;
  }
 catch (  Exception e) {
    String errMsg="Failure in getNextSeqIdLong operation for seqName [" + seqName + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    try {
      TransactionUtil.rollback(beganTransaction,errMsg,e);
    }
 catch (    GenericTransactionException e1) {
      Debug.logError(e1,"Exception thrown while rolling back transaction: ",module);
    }
    throw new GeneralRuntimeException(errMsg,e);
  }
}
