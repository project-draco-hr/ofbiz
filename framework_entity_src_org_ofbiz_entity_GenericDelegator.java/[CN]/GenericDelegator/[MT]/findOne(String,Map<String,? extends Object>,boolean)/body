{
  GenericPK primaryKey=this.makePK(entityName,fields);
  EntityEcaRuleRunner<?> ecaRunner=this.getEcaRuleRunner(entityName);
  if (useCache) {
    ecaRunner.evalRules(EntityEcaHandler.EV_CACHE_CHECK,EntityEcaHandler.OP_FIND,primaryKey,false);
    GenericValue value=this.getFromPrimaryKeyCache(primaryKey);
    if (value != null) {
      return value;
    }
  }
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_VALIDATE,EntityEcaHandler.OP_FIND,primaryKey,false);
    GenericHelper helper=getEntityHelper(entityName);
    GenericValue value=null;
    if (!primaryKey.isPrimaryKey()) {
      throw new GenericModelException("[GenericDelegator.findOne] Passed primary key is not a valid primary key: " + primaryKey);
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RUN,EntityEcaHandler.OP_FIND,primaryKey,false);
    try {
      value=helper.findByPrimaryKey(primaryKey);
    }
 catch (    GenericEntityNotFoundException e) {
    }
    if (value != null) {
      value.setDelegator(this);
      this.decryptFields(value);
    }
    if (useCache) {
      if (value != null) {
        ecaRunner.evalRules(EntityEcaHandler.EV_CACHE_PUT,EntityEcaHandler.OP_FIND,value,false);
        this.putInPrimaryKeyCache(primaryKey,value);
      }
 else {
        this.putInPrimaryKeyCache(primaryKey,GenericValue.NULL_VALUE);
      }
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RETURN,EntityEcaHandler.OP_FIND,(value == null ? primaryKey : value),false);
    return value;
  }
 catch (  GenericEntityException e) {
    String errMsg="Failure in findOne operation for entity [" + entityName + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    try {
      TransactionUtil.rollback(beganTransaction,errMsg,e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"[GenericDelegator] Could not rollback transaction: " + e2.toString(),module);
    }
    throw e;
  }
 finally {
    TransactionUtil.commit(beganTransaction);
  }
}
