{
  @Deprecated boolean doCacheClear=true;
  if (value == null) {
    throw new GenericEntityException("Cannot create a null value");
  }
  GenericHelper helper=getEntityHelper(value.getEntityName());
  value.setDelegator(this);
  value.setNextSeqId();
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    EntityEcaRuleRunner<?> ecaRunner=this.getEcaRuleRunner(value.getEntityName());
    ecaRunner.evalRules(EntityEcaHandler.EV_VALIDATE,EntityEcaHandler.OP_CREATE,value,false);
    ecaRunner.evalRules(EntityEcaHandler.EV_RUN,EntityEcaHandler.OP_CREATE,value,false);
    value.setDelegator(this);
    if (value != null && value.getModelEntity().getHasFieldWithAuditLog()) {
      createEntityAuditLogAll(value,false,false);
    }
    try {
      value=helper.create(value);
      if (testMode) {
        storeForTestRollback(new TestOperation(OperationType.INSERT,value));
      }
    }
 catch (    GenericEntityException e) {
      GenericValue existingValue=null;
      try {
        existingValue=helper.findByPrimaryKey(value.getPrimaryKey());
      }
 catch (      GenericEntityException e1) {
      }
      if (existingValue == null) {
        throw e;
      }
 else {
        if (Debug.infoOn()) {
          Debug.logInfo("Error creating entity record with a sequenced value [" + value.getPrimaryKey() + "], trying again about to refresh bank for entity ["+ value.getEntityName()+ "]",module);
        }
        this.AtomicRefSequencer.get().forceBankRefresh(value.getEntityName(),1);
        value.setNextSeqId();
        value=helper.create(value);
        if (Debug.infoOn()) {
          Debug.logInfo("Successfully created new entity record on retry with a sequenced value [" + value.getPrimaryKey() + "], after getting refreshed bank for entity ["+ value.getEntityName()+ "]",module);
        }
        if (testMode) {
          storeForTestRollback(new TestOperation(OperationType.INSERT,value));
        }
      }
    }
    if (value != null) {
      value.setDelegator(this);
      if (value.lockEnabled()) {
        refresh(value,doCacheClear);
      }
 else {
        if (doCacheClear) {
          ecaRunner.evalRules(EntityEcaHandler.EV_CACHE_CLEAR,EntityEcaHandler.OP_CREATE,value,false);
          this.clearCacheLine(value);
        }
      }
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RETURN,EntityEcaHandler.OP_CREATE,value,false);
    TransactionUtil.commit(beganTransaction);
    return value;
  }
 catch (  Exception e) {
    String errMsg="Failure in createSetNextSeqId operation for entity [" + value.getEntityName() + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    TransactionUtil.rollback(beganTransaction,errMsg,e);
    throw new GenericEntityException(e);
  }
}
