{
  boolean doCacheClear=true;
  GenericHelper helper=getEntityHelper(value.getEntityName());
  value.setDelegator(this);
  value.setNextSeqId();
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    EntityEcaRuleRunner ecaRunner=this.getEcaRuleRunner(value.getEntityName());
    ecaRunner.evalRules(EntityEcaHandler.EV_VALIDATE,EntityEcaHandler.OP_CREATE,value,false);
    if (value == null) {
      throw new GenericEntityException("Cannot create a null value");
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RUN,EntityEcaHandler.OP_CREATE,value,false);
    value.setDelegator(this);
    this.encryptFields(value);
    try {
      value=helper.create(value);
    }
 catch (    GenericEntityException e) {
      GenericValue existingValue=helper.findByPrimaryKey(value.getPrimaryKey());
      if (existingValue == null) {
        throw e;
      }
 else {
        Debug.logInfo("Error creating entity record with a sequenced value [" + value.getPrimaryKey() + "], trying again about to refresh bank for entity ["+ value.getEntityName()+ "]",module);
        this.sequencer.forceBankRefresh(value.getEntityName(),1);
        value.setNextSeqId();
        value=helper.create(value);
        Debug.logInfo("Successfully created new entity record on retry with a sequenced value [" + value.getPrimaryKey() + "], after getting refreshed bank for entity ["+ value.getEntityName()+ "]",module);
      }
    }
    if (value != null) {
      value.setDelegator(this);
      if (value.lockEnabled()) {
        refresh(value,doCacheClear);
      }
 else {
        if (doCacheClear) {
          ecaRunner.evalRules(EntityEcaHandler.EV_CACHE_CLEAR,EntityEcaHandler.OP_CREATE,value,false);
          this.clearCacheLine(value);
        }
      }
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RETURN,EntityEcaHandler.OP_CREATE,value,false);
    return value;
  }
 catch (  GenericEntityException e) {
    String errMsg="Failure in create operation for entity [" + value.getEntityName() + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    try {
      TransactionUtil.rollback(beganTransaction,errMsg,e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"[GenericDelegator] Could not rollback transaction: " + e2.toString(),module);
    }
    throw e;
  }
 finally {
    TransactionUtil.commit(beganTransaction);
  }
}
