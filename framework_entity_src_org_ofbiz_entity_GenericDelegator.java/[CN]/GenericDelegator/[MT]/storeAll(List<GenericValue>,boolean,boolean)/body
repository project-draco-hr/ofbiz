{
  if (values == null) {
    return 0;
  }
  int numberChanged=0;
  boolean beganTransaction=false;
  try {
    beganTransaction=TransactionUtil.begin();
    for (    GenericValue value : values) {
      String entityName=value.getEntityName();
      GenericPK primaryKey=value.getPrimaryKey();
      GenericHelper helper=getEntityHelper(entityName);
      if (!primaryKey.isPrimaryKey()) {
        throw new GenericModelException("[GenericDelegator.storeAll] One of the passed primary keys is not a valid primary key: " + primaryKey);
      }
      GenericValue existing=null;
      try {
        existing=helper.findByPrimaryKey(primaryKey);
        this.decryptFields(existing);
      }
 catch (      GenericEntityNotFoundException e) {
        existing=null;
      }
      if (existing == null) {
        if (createDummyFks) {
          value.checkFks(true);
        }
        this.create(value,doCacheClear);
        numberChanged++;
      }
 else {
        ModelEntity modelEntity=value.getModelEntity();
        GenericValue toStore=GenericValue.create(this,modelEntity,(Map<String,? extends Object>)value.getPrimaryKey());
        boolean atLeastOneField=false;
        Iterator<ModelField> nonPksIter=modelEntity.getNopksIterator();
        while (nonPksIter.hasNext()) {
          ModelField modelField=nonPksIter.next();
          String fieldName=modelField.getName();
          if (value.containsKey(fieldName)) {
            Object fieldValue=value.get(fieldName);
            Object oldValue=existing.get(fieldName);
            if ((fieldValue == null && oldValue != null) || (fieldValue != null && !fieldValue.equals(oldValue))) {
              toStore.put(fieldName,fieldValue);
              atLeastOneField=true;
            }
          }
        }
        if (atLeastOneField) {
          if (createDummyFks) {
            value.checkFks(true);
          }
          numberChanged+=this.store(toStore,doCacheClear);
        }
      }
    }
    return numberChanged;
  }
 catch (  GenericEntityException e) {
    String errMsg="Failure in storeAll operation: " + e.toString() + ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    try {
      TransactionUtil.rollback(beganTransaction,errMsg,e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"[GenericDelegator] Could not rollback transaction: " + e2.toString(),module);
    }
    throw e;
  }
 finally {
    TransactionUtil.commit(beganTransaction);
  }
}
