{
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    if (doCacheClear) {
      this.clearCacheLineByCondition(entityName,condition);
    }
    ModelEntity modelEntity=getModelReader().getModelEntity(entityName);
    GenericHelper helper=getEntityHelper(entityName);
    List<GenericValue> updatedEntities=null;
    if (testMode) {
      updatedEntities=this.findList(entityName,condition,null,null,null,false);
    }
    int rowsAffected=helper.storeByCondition(modelEntity,fieldsToSet,condition);
    if (testMode) {
      for (      GenericValue entity : updatedEntities) {
        storeForTestRollback(new TestOperation(OperationType.UPDATE,entity));
      }
    }
    return rowsAffected;
  }
 catch (  GenericEntityException e) {
    String errMsg="Failure in storeByCondition operation for entity [" + entityName + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    try {
      TransactionUtil.rollback(beganTransaction,errMsg,e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"[GenericDelegator] Could not rollback transaction: " + e2.toString(),module);
    }
    throw e;
  }
 finally {
    TransactionUtil.commit(beganTransaction);
  }
}
