{
  boolean beganTransaction=false;
  try {
    if (alwaysUseTransaction) {
      beganTransaction=TransactionUtil.begin();
    }
    if (value == null) {
      throw new GenericEntityException("Cannot create a null value");
    }
    EntityEcaRuleRunner<?> ecaRunner=this.getEcaRuleRunner(value.getEntityName());
    ecaRunner.evalRules(EntityEcaHandler.EV_VALIDATE,EntityEcaHandler.OP_CREATE,value,false);
    GenericHelper helper=getEntityHelper(value.getEntityName());
    ecaRunner.evalRules(EntityEcaHandler.EV_RUN,EntityEcaHandler.OP_CREATE,value,false);
    value.setDelegator(this);
    this.encryptFields(value);
    if (value != null && value.getModelEntity().getHasFieldWithAuditLog()) {
      createEntityAuditLogAll(value,false,false);
    }
    value=helper.create(value);
    if (testMode) {
      storeForTestRollback(new TestOperation(OperationType.INSERT,value));
    }
    if (value != null) {
      value.setDelegator(this);
      if (value.lockEnabled()) {
        refresh(value,doCacheClear);
      }
 else {
        if (doCacheClear) {
          ecaRunner.evalRules(EntityEcaHandler.EV_CACHE_CLEAR,EntityEcaHandler.OP_CREATE,value,false);
          this.clearCacheLine(value);
        }
      }
    }
    ecaRunner.evalRules(EntityEcaHandler.EV_RETURN,EntityEcaHandler.OP_CREATE,value,false);
    return value;
  }
 catch (  GenericEntityException e) {
    String errMsg="Failure in create operation for entity [" + value.getEntityName() + "]: "+ e.toString()+ ". Rolling back transaction.";
    Debug.logError(e,errMsg,module);
    try {
      TransactionUtil.rollback(beganTransaction,errMsg,e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"[GenericDelegator] Could not rollback transaction: " + e2.toString(),module);
    }
    throw e;
  }
 finally {
    TransactionUtil.commit(beganTransaction);
  }
}
