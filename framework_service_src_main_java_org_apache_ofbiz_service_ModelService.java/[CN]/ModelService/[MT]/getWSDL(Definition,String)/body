{
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=null;
  Document document=null;
  try {
    builder=factory.newDocumentBuilder();
    document=builder.newDocument();
  }
 catch (  Exception e) {
    throw new WSDLException("can not create WSDL",module);
  }
  def.setTypes(this.getTypes(document,def));
  Input input=def.createInput();
  Set<String> inParam=this.getInParamNames();
  if (inParam != null) {
    Message inMessage=def.createMessage();
    inMessage.setQName(new QName(TNS,this.name + "Request"));
    inMessage.setUndefined(false);
    Part parametersPart=def.createPart();
    parametersPart.setName("map-Map");
    parametersPart.setTypeName(new QName(TNS,"map-Map"));
    inMessage.addPart(parametersPart);
    Element documentation=document.createElement("wsdl:documentation");
    for (    String paramName : inParam) {
      ModelParam param=this.getParam(paramName);
      if (!param.internal) {
        Part part=param.getWSDLPart(def);
        Element attribute=document.createElement("attribute");
        attribute.setAttribute("name",paramName);
        attribute.setAttribute("type",part.getTypeName().getLocalPart());
        attribute.setAttribute("namespace",part.getTypeName().getNamespaceURI());
        attribute.setAttribute("java-class",param.type);
        attribute.setAttribute("optional",Boolean.toString(param.optional));
        documentation.appendChild(attribute);
      }
    }
    Element usernameAttr=document.createElement("attribute");
    usernameAttr.setAttribute("name","login.username");
    usernameAttr.setAttribute("type","std-String");
    usernameAttr.setAttribute("namespace",TNS);
    usernameAttr.setAttribute("java-class",String.class.getName());
    usernameAttr.setAttribute("optional",Boolean.toString(!this.auth));
    documentation.appendChild(usernameAttr);
    Element passwordAttr=document.createElement("attribute");
    passwordAttr.setAttribute("name","login.password");
    passwordAttr.setAttribute("type","std-String");
    passwordAttr.setAttribute("namespace",TNS);
    passwordAttr.setAttribute("java-class",String.class.getName());
    passwordAttr.setAttribute("optional",Boolean.toString(!this.auth));
    documentation.appendChild(passwordAttr);
    parametersPart.setDocumentationElement(documentation);
    def.addMessage(inMessage);
    input.setMessage(inMessage);
  }
  Output output=def.createOutput();
  Set<String> outParam=this.getOutParamNames();
  if (outParam != null) {
    Message outMessage=def.createMessage();
    outMessage.setQName(new QName(TNS,this.name + "Response"));
    outMessage.setUndefined(false);
    Part resultsPart=def.createPart();
    resultsPart.setName("map-Map");
    resultsPart.setTypeName(new QName(TNS,"map-Map"));
    outMessage.addPart(resultsPart);
    Element documentation=document.createElement("wsdl:documentation");
    for (    String paramName : outParam) {
      ModelParam param=this.getParam(paramName);
      if (!param.internal) {
        Part part=param.getWSDLPart(def);
        Element attribute=document.createElement("attribute");
        attribute.setAttribute("name",paramName);
        attribute.setAttribute("type",part.getTypeName().getLocalPart());
        attribute.setAttribute("namespace",part.getTypeName().getNamespaceURI());
        attribute.setAttribute("java-class",param.type);
        attribute.setAttribute("optional",Boolean.toString(param.optional));
        documentation.appendChild(attribute);
      }
    }
    resultsPart.setDocumentationElement(documentation);
    def.addMessage(outMessage);
    output.setMessage(outMessage);
  }
  Operation operation=def.createOperation();
  operation.setName(this.name);
  operation.setUndefined(false);
  operation.setOutput(output);
  operation.setInput(input);
  PortType portType=def.createPortType();
  portType.setQName(new QName(TNS,this.name + "PortType"));
  portType.addOperation(operation);
  portType.setUndefined(false);
  def.addPortType(portType);
  SOAPBinding soapBinding=new SOAPBindingImpl();
  soapBinding.setStyle("rpc");
  soapBinding.setTransportURI("http://schemas.xmlsoap.org/soap/http");
  Binding binding=def.createBinding();
  binding.setQName(new QName(TNS,this.name + "SoapBinding"));
  binding.setPortType(portType);
  binding.setUndefined(false);
  binding.addExtensibilityElement(soapBinding);
  BindingOperation bindingOperation=def.createBindingOperation();
  bindingOperation.setName(operation.getName());
  bindingOperation.setOperation(operation);
  SOAPBody soapBody=new SOAPBodyImpl();
  soapBody.setUse("literal");
  soapBody.setNamespaceURI(TNS);
  soapBody.setEncodingStyles(UtilMisc.toList("http://schemas.xmlsoap.org/soap/encoding/"));
  BindingOutput bindingOutput=def.createBindingOutput();
  bindingOutput.addExtensibilityElement(soapBody);
  bindingOperation.setBindingOutput(bindingOutput);
  BindingInput bindingInput=def.createBindingInput();
  bindingInput.addExtensibilityElement(soapBody);
  bindingOperation.setBindingInput(bindingInput);
  SOAPOperation soapOperation=new SOAPOperationImpl();
  soapOperation.setSoapActionURI(locationURI);
  soapOperation.setStyle("rpc");
  bindingOperation.addExtensibilityElement(soapOperation);
  binding.addBindingOperation(bindingOperation);
  def.addBinding(binding);
  Port port=def.createPort();
  port.setBinding(binding);
  port.setName(this.name + "Port");
  if (locationURI != null) {
    SOAPAddress soapAddress=new SOAPAddressImpl();
    soapAddress.setLocationURI(locationURI);
    port.addExtensibilityElement(soapAddress);
  }
  Service service=def.createService();
  service.setQName(new QName(TNS,this.name));
  service.addPort(port);
  def.addService(service);
}
