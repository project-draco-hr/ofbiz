{
  String sendToPool=poolElement.getAttribute("send-to-pool").intern();
  if (sendToPool.isEmpty()) {
    throw new ServiceConfigException("<thread-pool> element send-to-pool attribute is empty");
  }
  this.sendToPool=sendToPool;
  String purgeJobDays=poolElement.getAttribute("purge-job-days").intern();
  if (purgeJobDays.isEmpty()) {
    this.purgeJobDays=30;
  }
 else {
    try {
      this.purgeJobDays=Integer.parseInt(purgeJobDays);
    }
 catch (    Exception e) {
      throw new ServiceConfigException("<thread-pool> element purge-job-days attribute value is invalid");
    }
  }
  String failedRetryMin=poolElement.getAttribute("failed-retry-min").intern();
  if (failedRetryMin.isEmpty()) {
    this.failedRetryMin=30;
  }
 else {
    try {
      this.failedRetryMin=Integer.parseInt(failedRetryMin);
    }
 catch (    Exception e) {
      throw new ServiceConfigException("<thread-pool> element failed-retry-min attribute value is invalid");
    }
  }
  String ttl=poolElement.getAttribute("ttl").intern();
  if (ttl.isEmpty()) {
    this.ttl=120000;
  }
 else {
    try {
      this.ttl=Integer.parseInt(ttl);
    }
 catch (    Exception e) {
      throw new ServiceConfigException("<thread-pool> element ttl attribute value is invalid");
    }
  }
  String jobs=poolElement.getAttribute("jobs").intern();
  if (ttl.isEmpty()) {
    this.jobs=100;
  }
 else {
    try {
      this.jobs=Integer.parseInt(jobs);
    }
 catch (    Exception e) {
      throw new ServiceConfigException("<thread-pool> element jobs attribute value is invalid");
    }
  }
  String minThreads=poolElement.getAttribute("min-threads").intern();
  if (minThreads.isEmpty()) {
    this.minThreads=1;
  }
 else {
    try {
      this.minThreads=Integer.parseInt(minThreads);
    }
 catch (    Exception e) {
      throw new ServiceConfigException("<thread-pool> element min-threads attribute value is invalid");
    }
  }
  String maxThreads=poolElement.getAttribute("max-threads").intern();
  if (maxThreads.isEmpty()) {
    this.maxThreads=5;
  }
 else {
    try {
      this.maxThreads=Integer.parseInt(maxThreads);
    }
 catch (    Exception e) {
      throw new ServiceConfigException("<thread-pool> element max-threads attribute value is invalid");
    }
  }
  this.pollEnabled=!"false".equals(poolElement.getAttribute("poll-enabled"));
  String pollDbMillis=poolElement.getAttribute("poll-db-millis").intern();
  if (pollDbMillis.isEmpty()) {
    this.pollDbMillis=30000;
  }
 else {
    try {
      this.pollDbMillis=Integer.parseInt(pollDbMillis);
    }
 catch (    Exception e) {
      throw new ServiceConfigException("<thread-pool> element poll-db-millis attribute value is invalid");
    }
  }
  List<? extends Element> runFromPoolElementList=UtilXml.childElementList(poolElement,"run-from-pool");
  if (runFromPoolElementList.isEmpty()) {
    this.runFromPools=Collections.emptyList();
  }
 else {
    List<RunFromPool> runFromPools=new ArrayList<RunFromPool>(runFromPoolElementList.size());
    for (    Element runFromPoolElement : runFromPoolElementList) {
      runFromPools.add(new RunFromPool(runFromPoolElement));
    }
    this.runFromPools=Collections.unmodifiableList(runFromPools);
  }
}
