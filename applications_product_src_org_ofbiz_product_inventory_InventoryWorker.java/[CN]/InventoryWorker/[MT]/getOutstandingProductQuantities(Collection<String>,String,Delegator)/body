{
  Set<String> fieldsToSelect=UtilMisc.toSet("productId","quantityOpen");
  List<EntityCondition> condList=UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("orderTypeId",EntityOperator.EQUALS,orderTypeId),EntityCondition.makeCondition("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_COMPLETED"),EntityCondition.makeCondition("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_REJECTED"),EntityCondition.makeCondition("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_CANCELLED"));
  if (productIds.size() > 0) {
    condList.add(EntityCondition.makeCondition("productId",EntityOperator.IN,productIds));
  }
  condList.add(EntityCondition.makeCondition("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_COMPLETED"));
  condList.add(EntityCondition.makeCondition("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_REJECTED"));
  condList.add(EntityCondition.makeCondition("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_CANCELLED"));
  EntityConditionList<EntityCondition> conditions=EntityCondition.makeCondition(condList,EntityOperator.AND);
  Map<String,BigDecimal> results=FastMap.newInstance();
  try {
    List<GenericValue> orderedProducts=EntityQuery.use(delegator).select(fieldsToSelect).from("OrderItemQuantityReportGroupByProduct").where(conditions).queryList();
    for (    GenericValue value : orderedProducts) {
      results.put(value.getString("productId"),value.getBigDecimal("quantityOpen"));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  return results;
}
