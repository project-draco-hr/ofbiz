{
  try {
    List purchaseOrderConditions=UtilMisc.toList(EntityCondition.makeCondition("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_COMPLETED"),EntityCondition.makeCondition("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_CANCELLED"),EntityCondition.makeCondition("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_REJECTED"),EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_COMPLETED"),EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_CANCELLED"),EntityCondition.makeCondition("itemStatusId",EntityOperator.NOT_EQUAL,"ITEM_REJECTED"));
    purchaseOrderConditions.add(EntityCondition.makeCondition("orderTypeId",EntityOperator.EQUALS,"PURCHASE_ORDER"));
    purchaseOrderConditions.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));
    List purchaseOrders=delegator.findList("OrderHeaderAndItems",EntityCondition.makeCondition(purchaseOrderConditions,EntityOperator.AND),null,UtilMisc.toList("estimatedDeliveryDate DESC","orderDate"),null,false);
    return purchaseOrders;
  }
 catch (  GenericEntityException ex) {
    Debug.logError("Unable to find outstanding purchase orders for product [" + productId + "] due to "+ ex.getMessage()+ " - returning null",module);
    return null;
  }
}
