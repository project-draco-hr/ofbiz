{
  List fieldsToSelect=UtilMisc.toList("productId","quantity");
  List condList=UtilMisc.toList(new EntityExpr("orderTypeId",EntityOperator.EQUALS,orderTypeId),new EntityExpr("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_COMPLETED"),new EntityExpr("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_REJECTED"),new EntityExpr("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_CANCELLED"));
  if (productIds.size() > 0) {
    condList.add(new EntityExpr("productId",EntityOperator.IN,productIds));
  }
  condList.add(new EntityExpr("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_COMPLETED"));
  condList.add(new EntityExpr("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_REJECTED"));
  condList.add(new EntityExpr("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_CANCELLED"));
  EntityConditionList conditions=new EntityConditionList(condList,EntityOperator.AND);
  Map results=FastMap.newInstance();
  try {
    List orderedProducts=delegator.findByCondition("OrderReportGroupByProduct",conditions,fieldsToSelect,null);
    Map orderedProductsMap=FastMap.newInstance();
    for (Iterator iter=orderedProducts.iterator(); iter.hasNext(); ) {
      GenericValue value=(GenericValue)iter.next();
      orderedProductsMap.put(value.getString("productId"),value.getDouble("quantity"));
    }
    List issuedProducts=delegator.findByCondition("OrderItemIssuanceGroupByProduct",conditions,fieldsToSelect,null);
    Map issuedProductsMap=FastMap.newInstance();
    for (Iterator iter=issuedProducts.iterator(); iter.hasNext(); ) {
      GenericValue value=(GenericValue)iter.next();
      issuedProductsMap.put(value.getString("productId"),value.getDouble("quantity"));
    }
    for (Iterator iter=orderedProductsMap.keySet().iterator(); iter.hasNext(); ) {
      String productId=(String)iter.next();
      Double quantityOrdered=(Double)orderedProductsMap.get(productId);
      Double quantityIssued=(Double)issuedProductsMap.get(productId);
      double quantity=0;
      if (quantityOrdered != null)       quantity+=quantityOrdered.doubleValue();
      if (quantityIssued != null)       quantity-=quantityIssued.doubleValue();
      results.put(productId,new Double(quantity));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  return results;
}
