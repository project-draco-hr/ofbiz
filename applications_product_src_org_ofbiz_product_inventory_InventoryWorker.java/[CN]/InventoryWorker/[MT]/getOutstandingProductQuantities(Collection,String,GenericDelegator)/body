{
  Set fieldsToSelect=UtilMisc.toSet("productId","quantityOpen");
  List condList=UtilMisc.toList(new EntityExpr("orderTypeId",EntityOperator.EQUALS,orderTypeId),new EntityExpr("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_COMPLETED"),new EntityExpr("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_REJECTED"),new EntityExpr("orderStatusId",EntityOperator.NOT_EQUAL,"ORDER_CANCELLED"));
  if (productIds.size() > 0) {
    condList.add(new EntityExpr("productId",EntityOperator.IN,productIds));
  }
  condList.add(new EntityExpr("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_COMPLETED"));
  condList.add(new EntityExpr("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_REJECTED"));
  condList.add(new EntityExpr("orderItemStatusId",EntityOperator.NOT_EQUAL,"ITEM_CANCELLED"));
  EntityConditionList conditions=new EntityConditionList(condList,EntityOperator.AND);
  Map results=FastMap.newInstance();
  try {
    List orderedProducts=delegator.findList("OrderItemQuantityReportGroupByProduct",conditions,fieldsToSelect,null,null,false);
    for (Iterator iter=orderedProducts.iterator(); iter.hasNext(); ) {
      GenericValue value=(GenericValue)iter.next();
      results.put(value.getString("productId"),value.getDouble("quantityOpen"));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
  }
  return results;
}
