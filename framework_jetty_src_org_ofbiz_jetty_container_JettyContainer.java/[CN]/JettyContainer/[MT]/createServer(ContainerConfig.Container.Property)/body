{
  Server server=new Server();
  server.setHandler(new HandlerCollection());
  if (UtilValidate.isNotEmpty(serverConfig.getProperty("send-server-version"))) {
    String sendServerVersionPropertyValue=serverConfig.getProperty("send-server-version").value;
    try {
      server.setSendServerVersion(Boolean.parseBoolean(sendServerVersionPropertyValue));
    }
 catch (    NumberFormatException e) {
      Debug.logError(e,"invalid value for send-server-version: " + sendServerVersionPropertyValue,module);
    }
  }
  server.setThreadPool(createThreadPool(serverConfig));
  for (  ContainerConfig.Container.Property connectorConfig : serverConfig.getPropertiesWithValue("connector")) {
    Connector connector=null;
    String connectorType=connectorConfig.getProperty("type").value;
    if ("http".equals(connectorType)) {
      connector=new SocketConnector();
    }
 else     if ("https".equals(connectorType)) {
      connector=new SslSocketConnector();
    }
 else     if ("nio-http".equals(connectorType)) {
      connector=new SelectChannelConnector();
    }
 else     if ("nio-https".equals(connectorType)) {
      connector=new SslSelectChannelConnector();
    }
 else     if ("ajp13".equals(connectorType)) {
      connector=new Ajp13SocketConnector();
    }
    if (connector != null) {
      setConnectorOptions(connector,connectorConfig);
      server.addConnector(connector);
    }
  }
  for (  ContainerConfig.Container.Property props : serverConfig.getPropertiesWithValue("request-log")) {
    NCSARequestLog requestLog=new NCSARequestLog();
    if (UtilValidate.isNotEmpty(props.getProperty("filename"))) {
      requestLog.setFilename(props.getProperty("filename").value);
    }
    if (UtilValidate.isNotEmpty(props.getProperty("append"))) {
      requestLog.setAppend("true".equalsIgnoreCase(props.getProperty("append").value));
    }
    if (UtilValidate.isNotEmpty(props.getProperty("extended"))) {
      requestLog.setExtended("true".equalsIgnoreCase(props.getProperty("extended").value));
    }
    if (UtilValidate.isNotEmpty(props.getProperty("log-dispatch"))) {
      requestLog.setLogDispatch("true".equalsIgnoreCase(props.getProperty("log-dispatch").value));
    }
    if (UtilValidate.isNotEmpty(props.getProperty("log-latency"))) {
      requestLog.setLogLatency("true".equalsIgnoreCase(props.getProperty("log-latency").value));
    }
    if (UtilValidate.isNotEmpty(props.getProperty("log-server"))) {
      requestLog.setLogServer("true".equalsIgnoreCase(props.getProperty("log-server").value));
    }
    if (UtilValidate.isNotEmpty(props.getProperty("prefer-proxied-for-address"))) {
      requestLog.setPreferProxiedForAddress("true".equalsIgnoreCase(props.getProperty("prefer-proxied-for-address").value));
    }
    if (UtilValidate.isNotEmpty(props.getProperty("timezone"))) {
      requestLog.setLogTimeZone(props.getProperty("timezone").value);
    }
    if (UtilValidate.isNotEmpty(props.getProperty("date-format"))) {
      requestLog.setLogDateFormat(props.getProperty("date-format").value);
    }
    if (UtilValidate.isNotEmpty(props.getProperty("retain-days"))) {
      String retainDaysPropertyValue=props.getProperty("retain-days").value;
      try {
        requestLog.setRetainDays(Integer.parseInt(retainDaysPropertyValue));
      }
 catch (      NumberFormatException e) {
        Debug.logError(e,"invalid value for retain-days: " + retainDaysPropertyValue,module);
      }
    }
    RequestLogHandler requestLogHandler=new RequestLogHandler();
    requestLogHandler.setRequestLog(requestLog);
    ((HandlerCollection)server.getHandler()).addHandler(requestLogHandler);
  }
  return server;
}
