{
  Server server=new Server();
  for (  ContainerConfig.Container.Property props : serverConfig.properties.values()) {
    if ("listener".equals(props.value)) {
      if ("default".equals(props.getProperty("type").value)) {
        SocketListener listener=new SocketListener();
        setListenerOptions(listener,props);
        if (props.getProperty("identify-listener") != null) {
          boolean identifyListener="true".equalsIgnoreCase(props.getProperty("identify-listener").value);
          listener.setIdentifyListener(identifyListener);
        }
        if (props.getProperty("buffer-size") != null) {
          int value=0;
          try {
            value=Integer.parseInt(props.getProperty("buffer-size").value);
          }
 catch (          NumberFormatException e) {
            value=0;
          }
          if (value > 0) {
            listener.setBufferSize(value);
          }
        }
        if (props.getProperty("low-resource-persist-time") != null) {
          int value=0;
          try {
            value=Integer.parseInt(props.getProperty("low-resource-persist-time").value);
          }
 catch (          NumberFormatException e) {
            value=0;
          }
          if (value > 0) {
            listener.setLowResourcePersistTimeMs(value);
          }
        }
        server.addListener(listener);
      }
 else       if ("sun-jsse".equals(props.getProperty("type").value)) {
        SunJsseListener listener=new SunJsseListener();
        setListenerOptions(listener,props);
        if (props.getProperty("keystore") != null) {
          listener.setKeystore(props.getProperty("keystore").value);
        }
        if (props.getProperty("password") != null) {
          listener.setPassword(props.getProperty("password").value);
        }
        if (props.getProperty("key-password") != null) {
          listener.setKeyPassword(props.getProperty("key-password").value);
        }
        if (props.getProperty("need-client-auth") != null) {
          boolean needClientAuth="true".equalsIgnoreCase(props.getProperty("need-client-auth").value);
          listener.setNeedClientAuth(needClientAuth);
        }
        if (props.getProperty("identify-listener") != null) {
          boolean identifyListener="true".equalsIgnoreCase(props.getProperty("identify-listener").value);
          listener.setIdentifyListener(identifyListener);
        }
        if (props.getProperty("buffer-size") != null) {
          int value=0;
          try {
            value=Integer.parseInt(props.getProperty("buffer-size").value);
          }
 catch (          NumberFormatException e) {
            value=0;
          }
          if (value > 0) {
            listener.setBufferSize(value);
          }
        }
        if (props.getProperty("low-resource-persist-time") != null) {
          int value=0;
          try {
            value=Integer.parseInt(props.getProperty("low-resource-persist-time").value);
          }
 catch (          NumberFormatException e) {
            value=0;
          }
          if (value > 0) {
            listener.setLowResourcePersistTimeMs(value);
          }
        }
        server.addListener(listener);
      }
 else       if ("ibm-jsse".equals(props.getProperty("type").value)) {
        throw new ContainerException("Listener not supported yet [" + props.getProperty("type").value + "]");
      }
 else       if ("nio".equals(props.getProperty("type").value)) {
        throw new ContainerException("Listener not supported yet [" + props.getProperty("type").value + "]");
      }
 else       if ("ajp13".equals(props.getProperty("type").value)) {
        AJP13Listener listener=new AJP13Listener();
        setListenerOptions(listener,props);
        if (props.getProperty("identify-listener") != null) {
          boolean identifyListener="true".equalsIgnoreCase(props.getProperty("identify-listener").value);
          listener.setIdentifyListener(identifyListener);
        }
        if (props.getProperty("buffer-size") != null) {
          int value=0;
          try {
            value=Integer.parseInt(props.getProperty("buffer-size").value);
          }
 catch (          NumberFormatException e) {
            value=0;
          }
          if (value > 0) {
            listener.setBufferSize(value);
          }
        }
        server.addListener(listener);
      }
    }
 else     if ("request-log".equals(props.value)) {
      NCSARequestLog rl=new NCSARequestLog();
      if (props.getProperty("filename") != null) {
        rl.setFilename(props.getProperty("filename").value);
      }
      if (props.getProperty("append") != null) {
        rl.setAppend("true".equalsIgnoreCase(props.getProperty("append").value));
      }
      if (props.getProperty("buffered") != null) {
        rl.setBuffered("true".equalsIgnoreCase(props.getProperty("buffered").value));
      }
      if (props.getProperty("extended") != null) {
        rl.setExtended("true".equalsIgnoreCase(props.getProperty("extended").value));
      }
      if (props.getProperty("timezone") != null) {
        rl.setLogTimeZone(props.getProperty("timezone").value);
      }
      if (props.getProperty("date-format") != null) {
        rl.setLogDateFormat(props.getProperty("date-format").value);
      }
      if (props.getProperty("retain-days") != null) {
        int days=90;
        try {
          days=Integer.parseInt(props.getProperty("retain-days").value);
        }
 catch (        NumberFormatException e) {
          days=90;
        }
        rl.setRetainDays(days);
      }
      server.setRequestLog(rl);
    }
  }
  return server;
}
