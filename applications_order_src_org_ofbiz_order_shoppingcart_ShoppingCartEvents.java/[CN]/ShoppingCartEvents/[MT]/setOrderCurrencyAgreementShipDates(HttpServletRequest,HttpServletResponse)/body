{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericDelegator delegator=(GenericDelegator)request.getAttribute("delegator");
  ShoppingCart cart=getCartObject(request);
  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);
  String agreementId=(String)request.getParameter("agreementId");
  String currencyUomId=(String)request.getParameter("currencyUomId");
  String shipBeforeDateStr=(String)request.getParameter("shipBeforeDate");
  String shipAfterDateStr=(String)request.getParameter("shipAfterDate");
  String orderName=(String)request.getParameter("orderName");
  Map result=null;
  if (agreementId != null && agreementId.length() > 0) {
    result=cartHelper.selectAgreement(agreementId);
  }
 else {
    result=cartHelper.setCurrency(currencyUomId);
  }
  if (ServiceUtil.isError(result)) {
    request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(result));
    return "error";
  }
  cart.setOrderName(orderName);
  try {
    if (UtilValidate.isNotEmpty(shipBeforeDateStr)) {
      if (shipBeforeDateStr.length() == 10)       shipBeforeDateStr+=" 00:00:00.000";
      cart.setDefaultShipBeforeDate(java.sql.Timestamp.valueOf(shipBeforeDateStr));
    }
    if (UtilValidate.isNotEmpty(shipAfterDateStr)) {
      if (shipAfterDateStr.length() == 10)       shipAfterDateStr+=" 00:00:00.000";
      cart.setDefaultShipAfterDate(java.sql.Timestamp.valueOf(shipAfterDateStr));
    }
  }
 catch (  IllegalArgumentException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  return "success";
}
