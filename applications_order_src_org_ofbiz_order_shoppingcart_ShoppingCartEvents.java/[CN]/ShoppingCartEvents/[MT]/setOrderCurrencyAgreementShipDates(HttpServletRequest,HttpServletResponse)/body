{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  ShoppingCart cart=getCartObject(request);
  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);
  String agreementId=request.getParameter("agreementId");
  String currencyUomId=request.getParameter("currencyUomId");
  String workEffortId=request.getParameter("workEffortId");
  String shipBeforeDateStr=request.getParameter("shipBeforeDate");
  String shipAfterDateStr=request.getParameter("shipAfterDate");
  String cancelBackOrderDateStr=request.getParameter("cancelBackOrderDate");
  String orderId=request.getParameter("orderId");
  String orderName=request.getParameter("orderName");
  String correspondingPoId=request.getParameter("correspondingPoId");
  Locale locale=UtilHttp.getLocale(request);
  Map<String,Object> result=null;
  if (UtilValidate.isNotEmpty(agreementId)) {
    result=cartHelper.selectAgreement(agreementId);
  }
  if (UtilValidate.isNotEmpty(cart.getCurrency()) && UtilValidate.isNotEmpty(currencyUomId)) {
    result=cartHelper.setCurrency(currencyUomId);
  }
  if (ServiceUtil.isError(result)) {
    request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(result));
    return "error";
  }
  cart.setWorkEffortId(workEffortId);
  if (UtilValidate.isNotEmpty(orderId)) {
    GenericValue thisOrder=null;
    try {
      thisOrder=delegator.findOne("OrderHeader",UtilMisc.toMap("orderId",orderId),false);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e.getMessage(),module);
    }
    if (thisOrder == null) {
      cart.setOrderId(orderId);
    }
 else {
      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderIdAlreadyExistsPleaseChooseAnother",locale));
      return "error";
    }
  }
  cart.setOrderName(orderName);
  cart.setPoNumber(correspondingPoId);
  try {
    if (UtilValidate.isNotEmpty(shipBeforeDateStr)) {
      if (shipBeforeDateStr.length() == 10)       shipBeforeDateStr+=" 00:00:00.000";
      cart.setDefaultShipBeforeDate(java.sql.Timestamp.valueOf(shipBeforeDateStr));
    }
    if (UtilValidate.isNotEmpty(shipAfterDateStr)) {
      if (shipAfterDateStr.length() == 10)       shipAfterDateStr+=" 00:00:00.000";
      cart.setDefaultShipAfterDate(java.sql.Timestamp.valueOf(shipAfterDateStr));
    }
    if (UtilValidate.isNotEmpty(cancelBackOrderDateStr)) {
      if (cancelBackOrderDateStr.length() == 10)       cancelBackOrderDateStr+=" 00:00:00.000";
      cart.setCancelBackOrderDate(java.sql.Timestamp.valueOf(cancelBackOrderDateStr));
    }
  }
 catch (  IllegalArgumentException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    return "error";
  }
  return "success";
}
