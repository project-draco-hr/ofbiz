{
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  HttpSession session=request.getSession();
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String orderId=request.getParameter("orderId");
  ShoppingCart cart=null;
  try {
    Map<String,Object> outMap=dispatcher.runSync("loadCartFromOrder",UtilMisc.<String,Object>toMap("orderId",orderId,"skipProductChecks",Boolean.TRUE,"userLogin",userLogin));
    if (!ServiceUtil.isSuccess(outMap)) {
      request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(outMap));
      return "error";
    }
    cart=(ShoppingCart)outMap.get("shoppingCart");
    cart.removeAdjustmentByType("SALES_TAX");
    cart.removeAdjustmentByType("VAT_TAX");
    cart.removeAdjustmentByType("VAT_PRICE_CORRECT");
    cart.removeAdjustmentByType("PROMOTION_ADJUSTMENT");
    String shipGroupSeqId=null;
    long groupIndex=cart.getShipInfoSize();
    List<GenericValue> orderAdjustmentList=new ArrayList<GenericValue>();
    List<GenericValue> orderAdjustments=new ArrayList<GenericValue>();
    orderAdjustments=cart.getAdjustments();
    try {
      orderAdjustmentList=EntityQuery.use(delegator).from("OrderAdjustment").where("orderId",orderId).queryList();
    }
 catch (    Exception e) {
      Debug.logError(e,module);
    }
    for (long itr=1; itr <= groupIndex; itr++) {
      shipGroupSeqId=UtilFormatOut.formatPaddedNumber(itr,5);
      List<GenericValue> duplicateAdjustmentList=new ArrayList<GenericValue>();
      for (      GenericValue adjustment : orderAdjustmentList) {
        if ("PROMOTION_ADJUSTMENT".equals(adjustment.get("orderAdjustmentTypeId"))) {
          cart.addAdjustment(adjustment);
        }
        if ("SALES_TAX".equals(adjustment.get("orderAdjustmentTypeId"))) {
          if (adjustment.get("description") != null && ((String)adjustment.get("description")).startsWith("Tax adjustment due")) {
            cart.addAdjustment(adjustment);
          }
          if (adjustment.get("comments") != null && ((String)adjustment.get("comments")).startsWith("Added manually by")) {
            cart.addAdjustment(adjustment);
          }
        }
      }
      for (      GenericValue orderAdjustment : orderAdjustments) {
        if ("OrderAdjustment".equals(orderAdjustment.getEntityName())) {
          if (("SHIPPING_CHARGES".equals(orderAdjustment.get("orderAdjustmentTypeId"))) && orderAdjustment.get("orderId").equals(orderId) && orderAdjustment.get("shipGroupSeqId").equals(shipGroupSeqId)&& orderAdjustment.get("comments") == null) {
            duplicateAdjustmentList.add(orderAdjustment);
          }
        }
      }
      orderAdjustments.removeAll(duplicateAdjustmentList);
    }
  }
 catch (  GenericServiceException exc) {
    request.setAttribute("_ERROR_MESSAGE_",exc.getMessage());
    return "error";
  }
  cart.setAttribute("addpty","Y");
  session.setAttribute("shoppingCart",cart);
  session.setAttribute("productStoreId",cart.getProductStoreId());
  session.setAttribute("orderMode",cart.getOrderType());
  session.setAttribute("orderPartyId",cart.getOrderPartyId());
  cart.setOrderId(null);
  return "success";
}
