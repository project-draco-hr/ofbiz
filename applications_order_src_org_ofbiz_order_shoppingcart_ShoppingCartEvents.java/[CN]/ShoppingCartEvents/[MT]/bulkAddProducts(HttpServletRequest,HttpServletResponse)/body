{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  ShoppingCart cart=ShoppingCartEvents.getCartObject(request);
  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);
  String controlDirective=null;
  Map<String,Object> result=null;
  String productId=null;
  String productCategoryId=null;
  String quantityStr=null;
  String itemDesiredDeliveryDateStr=null;
  BigDecimal quantity=BigDecimal.ZERO;
  String catalogId=CatalogWorker.getCurrentCatalogId(request);
  String itemType=null;
  String itemDescription="";
  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
  String itemGroupNumber=request.getParameter("itemGroupNumber");
  String shoppingListId=request.getParameter("shoppingListId");
  String shoppingListItemSeqId=request.getParameter("shoppingListItemSeqId");
  int rowCount=UtilHttp.getMultiFormRowCount(paramMap);
  if (rowCount < 1) {
    Debug.logWarning("No rows to process, as rowCount = " + rowCount,module);
  }
 else {
    for (int i=0; i < rowCount; i++) {
      controlDirective=null;
      String thisSuffix=UtilHttp.MULTI_ROW_DELIMITER + i;
      if (paramMap.containsKey("productId" + thisSuffix)) {
        productId=(String)paramMap.remove("productId" + thisSuffix);
      }
      if (paramMap.containsKey("quantity" + thisSuffix)) {
        quantityStr=(String)paramMap.remove("quantity" + thisSuffix);
      }
      if ((quantityStr == null) || (quantityStr.equals(""))) {
        quantityStr="0";
      }
      try {
        quantity=new BigDecimal(quantityStr);
      }
 catch (      Exception e) {
        Debug.logWarning(e,"Problems parsing quantity string: " + quantityStr,module);
        quantity=BigDecimal.ZERO;
      }
      try {
        if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,productId,cart.getProductStoreId())) {
          BigDecimal remainder=quantity.remainder(BigDecimal.ONE);
          if (remainder.compareTo(BigDecimal.ZERO) != 0) {
            request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.quantityInDecimalNotAllowed",cart.getLocale()));
            return "error";
          }
          quantity=quantity.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));
        }
 else {
          quantity=quantity.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));
        }
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e.getMessage(),module);
        quantity=BigDecimal.ONE;
      }
      String selectedAmountStr=null;
      if (paramMap.containsKey("amount" + thisSuffix)) {
        selectedAmountStr=(String)paramMap.remove("amount" + thisSuffix);
      }
      BigDecimal amount=null;
      if (UtilValidate.isNotEmpty(selectedAmountStr)) {
        try {
          amount=new BigDecimal(selectedAmountStr);
        }
 catch (        Exception e) {
          Debug.logWarning(e,"Problem parsing amount string: " + selectedAmountStr,module);
          amount=null;
        }
      }
 else {
        amount=BigDecimal.ZERO;
      }
      if (paramMap.containsKey("itemDesiredDeliveryDate" + thisSuffix)) {
        itemDesiredDeliveryDateStr=(String)paramMap.remove("itemDesiredDeliveryDate" + thisSuffix);
      }
      if (paramMap.containsKey("itemType" + thisSuffix)) {
        itemType=(String)paramMap.remove("itemType" + thisSuffix);
      }
      if (paramMap.containsKey("itemDescription" + thisSuffix)) {
        itemDescription=(String)paramMap.remove("itemDescription" + thisSuffix);
      }
      Map<String,Object> itemAttributes=UtilMisc.<String,Object>toMap("itemDesiredDeliveryDate",itemDesiredDeliveryDateStr);
      if (quantity.compareTo(BigDecimal.ZERO) > 0) {
        Debug.logInfo("Attempting to add to cart with productId = " + productId + ", categoryId = "+ productCategoryId+ ", quantity = "+ quantity+ ", itemType = "+ itemType+ " and itemDescription = "+ itemDescription,module);
        result=cartHelper.addToCart(catalogId,shoppingListId,shoppingListItemSeqId,productId,productCategoryId,itemType,itemDescription,null,amount,quantity,null,null,null,null,null,null,itemGroupNumber,itemAttributes,null);
        controlDirective=processResult(result,request);
        if (controlDirective.equals(ERROR)) {
          return "error";
        }
      }
    }
  }
  return cart.viewCartOnAdd() ? "viewcart" : "success";
}
