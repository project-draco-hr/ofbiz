{
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue paymentPref=(GenericValue)context.get("orderPaymentPreference");
  BigDecimal amount=(BigDecimal)context.get("refundAmount");
  String paymentGatewayConfigId=(String)context.get("paymentGatewayConfigId");
  String configString=(String)context.get("paymentConfig");
  if (configString == null) {
    configString="payment.properties";
  }
  GenericValue captureTrans=PaymentGatewayServices.getCaptureTransaction(paymentPref);
  if (captureTrans == null) {
    return ServiceUtil.returnError("No capture transaction found for the OrderPaymentPreference; cannot refund");
  }
  boolean isPayPal=false;
  if ("EXT_PAYPAL".equals(paymentPref.getString("paymentMethodTypeId"))) {
    isPayPal=true;
  }
  String refNum=captureTrans.getString("referenceNum");
  Map<String,String> data=UtilMisc.toMap("ORIGID",refNum);
  data.put("TRXTYPE","C");
  String orderId=paymentPref.getString("orderId");
  if (isPayPal) {
    data.put("TENDER","P");
    data.put("MEMO",orderId);
  }
 else {
    data.put("TENDER","C");
    data.put("COMMENT1",orderId);
  }
  data.put("AMT",amount.toString());
  PayflowAPI pfp=init(delegator,paymentGatewayConfigId,configString,context);
  StringBuilder params=makeBaseParams(delegator,paymentGatewayConfigId,configString);
  params.append("&").append(parseContext(data));
  if (Debug.verboseOn())   Debug.logVerbose("Sending to Verisign: " + params.toString(),module);
  String resp;
  if (!comparePaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"enableTransmit",configString,"payment.verisign.enable_transmit","false")) {
    resp=pfp.submitTransaction(params.toString(),pfp.generateRequestId());
  }
 else {
    resp="RESULT=0&AUTHCODE=T&PNREF=" + (new Date()).getTime() + "&RESPMSG=Testing";
  }
  if (Debug.verboseOn())   Debug.logVerbose("Response from Verisign: " + resp,module);
  Map<String,Object> result=ServiceUtil.returnSuccess();
  parseRefundResponse(resp,result);
  result.put("refundAmount",amount);
  return result;
}
