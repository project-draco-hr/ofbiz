{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  BigDecimal totalAmountPercentage=ZERO;
  Map<String,Object> createGlAcctCatMemFromCostCentersMap=null;
  String glAccountId=(String)context.get("glAccountId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Map<String,String> amountPercentageMap=UtilGenerics.checkMap(context.get("amountPercentageMap"));
  totalAmountPercentage=GeneralLedgerServices.calculateCostCenterTotal(amountPercentageMap);
  Map<String,Object> result=ServiceUtil.returnSuccess();
  for (  String rowKey : amountPercentageMap.keySet()) {
    String rowValue=amountPercentageMap.get(rowKey);
    if (UtilValidate.isNotEmpty(rowValue)) {
      createGlAcctCatMemFromCostCentersMap=UtilMisc.toMap("glAccountId",glAccountId,"glAccountCategoryId",rowKey,"amountPercentage",new BigDecimal(rowValue),"userLogin",userLogin,"totalAmountPercentage",totalAmountPercentage);
    }
 else {
      createGlAcctCatMemFromCostCentersMap=UtilMisc.toMap("glAccountId",glAccountId,"glAccountCategoryId",rowKey,"amountPercentage",new BigDecimal(0),"userLogin",userLogin,"totalAmountPercentage",totalAmountPercentage);
    }
    try {
      result=dispatcher.runSync("createGlAcctCatMemFromCostCenters",createGlAcctCatMemFromCostCentersMap);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,module);
      return ServiceUtil.returnError(e.getMessage());
    }
  }
  return result;
}
