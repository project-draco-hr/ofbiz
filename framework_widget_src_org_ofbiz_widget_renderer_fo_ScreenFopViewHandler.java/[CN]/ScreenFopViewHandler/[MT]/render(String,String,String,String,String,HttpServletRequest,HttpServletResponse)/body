{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  Writer writer=new StringWriter();
  try {
    ScreenStringRenderer screenStringRenderer=new MacroScreenRenderer(EntityUtilProperties.getPropertyValue("widget",getName() + ".name",delegator),EntityUtilProperties.getPropertyValue("widget",getName() + ".screenrenderer",delegator));
    FormStringRenderer formStringRenderer=new MacroFormRenderer(EntityUtilProperties.getPropertyValue("widget",getName() + ".formrenderer",delegator),request,response);
    ScreenRenderer screens=new ScreenRenderer(writer,null,screenStringRenderer);
    screens.populateContextForRequest(request,response,servletContext);
    screens.getContext().put("formStringRenderer",formStringRenderer);
    screens.getContext().put("simpleEncoder",UtilCodec.getEncoder(EntityUtilProperties.getPropertyValue("widget",getName() + ".encoder",delegator)));
    screens.render(page);
  }
 catch (  Exception e) {
    renderError("Problems with the response writer/output stream",e,"[Not Yet Rendered]",request,response);
    return;
  }
  String screenOutString=writer.toString();
  if (!screenOutString.startsWith("<?xml")) {
    screenOutString="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + screenOutString;
  }
  if (Debug.verboseOn())   Debug.logVerbose("XSL:FO Screen Output: " + screenOutString,module);
  if (UtilValidate.isEmpty(contentType)) {
    contentType=UtilProperties.getPropertyValue("widget",getName() + ".default.contenttype");
  }
  FOUserAgent foUserAgent=null;
  String userPassword=request.getParameter("userPassword");
  String ownerPassword=request.getParameter("ownerPassword");
  boolean allowPrint=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowPrint")) ? ApacheFopWorker.allowPrintDefault : request.getParameter("allowPrint"));
  boolean allowCopyContent=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowCopyContent")) ? ApacheFopWorker.allowCopyContentDefault : request.getParameter("allowCopyContent"));
  boolean allowEditContent=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowEditContent")) ? ApacheFopWorker.allowEditContentDefault : request.getParameter("allowEditContent"));
  boolean allowEditAnnotations=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowEditAnnotations")) ? ApacheFopWorker.allowEditAnnotationsDefault : request.getParameter("allowEditAnnotations"));
  if (UtilValidate.isNotEmpty(userPassword) || UtilValidate.isNotEmpty(ownerPassword) || !allowPrint|| !allowCopyContent|| allowEditContent|| !allowEditAnnotations) {
    int encryptionLength=128;
    try {
      encryptionLength=Integer.parseInt(request.getParameter("encryption-length"));
    }
 catch (    NumberFormatException e) {
      try {
        encryptionLength=Integer.parseInt(ApacheFopWorker.encryptionLengthDefault);
      }
 catch (      NumberFormatException e1) {
      }
    }
    boolean encryptMetadata=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("encrypt-metadata")) ? ApacheFopWorker.encryptMetadataDefault : request.getParameter("encrypt-metadata"));
    boolean allowFillInForms=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowFillInForms")) ? ApacheFopWorker.allowFillInFormsDefault : request.getParameter("allowFillInForms"));
    boolean allowAccessContent=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowAccessContent")) ? ApacheFopWorker.allowAccessContentDefault : request.getParameter("allowAccessContent"));
    boolean allowAssembleDocument=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowAssembleDocument")) ? ApacheFopWorker.allowAssembleDocumentDefault : request.getParameter("allowAssembleDocument"));
    boolean allowPrintHq=Boolean.parseBoolean(UtilValidate.isEmpty(request.getParameter("allowPrintHq")) ? ApacheFopWorker.allowPrintHqDefault : request.getParameter("allowPrintHq"));
    FopFactory fopFactory=ApacheFopWorker.getFactoryInstance();
    foUserAgent=fopFactory.newFOUserAgent();
    PDFEncryptionParams pdfEncryptionParams=new PDFEncryptionParams(userPassword,ownerPassword,allowPrint,allowCopyContent,allowEditContent,allowEditAnnotations,encryptMetadata);
    pdfEncryptionParams.setEncryptionLengthInBits(256);
    pdfEncryptionParams.setAllowFillInForms(allowFillInForms);
    pdfEncryptionParams.setAllowAccessContent(allowAccessContent);
    pdfEncryptionParams.setAllowAssembleDocument(allowAssembleDocument);
    pdfEncryptionParams.setAllowPrintHq(allowPrintHq);
    pdfEncryptionParams.setEncryptionLengthInBits(encryptionLength);
    foUserAgent.getRendererOptions().put(PDFEncryptionOption.ENCRYPTION_PARAMS,pdfEncryptionParams);
  }
  Reader reader=new StringReader(screenOutString);
  StreamSource src=new StreamSource(reader);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    Fop fop=ApacheFopWorker.createFopInstance(out,contentType,foUserAgent);
    ApacheFopWorker.transform(src,null,fop);
  }
 catch (  Exception e) {
    renderError("Unable to transform FO file",e,screenOutString,request,response);
    return;
  }
  response.setContentType(contentType);
  response.setContentLength(out.size());
  try {
    out.writeTo(response.getOutputStream());
    response.getOutputStream().flush();
  }
 catch (  IOException e) {
    renderError("Unable to write to OutputStream",e,screenOutString,request,response);
  }
}
