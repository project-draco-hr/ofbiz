{
  Map<String,Object> featureMap=null;
  Map<String,Object> variantTreeMap=null;
  Map<String,Object> featureTypes=FastMap.newInstance();
  WebPosSession webPosSession=getWebPosSession(request,null);
  if (webPosSession != null) {
    Delegator delegator=webPosSession.getDelegator();
    LocalDispatcher dispatcher=webPosSession.getDispatcher();
    GenericValue product=null;
    try {
      String productId=request.getParameter("productId");
      product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();
      if (UtilValidate.isNotEmpty(product)) {
        request.setAttribute("product",product);
        if (UtilValidate.isNotEmpty(product.getString("isVirtual")) && "Y".equalsIgnoreCase(product.getString("isVirtual"))) {
          String virtualVariantMethodEnum=product.getString("virtualVariantMethodEnum");
          if (UtilValidate.isEmpty(virtualVariantMethodEnum)) {
            virtualVariantMethodEnum="VV_VARIANTTREE";
          }
          if ("VV_VARIANTTREE".equalsIgnoreCase(virtualVariantMethodEnum)) {
            String productStoreId=webPosSession.getProductStoreId();
            try {
              featureMap=dispatcher.runSync("getProductFeatureSet",UtilMisc.toMap("productId",productId));
              Set<String> featureSet=UtilGenerics.cast(featureMap.get("featureSet"));
              if (UtilValidate.isNotEmpty(featureSet)) {
                request.setAttribute("featureSet",featureSet);
                try {
                  variantTreeMap=dispatcher.runSync("getProductVariantTree",UtilMisc.toMap("productId",productId,"featureOrder",featureSet,"productStoreId",productStoreId));
                  Map<String,Object> variantTree=UtilGenerics.cast(variantTreeMap.get("variantTree"));
                  if (UtilValidate.isNotEmpty(variantTree)) {
                    request.setAttribute("variantTree",variantTree);
                    request.setAttribute("variantTreeSize",variantTree.size());
                    List<String> featureOrder=FastList.newInstance();
                    featureOrder=UtilMisc.toList(featureSet);
                    for (int i=0; i < featureOrder.size(); i++) {
                      String featureKey=featureOrder.get(i);
                      GenericValue featureValue=EntityQuery.use(delegator).from("ProductFeatureType").where("productFeatureTypeId",featureOrder.get(i)).cache().queryOne();
                      if (UtilValidate.isNotEmpty(featureValue) && UtilValidate.isNotEmpty(featureValue.get("description"))) {
                        featureTypes.put(featureKey,featureValue.get("description"));
                      }
 else {
                        featureTypes.put(featureKey,featureValue.get("productFeatureTypeId"));
                      }
                    }
                    request.setAttribute("featureTypes",featureTypes);
                    request.setAttribute("featureOrder",featureOrder);
                    if (UtilValidate.isNotEmpty(featureOrder)) {
                      request.setAttribute("featureOrderFirst",featureOrder.get(0));
                    }
                  }
                  Map<String,Object> imageMap=UtilGenerics.cast(variantTreeMap.get("variantSample"));
                  if (UtilValidate.isNotEmpty(imageMap)) {
                    List<String> variantSampleList=FastList.newInstance();
                    variantSampleList=UtilMisc.toList(imageMap.keySet());
                    request.setAttribute("variantSample",imageMap);
                    request.setAttribute("variantSampleList",variantSampleList);
                    request.setAttribute("variantSampleSize",imageMap.size());
                  }
                }
 catch (                GenericServiceException e) {
                  Debug.logError(e,module);
                  return "error";
                }
              }
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,module);
              return "error";
            }
          }
          if ("VV_FEATURETREE".equalsIgnoreCase(virtualVariantMethodEnum)) {
            request.setAttribute("featureLists",ProductWorker.getSelectableProductFeaturesByTypesAndSeq(product));
          }
        }
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
      return "error";
    }
  }
  return "success";
}
