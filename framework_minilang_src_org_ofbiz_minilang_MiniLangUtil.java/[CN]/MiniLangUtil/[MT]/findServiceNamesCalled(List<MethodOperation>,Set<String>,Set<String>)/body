{
  for (  MethodOperation methodOperation : methodOperations) {
    if (methodOperation instanceof CallService) {
      String svcName=((CallService)methodOperation).getServiceName();
      if (UtilValidate.isNotEmpty(svcName))       allServiceNames.add(svcName);
    }
 else     if (methodOperation instanceof CallServiceAsynch) {
      String svcName=((CallServiceAsynch)methodOperation).getServiceName();
      if (UtilValidate.isNotEmpty(svcName))       allServiceNames.add(svcName);
    }
 else     if (methodOperation instanceof SetServiceFields) {
      String svcName=((SetServiceFields)methodOperation).getServiceName();
      if (UtilValidate.isNotEmpty(svcName))       allServiceNames.add(svcName);
    }
 else     if (methodOperation instanceof CallSimpleMethod) {
      CallSimpleMethod csm=(CallSimpleMethod)methodOperation;
      try {
        SimpleMethod calledMethod=csm.getSimpleMethodToCall(methodOperations.getClass().getClassLoader());
        if (calledMethod == null) {
          Debug.logWarning("Could not find simple-method [" + csm.getMethodName() + "] in ["+ csm.getXmlResource()+ "] from the SimpleMethod ["+ csm.getSimpleMethod().getMethodName()+ "] in ["+ csm.getSimpleMethod().getFromLocation()+ "]",module);
        }
 else {
          if (!simpleMethodsVisited.contains(calledMethod.getLocationAndName())) {
            simpleMethodsVisited.add(calledMethod.getLocationAndName());
            findServiceNamesCalled(calledMethod.getMethodOperations(),allServiceNames,simpleMethodsVisited);
          }
        }
      }
 catch (      MiniLangException e) {
        Debug.logWarning("Error getting simple-method info in the [" + csm.getSimpleMethod().getMethodName() + "] in ["+ csm.getSimpleMethod().getFromLocation()+ "]: "+ e.toString(),module);
      }
    }
 else     if (methodOperation instanceof Iterate) {
      findServiceNamesCalled(((Iterate)methodOperation).getSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof IterateMap) {
      findServiceNamesCalled(((IterateMap)methodOperation).getSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof Loop) {
      findServiceNamesCalled(((Loop)methodOperation).getSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof MasterIf) {
      findServiceNamesCalled(((MasterIf)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof While) {
      findServiceNamesCalled(((While)methodOperation).getThenSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof ValidateMethodCondition) {
      findServiceNamesCalled(((ValidateMethodCondition)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof IfInstanceOf) {
      findServiceNamesCalled(((IfInstanceOf)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof CompareCondition) {
      findServiceNamesCalled(((CompareCondition)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof CompareFieldCondition) {
      findServiceNamesCalled(((CompareFieldCondition)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof RegexpCondition) {
      findServiceNamesCalled(((RegexpCondition)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof EmptyCondition) {
      findServiceNamesCalled(((EmptyCondition)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof IfNotEmpty) {
      findServiceNamesCalled(((IfNotEmpty)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
 else     if (methodOperation instanceof HasPermissionCondition) {
      findServiceNamesCalled(((HasPermissionCondition)methodOperation).getAllSubOps(),allServiceNames,simpleMethodsVisited);
    }
  }
}
