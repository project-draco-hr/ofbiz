{
  Map<String,Object> ctx=FastMap.newInstance();
  ctx.put("partyId","Company");
  ctx.put("orderTypeId","PURCHASE_ORDER");
  ctx.put("currencyUom","USD");
  ctx.put("productStoreId","9000");
  GenericValue orderItem=delegator.makeValue("OrderItem",UtilMisc.toMap("orderItemSeqId","00001","orderItemTypeId","PRODUCT_ORDER_ITEM","prodCatalogId","DemoCatalog","productId","GZ-1000","quantity",new Double(2),"isPromo","N"));
  orderItem.set("unitPrice",new Double(1399.5));
  orderItem.set("unitListPrice",new Double(0));
  orderItem.set("isModifiedPrice","N");
  orderItem.set("statusId","ITEM_CREATED");
  List<GenericValue> orderItems=FastList.newInstance();
  orderItems.add(orderItem);
  ctx.put("orderItems",orderItems);
  GenericValue orderContactMech=delegator.makeValue("OrderContactMech",UtilMisc.toMap("contactMechPurposeTypeId","SHIPPING_LOCATION","contactMechId","9000"));
  List<GenericValue> orderContactMechs=FastList.newInstance();
  orderContactMechs.add(orderContactMech);
  ctx.put("orderContactMechs",orderContactMechs);
  GenericValue orderItemContactMech=delegator.makeValue("OrderItemContactMech",UtilMisc.toMap("contactMechPurposeTypeId","SHIPPING_LOCATION","contactMechId","9000","orderItemSeqId","00001"));
  List<GenericValue> orderItemContactMechs=FastList.newInstance();
  orderItemContactMechs.add(orderItemContactMech);
  ctx.put("orderItemContactMechs",orderItemContactMechs);
  GenericValue orderItemShipGroup=delegator.makeValue("OrderItemShipGroup",UtilMisc.toMap("carrierPartyId","UPS","contactMechId","9000","isGift","N","maySplit","N","shipGroupSeqId","00001","shipmentMethodTypeId","NEXT_DAY"));
  orderItemShipGroup.set("carrierRoleTypeId","CARRIER");
  List<GenericValue> orderItemShipGroupInfo=FastList.newInstance();
  orderItemShipGroupInfo.add(orderItemShipGroup);
  ctx.put("orderItemShipGroupInfo",orderItemShipGroupInfo);
  List<GenericValue> orderTerms=FastList.newInstance();
  ctx.put("orderTerms",orderTerms);
  List<GenericValue> orderAdjustments=FastList.newInstance();
  ctx.put("orderAdjustments",orderAdjustments);
  ctx.put("billToCustomerPartyId","Company");
  ctx.put("billFromVendorPartyId","DemoSupplier");
  ctx.put("shipFromVendorPartyId","Company");
  ctx.put("supplierAgentPartyId","DemoSupplier");
  ctx.put("userLogin",userLogin);
  Map<String,Object> resp=dispatcher.runSync("storeOrder",ctx);
  orderId=(String)resp.get("orderId");
  statusId=(String)resp.get("statusId");
  assertNotNull(orderId);
  assertNotNull(statusId);
}
