{
  if (logLevel != null) {
    int llevel=Debug.getLevelFromString(logLevel);
    for (int v=0; v < 9; v++) {
      if (v < llevel) {
        Debug.set(v,false);
      }
 else {
        Debug.set(v,true);
      }
    }
  }
  JunitSuiteWrapper jsWrapper=new JunitSuiteWrapper(component,suiteName,testCase);
  if (jsWrapper.getAllTestList().size() == 0) {
    throw new ContainerException("No tests found (" + component + " / "+ suiteName+ " / "+ testCase+ ")");
  }
  boolean failedRun=false;
  for (  ModelTestSuite modelSuite : jsWrapper.getModelTestSuites()) {
    Delegator testDelegator=modelSuite.getDelegator();
    TestSuite suite=modelSuite.makeTestSuite();
    JUnitTest test=new JUnitTest();
    test.setName(suite.getName());
    JunitXmlListener xml;
    try {
      xml=new JunitXmlListener(new FileOutputStream(logDir + suite.getName() + ".xml"));
    }
 catch (    FileNotFoundException e) {
      throw new ContainerException(e);
    }
    TestResult results=new TestResult();
    results.addListener(new JunitListener());
    results.addListener(xml);
    xml.startTestSuite(test);
    suite.run(results);
    test.setCounts(results.runCount(),results.failureCount(),results.errorCount());
    testDelegator.rollback();
    xml.endTestSuite(test);
    if (!results.wasSuccessful()) {
      failedRun=true;
    }
    Debug.logInfo("[JUNIT] Results for test suite: " + suite.getName(),module);
    Debug.logInfo("[JUNIT] Pass: " + results.wasSuccessful() + " | # Tests: "+ results.runCount()+ " | # Failed: "+ results.failureCount()+ " # Errors: "+ results.errorCount(),module);
    if (Debug.importantOn()) {
      Debug.logInfo("[JUNIT] ----------------------------- ERRORS ----------------------------- [JUNIT]",module);
      Enumeration<?> err=results.errors();
      if (!err.hasMoreElements()) {
        Debug.logInfo("None",module);
      }
 else {
        while (err.hasMoreElements()) {
          Object error=err.nextElement();
          Debug.logInfo("--> " + error,module);
          if (error instanceof TestFailure) {
            Debug.logInfo(((TestFailure)error).trace(),module);
          }
        }
      }
      Debug.logInfo("[JUNIT] ------------------------------------------------------------------ [JUNIT]",module);
      Debug.logInfo("[JUNIT] ---------------------------- FAILURES ---------------------------- [JUNIT]",module);
      Enumeration<?> fail=results.failures();
      if (!fail.hasMoreElements()) {
        Debug.logInfo("None",module);
      }
 else {
        while (fail.hasMoreElements()) {
          Object failure=fail.nextElement();
          Debug.logInfo("--> " + failure,module);
          if (failure instanceof TestFailure) {
            Debug.logInfo(((TestFailure)failure).trace(),module);
          }
        }
      }
      Debug.logInfo("[JUNIT] ------------------------------------------------------------------ [JUNIT]",module);
    }
  }
  if (failedRun) {
    throw new ContainerException("Test run was unsuccessful");
  }
  return true;
}
