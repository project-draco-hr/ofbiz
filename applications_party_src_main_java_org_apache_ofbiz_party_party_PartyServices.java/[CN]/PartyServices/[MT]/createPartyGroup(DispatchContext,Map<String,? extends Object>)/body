{
  Map<String,Object> result=new HashMap<String,Object>();
  Delegator delegator=ctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Timestamp now=UtilDateTime.nowTimestamp();
  String partyId=(String)context.get("partyId");
  Locale locale=(Locale)context.get("locale");
  if (UtilValidate.isEmpty(partyId)) {
    try {
      partyId=delegator.getNextSeqId("Party");
    }
 catch (    IllegalArgumentException e) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_create_party_group_generation_failure",locale));
    }
  }
 else {
    if (partyId.matches("\\d+")) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_create_party_ID_digit",locale));
    }
  }
  try {
    GenericValue party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();
    GenericValue partyGroupPartyType=EntityQuery.use(delegator).from("PartyType").where("partyTypeId","PARTY_GROUP").cache().queryOne();
    if (partyGroupPartyType == null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.partyservices.party_type_not_found_in_database_cannot_create_party_group",locale));
    }
    if (party != null) {
      GenericValue partyType=party.getRelatedOne("PartyType",true);
      if (!EntityTypeUtil.isType(partyType,partyGroupPartyType)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.partyservices.cannot_create_party_group_already_exists_not_PARTY_GROUP_type",locale));
      }
    }
 else {
      String partyTypeId="PARTY_GROUP";
      if (UtilValidate.isNotEmpty(context.get("partyTypeId"))) {
        GenericValue desiredPartyType=EntityQuery.use(delegator).from("PartyType").where("partyTypeId",context.get("partyTypeId")).cache().queryOne();
        if (desiredPartyType != null && EntityTypeUtil.isType(desiredPartyType,partyGroupPartyType)) {
          partyTypeId=desiredPartyType.getString("partyTypeId");
        }
 else {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyTypeIdNotFound",UtilMisc.toMap("partyTypeId",context.get("partyTypeId")),locale));
        }
      }
      Map<String,Object> newPartyMap=UtilMisc.toMap("partyId",partyId,"partyTypeId",partyTypeId,"createdDate",now,"lastModifiedDate",now);
      if (userLogin != null) {
        newPartyMap.put("createdByUserLogin",userLogin.get("userLoginId"));
        newPartyMap.put("lastModifiedByUserLogin",userLogin.get("userLoginId"));
      }
      String statusId=(String)context.get("statusId");
      party=delegator.makeValue("Party",newPartyMap);
      party.setNonPKFields(context);
      if (statusId == null) {
        statusId="PARTY_ENABLED";
      }
      party.set("statusId",statusId);
      party.create();
      GenericValue partyStat=delegator.makeValue("PartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",statusId,"statusDate",now));
      if (userLogin != null) {
        partyStat.put("changeByUserLoginId",userLogin.get("userLoginId"));
      }
      partyStat.create();
    }
    GenericValue partyGroup=EntityQuery.use(delegator).from("PartyGroup").where("partyId",partyId).queryOne();
    if (partyGroup != null) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_party_group_already_exists",locale));
    }
    partyGroup=delegator.makeValue("PartyGroup",UtilMisc.toMap("partyId",partyId));
    partyGroup.setNonPKFields(context);
    partyGroup.create();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.data_source_error_adding_party_group",UtilMisc.toMap("errMessage",e.getMessage()),locale));
  }
  result.put("partyId",partyId);
  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
  return result;
}
