{
  Delegator delegator=ctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String partyId=(String)context.get("partyId");
  String statusId=(String)context.get("statusId");
  Timestamp statusDate=(Timestamp)context.get("statusDate");
  if (statusDate == null) {
    statusDate=UtilDateTime.nowTimestamp();
  }
  try {
    GenericValue party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();
    String oldStatusId=party.getString("statusId");
    if (!statusId.equals(oldStatusId)) {
      if (oldStatusId == null) {
        party.set("statusId",statusId);
        oldStatusId=party.getString("statusId");
      }
 else {
        GenericValue statusValidChange=EntityQuery.use(delegator).from("StatusValidChange").where("statusId",party.getString("statusId"),"statusIdTo",statusId).queryOne();
        if (statusValidChange == null) {
          String errorMsg="Cannot change party status from " + party.getString("statusId") + " to "+ statusId;
          Debug.logWarning(errorMsg,module);
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyStatusCannotBeChanged",UtilMisc.toMap("partyFromStatusId",party.getString("statusId"),"partyToStatusId",statusId),locale));
        }
        party.set("statusId",statusId);
      }
      party.store();
      GenericValue partyStatus=delegator.makeValue("PartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",statusId,"statusDate",statusDate));
      partyStatus.create();
      if (("PARTY_DISABLED").equals(statusId)) {
        EntityCondition cond=EntityCondition.makeCondition(EntityCondition.makeCondition("partyId",partyId),EntityCondition.makeCondition("enabled",EntityOperator.NOT_EQUAL,"N"));
        List<GenericValue> userLogins=EntityQuery.use(delegator).from("UserLogin").where(cond).queryList();
        for (        GenericValue userLogin : userLogins) {
          userLogin.set("enabled","N");
          userLogin.set("disabledDateTime",UtilDateTime.nowTimestamp());
        }
        delegator.storeAll(userLogins);
      }
    }
    Map<String,Object> results=ServiceUtil.returnSuccess();
    results.put("oldStatusId",oldStatusId);
    return results;
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,e.getMessage(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.write_failure",new Object[]{e.getMessage()},locale));
  }
}
