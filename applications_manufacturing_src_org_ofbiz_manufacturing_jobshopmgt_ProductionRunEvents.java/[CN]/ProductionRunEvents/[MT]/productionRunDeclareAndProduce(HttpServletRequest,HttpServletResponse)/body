{
  HttpSession session=request.getSession();
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");
  Map parameters=UtilHttp.getParameterMap(request);
  BigDecimal quantity=null;
  try {
    quantity=new BigDecimal((String)parameters.get("quantity"));
  }
 catch (  NumberFormatException nfe) {
    String errMsg="Invalid format for quantity field: " + nfe.toString();
    Debug.logError(nfe,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  Collection<Map<String,Object>> componentRows=UtilHttp.parseMultiFormData(parameters);
  Map componentsLocationMap=FastMap.newInstance();
  for (  Map<String,Object> componentRow : componentRows) {
    Timestamp fromDate=null;
    try {
      fromDate=Timestamp.valueOf((String)componentRow.get("fromDate"));
    }
 catch (    IllegalArgumentException iae) {
      String errMsg="Invalid format for date field: " + iae.toString();
      Debug.logError(iae,errMsg,module);
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      return "error";
    }
    GenericPK key=delegator.makePK("WorkEffortGoodStandard",UtilMisc.toMap("workEffortId",(String)componentRow.get("productionRunTaskId"),"productId",(String)componentRow.get("productId"),"fromDate",fromDate,"workEffortGoodStdTypeId","PRUNT_PROD_NEEDED"));
    componentsLocationMap.put(key,UtilMisc.toMap("locationSeqId",(String)componentRow.get("locationSeqId"),"secondaryLocationSeqId",(String)componentRow.get("secondaryLocationSeqId"),"failIfItemsAreNotAvailable",(String)componentRow.get("failIfItemsAreNotAvailable")));
  }
  try {
    Map inputMap=UtilMisc.toMap("workEffortId",parameters.get("workEffortId"),"inventoryItemTypeId",parameters.get("inventoryItemTypeId"));
    inputMap.put("componentsLocationMap",componentsLocationMap);
    inputMap.put("quantity",quantity);
    inputMap.put("lotId",parameters.get("lotId"));
    inputMap.put("userLogin",userLogin);
    Map result=dispatcher.runSync("productionRunDeclareAndProduce",inputMap);
  }
 catch (  GenericServiceException e) {
    String errMsg="Error issuing materials: " + e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}
