{
  Perl5Matcher matcher=new Perl5Matcher();
  if (UrlRegexpConfigUtil.checkUseUrlRegexp() && matcher.matches(url,UrlRegexpConfigUtil.getGeneralRegexpPattern())) {
    Iterator<String> keys=UrlRegexpConfigUtil.getSeoPatterns().keySet().iterator();
    boolean foundMatch=false;
    while (keys.hasNext()) {
      String key=keys.next();
      Pattern pattern=UrlRegexpConfigUtil.getSeoPatterns().get(key);
      if (pattern.getPattern().contains(";jsessionid=")) {
        if (isAnon) {
          if (UrlRegexpConfigUtil.isJSessionIdAnonEnabled()) {
            continue;
          }
        }
 else {
          if (UrlRegexpConfigUtil.isJSessionIdUserEnabled()) {
            continue;
          }
 else {
            boolean foundException=false;
            for (int i=0; i < UrlRegexpConfigUtil.getUserExceptionPatterns().size(); i++) {
              if (matcher.matches(url,UrlRegexpConfigUtil.getUserExceptionPatterns().get(i))) {
                foundException=true;
                break;
              }
            }
            if (foundException) {
              continue;
            }
          }
        }
      }
      String replacement=UrlRegexpConfigUtil.getSeoReplacements().get(key);
      if (matcher.matches(url,pattern)) {
        for (int i=1; i < matcher.getMatch().groups(); i++) {
          replacement=replacement.replaceAll("\\$" + i,matcher.getMatch().group(i));
        }
        url=replacement;
        foundMatch=true;
        break;
      }
    }
    if (!foundMatch && UrlRegexpConfigUtil.isDebugEnabled()) {
      Debug.logInfo("Can NOT find a seo transform pattern for this url: " + url,module);
    }
  }
  return url;
}
