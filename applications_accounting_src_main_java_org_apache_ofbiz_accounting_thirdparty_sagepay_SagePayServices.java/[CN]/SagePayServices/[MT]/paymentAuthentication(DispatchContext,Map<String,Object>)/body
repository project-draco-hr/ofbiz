{
  Debug.logInfo("SagePay - Entered paymentAuthentication",module);
  Debug.logInfo("SagePay paymentAuthentication context : " + context,module);
  Delegator delegator=ctx.getDelegator();
  Map<String,Object> resultMap=new HashMap<String,Object>();
  Map<String,String> props=buildSagePayProperties(context,delegator);
  String vendorTxCode=(String)context.get("vendorTxCode");
  String cardHolder=(String)context.get("cardHolder");
  String cardNumber=(String)context.get("cardNumber");
  String expiryDate=(String)context.get("expiryDate");
  String cardType=(String)context.get("cardType");
  String cv2=(String)context.get("cv2");
  String amount=(String)context.get("amount");
  String currency=(String)context.get("currency");
  String description=(String)context.get("description");
  String billingSurname=(String)context.get("billingSurname");
  String billingFirstnames=(String)context.get("billingFirstnames");
  String billingAddress=(String)context.get("billingAddress");
  String billingAddress2=(String)context.get("billingAddress2");
  String billingCity=(String)context.get("billingCity");
  String billingPostCode=(String)context.get("billingPostCode");
  String billingCountry=(String)context.get("billingCountry");
  String billingState=(String)context.get("billingState");
  String billingPhone=(String)context.get("billingPhone");
  Boolean isBillingSameAsDelivery=(Boolean)context.get("isBillingSameAsDelivery");
  String deliverySurname=(String)context.get("deliverySurname");
  String deliveryFirstnames=(String)context.get("deliveryFirstnames");
  String deliveryAddress=(String)context.get("deliveryAddress");
  String deliveryAddress2=(String)context.get("deliveryAddress2");
  String deliveryCity=(String)context.get("deliveryCity");
  String deliveryPostCode=(String)context.get("deliveryPostCode");
  String deliveryCountry=(String)context.get("deliveryCountry");
  String deliveryState=(String)context.get("deliveryState");
  String deliveryPhone=(String)context.get("deliveryPhone");
  String startDate=(String)context.get("startDate");
  String issueNumber=(String)context.get("issueNumber");
  String basket=(String)context.get("basket");
  String clientIPAddress=(String)context.get("clientIPAddress");
  Locale locale=(Locale)context.get("locale");
  HttpHost host=SagePayUtil.getHost(props);
  Map<String,String> parameters=new HashMap<String,String>();
  String vpsProtocol=props.get("protocolVersion");
  String vendor=props.get("vendor");
  String txType=props.get("authenticationTransType");
  parameters.put("VPSProtocol",vpsProtocol);
  parameters.put("TxType",txType);
  parameters.put("Vendor",vendor);
  if (vendorTxCode != null) {
    parameters.put("VendorTxCode",vendorTxCode);
  }
  if (amount != null) {
    parameters.put("Amount",amount);
  }
  if (currency != null) {
    parameters.put("Currency",currency);
  }
  if (description != null) {
    parameters.put("Description",description);
  }
  if (cardHolder != null) {
    parameters.put("CardHolder",cardHolder);
  }
  if (cardNumber != null) {
    parameters.put("CardNumber",cardNumber);
  }
  if (expiryDate != null) {
    parameters.put("ExpiryDate",expiryDate);
  }
  if (cardType != null) {
    parameters.put("CardType",cardType);
  }
  if (billingSurname != null) {
    parameters.put("BillingSurname",billingSurname);
  }
  if (billingFirstnames != null) {
    parameters.put("BillingFirstnames",billingFirstnames);
  }
  if (billingAddress != null) {
    parameters.put("BillingAddress",billingAddress);
  }
  if (billingAddress2 != null) {
    parameters.put("BillingAddress2",billingAddress2);
  }
  if (billingCity != null) {
    parameters.put("BillingCity",billingCity);
  }
  if (billingPostCode != null) {
    parameters.put("BillingPostCode",billingPostCode);
  }
  if (billingCountry != null) {
    parameters.put("BillingCountry",billingCountry);
  }
  if (billingState != null) {
    parameters.put("BillingState",billingState);
  }
  if (billingPhone != null) {
    parameters.put("BillingPhone",billingPhone);
  }
  if (isBillingSameAsDelivery != null && isBillingSameAsDelivery) {
    if (billingSurname != null) {
      parameters.put("DeliverySurname",billingSurname);
    }
    if (billingFirstnames != null) {
      parameters.put("DeliveryFirstnames",billingFirstnames);
    }
    if (billingAddress != null) {
      parameters.put("DeliveryAddress",billingAddress);
    }
    if (billingAddress2 != null) {
      parameters.put("DeliveryAddress2",billingAddress2);
    }
    if (billingCity != null) {
      parameters.put("DeliveryCity",billingCity);
    }
    if (billingPostCode != null) {
      parameters.put("DeliveryPostCode",billingPostCode);
    }
    if (billingCountry != null) {
      parameters.put("DeliveryCountry",billingCountry);
    }
    if (billingState != null) {
      parameters.put("DeliveryState",billingState);
    }
    if (billingPhone != null) {
      parameters.put("DeliveryPhone",billingPhone);
    }
  }
 else {
    if (deliverySurname != null) {
      parameters.put("DeliverySurname",deliverySurname);
    }
    if (deliveryFirstnames != null) {
      parameters.put("DeliveryFirstnames",deliveryFirstnames);
    }
    if (deliveryAddress != null) {
      parameters.put("DeliveryAddress",deliveryAddress);
    }
    if (deliveryAddress2 != null) {
      parameters.put("DeliveryAddress2",deliveryAddress2);
    }
    if (deliveryCity != null) {
      parameters.put("DeliveryCity",deliveryCity);
    }
    if (deliveryPostCode != null) {
      parameters.put("DeliveryPostCode",deliveryPostCode);
    }
    if (deliveryCountry != null) {
      parameters.put("DeliveryCountry",deliveryCountry);
    }
    if (deliveryState != null) {
      parameters.put("DeliveryState",deliveryState);
    }
    if (deliveryPhone != null) {
      parameters.put("DeliveryPhone",deliveryPhone);
    }
  }
  if (cv2 != null) {
    parameters.put("CV2",cv2);
  }
  if (startDate != null) {
    parameters.put("StartDate",startDate);
  }
  if (issueNumber != null) {
    parameters.put("IssueNumber",issueNumber);
  }
  if (basket != null) {
    parameters.put("Basket",basket);
  }
  if (clientIPAddress != null) {
    parameters.put("ClientIPAddress",clientIPAddress);
  }
  try (CloseableHttpClient httpClient=SagePayUtil.getHttpClient()){
    String successMessage=null;
    HttpPost httpPost=SagePayUtil.getHttpPost(props.get("authenticationUrl"),parameters);
    HttpResponse response=httpClient.execute(host,httpPost);
    Map<String,String> responseData=SagePayUtil.getResponseData(response);
    String status=responseData.get("Status");
    String statusDetail=responseData.get("StatusDetail");
    resultMap.put("status",status);
    resultMap.put("statusDetail",statusDetail);
    resultMap.put("vendorTxCode",vendorTxCode);
    resultMap.put("amount",amount);
    resultMap.put("transactionType",txType);
    if ("OK".equals(status)) {
      resultMap.put("vpsTxId",responseData.get("VPSTxId"));
      resultMap.put("securityKey",responseData.get("SecurityKey"));
      resultMap.put("txAuthNo",responseData.get("TxAuthNo"));
      resultMap.put("avsCv2",responseData.get("AVSCV2"));
      resultMap.put("addressResult",responseData.get("AddressResult"));
      resultMap.put("postCodeResult",responseData.get("PostCodeResult"));
      resultMap.put("cv2Result",responseData.get("CV2Result"));
      successMessage="Payment authorized";
    }
    if ("NOTAUTHED".equals(status)) {
      resultMap.put("vpsTxId",responseData.get("VPSTxId"));
      resultMap.put("securityKey",responseData.get("SecurityKey"));
      resultMap.put("avsCv2",responseData.get("AVSCV2"));
      resultMap.put("addressResult",responseData.get("AddressResult"));
      resultMap.put("postCodeResult",responseData.get("PostCodeResult"));
      resultMap.put("cv2Result",responseData.get("CV2Result"));
      successMessage="Payment not authorized";
    }
    if ("MALFORMED".equals(status)) {
      resultMap.put("vpsTxId",responseData.get("VPSTxId"));
      resultMap.put("securityKey",responseData.get("SecurityKey"));
      resultMap.put("avsCv2",responseData.get("AVSCV2"));
      resultMap.put("addressResult",responseData.get("AddressResult"));
      resultMap.put("postCodeResult",responseData.get("PostCodeResult"));
      resultMap.put("cv2Result",responseData.get("CV2Result"));
    }
    if ("INVALID".equals(status)) {
      resultMap.put("vpsTxId",responseData.get("VPSTxId"));
      resultMap.put("securityKey",responseData.get("SecurityKey"));
      resultMap.put("avsCv2",responseData.get("AVSCV2"));
      resultMap.put("addressResult",responseData.get("AddressResult"));
      resultMap.put("postCodeResult",responseData.get("PostCodeResult"));
      resultMap.put("cv2Result",responseData.get("CV2Result"));
    }
    if ("REJECTED".equals(status)) {
      resultMap.put("vpsTxId",responseData.get("VPSTxId"));
      resultMap.put("securityKey",responseData.get("SecurityKey"));
      resultMap.put("avsCv2",responseData.get("AVSCV2"));
      resultMap.put("addressResult",responseData.get("AddressResult"));
      resultMap.put("postCodeResult",responseData.get("PostCodeResult"));
      resultMap.put("cv2Result",responseData.get("CV2Result"));
    }
    resultMap.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    resultMap.put(ModelService.SUCCESS_MESSAGE,successMessage);
  }
 catch (  UnsupportedEncodingException uee) {
    Debug.logError(uee,"Error occurred in encoding parameters for HttpPost (" + uee.getMessage() + ")",module);
    resultMap=ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSagePayErrorEncodingParameters",UtilMisc.toMap("errorString",uee.getMessage()),locale));
  }
catch (  ClientProtocolException cpe) {
    Debug.logError(cpe,"Error occurred in HttpClient execute(" + cpe.getMessage() + ")",module);
    resultMap=ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSagePayErrorHttpClientExecute",UtilMisc.toMap("errorString",cpe.getMessage()),locale));
  }
catch (  IOException ioe) {
    Debug.logError(ioe,"Error occurred in HttpClient execute or getting response (" + ioe.getMessage() + ")",module);
    resultMap=ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingSagePayErrorHttpClientExecuteOrGettingResponse",UtilMisc.toMap("errorString",ioe.getMessage()),locale));
  }
  return resultMap;
}
