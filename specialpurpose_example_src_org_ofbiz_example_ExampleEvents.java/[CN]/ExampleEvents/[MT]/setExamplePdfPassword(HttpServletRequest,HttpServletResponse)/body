{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  Locale locale=UtilHttp.getLocale(request);
  ServletContext servletContext=request.getSession().getServletContext();
  Map<String,Object> requestParams=UtilHttp.getParameterMap(request);
  String password=(String)requestParams.get("PASSWORD");
  String confirmPassword=(String)requestParams.get("CONFIRM_PASSWORD");
  if (UtilValidate.isEmpty(password) && UtilValidate.isEmpty(confirmPassword) && (UtilValidate.isEmpty(exampleDefaultOwnerPassword) || !useExampleDefaultOwnerPassword)) {
    return "nopassword";
  }
  if (UtilValidate.isNotEmpty(password) && !password.equals(confirmPassword)) {
    String errMsg=UtilProperties.getMessage(resourceExample,"password_not_equal_confirm_password",locale);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  String screenLocation="component://example/widget/example/ExampleScreens.xml";
  String reportScreenName="ExampleReport";
  Writer reportWriter=new StringWriter();
  try {
    ScreenStringRenderer foScreenRenderer=new MacroScreenRenderer(EntityUtilProperties.getPropertyValue("widget","screenfop.name",delegator),EntityUtilProperties.getPropertyValue("widget","screenfop.screenrenderer",delegator));
    FormStringRenderer formStringRenderer=new MacroFormRenderer(EntityUtilProperties.getPropertyValue("widget","screenfop.formrenderer",delegator),request,response);
    ScreenRenderer screens=new ScreenRenderer(reportWriter,null,foScreenRenderer);
    screens.populateContextForRequest(request,response,servletContext);
    screens.getContext().put("formStringRenderer",formStringRenderer);
    screens.getContext().put("simpleEncoder",UtilCodec.getEncoder(EntityUtilProperties.getPropertyValue("widget","screenfop.encoder",delegator)));
    screens.render(screenLocation,reportScreenName);
  }
 catch (  GeneralException e) {
    String errMsg="General error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  IOException e) {
    String errMsg="IO error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  SAXException e) {
    String errMsg="SAX (XML parse) error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  ParserConfigurationException e) {
    String errMsg="Parser configuration error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
catch (  TemplateException e) {
    String errMsg="Freemarker template error rendering screen [" + screenLocation + "]: "+ e.toString();
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  StreamSource src=new StreamSource(new StringReader(reportWriter.toString()));
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    Fop fop=ApacheFopWorker.createFopInstance(out,MimeConstants.MIME_PDF);
    ApacheFopWorker.transform(src,null,fop);
    out.flush();
    out.close();
  }
 catch (  FOPException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    Debug.logError(e,module);
    return "error";
  }
catch (  IOException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    Debug.logError(e,module);
    return "error";
  }
  ByteArrayInputStream is=new ByteArrayInputStream(out.toByteArray());
  PDDocument document=null;
  try {
    document=PDDocument.load(is);
    int keyLength=40;
    AccessPermission ap=new AccessPermission();
    String ownerPassword=exampleDefaultOwnerPassword;
    if (UtilValidate.isEmpty(ownerPassword) || !useExampleDefaultOwnerPassword) {
      ownerPassword=password;
    }
    StandardProtectionPolicy spp=new StandardProtectionPolicy(ownerPassword,password,ap);
    spp.setEncryptionKeyLength(keyLength);
    document.protect(spp);
  }
 catch (  IOException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    Debug.logError(e,module);
    return "error";
  }
catch (  BadSecurityHandlerException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    Debug.logError(e,module);
    return "error";
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
    }
 catch (    IOException e) {
    }
    try {
      if (document != null) {
        document.close();
      }
    }
 catch (    IOException e) {
    }
  }
  out=new ByteArrayOutputStream();
  try {
    document.save(out);
    response.setContentType(MimeConstants.MIME_PDF);
    response.setContentLength(out.size());
    out.flush();
    out.close();
    response.getOutputStream().write(out.toByteArray());
    response.getOutputStream().flush();
  }
 catch (  COSVisitorException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    Debug.logError(e,module);
    return "error";
  }
catch (  IOException e) {
    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());
    Debug.logError(e,module);
    return "error";
  }
  return "success";
}
