{
  Map<String,Object> results=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String productId=(String)context.get("productId");
  try {
    Map<String,Object> featuresResults=dispatcher.runSync("getProductFeaturesByType",UtilMisc.toMap("productId",productId));
    Map<String,List<GenericValue>> features;
    if (featuresResults.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_SUCCESS)) {
      features=UtilGenerics.checkMap(featuresResults.get("productFeaturesByType"));
    }
 else {
      return ServiceUtil.returnError((String)featuresResults.get(ModelService.ERROR_MESSAGE_LIST));
    }
    List<Map<String,Object>> oldCombinations=FastList.newInstance();
    for (    Map.Entry<String,List<GenericValue>> entry : features.entrySet()) {
      List<GenericValue> currentFeatures=entry.getValue();
      List<Map<String,Object>> newCombinations=FastList.newInstance();
      List<Map<String,Object>> combinations;
      if (oldCombinations.size() > 0) {
        combinations=oldCombinations;
      }
 else {
        combinations=FastList.newInstance();
      }
      if (combinations.size() == 0) {
        for (        GenericValue currentFeature : currentFeatures) {
          if (currentFeature.getString("productFeatureApplTypeId").equals("SELECTABLE_FEATURE")) {
            Map<String,Object> newCombination=FastMap.newInstance();
            List<GenericValue> newFeatures=FastList.newInstance();
            List<String> newFeatureIds=FastList.newInstance();
            if (currentFeature.getString("idCode") != null) {
              newCombination.put("defaultVariantProductId",productId + currentFeature.getString("idCode"));
            }
 else {
              newCombination.put("defaultVariantProductId",productId);
            }
            newFeatures.add(currentFeature);
            newFeatureIds.add(currentFeature.getString("productFeatureId"));
            newCombination.put("curProductFeatureAndAppls",newFeatures);
            newCombination.put("curProductFeatureIds",newFeatureIds);
            newCombinations.add(newCombination);
          }
        }
      }
 else {
        for (        Map<String,Object> combination : combinations) {
          for (          GenericValue currentFeature : currentFeatures) {
            if (currentFeature.getString("productFeatureApplTypeId").equals("SELECTABLE_FEATURE")) {
              Map<String,Object> newCombination=FastMap.newInstance();
              List<GenericValue> newFeatures=UtilMisc.makeListWritable(UtilGenerics.<GenericValue>checkList(combination.get("curProductFeatureAndAppls")));
              List<String> newFeatureIds=UtilMisc.makeListWritable(UtilGenerics.<String>checkList(combination.get("curProductFeatureIds")));
              if (currentFeature.getString("idCode") != null) {
                newCombination.put("defaultVariantProductId",combination.get("defaultVariantProductId") + currentFeature.getString("idCode"));
              }
 else {
                newCombination.put("defaultVariantProductId",combination.get("defaultVariantProductId"));
              }
              newFeatures.add(currentFeature);
              newFeatureIds.add(currentFeature.getString("productFeatureId"));
              newCombination.put("curProductFeatureAndAppls",newFeatures);
              newCombination.put("curProductFeatureIds",newFeatureIds);
              newCombinations.add(newCombination);
            }
          }
        }
      }
      if (newCombinations.size() >= oldCombinations.size()) {
        oldCombinations=newCombinations;
      }
    }
    int defaultCodeCounter=1;
    Set<String> defaultVariantProductIds=FastSet.newInstance();
    defaultVariantProductIds.add(productId);
    for (    Map<String,Object> combination : oldCombinations) {
      if (defaultVariantProductIds.contains(combination.get("defaultVariantProductId"))) {
        combination.put("defaultVariantProductId",combination.get("defaultVariantProductId") + "-" + (defaultCodeCounter < 10 ? "0" + defaultCodeCounter : "" + defaultCodeCounter));
        defaultCodeCounter++;
      }
      defaultVariantProductIds.add((String)combination.get("defaultVariantProductId"));
      results=dispatcher.runSync("getAllExistingVariants",UtilMisc.toMap("productId",productId,"productFeatureAppls",combination.get("curProductFeatureIds")));
      combination.put("existingVariantProductIds",results.get("variantProductIds"));
    }
    results=ServiceUtil.returnSuccess();
    results.put("featureCombinations",oldCombinations);
  }
 catch (  GenericServiceException ex) {
    Debug.logError(ex,ex.getMessage(),module);
    return ServiceUtil.returnError(ex.getMessage());
  }
  return results;
}
