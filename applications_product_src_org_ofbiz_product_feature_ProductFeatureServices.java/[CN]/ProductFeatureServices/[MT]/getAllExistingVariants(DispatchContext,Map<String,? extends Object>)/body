{
  Map<String,Object> results=FastMap.newInstance();
  GenericDelegator delegator=dctx.getDelegator();
  String productId=(String)context.get("productId");
  List<String> curProductFeatureAndAppls=UtilGenerics.checkList(context.get("productFeatureAppls"));
  List<String> existingVariantProductIds=FastList.newInstance();
  try {
    List<GenericValue> productAssocs=EntityUtil.filterByDate(delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",productId,"productAssocTypeId","PRODUCT_VARIANT")));
    for (    GenericValue productAssoc : productAssocs) {
      boolean hasAllFeatures=true;
      for (      String productFeatureAndAppl : curProductFeatureAndAppls) {
        Map<String,String> findByMap=UtilMisc.toMap("productId",productAssoc.getString("productIdTo"),"productFeatureId",productFeatureAndAppl,"productFeatureApplTypeId","STANDARD_FEATURE");
        List<GenericValue> standardProductFeatureAndAppls=EntityUtil.filterByDate(delegator.findByAnd("ProductFeatureAppl",findByMap));
        if (UtilValidate.isEmpty(standardProductFeatureAndAppls)) {
          hasAllFeatures=false;
          break;
        }
 else {
        }
      }
      if (hasAllFeatures) {
        existingVariantProductIds.add(productAssoc.getString("productIdTo"));
      }
    }
    results=ServiceUtil.returnSuccess();
    results.put("variantProductIds",existingVariantProductIds);
  }
 catch (  GenericEntityException ex) {
    Debug.logError(ex,ex.getMessage(),module);
    return ServiceUtil.returnError(ex.getMessage());
  }
  return results;
}
