{
  if (info.get("startDateTime") == null)   throw new RecurrenceInfoException("Recurrence startDateTime cannot be null.");
  long startTime=info.getTimestamp("startDateTime").getTime();
  if (startTime > 0) {
    int nanos=info.getTimestamp("startDateTime").getNanos();
    startTime+=(nanos / 1000000);
  }
 else {
    throw new RecurrenceInfoException("Recurrence startDateTime must have a value.");
  }
  startDate=new Date(startTime);
  try {
    rRulesList=new ArrayList<RecurrenceRule>();
    for (    GenericValue value : info.getRelated("RecurrenceRule",null,null,false)) {
      rRulesList.add(new RecurrenceRule(value));
    }
  }
 catch (  GenericEntityException gee) {
    rRulesList=null;
  }
catch (  RecurrenceRuleException rre) {
    throw new RecurrenceInfoException("Illegal rule format.",rre);
  }
  try {
    eRulesList=new ArrayList<RecurrenceRule>();
    for (    GenericValue value : info.getRelated("ExceptionRecurrenceRule",null,null,false)) {
      eRulesList.add(new RecurrenceRule(value));
    }
  }
 catch (  GenericEntityException gee) {
    eRulesList=null;
  }
catch (  RecurrenceRuleException rre) {
    throw new RecurrenceInfoException("Illegal rule format",rre);
  }
  rDateList=RecurrenceUtil.parseDateList(StringUtil.split(info.getString("recurrenceDateTimes"),","));
  eDateList=RecurrenceUtil.parseDateList(StringUtil.split(info.getString("exceptionDateTimes"),","));
  Collections.sort(rDateList);
  Collections.sort(eDateList);
}
