{
  if (productPartRules != null) {
    GenericValue rule=null;
    for (int i=0; i < productPartRules.size(); i++) {
      rule=productPartRules.get(i);
      String ruleCondition=(String)rule.get("productFeature");
      String ruleOperator=(String)rule.get("ruleOperator");
      String newPart=(String)rule.get("productIdInSubst");
      BigDecimal ruleQuantity=BigDecimal.ZERO;
      try {
        ruleQuantity=rule.getBigDecimal("quantity");
      }
 catch (      Exception exc) {
        ruleQuantity=BigDecimal.ZERO;
      }
      GenericValue feature=null;
      boolean ruleSatisfied=false;
      if (ruleCondition == null || ruleCondition.equals("")) {
        ruleSatisfied=true;
      }
 else {
        if (productFeatures != null) {
          for (int j=0; j < productFeatures.size(); j++) {
            feature=productFeatures.get(j);
            if (ruleCondition.equals(feature.get("productFeatureId"))) {
              ruleSatisfied=true;
              break;
            }
          }
        }
      }
      if (ruleSatisfied && ruleOperator.equals("OR")) {
        BOMNode tmpNode=oneChildNode;
        if (newPart == null || newPart.equals("")) {
          oneChildNode=null;
        }
 else {
          BOMNode origNode=oneChildNode;
          oneChildNode=new BOMNode(newPart,delegator,dispatcher,userLogin);
          oneChildNode.setTree(tree);
          oneChildNode.setSubstitutedNode(tmpNode);
          oneChildNode.setRuleApplied(rule);
          oneChildNode.setProductAssoc(origNode.getProductAssoc());
          oneChildNode.setScrapFactor(origNode.getScrapFactor());
          if (ruleQuantity.compareTo(BigDecimal.ZERO) > 0) {
            oneChildNode.setQuantityMultiplier(ruleQuantity);
          }
 else {
            oneChildNode.setQuantityMultiplier(origNode.getQuantityMultiplier());
          }
        }
        break;
      }
    }
  }
  return oneChildNode;
}
