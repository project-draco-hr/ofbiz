{
  BOMNode oneChildNode=new BOMNode((String)node.get("productIdTo"),delegator,dispatcher,userLogin);
  oneChildNode.setTree(tree);
  oneChildNode.setProductAssoc(node);
  try {
    oneChildNode.setQuantityMultiplier(node.getBigDecimal("quantity"));
  }
 catch (  Exception nfe) {
    oneChildNode.setQuantityMultiplier(BigDecimal.ONE);
  }
  try {
    BigDecimal percScrapFactor=node.getBigDecimal("scrapFactor");
    BigDecimal bdHundred=new BigDecimal("100");
    if (percScrapFactor.compareTo(bdHundred.negate()) > 0 && percScrapFactor.compareTo(bdHundred) < 0) {
      percScrapFactor=BigDecimal.ONE.add(percScrapFactor.movePointLeft(2));
    }
 else {
      Debug.logWarning("A scrap factor of [" + percScrapFactor + "] was ignored",module);
      percScrapFactor=BigDecimal.ONE;
    }
    oneChildNode.setScrapFactor(percScrapFactor);
  }
 catch (  Exception nfe) {
    oneChildNode.setScrapFactor(BigDecimal.ONE);
  }
  BOMNode newNode=oneChildNode;
  if (oneChildNode.isVirtual()) {
    List<GenericValue> productPartRules=EntityQuery.use(delegator).from("ProductManufacturingRule").where("productId",productIdForRules,"productIdFor",node.get("productId"),"productIdIn",node.get("productIdTo")).filterByDate(inDate).queryList();
    if (substitutedNode != null) {
      productPartRules.addAll(EntityQuery.use(delegator).from("ProductManufacturingRule").where("productId",productIdForRules,"productIdFor",substitutedNode.getProduct().get("productId"),"productIdIn",node.get("productIdTo")).filterByDate(inDate).queryList());
    }
    newNode=substituteNode(oneChildNode,productFeatures,productPartRules);
    if (newNode.equals(oneChildNode)) {
      List<GenericValue> genericLinkRules=EntityQuery.use(delegator).from("ProductManufacturingRule").where("productIdFor",node.get("productId"),"productIdIn",node.get("productIdTo")).filterByDate(inDate).queryList();
      if (substitutedNode != null) {
        genericLinkRules.addAll(EntityQuery.use(delegator).from("ProductManufacturingRule").where("productIdFor",substitutedNode.getProduct().get("productId"),"productIdIn",node.get("productIdTo")).filterByDate(inDate).queryList());
      }
      newNode=substituteNode(oneChildNode,productFeatures,genericLinkRules);
      if (newNode.equals(oneChildNode)) {
        List<GenericValue> genericNodeRules=EntityQuery.use(delegator).from("ProductManufacturingRule").where("productIdIn",node.get("productIdTo")).orderBy("ruleSeqId").filterByDate(inDate).queryList();
        newNode=null;
        newNode=substituteNode(oneChildNode,productFeatures,genericNodeRules);
        if (newNode.equals(oneChildNode)) {
          if (UtilValidate.isNotEmpty(genericNodeRules)) {
          }
          if (newNode.equals(oneChildNode)) {
            Map<String,String> selectedFeatures=FastMap.newInstance();
            if (productFeatures != null) {
              GenericValue feature=null;
              for (int j=0; j < productFeatures.size(); j++) {
                feature=productFeatures.get(j);
                selectedFeatures.put(feature.getString("productFeatureTypeId"),feature.getString("productFeatureId"));
              }
            }
            if (selectedFeatures.size() > 0) {
              Map<String,Object> context=FastMap.newInstance();
              context.put("productId",node.get("productIdTo"));
              context.put("selectedFeatures",selectedFeatures);
              Map<String,Object> storeResult=null;
              GenericValue variantProduct=null;
              try {
                storeResult=dispatcher.runSync("getProductVariant",context);
                List<GenericValue> variantProducts=UtilGenerics.checkList(storeResult.get("products"));
                if (variantProducts.size() == 1) {
                  variantProduct=variantProducts.get(0);
                }
              }
 catch (              GenericServiceException e) {
                if (Debug.infoOn())                 Debug.logInfo("Error calling getProductVariant service " + e.getMessage(),module);
              }
              if (variantProduct != null) {
                newNode=new BOMNode(variantProduct,dispatcher,userLogin);
                newNode.setTree(tree);
                newNode.setSubstitutedNode(oneChildNode);
                newNode.setQuantityMultiplier(oneChildNode.getQuantityMultiplier());
                newNode.setScrapFactor(oneChildNode.getScrapFactor());
                newNode.setProductAssoc(oneChildNode.getProductAssoc());
              }
            }
          }
        }
      }
    }
  }
  return newNode;
}
