{
  if (product == null) {
    throw new GenericEntityException("product is null");
  }
  if (inDate == null)   inDate=new Date();
  bomTypeId=partBomTypeId;
  List rows=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",product.get("productId"),"productAssocTypeId",partBomTypeId),UtilMisc.toList("sequenceNum"));
  rows=EntityUtil.filterByDate(rows,inDate);
  if ((UtilValidate.isEmpty(rows)) && substitutedNode != null) {
    rows=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",substitutedNode.getProduct().get("productId"),"productAssocTypeId",partBomTypeId),UtilMisc.toList("sequenceNum"));
    rows=EntityUtil.filterByDate(rows,inDate);
  }
  children=new ArrayList(rows);
  childrenNodes=new ArrayList();
  Iterator childrenIterator=children.iterator();
  GenericValue oneChild=null;
  BOMNode oneChildNode=null;
  while (childrenIterator.hasNext()) {
    oneChild=(GenericValue)childrenIterator.next();
    oneChildNode=configurator(oneChild,productFeatures,getRootNode().getProductForRules(),inDate);
    if (oneChildNode != null) {
      oneChildNode.setParentNode(this);
switch (type) {
case BOMTree.EXPLOSION:
        oneChildNode.loadChildren(partBomTypeId,inDate,productFeatures,BOMTree.EXPLOSION);
      break;
case BOMTree.EXPLOSION_MANUFACTURING:
    if (!oneChildNode.isWarehouseManaged()) {
      oneChildNode.loadChildren(partBomTypeId,inDate,productFeatures,type);
    }
  break;
}
}
childrenNodes.add(oneChildNode);
}
}
