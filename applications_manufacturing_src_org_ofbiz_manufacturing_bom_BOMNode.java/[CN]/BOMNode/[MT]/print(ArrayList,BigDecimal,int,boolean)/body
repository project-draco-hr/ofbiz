{
  this.depth=depth;
  String serviceName=null;
  if (this.productAssoc != null && this.productAssoc.getString("estimateCalcMethod") != null) {
    try {
      GenericValue genericService=productAssoc.getRelatedOne("CustomMethod");
      if (genericService != null && genericService.getString("customMethodName") != null) {
        serviceName=genericService.getString("customMethodName");
      }
    }
 catch (    Exception exc) {
    }
  }
  if (serviceName != null) {
    Map resultContext=null;
    Map arguments=UtilMisc.toMap("neededQuantity",quantity.multiply(quantityMultiplier),"amount",tree != null ? tree.getRootAmount() : BigDecimal.ZERO);
    BigDecimal width=null;
    if (getProduct().get("productWidth") != null) {
      width=getProduct().getBigDecimal("productWidth");
    }
    if (width == null) {
      width=BigDecimal.ZERO;
    }
    arguments.put("width",width);
    Map inputContext=UtilMisc.toMap("arguments",arguments,"userLogin",userLogin);
    try {
      resultContext=dispatcher.runSync(serviceName,inputContext);
      BigDecimal calcQuantity=(BigDecimal)resultContext.get("quantity");
      if (calcQuantity != null) {
        this.quantity=calcQuantity;
      }
    }
 catch (    GenericServiceException e) {
    }
  }
 else {
    this.quantity=quantity.multiply(quantityMultiplier).multiply(scrapFactor);
  }
  arr.add(this);
  GenericValue oneChild=null;
  BOMNode oneChildNode=null;
  depth++;
  for (int i=0; i < children.size(); i++) {
    oneChild=(GenericValue)children.get(i);
    oneChildNode=(BOMNode)childrenNodes.get(i);
    if (excludeWIPs && "WIP".equals(oneChildNode.getProduct().getString("productTypeId"))) {
      continue;
    }
    if (oneChildNode != null) {
      oneChildNode.print(arr,this.quantity,depth,excludeWIPs);
    }
  }
}
