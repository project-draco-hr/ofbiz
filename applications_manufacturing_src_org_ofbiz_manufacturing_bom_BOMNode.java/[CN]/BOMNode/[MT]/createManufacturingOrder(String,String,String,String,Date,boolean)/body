{
  String productionRunId=null;
  if (isManufactured()) {
    BOMNode oneChildNode=null;
    ArrayList childProductionRuns=new ArrayList();
    for (int i=0; i < childrenNodes.size(); i++) {
      oneChildNode=(BOMNode)childrenNodes.get(i);
      if (oneChildNode != null) {
        String childProductionRunId=oneChildNode.createManufacturingOrder(null,null,shipmentId,facilityId,date,false);
        if (childProductionRunId != null) {
          childProductionRuns.add(childProductionRunId);
        }
      }
    }
    Timestamp startDate=UtilDateTime.toTimestamp(UtilDateTime.toDateTimeString(date));
    Map serviceContext=new HashMap();
    if (!useSubstitute) {
      serviceContext.put("productId",getProduct().getString("productId"));
      serviceContext.put("facilityId",getProduct().getString("facilityId"));
    }
 else {
      serviceContext.put("productId",getSubstitutedNode().getProduct().getString("productId"));
      serviceContext.put("facilityId",getSubstitutedNode().getProduct().getString("facilityId"));
    }
    if (facilityId != null) {
      serviceContext.put("facilityId",facilityId);
    }
    if (shipmentId != null) {
      serviceContext.put("workEffortName","SP_" + shipmentId + "_"+ serviceContext.get("productId"));
    }
    serviceContext.put("pRQuantity",new Double(getQuantity()));
    serviceContext.put("startDate",startDate);
    serviceContext.put("userLogin",userLogin);
    Map resultService=null;
    try {
      resultService=dispatcher.runSync("createProductionRun",serviceContext);
      productionRunId=(String)resultService.get("productionRunId");
    }
 catch (    GenericServiceException e) {
      Debug.logError("Problem calling the createProductionRun service",module);
    }
    try {
      if (productionRunId != null) {
        if (orderId != null && orderItemSeqId != null) {
          delegator.create("WorkOrderItemFulfillment",UtilMisc.toMap("workEffortId",productionRunId,"orderId",orderId,"orderItemSeqId",orderItemSeqId));
        }
        for (int i=0; i < childProductionRuns.size(); i++) {
          delegator.create("WorkEffortAssoc",UtilMisc.toMap("workEffortIdFrom",(String)childProductionRuns.get(i),"workEffortIdTo",productionRunId,"workEffortAssocTypeId","WORK_EFF_PRECEDENCY","fromDate",startDate));
        }
      }
    }
 catch (    GenericEntityException e) {
    }
  }
  return productionRunId;
}
