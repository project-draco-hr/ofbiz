{
  if (product == null) {
    throw new GenericEntityException("product is null");
  }
  if (inDate == null)   inDate=new Date();
  bomTypeId=partBomTypeId;
  List rows=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productIdTo",product.get("productId"),"productAssocTypeId",partBomTypeId),UtilMisc.toList("sequenceNum"));
  rows=EntityUtil.filterByDate(rows,inDate);
  if ((UtilValidate.isEmpty(rows)) && substitutedNode != null) {
    rows=delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productIdTo",substitutedNode.getProduct().get("productId"),"productAssocTypeId",partBomTypeId),UtilMisc.toList("sequenceNum"));
    rows=EntityUtil.filterByDate(rows,inDate);
  }
  children=new ArrayList(rows);
  childrenNodes=new ArrayList();
  Iterator childrenIterator=children.iterator();
  GenericValue oneChild=null;
  BOMNode oneChildNode=null;
  while (childrenIterator.hasNext()) {
    oneChild=(GenericValue)childrenIterator.next();
    oneChildNode=new BOMNode(oneChild.getString("productId"),delegator,dispatcher,userLogin);
    if (oneChildNode != null) {
      oneChildNode.setParentNode(this);
      oneChildNode.setTree(tree);
      oneChildNode.loadParents(partBomTypeId,inDate,productFeatures);
    }
    childrenNodes.add(oneChildNode);
  }
}
