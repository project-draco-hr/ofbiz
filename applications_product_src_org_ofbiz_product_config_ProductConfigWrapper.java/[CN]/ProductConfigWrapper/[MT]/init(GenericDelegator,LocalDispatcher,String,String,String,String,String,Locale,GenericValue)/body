{
  product=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
  if (product == null || !product.getString("productTypeId").equals("AGGREGATED")) {
    throw new ProductConfigWrapperException("Product " + productId + " is not an AGGREGATED product.");
  }
  this.dispatcher=dispatcher;
  this.productStoreId=productStoreId;
  this.catalogId=catalogId;
  this.webSiteId=webSiteId;
  this.currencyUomId=currencyUomId;
  this.delegator=delegator;
  this.autoUserLogin=autoUserLogin;
  Map priceContext=UtilMisc.toMap("product",product,"prodCatalogId",catalogId,"webSiteId",webSiteId,"productStoreId",productStoreId,"currencyUomId",currencyUomId,"autoUserLogin",autoUserLogin);
  Map priceMap=dispatcher.runSync("calculateProductPrice",priceContext);
  Double price=(Double)priceMap.get("price");
  if (price != null) {
    basePrice=price.doubleValue();
  }
  questions=FastList.newInstance();
  List questionsValues=FastList.newInstance();
  if (product.getString("productTypeId") != null && product.getString("productTypeId").equals("AGGREGATED")) {
    questionsValues=delegator.findByAnd("ProductConfig",UtilMisc.toMap("productId",productId),UtilMisc.toList("sequenceNum"));
    questionsValues=EntityUtil.filterByDate(questionsValues);
    Iterator questionsValuesIt=questionsValues.iterator();
    Set itemIds=FastSet.newInstance();
    while (questionsValuesIt.hasNext()) {
      ConfigItem oneQuestion=new ConfigItem((GenericValue)questionsValuesIt.next());
      oneQuestion.setContent(locale,"text/html");
      if (itemIds.contains(oneQuestion.getConfigItem().getString("configItemId"))) {
        oneQuestion.setFirst(false);
      }
 else {
        itemIds.add(oneQuestion.getConfigItem().getString("configItemId"));
      }
      questions.add(oneQuestion);
      List configOptions=delegator.findByAnd("ProductConfigOption",UtilMisc.toMap("configItemId",oneQuestion.getConfigItemAssoc().getString("configItemId")),UtilMisc.toList("sequenceNum"));
      Iterator configOptionsIt=configOptions.iterator();
      while (configOptionsIt.hasNext()) {
        ConfigOption option=new ConfigOption(delegator,dispatcher,(GenericValue)configOptionsIt.next(),oneQuestion,catalogId,webSiteId,currencyUomId,autoUserLogin);
        oneQuestion.addOption(option);
      }
    }
    this.setDefaultPrice();
  }
}
