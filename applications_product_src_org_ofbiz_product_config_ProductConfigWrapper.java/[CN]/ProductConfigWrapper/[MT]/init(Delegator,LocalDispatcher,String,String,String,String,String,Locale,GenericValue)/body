{
  product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();
  if (product == null || !product.getString("productTypeId").equals("AGGREGATED") && !product.getString("productTypeId").equals("AGGREGATED_SERVICE")) {
    throw new ProductConfigWrapperException("Product " + productId + " is not an AGGREGATED product.");
  }
  this.dispatcher=dispatcher;
  this.dispatcherName=dispatcher.getName();
  this.productStoreId=productStoreId;
  this.catalogId=catalogId;
  this.webSiteId=webSiteId;
  this.currencyUomId=currencyUomId;
  this.delegator=delegator;
  this.delegatorName=delegator.getDelegatorName();
  this.autoUserLogin=autoUserLogin;
  Map<String,Object> priceContext=UtilMisc.toMap("product",product,"prodCatalogId",catalogId,"webSiteId",webSiteId,"productStoreId",productStoreId,"currencyUomId",currencyUomId,"autoUserLogin",autoUserLogin);
  Map<String,Object> priceMap=dispatcher.runSync("calculateProductPrice",priceContext);
  BigDecimal originalListPrice=(BigDecimal)priceMap.get("listPrice");
  BigDecimal price=(BigDecimal)priceMap.get("price");
  if (originalListPrice != null) {
    listPrice=originalListPrice;
  }
  if (price != null) {
    basePrice=price;
  }
  questions=FastList.newInstance();
  if ("AGGREGATED".equals(product.getString("productTypeId")) || "AGGREGATED_SERVICE".equals(product.getString("productTypeId"))) {
    List<GenericValue> questionsValues=delegator.findByAnd("ProductConfig",UtilMisc.toMap("productId",productId),UtilMisc.toList("sequenceNum"),false);
    questionsValues=EntityUtil.filterByDate(questionsValues);
    Set<String> itemIds=FastSet.newInstance();
    for (    GenericValue questionsValue : questionsValues) {
      ConfigItem oneQuestion=new ConfigItem(questionsValue);
      oneQuestion.setContent(locale,"text/html");
      if (itemIds.contains(oneQuestion.getConfigItem().getString("configItemId"))) {
        oneQuestion.setFirst(false);
      }
 else {
        itemIds.add(oneQuestion.getConfigItem().getString("configItemId"));
      }
      questions.add(oneQuestion);
      List<GenericValue> configOptions=delegator.findByAnd("ProductConfigOption",UtilMisc.toMap("configItemId",oneQuestion.getConfigItemAssoc().getString("configItemId")),UtilMisc.toList("sequenceNum"),false);
      for (      GenericValue configOption : configOptions) {
        ConfigOption option=new ConfigOption(delegator,dispatcher,configOption,oneQuestion,catalogId,webSiteId,currencyUomId,autoUserLogin);
        oneQuestion.addOption(option);
      }
    }
    this.setDefaultPrice();
  }
}
