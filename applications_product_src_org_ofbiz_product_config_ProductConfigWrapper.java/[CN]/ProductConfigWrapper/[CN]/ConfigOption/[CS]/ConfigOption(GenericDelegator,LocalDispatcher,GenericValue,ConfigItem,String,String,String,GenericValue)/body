{
  configOption=option;
  parentConfigItem=configItem;
  componentList=option.getRelated("ConfigOptionProductConfigProduct");
  for (  GenericValue oneComponent : componentList) {
    BigDecimal price=BigDecimal.ZERO;
    Map<String,Object> fieldMap=UtilMisc.toMap("product",oneComponent.getRelatedOne("ProductProduct"),"prodCatalogId",catalogId,"webSiteId",webSiteId,"currencyUomId",currencyUomId,"productPricePurposeId","COMPONENT_PRICE","autoUserLogin",autoUserLogin);
    Map<String,Object> priceMap=dispatcher.runSync("calculateProductPrice",fieldMap);
    BigDecimal componentPrice=(BigDecimal)priceMap.get("price");
    Boolean validPriceFound=(Boolean)priceMap.get("validPriceFound");
    BigDecimal mult=BigDecimal.ONE;
    if (oneComponent.getBigDecimal("quantity") != null) {
      mult=oneComponent.getBigDecimal("quantity");
    }
    if (mult.compareTo(BigDecimal.ZERO) == 0) {
      mult=BigDecimal.ONE;
    }
    if (componentPrice != null && validPriceFound.booleanValue()) {
      price=componentPrice;
    }
 else {
      fieldMap.put("productPricePurposeId","PURCHASE");
      Map<String,Object> purchasePriceResultMap=dispatcher.runSync("calculateProductPrice",fieldMap);
      BigDecimal purchasePrice=(BigDecimal)purchasePriceResultMap.get("price");
      if (purchasePrice != null) {
        price=purchasePrice;
      }
    }
    optionPrice=optionPrice.add(price.multiply(mult));
  }
}
