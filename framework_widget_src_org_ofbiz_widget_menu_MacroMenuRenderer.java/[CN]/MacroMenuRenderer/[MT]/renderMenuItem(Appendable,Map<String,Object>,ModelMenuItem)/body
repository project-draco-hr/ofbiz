{
  if (isHideIfSelected(menuItem,context))   return;
  Map<String,Object> parameters=new HashMap<String,Object>();
  String style=menuItem.getWidgetStyle();
  if (menuItem.isSelected(context)) {
    style=menuItem.getSelectedStyle();
    if (UtilValidate.isEmpty(style)) {
      style="selected";
    }
  }
  if (menuItem.getDisabled() || this.isDisableIfEmpty(menuItem,context)) {
    style=menuItem.getDisabledTitleStyle();
  }
  if (style == null) {
    style="";
  }
  String alignStyle=menuItem.getAlignStyle();
  if (UtilValidate.isNotEmpty(alignStyle)) {
    style=style.concat(" ").concat(alignStyle);
  }
  parameters.put("style",style);
  parameters.put("toolTip",menuItem.getTooltip(context));
  String linkStr="";
  Link link=menuItem.getLink();
  if (link != null) {
    StringWriter sw=new StringWriter();
    renderLink(sw,context,link);
    linkStr=sw.toString();
  }
 else {
    linkStr=menuItem.getTitle(context);
    StringUtil.SimpleEncoder simpleEncoder=(StringUtil.SimpleEncoder)context.get("simpleEncoder");
    if (simpleEncoder != null) {
      linkStr=simpleEncoder.encode(linkStr);
    }
  }
  parameters.put("linkStr",linkStr);
  boolean containsNestedMenus=!menuItem.getMenuItemList().isEmpty();
  parameters.put("containsNestedMenus",containsNestedMenus);
  try {
    executeMacro(writer,"renderMenuItemBegin",parameters);
  }
 catch (  TemplateException e) {
    throw new IOException(e);
  }
  if (containsNestedMenus) {
    for (    ModelMenuItem childMenuItem : menuItem.getMenuItemList()) {
      childMenuItem.renderMenuItemString(writer,context,this);
    }
  }
  parameters.clear();
  parameters.put("containsNestedMenus",containsNestedMenus);
  try {
    executeMacro(writer,"renderMenuItemEnd",parameters);
  }
 catch (  TemplateException e) {
    throw new IOException(e);
  }
}
