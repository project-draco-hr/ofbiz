{
  String useWhenStr=this.getUseWhen(context);
  if (UtilValidate.isEmpty(useWhenStr))   return true;
  try {
    Interpreter bsh=this.modelForm.getBshInterpreter(context);
    Object retVal=bsh.eval(StringUtil.convertOperatorSubstitutions(useWhenStr));
    boolean condTrue=false;
    if (retVal instanceof Boolean) {
      Boolean boolVal=(Boolean)retVal;
      condTrue=boolVal.booleanValue();
    }
 else {
      throw new IllegalArgumentException("Return value from use-when condition eval was not a Boolean: " + (retVal != null ? retVal.getClass().getName() : "null") + " ["+ retVal+ "] on the field "+ this.name+ " of form "+ this.modelForm.getName());
    }
    return condTrue;
  }
 catch (  EvalError e) {
    String errMsg="Error evaluating BeanShell use-when condition [" + useWhenStr + "] on the field "+ this.name+ " of form "+ this.modelForm.getName()+ ": "+ e.toString();
    Debug.logError(e,errMsg,module);
    throw new IllegalArgumentException(errMsg);
  }
}
