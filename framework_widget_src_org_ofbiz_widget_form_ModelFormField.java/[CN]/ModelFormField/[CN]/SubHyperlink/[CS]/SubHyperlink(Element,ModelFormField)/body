{
  Element autoEntityParamsElement=UtilXml.firstChildElement(element,"auto-parameters-entity");
  if (autoEntityParamsElement != null) {
    this.autoEntityParameters=new WidgetWorker.AutoEntityParameters(autoEntityParamsElement);
  }
 else {
    this.autoEntityParameters=null;
  }
  Element autoServiceParamsElement=UtilXml.firstChildElement(element,"auto-parameters-service");
  if (autoServiceParamsElement != null) {
    this.autoServiceParameters=new WidgetWorker.AutoServiceParameters(autoServiceParamsElement);
  }
 else {
    this.autoServiceParameters=null;
  }
  this.confirmationMsgExdr=FlexibleStringExpander.getInstance(element.getAttribute("confirmation-message"));
  this.description=FlexibleStringExpander.getInstance(element.getAttribute("description"));
  this.linkStyle=element.getAttribute("link-style");
  this.linkType=element.getAttribute("link-type");
  this.modelFormField=modelFormField;
  List<? extends Element> parameterElementList=UtilXml.childElementList(element,"parameter");
  if (!parameterElementList.isEmpty()) {
    List<WidgetWorker.Parameter> parameterList=new ArrayList<WidgetWorker.Parameter>(parameterElementList.size());
    for (    Element parameterElement : parameterElementList) {
      parameterList.add(new WidgetWorker.Parameter(parameterElement));
    }
    this.parameterList=Collections.unmodifiableList(parameterList);
  }
 else {
    this.parameterList=Collections.emptyList();
  }
  this.requestConfirmation="true".equals(element.getAttribute("request-confirmation"));
  this.target=FlexibleStringExpander.getInstance(element.getAttribute("target"));
  this.targetType=element.getAttribute("target-type");
  this.targetWindowExdr=FlexibleStringExpander.getInstance(element.getAttribute("target-window"));
  this.useWhen=FlexibleStringExpander.getInstance(element.getAttribute("use-when"));
}
