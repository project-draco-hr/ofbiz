{
  String retVal=null;
  if (this.description != null && !this.description.isEmpty()) {
    retVal=this.description.expandString(context);
    if (retVal != null) {
      StringUtil.SimpleEncoder simpleEncoder=(StringUtil.SimpleEncoder)context.get("simpleEncoder");
      if (simpleEncoder != null) {
        retVal=simpleEncoder.encode(retVal);
      }
    }
  }
 else {
    retVal=this.modelFormField.getEntry(context);
  }
  if (UtilValidate.isEmpty(retVal)) {
    retVal="";
  }
 else   if ("currency".equals(type)) {
    retVal=retVal.replaceAll("&nbsp;"," ");
    Locale locale=(Locale)context.get("locale");
    if (locale == null)     locale=Locale.getDefault();
    String isoCode=null;
    if (this.currency != null && !this.currency.isEmpty()) {
      isoCode=this.currency.expandString(context);
    }
    try {
      BigDecimal parsedRetVal=(BigDecimal)ObjectType.simpleTypeConvert(retVal,"BigDecimal",null,null,locale,true);
      retVal=UtilFormatOut.formatCurrency(parsedRetVal,isoCode,locale,10);
    }
 catch (    GeneralException e) {
      String errMsg="Error formatting currency value [" + retVal + "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new IllegalArgumentException(errMsg);
    }
  }
 else   if ("date".equals(this.type) && retVal.length() > 10) {
    retVal=retVal.substring(0,10);
  }
 else   if ("date-time".equals(this.type) && retVal.length() > 16) {
    retVal=retVal.substring(0,16);
  }
  return retVal;
}
