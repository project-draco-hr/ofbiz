{
  String retVal=null;
  if (UtilValidate.isNotEmpty(this.description))   retVal=this.description.expandString(context);
 else   retVal=getModelFormField().getEntry(context);
  if (UtilValidate.isEmpty(retVal)) {
    retVal=this.getDefaultValue(context);
  }
 else   if ("currency".equals(type)) {
    retVal=retVal.replaceAll("&nbsp;"," ");
    Locale locale=(Locale)context.get("locale");
    if (locale == null)     locale=Locale.getDefault();
    String isoCode=null;
    if (UtilValidate.isNotEmpty(this.currency))     isoCode=this.currency.expandString(context);
    try {
      BigDecimal parsedRetVal=(BigDecimal)ObjectType.simpleTypeConvert(retVal,"BigDecimal",null,null,locale,true);
      retVal=UtilFormatOut.formatCurrency(parsedRetVal,isoCode,locale,10);
    }
 catch (    GeneralException e) {
      String errMsg="Error formatting currency value [" + retVal + "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new IllegalArgumentException(errMsg);
    }
  }
 else   if ("date".equals(this.type) && retVal.length() > 10) {
    Locale locale=(Locale)context.get("locale");
    if (locale == null) {
      locale=Locale.getDefault();
    }
    StringToTimestamp stringToTimestamp=new DateTimeConverters.StringToTimestamp();
    Timestamp timestamp=null;
    try {
      timestamp=stringToTimestamp.convert(retVal);
      Date date=new Date(timestamp.getTime());
      DateFormat dateFormatter=DateFormat.getDateInstance(DateFormat.SHORT,locale);
      retVal=dateFormatter.format(date);
    }
 catch (    ConversionException e) {
      String errMsg="Error formatting date using default instead [" + retVal + "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      retVal=retVal.substring(0,10);
    }
  }
 else   if ("date-time".equals(this.type) && retVal.length() > 16) {
    Locale locale=(Locale)context.get("locale");
    TimeZone timeZone=(TimeZone)context.get("timeZone");
    if (locale == null) {
      locale=Locale.getDefault();
    }
    if (timeZone == null) {
      timeZone=TimeZone.getDefault();
    }
    StringToTimestamp stringToTimestamp=new DateTimeConverters.StringToTimestamp();
    Timestamp timestamp=null;
    try {
      timestamp=stringToTimestamp.convert(retVal);
      Date date=new Date(timestamp.getTime());
      DateFormat dateFormatter=UtilDateTime.toDateTimeFormat(null,timeZone,locale);
      retVal=dateFormatter.format(date);
    }
 catch (    ConversionException e) {
      String errMsg="Error formatting date/time using default instead [" + retVal + "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      retVal=retVal.substring(0,16);
    }
  }
 else   if ("accounting-number".equals(this.type)) {
    Locale locale=(Locale)context.get("locale");
    if (locale == null) {
      locale=Locale.getDefault();
    }
    try {
      Double parsedRetVal=(Double)ObjectType.simpleTypeConvert(retVal,"Double",null,locale,false);
      String template=UtilProperties.getPropertyValue("arithmetic","accounting-number.format","#,##0.00;(#,##0.00)");
      retVal=UtilFormatOut.formatDecimalNumber(parsedRetVal.doubleValue(),template,locale);
    }
 catch (    GeneralException e) {
      String errMsg="Error formatting number [" + retVal + "]: "+ e.toString();
      Debug.logError(e,errMsg,module);
      throw new IllegalArgumentException(errMsg);
    }
  }
  if (UtilValidate.isNotEmpty(this.description) && retVal != null && this.getModelFormField().getEncodeOutput()) {
    UtilCodec.SimpleEncoder simpleEncoder=(UtilCodec.SimpleEncoder)context.get("simpleEncoder");
    if (simpleEncoder != null) {
      retVal=simpleEncoder.encode(retVal);
    }
  }
  return retVal;
}
