{
  EntityCondition findCondition=null;
  if (this.constraintList != null && this.constraintList.size() > 0) {
    List expandedConditionList=new LinkedList();
    Iterator constraintIter=constraintList.iterator();
    while (constraintIter.hasNext()) {
      EntityFinderUtil.Condition condition=(EntityFinderUtil.Condition)constraintIter.next();
      expandedConditionList.add(condition.createCondition(context,this.entityName,delegator));
    }
    findCondition=new EntityConditionList(expandedConditionList,EntityOperator.AND);
  }
  try {
    Locale locale=UtilMisc.ensureLocale(context.get("locale"));
    List values=null;
    values=delegator.findList(this.entityName,findCondition,null,this.orderByList,null,this.cache);
    if ("true".equals(this.filterByDate)) {
      values=EntityUtil.filterByDate(values,true);
    }
 else     if (!"false".equals(this.filterByDate)) {
      ModelEntity modelEntity=delegator.getModelEntity(this.entityName);
      if (modelEntity != null && modelEntity.isField("fromDate") && modelEntity.isField("thruDate")) {
        values=EntityUtil.filterByDate(values,true);
      }
    }
    Iterator valueIter=values.iterator();
    while (valueIter.hasNext()) {
      GenericValue value=(GenericValue)valueIter.next();
      MapStack localContext=null;
      if (context instanceof MapStack) {
        localContext=((MapStack)context).standAloneStack();
      }
 else {
        localContext=MapStack.create(context);
      }
      localContext.push(value);
      String optionDesc=this.description.expandString(localContext,locale);
      Object keyFieldObject=value.get(this.getKeyFieldName());
      if (keyFieldObject == null) {
        throw new IllegalArgumentException("The value found for key-name [" + this.getKeyFieldName() + "], may not be a valid key field name.");
      }
      String keyFieldValue=keyFieldObject.toString();
      optionValues.add(new OptionValue(keyFieldValue,optionDesc));
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting entity options in form",module);
  }
}
