{
  super(element,modelFormField);
  this.setValue(element.getAttribute("value"));
  this.setDescription(element.getAttribute("description"));
  this.setAlternate(element.getAttribute("alternate"));
  String borderStr=element.getAttribute("border");
  try {
    border=Integer.parseInt(borderStr);
  }
 catch (  Exception e) {
    if (UtilValidate.isNotEmpty(borderStr)) {
      Debug.logError("Could not parse the border value of the text element: [" + borderStr + "], setting to the default of "+ border,module);
    }
  }
  String widthStr=element.getAttribute("width");
  try {
    width=Integer.valueOf(widthStr);
  }
 catch (  Exception e) {
    width=null;
    if (UtilValidate.isNotEmpty(widthStr)) {
      Debug.logError("Could not parse the size value of the text element: [" + widthStr + "], setting to null; default of no width will be used",module);
    }
  }
  String heightStr=element.getAttribute("height");
  try {
    height=Integer.valueOf(heightStr);
  }
 catch (  Exception e) {
    height=null;
    if (UtilValidate.isNotEmpty(heightStr)) {
      Debug.logError("Could not parse the size value of the text element: [" + heightStr + "], setting to null; default of no height will be used",module);
    }
  }
  Element subHyperlinkElement=UtilXml.firstChildElement(element,"sub-hyperlink");
  if (subHyperlinkElement != null) {
    this.subHyperlink=new SubHyperlink(subHyperlinkElement,this.getModelFormField());
  }
}
