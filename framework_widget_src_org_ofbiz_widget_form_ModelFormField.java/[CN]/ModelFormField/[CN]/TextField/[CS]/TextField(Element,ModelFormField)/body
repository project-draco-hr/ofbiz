{
  super(element,modelFormField);
  this.clientAutocompleteField=!"false".equals(element.getAttribute("client-autocomplete-field"));
  this.defaultValue=FlexibleStringExpander.getInstance(element.getAttribute("default-value"));
  this.disabled="true".equals(element.getAttribute("disabled"));
  this.mask=element.getAttribute("mask");
  Integer maxlength=null;
  String maxlengthStr=element.getAttribute("maxlength");
  if (!maxlengthStr.isEmpty()) {
    try {
      maxlength=Integer.valueOf(maxlengthStr);
    }
 catch (    Exception e) {
      Debug.logError("Could not parse the max-length value of the text element: [" + maxlengthStr + "], setting to null; default of no maxlength will be used",module);
    }
  }
  this.maxlength=maxlength;
  this.placeholder=FlexibleStringExpander.getInstance(element.getAttribute("placeholder"));
  this.readonly="true".equals(element.getAttribute("read-only"));
  int size=25;
  String sizeStr=element.getAttribute("size");
  if (!sizeStr.isEmpty()) {
    try {
      size=Integer.parseInt(sizeStr);
    }
 catch (    Exception e) {
      Debug.logError("Could not parse the size value of the text element: [" + sizeStr + "], setting to the default of "+ size,module);
    }
  }
  this.size=size;
  Element subHyperlinkElement=UtilXml.firstChildElement(element,"sub-hyperlink");
  if (subHyperlinkElement != null) {
    this.subHyperlink=new SubHyperlink(subHyperlinkElement,this.getModelFormField());
  }
 else {
    this.subHyperlink=null;
  }
}
