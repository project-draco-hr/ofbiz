{
  this.modelForm=modelForm;
  this.name=fieldElement.getAttribute("name");
  this.setMapName(fieldElement.getAttribute("map-name"));
  this.entityName=fieldElement.getAttribute("entity-name");
  this.serviceName=fieldElement.getAttribute("service-name");
  this.setEntryName(UtilXml.checkEmpty(fieldElement.getAttribute("entry-name"),this.name));
  this.parameterName=UtilXml.checkEmpty(fieldElement.getAttribute("parameter-name"),this.name);
  this.fieldName=UtilXml.checkEmpty(fieldElement.getAttribute("field-name"),this.name);
  this.attributeName=UtilXml.checkEmpty(fieldElement.getAttribute("attribute-name"),this.name);
  this.setTitle(fieldElement.hasAttribute("title") ? fieldElement.getAttribute("title") : null);
  this.setTooltip(fieldElement.getAttribute("tooltip"));
  this.titleAreaStyle=fieldElement.getAttribute("title-area-style");
  this.widgetAreaStyle=fieldElement.getAttribute("widget-area-style");
  this.titleStyle=fieldElement.getAttribute("title-style");
  this.widgetStyle=fieldElement.getAttribute("widget-style");
  this.tooltipStyle=fieldElement.getAttribute("tooltip-style");
  this.requiredFieldStyle=fieldElement.getAttribute("required-field-style");
  this.redWhen=fieldElement.getAttribute("red-when");
  this.event=fieldElement.getAttribute("event");
  this.setAction(fieldElement.hasAttribute("action") ? fieldElement.getAttribute("action") : null);
  this.setUseWhen(fieldElement.getAttribute("use-when"));
  this.idName=fieldElement.getAttribute("id-name");
  String sepColumns=fieldElement.getAttribute("separate-column");
  if (sepColumns != null && sepColumns.equalsIgnoreCase("true"))   separateColumn=true;
  this.requiredField="true".equals(fieldElement.getAttribute("required-field"));
  this.headerLink=fieldElement.getAttribute("header-link");
  this.headerLinkStyle=fieldElement.getAttribute("header-link-style");
  String positionStr=fieldElement.getAttribute("position");
  try {
    if (positionStr != null && positionStr.length() > 0) {
      position=Integer.valueOf(positionStr);
    }
  }
 catch (  Exception e) {
    Debug.logError(e,"Could not convert position attribute of the field element to an integer: [" + positionStr + "], using the default of the form renderer",module);
  }
  Element subElement=UtilXml.firstChildElement(fieldElement);
  if (subElement != null) {
    String subElementName=subElement.getTagName();
    if (Debug.verboseOn())     Debug.logVerbose("Processing field " + this.name + " with type info tag "+ subElementName,module);
    if (UtilValidate.isEmpty(subElementName)) {
      this.fieldInfo=null;
      this.induceFieldInfo(null);
    }
 else     if ("display".equals(subElementName)) {
      this.fieldInfo=new DisplayField(subElement,this);
    }
 else     if ("display-entity".equals(subElementName)) {
      this.fieldInfo=new DisplayEntityField(subElement,this);
    }
 else     if ("hyperlink".equals(subElementName)) {
      this.fieldInfo=new HyperlinkField(subElement,this);
    }
 else     if ("text".equals(subElementName)) {
      this.fieldInfo=new TextField(subElement,this);
    }
 else     if ("textarea".equals(subElementName)) {
      this.fieldInfo=new TextareaField(subElement,this);
    }
 else     if ("date-time".equals(subElementName)) {
      this.fieldInfo=new DateTimeField(subElement,this);
    }
 else     if ("drop-down".equals(subElementName)) {
      this.fieldInfo=new DropDownField(subElement,this);
    }
 else     if ("check".equals(subElementName)) {
      this.fieldInfo=new CheckField(subElement,this);
    }
 else     if ("radio".equals(subElementName)) {
      this.fieldInfo=new RadioField(subElement,this);
    }
 else     if ("submit".equals(subElementName)) {
      this.fieldInfo=new SubmitField(subElement,this);
    }
 else     if ("reset".equals(subElementName)) {
      this.fieldInfo=new ResetField(subElement,this);
    }
 else     if ("hidden".equals(subElementName)) {
      this.fieldInfo=new HiddenField(subElement,this);
    }
 else     if ("ignored".equals(subElementName)) {
      this.fieldInfo=new IgnoredField(subElement,this);
    }
 else     if ("text-find".equals(subElementName)) {
      this.fieldInfo=new TextFindField(subElement,this);
    }
 else     if ("date-find".equals(subElementName)) {
      this.fieldInfo=new DateFindField(subElement,this);
    }
 else     if ("range-find".equals(subElementName)) {
      this.fieldInfo=new RangeFindField(subElement,this);
    }
 else     if ("lookup".equals(subElementName)) {
      this.fieldInfo=new LookupField(subElement,this);
    }
 else     if ("file".equals(subElementName)) {
      this.fieldInfo=new FileField(subElement,this);
    }
 else     if ("password".equals(subElementName)) {
      this.fieldInfo=new PasswordField(subElement,this);
    }
 else     if ("image".equals(subElementName)) {
      this.fieldInfo=new ImageField(subElement,this);
    }
 else {
      throw new IllegalArgumentException("The field sub-element with name " + subElementName + " is not supported");
    }
  }
}
