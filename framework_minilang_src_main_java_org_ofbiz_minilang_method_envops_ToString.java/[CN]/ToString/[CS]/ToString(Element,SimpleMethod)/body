{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.handleError("<to-string> element is deprecated (use <set>)",simpleMethod,element);
    MiniLangValidate.attributeNames(simpleMethod,element,"field","format","numeric-padding");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"field");
    MiniLangValidate.constantAttributes(simpleMethod,element,"format","numeric-padding");
    MiniLangValidate.expressionAttributes(simpleMethod,element,"field");
    MiniLangValidate.noChildElements(simpleMethod,element);
  }
  fieldFma=FlexibleMapAccessor.getInstance(element.getAttribute("field"));
  format=element.getAttribute("format");
  Integer numericPadding=null;
  String npAttribute=element.getAttribute("numeric-padding");
  if (!npAttribute.isEmpty()) {
    try {
      numericPadding=Integer.valueOf(npAttribute);
    }
 catch (    Exception e) {
      MiniLangValidate.handleError("Exception thrown while parsing numeric-padding attribute: " + e.getMessage(),simpleMethod,element);
    }
  }
  this.numericPadding=numericPadding;
}
