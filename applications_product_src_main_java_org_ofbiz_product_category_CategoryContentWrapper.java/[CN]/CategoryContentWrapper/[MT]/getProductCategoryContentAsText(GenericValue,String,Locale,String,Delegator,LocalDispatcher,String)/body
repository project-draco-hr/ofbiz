{
  String candidateFieldName=ModelUtil.dbNameToVarName(prodCatContentTypeId);
  UtilCodec.SimpleEncoder encoder=UtilCodec.getEncoder(encoderType);
  String cacheKey=prodCatContentTypeId + SEPARATOR + locale+ SEPARATOR+ mimeTypeId+ SEPARATOR+ productCategory.get("productCategoryId")+ SEPARATOR+ encoderType+ SEPARATOR+ delegator;
  try {
    String cachedValue=categoryContentCache.get(cacheKey);
    if (cachedValue != null) {
      return cachedValue;
    }
    Writer outWriter=new StringWriter();
    getProductCategoryContentAsText(null,productCategory,prodCatContentTypeId,locale,mimeTypeId,delegator,dispatcher,outWriter,false);
    String outString=outWriter.toString();
    if (UtilValidate.isEmpty(outString)) {
      outString=productCategory.getModelEntity().isField(candidateFieldName) ? productCategory.getString(candidateFieldName) : "";
      outString=outString == null ? "" : outString;
    }
    outString=encoder.sanitize(outString);
    if (categoryContentCache != null) {
      categoryContentCache.put(cacheKey,outString);
    }
    return outString;
  }
 catch (  GeneralException e) {
    Debug.logError(e,"Error rendering CategoryContent, inserting empty String",module);
    return productCategory.getString(candidateFieldName);
  }
catch (  IOException e) {
    Debug.logError(e,"Error rendering CategoryContent, inserting empty String",module);
    return productCategory.getString(candidateFieldName);
  }
}
