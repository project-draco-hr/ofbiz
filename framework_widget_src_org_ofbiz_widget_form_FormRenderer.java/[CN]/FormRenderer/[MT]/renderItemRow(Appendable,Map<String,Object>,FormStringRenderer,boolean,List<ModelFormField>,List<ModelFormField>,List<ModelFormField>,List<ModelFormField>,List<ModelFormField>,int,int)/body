{
  int numOfCells=innerDisplayHyperlinkFieldsBegin.size() + innerDisplayHyperlinkFieldsEnd.size() + (innerFormFields.size() > 0 ? 1 : 0);
  int numOfColumnsToSpan=numOfColumns - numOfCells + 1;
  if (numOfColumnsToSpan < 1) {
    numOfColumnsToSpan=1;
  }
  formStringRenderer.renderFormatItemRowOpen(writer,localContext,modelForm);
  Iterator<ModelFormField> innerDisplayHyperlinkFieldsBeginIter=innerDisplayHyperlinkFieldsBegin.iterator();
  Map<String,Integer> fieldCount=new HashMap<String,Integer>();
  while (innerDisplayHyperlinkFieldsBeginIter.hasNext()) {
    ModelFormField modelFormField=innerDisplayHyperlinkFieldsBeginIter.next();
    if (fieldCount.containsKey(modelFormField.getFieldName())) {
      fieldCount.put(modelFormField.getFieldName(),fieldCount.get(modelFormField.getFieldName()) + 1);
    }
 else {
      fieldCount.put(modelFormField.getFieldName(),1);
    }
  }
  if (modelForm.getGroupColumns()) {
    Iterator<ModelFormField> innerDisplayHyperlinkFieldIter=innerDisplayHyperlinkFieldsBegin.iterator();
    while (innerDisplayHyperlinkFieldIter.hasNext()) {
      boolean cellOpen=false;
      ModelFormField modelFormField=innerDisplayHyperlinkFieldIter.next();
      if (fieldCount.get(modelFormField.getName()) < 2) {
        if ((innerDisplayHyperlinkFieldIter.hasNext() || numOfCells > innerDisplayHyperlinkFieldsBegin.size())) {
          formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,1);
        }
 else {
          formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,numOfColumnsToSpan);
        }
        cellOpen=true;
      }
      if ((!"list".equals(modelForm.getType()) && !"multi".equals(modelForm.getType())) || modelFormField.shouldUse(localContext)) {
        if ((fieldCount.get(modelFormField.getName()) > 1)) {
          if ((innerDisplayHyperlinkFieldIter.hasNext() || numOfCells > innerDisplayHyperlinkFieldsBegin.size())) {
            formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,1);
          }
 else {
            formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,numOfColumnsToSpan);
          }
          cellOpen=true;
        }
        modelFormField.renderFieldString(writer,localContext,formStringRenderer);
      }
      if (cellOpen) {
        formStringRenderer.renderFormatItemRowCellClose(writer,localContext,modelForm,modelFormField);
      }
    }
    if (innerFormFields.size() > 0) {
      formStringRenderer.renderFormatItemRowFormCellOpen(writer,localContext,modelForm);
      if (formPerItem) {
        formStringRenderer.renderFormOpen(writer,localContext,modelForm);
      }
      this.renderHiddenIgnoredFields(writer,localContext,formStringRenderer,hiddenIgnoredFieldList);
      Iterator<ModelFormField> innerFormFieldIter=innerFormFields.iterator();
      while (innerFormFieldIter.hasNext()) {
        ModelFormField modelFormField=innerFormFieldIter.next();
        if (modelForm.getSeparateColumns() || modelFormField.getSeparateColumn()) {
          formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,1);
        }
        if ((!"list".equals(modelForm.getType()) && !"multi".equals(modelForm.getType())) || modelFormField.shouldUse(localContext)) {
          modelFormField.renderFieldString(writer,localContext,formStringRenderer);
        }
        if (modelForm.getSeparateColumns() || modelFormField.getSeparateColumn()) {
          formStringRenderer.renderFormatItemRowCellClose(writer,localContext,modelForm,modelFormField);
        }
      }
      if (formPerItem) {
        formStringRenderer.renderFormClose(writer,localContext,modelForm);
      }
      formStringRenderer.renderFormatItemRowFormCellClose(writer,localContext,modelForm);
    }
    innerDisplayHyperlinkFieldIter=innerDisplayHyperlinkFieldsEnd.iterator();
    while (innerDisplayHyperlinkFieldIter.hasNext()) {
      ModelFormField modelFormField=innerDisplayHyperlinkFieldIter.next();
      if (innerDisplayHyperlinkFieldIter.hasNext()) {
        formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,1);
      }
 else {
        formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,numOfColumnsToSpan);
      }
      if ((!"list".equals(modelForm.getType()) && !"multi".equals(modelForm.getType())) || modelFormField.shouldUse(localContext)) {
        modelFormField.renderFieldString(writer,localContext,formStringRenderer);
      }
      formStringRenderer.renderFormatItemRowCellClose(writer,localContext,modelForm,modelFormField);
    }
  }
 else {
    this.renderHiddenIgnoredFields(writer,localContext,formStringRenderer,hiddenIgnoredFieldList);
    Iterator<ModelFormField> mainFieldIter=mainFieldList.iterator();
    while (mainFieldIter.hasNext()) {
      ModelFormField modelFormField=mainFieldIter.next();
      FieldInfo fieldInfo=modelFormField.getFieldInfo();
      if (fieldInfo.getFieldType() == FieldInfo.HIDDEN || fieldInfo.getFieldType() == FieldInfo.IGNORED) {
        continue;
      }
      if (mainFieldIter.hasNext()) {
        formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,1);
      }
 else {
        formStringRenderer.renderFormatItemRowCellOpen(writer,localContext,modelForm,modelFormField,numOfColumnsToSpan);
      }
      if ((!"list".equals(modelForm.getType()) && !"multi".equals(modelForm.getType())) || modelFormField.shouldUse(localContext)) {
        modelFormField.renderFieldString(writer,localContext,formStringRenderer);
      }
      formStringRenderer.renderFormatItemRowCellClose(writer,localContext,modelForm,modelFormField);
    }
  }
  formStringRenderer.renderFormatItemRowClose(writer,localContext,modelForm);
}
