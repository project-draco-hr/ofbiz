{
  int maxNumOfColumns=0;
  List<ModelFormField> tempFieldList=new LinkedList<ModelFormField>();
  tempFieldList.addAll(modelForm.getFieldList());
  for (int j=0; j < tempFieldList.size(); j++) {
    ModelFormField modelFormField=tempFieldList.get(j);
    for (int i=j + 1; i < tempFieldList.size(); i++) {
      ModelFormField curField=tempFieldList.get(i);
      if (curField.getName() != null && curField.getName().equals(modelFormField.getName())) {
        tempFieldList.remove(i--);
      }
    }
  }
  Collection<List<ModelFormField>> fieldListsByPosition=this.getFieldListsByPosition(tempFieldList);
  List<Map<String,List<ModelFormField>>> fieldRowsByPosition=new LinkedList<Map<String,List<ModelFormField>>>();
  for (  List<ModelFormField> mainFieldList : fieldListsByPosition) {
    int numOfColumns=0;
    List<ModelFormField> innerDisplayHyperlinkFieldsBegin=new LinkedList<ModelFormField>();
    List<ModelFormField> innerFormFields=new LinkedList<ModelFormField>();
    List<ModelFormField> innerDisplayHyperlinkFieldsEnd=new LinkedList<ModelFormField>();
    boolean inputFieldFound=false;
    for (    ModelFormField modelFormField : mainFieldList) {
      ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
      String modelFormFieldTitle=modelFormField.getTitle(context);
      if ("".equals(modelFormFieldTitle)) {
        continue;
      }
      if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
        continue;
      }
      if (fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.DISPLAY_ENTITY && fieldInfo.getFieldType() != ModelFormField.FieldInfo.HYPERLINK) {
        inputFieldFound=true;
        continue;
      }
      if (!inputFieldFound) {
        innerDisplayHyperlinkFieldsBegin.add(modelFormField);
      }
 else {
        innerDisplayHyperlinkFieldsEnd.add(modelFormField);
      }
      numOfColumns++;
    }
    for (    ModelFormField modelFormField : mainFieldList) {
      ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
      if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
        continue;
      }
      if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.DISPLAY || fieldInfo.getFieldType() == ModelFormField.FieldInfo.DISPLAY_ENTITY || fieldInfo.getFieldType() == ModelFormField.FieldInfo.HYPERLINK) {
        continue;
      }
      innerFormFields.add(modelFormField);
    }
    if (innerFormFields.size() > 0) {
      numOfColumns++;
    }
    if (maxNumOfColumns < numOfColumns) {
      maxNumOfColumns=numOfColumns;
    }
    Map<String,List<ModelFormField>> fieldRow=UtilMisc.toMap("displayBefore",innerDisplayHyperlinkFieldsBegin,"inputFields",innerFormFields,"displayAfter",innerDisplayHyperlinkFieldsEnd,"mainFieldList",mainFieldList);
    fieldRowsByPosition.add(fieldRow);
  }
  for (  Map<String,List<ModelFormField>> listsMap : fieldRowsByPosition) {
    List<ModelFormField> innerDisplayHyperlinkFieldsBegin=listsMap.get("displayBefore");
    List<ModelFormField> innerFormFields=listsMap.get("inputFields");
    List<ModelFormField> innerDisplayHyperlinkFieldsEnd=listsMap.get("displayAfter");
    List<ModelFormField> mainFieldList=listsMap.get("mainFieldList");
    int numOfCells=innerDisplayHyperlinkFieldsBegin.size() + innerDisplayHyperlinkFieldsEnd.size() + (innerFormFields.size() > 0 ? 1 : 0);
    int numOfColumnsToSpan=maxNumOfColumns - numOfCells + 1;
    if (numOfColumnsToSpan < 1) {
      numOfColumnsToSpan=1;
    }
    if (numOfCells > 0) {
      formStringRenderer.renderFormatHeaderRowOpen(writer,context,modelForm);
      if (modelForm.getGroupColumns()) {
        Iterator<ModelFormField> innerDisplayHyperlinkFieldsBeginIt=innerDisplayHyperlinkFieldsBegin.iterator();
        while (innerDisplayHyperlinkFieldsBeginIt.hasNext()) {
          ModelFormField modelFormField=innerDisplayHyperlinkFieldsBeginIt.next();
          if (innerDisplayHyperlinkFieldsBeginIt.hasNext() || numOfCells > innerDisplayHyperlinkFieldsBegin.size()) {
            formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,modelForm,modelFormField,1);
          }
 else {
            formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,modelForm,modelFormField,numOfColumnsToSpan);
          }
          formStringRenderer.renderFieldTitle(writer,context,modelFormField);
          formStringRenderer.renderFormatHeaderRowCellClose(writer,context,modelForm,modelFormField);
        }
        if (innerFormFields.size() > 0) {
          formStringRenderer.renderFormatHeaderRowFormCellOpen(writer,context,modelForm);
          Iterator<ModelFormField> innerFormFieldsIt=innerFormFields.iterator();
          while (innerFormFieldsIt.hasNext()) {
            ModelFormField modelFormField=innerFormFieldsIt.next();
            if (modelForm.getSeparateColumns() || modelFormField.getSeparateColumn()) {
              formStringRenderer.renderFormatItemRowCellOpen(writer,context,modelForm,modelFormField,1);
            }
            formStringRenderer.renderFieldTitle(writer,context,modelFormField);
            if (modelForm.getSeparateColumns() || modelFormField.getSeparateColumn()) {
              formStringRenderer.renderFormatItemRowCellClose(writer,context,modelForm,modelFormField);
            }
            if (innerFormFieldsIt.hasNext()) {
              if (!modelForm.getSeparateColumns() && !modelFormField.getSeparateColumn()) {
                formStringRenderer.renderFormatHeaderRowFormCellTitleSeparator(writer,context,modelForm,modelFormField,false);
              }
            }
          }
          formStringRenderer.renderFormatHeaderRowFormCellClose(writer,context,modelForm);
        }
        Iterator<ModelFormField> innerDisplayHyperlinkFieldsEndIt=innerDisplayHyperlinkFieldsEnd.iterator();
        while (innerDisplayHyperlinkFieldsEndIt.hasNext()) {
          ModelFormField modelFormField=innerDisplayHyperlinkFieldsEndIt.next();
          if (innerDisplayHyperlinkFieldsEndIt.hasNext() || numOfCells > innerDisplayHyperlinkFieldsEnd.size()) {
            formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,modelForm,modelFormField,1);
          }
 else {
            formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,modelForm,modelFormField,numOfColumnsToSpan);
          }
          formStringRenderer.renderFieldTitle(writer,context,modelFormField);
          formStringRenderer.renderFormatHeaderRowCellClose(writer,context,modelForm,modelFormField);
        }
      }
 else {
        Iterator<ModelFormField> mainFieldListIter=mainFieldList.iterator();
        while (mainFieldListIter.hasNext()) {
          ModelFormField modelFormField=mainFieldListIter.next();
          ModelFormField.FieldInfo fieldInfo=modelFormField.getFieldInfo();
          if (fieldInfo.getFieldType() == ModelFormField.FieldInfo.HIDDEN || fieldInfo.getFieldType() == ModelFormField.FieldInfo.IGNORED) {
            continue;
          }
          if (mainFieldListIter.hasNext() || numOfCells > mainFieldList.size()) {
            formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,modelForm,modelFormField,1);
          }
 else {
            formStringRenderer.renderFormatHeaderRowCellOpen(writer,context,modelForm,modelFormField,numOfColumnsToSpan);
          }
          formStringRenderer.renderFieldTitle(writer,context,modelFormField);
          formStringRenderer.renderFormatHeaderRowCellClose(writer,context,modelForm,modelFormField);
        }
      }
      formStringRenderer.renderFormatHeaderRowClose(writer,context,modelForm);
    }
  }
  return maxNumOfColumns;
}
