{
  Delegator delegator=dctx.getDelegator();
  Timestamp startDate=(Timestamp)context.get("startDateTime");
  Timestamp endDate=(Timestamp)context.get("endDateTime");
  Integer frequency=(Integer)context.get("frequency");
  Integer interval=(Integer)context.get("intervalNumber");
  Locale locale=(Locale)context.get("locale");
  if (frequency == null || interval == null) {
    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderFrequencyOrIntervalWasNotSpecified",locale),module);
    return ServiceUtil.returnSuccess();
  }
  if (startDate == null) {
switch (frequency.intValue()) {
case 5:
      startDate=UtilDateTime.getWeekStart(UtilDateTime.nowTimestamp(),0,interval.intValue());
    break;
case 6:
  startDate=UtilDateTime.getMonthStart(UtilDateTime.nowTimestamp(),0,interval.intValue());
break;
case 7:
startDate=UtilDateTime.getYearStart(UtilDateTime.nowTimestamp(),0,interval.intValue());
break;
default :
return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderInvalidFrequencyForShoppingListRecurrence",locale));
}
}
long startTime=startDate.getTime();
long endTime=0;
if (endDate != null) {
endTime=endDate.getTime();
}
RecurrenceInfo recInfo=null;
try {
recInfo=RecurrenceInfo.makeInfo(delegator,startTime,frequency.intValue(),interval.intValue(),-1,endTime);
}
 catch (RecurrenceInfoException e) {
Debug.logError(e,module);
return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToCreateShoppingListRecurrenceInformation",locale));
}
Debug.logInfo("Next Recurrence - " + UtilDateTime.getTimestamp(recInfo.next()),module);
Map<String,Object> result=ServiceUtil.returnSuccess();
result.put("recurrenceInfoId",recInfo.getID());
return result;
}
