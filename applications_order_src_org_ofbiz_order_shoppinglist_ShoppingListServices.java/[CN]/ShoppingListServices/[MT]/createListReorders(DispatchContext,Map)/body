{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  boolean beganTransaction=false;
  try {
    beganTransaction=TransactionUtil.begin();
    List exprs=UtilMisc.toList(new EntityExpr("shoppingListTypeId",EntityOperator.EQUALS,"SLT_AUTO_REODR"),new EntityExpr("isActive",EntityOperator.EQUALS,"Y"));
    EntityCondition cond=new EntityConditionList(exprs,EntityOperator.AND);
    List order=UtilMisc.toList("-lastOrderedDate");
    EntityListIterator eli=null;
    eli=delegator.find("ShoppingList",cond,null,null,order,null);
    if (eli != null) {
      GenericValue shoppingList;
      while (((shoppingList=(GenericValue)eli.next()) != null)) {
        Timestamp lastOrder=shoppingList.getTimestamp("lastOrderedDate");
        GenericValue recurrenceInfo=null;
        recurrenceInfo=shoppingList.getRelatedOne("RecurrenceInfo");
        Timestamp startDateTime=recurrenceInfo.getTimestamp("startDateTime");
        RecurrenceInfo recurrence=null;
        if (recurrenceInfo != null) {
          try {
            recurrence=new RecurrenceInfo(recurrenceInfo);
          }
 catch (          RecurrenceInfoException e) {
            Debug.logError(e,module);
          }
        }
        if (recurrence != null) {
          long next=lastOrder == null ? recurrence.next(startDateTime.getTime()) : recurrence.next(lastOrder.getTime());
          Timestamp now=UtilDateTime.nowTimestamp();
          Timestamp nextOrder=UtilDateTime.getDayStart(UtilDateTime.getTimestamp(next));
          if (nextOrder.after(now)) {
            continue;
          }
        }
 else {
          continue;
        }
        ShoppingCart listCart=makeShoppingListCart(dispatcher,shoppingList,locale);
        CheckOutHelper helper=new CheckOutHelper(dispatcher,delegator,listCart);
        Map createResp=helper.createOrder(userLogin);
        if (createResp != null && ServiceUtil.isError(createResp)) {
          Debug.logError("Cannot create order for shopping list - " + shoppingList,module);
        }
 else {
          String orderId=(String)createResp.get("orderId");
          Map payRes=null;
          try {
            payRes=helper.processPayment(ProductStoreWorker.getProductStore(listCart.getProductStoreId(),delegator),userLogin);
          }
 catch (          GeneralException e) {
            Debug.logError(e,module);
          }
          if (payRes != null && ServiceUtil.isError(payRes)) {
            Debug.logError("Payment processing problems with shopping list - " + shoppingList,module);
          }
          shoppingList.set("lastOrderedDate",UtilDateTime.nowTimestamp());
          shoppingList.store();
          try {
            dispatcher.runAsync("sendOrderPayRetryNotification",UtilMisc.toMap("orderId",orderId));
          }
 catch (          GenericServiceException e) {
            Debug.logError(e,module);
          }
          recurrence.incrementCurrentCount();
        }
      }
      eli.close();
    }
    return ServiceUtil.returnSuccess();
  }
 catch (  GenericEntityException e) {
    try {
      TransactionUtil.rollback(beganTransaction,"Error creating shopping list auto-reorders",e);
    }
 catch (    GenericEntityException e2) {
      Debug.logError(e2,"[GenericDelegator] Could not rollback transaction: " + e2.toString(),module);
    }
    String errMsg="Error while creating new shopping list based automatic reorder" + e.toString();
    Debug.logError(e,errMsg,module);
    return ServiceUtil.returnError(errMsg);
  }
 finally {
    try {
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Could not commit transaction for creating new shopping list based automatic reorder",module);
    }
  }
}
