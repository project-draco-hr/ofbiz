{
  Map<String,Object> result=FastMap.newInstance();
  Delegator delegator=ctx.getDelegator();
  String orderId=(String)context.get("orderId");
  try {
    List<GenericValue> orderItems=delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId));
    Iterator<GenericValue> iter=orderItems.iterator();
    while (iter.hasNext()) {
      GenericValue orderItem=iter.next();
      String shoppingListId=orderItem.getString("shoppingListId");
      String shoppingListItemSeqId=orderItem.getString("shoppingListItemSeqId");
      if (UtilValidate.isNotEmpty(shoppingListId)) {
        GenericValue shoppingListItem=delegator.findByPrimaryKey("ShoppingListItem",UtilMisc.toMap("shoppingListId",shoppingListId,"shoppingListItemSeqId",shoppingListItemSeqId));
        if (shoppingListItem != null) {
          BigDecimal quantityPurchased=shoppingListItem.getBigDecimal("quantityPurchased");
          BigDecimal orderQuantity=orderItem.getBigDecimal("quantity");
          if (quantityPurchased != null) {
            shoppingListItem.set("quantityPurchased",orderQuantity.add(quantityPurchased));
          }
 else {
            shoppingListItem.set("quantityPurchased",orderQuantity);
          }
          shoppingListItem.store();
        }
      }
    }
  }
 catch (  Exception e) {
    Debug.logInfo("updateShoppingListQuantitiesFromOrder error:" + e.getMessage(),module);
  }
  return result;
}
