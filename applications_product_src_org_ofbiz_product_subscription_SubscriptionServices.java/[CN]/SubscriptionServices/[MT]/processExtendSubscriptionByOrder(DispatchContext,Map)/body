{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String orderId=(String)context.get("orderId");
  Debug.logInfo("In processExtendSubscriptionByOrder service with orderId: " + orderId,module);
  GenericValue orderHeader=null;
  try {
    List orderRoleList=delegator.findByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId","END_USER_CUSTOMER"));
    if (orderRoleList.size() > 0) {
      GenericValue orderRole=(GenericValue)orderRoleList.get(0);
      String partyId=(String)orderRole.get("partyId");
      context.put("partyId",partyId);
    }
 else {
      String msg="No OrderRole found for orderId:" + orderId;
      Debug.logError(msg,module);
      return ServiceUtil.returnError(msg);
    }
    orderHeader=delegator.findByPrimaryKeyCache("OrderHeader",UtilMisc.toMap("orderId",orderId));
    if (orderHeader == null) {
      String msg="No OrderHeader found for orderId:" + orderId;
      Debug.logError(msg,module);
      return ServiceUtil.returnError(msg);
    }
    Timestamp orderCreatedDate=(Timestamp)orderHeader.get("orderDate");
    context.put("orderCreatedDate",orderCreatedDate);
    List orderItemList=orderHeader.getRelated("OrderItem");
    Iterator orderItemIter=orderItemList.iterator();
    while (orderItemIter.hasNext()) {
      GenericValue orderItem=(GenericValue)orderItemIter.next();
      Double qty=(Double)orderItem.get("quantity");
      String productId=(String)orderItem.get("productId");
      if (UtilValidate.isEmpty(productId)) {
        continue;
      }
      List productSubscriptionResourceList=delegator.findByAndCache("ProductSubscriptionResource",UtilMisc.toMap("productId",productId));
      List productSubscriptionResourceListFiltered=EntityUtil.filterByDate(productSubscriptionResourceList,true);
      if (productSubscriptionResourceListFiltered.size() > 0) {
        context.put("productId",productId);
        context.put("orderId",orderId);
        context.put("quantity",new Integer(qty.intValue()));
        Map ctx=dctx.getModelService("processExtendSubscriptionByProduct").makeValid(context,ModelService.IN_PARAM);
        Map thisResult=dispatcher.runSync("processExtendSubscriptionByProduct",ctx);
        if (ServiceUtil.isError(thisResult)) {
          return ServiceUtil.returnError("Error processing subscriptions for Order with ID [" + orderId + "]",null,null,thisResult);
        }
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e.toString(),module);
    return ServiceUtil.returnError(e.toString());
  }
  Map result=ServiceUtil.returnSuccess();
  return result;
}
