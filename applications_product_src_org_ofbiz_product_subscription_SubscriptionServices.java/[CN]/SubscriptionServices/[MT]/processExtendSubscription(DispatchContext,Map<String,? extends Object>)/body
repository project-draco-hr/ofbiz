{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  String partyId=(String)context.get("partyId");
  String subscriptionResourceId=(String)context.get("subscriptionResourceId");
  String inventoryItemId=(String)context.get("inventoryItemId");
  String roleTypeId=(String)context.get("useRoleTypeId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Integer useTime=(Integer)context.get("useTime");
  String useTimeUomId=(String)context.get("useTimeUomId");
  String alwaysCreateNewRecordStr=(String)context.get("alwaysCreateNewRecord");
  Locale locale=(Locale)context.get("locale");
  boolean alwaysCreateNewRecord=!"N".equals(alwaysCreateNewRecordStr);
  GenericValue lastSubscription=null;
  try {
    Map<String,String> subscriptionFindMap=UtilMisc.toMap("partyId",partyId,"subscriptionResourceId",subscriptionResourceId);
    if (UtilValidate.isNotEmpty(inventoryItemId))     subscriptionFindMap.put("inventoryItemId",inventoryItemId);
    List<GenericValue> subscriptionList=EntityQuery.use(delegator).from("Subscription").where(subscriptionFindMap).queryList();
    List<GenericValue> listOrdered=EntityUtil.orderBy(subscriptionList,UtilMisc.toList("-fromDate"));
    if (listOrdered.size() > 0) {
      lastSubscription=listOrdered.get(0);
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.toString());
  }
  GenericValue newSubscription=null;
  if (lastSubscription == null || alwaysCreateNewRecord) {
    newSubscription=delegator.makeValue("Subscription");
    newSubscription.set("subscriptionResourceId",subscriptionResourceId);
    newSubscription.set("partyId",partyId);
    newSubscription.set("roleTypeId",roleTypeId);
    newSubscription.set("productId",context.get("productId"));
    newSubscription.set("orderId",context.get("orderId"));
    newSubscription.set("orderItemSeqId",context.get("orderItemSeqId"));
    newSubscription.set("automaticExtend",context.get("automaticExtend"));
    newSubscription.set("canclAutmExtTimeUomId",context.get("canclAutmExtTimeUomId"));
    newSubscription.set("canclAutmExtTime",context.get("canclAutmExtTime"));
  }
 else {
    newSubscription=lastSubscription;
  }
  newSubscription.set("inventoryItemId",inventoryItemId);
  Timestamp thruDate=lastSubscription != null ? (Timestamp)lastSubscription.get("thruDate") : null;
  if (thruDate == null) {
    thruDate=nowTimestamp;
    newSubscription.set("fromDate",nowTimestamp);
  }
 else {
    if (thruDate.before(nowTimestamp)) {
      thruDate=nowTimestamp;
    }
    newSubscription.set("fromDate",thruDate);
  }
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(thruDate);
  int[] times=UomWorker.uomTimeToCalTime(useTimeUomId);
  if (times != null) {
    calendar.add(times[0],(useTime.intValue() * times[1]));
  }
 else {
    Debug.logWarning("Don't know anything about useTimeUomId [" + useTimeUomId + "], defaulting to month",module);
    calendar.add(Calendar.MONTH,useTime);
  }
  thruDate=new Timestamp(calendar.getTimeInMillis());
  newSubscription.set("thruDate",thruDate);
  Map<String,Object> result=ServiceUtil.returnSuccess();
  try {
    if (lastSubscription != null && !alwaysCreateNewRecord) {
      Map<String,Object> updateSubscriptionMap=dctx.getModelService("updateSubscription").makeValid(newSubscription,ModelService.IN_PARAM);
      updateSubscriptionMap.put("userLogin",EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne());
      Map<String,Object> updateSubscriptionResult=dispatcher.runSync("updateSubscription",updateSubscriptionMap);
      result.put("subscriptionId",updateSubscriptionMap.get("subscriptionId"));
      if (ServiceUtil.isError(updateSubscriptionResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductSubscriptionUpdateError",UtilMisc.toMap("subscriptionId",updateSubscriptionMap.get("subscriptionId")),locale),null,null,updateSubscriptionResult);
      }
    }
 else {
      Map<String,Object> createPartyRoleMap=new HashMap<String,Object>();
      if (UtilValidate.isNotEmpty(roleTypeId)) {
        createPartyRoleMap.put("partyId",partyId);
        createPartyRoleMap.put("roleTypeId",roleTypeId);
        createPartyRoleMap.put("userLogin",userLogin);
        Map<String,Object> createPartyRoleResult=dispatcher.runSync("createPartyRole",createPartyRoleMap);
        if (ServiceUtil.isError(createPartyRoleResult)) {
          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductSubscriptionPartyRoleCreationError",UtilMisc.toMap("subscriptionResourceId",subscriptionResourceId),locale),null,null,createPartyRoleResult);
        }
      }
      Map<String,Object> createSubscriptionMap=dctx.getModelService("createSubscription").makeValid(newSubscription,ModelService.IN_PARAM);
      createSubscriptionMap.put("userLogin",EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne());
      Map<String,Object> createSubscriptionResult=dispatcher.runSync("createSubscription",createSubscriptionMap);
      if (ServiceUtil.isError(createSubscriptionResult)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductSubscriptionCreateError",UtilMisc.toMap("subscriptionResourceId",subscriptionResourceId),locale),null,null,createSubscriptionResult);
      }
      result.put("subscriptionId",createSubscriptionResult.get("subscriptionId"));
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.toString());
  }
catch (  GenericServiceException e) {
    return ServiceUtil.returnError(e.toString());
  }
  return result;
}
