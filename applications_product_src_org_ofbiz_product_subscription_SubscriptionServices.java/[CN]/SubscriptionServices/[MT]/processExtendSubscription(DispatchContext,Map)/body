{
  GenericDelegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  String partyId=(String)context.get("partyId");
  String subscriptionResourceId=(String)context.get("subscriptionResourceId");
  String roleTypeId=(String)context.get("useRoleTypeId");
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Integer useTime=(Integer)context.get("useTime");
  String useTimeUomId=(String)context.get("useTimeUomId");
  String alwaysCreateNewRecordStr=(String)context.get("alwaysCreateNewRecord");
  boolean alwaysCreateNewRecord=!"N".equals(alwaysCreateNewRecordStr);
  GenericValue lastSubscription=null;
  try {
    List subscriptionList=delegator.findByAndCache("Subscription",UtilMisc.toMap("partyId",partyId,"subscriptionResourceId",subscriptionResourceId));
    List listFiltered=EntityUtil.filterByDate(subscriptionList,true);
    List listOrdered=EntityUtil.orderBy(listFiltered,UtilMisc.toList("-fromDate"));
    if (listOrdered.size() > 0) {
      lastSubscription=(GenericValue)listOrdered.get(0);
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.toString());
  }
  GenericValue newSubscription=null;
  if (lastSubscription == null || alwaysCreateNewRecord) {
    newSubscription=delegator.makeValue("Subscription",null);
    newSubscription.set("subscriptionResourceId",subscriptionResourceId);
    newSubscription.set("partyId",partyId);
    newSubscription.set("roleTypeId",roleTypeId);
    newSubscription.set("productId",context.get("productId"));
    newSubscription.set("orderId",context.get("orderId"));
    newSubscription.set("orderItemSeqId",context.get("orderItemSeqId"));
  }
 else {
    newSubscription=lastSubscription;
  }
  newSubscription.set("inventoryItemId",context.get("inventoryItemId"));
  Timestamp thruDate=lastSubscription != null ? (Timestamp)lastSubscription.get("thruDate") : null;
  if (thruDate == null) {
    thruDate=nowTimestamp;
    newSubscription.set("fromDate",nowTimestamp);
  }
 else {
    if (thruDate.before(nowTimestamp)) {
      thruDate=nowTimestamp;
    }
 else {
      newSubscription.set("fromDate",thruDate);
    }
  }
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(thruDate);
  int[] times=UomWorker.uomTimeToCalTime(useTimeUomId);
  if (times != null) {
    calendar.add(times[0],(useTime.intValue() * times[1]));
  }
 else {
    Debug.logWarning("Don't know anything about useTimeUomId [" + useTimeUomId + "], defaulting to month",module);
  }
  thruDate=new Timestamp(calendar.getTimeInMillis());
  newSubscription.set("thruDate",thruDate);
  Map result=ServiceUtil.returnSuccess();
  try {
    if (lastSubscription != null && !alwaysCreateNewRecord) {
      Map updateSubscriptionMap=dctx.getModelService("updateSubscription").makeValid(newSubscription,ModelService.IN_PARAM);
      updateSubscriptionMap.put("userLogin",delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system")));
      Map updateSubscriptionResult=dispatcher.runSync("updateSubscription",updateSubscriptionMap);
      result.put("subscriptionId",updateSubscriptionMap.get("subscriptionId"));
      if (ServiceUtil.isError(updateSubscriptionResult)) {
        return ServiceUtil.returnError("Error processing subscription update with ID [" + updateSubscriptionMap.get("subscriptionId") + "]",null,null,updateSubscriptionResult);
      }
    }
 else {
      Map createPartyRoleMap=new HashMap();
      if (UtilValidate.isNotEmpty(roleTypeId)) {
        createPartyRoleMap.put("partyId",partyId);
        createPartyRoleMap.put("roleTypeId",roleTypeId);
        createPartyRoleMap.put("userLogin",userLogin);
        Map createPartyRoleResult=dispatcher.runSync("createPartyRole",createPartyRoleMap);
        if (ServiceUtil.isError(createPartyRoleResult)) {
          return ServiceUtil.returnError("Error creating new PartyRole while processing subscription update with resource ID [" + subscriptionResourceId + "]",null,null,createPartyRoleResult);
        }
      }
      Map createSubscriptionMap=dctx.getModelService("createSubscription").makeValid(newSubscription,ModelService.IN_PARAM);
      createSubscriptionMap.put("userLogin",delegator.findByPrimaryKey("UserLogin",UtilMisc.toMap("userLoginId","system")));
      Map createSubscriptionResult=dispatcher.runSync("createSubscription",createSubscriptionMap);
      if (ServiceUtil.isError(createSubscriptionResult)) {
        return ServiceUtil.returnError("Error creating subscription while processing with resource ID [" + subscriptionResourceId + "]",null,null,createSubscriptionResult);
      }
      result.put("subscriptionId",createSubscriptionResult.get("subscriptionId"));
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.toString());
  }
catch (  GenericServiceException e) {
    return ServiceUtil.returnError(e.toString());
  }
  return result;
}
