{
  if (fieldTypeCache == null) {
synchronized (ModelFieldTypeReader.class) {
      if (fieldTypeCache == null) {
        fieldTypeCache=new HashMap();
        UtilTimer utilTimer=new UtilTimer();
        Document document=null;
        try {
          document=fieldTypeResourceHandler.getDocument();
        }
 catch (        GenericConfigException e) {
          Debug.logError(e,"Error loading field type file",module);
        }
        if (document == null) {
          fieldTypeCache=null;
          return null;
        }
        Element docElement=document.getDocumentElement();
        if (docElement == null) {
          fieldTypeCache=null;
          return null;
        }
        docElement.normalize();
        Node curChild=docElement.getFirstChild();
        int i=0;
        if (curChild != null) {
          utilTimer.timerString("Before start of field type loop");
          do {
            if (curChild.getNodeType() == Node.ELEMENT_NODE && "field-type-def".equals(curChild.getNodeName())) {
              i++;
              Element curFieldType=(Element)curChild;
              String fieldTypeName=UtilXml.checkEmpty(curFieldType.getAttribute("type"),"[No type name]").intern();
              ModelFieldType fieldType=createModelFieldType(curFieldType,docElement,null);
              if (fieldType != null) {
                fieldTypeCache.put(fieldTypeName,fieldType);
                if (Debug.verboseOn())                 Debug.logVerbose("-- getModelFieldType: #" + i + " Created fieldType: "+ fieldTypeName,module);
              }
 else {
                Debug.logWarning("-- -- ENTITYGEN ERROR:getModelFieldType: Could not create fieldType for fieldTypeName: " + fieldTypeName,module);
              }
            }
          }
 while ((curChild=curChild.getNextSibling()) != null);
        }
 else         Debug.logWarning("No child nodes found.",module);
        utilTimer.timerString("FINISHED - Total Field Types: " + i + " FINISHED");
      }
    }
  }
  return fieldTypeCache;
}
