{
  boolean hasPermission=false;
  List<Object> messages=errorListAcsr.get(methodContext);
  if (messages == null) {
    messages=FastList.newInstance();
    errorListAcsr.put(methodContext,messages);
  }
  GenericValue userLogin=methodContext.getUserLogin();
  if (userLogin != null) {
    Authorization authz=methodContext.getAuthz();
    Security security=methodContext.getSecurity();
    if (this.permissionInfo.hasPermission(methodContext,userLogin,authz,security)) {
      hasPermission=true;
    }
    if (!hasPermission && altPermissions != null) {
      for (      PermissionInfo altPermInfo : altPermissions) {
        if (altPermInfo.hasPermission(methodContext,userLogin,authz,security)) {
          hasPermission=true;
          break;
        }
      }
    }
  }
  if (!hasPermission && acceptUlPartyIdEnvNameAcsr != null) {
    String acceptPartyId=(String)acceptUlPartyIdEnvNameAcsr.get(methodContext);
    if (UtilValidate.isEmpty(acceptPartyId)) {
      Map<String,Object> parameters=methodContext.getEnv("parameters");
      if (parameters != null) {
        acceptPartyId=acceptUlPartyIdEnvNameAcsr.get(parameters,methodContext);
      }
    }
    if (UtilValidate.isNotEmpty(acceptPartyId) && UtilValidate.isNotEmpty(userLogin.getString("partyId")) && acceptPartyId.equals(userLogin.getString("partyId"))) {
      hasPermission=true;
    }
  }
  if (!hasPermission) {
    this.addMessage(messages,methodContext);
  }
  return true;
}
