{
  FlexibleStringExpander fse=FlexibleStringExpander.getInstance(null);
  assertTrue("null FlexibleStringExpander",fse.isEmpty());
  String compare="Hello World!";
  fse=FlexibleStringExpander.getInstance(compare);
  assertEquals("null context",compare,fse.expandString(null));
  Map<String,Object> testMap=new HashMap<String,Object>();
  testMap.put("var","World");
  fse=FlexibleStringExpander.getInstance("Hello ${var}!");
  assertTrue("simple replacement",compare.equals(fse.expandString(testMap)));
  testMap.put("nested","Hello ${var}");
  fse=FlexibleStringExpander.getInstance("${nested}!");
  assertTrue("hidden (runtime) nested replacement",compare.equals(fse.expandString(testMap)));
  fse=FlexibleStringExpander.getInstance("${'Hello ${var}'}!");
  assertTrue("visible nested replacement",compare.equals(fse.expandString(testMap)));
  fse=FlexibleStringExpander.getInstance("${bsh:return \"Hello \" + var + \"!\";}");
  assertTrue("bsh: script",compare.equals(fse.expandString(testMap)));
  fse=FlexibleStringExpander.getInstance("${groovy:return \"Hello \" + var + \"!\";}");
  assertTrue("groovy: script",compare.equals(fse.expandString(testMap)));
  testMap.put("testMap",testMap);
  fse=FlexibleStringExpander.getInstance("Hello ${testMap.var}!");
  assertTrue("UEL integration",compare.equals(fse.expandString(testMap)));
}
