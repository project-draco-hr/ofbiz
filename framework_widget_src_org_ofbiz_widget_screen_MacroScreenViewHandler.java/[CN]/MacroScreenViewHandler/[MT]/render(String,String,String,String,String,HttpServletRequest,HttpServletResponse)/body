{
  try {
    Writer writer=response.getWriter();
    if (UtilValidate.isEmpty(encoding)) {
      encoding=UtilProperties.getPropertyValue("widget",getName() + ".default.encoding","none");
    }
    boolean compressOutput="compressed".equals(encoding);
    if (!compressOutput) {
      compressOutput="true".equals(UtilProperties.getPropertyValue("widget",getName() + ".compress"));
    }
    if (!compressOutput && this.servletContext != null) {
      compressOutput="true".equals(this.servletContext.getAttribute("compressHTML"));
    }
    if (compressOutput) {
      writer=new StandardCompress().getWriter(writer,null);
    }
    ScreenStringRenderer screenStringRenderer=new MacroScreenRenderer(UtilProperties.getPropertyValue("widget",getName() + ".name"),UtilProperties.getPropertyValue("widget",getName() + ".screenrenderer"));
    ScreenRenderer screens=new ScreenRenderer(writer,null,screenStringRenderer);
    screens.populateContextForRequest(request,response,servletContext);
    String macroLibraryPath=UtilProperties.getPropertyValue("widget",getName() + ".formrenderer");
    if (UtilValidate.isNotEmpty(macroLibraryPath)) {
      FormStringRenderer formStringRenderer=new MacroFormRenderer(macroLibraryPath,request,response);
      screens.getContext().put("formStringRenderer",formStringRenderer);
    }
    macroLibraryPath=UtilProperties.getPropertyValue("widget",getName() + ".treerenderer");
    if (UtilValidate.isNotEmpty(macroLibraryPath)) {
      TreeStringRenderer treeStringRenderer=new MacroTreeRenderer(macroLibraryPath,writer);
      screens.getContext().put("treeStringRenderer",treeStringRenderer);
    }
    macroLibraryPath=UtilProperties.getPropertyValue("widget",getName() + ".menurenderer");
    if (UtilValidate.isNotEmpty(macroLibraryPath)) {
      MenuStringRenderer menuStringRenderer=new MacroMenuRenderer(macroLibraryPath,request,response);
      screens.getContext().put("menuStringRenderer",menuStringRenderer);
    }
    screens.getContext().put("simpleEncoder",StringUtil.getEncoder(UtilProperties.getPropertyValue("widget",getName() + ".encoder")));
    screenStringRenderer.renderScreenBegin(writer,screens.getContext());
    screens.render(page);
    screenStringRenderer.renderScreenEnd(writer,screens.getContext());
    writer.flush();
  }
 catch (  TemplateException e) {
    Debug.logError(e,"Error initializing screen renderer",module);
    throw new ViewHandlerException(e.getMessage());
  }
catch (  IOException e) {
    throw new ViewHandlerException("Error in the response writer/output stream: " + e.toString(),e);
  }
catch (  SAXException e) {
    throw new ViewHandlerException("XML Error rendering page: " + e.toString(),e);
  }
catch (  ParserConfigurationException e) {
    throw new ViewHandlerException("XML Error rendering page: " + e.toString(),e);
  }
catch (  GeneralException e) {
    throw new ViewHandlerException("Lower level error rendering page: " + e.toString(),e);
  }
}
