{
  try {
    Writer writer=response.getWriter();
    Delegator delegator=(Delegator)request.getAttribute("delegator");
    if (UtilValidate.isEmpty(encoding)) {
      encoding=EntityUtilProperties.getPropertyValue("widget",getName() + ".default.encoding","none",delegator);
    }
    boolean compressOutput="compressed".equals(encoding);
    if (!compressOutput) {
      compressOutput="true".equals(EntityUtilProperties.getPropertyValue("widget",getName() + ".compress",delegator));
    }
    if (!compressOutput && this.servletContext != null) {
      compressOutput="true".equals(this.servletContext.getAttribute("compressHTML"));
    }
    if (compressOutput) {
      writer=new StandardCompress().getWriter(writer,null);
    }
    MapStack<String> context=MapStack.create();
    ScreenRenderer.populateContextForRequest(context,null,request,response,servletContext);
    ScreenStringRenderer screenStringRenderer=loadRenderers(request,response,context,writer);
    ScreenRenderer screens=new ScreenRenderer(writer,context,screenStringRenderer);
    context.put("screens",screens);
    context.put("simpleEncoder",StringUtil.getEncoder(UtilProperties.getPropertyValue("widget",getName() + ".encoder")));
    screenStringRenderer.renderScreenBegin(writer,context);
    screens.render(page);
    screenStringRenderer.renderScreenEnd(writer,context);
    writer.flush();
  }
 catch (  TemplateException e) {
    Debug.logError(e,"Error initializing screen renderer",module);
    throw new ViewHandlerException(e.getMessage());
  }
catch (  IOException e) {
    throw new ViewHandlerException("Error in the response writer/output stream: " + e.toString(),e);
  }
catch (  SAXException e) {
    throw new ViewHandlerException("XML Error rendering page: " + e.toString(),e);
  }
catch (  ParserConfigurationException e) {
    throw new ViewHandlerException("XML Error rendering page: " + e.toString(),e);
  }
catch (  GeneralException e) {
    throw new ViewHandlerException("Lower level error rendering page: " + e.toString(),e);
  }
}
