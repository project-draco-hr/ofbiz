{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  Map<String,Object> result=null;
  try {
    String body=(String)context.get("body");
    if (body == null) {
      Map<String,Object> bodyResult=prepareNotification(ctx,context);
      if (bodyResult.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_SUCCESS)) {
        body=(String)bodyResult.get("body");
      }
 else {
        Debug.logError("prepareNotification failed: " + bodyResult.get(ModelService.ERROR_MESSAGE),module);
        body=null;
      }
    }
    if (body != null) {
      Map<String,Object> emailContext=FastMap.newInstance();
      emailContext.put("sendTo",context.get("sendTo"));
      emailContext.put("body",body);
      emailContext.put("sendCc",context.get("sendCc"));
      emailContext.put("sendBcc",context.get("sendBcc"));
      emailContext.put("sendFrom",context.get("sendFrom"));
      emailContext.put("subject",context.get("subject"));
      emailContext.put("sendVia",context.get("sendVia"));
      emailContext.put("sendType",context.get("sendType"));
      emailContext.put("contentType",context.get("contentType"));
      result=dispatcher.runSync("sendMail",emailContext);
    }
 else {
      Debug.logError("Invalid email body; null is not allowed",module);
      result=ServiceUtil.returnError("Invalid email body; null is not allowed");
    }
  }
 catch (  GenericServiceException serviceException) {
    Debug.logError(serviceException,"Error sending email",module);
    result=ServiceUtil.returnError("Email delivery error, see error log");
  }
  return result;
}
