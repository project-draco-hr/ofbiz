{
  ArrayList<String> errorMsgs=new ArrayList<String>();
  Map<String,Object> result;
  String errMsg=null;
  if (orderId == null || orderId.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource_error,"cart.order_not_specified_to_add_from",this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  boolean noItems=true;
  List<? extends Object> itemIdList=null;
  Iterator<? extends Object> itemIter=null;
  OrderReadHelper orderHelper=new OrderReadHelper(delegator,orderId);
  if (addAll) {
    itemIdList=orderHelper.getOrderItems();
  }
 else {
    if (itemIds != null) {
      itemIdList=Arrays.asList(itemIds);
    }
  }
  if (UtilValidate.isNotEmpty(itemIdList)) {
    itemIter=itemIdList.iterator();
  }
  String orderItemTypeId=null;
  String productId=null;
  if (itemIter != null && itemIter.hasNext()) {
    while (itemIter.hasNext()) {
      GenericValue orderItem=null;
      Object value=itemIter.next();
      if (value instanceof GenericValue) {
        orderItem=(GenericValue)value;
      }
 else {
        String orderItemSeqId=(String)value;
        orderItem=orderHelper.getOrderItem(orderItemSeqId);
      }
      orderItemTypeId=orderItem.getString("orderItemTypeId");
      productId=orderItem.getString("productId");
      if (orderItemTypeId.equals("RENTAL_ORDER_ITEM"))       continue;
      if (UtilValidate.isNotEmpty(productId) && orderItem.get("quantity") != null) {
        BigDecimal amount=orderItem.getBigDecimal("selectedAmount");
        ProductConfigWrapper configWrapper=null;
        String aggregatedProdId=null;
        if ("AGGREGATED_CONF".equals(ProductWorker.getProductTypeId(delegator,productId))) {
          try {
            GenericValue instanceProduct=delegator.findByPrimaryKey("Product",UtilMisc.toMap("productId",productId));
            String configId=instanceProduct.getString("configId");
            aggregatedProdId=ProductWorker.getInstanceAggregatedId(delegator,productId);
            configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,configId,aggregatedProdId,cart.getProductStoreId(),catalogId,cart.getWebSiteId(),cart.getCurrency(),cart.getLocale(),cart.getAutoUserLogin());
          }
 catch (          GenericEntityException e) {
            errorMsgs.add(e.getMessage());
          }
        }
        try {
          this.cart.addOrIncreaseItem(UtilValidate.isNotEmpty(aggregatedProdId) ? aggregatedProdId : productId,amount,orderItem.getBigDecimal("quantity"),null,null,null,null,null,null,null,catalogId,configWrapper,orderItemTypeId,itemGroupNumber,null,dispatcher);
          noItems=false;
        }
 catch (        CartItemModifyException e) {
          errorMsgs.add(e.getMessage());
        }
catch (        ItemNotFoundException e) {
          errorMsgs.add(e.getMessage());
        }
      }
    }
    if (errorMsgs.size() > 0) {
      result=ServiceUtil.returnError(errorMsgs);
      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
      return result;
    }
  }
 else {
    noItems=true;
  }
  if (noItems) {
    result=ServiceUtil.returnSuccess();
    result.put("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderNoItemsFoundToAdd",this.cart.getLocale()));
    return result;
  }
  result=ServiceUtil.returnSuccess();
  return result;
}
