{
  ArrayList errorMsgs=new ArrayList();
  Map result;
  String errMsg=null;
  if (orderId == null || orderId.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource,"cart.order_not_specified_to_add_from",this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  boolean noItems=true;
  if (addAll) {
    Iterator itemIter=null;
    try {
      itemIter=UtilMisc.toIterator(delegator.findByAnd("OrderItem",UtilMisc.toMap("orderId",orderId),null));
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e.getMessage(),module);
      itemIter=null;
    }
    String orderItemTypeId=null;
    if (itemIter != null && itemIter.hasNext()) {
      while (itemIter.hasNext()) {
        GenericValue orderItem=(GenericValue)itemIter.next();
        orderItemTypeId=orderItem.getString("orderItemTypeId");
        if (orderItemTypeId.equals("RENTAL_ORDER_ITEM"))         continue;
        if (orderItem.get("productId") != null && orderItem.get("quantity") != null) {
          Double amount=orderItem.getDouble("selectedAmount");
          try {
            this.cart.addOrIncreaseItem(orderItem.getString("productId"),amount,orderItem.getDouble("quantity").doubleValue(),null,null,null,null,null,null,null,catalogId,null,orderItemTypeId,itemGroupNumber,null,dispatcher);
            noItems=false;
          }
 catch (          CartItemModifyException e) {
            errorMsgs.add(e.getMessage());
          }
catch (          ItemNotFoundException e) {
            errorMsgs.add(e.getMessage());
          }
        }
      }
      if (errorMsgs.size() > 0) {
        result=ServiceUtil.returnError(errorMsgs);
        result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
        return result;
      }
    }
 else {
      noItems=true;
    }
  }
 else {
    noItems=true;
    if (itemIds != null) {
      for (int i=0; i < itemIds.length; i++) {
        String orderItemSeqId=itemIds[i];
        GenericValue orderItem=null;
        try {
          orderItem=delegator.findByPrimaryKey("OrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId));
        }
 catch (        GenericEntityException e) {
          Debug.logWarning(e.getMessage(),module);
          errorMsgs.add("Order line \"" + orderItemSeqId + "\" not found, so not added.");
          continue;
        }
        if (orderItem != null) {
          if (orderItem.get("productId") != null && orderItem.get("quantity") != null) {
            Double amount=orderItem.getDouble("selectedAmount");
            try {
              this.cart.addOrIncreaseItem(orderItem.getString("productId"),amount,orderItem.getDouble("quantity").doubleValue(),null,null,null,null,null,null,null,catalogId,null,orderItem.getString("orderItemTypeId"),itemGroupNumber,null,dispatcher);
              noItems=false;
            }
 catch (            CartItemModifyException e) {
              errorMsgs.add(e.getMessage());
            }
catch (            ItemNotFoundException e) {
              errorMsgs.add(e.getMessage());
            }
          }
        }
      }
      if (errorMsgs.size() > 0) {
        result=ServiceUtil.returnError(errorMsgs);
        result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
        return result;
      }
    }
  }
  if (noItems) {
    result=ServiceUtil.returnSuccess();
    result.put("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderNoItemsFoundToAdd",this.cart.getLocale()));
    return result;
  }
  result=ServiceUtil.returnSuccess();
  return result;
}
