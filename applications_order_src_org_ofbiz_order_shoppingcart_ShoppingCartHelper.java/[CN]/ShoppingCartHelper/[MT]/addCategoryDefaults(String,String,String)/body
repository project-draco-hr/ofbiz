{
  ArrayList errorMsgs=new ArrayList();
  Map result=null;
  String errMsg=null;
  if (categoryId == null || categoryId.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource,"cart.category_not_specified_to_add_from",this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  Collection prodCatMemberCol=null;
  try {
    prodCatMemberCol=delegator.findByAndCache("ProductCategoryMember",UtilMisc.toMap("productCategoryId",categoryId));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.toString(),module);
    Map messageMap=UtilMisc.toMap("categoryId",categoryId);
    messageMap.put("message",e.getMessage());
    errMsg=UtilProperties.getMessage(resource,"cart.could_not_get_products_in_category_cart",messageMap,this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  if (prodCatMemberCol == null) {
    Map messageMap=UtilMisc.toMap("categoryId",categoryId);
    errMsg=UtilProperties.getMessage(resource,"cart.could_not_get_products_in_category",messageMap,this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  double totalQuantity=0;
  Iterator pcmIter=prodCatMemberCol.iterator();
  while (pcmIter.hasNext()) {
    GenericValue productCategoryMember=(GenericValue)pcmIter.next();
    Double quantity=productCategoryMember.getDouble("quantity");
    if (quantity != null && quantity.doubleValue() > 0.0) {
      try {
        this.cart.addOrIncreaseItem(productCategoryMember.getString("productId"),null,quantity.doubleValue(),null,null,null,null,null,null,null,catalogId,null,null,itemGroupNumber,dispatcher,null);
        totalQuantity+=quantity.doubleValue();
      }
 catch (      CartItemModifyException e) {
        errorMsgs.add(e.getMessage());
      }
catch (      ItemNotFoundException e) {
        errorMsgs.add(e.getMessage());
      }
    }
  }
  if (errorMsgs.size() > 0) {
    result=ServiceUtil.returnError(errorMsgs);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    return result;
  }
  result=ServiceUtil.returnSuccess();
  result.put("totalQuantity",new Double(totalQuantity));
  return result;
}
