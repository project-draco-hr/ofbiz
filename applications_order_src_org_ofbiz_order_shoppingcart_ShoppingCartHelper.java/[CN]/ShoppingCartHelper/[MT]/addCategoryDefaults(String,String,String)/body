{
  ArrayList<String> errorMsgs=new ArrayList<String>();
  Map<String,Object> result=null;
  String errMsg=null;
  if (categoryId == null || categoryId.length() <= 0) {
    errMsg=UtilProperties.getMessage(resource_error,"cart.category_not_specified_to_add_from",this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  Collection<GenericValue> prodCatMemberCol=null;
  try {
    prodCatMemberCol=EntityQuery.use(delegator).from("ProductCategoryMember").where("productCategoryId",categoryId).cache(true).queryList();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e.toString(),module);
    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("categoryId",categoryId);
    messageMap.put("message",e.getMessage());
    errMsg=UtilProperties.getMessage(resource_error,"cart.could_not_get_products_in_category_cart",messageMap,this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  if (prodCatMemberCol == null) {
    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("categoryId",categoryId);
    errMsg=UtilProperties.getMessage(resource_error,"cart.could_not_get_products_in_category",messageMap,this.cart.getLocale());
    result=ServiceUtil.returnError(errMsg);
    return result;
  }
  BigDecimal totalQuantity=BigDecimal.ZERO;
  for (  GenericValue productCategoryMember : prodCatMemberCol) {
    BigDecimal quantity=productCategoryMember.getBigDecimal("quantity");
    if (quantity != null && quantity.compareTo(BigDecimal.ZERO) > 0) {
      try {
        this.cart.addOrIncreaseItem(productCategoryMember.getString("productId"),null,quantity,null,null,null,null,null,null,null,catalogId,null,null,itemGroupNumber,null,dispatcher);
        totalQuantity=totalQuantity.add(quantity);
      }
 catch (      CartItemModifyException e) {
        errorMsgs.add(e.getMessage());
      }
catch (      ItemNotFoundException e) {
        errorMsgs.add(e.getMessage());
      }
    }
  }
  if (errorMsgs.size() > 0) {
    result=ServiceUtil.returnError(errorMsgs);
    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    return result;
  }
  result=ServiceUtil.returnSuccess();
  result.put("totalQuantity",totalQuantity);
  return result;
}
