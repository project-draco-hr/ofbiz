{
  if (delegator == null) {
    throw new IllegalArgumentException("No delegator available to lookup ProductFeature");
  }
  Map<String,String> fields=UtilMisc.<String,String>toMap("productId",productId,"productFeatureId",featureId);
  if (optionField != null) {
    int featureTypeStartIndex=optionField.indexOf('^') + 1;
    int featureTypeEndIndex=optionField.lastIndexOf('_');
    if (featureTypeStartIndex > 0 && featureTypeEndIndex > 0) {
      fields.put("productFeatureTypeId",optionField.substring(featureTypeStartIndex,featureTypeEndIndex));
    }
  }
  GenericValue productFeatureAppl=null;
  List<GenericValue> features=null;
  try {
    features=delegator.findByAnd("ProductFeatureAndAppl",fields,UtilMisc.toList("-fromDate"));
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return null;
  }
  if (features != null) {
    if (features.size() > 1) {
      features=EntityUtil.filterByDate(features);
    }
    productFeatureAppl=EntityUtil.getFirst(features);
  }
  return productFeatureAppl;
}
