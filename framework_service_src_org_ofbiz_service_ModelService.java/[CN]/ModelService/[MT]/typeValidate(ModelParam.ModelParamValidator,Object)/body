{
  Class validatorClass=null;
  try {
    validatorClass=ObjectType.loadClass(vali.getClassName());
  }
 catch (  ClassNotFoundException e) {
  }
  if (validatorClass == null) {
    throw new GeneralException("Unable to load validation class [" + vali.getClassName() + "]");
  }
  boolean foundObjectParam=true;
  Class[] stringParam=new Class[]{String.class};
  Class[] objectParam=new Class[]{Object.class};
  Method validatorMethod=null;
  try {
    validatorMethod=validatorClass.getMethod(vali.getMethodName(),objectParam);
  }
 catch (  NoSuchMethodException e) {
    foundObjectParam=false;
    try {
      validatorMethod=validatorClass.getMethod(vali.getMethodName(),stringParam);
    }
 catch (    NoSuchMethodException e2) {
    }
  }
  if (validatorMethod == null) {
    throw new GeneralException("Unable to find validation method [" + vali.getMethodName() + "] in class ["+ vali.getClassName()+ "]");
  }
  Object[] params;
  if (!foundObjectParam) {
    String converted=null;
    try {
      converted=(String)ObjectType.simpleTypeConvert(testValue,"String",null,null);
    }
 catch (    GeneralException e) {
      throw new GeneralException("Unable to convert parameter to String");
    }
    params=new Object[]{converted};
  }
 else {
    params=new Object[]{testValue};
  }
  Boolean resultBool=Boolean.FALSE;
  try {
    resultBool=(Boolean)validatorMethod.invoke(null,params);
  }
 catch (  ClassCastException e) {
    throw new GeneralException("Validation method [" + vali.getMethodName() + "] in class ["+ vali.getClassName()+ "] did not return expected Boolean");
  }
catch (  Exception e) {
    throw new GeneralException("Unable to run validation method [" + vali.getMethodName() + "] in class ["+ vali.getClassName()+ "]");
  }
  return resultBool.booleanValue();
}
