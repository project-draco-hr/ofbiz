{
  if (info == null || test == null) {
    throw new ServiceValidationException("Cannot validate NULL maps",model);
  }
  Set testSet=test.keySet();
  Set keySet=info.keySet();
  if (info.size() == 0 && test.size() == 0)   return;
  if (reverse && !testSet.containsAll(keySet)) {
    Set missing=new TreeSet(keySet);
    missing.removeAll(testSet);
    List missingMsgs=FastList.newInstance();
    Iterator iter=missing.iterator();
    while (iter.hasNext()) {
      String key=(String)iter.next();
      String msg=model.getParam(key).getPrimaryFailMessage(locale);
      if (msg == null) {
        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"ModelService.following_required_parameter_missing",locale);
        msg=errMsg + " [" + mode+ "] ["+ model.name+ "."+ key+ "]";
      }
      missingMsgs.add(msg);
    }
    List missingCopy=FastList.newInstance();
    missingCopy.addAll(missing);
    throw new ServiceValidationException(missingMsgs,model,missingCopy,null,mode);
  }
  if (!keySet.containsAll(testSet)) {
    Set extra=new TreeSet(testSet);
    extra.removeAll(keySet);
    List extraMsgs=FastList.newInstance();
    Iterator iter=extra.iterator();
    while (iter.hasNext()) {
      String key=(String)iter.next();
      ModelParam param=model.getParam(key);
      String msg=null;
      if (param != null) {
        msg=param.getPrimaryFailMessage(locale);
      }
      if (msg == null) {
        msg="Unknown parameter found: [" + model.name + "."+ key+ "]";
      }
      extraMsgs.add(msg);
    }
    List extraCopy=FastList.newInstance();
    extraCopy.addAll(extra);
    throw new ServiceValidationException(extraMsgs,model,null,extraCopy,mode);
  }
  List<String> typeFailMsgs=FastList.newInstance();
  Iterator i=testSet.iterator();
  while (i.hasNext()) {
    String key=(String)i.next();
    ModelParam param=model.getParam(key);
    Object testObject=test.get(key);
    String infoType=(String)info.get(key);
    if (param.validators != null && param.validators.size() > 0) {
      for (      ModelParam.ModelParamValidator val : param.validators) {
        if (UtilValidate.isNotEmpty(val.getMethodName())) {
          try {
            if (!typeValidate(val,testObject)) {
              String msg=val.getFailMessage(locale);
              if (msg == null) {
                msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";
              }
              typeFailMsgs.add(msg);
            }
          }
 catch (          GeneralException e) {
            Debug.logError(e,module);
            String msg=param.getPrimaryFailMessage(locale);
            if (msg == null) {
              msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";
            }
            typeFailMsgs.add(msg);
          }
        }
 else {
          if (!ObjectType.instanceOf(testObject,infoType,null)) {
            String msg=val.getFailMessage(locale);
            if (msg == null) {
              msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";
            }
            typeFailMsgs.add(msg);
          }
        }
      }
    }
 else {
      if (!ObjectType.instanceOf(testObject,infoType,null)) {
        String testType=testObject == null ? "null" : testObject.getClass().getName();
        String msg="Type check failed for field [" + model.name + "."+ key+ "]; expected type is ["+ infoType+ "]; actual type is ["+ testType+ "]";
        typeFailMsgs.add(msg);
      }
    }
  }
  if (typeFailMsgs.size() > 0) {
    throw new ServiceValidationException(typeFailMsgs,model,mode);
  }
}
