{
  if (UtilValidate.isNotEmpty(this.permissionServiceName)) {
    ModelService permission;
    try {
      permission=dctx.getModelService(this.permissionServiceName);
    }
 catch (    GenericServiceException e) {
      Map result=ServiceUtil.returnSuccess();
      result.put("hasPermission",Boolean.FALSE);
      result.put("failMessage",e.getMessage());
      return result;
    }
    if (permission != null) {
      Map ctx=permission.makeValid(context,ModelService.IN_PARAM);
      if (UtilValidate.isNotEmpty(this.permissionMainAction)) {
        ctx.put("mainAction",this.permissionMainAction);
      }
      LocalDispatcher dispatcher=dctx.getDispatcher();
      Map resp;
      try {
        resp=dispatcher.runSync(permission.name,ctx,300,true);
      }
 catch (      GenericServiceException e) {
        Debug.logError(e,module);
        Map result=ServiceUtil.returnSuccess();
        result.put("hasPermission",Boolean.FALSE);
        result.put("failMessage",e.getMessage());
        return result;
      }
      if (ServiceUtil.isError(resp) || ServiceUtil.isFailure(resp)) {
        Map result=ServiceUtil.returnSuccess();
        result.put("hasPermission",Boolean.FALSE);
        result.put("failMessage",ServiceUtil.getErrorMessage(resp));
        return result;
      }
      return resp;
    }
 else {
      Map result=ServiceUtil.returnSuccess();
      result.put("hasPermission",Boolean.FALSE);
      result.put("failMessage","No ModelService found with the name [" + this.permissionServiceName + "]");
      return result;
    }
  }
 else {
    Map result=ServiceUtil.returnSuccess();
    result.put("hasPermission",Boolean.TRUE);
    return result;
  }
}
