{
  Input input=def.createInput();
  List inParam=this.getParameterNames(IN_PARAM,true,false);
  if (inParam != null) {
    Message inMessage=def.createMessage();
    inMessage.setQName(new QName(TNS,this.name + "Request"));
    inMessage.setUndefined(false);
    Iterator i=inParam.iterator();
    while (i.hasNext()) {
      String paramName=(String)i.next();
      ModelParam param=this.getParam(paramName);
      if (!param.internal) {
        inMessage.addPart(param.getWSDLPart(def));
      }
    }
    def.addMessage(inMessage);
    input.setMessage(inMessage);
  }
  Output output=def.createOutput();
  List outParam=this.getParameterNames(OUT_PARAM,true,false);
  if (outParam != null) {
    Message outMessage=def.createMessage();
    outMessage.setQName(new QName(TNS,this.name + "Response"));
    outMessage.setUndefined(false);
    Iterator i=outParam.iterator();
    while (i.hasNext()) {
      String paramName=(String)i.next();
      ModelParam param=this.getParam(paramName);
      if (!param.internal) {
        outMessage.addPart(param.getWSDLPart(def));
      }
    }
    def.addMessage(outMessage);
    output.setMessage(outMessage);
  }
  Operation operation=def.createOperation();
  operation.setName(this.name);
  operation.setUndefined(false);
  operation.setOutput(output);
  operation.setInput(input);
  PortType portType=def.createPortType();
  portType.setQName(new QName(TNS,this.name + "PortType"));
  portType.addOperation(operation);
  portType.setUndefined(false);
  def.addPortType(portType);
  SOAPBinding soapBinding=new SOAPBindingImpl();
  soapBinding.setStyle("document");
  soapBinding.setTransportURI("http://schemas.xmlsoap.org/soap/http");
  Binding binding=def.createBinding();
  binding.setQName(new QName(TNS,this.name + "SoapBinding"));
  binding.setPortType(portType);
  binding.setUndefined(false);
  binding.addExtensibilityElement(soapBinding);
  BindingOperation bindingOperation=def.createBindingOperation();
  bindingOperation.setName(operation.getName());
  bindingOperation.setOperation(operation);
  SOAPBody soapBody=new SOAPBodyImpl();
  soapBody.setUse("literal");
  soapBody.setNamespaceURI(TNS);
  soapBody.setEncodingStyles(UtilMisc.toList("http://schemas.xmlsoap.org/soap/encoding/"));
  BindingOutput bindingOutput=def.createBindingOutput();
  bindingOutput.addExtensibilityElement(soapBody);
  bindingOperation.setBindingOutput(bindingOutput);
  BindingInput bindingInput=def.createBindingInput();
  bindingInput.addExtensibilityElement(soapBody);
  bindingOperation.setBindingInput(bindingInput);
  SOAPOperation soapOperation=new SOAPOperationImpl();
  soapOperation.setSoapActionURI("");
  bindingOperation.addExtensibilityElement(soapOperation);
  binding.addBindingOperation(bindingOperation);
  def.addBinding(binding);
  Port port=def.createPort();
  port.setBinding(binding);
  port.setName(this.name + "Port");
  if (locationURI != null) {
    SOAPAddress soapAddress=new SOAPAddressImpl();
    soapAddress.setLocationURI(locationURI);
    port.addExtensibilityElement(soapAddress);
  }
  Service service=def.createService();
  service.setQName(new QName(TNS,this.name));
  service.addPort(port);
  def.addService(service);
}
