{
  Delegator delegator=dctx.getDelegator();
  HashMap<String,Object> attributeMapList=UtilGenerics.cast(context.get("attributeMapList"));
  String productListingId=(String)context.get("productListingId");
  try {
    List<GenericValue> attributeToClears=EntityQuery.use(delegator).from("EbayProductListingAttribute").where("productListingId",productListingId).queryList();
    for (int clearCount=0; clearCount < attributeToClears.size(); clearCount++) {
      GenericValue valueToClear=attributeToClears.get(clearCount);
      if (valueToClear != null) {
        valueToClear.remove();
      }
    }
    for (    Map.Entry<String,Object> entry : attributeMapList.entrySet()) {
      if (UtilValidate.isNotEmpty(entry.getKey())) {
        GenericValue ebayProductListingAttribute=delegator.makeValue("EbayProductListingAttribute");
        ebayProductListingAttribute.set("productListingId",productListingId);
        ebayProductListingAttribute.set("attrName",entry.getKey().toString());
        ebayProductListingAttribute.set("attrValue",entry.getValue().toString());
        ebayProductListingAttribute.create();
      }
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
