{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  HashMap attributeMapList=(HashMap)context.get("attributeMapList");
  String productListingId=(String)context.get("productListingId");
  try {
    List<GenericValue> attributeToClears=delegator.findByAnd("EbayProductListingAttribute",UtilMisc.toMap("productListingId",productListingId));
    for (int clearCount=0; clearCount < attributeToClears.size(); clearCount++) {
      GenericValue valueToClear=attributeToClears.get(clearCount);
      if (valueToClear != null) {
        valueToClear.remove();
      }
    }
    Set attributeSet=attributeMapList.entrySet();
    Iterator itr=attributeSet.iterator();
    while (itr.hasNext()) {
      Map.Entry attrMap=(Map.Entry)itr.next();
      if (UtilValidate.isNotEmpty(attrMap.getKey())) {
        GenericValue ebayProductListingAttribute=delegator.makeValue("EbayProductListingAttribute");
        ebayProductListingAttribute.set("productListingId",productListingId);
        ebayProductListingAttribute.set("attrName",attrMap.getKey().toString());
        ebayProductListingAttribute.set("attrValue",attrMap.getValue().toString());
        ebayProductListingAttribute.create();
      }
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return ServiceUtil.returnSuccess();
}
