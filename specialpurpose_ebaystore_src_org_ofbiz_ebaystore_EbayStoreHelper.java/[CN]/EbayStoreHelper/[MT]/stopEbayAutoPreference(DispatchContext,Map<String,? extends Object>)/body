{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Delegator delegator=dctx.getDelegator();
  String productStoreId=(String)context.get("productStoreId");
  String autoPrefEnumId=(String)context.get("autoPrefEnumId");
  try {
    GenericValue ebayProductPref=EntityQuery.use(delegator).from("EbayProductStorePref").where("productStoreId",productStoreId,"autoPrefEnumId",autoPrefEnumId).queryOne();
    String jobId=ebayProductPref.getString("autoPrefJobId");
    List<GenericValue> jobs=delegator.findByAnd("JobSandbox",UtilMisc.toMap("parentJobId",jobId,"statusId","SERVICE_PENDING"),null,false);
    Map<String,Object> inMap=FastMap.newInstance();
    inMap.put("userLogin",userLogin);
    for (int index=0; index < jobs.size(); index++) {
      inMap.put("jobId",jobs.get(index).getString("jobId"));
      dispatcher.runSync("cancelScheduledJob",inMap);
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
