{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  Map<String,Object> itemObject=UtilGenerics.checkMap(context.get("itemObject"));
  String productListingId=itemObject.get("productListingId").toString();
  AddItemCall addItemCall=(AddItemCall)itemObject.get("addItemCall");
  AddItemRequestType req=new AddItemRequestType();
  AddItemResponseType resp=null;
  try {
    GenericValue userLogin=delegator.findOne("UserLogin",UtilMisc.toMap("userLoginId","system"),false);
    ItemType item=addItemCall.getItem();
    req.setItem(item);
    resp=(AddItemResponseType)addItemCall.execute(req);
    if (resp != null && "SUCCESS".equals(resp.getAck().toString()) || "WARNING".equals(resp.getAck().toString())) {
      String itemId=resp.getItemID();
      String listingXml=addItemCall.getRequestXml().toString();
      Map<String,Object> updateItemMap=FastMap.newInstance();
      updateItemMap.put("productListingId",productListingId);
      updateItemMap.put("itemId",itemId);
      updateItemMap.put("listingXml",listingXml);
      updateItemMap.put("statusId","ITEM_APPROVED");
      updateItemMap.put("userLogin",userLogin);
      try {
        dispatcher.runSync("updateEbayProductListing",updateItemMap);
      }
 catch (      GenericServiceException ex) {
        Debug.logError(ex.getMessage(),module);
        return ServiceUtil.returnError(ex.getMessage());
      }
    }
    result=ServiceUtil.returnSuccess();
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
