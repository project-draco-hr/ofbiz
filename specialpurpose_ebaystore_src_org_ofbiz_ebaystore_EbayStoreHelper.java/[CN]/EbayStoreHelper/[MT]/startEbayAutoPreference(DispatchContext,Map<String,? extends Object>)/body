{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productStoreId=(String)context.get("productStoreId");
  String autoPrefEnumId=(String)context.get("autoPrefEnumId");
  String serviceName=(String)context.get("serviceName");
  try {
    GenericValue ebayProductPref=delegator.findOne("EbayProductStorePref",UtilMisc.toMap("productStoreId",productStoreId,"autoPrefEnumId",autoPrefEnumId),false);
    String jobId=ebayProductPref.getString("autoPrefJobId");
    if (UtilValidate.isNotEmpty(jobId)) {
      List<GenericValue> jobs=delegator.findByAnd("JobSandbox",UtilMisc.toMap("parentJobId",jobId,"statusId","SERVICE_PENDING"),null,false);
      if (jobs.size() == 0) {
        Map<String,Object> inMap=FastMap.newInstance();
        inMap.put("jobId",jobId);
        inMap.put("userLogin",userLogin);
        dispatcher.runSync("resetScheduledJob",inMap);
      }
    }
    if (UtilValidate.isEmpty(ebayProductPref.getString("autoPrefJobId"))) {
      if (UtilValidate.isEmpty(serviceName)) {
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EbayStoreAutoPrefJobEmpty",locale));
      }
      String runtimeDataId=null;
      GenericValue runtimeData=delegator.makeValue("RuntimeData");
      runtimeData=delegator.createSetNextSeqId(runtimeData);
      runtimeDataId=runtimeData.getString("runtimeDataId");
      String infoId=null;
      String jobName=null;
      long startTime=UtilDateTime.getNextDayStart(UtilDateTime.nowTimestamp()).getTime();
      RecurrenceInfo info;
      info=RecurrenceInfo.makeInfo(delegator,startTime,4,1,-1);
      infoId=info.primaryKey();
      GenericValue enumeration=delegator.findOne("Enumeration",UtilMisc.toMap("enumId",autoPrefEnumId),false);
      jobName=enumeration.getString("description");
      if (jobName == null) {
        jobName=Long.toString((new Date().getTime()));
      }
      Map<String,Object> jFields=UtilMisc.<String,Object>toMap("jobName",jobName,"runTime",UtilDateTime.nowTimestamp(),"serviceName",serviceName,"statusId","SERVICE_PENDING","recurrenceInfoId",infoId,"runtimeDataId",runtimeDataId);
      jFields.put("poolId",ServiceConfigUtil.getSendPool());
      jFields.put("loaderName",delegator.getDelegatorName());
      GenericValue jobV;
      jobV=delegator.makeValue("JobSandbox",jFields);
      GenericValue jobSandbox=delegator.createSetNextSeqId(jobV);
      ebayProductPref.set("autoPrefJobId",jobSandbox.getString("jobId"));
      ebayProductPref.store();
      Map<String,Object> infoData=FastMap.newInstance();
      infoData.put("jobId",jobSandbox.getString("jobId"));
      infoData.put("productStoreId",ebayProductPref.getString("productStoreId"));
      runtimeData.set("runtimeInfo",XmlSerializer.serialize(infoData));
      runtimeData.store();
    }
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericServiceException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  SerializeException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  IOException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  RecurrenceInfoException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
catch (  GenericConfigException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
