{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericDelegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String fileName=(String)context.get("xmlFileName");
  URL xmlFile=UtilURL.fromResource(fileName);
  if (xmlFile != null) {
    Document xmlSyncDoc=null;
    try {
      xmlSyncDoc=UtilXml.readXmlDocument(xmlFile,false);
    }
 catch (    SAXException e) {
      Debug.logError(e,module);
    }
catch (    ParserConfigurationException e) {
      Debug.logError(e,module);
    }
catch (    IOException e) {
      Debug.logError(e,module);
    }
    if (xmlSyncDoc == null) {
      return ServiceUtil.returnError("EntitySync XML document (" + fileName + ") is not valid!");
    }
    List<? extends Element> syncElements=UtilXml.childElementList(xmlSyncDoc.getDocumentElement());
    if (syncElements != null) {
      for (      Element entitySync : syncElements) {
        String entitySyncId=entitySync.getAttribute("entitySyncId");
        String startTime=entitySync.getAttribute("lastSuccessfulSynchTime");
        String createString=UtilXml.childElementValue(entitySync,"values-to-create");
        String storeString=UtilXml.childElementValue(entitySync,"values-to-store");
        String removeString=UtilXml.childElementValue(entitySync,"keys-to-remove");
        try {
          List<GenericValue> valuesToCreate=checkList(XmlSerializer.deserialize(createString,delegator),GenericValue.class);
          List<GenericValue> valuesToStore=checkList(XmlSerializer.deserialize(storeString,delegator),GenericValue.class);
          List<GenericEntity> keysToRemove=checkList(XmlSerializer.deserialize(removeString,delegator),GenericEntity.class);
          Map<String,Object> storeContext=UtilMisc.toMap("entitySyncId",entitySyncId,"valuesToCreate",valuesToCreate,"valuesToStore",valuesToStore,"keysToRemove",keysToRemove,"userLogin",userLogin);
          Map<String,Object> storeResult=dispatcher.runSync("storeEntitySyncData",storeContext);
          if (ServiceUtil.isError(storeResult)) {
            throw new Exception(ServiceUtil.getErrorMessage(storeResult));
          }
        }
 catch (        Exception e) {
          return ServiceUtil.returnError("Unable to load EntitySync XML [" + entitySyncId + "] - Problem at '"+ startTime+ "' Error: "+ e.getMessage());
        }
      }
    }
  }
 else {
    return ServiceUtil.returnError("Offline EntitySync XML file not found (" + fileName + ")");
  }
  return ServiceUtil.returnSuccess();
}
