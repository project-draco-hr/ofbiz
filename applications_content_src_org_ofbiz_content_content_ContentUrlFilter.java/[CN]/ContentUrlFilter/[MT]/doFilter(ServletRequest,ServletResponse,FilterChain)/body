{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  Delegator delegator=(Delegator)httpRequest.getSession().getServletContext().getAttribute("delegator");
  ServletContext servletContext=config.getServletContext();
  UrlServletHelper.setRequestAttributes(request,delegator,servletContext);
  String urlContentId=null;
  String pathInfo=httpRequest.getServletPath();
  if (UtilValidate.isNotEmpty(pathInfo)) {
    List<String> paths=StringUtil.split(pathInfo,"/");
    String alternativeUrl=paths.get(0);
    if (alternativeUrl.endsWith("-content")) {
      try {
        List<EntityCondition> expr=FastList.newInstance();
        expr.add(EntityCondition.makeCondition("caContentAssocTypeId",EntityOperator.EQUALS,"ALTERNATIVE_URL"));
        expr.add(EntityCondition.makeCondition("caThruDate",EntityOperator.EQUALS,null));
        Set<String> fieldsToSelect=UtilMisc.toSet("contentIdStart","dataResourceId","caFromDate","caThruDate","caCreatedDate");
        List<GenericValue> contentAssocDataResources=delegator.findList("ContentAssocDataResourceViewTo",EntityCondition.makeCondition(expr),fieldsToSelect,UtilMisc.toList("-caCreatedDate"),null,true);
        for (        GenericValue contentAssocDateResource : contentAssocDataResources) {
          GenericValue electronicText=delegator.findByPrimaryKey("ElectronicText",UtilMisc.toMap("dataResourceId",contentAssocDateResource.getString("dataResourceId")));
          if (UtilValidate.isEmpty(electronicText) || UtilValidate.isEmpty(electronicText.get("textData"))) {
            continue;
          }
          if (alternativeUrl.equalsIgnoreCase(UrlServletHelper.invalidCharacter(electronicText.getString("textData")) + "-" + contentAssocDateResource.getString("contentIdStart")+ "-content")) {
            urlContentId=contentAssocDateResource.getString("contentIdStart");
            break;
          }
        }
      }
 catch (      Exception e) {
      }
    }
    if (UtilValidate.isNotEmpty(urlContentId)) {
      StringBuilder urlBuilder=new StringBuilder();
      urlBuilder.append("/" + CONTROL_MOUNT_POINT);
      urlBuilder.append("/" + config.getInitParameter("viewRequest") + "?contentId="+ urlContentId);
      UrlServletHelper.setViewQueryParameters(request,urlBuilder);
      Debug.logInfo("[Filtered request]: " + pathInfo + " ("+ urlBuilder+ ")",module);
      RequestDispatcher dispatch=request.getRequestDispatcher(urlBuilder.toString());
      dispatch.forward(request,response);
      return;
    }
    UrlServletHelper.checkPathAlias(request,httpResponse,delegator,pathInfo);
  }
  chain.doFilter(request,response);
}
