{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  Delegator delegator=(Delegator)httpRequest.getSession().getServletContext().getAttribute("delegator");
  ServletContext servletContext=config.getServletContext();
  UrlServletHelper.setRequestAttributes(request,delegator,servletContext);
  String urlContentId=null;
  StringBuffer pathInfoBuffer=UtilHttp.getFullRequestUrl(httpRequest);
  String pathInfo=pathInfoBuffer.toString();
  if (UtilValidate.isNotEmpty(pathInfo)) {
    String alternativeUrl=pathInfo.substring(pathInfo.lastIndexOf("/"));
    if (alternativeUrl.endsWith("-content")) {
      try {
        List<GenericValue> contentDataResourceViews=delegator.findByAnd("ContentDataResourceView",UtilMisc.toMap("drObjectInfo",alternativeUrl));
        if (contentDataResourceViews.size() > 0) {
          GenericValue contentDataResourceView=EntityUtil.getFirst(contentDataResourceViews);
          List<GenericValue> contents=EntityUtil.filterByDate(delegator.findByAnd("ContentAssoc",UtilMisc.toMap("contentAssocTypeId","ALTERNATIVE_URL","contentIdTo",contentDataResourceView.getString("contentId"))));
          if (contents.size() > 0) {
            GenericValue content=EntityUtil.getFirst(contents);
            urlContentId=content.getString("contentId");
          }
        }
      }
 catch (      Exception e) {
        Debug.logWarning(e.getMessage(),module);
      }
    }
    if (UtilValidate.isNotEmpty(urlContentId)) {
      StringBuilder urlBuilder=new StringBuilder();
      urlBuilder.append("/" + CONTROL_MOUNT_POINT);
      urlBuilder.append("/" + config.getInitParameter("viewRequest") + "?contentId="+ urlContentId);
      UrlServletHelper.setViewQueryParameters(request,urlBuilder);
      Debug.logInfo("[Filtered request]: " + pathInfo + " ("+ urlBuilder+ ")",module);
      RequestDispatcher dispatch=request.getRequestDispatcher(urlBuilder.toString());
      dispatch.forward(request,response);
      return;
    }
    UrlServletHelper.checkPathAlias(request,httpResponse,delegator,pathInfo);
  }
  chain.doFilter(request,response);
}
