{
  super(element,simpleMethod);
  serviceName=element.getAttribute("service-name");
  inMapAcsr=new ContextAccessor<Map<String,Object>>(element.getAttribute("in-map-name"));
  includeUserLoginStr=element.getAttribute("include-user-login");
  breakOnErrorStr=element.getAttribute("break-on-error");
  errorCode=element.getAttribute("error-code");
  if (errorCode == null || errorCode.length() == 0)   errorCode="error";
  this.requireNewTransactionStr=element.getAttribute("require-new-transaction");
  String timeoutStr=UtilXml.checkEmpty(element.getAttribute("transaction-timeout"),element.getAttribute("transaction-timout"));
  int timeout=-1;
  if (!UtilValidate.isEmpty(timeoutStr)) {
    try {
      timeout=Integer.parseInt(timeoutStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting timeout to 0 (default)",module);
      timeout=0;
    }
  }
  this.transactionTimeout=timeout;
  successCode=element.getAttribute("success-code");
  if (successCode == null || successCode.length() == 0)   successCode="success";
  errorPrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"error-prefix"),"service.error.prefix");
  errorSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"error-suffix"),"service.error.suffix");
  successPrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"success-prefix"),"service.success.prefix");
  successSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"success-suffix"),"service.success.suffix");
  messagePrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"message-prefix"),"service.message.prefix");
  messageSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"message-suffix"),"service.message.suffix");
  defaultMessage=new FlexibleMessage(UtilXml.firstChildElement(element,"default-message"),"service.default.message");
  List<? extends Element> resultsToMapElements=UtilXml.childElementList(element,"results-to-map");
  if (UtilValidate.isNotEmpty(resultsToMapElements)) {
    for (    Element resultsToMapElement : resultsToMapElements) {
      resultsToMap.add(resultsToMapElement.getAttribute("map-name"));
    }
  }
  List<? extends Element> resultToFieldElements=UtilXml.childElementList(element,"result-to-field");
  if (UtilValidate.isNotEmpty(resultToFieldElements)) {
    for (    Element resultToFieldElement : resultToFieldElements) {
      ResultToFieldDef rtfDef=new ResultToFieldDef();
      rtfDef.resultName=resultToFieldElement.getAttribute("result-name");
      rtfDef.mapAcsr=new ContextAccessor<Map<String,Object>>(resultToFieldElement.getAttribute("map-name"));
      rtfDef.fieldAcsr=new ContextAccessor<Object>(resultToFieldElement.getAttribute("field-name"),rtfDef.resultName);
      resultToField.add(rtfDef);
    }
  }
  List<? extends Element> resultToRequestElements=UtilXml.childElementList(element,"result-to-request");
  if (UtilValidate.isNotEmpty(resultToRequestElements)) {
    for (    Element resultToRequestElement : resultToRequestElements) {
      FlexibleServletAccessor<Object> reqAcsr=new FlexibleServletAccessor<Object>(resultToRequestElement.getAttribute("request-name"),resultToRequestElement.getAttribute("result-name"));
      ContextAccessor<Object> resultAcsr=new ContextAccessor<Object>(resultToRequestElement.getAttribute("result-name"));
      resultToRequest.put(reqAcsr,resultAcsr);
    }
  }
  List<? extends Element> resultToSessionElements=UtilXml.childElementList(element,"result-to-session");
  if (UtilValidate.isNotEmpty(resultToSessionElements)) {
    for (    Element resultToSessionElement : resultToSessionElements) {
      FlexibleServletAccessor<Object> sesAcsr=new FlexibleServletAccessor<Object>(resultToSessionElement.getAttribute("session-name"),resultToSessionElement.getAttribute("result-name"));
      ContextAccessor<Object> resultAcsr=new ContextAccessor<Object>(resultToSessionElement.getAttribute("result-name"));
      resultToSession.put(sesAcsr,resultAcsr);
    }
  }
  List<? extends Element> resultToResultElements=UtilXml.childElementList(element,"result-to-result");
  if (UtilValidate.isNotEmpty(resultToResultElements)) {
    for (    Element resultToResultElement : resultToResultElements) {
      ContextAccessor<Object> serResAcsr=new ContextAccessor<Object>(resultToResultElement.getAttribute("service-result-name"),resultToResultElement.getAttribute("result-name"));
      ContextAccessor<Object> resultAcsr=new ContextAccessor<Object>(resultToResultElement.getAttribute("result-name"));
      resultToResult.put(serResAcsr,resultAcsr);
    }
  }
}
