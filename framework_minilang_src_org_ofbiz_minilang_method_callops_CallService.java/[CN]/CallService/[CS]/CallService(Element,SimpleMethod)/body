{
  super(element,simpleMethod);
  if (MiniLangValidate.validationOn()) {
    MiniLangValidate.attributeNames(simpleMethod,element,"service-name","in-map-name","include-user-login","break-on-error","error-code","require-new-transaction","transaction-timeout","success-code");
    MiniLangValidate.constantAttributes(simpleMethod,element,"include-user-login","break-on-error","error-code","require-new-transaction","transaction-timeout","success-code");
    MiniLangValidate.expressionAttributes(simpleMethod,element,"service-name","in-map-name");
    MiniLangValidate.requiredAttributes(simpleMethod,element,"service-name");
    MiniLangValidate.childElements(simpleMethod,element,"error-prefix","error-suffix","success-prefix","success-suffix","message-prefix","message-suffix","default-message","results-to-map","result-to-field","result-to-request","result-to-session","result-to-result");
  }
  serviceName=element.getAttribute("service-name");
  inMapFma=FlexibleMapAccessor.getInstance(element.getAttribute("in-map-name"));
  includeUserLogin=!"false".equals(element.getAttribute("include-user-login"));
  breakOnError=!"false".equals(element.getAttribute("break-on-error"));
  errorCode=element.getAttribute("error-code");
  requireNewTransaction="true".equals(element.getAttribute("require-new-transaction"));
  String timeoutStr=UtilXml.checkEmpty(element.getAttribute("transaction-timeout"));
  int timeout=-1;
  if (!timeoutStr.isEmpty()) {
    try {
      timeout=Integer.parseInt(timeoutStr);
    }
 catch (    NumberFormatException e) {
      MiniLangValidate.handleError("Exception thrown while parsing transaction-timeout attribute: " + e.getMessage(),simpleMethod,element);
      timeout=0;
    }
  }
  transactionTimeout=timeout;
  successCode=element.getAttribute("success-code");
  errorPrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"error-prefix"),"service.error.prefix");
  errorSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"error-suffix"),"service.error.suffix");
  successPrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"success-prefix"),"service.success.prefix");
  successSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"success-suffix"),"service.success.suffix");
  messagePrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"message-prefix"),"service.message.prefix");
  messageSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"message-suffix"),"service.message.suffix");
  defaultMessage=new FlexibleMessage(UtilXml.firstChildElement(element,"default-message"),null);
  List<? extends Element> resultsToMapElements=UtilXml.childElementList(element,"results-to-map");
  if (UtilValidate.isNotEmpty(resultsToMapElements)) {
    List<String> resultsToMapList=new ArrayList<String>(resultsToMapElements.size());
    for (    Element resultsToMapElement : resultsToMapElements) {
      resultsToMapList.add(resultsToMapElement.getAttribute("map-name"));
    }
    this.resultsToMapList=Collections.unmodifiableList(resultsToMapList);
  }
 else {
    this.resultsToMapList=null;
  }
  List<? extends Element> resultToFieldElements=UtilXml.childElementList(element,"result-to-field");
  if (UtilValidate.isNotEmpty(resultToFieldElements)) {
    List<ResultToField> resultToFieldList=new ArrayList<ResultToField>(resultToFieldElements.size());
    for (    Element resultToFieldElement : resultToFieldElements) {
      resultToFieldList.add(new ResultToField(resultToFieldElement));
    }
    this.resultToFieldList=Collections.unmodifiableList(resultToFieldList);
  }
 else {
    this.resultToFieldList=null;
  }
  List<? extends Element> resultToRequestElements=UtilXml.childElementList(element,"result-to-request");
  if (UtilValidate.isNotEmpty(resultToRequestElements)) {
    List<ResultToRequest> resultToRequestList=new ArrayList<ResultToRequest>(resultToRequestElements.size());
    for (    Element resultToRequestElement : resultToRequestElements) {
      resultToRequestList.add(new ResultToRequest(resultToRequestElement));
    }
    this.resultToRequestList=Collections.unmodifiableList(resultToRequestList);
  }
 else {
    this.resultToRequestList=null;
  }
  List<? extends Element> resultToSessionElements=UtilXml.childElementList(element,"result-to-session");
  if (UtilValidate.isNotEmpty(resultToSessionElements)) {
    List<ResultToSession> resultToSessionList=new ArrayList<ResultToSession>(resultToSessionElements.size());
    for (    Element resultToSessionElement : resultToSessionElements) {
      resultToSessionList.add(new ResultToSession(resultToSessionElement));
    }
    this.resultToSessionList=Collections.unmodifiableList(resultToSessionList);
  }
 else {
    this.resultToSessionList=null;
  }
  List<? extends Element> resultToResultElements=UtilXml.childElementList(element,"result-to-result");
  if (UtilValidate.isNotEmpty(resultToResultElements)) {
    List<ResultToResult> resultToResultList=new ArrayList<ResultToResult>(resultToResultElements.size());
    for (    Element resultToResultElement : resultToResultElements) {
      resultToResultList.add(new ResultToResult(resultToResultElement));
    }
    this.resultToResultList=Collections.unmodifiableList(resultToResultList);
  }
 else {
    this.resultToResultList=null;
  }
}
