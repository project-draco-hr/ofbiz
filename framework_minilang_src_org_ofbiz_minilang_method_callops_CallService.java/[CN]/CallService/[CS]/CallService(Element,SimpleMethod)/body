{
  super(element,simpleMethod);
  serviceName=element.getAttribute("service-name");
  inMapAcsr=new ContextAccessor<Map<String,Object>>(element.getAttribute("in-map-name"));
  includeUserLogin=!"false".equals(element.getAttribute("include-user-login"));
  breakOnError=!"false".equals(element.getAttribute("break-on-error"));
  errorCode=element.getAttribute("error-code");
  requireNewTransaction="true".equals(element.getAttribute("require-new-transaction"));
  String timeoutStr=UtilXml.checkEmpty(element.getAttribute("transaction-timeout"));
  int timeout=-1;
  if (!timeoutStr.isEmpty()) {
    try {
      timeout=Integer.parseInt(timeoutStr);
    }
 catch (    NumberFormatException e) {
      Debug.logWarning(e,"Setting timeout to 0 (default)",module);
      timeout=0;
    }
  }
  transactionTimeout=timeout;
  successCode=element.getAttribute("success-code");
  errorPrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"error-prefix"),"service.error.prefix");
  errorSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"error-suffix"),"service.error.suffix");
  successPrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"success-prefix"),"service.success.prefix");
  successSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"success-suffix"),"service.success.suffix");
  messagePrefix=new FlexibleMessage(UtilXml.firstChildElement(element,"message-prefix"),"service.message.prefix");
  messageSuffix=new FlexibleMessage(UtilXml.firstChildElement(element,"message-suffix"),"service.message.suffix");
  defaultMessage=new FlexibleMessage(UtilXml.firstChildElement(element,"default-message"),null);
  List<? extends Element> resultsToMapElements=UtilXml.childElementList(element,"results-to-map");
  if (UtilValidate.isNotEmpty(resultsToMapElements)) {
    List<String> resultsToMapList=new ArrayList<String>(resultsToMapElements.size());
    for (    Element resultsToMapElement : resultsToMapElements) {
      resultsToMapList.add(resultsToMapElement.getAttribute("map-name"));
    }
    this.resultsToMapList=Collections.unmodifiableList(resultsToMapList);
  }
 else {
    this.resultsToMapList=null;
  }
  List<? extends Element> resultToFieldElements=UtilXml.childElementList(element,"result-to-field");
  if (UtilValidate.isNotEmpty(resultToFieldElements)) {
    List<ResultToFieldDef> resultToFieldList=new ArrayList<ResultToFieldDef>(resultToFieldElements.size());
    for (    Element resultToFieldElement : resultToFieldElements) {
      ResultToFieldDef rtfDef=new ResultToFieldDef();
      rtfDef.resultName=resultToFieldElement.getAttribute("result-name");
      rtfDef.mapAcsr=new ContextAccessor<Map<String,Object>>(resultToFieldElement.getAttribute("map-name"));
      String field=resultToFieldElement.getAttribute("field");
      if (UtilValidate.isEmpty(field))       field=resultToFieldElement.getAttribute("field-name");
      rtfDef.fieldAcsr=new ContextAccessor<Object>(field,rtfDef.resultName);
      resultToFieldList.add(rtfDef);
    }
    this.resultToFieldList=Collections.unmodifiableList(resultToFieldList);
  }
 else {
    this.resultToFieldList=null;
  }
  List<? extends Element> resultToRequestElements=UtilXml.childElementList(element,"result-to-request");
  if (UtilValidate.isNotEmpty(resultToRequestElements)) {
    Map<FlexibleServletAccessor<Object>,ContextAccessor<Object>> resultToRequestMap=new HashMap<FlexibleServletAccessor<Object>,ContextAccessor<Object>>(resultToRequestElements.size());
    for (    Element resultToRequestElement : resultToRequestElements) {
      FlexibleServletAccessor<Object> reqAcsr=new FlexibleServletAccessor<Object>(resultToRequestElement.getAttribute("request-name"),resultToRequestElement.getAttribute("result-name"));
      ContextAccessor<Object> resultAcsr=new ContextAccessor<Object>(resultToRequestElement.getAttribute("result-name"));
      resultToRequestMap.put(reqAcsr,resultAcsr);
    }
    this.resultToRequestMap=Collections.unmodifiableMap(resultToRequestMap);
  }
 else {
    this.resultToRequestMap=null;
  }
  List<? extends Element> resultToSessionElements=UtilXml.childElementList(element,"result-to-session");
  if (UtilValidate.isNotEmpty(resultToSessionElements)) {
    Map<FlexibleServletAccessor<Object>,ContextAccessor<Object>> resultToSessionMap=new HashMap<FlexibleServletAccessor<Object>,ContextAccessor<Object>>(resultToSessionElements.size());
    for (    Element resultToSessionElement : resultToSessionElements) {
      FlexibleServletAccessor<Object> sesAcsr=new FlexibleServletAccessor<Object>(resultToSessionElement.getAttribute("session-name"),resultToSessionElement.getAttribute("result-name"));
      ContextAccessor<Object> resultAcsr=new ContextAccessor<Object>(resultToSessionElement.getAttribute("result-name"));
      resultToSessionMap.put(sesAcsr,resultAcsr);
    }
    this.resultToSessionMap=Collections.unmodifiableMap(resultToSessionMap);
  }
 else {
    this.resultToSessionMap=null;
  }
  List<? extends Element> resultToResultElements=UtilXml.childElementList(element,"result-to-result");
  if (UtilValidate.isNotEmpty(resultToResultElements)) {
    Map<ContextAccessor<Object>,ContextAccessor<Object>> resultToResultMap=new HashMap<ContextAccessor<Object>,ContextAccessor<Object>>(resultToResultElements.size());
    for (    Element resultToResultElement : resultToResultElements) {
      ContextAccessor<Object> serResAcsr=new ContextAccessor<Object>(resultToResultElement.getAttribute("service-result-name"),resultToResultElement.getAttribute("result-name"));
      ContextAccessor<Object> resultAcsr=new ContextAccessor<Object>(resultToResultElement.getAttribute("result-name"));
      resultToResultMap.put(serResAcsr,resultAcsr);
    }
    this.resultToResultMap=Collections.unmodifiableMap(resultToResultMap);
  }
 else {
    this.resultToResultMap=null;
  }
}
