{
  comparableRangeConstructorTest(bad,a);
  assertTrue(label + ":a-isPoint",new ComparableRange<T>(a,a).isPoint());
  assertTrue(label + ":b-isPoint",new ComparableRange<T>(b,b).isPoint());
  assertTrue(label + ":c-isPoint",new ComparableRange<T>(c,c).isPoint());
  ComparableRange<T> first=new ComparableRange<T>(a,b);
  ComparableRange<T> second=new ComparableRange<T>(c,d);
  ComparableRange<T> all=new ComparableRange<T>(a,d);
  assertEquals(label + ":a-b toString",a + " - " + b,first.toString());
  assertEquals(label + ":c-d toString",c + " - " + d,second.toString());
  assertEquals(label + ":a-d toString",a + " - " + d,all.toString());
  assertFalse(label + ":a-b isPoint",first.isPoint());
  assertFalse(label + ":c-d isPoint",second.isPoint());
  assertFalse(label + ":a-d isPoint",all.isPoint());
  assertEquals(label + ":a-b == a-b",first,first);
  assertEquals(label + ":a-b equals a-b",first,new ComparableRange<T>(a,b));
  assertEquals(label + ":a-b equals b-a",first,new ComparableRange<T>(b,a));
  assertNotEquals(label + ":a-b not-equal other",first,ComparableRangeTests.class);
  assertNotEquals(label + ":a-a != a-b",new ComparableRange<T>(a,a),first);
  assertNotEquals(label + ":a-a != c-d",new ComparableRange<T>(a,a),second);
  assertNotEquals(label + ":a-a != a-d",new ComparableRange<T>(a,a),all);
  assertTrue(label + ":b-c after a-b",second.after(first));
  assertFalse(label + ":c-d !after c-d",second.after(second));
  assertTrue(label + ":a-b before c-d",first.before(second));
  assertFalse(label + ":a-b !before a-b",first.before(first));
  assertTrue(label + ":a-d includes a-b",all.includes(first));
  assertTrue(label + ":a-b overlaps b-c",first.overlaps(new ComparableRange<T>(b,c)));
  assertTrue(label + ":b-c overlaps c-d",new ComparableRange<T>(b,c).overlaps(second));
  assertTrue(label + ":a-b overlaps a-d",first.overlaps(all));
  assertTrue(label + ":a-d overlaps a-b",all.overlaps(first));
  assertTrue(label + ":a-d overlaps b-c",all.overlaps(new ComparableRange<T>(b,c)));
  assertTrue(label + ":b-c overlaps a-d",new ComparableRange<T>(b,c).overlaps(all));
  assertFalse(label + ":a-b overlaps c-d",first.overlaps(second));
  assertFalse(label + ":c-d overlaps a-b",second.overlaps(first));
  assertTrue(label + ":a-b includes a",first.includes(a));
  assertTrue(label + ":a-b includes b",first.includes(b));
  assertFalse(label + ":a-b includes c",first.includes(c));
  assertFalse(label + ":a includes a-b",new ComparableRange<T>(a,a).includes(first));
  assertTrue(label + ":c-d after a",second.after(a));
  assertTrue(label + ":c-d after b",second.after(b));
  assertFalse(label + ":c-d after c",second.after(c));
  assertFalse(label + ":c-d after d",second.after(d));
  assertFalse(label + ":a-b after a",first.before(a));
  assertFalse(label + ":a-b after b",first.before(b));
  assertTrue(label + ":a-b after c",first.before(c));
  assertTrue(label + ":a-b after d",first.before(d));
}
