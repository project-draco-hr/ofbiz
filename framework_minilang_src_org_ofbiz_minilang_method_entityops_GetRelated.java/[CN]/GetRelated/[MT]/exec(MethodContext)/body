{
  String relationName=methodContext.expandString(this.relationName);
  String useCacheStr=methodContext.expandString(this.useCacheStr);
  boolean useCache="true".equals(useCacheStr);
  List orderByNames=null;
  if (!orderByListAcsr.isEmpty()) {
    orderByNames=(List)orderByListAcsr.get(methodContext);
  }
  Map constraintMap=null;
  if (!mapAcsr.isEmpty()) {
    constraintMap=(Map)mapAcsr.get(methodContext);
  }
  GenericValue value=(GenericValue)valueAcsr.get(methodContext);
  if (value == null) {
    Debug.logWarning("Value not found with name: " + valueAcsr + ", not getting related...",module);
    return true;
  }
  try {
    if (useCache) {
      listAcsr.put(methodContext,value.getRelatedCache(relationName,constraintMap,orderByNames));
    }
 else {
      listAcsr.put(methodContext,value.getRelated(relationName,constraintMap,orderByNames));
    }
  }
 catch (  GenericEntityException e) {
    String errMsg="ERROR: Could not complete the " + simpleMethod.getShortDescription() + " process [problem getting related from entity with name "+ value.getEntityName()+ " for the relation-name: "+ relationName+ ": "+ e.getMessage()+ "]";
    Debug.logError(e,errMsg,module);
    methodContext.setErrorReturn(errMsg,simpleMethod);
    return false;
  }
  return true;
}
