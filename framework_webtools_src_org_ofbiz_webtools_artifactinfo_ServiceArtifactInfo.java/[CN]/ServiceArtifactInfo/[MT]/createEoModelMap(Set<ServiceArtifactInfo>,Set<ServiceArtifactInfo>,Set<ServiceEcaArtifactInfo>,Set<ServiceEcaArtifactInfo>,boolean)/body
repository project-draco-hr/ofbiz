{
  if (callingServiceSet == null)   callingServiceSet=FastSet.newInstance();
  if (calledServiceSet == null)   calledServiceSet=FastSet.newInstance();
  if (callingServiceEcaSet == null)   callingServiceEcaSet=FastSet.newInstance();
  if (calledServiceEcaSet == null)   calledServiceEcaSet=FastSet.newInstance();
  Map<String,Object> topLevelMap=FastMap.newInstance();
  topLevelMap.put("name",this.getDisplayPrefixedName());
  topLevelMap.put("className","EOGenericRecord");
  List<String> classPropertiesList=FastList.newInstance();
  topLevelMap.put("classProperties",classPropertiesList);
  for (  ModelParam param : this.modelService.getModelParamList()) {
    if (param.internal)     continue;
    if (useMoreDetailedNames) {
      classPropertiesList.add(param.getShortDisplayDescription());
    }
 else {
      classPropertiesList.add(param.name);
    }
  }
  for (  ServiceArtifactInfo sai : callingServiceSet) {
    classPropertiesList.add(sai.getDisplayPrefixedName());
  }
  for (  ServiceArtifactInfo sai : calledServiceSet) {
    classPropertiesList.add(sai.getDisplayPrefixedName());
  }
  for (  ServiceEcaArtifactInfo seai : callingServiceEcaSet) {
    classPropertiesList.add(seai.getDisplayPrefixedName());
  }
  for (  ServiceEcaArtifactInfo seai : calledServiceEcaSet) {
    classPropertiesList.add(seai.getDisplayPrefixedName());
  }
  List<Map<String,Object>> attributesList=FastList.newInstance();
  topLevelMap.put("attributes",attributesList);
  for (  ModelParam param : this.modelService.getModelParamList()) {
    Map<String,Object> attributeMap=FastMap.newInstance();
    attributesList.add(attributeMap);
    if (useMoreDetailedNames) {
      attributeMap.put("name",param.getShortDisplayDescription());
    }
 else {
      attributeMap.put("name",param.name);
    }
    attributeMap.put("valueClassName",param.type);
    attributeMap.put("externalType",param.type);
  }
  List<Map<String,Object>> relationshipsMapList=FastList.newInstance();
  for (  ServiceArtifactInfo sai : callingServiceSet) {
    Map<String,Object> relationshipMap=FastMap.newInstance();
    relationshipsMapList.add(relationshipMap);
    relationshipMap.put("name",sai.getDisplayPrefixedName());
    relationshipMap.put("destination",sai.getDisplayPrefixedName());
    relationshipMap.put("isToMany","N");
    relationshipMap.put("isMandatory","Y");
  }
  for (  ServiceArtifactInfo sai : calledServiceSet) {
    Map<String,Object> relationshipMap=FastMap.newInstance();
    relationshipsMapList.add(relationshipMap);
    relationshipMap.put("name",sai.getDisplayPrefixedName());
    relationshipMap.put("destination",sai.getDisplayPrefixedName());
    relationshipMap.put("isToMany","Y");
    relationshipMap.put("isMandatory","Y");
  }
  for (  ServiceEcaArtifactInfo seai : callingServiceEcaSet) {
    Map<String,Object> relationshipMap=FastMap.newInstance();
    relationshipsMapList.add(relationshipMap);
    relationshipMap.put("name",seai.getDisplayPrefixedName());
    relationshipMap.put("destination",seai.getDisplayPrefixedName());
    relationshipMap.put("isToMany","N");
    relationshipMap.put("isMandatory","Y");
  }
  for (  ServiceEcaArtifactInfo seai : calledServiceEcaSet) {
    Map<String,Object> relationshipMap=FastMap.newInstance();
    relationshipsMapList.add(relationshipMap);
    relationshipMap.put("name",seai.getDisplayPrefixedName());
    relationshipMap.put("destination",seai.getDisplayPrefixedName());
    relationshipMap.put("isToMany","Y");
    relationshipMap.put("isMandatory","Y");
  }
  if (relationshipsMapList.size() > 0) {
    topLevelMap.put("relationships",relationshipsMapList);
  }
  return topLevelMap;
}
