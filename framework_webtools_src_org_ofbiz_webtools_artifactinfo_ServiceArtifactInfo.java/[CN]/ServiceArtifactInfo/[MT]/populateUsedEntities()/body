{
  if ("simple".equals(this.modelService.engineName)) {
    SimpleMethod simpleMethodToCall=null;
    try {
      Map<String,SimpleMethod> simpleMethods=SimpleMethod.getSimpleMethods(this.modelService.location,null);
      simpleMethodToCall=simpleMethods.get(this.modelService.invoke);
    }
 catch (    MiniLangException e) {
      Debug.logWarning("Error getting Simple-method [" + this.modelService.invoke + "] in ["+ this.modelService.location+ "] referenced in service ["+ this.modelService.name+ "]: "+ e.toString(),module);
    }
    if (simpleMethodToCall == null) {
      Debug.logWarning("Simple-method [" + this.modelService.invoke + "] in ["+ this.modelService.location+ "] referenced in service ["+ this.modelService.name+ "] not found",module);
      return;
    }
    Set<String> allEntityNameSet=simpleMethodToCall.getAllEntityNamesUsed();
    populateEntitiesFromNameSet(allEntityNameSet);
  }
 else   if ("java".equals(this.modelService.engineName)) {
    String fullClassPathAndFile=UtilJavaParse.findRealPathAndFileForClass(this.modelService.location);
    if (fullClassPathAndFile != null) {
      String javaFile=null;
      try {
        javaFile=FileUtil.readTextFile(fullClassPathAndFile,true).toString();
      }
 catch (      FileNotFoundException e) {
        Debug.logWarning("Error reading java file [" + fullClassPathAndFile + "] for service implementation: "+ e.toString(),module);
        return;
      }
catch (      IOException e) {
        Debug.logWarning("Error reading java file [" + fullClassPathAndFile + "] for service implementation: "+ e.toString(),module);
        return;
      }
      javaFile=UtilJavaParse.stripComments(javaFile);
      int methodBlockStart=UtilJavaParse.findServiceMethodBlockStart(this.modelService.invoke,javaFile);
      int methodBlockEnd=UtilJavaParse.findEndOfBlock(methodBlockStart,javaFile);
      Set<String> allEntityNameSet=UtilJavaParse.findEntityUseInBlock(methodBlockStart,methodBlockEnd,javaFile);
      populateEntitiesFromNameSet(allEntityNameSet);
    }
  }
 else   if ("group".equals(this.modelService.engineName)) {
  }
}
