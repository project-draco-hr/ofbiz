{
  Map<String,Object> orderItemLookupMap=new HashMap<String,Object>();
  orderItemLookupMap.put("orderId",orderId);
  orderItemLookupMap.put("productId",productId);
  orderItemLookupMap.put("statusId","ITEM_APPROVED");
  orderItemLookupMap.put("shipGroupSeqId",shipGroupSeqId);
  List<GenericValue> orderItems=this.getDelegator().findByAnd("OrderItemAndShipGroupAssoc",orderItemLookupMap,null,false);
  String orderItemSeqId=null;
  if (orderItems != null) {
    for (    GenericValue orderItem : orderItems) {
      Map<String,Object> inventoryLookupMap=new HashMap<String,Object>();
      inventoryLookupMap.put("orderId",orderId);
      inventoryLookupMap.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));
      inventoryLookupMap.put("shipGroupSeqId",shipGroupSeqId);
      List<GenericValue> reservations=this.getDelegator().findByAnd("OrderItemShipGrpInvRes",inventoryLookupMap,null,false);
      for (      GenericValue reservation : reservations) {
        BigDecimal qty=reservation.getBigDecimal("quantity");
        if (quantity.compareTo(qty) <= 0) {
          orderItemSeqId=orderItem.getString("orderItemSeqId");
          break;
        }
      }
    }
  }
  if (orderItemSeqId != null) {
    return orderItemSeqId;
  }
 else {
    throw new GeneralException(UtilProperties.getMessage("ProductErrorUiLabels","ProductErrorNoValidOrderItemFoundForProductWithEnteredQuantity",UtilMisc.toMap("productId",productId,"quantity",quantity),locale));
  }
}
