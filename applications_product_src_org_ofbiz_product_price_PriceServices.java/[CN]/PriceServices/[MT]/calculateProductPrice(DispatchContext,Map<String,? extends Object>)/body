{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map<String,Object> result=FastMap.newInstance();
  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();
  GenericValue product=(GenericValue)context.get("product");
  String productId=product.getString("productId");
  String prodCatalogId=(String)context.get("prodCatalogId");
  String webSiteId=(String)context.get("webSiteId");
  String checkIncludeVat=(String)context.get("checkIncludeVat");
  String surveyResponseId=(String)context.get("surveyResponseId");
  Map<String,Object> customAttributes=UtilGenerics.checkMap(context.get("customAttributes"));
  String findAllQuantityPricesStr=(String)context.get("findAllQuantityPrices");
  boolean findAllQuantityPrices="Y".equals(findAllQuantityPricesStr);
  boolean optimizeForLargeRuleSet="Y".equals(context.get("optimizeForLargeRuleSet"));
  String agreementId=(String)context.get("agreementId");
  String productStoreId=(String)context.get("productStoreId");
  String productStoreGroupId=(String)context.get("productStoreGroupId");
  Locale locale=(Locale)context.get("locale");
  GenericValue productStore=null;
  try {
    productStore=delegator.findOne("ProductStore",UtilMisc.toMap("productStoreId",productStoreId),true);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Error getting product store info from the database while calculating price" + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveProductStore",UtilMisc.toMap("errorString",e.toString()),locale));
  }
  if (UtilValidate.isEmpty(productStoreGroupId)) {
    if (productStore != null) {
      try {
        if (UtilValidate.isNotEmpty(productStore.getString("primaryStoreGroupId"))) {
          productStoreGroupId=productStore.getString("primaryStoreGroupId");
        }
 else {
          List<GenericValue> productStoreGroupMemberList=delegator.findByAnd("ProductStoreGroupMember",UtilMisc.toMap("productStoreId",productStoreId),UtilMisc.toList("sequenceNum","-fromDate"),true);
          productStoreGroupMemberList=EntityUtil.filterByDate(productStoreGroupMemberList,true);
          if (productStoreGroupMemberList.size() > 0) {
            GenericValue productStoreGroupMember=EntityUtil.getFirst(productStoreGroupMemberList);
            productStoreGroupId=productStoreGroupMember.getString("productStoreGroupId");
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Error getting product store info from the database while calculating price" + e.toString(),module);
        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveProductStore",UtilMisc.toMap("errorString",e.toString()),locale));
      }
    }
    if (UtilValidate.isEmpty(productStoreGroupId)) {
      productStoreGroupId="_NA_";
    }
  }
  String currencyDefaultUomId=(String)context.get("currencyUomId");
  String currencyUomIdTo=(String)context.get("currencyUomIdTo");
  if (UtilValidate.isEmpty(currencyDefaultUomId)) {
    currencyDefaultUomId=EntityUtilProperties.getPropertyValue("general","currency.uom.id.default","USD",delegator);
  }
  String productPricePurposeId=(String)context.get("productPricePurposeId");
  if (UtilValidate.isEmpty(productPricePurposeId)) {
    productPricePurposeId="PURCHASE";
  }
  String termUomId=(String)context.get("termUomId");
  String virtualProductId=null;
  if ("Y".equals(product.getString("isVariant"))) {
    try {
      virtualProductId=ProductWorker.getVariantVirtualId(product);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting virtual product id from the database while calculating price" + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveVirtualProductId",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
  List<GenericValue> virtualProductPrices=null;
  if (virtualProductId != null) {
    try {
      virtualProductPrices=delegator.findByAnd("ProductPrice",UtilMisc.toMap("productId",virtualProductId,"currencyUomId",currencyDefaultUomId,"productStoreGroupId",productStoreGroupId),UtilMisc.toList("-fromDate"),true);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"An error occurred while getting the product prices",module);
    }
    virtualProductPrices=EntityUtil.filterByDate(virtualProductPrices,true);
  }
  String partyId=(String)context.get("partyId");
  if (UtilValidate.isEmpty(partyId) && context.get("userLogin") != null) {
    GenericValue userLogin=(GenericValue)context.get("userLogin");
    partyId=userLogin.getString("partyId");
  }
  if (UtilValidate.isEmpty(partyId) && context.get("autoUserLogin") != null) {
    GenericValue userLogin=(GenericValue)context.get("autoUserLogin");
    partyId=userLogin.getString("partyId");
  }
  BigDecimal quantity=(BigDecimal)context.get("quantity");
  if (quantity == null)   quantity=BigDecimal.ONE;
  BigDecimal amount=(BigDecimal)context.get("amount");
  List<EntityCondition> productPriceEcList=FastList.newInstance();
  productPriceEcList.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));
  if ("PURCHASE".equals(productPricePurposeId)) {
    productPriceEcList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,productPricePurposeId),EntityOperator.OR,EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,null)));
  }
 else {
    productPriceEcList.add(EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,productPricePurposeId));
  }
  productPriceEcList.add(EntityCondition.makeCondition("currencyUomId",EntityOperator.EQUALS,currencyDefaultUomId));
  productPriceEcList.add(EntityCondition.makeCondition("productStoreGroupId",EntityOperator.EQUALS,productStoreGroupId));
  if (UtilValidate.isNotEmpty(termUomId)) {
    productPriceEcList.add(EntityCondition.makeCondition("termUomId",EntityOperator.EQUALS,termUomId));
  }
  EntityCondition productPriceEc=EntityCondition.makeCondition(productPriceEcList,EntityOperator.AND);
  List<GenericValue> productPrices=null;
  try {
    productPrices=delegator.findList("ProductPrice",productPriceEc,null,UtilMisc.toList("-fromDate"),null,true);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"An error occurred while getting the product prices",module);
  }
  productPrices=EntityUtil.filterByDate(productPrices,true);
  GenericValue listPriceValue=getPriceValueForType("LIST_PRICE",productPrices,virtualProductPrices);
  GenericValue defaultPriceValue=getPriceValueForType("DEFAULT_PRICE",productPrices,virtualProductPrices);
  if (UtilValidate.isNotEmpty(agreementId)) {
    try {
      List<GenericValue> agreementPrices=delegator.findByAnd("AgreementItemAndProductAppl",UtilMisc.toMap("agreementId",agreementId,"productId",productId,"currencyUomId",currencyDefaultUomId),null,false);
      GenericValue agreementPriceValue=EntityUtil.getFirst(agreementPrices);
      if (agreementPriceValue != null && agreementPriceValue.get("price") != null) {
        defaultPriceValue=agreementPriceValue;
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting agreement info from the database while calculating price" + e.toString(),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveAgreementInfo",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
  GenericValue competitivePriceValue=getPriceValueForType("COMPETITIVE_PRICE",productPrices,virtualProductPrices);
  GenericValue averageCostValue=getPriceValueForType("AVERAGE_COST",productPrices,virtualProductPrices);
  GenericValue promoPriceValue=getPriceValueForType("PROMO_PRICE",productPrices,virtualProductPrices);
  GenericValue minimumPriceValue=getPriceValueForType("MINIMUM_PRICE",productPrices,virtualProductPrices);
  GenericValue maximumPriceValue=getPriceValueForType("MAXIMUM_PRICE",productPrices,virtualProductPrices);
  GenericValue wholesalePriceValue=getPriceValueForType("WHOLESALE_PRICE",productPrices,virtualProductPrices);
  GenericValue specialPromoPriceValue=getPriceValueForType("SPECIAL_PROMO_PRICE",productPrices,virtualProductPrices);
  if ("Y".equals(product.getString("isVirtual"))) {
    if (defaultPriceValue == null) {
      try {
        List<GenericValue> variantAssocList=EntityUtil.filterByDate(delegator.findByAnd("ProductAssoc",UtilMisc.toMap("productId",product.get("productId"),"productAssocTypeId","PRODUCT_VARIANT"),UtilMisc.toList("-fromDate"),true));
        BigDecimal minDefaultPrice=null;
        List<GenericValue> variantProductPrices=null;
        for (        GenericValue variantAssoc : variantAssocList) {
          String curVariantProductId=variantAssoc.getString("productIdTo");
          List<GenericValue> curVariantPriceList=EntityUtil.filterByDate(delegator.findByAnd("ProductPrice",UtilMisc.toMap("productId",curVariantProductId),UtilMisc.toList("-fromDate"),true),nowTimestamp);
          List<GenericValue> tempDefaultPriceList=EntityUtil.filterByAnd(curVariantPriceList,UtilMisc.toMap("productPriceTypeId","DEFAULT_PRICE"));
          GenericValue curDefaultPriceValue=EntityUtil.getFirst(tempDefaultPriceList);
          if (curDefaultPriceValue != null) {
            BigDecimal curDefaultPrice=curDefaultPriceValue.getBigDecimal("price");
            if (minDefaultPrice == null || curDefaultPrice.compareTo(minDefaultPrice) < 0) {
              GenericValue curVariantProduct=delegator.findOne("Product",UtilMisc.toMap("productId",curVariantProductId),true);
              if (curVariantProduct != null) {
                Timestamp salesDiscontinuationDate=curVariantProduct.getTimestamp("salesDiscontinuationDate");
                if (salesDiscontinuationDate == null || salesDiscontinuationDate.after(nowTimestamp)) {
                  minDefaultPrice=curDefaultPrice;
                  variantProductPrices=curVariantPriceList;
                }
              }
            }
          }
        }
        if (variantProductPrices != null) {
          if (listPriceValue == null) {
            listPriceValue=getPriceValueForType("LIST_PRICE",variantProductPrices,null);
          }
          if (defaultPriceValue == null) {
            defaultPriceValue=getPriceValueForType("DEFAULT_PRICE",variantProductPrices,null);
          }
          if (competitivePriceValue == null) {
            competitivePriceValue=getPriceValueForType("COMPETITIVE_PRICE",variantProductPrices,null);
          }
          if (averageCostValue == null) {
            averageCostValue=getPriceValueForType("AVERAGE_COST",variantProductPrices,null);
          }
          if (promoPriceValue == null) {
            promoPriceValue=getPriceValueForType("PROMO_PRICE",variantProductPrices,null);
          }
          if (minimumPriceValue == null) {
            minimumPriceValue=getPriceValueForType("MINIMUM_PRICE",variantProductPrices,null);
          }
          if (maximumPriceValue == null) {
            maximumPriceValue=getPriceValueForType("MAXIMUM_PRICE",variantProductPrices,null);
          }
          if (wholesalePriceValue == null) {
            wholesalePriceValue=getPriceValueForType("WHOLESALE_PRICE",variantProductPrices,null);
          }
          if (specialPromoPriceValue == null) {
            specialPromoPriceValue=getPriceValueForType("SPECIAL_PROMO_PRICE",variantProductPrices,null);
          }
        }
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"An error occurred while getting the product prices",module);
      }
    }
  }
  BigDecimal promoPrice=BigDecimal.ZERO;
  if (promoPriceValue != null && promoPriceValue.get("price") != null) {
    promoPrice=promoPriceValue.getBigDecimal("price");
  }
  BigDecimal wholesalePrice=BigDecimal.ZERO;
  if (wholesalePriceValue != null && wholesalePriceValue.get("price") != null) {
    wholesalePrice=wholesalePriceValue.getBigDecimal("price");
  }
  boolean validPriceFound=false;
  BigDecimal defaultPrice=BigDecimal.ZERO;
  List<GenericValue> orderItemPriceInfos=FastList.newInstance();
  if (defaultPriceValue != null) {
    if ("ProductPrice".equals(defaultPriceValue.getEntityName()) && UtilValidate.isNotEmpty(defaultPriceValue.getString("customPriceCalcService"))) {
      GenericValue customMethod=null;
      try {
        customMethod=defaultPriceValue.getRelatedOne("CustomMethod",false);
      }
 catch (      GenericEntityException gee) {
        Debug.logError(gee,"An error occurred while getting the customPriceCalcService",module);
      }
      if (UtilValidate.isNotEmpty(customMethod) && UtilValidate.isNotEmpty(customMethod.getString("customMethodName"))) {
        Map<String,Object> inMap=UtilMisc.toMap("userLogin",context.get("userLogin"),"product",product);
        inMap.put("initialPrice",defaultPriceValue.getBigDecimal("price"));
        inMap.put("currencyUomId",currencyDefaultUomId);
        inMap.put("quantity",quantity);
        inMap.put("amount",amount);
        if (UtilValidate.isNotEmpty(surveyResponseId)) {
          inMap.put("surveyResponseId",surveyResponseId);
        }
        if (UtilValidate.isNotEmpty(customAttributes)) {
          inMap.put("customAttributes",customAttributes);
        }
        try {
          Map<String,Object> outMap=dispatcher.runSync(customMethod.getString("customMethodName"),inMap);
          if (!ServiceUtil.isError(outMap)) {
            BigDecimal calculatedDefaultPrice=(BigDecimal)outMap.get("price");
            orderItemPriceInfos=UtilGenerics.checkList(outMap.get("orderItemPriceInfos"));
            if (UtilValidate.isNotEmpty(calculatedDefaultPrice)) {
              defaultPrice=calculatedDefaultPrice;
              validPriceFound=true;
            }
          }
        }
 catch (        GenericServiceException gse) {
          Debug.logError(gse,"An error occurred while running the customPriceCalcService [" + customMethod.getString("customMethodName") + "]",module);
        }
      }
    }
    if (!validPriceFound && defaultPriceValue.get("price") != null) {
      defaultPrice=defaultPriceValue.getBigDecimal("price");
      validPriceFound=true;
    }
  }
  BigDecimal listPrice=listPriceValue != null ? listPriceValue.getBigDecimal("price") : null;
  if (listPrice == null) {
    BigDecimal maxSellPrice=maximumPriceValue != null ? maximumPriceValue.getBigDecimal("price") : null;
    if (maxSellPrice != null && defaultPrice.compareTo(maxSellPrice) > 0) {
      defaultPrice=maxSellPrice;
    }
    BigDecimal minSellPrice=minimumPriceValue != null ? minimumPriceValue.getBigDecimal("price") : null;
    if (minSellPrice != null && defaultPrice.compareTo(minSellPrice) < 0) {
      defaultPrice=minSellPrice;
      validPriceFound=true;
    }
    result.put("basePrice",defaultPrice);
    result.put("price",defaultPrice);
    result.put("defaultPrice",defaultPrice);
    result.put("competitivePrice",competitivePriceValue != null ? competitivePriceValue.getBigDecimal("price") : null);
    result.put("averageCost",averageCostValue != null ? averageCostValue.getBigDecimal("price") : null);
    result.put("promoPrice",promoPriceValue != null ? promoPriceValue.getBigDecimal("price") : null);
    result.put("specialPromoPrice",specialPromoPriceValue != null ? specialPromoPriceValue.getBigDecimal("price") : null);
    result.put("validPriceFound",Boolean.valueOf(validPriceFound));
    result.put("isSale",Boolean.FALSE);
    result.put("orderItemPriceInfos",orderItemPriceInfos);
    Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);
    if (errorResult != null)     return errorResult;
  }
 else {
    try {
      List<GenericValue> allProductPriceRules=makeProducePriceRuleList(delegator,optimizeForLargeRuleSet,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,currencyDefaultUomId);
      allProductPriceRules=EntityUtil.filterByDate(allProductPriceRules,true);
      List<GenericValue> quantityProductPriceRules=null;
      List<GenericValue> nonQuantityProductPriceRules=null;
      if (findAllQuantityPrices) {
        quantityProductPriceRules=FastList.newInstance();
        nonQuantityProductPriceRules=FastList.newInstance();
        for (        GenericValue productPriceRule : allProductPriceRules) {
          List<GenericValue> productPriceCondList=delegator.findByAnd("ProductPriceCond",UtilMisc.toMap("productPriceRuleId",productPriceRule.get("productPriceRuleId")),null,true);
          boolean foundQuantityInputParam=false;
          boolean allExceptQuantTrue=true;
          for (          GenericValue productPriceCond : productPriceCondList) {
            if ("PRIP_QUANTITY".equals(productPriceCond.getString("inputParamEnumId"))) {
              foundQuantityInputParam=true;
            }
 else {
              if (!checkPriceCondition(productPriceCond,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,quantity,listPrice,currencyDefaultUomId,delegator,nowTimestamp)) {
                allExceptQuantTrue=false;
              }
            }
          }
          if (foundQuantityInputParam && allExceptQuantTrue) {
            quantityProductPriceRules.add(productPriceRule);
          }
 else {
            nonQuantityProductPriceRules.add(productPriceRule);
          }
        }
      }
      if (findAllQuantityPrices) {
        List<Map<String,Object>> allQuantityPrices=FastList.newInstance();
        for (        GenericValue quantityProductPriceRule : quantityProductPriceRules) {
          List<GenericValue> ruleListToUse=FastList.newInstance();
          ruleListToUse.add(quantityProductPriceRule);
          ruleListToUse.addAll(nonQuantityProductPriceRules);
          Map<String,Object> quantCalcResults=calcPriceResultFromRules(ruleListToUse,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,null,currencyDefaultUomId,delegator,nowTimestamp,locale);
          Map<String,Object> quantErrorResult=addGeneralResults(quantCalcResults,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);
          if (quantErrorResult != null)           return quantErrorResult;
          quantCalcResults.put("quantityProductPriceRule",quantityProductPriceRule);
          allQuantityPrices.add(quantCalcResults);
        }
        result.put("allQuantityPrices",allQuantityPrices);
        Map<String,Object> calcResults=calcPriceResultFromRules(allProductPriceRules,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,BigDecimal.ONE,currencyDefaultUomId,delegator,nowTimestamp,locale);
        result.putAll(calcResults);
        List<GenericValue> orderItemPriceInfosFromRule=UtilGenerics.checkList(calcResults.get("orderItemPriceInfos"));
        if (UtilValidate.isNotEmpty(orderItemPriceInfosFromRule)) {
          orderItemPriceInfos.addAll(orderItemPriceInfosFromRule);
        }
        result.put("orderItemPriceInfos",orderItemPriceInfos);
        Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);
        if (errorResult != null)         return errorResult;
      }
 else {
        Map<String,Object> calcResults=calcPriceResultFromRules(allProductPriceRules,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,quantity,currencyDefaultUomId,delegator,nowTimestamp,locale);
        result.putAll(calcResults);
        List<GenericValue> orderItemPriceInfosFromRule=UtilGenerics.checkList(calcResults.get("orderItemPriceInfos"));
        if (UtilValidate.isNotEmpty(orderItemPriceInfosFromRule)) {
          orderItemPriceInfos.addAll(orderItemPriceInfosFromRule);
        }
        result.put("orderItemPriceInfos",orderItemPriceInfos);
        Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);
        if (errorResult != null)         return errorResult;
      }
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Error getting rules from the database while calculating price",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrievePriceRules",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
  if ("true".equals(UtilProperties.getPropertyValue("catalog.properties","convertProductPriceCurrency"))) {
    if (UtilValidate.isNotEmpty(currencyDefaultUomId) && UtilValidate.isNotEmpty(currencyUomIdTo) && !currencyDefaultUomId.equals(currencyUomIdTo)) {
      if (UtilValidate.isNotEmpty(result)) {
        Map<String,Object> convertPriceMap=FastMap.newInstance();
        for (        Map.Entry<String,Object> entry : result.entrySet()) {
          BigDecimal tempPrice=BigDecimal.ZERO;
          if (entry.getKey() == "basePrice")           tempPrice=(BigDecimal)entry.getValue();
 else           if (entry.getKey() == "price")           tempPrice=(BigDecimal)entry.getValue();
 else           if (entry.getKey() == "defaultPrice")           tempPrice=(BigDecimal)entry.getValue();
 else           if (entry.getKey() == "competitivePrice")           tempPrice=(BigDecimal)entry.getValue();
 else           if (entry.getKey() == "averageCost")           tempPrice=(BigDecimal)entry.getValue();
 else           if (entry.getKey() == "promoPrice")           tempPrice=(BigDecimal)entry.getValue();
 else           if (entry.getKey() == "specialPromoPrice")           tempPrice=(BigDecimal)entry.getValue();
 else           if (entry.getKey() == "listPrice")           tempPrice=(BigDecimal)entry.getValue();
          if (tempPrice != null && tempPrice != BigDecimal.ZERO) {
            Map<String,Object> priceResults=FastMap.newInstance();
            try {
              priceResults=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",currencyDefaultUomId,"uomIdTo",currencyUomIdTo,"originalValue",tempPrice,"defaultDecimalScale",Long.valueOf(2),"defaultRoundingMode","HalfUp"));
              if (ServiceUtil.isError(priceResults) || (priceResults.get("convertedValue") == null)) {
                Debug.logWarning("Unable to convert " + entry.getKey() + " for product  "+ productId,module);
              }
            }
 catch (            GenericServiceException e) {
              Debug.logError(e,module);
            }
            convertPriceMap.put(entry.getKey(),priceResults.get("convertedValue"));
          }
 else {
            convertPriceMap.put(entry.getKey(),entry.getValue());
          }
        }
        if (UtilValidate.isNotEmpty(convertPriceMap)) {
          convertPriceMap.put("currencyUsed",currencyUomIdTo);
          result=convertPriceMap;
        }
      }
    }
  }
  return result;
}
