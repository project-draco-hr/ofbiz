{
  Map calcResults=FastMap.newInstance();
  List orderItemPriceInfos=FastList.newInstance();
  boolean isSale=false;
  int totalConds=0;
  int totalActions=0;
  int totalRules=0;
  double averageCost=(averageCostValue != null && averageCostValue.get("price") != null) ? averageCostValue.getDouble("price").doubleValue() : listPrice;
  double margin=listPrice - averageCost;
  double price=listPrice;
  Iterator productPriceRulesIter=productPriceRules.iterator();
  while (productPriceRulesIter.hasNext()) {
    GenericValue productPriceRule=(GenericValue)productPriceRulesIter.next();
    String productPriceRuleId=productPriceRule.getString("productPriceRuleId");
    java.sql.Timestamp fromDate=productPriceRule.getTimestamp("fromDate");
    java.sql.Timestamp thruDate=productPriceRule.getTimestamp("thruDate");
    if (fromDate != null && fromDate.after(nowTimestamp)) {
      continue;
    }
    if (thruDate != null && thruDate.before(nowTimestamp)) {
      continue;
    }
    boolean allTrue=true;
    StringBuffer condsDescription=new StringBuffer();
    List productPriceConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("productPriceRuleId",productPriceRuleId));
    Iterator productPriceCondsIter=UtilMisc.toIterator(productPriceConds);
    while (productPriceCondsIter != null && productPriceCondsIter.hasNext()) {
      GenericValue productPriceCond=(GenericValue)productPriceCondsIter.next();
      totalConds++;
      if (!checkPriceCondition(productPriceCond,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,quantity,listPrice,currencyUomId,delegator,nowTimestamp)) {
        allTrue=false;
        break;
      }
      condsDescription.append("[");
      GenericValue inputParamEnum=productPriceCond.getRelatedOneCache("InputParamEnumeration");
      condsDescription.append(inputParamEnum.getString("enumCode"));
      GenericValue operatorEnum=productPriceCond.getRelatedOneCache("OperatorEnumeration");
      condsDescription.append(operatorEnum.getString("description"));
      condsDescription.append(productPriceCond.getString("condValue"));
      condsDescription.append("] ");
    }
    condsDescription.append("[list:");
    condsDescription.append(listPrice);
    condsDescription.append(";avgCost:");
    condsDescription.append(averageCost);
    condsDescription.append(";margin:");
    condsDescription.append(margin);
    condsDescription.append("] ");
    boolean foundFlatOverride=false;
    if (allTrue) {
      if ("Y".equals(productPriceRule.getString("isSale"))) {
        isSale=true;
      }
      Collection productPriceActions=delegator.findByAndCache("ProductPriceAction",UtilMisc.toMap("productPriceRuleId",productPriceRuleId));
      Iterator productPriceActionsIter=UtilMisc.toIterator(productPriceActions);
      while (productPriceActionsIter != null && productPriceActionsIter.hasNext()) {
        GenericValue productPriceAction=(GenericValue)productPriceActionsIter.next();
        totalActions++;
        double modifyAmount=0;
        if ("PRICE_POD".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          if (productPriceAction.get("amount") != null) {
            modifyAmount=defaultPrice * (productPriceAction.getDouble("amount").doubleValue() / 100.0);
          }
        }
 else         if ("PRICE_POL".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          if (productPriceAction.get("amount") != null) {
            modifyAmount=listPrice * (productPriceAction.getDouble("amount").doubleValue() / 100.0);
          }
        }
 else         if ("PRICE_POAC".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          if (productPriceAction.get("amount") != null) {
            modifyAmount=averageCost * (productPriceAction.getDouble("amount").doubleValue() / 100.0);
          }
        }
 else         if ("PRICE_POM".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          if (productPriceAction.get("amount") != null) {
            modifyAmount=margin * (productPriceAction.getDouble("amount").doubleValue() / 100.0);
          }
        }
 else         if ("PRICE_FOL".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          if (productPriceAction.get("amount") != null) {
            modifyAmount=productPriceAction.getDouble("amount").doubleValue();
          }
        }
 else         if ("PRICE_FLAT".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          foundFlatOverride=true;
          if (productPriceAction.get("amount") != null) {
            price=productPriceAction.getDouble("amount").doubleValue();
          }
 else {
            Debug.logInfo("ProductPriceAction had null amount, using default price: " + defaultPrice + " for product with id "+ productId,module);
            price=defaultPrice;
            isSale=false;
          }
        }
 else         if ("PRICE_PFLAT".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          foundFlatOverride=true;
          price=promoPrice;
          if (productPriceAction.get("amount") != null) {
            price+=productPriceAction.getDouble("amount").doubleValue();
          }
          if (price == 0.00) {
            if (defaultPrice != 0.00) {
              Debug.logInfo("PromoPrice and ProductPriceAction had null amount, using default price: " + defaultPrice + " for product with id "+ productId,module);
              price=defaultPrice;
            }
 else             if (listPrice != 0.00) {
              Debug.logInfo("PromoPrice and ProductPriceAction had null amount and no default price was available, using list price: " + listPrice + " for product with id "+ productId,module);
              price=listPrice;
            }
 else {
              Debug.logError("PromoPrice and ProductPriceAction had null amount and no default or list price was available, so price is set to zero for product with id " + productId,module);
              price=0.00;
            }
            isSale=false;
          }
        }
 else         if ("PRICE_WFLAT".equals(productPriceAction.getString("productPriceActionTypeId"))) {
          foundFlatOverride=true;
          price=wholesalePrice;
          if (productPriceAction.get("amount") != null) {
            price+=productPriceAction.getDouble("amount").doubleValue();
          }
          if (price == 0.00) {
            if (defaultPrice != 0.00) {
              Debug.logInfo("WholesalePrice and ProductPriceAction had null amount, using default price: " + defaultPrice + " for product with id "+ productId,module);
              price=defaultPrice;
            }
 else             if (listPrice != 0.00) {
              Debug.logInfo("WholesalePrice and ProductPriceAction had null amount and no default price was available, using list price: " + listPrice + " for product with id "+ productId,module);
              price=listPrice;
            }
 else {
              Debug.logError("WholesalePrice and ProductPriceAction had null amount and no default or list price was available, so price is set to zero for product with id " + productId,module);
              price=0.00;
            }
            isSale=false;
          }
        }
        StringBuffer priceInfoDescription=new StringBuffer();
        priceInfoDescription.append(condsDescription.toString());
        priceInfoDescription.append("[type:");
        priceInfoDescription.append(productPriceAction.getString("productPriceActionTypeId"));
        priceInfoDescription.append("]");
        GenericValue orderItemPriceInfo=delegator.makeValue("OrderItemPriceInfo");
        orderItemPriceInfo.set("productPriceRuleId",productPriceAction.get("productPriceRuleId"));
        orderItemPriceInfo.set("productPriceActionSeqId",productPriceAction.get("productPriceActionSeqId"));
        orderItemPriceInfo.set("modifyAmount",new Double(modifyAmount));
        String priceInfoDescriptionString=priceInfoDescription.toString();
        if (priceInfoDescriptionString.length() > 250) {
          priceInfoDescriptionString=priceInfoDescriptionString.substring(0,250);
        }
        orderItemPriceInfo.set("description",priceInfoDescriptionString);
        orderItemPriceInfos.add(orderItemPriceInfo);
        if (foundFlatOverride) {
          break;
        }
 else {
          price+=modifyAmount;
        }
      }
    }
    totalRules++;
    if (foundFlatOverride) {
      break;
    }
  }
  if (Debug.verboseOn()) {
    Debug.logVerbose("Unchecked Calculated price: " + price,module);
    Debug.logVerbose("PriceInfo:",module);
    Iterator orderItemPriceInfosIter=orderItemPriceInfos.iterator();
    while (orderItemPriceInfosIter.hasNext()) {
      GenericValue orderItemPriceInfo=(GenericValue)orderItemPriceInfosIter.next();
      Debug.logVerbose(" --- " + orderItemPriceInfo.toString(),module);
    }
  }
  if (totalActions == 0) {
    price=defaultPrice;
  }
 else {
    validPriceFound=true;
  }
  Double maxSellPrice=maximumPriceValue != null ? maximumPriceValue.getDouble("price") : null;
  if (maxSellPrice != null && price > maxSellPrice.doubleValue()) {
    price=maxSellPrice.doubleValue();
  }
  Double minSellPrice=minimumPriceValue != null ? minimumPriceValue.getDouble("price") : null;
  if (minSellPrice != null && price < minSellPrice.doubleValue()) {
    price=minSellPrice.doubleValue();
    validPriceFound=true;
  }
  if (Debug.verboseOn())   Debug.logVerbose("Final Calculated price: " + price + ", rules: "+ totalRules+ ", conds: "+ totalConds+ ", actions: "+ totalActions,module);
  calcResults.put("basePrice",new Double(price));
  calcResults.put("price",new Double(price));
  calcResults.put("listPrice",new Double(listPrice));
  calcResults.put("defaultPrice",new Double(defaultPrice));
  calcResults.put("averageCost",new Double(averageCost));
  calcResults.put("orderItemPriceInfos",orderItemPriceInfos);
  calcResults.put("isSale",new Boolean(isSale));
  calcResults.put("validPriceFound",new Boolean(validPriceFound));
  return calcResults;
}
