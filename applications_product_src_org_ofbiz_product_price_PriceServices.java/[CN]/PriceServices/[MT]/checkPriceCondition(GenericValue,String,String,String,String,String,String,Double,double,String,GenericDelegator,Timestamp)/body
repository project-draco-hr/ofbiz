{
  if (Debug.verboseOn())   Debug.logVerbose("Checking price condition: " + productPriceCond,module);
  int compare=0;
  if ("PRIP_PRODUCT_ID".equals(productPriceCond.getString("inputParamEnumId"))) {
    compare=productId.compareTo(productPriceCond.getString("condValue"));
  }
 else   if ("PRIP_PROD_CAT_ID".equals(productPriceCond.getString("inputParamEnumId"))) {
    String productCategoryId=productPriceCond.getString("condValue");
    List productCategoryMembers=delegator.findByAndCache("ProductCategoryMember",UtilMisc.toMap("productId",productId,"productCategoryId",productCategoryId));
    productCategoryMembers=EntityUtil.filterByDate(productCategoryMembers,nowTimestamp,null,null,true);
    if (productCategoryMembers != null && productCategoryMembers.size() > 0) {
      compare=0;
    }
 else {
      compare=1;
    }
    if (compare == 1 && UtilValidate.isNotEmpty(virtualProductId)) {
      List virtualProductCategoryMembers=delegator.findByAndCache("ProductCategoryMember",UtilMisc.toMap("productId",virtualProductId,"productCategoryId",productCategoryId));
      virtualProductCategoryMembers=EntityUtil.filterByDate(virtualProductCategoryMembers,nowTimestamp,null,null,true);
      if (virtualProductCategoryMembers != null && virtualProductCategoryMembers.size() > 0) {
        compare=0;
      }
    }
  }
 else   if ("PRIP_PROD_FEAT_ID".equals(productPriceCond.getString("inputParamEnumId"))) {
    String productFeatureId=productPriceCond.getString("condValue");
    List productFeatureAppls=delegator.findByAndCache("ProductFeatureAppl",UtilMisc.toMap("productId",productId,"productFeatureId",productFeatureId));
    productFeatureAppls=EntityUtil.filterByDate(productFeatureAppls,nowTimestamp,null,null,true);
    if (productFeatureAppls != null && productFeatureAppls.size() > 0) {
      compare=0;
    }
 else {
      compare=1;
    }
  }
 else   if ("PRIP_PROD_CLG_ID".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (UtilValidate.isNotEmpty(prodCatalogId)) {
      compare=prodCatalogId.compareTo(productPriceCond.getString("condValue"));
    }
 else {
      compare=1;
    }
  }
 else   if ("PRIP_PROD_SGRP_ID".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (UtilValidate.isNotEmpty(productStoreGroupId)) {
      compare=productStoreGroupId.compareTo(productPriceCond.getString("condValue"));
    }
 else {
      compare=1;
    }
  }
 else   if ("PRIP_WEBSITE_ID".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (UtilValidate.isNotEmpty(webSiteId)) {
      compare=webSiteId.compareTo(productPriceCond.getString("condValue"));
    }
 else {
      compare=1;
    }
  }
 else   if ("PRIP_QUANTITY".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (quantity == null) {
      return true;
    }
 else {
      compare=quantity.compareTo(Double.valueOf(productPriceCond.getString("condValue")));
    }
  }
 else   if ("PRIP_PARTY_ID".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (UtilValidate.isNotEmpty(partyId)) {
      compare=partyId.compareTo(productPriceCond.getString("condValue"));
    }
 else {
      compare=1;
    }
  }
 else   if ("PRIP_PARTY_GRP_MEM".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (UtilValidate.isEmpty(partyId)) {
      compare=1;
    }
 else {
      String groupPartyId=productPriceCond.getString("condValue");
      if (partyId.equals(groupPartyId)) {
        compare=0;
      }
 else {
        List partyRelationshipList=delegator.findByAndCache("PartyRelationship",UtilMisc.toMap("partyIdFrom",groupPartyId,"partyIdTo",partyId,"partyRelationshipTypeId","GROUP_ROLLUP"));
        partyRelationshipList=EntityUtil.filterByDate(partyRelationshipList,nowTimestamp,null,null,true);
        if (partyRelationshipList != null && partyRelationshipList.size() > 0) {
          compare=0;
        }
 else {
          List partyRelationshipTwoHopList=delegator.findByAndCache("PartyRelationshipToFrom",UtilMisc.toMap("onePartyIdFrom",groupPartyId,"twoPartyIdTo",partyId,"onePartyRelationshipTypeId","GROUP_ROLLUP","twoPartyRelationshipTypeId","GROUP_ROLLUP"));
          partyRelationshipTwoHopList=EntityUtil.filterByDate(partyRelationshipTwoHopList,nowTimestamp,"oneFromDate","oneThruDate",true);
          partyRelationshipTwoHopList=EntityUtil.filterByDate(partyRelationshipTwoHopList,nowTimestamp,"twoFromDate","twoThruDate",true);
          if (partyRelationshipTwoHopList != null && partyRelationshipTwoHopList.size() > 0) {
            compare=0;
          }
 else {
            compare=1;
          }
        }
      }
    }
  }
 else   if ("PRIP_PARTY_CLASS".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (UtilValidate.isEmpty(partyId)) {
      compare=1;
    }
 else {
      String partyClassificationGroupId=productPriceCond.getString("condValue");
      List partyClassificationList=delegator.findByAndCache("PartyClassification",UtilMisc.toMap("partyId",partyId,"partyClassificationGroupId",partyClassificationGroupId));
      partyClassificationList=EntityUtil.filterByDate(partyClassificationList,nowTimestamp,null,null,true);
      if (partyClassificationList != null && partyClassificationList.size() > 0) {
        compare=0;
      }
 else {
        compare=1;
      }
    }
  }
 else   if ("PRIP_ROLE_TYPE".equals(productPriceCond.getString("inputParamEnumId"))) {
    if (partyId != null) {
      GenericValue partyRole=delegator.findByPrimaryKeyCache("PartyRole",UtilMisc.toMap("partyId",partyId,"roleTypeId",productPriceCond.getString("condValue")));
      if (partyRole != null) {
        compare=0;
      }
 else {
        compare=1;
      }
    }
 else {
      compare=1;
    }
  }
 else   if ("PRIP_LIST_PRICE".equals(productPriceCond.getString("inputParamEnumId"))) {
    Double listPriceValue=new Double(listPrice);
    compare=listPriceValue.compareTo(Double.valueOf(productPriceCond.getString("condValue")));
  }
 else   if ("PRIP_CURRENCY_UOMID".equals(productPriceCond.getString("inputParamEnumId"))) {
    compare=currencyUomId.compareTo(productPriceCond.getString("condValue"));
  }
 else {
    Debug.logWarning("An un-supported productPriceCond input parameter (lhs) was used: " + productPriceCond.getString("inputParamEnumId") + ", returning false, ie check failed",module);
    return false;
  }
  if (Debug.verboseOn())   Debug.logVerbose("Price Condition compare done, compare=" + compare,module);
  if ("PRC_EQ".equals(productPriceCond.getString("operatorEnumId"))) {
    if (compare == 0)     return true;
  }
 else   if ("PRC_NEQ".equals(productPriceCond.getString("operatorEnumId"))) {
    if (compare != 0)     return true;
  }
 else   if ("PRC_LT".equals(productPriceCond.getString("operatorEnumId"))) {
    if (compare < 0)     return true;
  }
 else   if ("PRC_LTE".equals(productPriceCond.getString("operatorEnumId"))) {
    if (compare <= 0)     return true;
  }
 else   if ("PRC_GT".equals(productPriceCond.getString("operatorEnumId"))) {
    if (compare > 0)     return true;
  }
 else   if ("PRC_GTE".equals(productPriceCond.getString("operatorEnumId"))) {
    if (compare >= 0)     return true;
  }
 else {
    Debug.logWarning("An un-supported productPriceCond condition was used: " + productPriceCond.getString("operatorEnumId") + ", returning false, ie check failed",module);
    return false;
  }
  return false;
}
