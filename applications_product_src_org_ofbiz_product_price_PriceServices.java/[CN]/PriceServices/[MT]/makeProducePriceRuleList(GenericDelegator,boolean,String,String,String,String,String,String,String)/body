{
  List<GenericValue> productPriceRules=null;
  if (optimizeForLargeRuleSet) {
    TreeSet<String> productPriceRuleIds=new TreeSet<String>();
    Collection<GenericValue> productCategoryIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_PROD_CAT_ID"));
    if (UtilValidate.isNotEmpty(productCategoryIdConds)) {
      Iterator<GenericValue> productCategoryIdCondsIter=productCategoryIdConds.iterator();
      while (productCategoryIdCondsIter.hasNext()) {
        GenericValue productCategoryIdCond=productCategoryIdCondsIter.next();
        productPriceRuleIds.add(productCategoryIdCond.getString("productPriceRuleId"));
      }
    }
    Collection<GenericValue> productFeatureIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_PROD_FEAT_ID"));
    if (UtilValidate.isNotEmpty(productFeatureIdConds)) {
      Iterator<GenericValue> productFeatureIdCondsIter=productFeatureIdConds.iterator();
      while (productFeatureIdCondsIter.hasNext()) {
        GenericValue productFeatureIdCond=productFeatureIdCondsIter.next();
        productPriceRuleIds.add(productFeatureIdCond.getString("productPriceRuleId"));
      }
    }
    Collection<GenericValue> quantityConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_QUANTITY"));
    if (UtilValidate.isNotEmpty(quantityConds)) {
      Iterator<GenericValue> quantityCondsIter=quantityConds.iterator();
      while (quantityCondsIter.hasNext()) {
        GenericValue quantityCond=quantityCondsIter.next();
        productPriceRuleIds.add(quantityCond.getString("productPriceRuleId"));
      }
    }
    Collection<GenericValue> roleTypeIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_ROLE_TYPE"));
    if (UtilValidate.isNotEmpty(roleTypeIdConds)) {
      Iterator<GenericValue> roleTypeIdCondsIter=roleTypeIdConds.iterator();
      while (roleTypeIdCondsIter.hasNext()) {
        GenericValue roleTypeIdCond=roleTypeIdCondsIter.next();
        productPriceRuleIds.add(roleTypeIdCond.getString("productPriceRuleId"));
      }
    }
    Collection<GenericValue> listPriceConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_LIST_PRICE"));
    if (UtilValidate.isNotEmpty(listPriceConds)) {
      Iterator<GenericValue> listPriceCondsIter=listPriceConds.iterator();
      while (listPriceCondsIter.hasNext()) {
        GenericValue listPriceCond=listPriceCondsIter.next();
        productPriceRuleIds.add(listPriceCond.getString("productPriceRuleId"));
      }
    }
    Collection<GenericValue> productIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_PRODUCT_ID","condValue",productId));
    if (UtilValidate.isNotEmpty(productIdConds)) {
      Iterator<GenericValue> productIdCondsIter=productIdConds.iterator();
      while (productIdCondsIter.hasNext()) {
        GenericValue productIdCond=productIdCondsIter.next();
        productPriceRuleIds.add(productIdCond.getString("productPriceRuleId"));
      }
    }
    if (virtualProductId != null) {
      Collection<GenericValue> virtualProductIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_PRODUCT_ID","condValue",virtualProductId));
      if (UtilValidate.isNotEmpty(virtualProductIdConds)) {
        Iterator<GenericValue> virtualProductIdCondsIter=virtualProductIdConds.iterator();
        while (virtualProductIdCondsIter.hasNext()) {
          GenericValue virtualProductIdCond=virtualProductIdCondsIter.next();
          productPriceRuleIds.add(virtualProductIdCond.getString("productPriceRuleId"));
        }
      }
    }
    if (UtilValidate.isNotEmpty(prodCatalogId)) {
      Collection<GenericValue> prodCatalogIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_PROD_CLG_ID","condValue",prodCatalogId));
      if (UtilValidate.isNotEmpty(prodCatalogIdConds)) {
        Iterator<GenericValue> prodCatalogIdCondsIter=prodCatalogIdConds.iterator();
        while (prodCatalogIdCondsIter.hasNext()) {
          GenericValue prodCatalogIdCond=prodCatalogIdCondsIter.next();
          productPriceRuleIds.add(prodCatalogIdCond.getString("productPriceRuleId"));
        }
      }
    }
    if (UtilValidate.isNotEmpty(productStoreGroupId)) {
      Collection<GenericValue> storeGroupConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_PROD_SGRP_ID","condValue",productStoreGroupId));
      if (UtilValidate.isNotEmpty(storeGroupConds)) {
        Iterator<GenericValue> storeGroupCondsIter=storeGroupConds.iterator();
        while (storeGroupCondsIter.hasNext()) {
          GenericValue storeGroupCond=storeGroupCondsIter.next();
          productPriceRuleIds.add(storeGroupCond.getString("productPriceRuleId"));
        }
      }
    }
    if (UtilValidate.isNotEmpty(webSiteId)) {
      Collection<GenericValue> webSiteIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_WEBSITE_ID","condValue",webSiteId));
      if (UtilValidate.isNotEmpty(webSiteIdConds)) {
        Iterator<GenericValue> webSiteIdCondsIter=webSiteIdConds.iterator();
        while (webSiteIdCondsIter.hasNext()) {
          GenericValue webSiteIdCond=webSiteIdCondsIter.next();
          productPriceRuleIds.add(webSiteIdCond.getString("productPriceRuleId"));
        }
      }
    }
    if (UtilValidate.isNotEmpty(partyId)) {
      Collection<GenericValue> partyIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_PARTY_ID","condValue",partyId));
      if (UtilValidate.isNotEmpty(partyIdConds)) {
        Iterator<GenericValue> partyIdCondsIter=partyIdConds.iterator();
        while (partyIdCondsIter.hasNext()) {
          GenericValue partyIdCond=partyIdCondsIter.next();
          productPriceRuleIds.add(partyIdCond.getString("productPriceRuleId"));
        }
      }
    }
    Collection<GenericValue> currencyUomIdConds=delegator.findByAndCache("ProductPriceCond",UtilMisc.toMap("inputParamEnumId","PRIP_CURRENCY_UOMID","condValue",currencyUomId));
    if (UtilValidate.isNotEmpty(currencyUomIdConds)) {
      Iterator<GenericValue> currencyUomIdCondsIter=currencyUomIdConds.iterator();
      while (currencyUomIdCondsIter.hasNext()) {
        GenericValue currencyUomIdCond=currencyUomIdCondsIter.next();
        productPriceRuleIds.add(currencyUomIdCond.getString("productPriceRuleId"));
      }
    }
    productPriceRules=FastList.newInstance();
    Iterator<String> productPriceRuleIdsIter=productPriceRuleIds.iterator();
    while (productPriceRuleIdsIter.hasNext()) {
      String productPriceRuleId=productPriceRuleIdsIter.next();
      GenericValue productPriceRule=delegator.findByPrimaryKeyCache("ProductPriceRule",UtilMisc.toMap("productPriceRuleId",productPriceRuleId));
      if (productPriceRule == null)       continue;
      productPriceRules.add(productPriceRule);
    }
  }
 else {
    productPriceRules=delegator.findList("ProductPriceRule",null,null,null,null,true);
    if (productPriceRules == null)     productPriceRules=FastList.newInstance();
  }
  return productPriceRules;
}
