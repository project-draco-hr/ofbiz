{
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);
  Map<String,Object> result=new HashMap<String,Object>();
  Map<String,Object> newDrContext=new HashMap<String,Object>();
  GenericValue dataResource=delegator.makeValue("DataResource");
  dataResource.setPKFields(context);
  dataResource.setNonPKFields(context);
  dataResource.setAllFields(context,false,"dr",null);
  context.putAll(dataResource);
  GenericValue electronicText=delegator.makeValue("ElectronicText");
  electronicText.setPKFields(context);
  electronicText.setNonPKFields(context);
  String textData=(String)electronicText.get("textData");
  String dataResourceId=(String)dataResource.get("dataResourceId");
  String dataResourceTypeId=(String)dataResource.get("dataResourceTypeId");
  if (Debug.infoOn()) {
    Debug.logInfo("in persist... dataResourceId(0):" + dataResourceId,module);
  }
  context.put("skipPermissionCheck","granted");
  boolean dataResourceExists=true;
  if (UtilValidate.isEmpty(dataResourceId)) {
    dataResourceExists=false;
  }
 else {
    try {
      GenericValue val=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).queryOne();
      if (val == null) {
        dataResourceExists=false;
      }
    }
 catch (    GenericEntityException e) {
      return ServiceUtil.returnError(e.toString());
    }
  }
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  ModelService dataResourceModel=dispatcher.getDispatchContext().getModelService("updateDataResource");
  Map<String,Object> ctx=dataResourceModel.makeValid(dataResource,"IN");
  newDrContext.putAll(ctx);
  newDrContext.put("userLogin",userLogin);
  newDrContext.put("skipPermissionCheck",context.get("skipPermissionCheck"));
  ByteBuffer imageDataBytes=(ByteBuffer)context.get("imageData");
  String mimeTypeId=(String)newDrContext.get("mimeTypeId");
  if (imageDataBytes != null && (mimeTypeId == null || (mimeTypeId.indexOf("image") >= 0) || (mimeTypeId.indexOf("application") >= 0))) {
    mimeTypeId=(String)context.get("_imageData_contentType");
    if (dataResourceTypeId.equals("IMAGE_OBJECT")) {
      String fileName=(String)context.get("_imageData_fileName");
      newDrContext.put("objectInfo",fileName);
    }
    newDrContext.put("mimeTypeId",mimeTypeId);
  }
  if (!dataResourceExists) {
    Map<String,Object> thisResult=dispatcher.runSync("createDataResource",newDrContext);
    String errorMsg=ServiceUtil.getErrorMessage(thisResult);
    if (UtilValidate.isNotEmpty(errorMsg)) {
      throw (new Exception(errorMsg));
    }
    dataResourceId=(String)thisResult.get("dataResourceId");
    if (Debug.infoOn()) {
      Debug.logInfo("in persist... dataResourceId(0):" + dataResourceId,module);
    }
    dataResource=(GenericValue)thisResult.get("dataResource");
    Map<String,Object> fileContext=new HashMap<String,Object>();
    fileContext.put("userLogin",userLogin);
    if (dataResourceTypeId.equals("IMAGE_OBJECT")) {
      if (imageDataBytes != null) {
        fileContext.put("dataResourceId",dataResourceId);
        fileContext.put("imageData",imageDataBytes);
        thisResult=dispatcher.runSync("createImage",fileContext);
        errorMsg=ServiceUtil.getErrorMessage(thisResult);
        if (UtilValidate.isNotEmpty(errorMsg)) {
          return ServiceUtil.returnError(errorMsg);
        }
      }
    }
 else     if (dataResourceTypeId.equals("SHORT_TEXT")) {
    }
 else     if (dataResourceTypeId.startsWith("SURVEY")) {
    }
 else {
      if (UtilValidate.isNotEmpty(textData)) {
        fileContext.put("dataResourceId",dataResourceId);
        fileContext.put("textData",textData);
        thisResult=dispatcher.runSync("createElectronicText",fileContext);
        errorMsg=ServiceUtil.getErrorMessage(thisResult);
        if (UtilValidate.isNotEmpty(errorMsg)) {
          return ServiceUtil.returnError(errorMsg);
        }
      }
    }
  }
 else {
    Map<String,Object> thisResult=dispatcher.runSync("updateDataResource",newDrContext);
    String errorMsg=ServiceUtil.getErrorMessage(thisResult);
    if (UtilValidate.isNotEmpty(errorMsg)) {
      return ServiceUtil.returnError(errorMsg);
    }
    Map<String,Object> fileContext=new HashMap<String,Object>();
    fileContext.put("userLogin",userLogin);
    String forceElectronicText=(String)context.get("forceElectronicText");
    if (dataResourceTypeId.equals("IMAGE_OBJECT")) {
      if (imageDataBytes != null || "true".equalsIgnoreCase(forceElectronicText)) {
        fileContext.put("dataResourceId",dataResourceId);
        fileContext.put("imageData",imageDataBytes);
        thisResult=dispatcher.runSync("updateImage",fileContext);
        errorMsg=ServiceUtil.getErrorMessage(thisResult);
        if (UtilValidate.isNotEmpty(errorMsg)) {
          return ServiceUtil.returnError(errorMsg);
        }
      }
    }
 else     if (dataResourceTypeId.equals("SHORT_TEXT")) {
    }
 else     if (dataResourceTypeId.startsWith("SURVEY")) {
    }
 else {
      if (UtilValidate.isNotEmpty(textData) || "true".equalsIgnoreCase(forceElectronicText)) {
        fileContext.put("dataResourceId",dataResourceId);
        fileContext.put("textData",textData);
        thisResult=dispatcher.runSync("updateElectronicText",fileContext);
        errorMsg=ServiceUtil.getErrorMessage(thisResult);
        if (UtilValidate.isNotEmpty(errorMsg)) {
          return ServiceUtil.returnError(errorMsg);
        }
      }
    }
  }
  if (dataResourceTypeId.indexOf("_FILE") >= 0) {
    Map<String,Object> uploadImage=new HashMap<String,Object>();
    uploadImage.put("userLogin",userLogin);
    uploadImage.put("dataResourceId",dataResourceId);
    uploadImage.put("dataResourceTypeId",dataResourceTypeId);
    uploadImage.put("rootDir",context.get("objectInfo"));
    uploadImage.put("uploadedFile",imageDataBytes);
    uploadImage.put("_uploadedFile_fileName",(String)context.get("_imageData_fileName"));
    uploadImage.put("_uploadedFile_contentType",(String)context.get("_imageData_contentType"));
    dispatcher.runSync("attachUploadToDataResource",uploadImage);
  }
  result.put("dataResourceId",dataResourceId);
  result.put("drDataResourceId",dataResourceId);
  context.put("dataResourceId",dataResourceId);
  return result;
}
