{
  Record record=new Record(modelRecord);
  StringTokenizer st=new StringTokenizer(line,"" + delimiter,true);
  for (int i=0; i < modelRecord.fields.size(); i++) {
    ModelField modelField=(ModelField)modelRecord.fields.get(i);
    String strVal=null;
    if (modelField.expression) {
      if (modelField.refField != null && modelField.refField.length() > 0) {
        strVal=record.getString(modelField.refField);
      }
      if (strVal == null) {
        strVal=(String)modelField.defaultValue;
      }
    }
 else {
      try {
        strVal=st.nextToken();
        if (strVal.equals("" + delimiter)) {
          strVal=null;
        }
 else {
          if (st.hasMoreTokens()) {
            st.nextToken();
          }
        }
      }
 catch (      NoSuchElementException nsee) {
        throw new DataFileException("Field " + modelField.name + " could not be read from a line ("+ lineNum+ ") with only "+ line.length()+ " chars.",nsee);
      }
    }
    try {
      record.setString(modelField.name,strVal);
    }
 catch (    java.text.ParseException e) {
      throw new DataFileException("Could not parse field " + modelField.name + ", format string \""+ modelField.format+ "\" with value "+ strVal+ " on line "+ lineNum,e);
    }
catch (    java.lang.NumberFormatException e) {
      throw new DataFileException("Number not valid for field " + modelField.name + ", format string \""+ modelField.format+ "\" with value "+ strVal+ " on line "+ lineNum,e);
    }
  }
  return record;
}
