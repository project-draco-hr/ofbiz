{
  Record record=new Record(modelRecord);
  StringTokenizer st=null;
  if (line.endsWith(String.valueOf(delimiter))) {
    st=new StringTokenizer(line + " ","" + delimiter,true);
  }
 else {
    st=new StringTokenizer(line,"" + delimiter,true);
  }
  for (  ModelField modelField : modelRecord.fields) {
    String strVal=null;
    if (modelField.expression) {
      if (UtilValidate.isNotEmpty(modelField.refField)) {
        strVal=record.getString(modelField.refField);
      }
      if (strVal == null) {
        strVal=(String)modelField.defaultValue;
      }
    }
 else {
      if (st.hasMoreTokens()) {
        try {
          strVal=st.nextToken();
          if (strVal.equals("" + delimiter)) {
            strVal=null;
          }
 else           if (st.hasMoreTokens()) {
            st.nextToken();
          }
        }
 catch (        NoSuchElementException nsee) {
          throw new DataFileException("Field " + modelField.name + " could not be read from a line ("+ lineNum+ ") with only "+ line.length()+ " chars.",nsee);
        }
      }
 else {
        strVal=null;
      }
    }
    try {
      if (textDelimiter != null && (strVal.startsWith(textDelimiter) && strVal.endsWith(textDelimiter))) {
        strVal=strVal.substring(textDelimiter.length(),strVal.length() - textDelimiter.length());
      }
      record.setString(modelField.name,strVal);
    }
 catch (    java.text.ParseException e) {
      throw new DataFileException("Could not parse field " + modelField.name + ", format string \""+ modelField.format+ "\" with value "+ strVal+ " on line "+ lineNum,e);
    }
catch (    java.lang.NumberFormatException e) {
      throw new DataFileException("Number not valid for field " + modelField.name + ", format string \""+ modelField.format+ "\" with value "+ strVal+ " on line "+ lineNum,e);
    }
  }
  return record;
}
