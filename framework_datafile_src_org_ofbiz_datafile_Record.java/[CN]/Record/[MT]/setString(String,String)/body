{
  if (name == null || value == null || value.equals(""))   return;
  ModelField field=getModelRecord().getModelField(name);
  if (field == null)   set(name,value);
  boolean nonSpace=false;
  for (int i=0; i < value.length(); i++) {
    if (value.charAt(i) != ' ') {
      nonSpace=true;
      break;
    }
  }
  if (!nonSpace)   return;
  String fieldType=field.type;
  if (fieldType.equals("CustomTimestamp")) {
    SimpleDateFormat sdf=new SimpleDateFormat(field.format);
    java.util.Date tempDate=sdf.parse(value);
    java.sql.Timestamp timestamp=new java.sql.Timestamp(tempDate.getTime());
    set(name,timestamp);
  }
 else   if (fieldType.equals("CustomDate")) {
    SimpleDateFormat sdf=new SimpleDateFormat(field.format);
    java.util.Date tempDate=sdf.parse(value);
    java.sql.Date date=new java.sql.Date(tempDate.getTime());
    set(name,date);
  }
 else   if (fieldType.equals("CustomTime")) {
    SimpleDateFormat sdf=new SimpleDateFormat(field.format);
    java.util.Date tempDate=sdf.parse(value);
    java.sql.Time time=new java.sql.Time(tempDate.getTime());
    set(name,time);
  }
 else   if (fieldType.equals("FixedPointDouble")) {
    NumberFormat nf=NumberFormat.getNumberInstance();
    Number tempNum=nf.parse(value);
    double number=tempNum.doubleValue();
    double decimalPlaces=Double.parseDouble(field.format);
    double divisor=Math.pow(10.0,decimalPlaces);
    number=number / divisor;
    set(name,Double.valueOf(number));
  }
 else   if (fieldType.equals("java.lang.String") || fieldType.equals("String"))   if (field.format.equals("EncryptedString")) {
    String hashType=LoginServices.getHashType();
    set(name,HashCrypt.getDigestHash(value,hashType));
  }
 else {
    set(name,value);
  }
 else   if (fieldType.equals("NullTerminatedString")) {
    int terminate=value.indexOf(0x0);
    set(name,terminate > 0 ? value.substring(0,terminate) : value);
  }
 else   if (fieldType.equals("java.sql.Timestamp") || fieldType.equals("Timestamp"))   set(name,java.sql.Timestamp.valueOf(value));
 else   if (fieldType.equals("java.sql.Time") || fieldType.equals("Time"))   set(name,java.sql.Time.valueOf(value));
 else   if (fieldType.equals("java.sql.Date") || fieldType.equals("Date"))   set(name,java.sql.Date.valueOf(value));
 else   if (fieldType.equals("java.lang.Integer") || fieldType.equals("Integer"))   set(name,Integer.valueOf(value));
 else   if (fieldType.equals("java.lang.Long") || fieldType.equals("Long"))   set(name,Long.valueOf(value));
 else   if (fieldType.equals("java.lang.Float") || fieldType.equals("Float"))   set(name,Float.valueOf(value));
 else   if (fieldType.equals("java.lang.Double") || fieldType.equals("Double"))   set(name,Double.valueOf(value));
 else   if (fieldType.equals("LEShort"))   set(name,Short.valueOf(readLEShort(value.getBytes())));
 else   if (fieldType.equals("LEInteger"))   set(name,Integer.valueOf(readLEInt(value.getBytes())));
 else   if (fieldType.equals("LELong"))   set(name,Long.valueOf(readLELong(value.getBytes())));
 else {
    throw new IllegalArgumentException("Field type " + fieldType + " not currently supported. Sorry.");
  }
}
