{
  Delegator delegator=ctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String roleTypeId=(String)context.get("roleTypeId");
  Locale locale=(Locale)context.get("locale");
  List<GenericValue> validWorkEfforts=null;
  if (userLogin != null && userLogin.get("partyId") != null) {
    try {
      EntityConditionList<EntityExpr> ecl=EntityCondition.makeCondition(EntityOperator.AND,EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,userLogin.get("partyId")),EntityCondition.makeCondition("roleTypeId",EntityOperator.EQUALS,roleTypeId),EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"EVENT"),EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DECLINED"),EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DELEGATED"),EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_COMPLETED"),EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_CANCELLED"));
      validWorkEfforts=EntityQuery.use(delegator).from("WorkEffortAndPartyAssign").where(ecl).orderBy("estimatedStartDate","priority").filterByDate().queryList();
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"WorkEffortNotFound",UtilMisc.toMap("errorString",e.toString()),locale));
    }
  }
  Map<String,Object> result=FastMap.newInstance();
  if (validWorkEfforts == null) {
    validWorkEfforts=FastList.newInstance();
  }
  result.put("events",validWorkEfforts);
  return result;
}
