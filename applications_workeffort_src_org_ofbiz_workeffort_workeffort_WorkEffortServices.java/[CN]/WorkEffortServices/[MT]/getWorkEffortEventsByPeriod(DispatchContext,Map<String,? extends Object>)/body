{
  Delegator delegator=ctx.getDelegator();
  Security security=ctx.getSecurity();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  TimeZone timeZone=(TimeZone)context.get("timeZone");
  Timestamp startDay=(Timestamp)context.get("start");
  Integer numPeriodsInteger=(Integer)context.get("numPeriods");
  String partyId=(String)context.get("partyId");
  Collection<String> partyIds=UtilGenerics.checkCollection(context.get("partyIds"));
  String facilityId=(String)context.get("facilityId");
  String fixedAssetId=(String)context.get("fixedAssetId");
  String workEffortTypeId=(String)context.get("workEffortTypeId");
  Boolean filterOutCanceledEvents=(Boolean)context.get("filterOutCanceledEvents");
  if (filterOutCanceledEvents == null) {
    filterOutCanceledEvents=Boolean.FALSE;
  }
  int maxConcurrentEntries=0;
  Integer periodTypeObject=(Integer)context.get("periodType");
  int periodType=0;
  if (periodTypeObject != null) {
    periodType=periodTypeObject.intValue();
  }
  int numPeriods=0;
  if (numPeriodsInteger != null) {
    numPeriods=numPeriodsInteger.intValue();
  }
  Timestamp startStamp=UtilDateTime.getDayStart(startDay,timeZone,locale);
  Timestamp endStamp=UtilDateTime.adjustTimestamp(startStamp,periodType,1,timeZone,locale);
  long periodLen=endStamp.getTime() - startStamp.getTime();
  endStamp=UtilDateTime.adjustTimestamp(startStamp,periodType,numPeriods,timeZone,locale);
  List<GenericValue> validWorkEfforts=null;
  Collection<String> partyIdsToUse=partyIds;
  if (partyIdsToUse == null) {
    partyIdsToUse=FastSet.newInstance();
  }
  if (UtilValidate.isNotEmpty(partyId)) {
    if (partyId.equals(userLogin.getString("partyId")) || security.hasEntityPermission("WORKEFFORTMGR","_VIEW",userLogin)) {
      partyIdsToUse.add(partyId);
    }
 else {
      return ServiceUtil.returnError("You do not have permission to view information for party with ID [" + partyId + "], you must be logged in as a user associated with this party, or have the WORKEFFORTMGR_VIEW or WORKEFFORTMGR_ADMIN permissions.");
    }
  }
 else {
    if (UtilValidate.isEmpty(facilityId) && UtilValidate.isEmpty(fixedAssetId)) {
      partyIdsToUse.add(userLogin.getString("partyId"));
    }
  }
  List<EntityCondition> cancelledCheckAndList=UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"EVENT_CANCELLED"),EntityCondition.makeCondition("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_CANCELLED"));
  List<EntityCondition> entityExprList=UtilGenerics.checkList(context.get("entityExprList"));
  if (entityExprList == null) {
    entityExprList=getDefaultWorkEffortExprList(partyIdsToUse,facilityId,fixedAssetId,workEffortTypeId,cancelledCheckAndList);
  }
  EntityCondition startDateRequired=EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("estimatedStartDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("actualStartDate",EntityOperator.NOT_EQUAL,null)),EntityJoinOperator.OR);
  List<EntityCondition> periodCheckAndlList=UtilMisc.<EntityCondition>toList(startDateRequired,EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("actualStartDate",EntityOperator.EQUALS,null),EntityCondition.makeCondition("estimatedStartDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("estimatedStartDate",EntityOperator.LESS_THAN_EQUAL_TO,endStamp)),EntityJoinOperator.AND),EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("actualStartDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("actualStartDate",EntityOperator.LESS_THAN_EQUAL_TO,endStamp)),EntityJoinOperator.AND)),EntityJoinOperator.OR),EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("estimatedCompletionDate",EntityOperator.EQUALS,null),EntityCondition.makeCondition("actualCompletionDate",EntityOperator.EQUALS,null)),EntityJoinOperator.AND),EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("actualCompletionDate",EntityOperator.EQUALS,null),EntityCondition.makeCondition("estimatedCompletionDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("estimatedCompletionDate",EntityOperator.GREATER_THAN_EQUAL_TO,startStamp)),EntityJoinOperator.AND),EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("actualCompletionDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("actualCompletionDate",EntityOperator.GREATER_THAN_EQUAL_TO,startStamp)),EntityJoinOperator.AND)),EntityJoinOperator.OR));
  entityExprList.addAll(periodCheckAndlList);
  List<EntityCondition> recurringEvents=UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("tempExprId",EntityOperator.NOT_EQUAL,null));
  if (filterOutCanceledEvents.booleanValue()) {
    recurringEvents.addAll(cancelledCheckAndList);
  }
  EntityCondition eclTotal=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition(entityExprList,EntityJoinOperator.AND),EntityCondition.makeCondition(recurringEvents,EntityJoinOperator.AND)),EntityJoinOperator.OR);
  List<String> orderByList=UtilMisc.toList("estimatedStartDate");
  if (partyIdsToUse.size() > 0 || UtilValidate.isNotEmpty(facilityId) || UtilValidate.isNotEmpty(fixedAssetId)) {
    try {
      List<GenericValue> tempWorkEfforts=null;
      if (UtilValidate.isNotEmpty(partyIdsToUse)) {
        tempWorkEfforts=EntityUtil.filterByDate(delegator.findList("WorkEffortAndPartyAssignAndType",eclTotal,null,orderByList,null,false));
      }
 else       if (UtilValidate.isNotEmpty(fixedAssetId)) {
        EntityConditionList<EntityCondition> ecl=EntityCondition.makeCondition(UtilMisc.toList(eclTotal,EntityCondition.makeCondition("fixedAssetId",EntityOperator.EQUALS,fixedAssetId)),EntityJoinOperator.AND);
        tempWorkEfforts=delegator.findList("WorkEffort",ecl,null,orderByList,null,false);
        tempWorkEfforts.addAll(EntityUtil.filterByDate(delegator.findList("WorkEffortAndFixedAssetAssign",ecl,null,orderByList,null,false)));
      }
 else {
        EntityConditionList<EntityCondition> ecl=EntityCondition.makeCondition(UtilMisc.toList(eclTotal,EntityCondition.makeCondition("facilityId",EntityOperator.EQUALS,facilityId)),EntityJoinOperator.AND);
        tempWorkEfforts=delegator.findList("WorkEffort",ecl,null,UtilMisc.toList("estimatedStartDate"),null,false);
      }
      validWorkEfforts=WorkEffortWorker.removeDuplicateWorkEfforts(tempWorkEfforts);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,module);
    }
  }
  List<Map<String,Object>> periods=FastList.newInstance();
  if (validWorkEfforts != null) {
    List<DateRange> periodRanges=FastList.newInstance();
    for (int i=0; i < numPeriods; i++) {
      Timestamp curPeriodStart=UtilDateTime.adjustTimestamp(startStamp,periodType,i,timeZone,locale);
      Timestamp curPeriodEnd=UtilDateTime.adjustTimestamp(curPeriodStart,periodType,1,timeZone,locale);
      curPeriodEnd=new Timestamp(curPeriodEnd.getTime() - 1);
      periodRanges.add(new DateRange(curPeriodStart,curPeriodEnd));
    }
    try {
      Set<GenericValue> exclusions=FastSet.newInstance();
      Set<GenericValue> inclusions=FastSet.newInstance();
      DateRange range=new DateRange(startStamp,endStamp);
      Calendar cal=UtilDateTime.toCalendar(startStamp,timeZone,locale);
      for (      GenericValue workEffort : validWorkEfforts) {
        if (UtilValidate.isNotEmpty(workEffort.getString("tempExprId"))) {
          if (UtilValidate.isNotEmpty(partyIdsToUse) && !workEffort.getString("scopeEnumId").equals("WES_PUBLIC") && !partyIdsToUse.contains(workEffort.getString("partyId"))) {
            continue;
          }
          TemporalExpression tempExpr=TemporalExpressionWorker.getTemporalExpression(delegator,workEffort.getString("tempExprId"));
          Set<Date> occurrences=tempExpr.getRange(range,cal);
          for (          Date occurrence : occurrences) {
            for (            DateRange periodRange : periodRanges) {
              if (periodRange.includesDate(occurrence)) {
                GenericValue cloneWorkEffort=(GenericValue)workEffort.clone();
                TimeDuration duration=workEffort.getDuration("estimatedMilliSeconds");
                if (!duration.isZero()) {
                  Calendar endCal=UtilDateTime.toCalendar(occurrence,timeZone,locale);
                  Date endDate=duration.addToCalendar(endCal).getTime();
                  cloneWorkEffort.set("estimatedStartDate",new Timestamp(occurrence.getTime()));
                  cloneWorkEffort.set("estimatedCompletionDate",new Timestamp(endDate.getTime()));
                }
 else {
                  cloneWorkEffort.set("estimatedStartDate",periodRange.startStamp());
                  cloneWorkEffort.set("estimatedCompletionDate",periodRange.endStamp());
                }
                inclusions.add(cloneWorkEffort);
              }
            }
          }
          exclusions.add(workEffort);
        }
      }
      validWorkEfforts.removeAll(exclusions);
      validWorkEfforts.addAll(inclusions);
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,module);
    }
    boolean firstEntry=true;
    for (    DateRange periodRange : periodRanges) {
      List<Map<String,Object>> curWorkEfforts=FastList.newInstance();
      Map<String,Object> entry=FastMap.newInstance();
      for (      GenericValue workEffort : validWorkEfforts) {
        Timestamp startDate=workEffort.getTimestamp("estimatedStartDate");
        if (workEffort.getTimestamp("actualStartDate") != null) {
          startDate=workEffort.getTimestamp("actualStartDate");
        }
        Timestamp endDate=workEffort.getTimestamp("estimatedCompletionDate");
        if (workEffort.getTimestamp("actualCompletionDate") != null) {
          endDate=workEffort.getTimestamp("actualCompletionDate");
        }
        if (endDate == null)         endDate=startDate;
        DateRange weRange=new DateRange(startDate,endDate);
        if (periodRange.intersectsRange(weRange)) {
          Map<String,Object> calEntry=FastMap.newInstance();
          calEntry.put("workEffort",workEffort);
          long length=((weRange.end().after(endStamp) ? endStamp.getTime() : weRange.end().getTime()) - (weRange.start().before(startStamp) ? startStamp.getTime() : weRange.start().getTime()));
          int periodSpan=(int)Math.ceil((double)length / periodLen);
          calEntry.put("periodSpan",Integer.valueOf(periodSpan));
          if (firstEntry) {
            calEntry.put("startOfPeriod",Boolean.TRUE);
            firstEntry=false;
          }
 else {
            boolean startOfPeriod=((weRange.start().getTime() - periodRange.start().getTime()) >= 0);
            calEntry.put("startOfPeriod",Boolean.valueOf(startOfPeriod));
          }
          curWorkEfforts.add(calEntry);
        }
      }
      int numEntries=curWorkEfforts.size();
      if (numEntries > maxConcurrentEntries) {
        maxConcurrentEntries=numEntries;
      }
      entry.put("start",periodRange.startStamp());
      entry.put("end",periodRange.endStamp());
      entry.put("calendarEntries",curWorkEfforts);
      periods.add(entry);
    }
  }
  Map<String,Object> result=FastMap.newInstance();
  result.put("periods",periods);
  result.put("maxConcurrentEntries",Integer.valueOf(maxConcurrentEntries));
  return result;
}
