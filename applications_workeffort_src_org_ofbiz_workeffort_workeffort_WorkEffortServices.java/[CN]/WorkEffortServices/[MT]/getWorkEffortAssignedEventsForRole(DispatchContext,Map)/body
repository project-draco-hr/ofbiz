{
  GenericDelegator delegator=ctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String roleTypeId=(String)context.get("roleTypeId");
  List validWorkEfforts=null;
  if (userLogin != null && userLogin.get("partyId") != null) {
    try {
      EntityConditionList<EntityExpr> ecl=new EntityConditionList<EntityExpr>(EntityOperator.AND,new EntityExpr[]{new EntityExpr("partyId",EntityOperator.EQUALS,userLogin.get("partyId")),new EntityExpr("roleTypeId",EntityOperator.EQUALS,roleTypeId),new EntityExpr("workEffortTypeId",EntityOperator.EQUALS,"EVENT"),new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DECLINED"),new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DELEGATED"),new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_COMPLETED"),new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_CANCELLED")});
      validWorkEfforts=EntityUtil.filterByDate(delegator.findList("WorkEffortAndPartyAssign",ecl,null,UtilMisc.toList("estimatedStartDate","priority"),null,false));
    }
 catch (    GenericEntityException e) {
      Debug.logWarning(e,module);
      return ServiceUtil.returnError("Error finding desired WorkEffort records: " + e.toString());
    }
  }
  Map result=new HashMap();
  if (validWorkEfforts == null) {
    validWorkEfforts=new LinkedList();
  }
  result.put("events",validWorkEfforts);
  return result;
}
