{
  GenericDelegator delegator=ctx.getDelegator();
  Timestamp now=new Timestamp(System.currentTimeMillis());
  List<GenericValue> eventReminders=null;
  try {
    eventReminders=delegator.findList("WorkEffortEventReminder",EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("reminderDateTime",EntityOperator.EQUALS,null),EntityCondition.makeCondition("reminderDateTime",EntityOperator.LESS_THAN_EQUAL_TO,now)),EntityOperator.OR),null,null,null,false);
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError("Error while retrieving work effort event reminders: " + e);
  }
  for (  GenericValue reminder : eventReminders) {
    int repeatCount=reminder.get("repeatCount") == null ? 0 : reminder.getLong("repeatCount").intValue();
    int currentCount=reminder.get("currentCount") == null ? 0 : reminder.getLong("currentCount").intValue();
    String isPopup=reminder.getString("isPopup");
    if ("Y".equals(isPopup)) {
      if (repeatCount != 0 && repeatCount == currentCount) {
        try {
          reminder.remove();
        }
 catch (        GenericEntityException e) {
          Debug.logWarning("Error while removing work effort event reminder: " + e,module);
        }
      }
      continue;
    }
    GenericValue workEffort=null;
    try {
      workEffort=reminder.getRelatedOne("WorkEffort");
    }
 catch (    GenericEntityException e) {
      Debug.logWarning("Error while getting work effort: " + e,module);
    }
    if (workEffort == null) {
      try {
        reminder.remove();
      }
 catch (      GenericEntityException e) {
        Debug.logWarning("Error while removing work effort event reminder: " + e,module);
      }
      continue;
    }
    Locale locale=reminder.getString("localeId") == null ? Locale.getDefault() : new Locale(reminder.getString("localeId"));
    TimeZone timeZone=reminder.getString("timeZoneId") == null ? TimeZone.getDefault() : TimeZone.getTimeZone(reminder.getString("timeZoneId"));
    Map<String,Object> parameters=UtilMisc.toMap("locale",locale,"timeZone",timeZone,"workEffortId",reminder.get("workEffortId"));
    Calendar cal=UtilDateTime.toCalendar(now,timeZone,locale);
    Timestamp reminderStamp=reminder.getTimestamp("reminderDateTime");
    Date eventDateTime=workEffort.getTimestamp("estimatedStartDate");
    String tempExprId=workEffort.getString("tempExprId");
    if (UtilValidate.isNotEmpty(tempExprId)) {
      TemporalExpression temporalExpression=null;
      try {
        temporalExpression=TemporalExpressionWorker.getTemporalExpression(delegator,tempExprId);
      }
 catch (      GenericEntityException e) {
        Debug.logWarning("Error while getting temporal expression, id = " + tempExprId + ": "+ e,module);
      }
      if (temporalExpression != null) {
        eventDateTime=temporalExpression.first(cal).getTime();
        Date reminderDateTime=null;
        long recurrenceOffset=reminder.get("recurrenceOffset") == null ? 0 : reminder.getLong("recurrenceOffset").longValue();
        if (reminderStamp == null) {
          if (recurrenceOffset != 0) {
            cal.setTime(eventDateTime);
            TimeDuration duration=TimeDuration.fromLong(recurrenceOffset);
            duration.addToCalendar(cal);
            reminderDateTime=cal.getTime();
          }
 else {
            reminderDateTime=eventDateTime;
          }
        }
 else {
          reminderDateTime=new Date(reminderStamp.getTime());
        }
        if (reminderDateTime.before(now) && reminderStamp != null) {
          try {
            parameters.put("eventDateTime",new Timestamp(eventDateTime.getTime()));
            processEventReminder(ctx,reminder,parameters);
            if (repeatCount != 0 && currentCount + 1 >= repeatCount) {
              reminder.remove();
            }
 else {
              cal.setTime(reminderDateTime);
              Date newReminderDateTime=null;
              if (recurrenceOffset != 0) {
                TimeDuration duration=TimeDuration.fromLong(-recurrenceOffset);
                duration.addToCalendar(cal);
                cal.setTime(temporalExpression.next(cal).getTime());
                duration=TimeDuration.fromLong(recurrenceOffset);
                duration.addToCalendar(cal);
                newReminderDateTime=cal.getTime();
              }
 else {
                newReminderDateTime=temporalExpression.next(cal).getTime();
              }
              reminder.set("currentCount",Long.valueOf(currentCount + 1));
              reminder.set("reminderDateTime",new Timestamp(newReminderDateTime.getTime()));
              reminder.store();
            }
          }
 catch (          GenericEntityException e) {
            Debug.logWarning("Error while processing temporal expression reminder, id = " + tempExprId + ": "+ e,module);
          }
        }
 else         if (reminderStamp == null) {
          try {
            reminder.set("reminderDateTime",new Timestamp(reminderDateTime.getTime()));
            reminder.store();
          }
 catch (          GenericEntityException e) {
            Debug.logWarning("Error while processing temporal expression reminder, id = " + tempExprId + ": "+ e,module);
          }
        }
      }
      continue;
    }
    if (reminderStamp != null) {
      Date reminderDateTime=new Date(reminderStamp.getTime());
      if (reminderDateTime.before(now)) {
        try {
          parameters.put("eventDateTime",eventDateTime);
          processEventReminder(ctx,reminder,parameters);
          long repeatInterval=reminder.get("repeatInterval") == null ? 0 : reminder.getLong("repeatInterval").longValue();
          if ((repeatCount != 0 && currentCount + 1 >= repeatCount) || repeatInterval == 0) {
            reminder.remove();
          }
 else {
            cal.setTime(now);
            TimeDuration duration=TimeDuration.fromLong(repeatInterval);
            duration.addToCalendar(cal);
            reminderDateTime=cal.getTime();
            reminder.set("currentCount",Long.valueOf(currentCount + 1));
            reminder.set("reminderDateTime",new Timestamp(reminderDateTime.getTime()));
            reminder.store();
          }
        }
 catch (        GenericEntityException e) {
          Debug.logWarning("Error while processing event reminder: " + e,module);
        }
      }
    }
  }
  return ServiceUtil.returnSuccess();
}
