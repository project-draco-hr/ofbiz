{
  LocalDispatcher dispatcher=ctx.getDispatcher();
  GenericValue contactMech=reminder.getRelatedOne("ContactMech",false);
  if (contactMech != null && "EMAIL_ADDRESS".equals(contactMech.get("contactMechTypeId"))) {
    String screenLocation=UtilProperties.getPropertyValue("EventReminders","eventReminders.emailScreenWidgetLocation");
    String fromAddress=UtilProperties.getPropertyValue("EventReminders","eventReminders.emailFromAddress");
    String toAddress=contactMech.getString("infoString");
    String subject=UtilProperties.getMessage("WorkEffortUiLabels","WorkEffortEventReminder",(Locale)parameters.get("locale"));
    Map<String,Object> emailCtx=UtilMisc.toMap("sendFrom",fromAddress,"sendTo",toAddress,"subject",subject,"bodyParameters",parameters,"bodyScreenUri",screenLocation);
    try {
      dispatcher.runAsync("sendMailFromScreen",emailCtx);
    }
 catch (    Exception e) {
      Debug.logWarning("Error while emailing event reminder - workEffortId = " + reminder.get("workEffortId") + ", contactMechId = "+ reminder.get("contactMechId")+ ": "+ e,module);
    }
    return;
  }
  Debug.logWarning("Invalid event reminder contact mech, workEffortId = " + reminder.get("workEffortId") + ", contactMechId = "+ reminder.get("contactMechId"),module);
}
