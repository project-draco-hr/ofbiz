{
  GenericDelegator delegator=ctx.getDelegator();
  String roleTypeId=(String)context.get("roleTypeId");
  List validWorkEfforts=null;
  try {
    List<EntityExpr> conditionList=FastList.newInstance();
    conditionList.add(new EntityExpr("roleTypeId",EntityOperator.EQUALS,roleTypeId));
    conditionList.add(new EntityExpr("workEffortTypeId",EntityOperator.EQUALS,"EVENT"));
    conditionList.add(new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DECLINED"));
    conditionList.add(new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_DELEGATED"));
    conditionList.add(new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_COMPLETED"));
    conditionList.add(new EntityExpr("currentStatusId",EntityOperator.NOT_EQUAL,"CAL_CANCELLED"));
    EntityConditionList<EntityExpr> ecl=new EntityConditionList<EntityExpr>(conditionList,EntityOperator.AND);
    validWorkEfforts=EntityUtil.filterByDate(delegator.findList("WorkEffortAndPartyAssign",ecl,null,UtilMisc.toList("estimatedStartDate","priority"),null,false));
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
    return ServiceUtil.returnError("Error finding desired WorkEffort records: " + e.toString());
  }
  Map result=new HashMap();
  if (validWorkEfforts == null) {
    validWorkEfforts=new LinkedList();
  }
  result.put("events",validWorkEfforts);
  return result;
}
