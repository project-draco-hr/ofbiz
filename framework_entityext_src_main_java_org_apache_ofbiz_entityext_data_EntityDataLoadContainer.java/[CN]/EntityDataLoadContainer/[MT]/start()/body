{
  if ("all-tenants".equals(this.overrideDelegator)) {
    if (!EntityUtil.isMultiTenantEnabled()) {
      Debug.logWarning("Multitenant is disabled. Please enable multitenant. (e.g. general.properties --> multitenant=Y)",module);
      return true;
    }
    ContainerConfig.Configuration cfg=ContainerConfig.getConfiguration(name,configFile);
    ContainerConfig.Configuration.Property delegatorNameProp=cfg.getProperty("delegator-name");
    String delegatorName=null;
    if (delegatorNameProp == null || UtilValidate.isEmpty(delegatorNameProp.value)) {
      throw new ContainerException("Invalid delegator-name defined in container configuration");
    }
 else {
      delegatorName=delegatorNameProp.value;
    }
    Delegator delegator=DelegatorFactory.getDelegator(delegatorName);
    if (delegator == null) {
      throw new ContainerException("Invalid delegator name!");
    }
    List<EntityExpr> expr=new LinkedList<EntityExpr>();
    expr.add(EntityCondition.makeCondition("disabled",EntityOperator.EQUALS,"N"));
    expr.add(EntityCondition.makeCondition("disabled",EntityOperator.EQUALS,null));
    List<GenericValue> tenantList;
    try {
      tenantList=EntityQuery.use(delegator).from("Tenant").where(expr,EntityOperator.OR).queryList();
    }
 catch (    GenericEntityException e) {
      throw new ContainerException(e.getMessage());
    }
    for (    GenericValue tenant : tenantList) {
      this.overrideDelegator=delegator.getDelegatorName() + "#" + tenant.getString("tenantId");
      loadContainer();
    }
  }
 else {
    loadContainer();
  }
  return true;
}
