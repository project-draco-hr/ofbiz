{
  this.name=name;
  this.configFile=configFile;
  ServiceDispatcher.enableJM(false);
  ServiceDispatcher.enableJMS(false);
  ServiceDispatcher.enableSvcs(false);
  if (args != null) {
    for (    String argument : args) {
      if (argument.startsWith("-")) {
        int subIdx=1;
        if (argument.startsWith("--")) {
          subIdx=2;
        }
        argument=argument.substring(subIdx);
      }
      String argumentName;
      String argumentVal;
      if (argument.indexOf("=") != -1) {
        argumentName=argument.substring(0,argument.indexOf("="));
        argumentVal=argument.substring(argument.indexOf("=") + 1);
      }
 else {
        argumentName=argument;
        argumentVal="";
      }
      Debug.logInfo("Install Argument - " + argumentName + " = "+ argumentVal,module);
      if ("readers".equalsIgnoreCase(argumentName)) {
        this.readers=argumentVal;
      }
 else       if ("timeout".equalsIgnoreCase(argumentName)) {
        try {
          this.txTimeout=Integer.parseInt(argumentVal);
        }
 catch (        Exception e) {
          this.txTimeout=-1;
        }
      }
 else       if ("component".equalsIgnoreCase(argumentName)) {
        this.component=argumentVal;
      }
 else       if ("delegator".equalsIgnoreCase(argumentName)) {
        this.overrideDelegator=argumentVal;
      }
 else       if ("group".equalsIgnoreCase(argumentName)) {
        this.overrideGroup=argumentVal;
      }
 else       if ("file".equalsIgnoreCase(argumentName)) {
        this.files.addAll(StringUtil.split(argumentVal,","));
      }
 else       if ("dir".equalsIgnoreCase(argumentName)) {
        this.directory=argumentVal;
      }
 else       if ("createfks".equalsIgnoreCase(argumentName)) {
        this.useDummyFks="true".equalsIgnoreCase(argumentVal);
      }
 else       if ("maintainTxs".equalsIgnoreCase(argumentName)) {
        this.maintainTxs="true".equalsIgnoreCase(argumentVal);
      }
 else       if ("inserts".equalsIgnoreCase(argumentName)) {
        this.tryInserts="true".equalsIgnoreCase(argumentVal);
      }
 else       if ("repair-columns".equalsIgnoreCase(argumentName)) {
        if (UtilValidate.isEmpty(argumentVal) || "true".equalsIgnoreCase(argumentVal)) {
          repairColumns=true;
        }
      }
 else       if ("drop-pks".equalsIgnoreCase(argumentName)) {
        if (UtilValidate.isEmpty(argumentVal) || "true".equalsIgnoreCase(argumentVal)) {
          dropPks=true;
        }
      }
 else       if ("create-pks".equalsIgnoreCase(argumentName)) {
        if (UtilValidate.isEmpty(argumentVal) || "true".equalsIgnoreCase(argumentVal)) {
          createPks=true;
        }
      }
 else       if ("drop-constraints".equalsIgnoreCase(argumentName)) {
        if (UtilValidate.isEmpty(argumentVal) || "true".equalsIgnoreCase(argumentVal)) {
          dropConstraints=true;
        }
      }
 else       if ("create-constraints".equalsIgnoreCase(argumentName)) {
        if (UtilValidate.isEmpty(argumentVal) || "true".equalsIgnoreCase(argumentVal)) {
          createConstraints=true;
        }
      }
 else       if ("help".equalsIgnoreCase(argumentName)) {
        String helpStr="\n--------------------------------------\n" + "java -jar ofbiz.jar load-data [options]\n" + "-component=[name] .... only load from a specific component\n"+ "-delegator=[name] .... use the defined delegator (default-no-eca)\n"+ "-group=[name] ........ override the entity group (org.apache.ofbiz)\n"+ "-file=[path] ......... load a single file from location, several files separated by commas\n"+ "-createfks ........... create dummy (placeholder) FKs\n"+ "-maintainTxs ......... maintain timestamps in data file\n"+ "-inserts ............. use mostly inserts option\n"+ "-repair-columns ........... repair column sizes\n"+ "-drop-pks ............ drop primary keys\n"+ "-create-pks .......... create primary keys\n"+ "-drop-constraints..... drop indexes and foreign keys before loading\n"+ "-create-constraints... create indexes and foreign keys after loading (default is true w/ drop-constraints)\n"+ "-help ................ display this information\n";
        throw new ContainerException(helpStr);
      }
      if (this.readers == null && (!this.files.isEmpty() || this.directory != null)) {
        this.readers="none";
      }
    }
  }
}
