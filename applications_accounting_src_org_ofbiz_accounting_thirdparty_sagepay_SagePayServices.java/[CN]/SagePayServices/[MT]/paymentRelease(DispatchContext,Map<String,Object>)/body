{
  Debug.logInfo("SagePay - Entered paymentRelease",module);
  Debug.logInfo("SagePay paymentRelease context : " + context,module);
  Delegator delegator=ctx.getDelegator();
  Map<String,Object> resultMap=new HashMap<String,Object>();
  Map<String,String> props=buildSagePayProperties(context,delegator);
  String vendorTxCode=(String)context.get("vendorTxCode");
  String vpsTxId=(String)context.get("vpsTxId");
  String securityKey=(String)context.get("securityKey");
  String txAuthNo=(String)context.get("txAuthNo");
  HttpClient httpClient=SagePayUtil.getHttpClient();
  HttpHost host=SagePayUtil.getHost(props);
  Map<String,String> parameters=new HashMap<String,String>();
  String vpsProtocol=props.get("protocolVersion");
  String vendor=props.get("vendor");
  String txType=props.get("releaseTransType");
  parameters.put("VPSProtocol",vpsProtocol);
  parameters.put("TxType",txType);
  parameters.put("Vendor",vendor);
  parameters.put("VendorTxCode",vendorTxCode);
  parameters.put("VPSTxId",vpsTxId);
  parameters.put("SecurityKey",securityKey);
  parameters.put("TxAuthNo",txAuthNo);
  try {
    String successMessage=null;
    HttpPost httpPost=SagePayUtil.getHttpPost(props.get("releaseUrl"),parameters);
    HttpResponse response=httpClient.execute(host,httpPost);
    Map<String,String> responseData=SagePayUtil.getResponseData(response);
    String status=responseData.get("Status");
    String statusDetail=responseData.get("StatusDetail");
    resultMap.put("status",status);
    resultMap.put("statusDetail",statusDetail);
    if ("OK".equals(status)) {
      successMessage="Payment Released";
    }
    if ("MALFORMED".equals(status)) {
      successMessage="Release request not formed properly or parameters missing";
    }
    if ("INVALID".equals(status)) {
      successMessage="Invalid information passed in parameters";
    }
    if ("ERROR".equals(status)) {
      successMessage="Problem at SagePay";
    }
    resultMap.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
    resultMap.put(ModelService.SUCCESS_MESSAGE,successMessage);
  }
 catch (  UnsupportedEncodingException uee) {
    String errorMsg="Error occured in encoding parameters for HttpPost (" + uee.getMessage() + ")";
    Debug.logError(uee,errorMsg,module);
    resultMap=ServiceUtil.returnError(errorMsg);
  }
catch (  ClientProtocolException cpe) {
    String errorMsg="Error occured in HttpClient execute(" + cpe.getMessage() + ")";
    Debug.logError(cpe,errorMsg,module);
    resultMap=ServiceUtil.returnError(errorMsg);
  }
catch (  IOException ioe) {
    String errorMsg="Error occured in HttpClient execute or getting response (" + ioe.getMessage() + ")";
    Debug.logError(ioe,errorMsg,module);
    resultMap=ServiceUtil.returnError(errorMsg);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
  return resultMap;
}
