{
  PosTransaction trans=PosTransaction.getCurrentTx(pos.getSession());
  if (!trans.isOpen()) {
    pos.showDialog("dialog/error/terminalclosed");
    return;
  }
  if (state == null) {
    state=trans.getTerminalState();
  }
  BigDecimal checkTotal=ZERO;
  BigDecimal cashTotal=ZERO;
  BigDecimal gcTotal=ZERO;
  BigDecimal ccTotal=ZERO;
  BigDecimal othTotal=ZERO;
  BigDecimal total=ZERO;
  boolean beganTransaction=false;
  try {
    beganTransaction=TransactionUtil.begin();
    Delegator delegator=pos.getSession().getDelegator();
    EntityListIterator eli=null;
    try {
      eli=EntityQuery.use(delegator).from("OrderHeaderAndPaymentPref").where("originFacilityId",trans.getFacilityId(),"terminalId",trans.getTerminalId()).queryIterator();
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,module);
    }
    Timestamp dayStart=state.getTimestamp("openedDate");
    Timestamp dayEnd=state.getTimestamp("closedDate");
    if (dayEnd == null) {
      dayEnd=UtilDateTime.nowTimestamp();
    }
    if (eli != null) {
      GenericValue ohpp;
      while (((ohpp=eli.next()) != null)) {
        Timestamp orderDate=ohpp.getTimestamp("orderDate");
        if (orderDate.after(dayStart) && orderDate.before(dayEnd)) {
          String pmt=ohpp.getString("paymentMethodTypeId");
          BigDecimal amt=ohpp.getBigDecimal("maxAmount");
          if ("CASH".equals(pmt)) {
            cashTotal=cashTotal.add(amt);
          }
 else           if ("PERSONAL_CHECK".equals(pmt)) {
            checkTotal=checkTotal.add(amt);
          }
 else           if ("GIFT_CARD".equals(pmt)) {
            gcTotal=gcTotal.add(amt);
          }
 else           if ("CREDIT_CARD".equals(pmt)) {
            ccTotal=ccTotal.add(amt);
          }
 else {
            othTotal=othTotal.add(amt);
          }
          total=total.add(amt);
        }
      }
      try {
        eli.close();
      }
 catch (      GenericEntityException e) {
        Debug.logWarning(e,"Trouble closing ELI",module);
        pos.showDialog("dialog/error/exception",e.getMessage());
      }
    }
  }
 catch (  GenericTransactionException e) {
    Debug.logError(e,module);
    try {
      TransactionUtil.rollback(beganTransaction,e.getMessage(),e);
    }
 catch (    GenericTransactionException e2) {
      Debug.logError(e2,"Unable to rollback transaction",module);
      pos.showDialog("dialog/error/exception",e2.getMessage());
    }
    pos.showDialog("dialog/error/exception",e.getMessage());
  }
 finally {
    try {
      TransactionUtil.commit(beganTransaction);
    }
 catch (    GenericTransactionException e) {
      Debug.logError(e,"Unable to commit transaction",module);
      pos.showDialog("dialog/error/exception",e.getMessage());
    }
  }
  Map<String,String> reportMap=FastMap.newInstance();
  String reportTemplate="totals.txt";
  reportMap.put("term",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosTerm",Locale.getDefault()),20,false,' '));
  reportMap.put("draw",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosDraw",Locale.getDefault()),20,false,' '));
  reportMap.put("clerk",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosClerk",Locale.getDefault()),20,false,' '));
  reportMap.put("total_report",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosTotalReport",Locale.getDefault()),20,false,' '));
  reportMap.put("cashTitle",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosCash",Locale.getDefault()),20,false,' '));
  reportMap.put("checkTitle",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosCheck",Locale.getDefault()),20,false,' '));
  reportMap.put("giftCardTitle",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosGiftCard",Locale.getDefault()),20,false,' '));
  reportMap.put("creditCardTitle",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosCreditCard",Locale.getDefault()),20,false,' '));
  reportMap.put("otherTitle",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosOther",Locale.getDefault()),20,false,' '));
  reportMap.put("grossSalesTitle",UtilFormatOut.padString(UtilProperties.getMessage(PosTransaction.resource,"PosGrossSales",Locale.getDefault()),20,false,' '));
  reportMap.put("+/-",UtilFormatOut.padString("+/-",20,false,' '));
  reportMap.put("spacer",UtilFormatOut.padString("",20,false,' '));
  reportMap.put("cashTotal",UtilFormatOut.padString(UtilFormatOut.formatPrice(cashTotal),8,false,' '));
  reportMap.put("checkTotal",UtilFormatOut.padString(UtilFormatOut.formatPrice(checkTotal),8,false,' '));
  reportMap.put("ccTotal",UtilFormatOut.padString(UtilFormatOut.formatPrice(ccTotal),8,false,' '));
  reportMap.put("gcTotal",UtilFormatOut.padString(UtilFormatOut.formatPrice(gcTotal),8,false,' '));
  reportMap.put("otherTotal",UtilFormatOut.padString(UtilFormatOut.formatPrice(othTotal),8,false,' '));
  reportMap.put("grossTotal",UtilFormatOut.padString(UtilFormatOut.formatPrice(total),8,false,' '));
  if (runBalance) {
    BigDecimal cashEnd=state.getBigDecimal("actualEndingCash");
    BigDecimal checkEnd=state.getBigDecimal("actualEndingCheck");
    BigDecimal ccEnd=state.getBigDecimal("actualEndingCc");
    BigDecimal gcEnd=state.getBigDecimal("actualEndingGc");
    BigDecimal othEnd=state.getBigDecimal("actualEndingOther");
    BigDecimal grossEnd=cashEnd.add(checkEnd.add(ccEnd.add(gcEnd.add(othEnd))));
    reportMap.put("cashEnd",UtilFormatOut.padString(UtilFormatOut.formatPrice(cashEnd),8,false,' '));
    reportMap.put("checkEnd",UtilFormatOut.padString(UtilFormatOut.formatPrice(checkEnd),8,false,' '));
    reportMap.put("ccEnd",UtilFormatOut.padString(UtilFormatOut.formatPrice(ccEnd),8,false,' '));
    reportMap.put("gcEnd",UtilFormatOut.padString(UtilFormatOut.formatPrice(gcEnd),8,false,' '));
    reportMap.put("otherEnd",UtilFormatOut.padString(UtilFormatOut.formatPrice(othEnd),8,false,' '));
    reportMap.put("grossEnd",UtilFormatOut.padString(UtilFormatOut.formatPrice(grossEnd),8,false,' '));
    BigDecimal cashDiff=cashEnd.subtract(cashTotal);
    BigDecimal checkDiff=checkEnd.subtract(checkTotal);
    BigDecimal ccDiff=ccEnd.subtract(ccTotal);
    BigDecimal gcDiff=gcEnd.subtract(gcTotal);
    BigDecimal othDiff=othEnd.subtract(othTotal);
    BigDecimal grossDiff=cashDiff.add(checkDiff.add(ccDiff.add(gcDiff.add(othDiff))));
    reportMap.put("cashDiff",UtilFormatOut.padString(UtilFormatOut.formatPrice(cashDiff),8,false,' '));
    reportMap.put("checkDiff",UtilFormatOut.padString(UtilFormatOut.formatPrice(checkDiff),8,false,' '));
    reportMap.put("ccDiff",UtilFormatOut.padString(UtilFormatOut.formatPrice(ccDiff),8,false,' '));
    reportMap.put("gcDiff",UtilFormatOut.padString(UtilFormatOut.formatPrice(gcDiff),8,false,' '));
    reportMap.put("otherDiff",UtilFormatOut.padString(UtilFormatOut.formatPrice(othDiff),8,false,' '));
    reportMap.put("grossDiff",UtilFormatOut.padString(UtilFormatOut.formatPrice(grossDiff),8,false,' '));
    reportTemplate="balance.txt";
  }
  Receipt receipt=DeviceLoader.receipt;
  if (receipt.isEnabled()) {
    receipt.printReport(trans,reportTemplate,reportMap);
  }
}
