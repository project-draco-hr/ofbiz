{
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Delegator delegator=dctx.getDelegator();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  GenericValue paymentPref=(GenericValue)context.get("orderPaymentPreference");
  OrderReadHelper orh=new OrderReadHelper(delegator,paymentPref.getString("orderId"));
  Locale locale=(Locale)context.get("locale");
  GenericValue payPalPaymentSetting=getPaymentMethodGatewayPayPal(dctx,context,null);
  GenericValue payPalPaymentMethod=null;
  try {
    payPalPaymentMethod=paymentPref.getRelatedOne("PaymentMethod",false);
    payPalPaymentMethod=payPalPaymentMethod.getRelatedOne("PayPalPaymentMethod",false);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  BigDecimal processAmount=paymentPref.getBigDecimal("maxAmount");
  NVPEncoder encoder=new NVPEncoder();
  encoder.add("METHOD","DoExpressCheckoutPayment");
  encoder.add("TOKEN",payPalPaymentMethod.getString("expressCheckoutToken"));
  encoder.add("PAYMENTACTION","Order");
  encoder.add("PAYERID",payPalPaymentMethod.getString("payerId"));
  encoder.add("AMT",processAmount.setScale(2).toPlainString());
  encoder.add("CURRENCYCODE",orh.getCurrency());
  BigDecimal grandTotal=orh.getOrderGrandTotal();
  BigDecimal shippingTotal=orh.getShippingTotal().setScale(2,BigDecimal.ROUND_HALF_UP);
  BigDecimal taxTotal=orh.getTaxTotal().setScale(2,BigDecimal.ROUND_HALF_UP);
  BigDecimal subTotal=grandTotal.subtract(shippingTotal).subtract(taxTotal).setScale(2,BigDecimal.ROUND_HALF_UP);
  encoder.add("ITEMAMT",subTotal.toPlainString());
  encoder.add("SHIPPINGAMT",shippingTotal.toPlainString());
  encoder.add("TAXAMT",taxTotal.toPlainString());
  NVPDecoder decoder=null;
  try {
    decoder=sendNVPRequest(payPalPaymentSetting,encoder);
  }
 catch (  PayPalException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (decoder == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPayPalUnknownError",locale));
  }
  Map<String,String> errorMessages=getErrorMessageMap(decoder);
  if (UtilValidate.isNotEmpty(errorMessages)) {
    if (errorMessages.containsKey("10417")) {
      boolean retry=context.get("_RETRY_") == null || (Boolean)context.get("_RETRY_");
      if (retry) {
        context.put("_RETRY_",false);
        return PayPalServices.doExpressCheckout(dctx,context);
      }
    }
    return ServiceUtil.returnError(UtilMisc.toList(errorMessages.values()));
  }
  Map<String,Object> inMap=new HashMap<String,Object>();
  inMap.put("userLogin",userLogin);
  inMap.put("paymentMethodId",payPalPaymentMethod.get("paymentMethodId"));
  inMap.put("transactionId",decoder.get("TRANSACTIONID"));
  Map<String,Object> outMap=null;
  try {
    outMap=dispatcher.runSync("updatePayPalPaymentMethod",inMap);
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(e.getMessage());
  }
  if (ServiceUtil.isError(outMap)) {
    Debug.logError(ServiceUtil.getErrorMessage(outMap),module);
    return outMap;
  }
  return ServiceUtil.returnSuccess();
}
