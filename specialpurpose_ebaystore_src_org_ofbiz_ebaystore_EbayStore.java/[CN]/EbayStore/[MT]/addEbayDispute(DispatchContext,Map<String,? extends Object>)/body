{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productStoreId=(String)context.get("productStoreId");
  List soldItems=FastList.newInstance();
  try {
    String itemId=(String)context.get("itemId");
    String transactionId=(String)context.get("transactionId");
    DisputeReasonCodeType drct=EbayStore.getEbayDisputeReasonCodeType((String)context.get("disputeReasonCodeType"));
    DisputeExplanationCodeType dect=EbayStore.getEbayDisputeExplanationCodeType((String)context.get("disputeExplanationCodeType"));
    DetailLevelCodeType[] detailLevels=new DetailLevelCodeType[]{DetailLevelCodeType.RETURN_ALL,DetailLevelCodeType.ITEM_RETURN_ATTRIBUTES,DetailLevelCodeType.ITEM_RETURN_DESCRIPTION};
    ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
    AddDisputeCall api=new AddDisputeCall(apiContext);
    api.setDetailLevel(detailLevels);
    api.setItemID(itemId);
    api.setTransactionID(transactionId);
    api.setDisputeExplanation(dect);
    api.setDisputeReason(drct);
    String disputeId=api.addDispute();
    result.put("disputeId",disputeId);
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
