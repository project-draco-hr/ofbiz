{
  Map<String,Object> cols=FastMap.newInstance();
  cols.put("itemId",item.getItemID() != null ? item.getItemID() : "");
  cols.put("title",item.getTitle() != null ? item.getTitle() : "");
  SellingStatusType sst=item.getSellingStatus();
  double currentPrice=0;
  int bidCount=0;
  double reservPrice=0;
  if (UtilValidate.isNotEmpty(sst)) {
    AmountType amt=sst.getCurrentPrice();
    currentPrice=amt != null ? (new Double(amt.getValue())) : 0;
    bidCount=sst.getBidCount() != null ? sst.getBidCount() : 0;
  }
  cols.put("buyItNowPrice",item.getBuyItNowPrice().getValue());
  cols.put("currentPrice",currentPrice);
  cols.put("bidCount",bidCount);
  java.util.Calendar startTime=item.getListingDetails() == null ? null : item.getListingDetails().getStartTime();
  cols.put("startTime",startTime != null ? eBayUtil.toAPITimeString(startTime.getTime()) : "");
  Integer quantity=item.getQuantity();
  String quantityStr=null;
  if (UtilValidate.isNotEmpty(quantity))   quantityStr=quantity.toString();
  cols.put("quantity",quantityStr);
  cols.put("listingType",item.getListingType().value());
  cols.put("viewItemURL",item.getListingDetails().getViewItemURL());
  cols.put("SKU",item.getSKU());
  if (UtilValidate.isNotEmpty(item.getReservePrice()))   reservPrice=item.getReservePrice().getValue();
  cols.put("reservePrice",reservPrice);
  cols.put("hitCount",item.getHitCount() != null ? item.getHitCount() : 0);
  return cols;
}
