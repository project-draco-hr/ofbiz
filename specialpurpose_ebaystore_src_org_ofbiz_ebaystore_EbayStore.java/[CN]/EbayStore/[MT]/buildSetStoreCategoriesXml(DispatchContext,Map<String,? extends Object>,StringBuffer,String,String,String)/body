{
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  try {
    Document storeDocument=UtilXml.makeEmptyXmlDocument("SetStoreCategoriesRequest");
    Element storeRequestElem=storeDocument.getDocumentElement();
    storeRequestElem.setAttribute("xmlns","urn:ebay:apis:eBLBaseComponents");
    appendRequesterCredentials(storeRequestElem,storeDocument,token);
    UtilXml.addChildElementValue(storeRequestElem,"DetailLevel","ReturnAll",storeDocument);
    UtilXml.addChildElementValue(storeRequestElem,"Version","643",storeDocument);
    UtilXml.addChildElementValue(storeRequestElem,"Action","Add",storeDocument);
    Element StoreCategoriesElem=UtilXml.addChildElement(storeRequestElem,"StoreCategories",storeDocument);
    GenericValue category=null;
    if (UtilValidate.isNotEmpty(context.get("prodCatalogId"))) {
      category=delegator.findByPrimaryKeyCache("ProductCategory",UtilMisc.toMap("productCategoryId",productCategoryId));
    }
    String categoryName=category.getString("productCategoryId").toString();
    if (category.getString("categoryName").toString() != null) {
      categoryName=category.getString("categoryName").toString();
    }
    Element customCategoryElem=UtilXml.addChildElement(StoreCategoriesElem,"CustomCategory",storeDocument);
    UtilXml.addChildElementValue(customCategoryElem,"Name",categoryName,storeDocument);
    dataStoreXml.append(UtilXml.writeXmlDocument(storeDocument));
  }
 catch (  Exception e) {
    Debug.logError("Exception during building data to eBay: " + e.getMessage(),module);
    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"productsExportToEbay.exceptionDuringBuildingDataItemsToEbay",locale));
  }
  return ServiceUtil.returnSuccess();
}
