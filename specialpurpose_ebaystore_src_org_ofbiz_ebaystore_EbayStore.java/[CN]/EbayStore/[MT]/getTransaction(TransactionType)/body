{
  Map<String,Object> cols=FastMap.newInstance();
  ItemType item=transaction.getItem();
  String itemId=null;
  String title=null;
  String SKU=null;
  if (UtilValidate.isNotEmpty(item)) {
    itemId=item.getItemID();
    title=item.getTitle();
    SKU=item.getSKU();
  }
  cols.put("itemId",itemId);
  cols.put("title",title);
  cols.put("SKU",SKU);
  UserType buyer=transaction.getBuyer();
  String user=null;
  if (UtilValidate.isNotEmpty(buyer))   user=buyer.getUserID();
  cols.put("buyer",user);
  cols.put("listingType",item.getListingType().value());
  Date paidTime=null;
  String checkoutStatus=null;
  String eBayPaymentStatus=null;
  String completeStatus=null;
  String buyerPaidStatus=null;
  Date shippedTime=null;
  String unpaidItemStatus=null;
  String transactionId=null;
  double totalPrice=0;
  double transactionPrice=0;
  Date createdDate=null;
  String sellerPaidStatus=null;
  String orderId=null;
  double adjustmentAmount=0;
  double amountPaid=0;
  if (UtilValidate.isNotEmpty(transaction.getStatus())) {
    if (UtilValidate.isNotEmpty(transaction.getStatus().getCheckoutStatus())) {
      checkoutStatus=transaction.getStatus().getCheckoutStatus().value();
    }
    if (UtilValidate.isNotEmpty(transaction.getStatus().getEBayPaymentStatus())) {
      eBayPaymentStatus=transaction.getStatus().getEBayPaymentStatus().value();
    }
    if (UtilValidate.isNotEmpty(transaction.getStatus().getCompleteStatus())) {
      completeStatus=transaction.getStatus().getCompleteStatus().value();
    }
  }
  if (UtilValidate.isNotEmpty(transaction.getBuyerPaidStatus())) {
    buyerPaidStatus=transaction.getBuyerPaidStatus().value();
  }
  if (UtilValidate.isNotEmpty(transaction.getPaidTime())) {
    paidTime=transaction.getPaidTime().getTime();
  }
  if (UtilValidate.isNotEmpty(transaction.getShippedTime())) {
    shippedTime=transaction.getShippedTime().getTime();
  }
  if (UtilValidate.isNotEmpty(transaction.getTransactionID())) {
    transactionId=transaction.getTransactionID().toString();
  }
  if (UtilValidate.isNotEmpty(transaction.getTotalPrice())) {
    totalPrice=transaction.getTotalPrice().getValue();
  }
  if (UtilValidate.isNotEmpty(transaction.getTransactionPrice())) {
    transactionPrice=transaction.getTransactionPrice().getValue();
  }
  if (UtilValidate.isNotEmpty(transaction.getCreatedDate())) {
    createdDate=transaction.getCreatedDate().getTime();
  }
  if (UtilValidate.isNotEmpty(transaction.getSellerPaidStatus())) {
    sellerPaidStatus=transaction.getSellerPaidStatus().value();
  }
  if (UtilValidate.isNotEmpty(transaction.getContainingOrder())) {
    if (UtilValidate.isNotEmpty(transaction.getContainingOrder().getCheckoutStatus())) {
      checkoutStatus=transaction.getContainingOrder().getCheckoutStatus().getStatus().value();
    }
    orderId=transaction.getContainingOrder().getOrderID();
  }
  if (UtilValidate.isNotEmpty(transaction.getAdjustmentAmount())) {
    adjustmentAmount=transaction.getAdjustmentAmount().getValue();
  }
  if (UtilValidate.isNotEmpty(transaction.getAmountPaid())) {
    amountPaid=transaction.getAmountPaid().getValue();
  }
  cols.put("amountPaid",amountPaid);
  cols.put("adjustmentAmount",adjustmentAmount);
  cols.put("orderId",orderId);
  cols.put("checkoutStatus",checkoutStatus);
  cols.put("eBayPaymentStatus",eBayPaymentStatus);
  cols.put("completeStatus",completeStatus);
  cols.put("buyerPaidStatus",buyerPaidStatus);
  cols.put("paidTime",paidTime);
  cols.put("shippedTime",shippedTime);
  cols.put("quantity",transaction.getQuantityPurchased());
  cols.put("transactionId",transactionId);
  cols.put("transactionPrice",transactionPrice);
  cols.put("totalPrice",totalPrice);
  cols.put("createdDate",createdDate);
  cols.put("sellerPaidStatus",sellerPaidStatus);
  return cols;
}
