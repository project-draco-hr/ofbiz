{
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=dctx.getDelegator();
  Map<String,Object> result=FastMap.newInstance();
  GetSellingManagerInventoryRequestType req=new GetSellingManagerInventoryRequestType();
  GetSellingManagerInventoryResponseType resp=null;
  if (context.get("productStoreId") != null) {
    GetSellingManagerInventoryCall call=new GetSellingManagerInventoryCall(EbayStoreHelper.getApiContext((String)context.get("productStoreId"),locale,delegator));
    try {
      Map<String,Object> ebayResp=FastMap.newInstance();
      SellingManagerProductType[] returnedSellingManagerProductType=null;
      resp=(GetSellingManagerInventoryResponseType)call.execute(req);
      if (resp != null && "SUCCESS".equals(resp.getAck().toString())) {
        returnedSellingManagerProductType=resp.getSellingManagerProduct();
        for (int i=0; i < returnedSellingManagerProductType.length; i++) {
          SellingManagerProductInventoryStatusType sellingProductInventory=returnedSellingManagerProductType[i].getSellingManagerProductInventoryStatus();
          SellingManagerProductDetailsType prodDetailType=returnedSellingManagerProductType[i].getSellingManagerProductDetails();
          Long productID=(Long)prodDetailType.getProductID();
          int qty=prodDetailType.getQuantityAvailable();
          if (qty == 0) {
            SellingManagerTemplateDetailsArrayType sellingTempArr=returnedSellingManagerProductType[i].getSellingManagerTemplateDetailsArray();
            SellingManagerTemplateDetailsType[] selllingTempType=null;
            if (UtilValidate.isNotEmpty(sellingTempArr)) {
              selllingTempType=sellingTempArr.getSellingManagerTemplateDetails();
            }
            if (selllingTempType.length > 0) {
              for (int j=0; j < selllingTempType.length; j++) {
                Long longTemplete=Long.parseLong(selllingTempType[j].getSaleTemplateID());
                DeleteSellingManagerTemplateCall tcall=new DeleteSellingManagerTemplateCall(EbayStoreHelper.getApiContext((String)context.get("productStoreId"),locale,delegator));
                DeleteSellingManagerTemplateRequestType treq=new DeleteSellingManagerTemplateRequestType();
                DeleteSellingManagerTemplateResponseType tresp=null;
                treq.setSaleTemplateID(longTemplete);
                tresp=(DeleteSellingManagerTemplateResponseType)tcall.execute(treq);
                if (tresp != null && "SUCCESS".equals(tresp.getAck().toString())) {
                  ebayResp.put("TemplateID",tresp.getDeletedSaleTemplateID());
                  ebayResp.put("TemplateName",tresp.getDeletedSaleTemplateName());
                  result.put("itemBlocked",ebayResp);
                }
              }
            }
          }
        }
        result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);
        if (UtilValidate.isNotEmpty(ebayResp.get("TemplateID"))) {
          result.put(ModelService.SUCCESS_MESSAGE,"block " + ebayResp.get("TemplateID") + " out of stock success..");
        }
 else {
          result.put(ModelService.SUCCESS_MESSAGE,"no item out of stock");
        }
      }
    }
 catch (    ApiException e) {
      e.printStackTrace();
    }
catch (    SdkSoapException e) {
      e.printStackTrace();
    }
catch (    SdkException e) {
      e.printStackTrace();
    }
  }
  return result;
}
