{
  Map<String,Object> result=FastMap.newInstance();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Delegator delegator=dctx.getDelegator();
  Locale locale=(Locale)context.get("locale");
  String productStoreId=(String)context.get("productStoreId");
  String filter=(String)context.get("filter");
  String itemId=(String)context.get("itemId");
  String buyerId=(String)context.get("buyerId");
  String listingType=(String)context.get("listingType");
  List soldItems=FastList.newInstance();
  try {
    Map<String,Object> inMap=FastMap.newInstance();
    inMap.put("productStoreId",productStoreId);
    inMap.put("userLogin",userLogin);
    Map<String,Object> resultUser=dispatcher.runSync("getEbayStoreUser",inMap);
    String userID=(String)resultUser.get("userLoginId");
    ApiContext apiContext=EbayStoreHelper.getApiContext(productStoreId,locale,delegator);
    GetSellingManagerSoldListingsCall sellingManagerSoldListings=new GetSellingManagerSoldListingsCall(apiContext);
    if (UtilValidate.isNotEmpty(filter)) {
      SellingManagerSoldListingsPropertyTypeCodeType[] filterObject={SellingManagerSoldListingsPropertyTypeCodeType.valueOf(filter)};
      sellingManagerSoldListings.setFilter(filterObject);
    }
    if (UtilValidate.isNotEmpty(itemId)) {
      SellingManagerSearchType search=new SellingManagerSearchType();
      search.setSearchType(SellingManagerSearchTypeCodeType.ITEM_ID);
      search.setSearchValue(itemId);
      sellingManagerSoldListings.setSearch(search);
    }
    if (UtilValidate.isNotEmpty(buyerId)) {
      SellingManagerSearchType search=new SellingManagerSearchType();
      search.setSearchType(SellingManagerSearchTypeCodeType.BUYER_USER_ID);
      search.setSearchValue(buyerId);
      sellingManagerSoldListings.setSearch(search);
    }
    sellingManagerSoldListings.getSellingManagerSoldListings();
    SellingManagerSoldOrderType[] sellingManagerSoldOrders=sellingManagerSoldListings.getReturnedSaleRecord();
    if (UtilValidate.isNotEmpty(sellingManagerSoldOrders)) {
      int soldOrderLength=sellingManagerSoldOrders.length;
      for (int i=0; i < soldOrderLength; i++) {
        SellingManagerSoldOrderType sellingManagerSoldOrder=sellingManagerSoldOrders[i];
        if (sellingManagerSoldOrder != null) {
          SellingManagerSoldTransactionType[] sellingManagerSoldTransactions=sellingManagerSoldOrder.getSellingManagerSoldTransaction();
          int sellingManagerSoldTransactionLength=sellingManagerSoldTransactions.length;
          for (int j=0; j < sellingManagerSoldTransactionLength; j++) {
            Map<String,Object> entry=FastMap.newInstance();
            SellingManagerSoldTransactionType sellingManagerSoldTransaction=sellingManagerSoldTransactions[j];
            entry.put("itemId",sellingManagerSoldTransaction.getItemID());
            entry.put("title",sellingManagerSoldTransaction.getItemTitle());
            entry.put("transactionId",sellingManagerSoldTransaction.getTransactionID().toString());
            entry.put("quantity",sellingManagerSoldTransaction.getQuantitySold());
            entry.put("listingType",sellingManagerSoldTransaction.getListingType().value());
            String buyer=null;
            if (sellingManagerSoldOrder.getBuyerID() != null) {
              buyer=sellingManagerSoldOrder.getBuyerID();
            }
            entry.put("buyer",buyer);
            String buyerEmail=null;
            if (sellingManagerSoldOrder.getBuyerID() != null) {
              buyerEmail=sellingManagerSoldOrder.getBuyerEmail();
            }
            entry.put("buyerEmail",buyerEmail);
            GetItemCall api=new GetItemCall(apiContext);
            api.setItemID(sellingManagerSoldTransaction.getItemID());
            DetailLevelCodeType[] detailLevels=new DetailLevelCodeType[]{DetailLevelCodeType.RETURN_ALL,DetailLevelCodeType.ITEM_RETURN_ATTRIBUTES,DetailLevelCodeType.ITEM_RETURN_DESCRIPTION};
            api.setDetailLevel(detailLevels);
            ItemType itemType=api.getItem();
            String itemUrl=null;
            if (itemType.getListingDetails() != null) {
              itemUrl=itemType.getListingDetails().getViewItemURL();
            }
            entry.put("itemUrl",itemUrl);
            String itemUrlNatural=null;
            if (itemType.getListingDetails() != null) {
              itemUrlNatural=itemType.getListingDetails().getViewItemURLForNaturalSearch();
            }
            entry.put("itemUrlNatural",itemUrlNatural);
            String unpaidItemStatus=null;
            if (sellingManagerSoldOrder.getUnpaidItemStatus() != null) {
              unpaidItemStatus=sellingManagerSoldOrder.getUnpaidItemStatus().value();
            }
            entry.put("unpaidItemStatus",unpaidItemStatus);
            Date creationTime=null;
            if (sellingManagerSoldOrder.getCreationTime() != null) {
              creationTime=sellingManagerSoldOrder.getCreationTime().getTime();
            }
            entry.put("creationTime",creationTime);
            double totalAmount=0;
            if (sellingManagerSoldOrder.getTotalAmount() != null) {
              totalAmount=sellingManagerSoldOrder.getTotalAmount().getValue();
            }
            entry.put("totalAmount",totalAmount);
            if (sellingManagerSoldOrder.getSalePrice() != null) {
              entry.put("salePrice",sellingManagerSoldOrder.getSalePrice().getValue());
            }
            Date paidTime=null;
            String checkoutStatus=null;
            String shippedStatus=null;
            Date shippedTime=null;
            if (sellingManagerSoldOrder.getOrderStatus() != null) {
              if (sellingManagerSoldOrder.getOrderStatus().getPaidTime() != null) {
                paidTime=sellingManagerSoldOrder.getOrderStatus().getPaidTime().getTime();
              }
              if (sellingManagerSoldOrder.getOrderStatus().getCheckoutStatus() != null) {
                checkoutStatus=sellingManagerSoldOrder.getOrderStatus().getCheckoutStatus().value();
              }
              if (sellingManagerSoldOrder.getOrderStatus().getShippedStatus() != null) {
                shippedStatus=sellingManagerSoldOrder.getOrderStatus().getShippedStatus().value();
              }
              if (sellingManagerSoldOrder.getOrderStatus().getShippedTime() != null) {
                shippedTime=sellingManagerSoldOrder.getOrderStatus().getShippedTime().getTime();
              }
            }
            entry.put("paidTime",paidTime);
            entry.put("checkoutStatus",checkoutStatus);
            entry.put("shippedStatus",shippedStatus);
            entry.put("shippedTime",shippedTime);
            soldItems.add(entry);
          }
        }
      }
    }
    result.put("soldItems",soldItems);
  }
 catch (  Exception e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  return result;
}
