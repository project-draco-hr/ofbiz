{
  Map<String,Object> orderMap=FastMap.newInstance();
  if (UtilValidate.isNotEmpty(transaction)) {
    String orderId=null;
    String externalId=null;
    String createdDate=null;
    String userId=null;
    String itemId=null;
    String title=null;
    String SKU=null;
    int quantityPurchased=0;
    double transactionPrice=0;
    String buyer=null;
    String eiasTokenBuyer=null;
    String emailBuyer=null;
    String checkoutStatus=null;
    String paymentMethod=null;
    String viewItemURL=null;
    String currency=null;
    double buyItNowPrice=0;
    double amountPaid=0.0;
    String shippingService=null;
    double shippingServiceCost=0.0;
    double shippingTotalAdditionalCost=0.0;
    String shippedTime=null;
    String paidTime=null;
    double salesTaxAmount=0.0;
    float salesTaxPercent=0;
    Map<String,Object> itemSold=FastMap.newInstance();
    Map<String,Object> address=FastMap.newInstance();
    if (UtilValidate.isNotEmpty(transaction.getItem())) {
      ItemType item=transaction.getItem();
      itemId=item.getItemID();
      title=item.getTitle();
      SKU=item.getSKU();
      buyItNowPrice=item.getBuyItNowPrice().getValue();
      currency=item.getCurrency().value();
      if (UtilValidate.isNotEmpty(item.getListingDetails())) {
        viewItemURL=item.getListingDetails().getViewItemURL();
      }
    }
    externalId=transaction.getTransactionID();
    if ("0".equals(externalId)) {
      externalId="EBS_" + itemId;
    }
 else {
      externalId="EBS_" + externalId;
    }
    if (UtilValidate.isNotEmpty(transaction.getCreatedDate())) {
      createdDate=EbayStoreHelper.convertDate(transaction.getCreatedDate().getTime(),locale);
    }
    if (UtilValidate.isNotEmpty(transaction.getShippedTime())) {
      shippedTime=EbayStoreHelper.convertDate(transaction.getShippedTime().getTime(),locale);
    }
    if (UtilValidate.isNotEmpty(transaction.getPaidTime())) {
      paidTime=EbayStoreHelper.convertDate(transaction.getPaidTime().getTime(),locale);
    }
    if (UtilValidate.isNotEmpty(transaction.getQuantityPurchased())) {
      quantityPurchased=transaction.getQuantityPurchased();
    }
    if (UtilValidate.isNotEmpty(transaction.getTransactionPrice())) {
      transactionPrice=transaction.getTransactionPrice().getValue();
    }
    if (UtilValidate.isNotEmpty(transaction.getAmountPaid())) {
      amountPaid=transaction.getAmountPaid().getValue();
    }
    if (UtilValidate.isNotEmpty(transaction.getBuyer())) {
      UserType getBuyer=transaction.getBuyer();
      buyer=transaction.getBuyer().getUserID();
      if (UtilValidate.isNotEmpty(getBuyer.getEmail())) {
        emailBuyer=getBuyer.getEmail();
      }
      if (UtilValidate.isNotEmpty(getBuyer.getEIASToken())) {
        eiasTokenBuyer=getBuyer.getEIASToken();
      }
      if (UtilValidate.isNotEmpty(getBuyer.getBuyerInfo().getShippingAddress())) {
        userId=getBuyer.getUserID();
        AddressType shipping=getBuyer.getBuyerInfo().getShippingAddress();
        address=getShippingDetail(shipping,locale);
      }
    }
    if (UtilValidate.isNotEmpty(transaction.getStatus())) {
      if (UtilValidate.isNotEmpty(transaction.getStatus().getPaymentMethodUsed()))       paymentMethod=transaction.getStatus().getPaymentMethodUsed().value();
      if (UtilValidate.isNotEmpty(transaction.getStatus().getCheckoutStatus()))       checkoutStatus=transaction.getStatus().getCheckoutStatus().value();
    }
    if (UtilValidate.isNotEmpty(transaction.getShippingServiceSelected())) {
      ShippingServiceOptionsType shippingServiceSelect=transaction.getShippingServiceSelected();
      if (UtilValidate.isNotEmpty(shippingServiceSelect.getShippingService())) {
        shippingService=shippingServiceSelect.getShippingService();
      }
      if (UtilValidate.isNotEmpty(shippingServiceSelect.getShippingServiceCost())) {
        shippingServiceCost=shippingServiceSelect.getShippingServiceCost().getValue();
      }
      if (UtilValidate.isNotEmpty(shippingServiceSelect.getShippingServiceAdditionalCost())) {
        shippingTotalAdditionalCost=shippingServiceSelect.getShippingServiceAdditionalCost().getValue();
      }
    }
    if (UtilValidate.isNotEmpty(transaction.getShippingDetails().getSalesTax().getSalesTaxAmount())) {
      salesTaxAmount=transaction.getShippingDetails().getSalesTax().getSalesTaxAmount().getValue();
    }
    if (UtilValidate.isNotEmpty(transaction.getShippingDetails().getSalesTax().getSalesTaxPercent())) {
      salesTaxPercent=transaction.getShippingDetails().getSalesTax().getSalesTaxPercent();
    }
    orderMap.put("externalId",externalId);
    orderMap.put("itemId",itemId);
    orderMap.put("title",title);
    orderMap.put("ebayUserIdBuyer",userId);
    orderMap.put("eiasTokenBuyer",eiasTokenBuyer);
    orderMap.put("productId",SKU);
    orderMap.put("buyItNowPrice",buyItNowPrice);
    orderMap.put("currency",currency);
    orderMap.put("viewItemURL",viewItemURL);
    orderMap.put("orderId",orderId);
    orderMap.put("createdDate",createdDate);
    orderMap.put("paidTime",paidTime);
    orderMap.put("transactionPrice",transactionPrice);
    orderMap.put("buyer",buyer);
    orderMap.put("emailBuyer",emailBuyer);
    orderMap.put("checkoutStatus",checkoutStatus.substring(8));
    orderMap.put("amountPaid",amountPaid);
    orderMap.put("quantityPurchased",quantityPurchased);
    orderMap.put("itemSold",itemSold);
    orderMap.put("paymentMethod",paymentMethod);
    orderMap.put("buyerName",address.get("buyerName").toString());
    orderMap.put("shippingAddressCityName",address.get("shippingAddressCityName").toString());
    orderMap.put("shippingAddressCountry",address.get("shippingAddressCountry").toString());
    orderMap.put("countryName",address.get("countryName").toString());
    orderMap.put("shippingAddressPhone",address.get("shippingAddressPhone").toString());
    orderMap.put("shippingAddressPostalCode",address.get("shippingAddressPostalCode").toString());
    orderMap.put("shippingAddressStateOrProvince",address.get("shippingAddressStateOrProvince").toString());
    orderMap.put("shippingAddressStreet",address.get("shippingAddressStreet").toString());
    if (UtilValidate.isNotEmpty(address.get("shippingAddressStreet1"))) {
      orderMap.put("shippingAddressStreet1",address.get("shippingAddressStreet1").toString());
    }
    if (UtilValidate.isNotEmpty(address.get("shippingAddressStreet2"))) {
      orderMap.put("shippingAddressStreet2",address.get("shippingAddressStreet2").toString());
    }
    orderMap.put("shippingService",shippingService);
    orderMap.put("shippingServiceCost",shippingServiceCost);
    orderMap.put("shippingTotalAdditionalCost",shippingTotalAdditionalCost);
    orderMap.put("shippedTime",shippedTime);
    orderMap.put("salesTaxAmount",salesTaxAmount);
    orderMap.put("salesTaxPercent",salesTaxPercent);
  }
  return orderMap;
}
