{
  try {
    changeState("open.running");
  }
 catch (  InvalidState is) {
    throw new CannotStart(is.getMessage(),is);
  }
catch (  TransitionNotAllowed tna) {
    throw new CannotStart(tna.getMessage(),tna);
  }
  boolean limitAfterStart=getDefinitionObject().getBoolean("limitAfterStart").booleanValue();
  if (limitAfterStart && getDefinitionObject().get("limitService") != null && !getDefinitionObject().getString("limitService").equals("")) {
    Debug.logVerbose("[WfActivity.init]: limit service is after start, setting up now.",module);
    setLimitService();
  }
  Map context=processContext();
  context.put("previousActivity",workEffortId);
  this.setProcessContext(context);
  try {
    GenericValue v=getRuntimeObject();
    v.set("actualStartDate",UtilDateTime.nowTimestamp());
    v.store();
  }
 catch (  GenericEntityException e) {
    Debug.logWarning("Could not set 'actualStartDate'.",module);
    e.printStackTrace();
  }
  String type=getDefinitionObject().getString("activityTypeEnumId");
  if (type == null)   throw new WfException("Illegal activity type");
  WfActivityAbstractImplementation executor=WfActivityImplementationFact.getConcretImplementation(type,this);
  executor.run();
  this.setResult(executor.getResult());
  if (executor.isComplete())   this.checkComplete();
}
