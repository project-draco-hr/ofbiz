{
  if (delegator == null) {
    throw new IllegalArgumentException("The delegator passed to countHitSinceStart cannot be null");
  }
  String id=makeIdTenantAware(baseId,delegator);
  ServerHitBin bin=null;
switch (type) {
case REQUEST:
    bin=requestSinceStarted.get(id);
  break;
case EVENT:
bin=eventSinceStarted.get(id);
break;
case VIEW:
bin=viewSinceStarted.get(id);
break;
case ENTITY:
bin=entitySinceStarted.get(id);
break;
case SERVICE:
bin=serviceSinceStarted.get(id);
break;
}
if (bin == null) {
synchronized (ServerHitBin.class) {
switch (type) {
case REQUEST:
bin=requestSinceStarted.get(id);
break;
case EVENT:
bin=eventSinceStarted.get(id);
break;
case VIEW:
bin=viewSinceStarted.get(id);
break;
case ENTITY:
bin=entitySinceStarted.get(id);
break;
case SERVICE:
bin=serviceSinceStarted.get(id);
break;
}
if (bin == null) {
bin=new ServerHitBin(id,type,false,delegator);
switch (type) {
case REQUEST:
requestSinceStarted.put(id,bin);
break;
case EVENT:
eventSinceStarted.put(id,bin);
break;
case VIEW:
viewSinceStarted.put(id,bin);
break;
case ENTITY:
entitySinceStarted.put(id,bin);
break;
case SERVICE:
serviceSinceStarted.put(id,bin);
break;
}
}
}
}
bin.addHit(startTime,runningTime);
if (isOriginal) countHitSinceStart("GLOBAL",type,startTime,runningTime,false,delegator);
}
