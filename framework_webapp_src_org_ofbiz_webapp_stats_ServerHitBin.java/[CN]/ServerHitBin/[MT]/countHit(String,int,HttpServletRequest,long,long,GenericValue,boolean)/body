{
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  if (delegator == null) {
    String delegatorName=(String)request.getSession().getAttribute("delegatorName");
    delegator=DelegatorFactory.getDelegator(delegatorName);
  }
  if (delegator == null) {
    throw new IllegalArgumentException("In countHit could not find a delegator or delegatorName to work from");
  }
  String id=makeIdTenantAware(baseId,delegator);
  ServerHitBin bin=null;
  Deque<ServerHitBin> binList=null;
switch (type) {
case REQUEST:
    binList=requestHistory.get(id);
  break;
case EVENT:
binList=eventHistory.get(id);
break;
case VIEW:
binList=viewHistory.get(id);
break;
case ENTITY:
binList=entityHistory.get(id);
break;
case SERVICE:
binList=serviceHistory.get(id);
break;
}
if (binList == null) {
binList=new ConcurrentLinkedDeque<ServerHitBin>();
Deque<ServerHitBin> listFromMap=null;
switch (type) {
case REQUEST:
listFromMap=requestHistory.putIfAbsent(id,binList);
break;
case EVENT:
listFromMap=eventHistory.putIfAbsent(id,binList);
break;
case VIEW:
listFromMap=viewHistory.putIfAbsent(id,binList);
break;
case ENTITY:
listFromMap=entityHistory.putIfAbsent(id,binList);
break;
case SERVICE:
listFromMap=serviceHistory.putIfAbsent(id,binList);
break;
}
binList=listFromMap != null ? listFromMap : binList;
}
do {
bin=binList.peek();
if (bin == null) {
binList.addFirst(new ServerHitBin(id,type,true,delegator));
}
}
 while (bin == null);
long toTime=startTime + runningTime;
while (bin.limitLength && toTime > bin.endTime) {
if (bin.getNumberHits() > 0) {
if (EntityUtilProperties.propertyValueEqualsIgnoreCase("serverstats","stats.persist." + ServerHitBin.typeIds[type] + ".bin","true",delegator)) {
GenericValue serverHitBin=delegator.makeValue("ServerHitBin");
serverHitBin.set("contentId",bin.id);
serverHitBin.set("hitTypeId",ServerHitBin.typeIds[bin.type]);
serverHitBin.set("binStartDateTime",new java.sql.Timestamp(bin.startTime));
serverHitBin.set("binEndDateTime",new java.sql.Timestamp(bin.endTime));
serverHitBin.set("numberHits",Long.valueOf(bin.getNumberHits()));
serverHitBin.set("totalTimeMillis",Long.valueOf(bin.getTotalRunningTime()));
serverHitBin.set("minTimeMillis",Long.valueOf(bin.getMinTime()));
serverHitBin.set("maxTimeMillis",Long.valueOf(bin.getMaxTime()));
if (VisitHandler.address != null) {
serverHitBin.set("serverIpAddress",VisitHandler.address.getHostAddress());
serverHitBin.set("serverHostName",VisitHandler.address.getHostName());
}
try {
delegator.createSetNextSeqId(serverHitBin);
}
 catch (GenericEntityException e) {
Debug.logError(e,"Could not save ServerHitBin:",module);
}
}
}
 else {
binList.pollFirst();
}
bin=new ServerHitBin(bin,bin.endTime + 1);
binList.addFirst(bin);
}
bin.addHit(runningTime);
if (isOriginal) {
try {
bin.saveHit(request,startTime,runningTime,userLogin);
}
 catch (GenericEntityException e) {
Debug.logWarning("Error saving ServerHit: " + e.toString(),module);
}
}
if (!id.startsWith("GLOBAL")) {
countHitSinceStart(id,type,runningTime,delegator);
if (isOriginal) {
countHitSinceStart(makeIdTenantAware("GLOBAL",delegator),type,runningTime,delegator);
}
}
if (id.indexOf('.') > 0) {
countHit(id.substring(0,id.lastIndexOf('.')),type,request,startTime,runningTime,userLogin,false);
}
if (isOriginal) {
countHit("GLOBAL",type,request,startTime,runningTime,userLogin,false);
}
}
