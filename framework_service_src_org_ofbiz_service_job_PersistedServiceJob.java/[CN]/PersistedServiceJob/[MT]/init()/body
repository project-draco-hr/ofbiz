{
  super.init();
  try {
    jobValue.refresh();
  }
 catch (  GenericEntityException e) {
    throw new InvalidJobException("Unable to refresh JobSandbox value",e);
  }
  if (jobValue.getTimestamp("cancelDateTime") != null) {
    throw new InvalidJobException("Job [" + getJobId() + "] was cancelled");
  }
  String instanceId=UtilProperties.getPropertyValue("general.properties","unique.instanceId","ofbiz0");
  if (!instanceId.equals(jobValue.getString("runByInstanceId"))) {
    throw new InvalidJobException("Job has been accepted by a different instance!");
  }
  jobValue.set("startDateTime",UtilDateTime.nowTimestamp());
  jobValue.set("statusId","SERVICE_RUNNING");
  try {
    jobValue.store();
  }
 catch (  GenericEntityException e) {
    throw new InvalidJobException("Unable to set the startDateTime and statusId on the current job [" + getJobId() + "]; not running!",e);
  }
  if (Debug.verboseOn()) {
    Debug.logVerbose("Job [" + getJobId() + "] running",module);
  }
  long maxRecurrenceCount=-1;
  long currentRecurrenceCount=0;
  TemporalExpression expr=null;
  RecurrenceInfo recurrence=getRecurrenceInfo();
  if (recurrence != null) {
    Debug.logWarning("Persisted Job [" + getJobId() + "] references a RecurrenceInfo, recommend using TemporalExpression instead",module);
    currentRecurrenceCount=recurrence.getCurrentCount();
    expr=RecurrenceInfo.toTemporalExpression(recurrence);
  }
  if (expr == null && UtilValidate.isNotEmpty(jobValue.getString("tempExprId"))) {
    try {
      expr=TemporalExpressionWorker.getTemporalExpression(this.delegator,jobValue.getString("tempExprId"));
    }
 catch (    GenericEntityException e) {
      throw new RuntimeException(e.getMessage());
    }
  }
  if (jobValue.get("maxRecurrenceCount") != null) {
    maxRecurrenceCount=jobValue.getLong("maxRecurrenceCount").longValue();
  }
  if (jobValue.get("currentRecurrenceCount") != null) {
    currentRecurrenceCount=jobValue.getLong("currentRecurrenceCount").longValue();
  }
  if (maxRecurrenceCount != -1) {
    currentRecurrenceCount++;
    jobValue.set("currentRecurrenceCount",currentRecurrenceCount);
  }
  try {
    if (expr != null && (maxRecurrenceCount == -1 || currentRecurrenceCount <= maxRecurrenceCount)) {
      if (recurrence != null) {
        recurrence.incrementCurrentCount();
      }
      Calendar next=expr.next(Calendar.getInstance());
      if (next != null) {
        createRecurrence(next.getTimeInMillis(),false);
      }
    }
  }
 catch (  GenericEntityException e) {
    throw new InvalidJobException(e);
  }
  if (Debug.infoOn())   Debug.logInfo("Job  [" + getJobName() + "] Id ["+ getJobId()+ "] -- Next runtime: "+ new Date(nextRecurrence),module);
}
