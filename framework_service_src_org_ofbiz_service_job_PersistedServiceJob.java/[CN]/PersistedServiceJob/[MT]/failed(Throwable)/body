{
  super.failed(t);
  if (nextRecurrence == -1) {
    if (this.canRetry()) {
      Calendar cal=Calendar.getInstance();
      cal.add(Calendar.MINUTE,ServiceConfigUtil.getFailedRetryMin());
      long next=cal.getTimeInMillis();
      try {
        createRecurrence(next,true);
      }
 catch (      GenericEntityException e) {
        Debug.logError(e,"Unable to re-schedule job [" + getJobId() + "]: ",module);
      }
      Debug.logInfo("Persisted Job [" + getJobId() + "] Failed Re-Scheduling : "+ next,module);
    }
 else {
      Debug.logWarning("Persisted Job [" + getJobId() + "] Failed - Max Retry Hit; not re-scheduling",module);
    }
  }
  jobValue.set("statusId","SERVICE_FAILED");
  jobValue.set("finishDateTime",UtilDateTime.nowTimestamp());
  jobValue.set("jobResult",StringUtils.substring(t.getMessage(),0,255));
  try {
    jobValue.store();
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,"Cannot update the JobSandbox entity",module);
  }
}
