{
  String paths=getPathsString(helperName);
  List<URL> urlList=new LinkedList<URL>();
  if (readerNames != null) {
    for (    Object readerInfo : readerNames) {
      String readerName=null;
      if (readerInfo instanceof String) {
        readerName=(String)readerInfo;
      }
 else       if (readerInfo instanceof ReadData) {
        readerName=((ReadData)readerInfo).getReaderName();
      }
 else       if (readerInfo instanceof Element) {
        readerName=((Element)readerInfo).getAttribute("reader-name");
      }
 else {
        throw new IllegalArgumentException("Reader name list does not contain String(s) or Element(s)");
      }
      readerName=readerName.trim();
      if ("tenant".equals(readerName) && !EntityUtil.isMultiTenantEnabled()) {
        continue;
      }
      EntityDataReader entityDataReaderInfo=null;
      try {
        entityDataReaderInfo=EntityConfigUtil.getEntityDataReader(readerName);
        if (entityDataReaderInfo == null) {
          Debug.logInfo("Could not find entity-data-reader named: " + readerName + ". Creating a new reader with this name. ",module);
          entityDataReaderInfo=new EntityDataReader(readerName);
        }
      }
 catch (      GenericEntityConfException e) {
        Debug.logWarning(e,"Exception thrown while getting entity data reader config: ",module);
      }
      if (entityDataReaderInfo != null) {
        for (        Resource resourceElement : entityDataReaderInfo.getResourceList()) {
          ResourceHandler handler=new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME,resourceElement.getLoader(),resourceElement.getLocation());
          try {
            urlList.add(handler.getURL());
          }
 catch (          GenericConfigException e) {
            String errorMsg="Could not get URL for Main ResourceHandler: " + e.toString();
            Debug.logWarning(errorMsg,module);
          }
        }
        for (        ComponentConfig.EntityResourceInfo componentResourceInfo : ComponentConfig.getAllEntityResourceInfos("data",componentName)) {
          if (readerName.equals(componentResourceInfo.readerName)) {
            ResourceHandler handler=componentResourceInfo.createResourceHandler();
            try {
              urlList.add(handler.getURL());
            }
 catch (            GenericConfigException e) {
              String errorMsg="Could not get URL for Component ResourceHandler: " + e.toString();
              Debug.logWarning(errorMsg,module);
            }
          }
        }
      }
 else {
        String errorMsg="Could not find entity-data-reader named: " + readerName;
        Debug.logWarning(errorMsg,module);
      }
    }
  }
 else {
    String errorMsg="Could not find datasource named: " + helperName;
    Debug.logWarning(errorMsg,module);
  }
  if (UtilValidate.isNotEmpty(paths)) {
    StringTokenizer tokenizer=new StringTokenizer(paths,";");
    while (tokenizer.hasMoreTokens()) {
      String path=tokenizer.nextToken().toLowerCase();
      File loadDir=new File(path);
      if (loadDir.exists() && loadDir.isDirectory()) {
        File[] files=loadDir.listFiles();
        List<File> tempFileList=new LinkedList<File>();
        for (        File file : files) {
          if (file.getName().toLowerCase().endsWith(".xml")) {
            tempFileList.add(file);
          }
        }
        Collections.sort(tempFileList);
        for (        File dataFile : tempFileList) {
          if (dataFile.exists()) {
            URL url=null;
            try {
              url=dataFile.toURI().toURL();
              urlList.add(url);
            }
 catch (            java.net.MalformedURLException e) {
              String xmlError="Error loading XML file \"" + dataFile.getAbsolutePath() + "\"; Error was: "+ e.getMessage();
              Debug.logError(xmlError,module);
            }
          }
 else {
            String errorMsg="Could not find file: \"" + dataFile.getAbsolutePath() + "\"";
            Debug.logError(errorMsg,module);
          }
        }
      }
    }
  }
  return urlList;
}
