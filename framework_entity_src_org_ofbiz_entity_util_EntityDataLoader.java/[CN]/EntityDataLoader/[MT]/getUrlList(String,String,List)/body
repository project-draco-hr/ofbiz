{
  String paths=getPathsString(helperName);
  List urlList=new LinkedList();
  if (readerNames != null) {
    Iterator readDataIter=readerNames.iterator();
    while (readDataIter.hasNext()) {
      Object readerInfo=readDataIter.next();
      String readerName=null;
      if (readerInfo instanceof String) {
        readerName=(String)readerInfo;
      }
 else       if (readerInfo instanceof Element) {
        readerName=((Element)readerInfo).getAttribute("reader-name");
      }
 else {
        throw new IllegalArgumentException("Reader name list does not contain String(s) or Element(s)");
      }
      EntityDataReaderInfo entityDataReaderInfo=EntityConfigUtil.getEntityDataReaderInfo(readerName);
      if (entityDataReaderInfo != null) {
        List resourceElements=entityDataReaderInfo.resourceElements;
        Iterator resIter=resourceElements.iterator();
        while (resIter.hasNext()) {
          Element resourceElement=(Element)resIter.next();
          ResourceHandler handler=new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME,resourceElement);
          try {
            urlList.add(handler.getURL());
          }
 catch (          GenericConfigException e) {
            String errorMsg="Could not get URL for Main ResourceHandler: " + e.toString();
            Debug.logWarning(errorMsg,module);
          }
        }
        List componentResourceInfos=ComponentConfig.getAllEntityResourceInfos("data",componentName);
        Iterator componentResourceInfoIter=componentResourceInfos.iterator();
        while (componentResourceInfoIter.hasNext()) {
          ComponentConfig.EntityResourceInfo componentResourceInfo=(ComponentConfig.EntityResourceInfo)componentResourceInfoIter.next();
          if (readerName.equals(componentResourceInfo.readerName)) {
            ResourceHandler handler=componentResourceInfo.createResourceHandler();
            try {
              urlList.add(handler.getURL());
            }
 catch (            GenericConfigException e) {
              String errorMsg="Could not get URL for Component ResourceHandler: " + e.toString();
              Debug.logWarning(errorMsg,module);
            }
          }
        }
      }
 else {
        String errorMsg="Could not find entity-date-reader named: " + readerName;
        Debug.logWarning(errorMsg,module);
      }
    }
  }
 else {
    String errorMsg="Could not find datasource named: " + helperName;
    Debug.logWarning(errorMsg,module);
  }
  if (paths != null && paths.length() > 0) {
    StringTokenizer tokenizer=new StringTokenizer(paths,";");
    while (tokenizer.hasMoreTokens()) {
      String path=tokenizer.nextToken().toLowerCase();
      File loadDir=new File(path);
      if (loadDir.exists() && loadDir.isDirectory()) {
        File[] files=loadDir.listFiles();
        List tempFileList=new LinkedList();
        for (int i=0; i < files.length; i++) {
          if (files[i].getName().toLowerCase().endsWith(".xml")) {
            tempFileList.add(files[i]);
          }
        }
        Collections.sort(tempFileList);
        Iterator tempFileIter=tempFileList.iterator();
        while (tempFileIter.hasNext()) {
          File dataFile=(File)tempFileIter.next();
          if (dataFile.exists()) {
            URL url=null;
            try {
              url=dataFile.toURI().toURL();
              urlList.add(url);
            }
 catch (            java.net.MalformedURLException e) {
              String xmlError="Error loading XML file \"" + dataFile.getAbsolutePath() + "\"; Error was: "+ e.getMessage();
              Debug.logError(xmlError,module);
            }
          }
 else {
            String errorMsg="Could not find file: \"" + dataFile.getAbsolutePath() + "\"";
            Debug.logError(errorMsg,module);
          }
        }
      }
    }
  }
  return urlList;
}
