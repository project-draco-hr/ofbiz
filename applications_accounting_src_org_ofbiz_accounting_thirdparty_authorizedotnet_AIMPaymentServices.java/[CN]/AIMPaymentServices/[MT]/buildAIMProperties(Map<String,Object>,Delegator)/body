{
  String paymentGatewayConfigId=(String)context.get("paymentGatewayConfigId");
  String configStr=(String)context.get("paymentConfig");
  if (configStr == null) {
    configStr="payment.properties";
  }
  GenericValue cc=(GenericValue)context.get("creditCard");
  String url=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"transactionUrl",configStr,"payment.authorizedotnet.url");
  String certificateAlias=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"certificateAlias",configStr,"payment.authorizedotnet.certificateAlias");
  String ver=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"apiVersion",configStr,"payment.authorizedotnet.version");
  String delimited=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"delimitedData",configStr,"payment.authorizedotnet.delimited");
  String delimiter=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"delimiterChar",configStr,"payment.authorizedotnet.delimiter");
  String cpVersion=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"cpVersion",configStr,"payment.authorizedotnet.cpVersion");
  String cpMarketType=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"cpMarketType",configStr,"payment.authorizedotnet.cpMarketType");
  String cpDeviceType=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"cpDeviceType",configStr,"payment.authorizedotnet.cpDeviceType");
  String method=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"method",configStr,"payment.authorizedotnet.method");
  String emailCustomer=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"emailCustomer",configStr,"payment.authorizedotnet.emailcustomer");
  String emailMerchant=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"emailMerchant",configStr,"payment.authorizedotnet.emailmerchant");
  String testReq=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"testMode",configStr,"payment.authorizedotnet.test");
  String relay=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"relayResponse",configStr,"payment.authorizedotnet.relay");
  String tranKey=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"tranKey",configStr,"payment.authorizedotnet.trankey");
  String login=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"userId",configStr,"payment.authorizedotnet.login");
  String password=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"pwd",configStr,"payment.authorizedotnet.password");
  String transDescription=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"transDescription",configStr,"payment.authorizedotnet.transdescription");
  if (UtilValidate.isEmpty(ver)) {
    ver="3.0";
  }
  if (UtilValidate.isEmpty(login)) {
    Debug.logInfo("the login property in " + configStr + " is not configured.",module);
  }
  if (UtilValidate.isEmpty(password) && !("3.1".equals(ver))) {
    Debug.logInfo("The password property in " + configStr + " is not configured.",module);
  }
  if ("3.1".equals(ver)) {
    if (tranKey == null || tranKey.length() <= 0) {
      Debug.logInfo("Trankey property required for version 3.1 reverting to 3.0",module);
      ver="3.0";
    }
  }
  if (UtilValidate.isNotEmpty(cpMarketType) && UtilValidate.isEmpty(cpVersion)) {
    cpVersion="1.0";
  }
  Properties props=new Properties();
  props.put("url",url);
  props.put("certificateAlias",certificateAlias);
  props.put("ver",ver);
  props.put("delimited",delimited);
  props.put("delimiter",delimiter);
  props.put("method",method);
  props.put("cpVersion",cpVersion);
  props.put("cpMarketType",cpMarketType);
  props.put("cpDeviceType",cpDeviceType);
  props.put("emailCustomer",emailCustomer);
  props.put("emailMerchant",emailMerchant);
  props.put("testReq",testReq);
  props.put("relay",relay);
  props.put("transDescription",transDescription);
  props.put("login",login);
  props.put("password",password);
  props.put("trankey",tranKey);
  if (cc != null) {
    props.put("cardtype",cc.get("cardType"));
  }
  if (AIMProperties == null) {
    AIMProperties=props;
  }
  if (isTestMode()) {
    Debug.logInfo("Created Authorize.Net properties file: " + props.toString(),module);
  }
  return props;
}
