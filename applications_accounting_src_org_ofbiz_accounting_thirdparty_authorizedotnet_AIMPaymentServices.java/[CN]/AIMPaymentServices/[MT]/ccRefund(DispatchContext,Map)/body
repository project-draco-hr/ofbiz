{
  GenericDelegator delegator=ctx.getDelegator();
  GenericValue orderPaymentPreference=(GenericValue)context.get("orderPaymentPreference");
  GenericValue creditCard=null;
  try {
    creditCard=delegator.getRelatedOne("CreditCard",orderPaymentPreference);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError("Unable to obtain cc information from payment preference");
  }
  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(orderPaymentPreference);
  if (authTransaction == null) {
    return ServiceUtil.returnError("No authorization transaction found for the OrderPaymentPreference; cannot Refund");
  }
  context.put("creditCard",creditCard);
  context.put("authTransaction",authTransaction);
  Map results=ServiceUtil.returnSuccess();
  Map request=new HashMap();
  Properties props=buildAIMProperties(context);
  buildMerchantInfo(context,props,request);
  buildGatewayResponeConfig(context,props,request);
  buildEmailSettings(context,props,request);
  props.put("transType","CREDIT");
  props.put("cardtype",(String)creditCard.get("cardType"));
  buildRefundTransaction(context,props,request);
  Map validateResults=validateRequest(context,props,request);
  String respMsg=(String)validateResults.get(ModelService.RESPONSE_MESSAGE);
  if (respMsg != null) {
    if (respMsg.equals(ModelService.RESPOND_ERROR)) {
      results.put(ModelService.ERROR_MESSAGE,"Validation Failed - invalid values");
      return results;
    }
  }
  Map reply=processCard(request,props);
  results.putAll(processRefundTransResult(reply));
  boolean refundResult=((Boolean)results.get("refundResult")).booleanValue();
  String refundFlag=(String)results.get("refundFlag");
  if (!refundResult && isVoidableResponse(refundFlag)) {
    boolean canDoVoid=false;
    if (VOIDABLE_RESPONSES_TIME_LIMIT.contains(refundFlag)) {
      Calendar startCalendar=UtilDateTime.toCalendar(UtilDateTime.nowTimestamp());
      startCalendar.add(Calendar.DATE,-TIME_LIMIT_VERIFICATION_DAYS);
      Timestamp startTimestamp=new java.sql.Timestamp(startCalendar.getTime().getTime());
      Timestamp authTimestamp=authTransaction.getTimestamp("transactionDate");
      if (startTimestamp.before(authTimestamp)) {
        canDoVoid=true;
      }
    }
 else {
      canDoVoid=true;
    }
    if (canDoVoid) {
      Debug.logWarning("Refund was unsuccessful; will now attempt a VOID transaction.",module);
      Double authAmountObj=authTransaction.getDouble("amount");
      Double refundAmountObj=(Double)context.get("refundAmount");
      double authAmount=authAmountObj != null ? authAmountObj.doubleValue() : 0.0;
      double refundAmount=refundAmountObj != null ? refundAmountObj.doubleValue() : 0.0;
      if (authAmount == refundAmount) {
        reply=voidTransaction(authTransaction,context);
        if (ServiceUtil.isError(reply))         return reply;
        results=ServiceUtil.returnSuccess();
        results.putAll(processRefundTransResult(reply));
        return results;
      }
 else {
        return ServiceUtil.returnFailure("Cannot perform a VOID transaction: authAmount [" + authAmount + "] is different than voidAmount ["+ refundAmount+ "]");
      }
    }
  }
  return results;
}
