{
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=ctx.getDelegator();
  GenericValue orderPaymentPreference=(GenericValue)context.get("orderPaymentPreference");
  GenericValue creditCard=null;
  try {
    creditCard=delegator.getRelatedOne("CreditCard",orderPaymentPreference);
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentUnableToGetCCInfo",locale));
  }
  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(orderPaymentPreference);
  if (authTransaction == null) {
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentTransactionAuthorizationNotFoundCannotCapture",locale));
  }
  context.put("creditCard",creditCard);
  context.put("authTransaction",authTransaction);
  Map<String,Object> results=ServiceUtil.returnSuccess();
  Map<String,Object> request=FastMap.newInstance();
  Properties props=buildAIMProperties(context,delegator);
  buildMerchantInfo(context,props,request);
  buildGatewayResponeConfig(context,props,request);
  buildCustomerBillingInfo(context,props,request);
  buildEmailSettings(context,props,request);
  request.put("x_Invoice_Num","Order " + orderPaymentPreference.getString("orderId"));
  props.put("transType","PRIOR_AUTH_CAPTURE");
  props.put("cardtype",creditCard.get("cardType"));
  buildCaptureTransaction(context,props,request);
  Map<String,Object> validateResults=validateRequest(context,props,request);
  String respMsg=(String)validateResults.get(ModelService.RESPONSE_MESSAGE);
  if (ModelService.RESPOND_ERROR.equals(respMsg)) {
    results.put(ModelService.ERROR_MESSAGE,"Validation Failed - invalid values");
    return results;
  }
  Map<String,Object> reply=processCard(request,props,locale);
  processCaptureTransResult(request,reply,results);
  if (results.get("captureRefNum") == null) {
    return ServiceUtil.returnError((String)results.get("captureMessage"));
  }
  return results;
}
