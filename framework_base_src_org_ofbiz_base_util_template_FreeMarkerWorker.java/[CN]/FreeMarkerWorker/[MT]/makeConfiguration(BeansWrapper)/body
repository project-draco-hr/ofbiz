{
  Configuration newConfig=new Configuration();
  newConfig.setObjectWrapper(wrapper);
  newConfig.setSharedVariable("Static",wrapper.getStaticModels());
  newConfig.setLocalizedLookup(false);
  newConfig.setSharedVariable("StringUtil",new BeanModel(StringUtil.INSTANCE,wrapper));
  newConfig.setTemplateLoader(new FlexibleTemplateLoader());
  newConfig.setAutoImports(UtilProperties.getProperties("freemarkerImports"));
  newConfig.setTemplateExceptionHandler(new FreeMarkerWorker.OFBizTemplateExceptionHandler());
  try {
    newConfig.setSetting("datetime_format","yyyy-MM-dd HH:mm:ss.SSS");
    newConfig.setSetting("number_format","0.##########");
  }
 catch (  TemplateException e) {
    Debug.logError("Unable to set date/time and number formats in FreeMarker: " + e,module);
  }
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  Enumeration<URL> resources;
  try {
    resources=loader.getResources("freemarkerTransforms.properties");
  }
 catch (  IOException e) {
    Debug.logError(e,"Could not load list of freemarkerTransforms.properties",module);
    throw UtilMisc.initCause(new InternalError(e.getMessage()),e);
  }
  while (resources.hasMoreElements()) {
    URL propertyURL=resources.nextElement();
    Debug.logInfo("loading properties: " + propertyURL,module);
    Properties props=UtilProperties.getProperties(propertyURL);
    if (props == null || props.isEmpty()) {
      Debug.logError("Unable to locate properties file " + propertyURL,module);
    }
 else {
      loadTransforms(loader,props,newConfig);
    }
  }
  return newConfig;
}
